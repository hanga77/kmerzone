(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext9(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext9(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState56(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef12(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect27(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback17(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo37(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext9;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback17;
          exports.useContext = useContext9;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect27;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo37;
          exports.useReducer = useReducer;
          exports.useRef = useRef12;
          exports.useState = useState56;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React63 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React63.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment16 = 7;
          var Mode2 = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              // $FlowIssue symbol is perfectly valid here
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment16:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode2:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              // The display name for this tags come from the user-provided type:
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React63.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              // These are reserved SVG and MathML elements.
              // We don't mind this list too much because we expect it to never grow.
              // The alternative is to track the namespace in a few places which is convoluted.
              // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root3, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root3) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root3);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root3) {
            return getHighestPriorityLanes(root3.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root3, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root3, lanes) {
            return (lanes & root3.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root3.suspendedLanes = NoLanes;
              root3.pingedLanes = NoLanes;
            }
            var eventTimes = root3.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root3, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root3, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root3, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            var memoizedUpdaters = root3.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root3, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root3) {
            var currentState = root3.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              // Used by SimpleEventPlugin:
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              // Used by polyfills:
              // eslint-disable-next-line no-fallthrough
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              // Only enableCreateEventHandleAPI:
              // eslint-disable-next-line no-fallthrough
              case "beforeblur":
              case "afterblur":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset) {
            var node = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer: while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              // Track the input node that has focus.
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              // Don't fire the event while the user is dragging. This matches the
              // semantics of the native select event.
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              // Chrome and IE fire non-standard event when selection is changed (and
              // sometimes when it hasn't). IE's event fires out of order with respect
              // to key and input events on deletion, so we discard it.
              //
              // Firefox doesn't support selectionchange, so check selection status
              // after each key entry. The selection changes after keydown and before
              // keyup, but we check on keydown as well in the case of holding down a
              // key, when multiple keydown events are fired but only one keyup is.
              // This is also our approach for IE handling, for the reason above.
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              // falls through
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              /* falls through */
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              /* falls through */
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              // TODO: Disabled elements should not respond to mouse events
              /* falls through */
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop: while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                // but
                case "option":
                  return tag === "#text";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                // No special behavior since these rules fall back to "in body" mode for
                // all except special table nodes which cause bad parsing behavior anyway.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                case "colgroup":
                  return tag === "col" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null) switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null) ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context) ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root3 = node.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root3, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              // Intentional fallthrough
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React63.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment16) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment16) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root3 = getWorkInProgressRoot();
            var identifierPrefix = root3.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root3, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    root3.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    if (root3 !== null) {
                      root3.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root3, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root3, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root3 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root3 = getWorkInProgressRoot();
                if (root3 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root3 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment16:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode2:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment16:
              case Mode2:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root3 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root3 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root3, firstChild) {
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root3 = parentFiber.stateNode;
                          root3.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer: while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings: while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              // eslint-disable-next-line-no-fallthrough
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root3, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent: while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              // eslint-disable-next-line-no-fallthrough
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root3, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root3);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root3, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root3);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root3.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root3, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root3,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root3, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root3, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root3 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root3, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
            var current2 = root3.current;
            current2.lanes = lane;
            markRootUpdated(root3, lane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root3, currentTime) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root3.callbackNode = null;
              root3.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root3.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root3, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root3, lanes);
                var finishedWork = root3.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root3, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root3, NoLanes);
                    markRootSuspended$1(root3, lanes);
                    ensureRootIsScheduled(root3, now());
                    throw _fatalError;
                  }
                }
                root3.finishedWork = finishedWork;
                root3.finishedLanes = lanes;
                finishConcurrentRender(root3, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root3, now());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function recoverFromConcurrentError(root3, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root3)) {
              var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root3.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root3, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              // Flow knows about invariant, so it complains if I add a break
              // statement, but eslint doesn't know about invariant, so it complains
              // if I do. eslint-disable-next-line no-fallthrough
              case RootErrored: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root3, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root3, now());
              return null;
            }
            var exitStatus = renderRootSync(root3, lanes);
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root3, now());
            return null;
          }
          function flushRoot(root3, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root3, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root3, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            var rootWorkInProgress = createWorkInProgress(root3.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root3, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (finishedWork === root3.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root3, finishedWork, lanes);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root3, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root3.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root3.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root3.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root3.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root3.current);
            commitPassiveMountEffects(root3, root3.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root3, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root3.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root3 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root3;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root3);
            {
              var stateNode = root3.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root3 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root3, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root3, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
            {
              if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode2;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_SCOPE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_CACHE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_TRACING_MARKER_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_DEBUG_TRACING_MODE_TYPE:
                // eslint-disable-next-line no-fallthrough
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment16, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          var ReactVersion = "18.2.0";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root3.context = getContextForSubtree(null);
            var current2 = root3.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root3, lane, eventTime);
            return root3;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(current$1, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
              entangleTransitions(root3, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root3 = fiber.stateNode;
                if (isRootDehydrated(root3)) {
                  var lanes = getHighestPriorityPendingLanes(root3);
                  flushRoot(root3, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root4 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root3.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root3, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root3 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root3);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root3 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root3);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              var root3 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root3;
              markContainerAsRoot(root3.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root3;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root3;
            if (!maybeRoot) {
              root3 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root3 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root3, parentComponent, callback);
            }
            return getPublicRootInstance(root3);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React63 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React63.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self);
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (isArray(node)) {
                for (var i = 0; i < node.length; i++) {
                  var child = node[i];
                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx91 = jsxWithValidationDynamic;
          var jsxs79 = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx91;
          exports.jsxs = jsxs79;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // index.tsx
  var import_client = __toESM(require_client());

  // App.tsx
  var import_react65 = __toESM(require_react());

  // components/Icons.tsx
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  var LogoIcon = ({ className, logoUrl }) => {
    const logoImage = logoUrl ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("img", { src: logoUrl, alt: "Kmer Zone Logo", className: "h-10 object-contain" }) : /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { viewBox: "0 0 36 36", className: "h-10 w-10", "aria-hidden": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { fill: "#FCD116", d: "M17.4,32.3c6.7,0,13.2-3.2,13.2-11.4c0-5.3-2.6-10.1-8.2-11.4c-2.3-0.5-5.7,1.1-7.2,2.8c-2.7,3.1-2,7.4,0.3,9.7C17.2,23.1,17.4,32.3,17.4,32.3z" }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { fill: "#CE1126", d: "M20.2,20.6c0-4.7-3.8-8.5-8.5-8.5s-8.5,3.8-8.5,8.5s3.8,8.5,8.5,8.5S20.2,25.3,20.2,20.6z M15.9,20.6c0-2.3-1.9-4.2-4.2-4.2s-4.2,1.9-4.2,4.2s1.9,4.2,4.2,4.2S15.9,22.9,15.9,20.6z" }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { fill: "#84CC16", d: "M30.4,10.1C29.3,4.9,23.4,2,18.2,3.1S8,8.4,9.1,13.6c0.6,2.8,2.7,5,5.4,5.6C21.9,20.5,28.8,16.5,30.4,10.1z" })
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: `flex items-center gap-2 ${className || ""}`, children: [
      logoImage,
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: "text-2xl font-bold tracking-tight text-kmer-green dark:text-gray-200", style: { fontFamily: "Poppins, sans-serif" }, children: "Kmer Zone" })
    ] });
  };
  var SearchIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" }) });
  var ShoppingCartIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" }) });
  var UserCircleIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var MenuIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M4 6h16M4 12h16M4 18h16" }) });
  var XIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 18L18 6M6 6l12 12" }) });
  var CheckIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M5 13l4 4L19 7" }) });
  var ArrowLeftIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M10 19l-7-7m0 0l7-7m-7 7h18" }) });
  var TrashIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" }) });
  var StarIcon = ({ className, filled = true, title, ...rest }) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { className, fill: filled ? "currentColor" : "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, ...rest, children: [
    title && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("title", { children: title }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z" })
  ] });
  var StarPlatinumIcon = ({ className, title, ...rest }) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { ...rest, fill: "currentColor", viewBox: "0 0 24 24", className: `text-gray-400 ${className || ""}`, children: [
    title && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("title", { children: title }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" })
  ] });
  var SparklesIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456zM16.898 20.562L16.5 21.75l-.398-1.188a2.25 2.25 0 00-1.423-1.423L13.5 18.75l1.188-.398a2.25 2.25 0 001.423-1.423L16.5 15.75l.398 1.188a2.25 2.25 0 001.423 1.423L19.5 18.75l-1.188.398a2.25 2.25 0 00-1.423 1.423z" }) });
  var ShoppingBagIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15.75 10.5V6a3.75 3.75 0 10-7.5 0v4.5m11.356-1.993l1.263 12c.07.658-.463 1.243-1.119 1.243H4.25a1.125 1.125 0 01-1.12-1.243l1.264-12A1.125 1.125 0 015.513 7.5h12.974c.576 0 1.059.435 1.119 1.007zM8.625 10.5a.375.375 0 11-.75 0 .375.375 0 01.75 0zm7.5 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" }) });
  var CreditCardIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M2.25 8.25h19.5M2.25 9h19.5m-16.5 5.25h6m-6 2.25h3m-3.75 3h15a2.25 2.25 0 002.25-2.25V6.75A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25v10.5A2.25 2.25 0 004.5 19.5z" }) });
  var TruckIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M8.25 18.75a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m3 0h6m-9 0H3.375a1.125 1.125 0 01-1.125-1.125V14.25m17.25 4.5a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m3 0h1.125c.621 0 1.125-.504 1.125-1.125V14.25m-17.25 4.5v-9m17.25 9v-9m-9-4.5h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5H18v-3a1.5 1.5 0 00-1.5-1.5H15v4.5zM6 6.75H3.75v8.25a1.125 1.125 0 001.125 1.125h1.125" }) });
  var ChatBubbleBottomCenterTextIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M8.625 12a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H8.25m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H12m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.76 9.76 0 01-2.555-.337A5.972 5.972 0 015.41 20.97a5.969 5.969 0 01-.474-.065 4.48 4.48 0 00.978-2.025c.09-.455.09-.934.09-1.423V12c0-4.556 4.03-8.25 9-8.25s9 3.694 9 8.25z" }) });
  var HeartIcon = ({ className, filled }) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { className, xmlns: "http://www.w3.org/2000/svg", fill: filled ? "#CE1126" : "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: filled ? "#CE1126" : "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z" }) });
  var TagIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 6h.008v.008H6V6z" })
  ] });
  var BuildingStorefrontIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M13.5 21v-7.5A.75.75 0 0114.25 12h.01a.75.75 0 01.75.75v7.5m-3.75-7.5A.75.75 0 0110.5 12h.01a.75.75 0 01.75.75v7.5m-3.75 0v-7.5A.75.75 0 017.5 12h.01a.75.75 0 01.75.75v7.5m-3.75 0A.75.75 0 013.75 12h.01a.75.75 0 01.75.75v7.5m0 0H3.75m0 0h16.5m0 0V6.75A.75.75 0 0020.25 6h-1.5a.75.75 0 00-.75.75v1.5m0 0v7.5m0-7.5h-1.5m0 0V6.75A.75.75 0 0016.5 6h-1.5a.75.75 0 00-.75.75v1.5m0 0V15m0-1.5H12m0 0V6.75A.75.75 0 0011.25 6h-1.5a.75.75 0 00-.75.75v1.5m0 0v7.5m0-7.5H6.75m0 0v7.5m0-7.5H3.75m0 0v7.5m16.5 0v-7.5A.75.75 0 0020.25 12h-1.5a.75.75 0 00-.75.75v7.5" }) });
  var BecomeSellerIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M7.17 6c-2.2 0-3.99 1.79-3.99 4v4c0 2.21 1.79 4 3.99 4h.83v-12h-.83zm2.83 12h2V6h-2v12zm4-12v12h2V6h-2zm4 3v9h2V9h-2z" }) });
  var PencilSquareIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" }) });
  var PhotoIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" }) });
  var CheckCircleIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var XCircleIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var Cog8ToothIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M10.5 6h9.75M10.5 6a1.5 1.5 0 11-3 0m3 0a1.5 1.5 0 10-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-9.75 0h9.75" }) });
  var SunIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" }) });
  var MoonIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" }) });
  var ClipboardDocumentListIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9 12h3.75M9 15h3.75M9 18h3.75m3 .75H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08m-5.801 0c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75 2.25 2.25 0 00-.1-.664m-5.8 0A2.251 2.251 0 0113.5 2.25H15c1.012 0 1.867.668 2.15 1.586m-5.8 0c-.376.023-.75.05-1.124.08C9.095 4.01 8.25 4.973 8.25 6.108V8.25m0 0H4.875c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V9.375c0-.621-.504-1.125-1.125-1.125H8.25zM6.75 12h.008v.008H6.75V12zm0 3h.008v.008H6.75V15zm0 3h.008v.008H6.75V18z" }) });
  var AcademicCapIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M4.26 10.147a60.436 60.436 0 00-.491 6.347A48.627 48.627 0 0112 20.904a48.627 48.627 0 018.232-4.41 60.46 60.46 0 00-.491-6.347m-15.482 0a50.57 50.57 0 00-2.658-.813A59.905 59.905 0 0112 3.493a59.902 59.902 0 0110.399 5.84c-.896.248-1.783.52-2.658.814m-15.482 0A50.697 50.697 0 0112 13.489a50.702 50.702 0 017.74-3.342M6.75 15a.75.75 0 100-1.5.75.75 0 000 1.5z" }) });
  var ChevronDownIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M19.5 8.25l-7.5 7.5-7.5-7.5" }) });
  var ChevronLeftIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15.75 19.5L8.25 12l7.5-7.5" }) });
  var ChevronRightIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M8.25 4.5l7.5 7.5-7.5 7.5" }) });
  var CalendarDaysIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25A2.25 2.25 0 0118.75 21H5.25A2.25 2.25 0 013 18.75z" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3 12h18" })
  ] });
  var ClockIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var ExclamationTriangleIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" }) });
  var UsersIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M18 18.72a9.094 9.094 0 003.741-.479 3 3 0 00-4.682-2.72m-7.5-2.962a3.75 3.75 0 100-7.5 3.75 3.75 0 000 7.5zM10.5 18.75a9 9 0 10-18 0v.01c0 .417.05.826.15 1.226a9.097 9.097 0 003.428 5.058 9.096 9.096 0 005.37 1.476A9.095 9.095 0 0010.5 18.75z" }) });
  var UserGroupIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15 19.128a9.38 9.38 0 002.625.372 9.337 9.337 0 004.121-.952 4.125 4.125 0 00-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 018.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0111.964-4.67c.12-.14.237-.283.36-.431m-7.464 4.875A7.5 7.5 0 0112 15.75c1.652 0 3.173.69 4.262 1.824M12 12a2.25 2.25 0 100-4.5 2.25 2.25 0 000 4.5z" }) });
  var MapPinIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15 10.5a3 3 0 11-6 0 3 3 0 016 0z" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z" })
  ] });
  var BellIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M14.857 17.082a23.848 23.848 0 005.454-1.31A8.967 8.967 0 0118 9.75V9A6 6 0 006 9v.75a8.967 8.967 0 01-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 01-5.714 0m5.714 0a3 3 0 11-5.714 0" }) });
  var CurrencyDollarIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 6v12m-3-2.818l.879.659c1.171.879 3.07.879 4.242 0 1.172-.879 1.172-2.303 0-3.182C13.536 12.219 12.768 12 12 12c-.725 0-1.45-.22-2.003-.659-1.106-.879-1.106-2.303 0-3.182s2.9-.879 4.006 0l.415.33M21 12a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var BarChartIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 013 19.875v-6.75zM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V8.625zM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V4.125z" }) });
  var BoltIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3.75 13.5l10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75z" }) });
  var ArrowRightOnRectangleIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15.75 9V5.25A2.25 2.25 0 0013.5 3h-6a2.25 2.25 0 00-2.25 2.25v13.5A2.25 2.25 0 007.5 21h6a2.25 2.25 0 002.25-2.25V15m-3-3l3 3m0 0l-3 3m3-3H9" }) });
  var ScaleIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 3v17.25m0 0c-1.472 0-2.882.265-4.185.75M12 20.25c1.472 0 2.882.265 4.185.75M18.75 4.97A48.416 48.416 0 0012 4.5c-2.291 0-4.545.16-6.75.47m13.5 0c1.01.143 2.01.317 3 .52m-3-.52l2.62 10.726c.122.499-.106 1.028-.589 1.202a5.988 5.988 0 01-2.153.24c-1.186 0-2.34-.312-3.372-.914m-10.522 0c.122.499.106 1.028.589 1.202a5.989 5.989 0 012.153.24c1.186 0 2.34-.312 3.372-.914m0 0l2.62-10.726m-2.62 10.726c-1.033-.599-2.186-.914-3.372-.914s-2.34.315-3.372.914m6.744 0c1.033-.599 2.186-.914 3.372-.914s2.34.315 3.372.914" }) });
  var ShareIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5m-13.5-9L12 3m0 0l4.5 4.5M12 3v13.5" }) });
  var DocumentTextIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" }) });
  var ChartPieIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M10.5 6a7.5 7.5 0 107.5 7.5h-7.5V6z" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M13.5 10.5H21A7.5 7.5 0 0013.5 3v7.5z" })
  ] });
  var PlusIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 4.5v15m7.5-7.5h-15" }) });
  var QrCodeIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3.75 4.5v15h15V4.5h-15Z" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M8.25 9h.75v.75h-.75V9Zm0 3.75h.75v.75h-.75v-.75Zm0 3.75h.75v.75h-.75v-.75Zm3.75-7.5h.75v.75h-.75V9Zm0 7.5h.75v.75h-.75v-.75Zm3.75-7.5h.75v.75h-.75V9Zm0 3.75h.75v.75h-.75v-.75Zm0 3.75h.75v.75h-.75v-.75Z" })
  ] });
  var ArrowPathIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0011.667 0l3.181-3.183m-4.991-2.696L7.985 5.986m11.667 0l-3.181 3.183a8.25 8.25 0 01-11.667 0l-3.181-3.183" }) });
  var FilterIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 01-.659 1.591l-5.432 5.432a2.25 2.25 0 00-.659 1.591v2.927a2.25 2.25 0 01-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 00-.659-1.591L3.659 7.409A2.25 2.25 0 013 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0112 3z" }) });
  var PaperAirplaneIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" }) });
  var BanknotesIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M2.25 18.75a60.07 60.07 0 0115.797 2.101c.727.198 1.453-.342 1.453-1.096V18.75M3.75 4.5v.75A.75.75 0 013 6h-.75m0 0v-.375c0-.621.504-1.125 1.125-1.125H20.25M2.25 6v9m18-10.5v.75c0 .414.336.75.75.75h.75m-1.5-1.5h.375c.621 0 1.125.504 1.125 1.125v9.75c0 .621-.504 1.125-1.125 1.125h-.375m1.5-1.5H21a.75.75 0 00-.75.75v.75m0 0H3.75m0 0h-.375a1.125 1.125 0 01-1.125-1.125V15m1.5 1.5v-.75A.75.75 0 003 15h-.75M15 10.5a3 3 0 11-6 0 3 3 0 016 0zm3 0h.008v.008H18V10.5zm-12 0h.008v.008H6V10.5z" }) });
  var ArchiveBoxIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M20.25 7.5l-.625 10.632a2.25 2.25 0 01-2.247 2.118H6.622a2.25 2.25 0 01-2.247-2.118L3.75 7.5M10 11.25h4M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125z" }) });
  var MapIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9 6.75V15m0 0v2.25m0-2.25h1.5m-1.5 0h-1.5m-1.5-3L6.75 12l-1.5-2.25m4.5 6H15m0 0V6.75m0 0h1.5m-1.5 0h-1.5m1.5-3L13.25 12l1.5 2.25m-3-3l1.5-2.25m-1.5 2.25L15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var PrinterIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6.72 13.829c-.24.03-.48.062-.72.096m.72-.096a42.415 42.415 0 0110.56 0m-10.56 0L6.34 18m10.94-4.171c.24.03.48.062.72.096m-.72-.096L17.66 18m0 0l.229 2.523a1.125 1.125 0 01-1.12 1.227H7.231c-.662 0-1.18-.568-1.12-1.227L6.34 18m11.318 0h1.091A2.25 2.25 0 0021 15.75V9.456c0-1.081-.768-2.015-1.837-2.175a48.055 48.055 0 00-1.913-.247M6.34 18H5.25A2.25 2.25 0 013 15.75V9.456c0-1.081.768-2.015 1.837-2.175a48.041 48.041 0 011.913-.247m10.5 0a48.536 48.536 0 00-10.5 0m10.5 0V3.375c0-.621-.504-1.125-1.125-1.125h-8.25c-.621 0-1.125.504-1.125 1.125v3.659M18 10.5h.008v.008H18V10.5zm-3 0h.008v.008H15V10.5z" }) });
  var MegaphoneIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M10.5 6a7.5 7.5 0 100 12h-3a7.5 7.5 0 00-7.5-7.5h1.5m10.5-4.5h4.5m-4.5 0l4.5-4.5m-4.5 4.5l4.5 4.5m-13.5 0A7.5 7.5 0 016 10.5v-1.5a1.5 1.5 0 013 0v1.5a7.5 7.5 0 01-7.5 7.5h-1.5" }) });
  var OrangeMoneyLogo = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { ...props, viewBox: "0 0 64 40", xmlns: "http://www.w3.org/2000/svg", "aria-label": "Orange Money Logo", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("rect", { width: "64", height: "40", rx: "4", fill: "#FF7900" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("text", { x: "32", y: "22", fontFamily: "Helvetica, Arial, sans-serif", fontSize: "9", fontWeight: "bold", fill: "white", textAnchor: "middle", children: "ORANGE" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("text", { x: "32", y: "31", fontFamily: "Helvetica, Arial, sans-serif", fontSize: "9", fontWeight: "bold", fill: "white", textAnchor: "middle", children: "MONEY" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("rect", { x: "8", y: "8", width: "10", height: "7", rx: "2", fill: "white", fillOpacity: "0.8" })
  ] });
  var MtnMomoLogo = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { ...props, viewBox: "0 0 64 40", xmlns: "http://www.w3.org/2000/svg", "aria-label": "MTN Mobile Money Logo", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("rect", { width: "64", height: "40", rx: "4", fill: "#FFCC00" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("text", { x: "32", y: "26", fontFamily: "Helvetica, Arial, sans-serif", fontSize: "14", fontWeight: "bold", fill: "#004F9F", textAnchor: "middle", children: "MoMo" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("rect", { x: "8", y: "8", width: "10", height: "7", rx: "2", fill: "#004F9F", fillOpacity: "0.8" })
  ] });
  var VisaIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { ...props, viewBox: "0 0 64 40", xmlns: "http://www.w3.org/2000/svg", "aria-label": "Visa Logo", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("rect", { width: "64", height: "40", rx: "4", fill: "white", stroke: "#E0E0E0" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M24.7,25.8h-3.4L17.6,14h3.8l2,7.1c0.4,1.6,0.6,2.7,0.8,3.6h0.1c0.2-0.9,0.5-2.1,0.8-3.6l2-7.1h3.7L24.7,25.8z M45.1,14.2c-0.8-0.2-1.9-0.5-3.1-0.5c-3.1,0-5.4,1.7-5.4,4.2c0,2.1,1.7,3.4,3.1,4.1c1.4,0.6,1.9,1,1.9,1.6c0,0.8-0.9,1.2-2.1,1.2c-1.6,0-2.4-0.3-3.3-0.6l-0.5-0.2l-0.6,3.2c0.8,0.3,2.3,0.5,4,0.5c3.3,0,5.6-1.7,5.6-4.4c0-2.6-1.9-3.7-3.4-4.4c-1.3-0.6-1.7-1-1.7-1.5c0-0.5,0.6-1.1,2-1.1c1.3,0,2.1,0.3,2.8,0.6l0.4,0.2L45.1,14.2z M47,14h-3.1l-2.1,11.8h3.8L47,14z M14.8,14.2l-3,11.6h3.7l3-11.6H14.8z", fill: "#142688" })
  ] });
  var MastercardIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { ...props, viewBox: "0 0 64 40", xmlns: "http://www.w3.org/2000/svg", "aria-label": "Mastercard Logo", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("rect", { width: "64", height: "40", rx: "4", fill: "white", stroke: "#E0E0E0" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("circle", { cx: "26", cy: "20", r: "8", fill: "#EA001B" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("circle", { cx: "38", cy: "20", r: "8", fill: "#F79E1B" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M32,20 a8,8 0 0,1 -6,-1.41a8,8 0 0,0 0,2.82a8,8 0 0,1 6,1.41a8,8 0 0,0 6,-1.41a8,8 0 0,1 0,-2.82A8,8 0 0,0 32,20Z", fill: "#FF5F00" })
  ] });
  var PaypalIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { ...props, viewBox: "0 0 64 40", xmlns: "http://www.w3.org/2000/svg", "aria-label": "PayPal Logo", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("rect", { width: "64", height: "40", rx: "4", fill: "#003087" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { fill: "white", d: "M32.12,12.62c-2.28-.1-4.2,1.3-4.72,3.42-.64,2.58.74,4.52,2.7,5.2,2.16.76,4.48.3,5.92-1.32,1.26-1.42,1.68-3.32,1-5.12-1.02-3.1-3.6-4.5-5-4.2h.1Z" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { fill: "#009cde", d: "M29.1,19.2c-.52,2.12,1.02,4,2.94,4.54,2.14.6,4.5.1,5.9-1.52.92-1.04,1.2-2.38.74-3.6-.82-2.18-3-3.44-4.9-2.92h.22Z" })
  ] });
  var ChatBubbleLeftRightIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193l-3.72.372a3.523 3.523 0 0 1-1.04-.22l-1.044-.442a3.523 3.523 0 0 0-1.04-.22l-3.72.372c-1.133.093-1.98-.934-1.98-2.07v-4.286c0-.97.616-1.813 1.5-2.097m6.525 0V9" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3.75 6.75c.884-.284 1.5-1.128 1.5-2.097v-4.286c0-1.136.847-2.1 1.98-2.193l3.72-.372a3.523 3.523 0 0 1 1.04.22l1.044.442a3.523 3.523 0 0 0 1.04.22l3.72-.372c1.133-.093 1.98.934 1.98 2.07v4.286c0 .97-.616 1.813-1.5 2.097m-9.525 0v.002" })
  ] });
  var BookmarkSquareIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" }) });
  var PaperclipIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M18.375 12.739l-7.693 7.693a4.5 4.5 0 01-6.364-6.364l10.94-10.94A3.375 3.375 0 0119.5 7.372l-8.625 8.625a1.875 1.875 0 01-2.652-2.652l6.815-6.815" }) });
  var BellSnoozeIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M14.857 17.082a23.848 23.848 0 005.454-1.31A8.967 8.967 0 0118 9.75V9A6 6 0 006 9v.75a8.967 8.967 0 01-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 01-5.714 0m5.714 0a3 3 0 11-5.714 0M12 21a2.25 2.25 0 01-2.244-2.077M12 21a2.25 2.25 0 002.244-2.077M12 21v-2.25M6.34 18.04l-1.591 1.591M17.66 18.04l1.591 1.591" }) });
  var LockClosedIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M16.5 10.5V6.75a4.5 4.5 0 00-9 0v3.75m-.75 11.25h10.5a2.25 2.25 0 002.25-2.25v-6.75a2.25 2.25 0 00-2.25-2.25H6.75a2.25 2.25 0 00-2.25 2.25v6.75a2.25 2.25 0 002.25 2.25z" }) });

  // contexts/AuthContext.tsx
  var import_react2 = __toESM(require_react());

  // hooks/usePersistentState.ts
  var import_react = __toESM(require_react());
  function usePersistentState(key, defaultValue) {
    const [state, setState] = (0, import_react.useState)(() => {
      try {
        const storedValue = window.localStorage.getItem(key);
        if (storedValue) {
          const parsed = JSON.parse(storedValue);
          if (key === "siteSettings" && (parsed.seo === void 0 || parsed.socialLinks === void 0 || !parsed.standardPlan || parsed.emailTemplates === void 0)) {
            const defaultSettings = defaultValue;
            return { ...defaultSettings, ...parsed };
          }
          return parsed;
        }
        return defaultValue;
      } catch (error) {
        console.error(`Error reading localStorage key \u201C${key}\u201D:`, error);
        return defaultValue;
      }
    });
    const setPersistentState = (0, import_react.useCallback)(
      (newValue) => {
        setState((prevState) => {
          const resolvedValue = typeof newValue === "function" ? newValue(prevState) : newValue;
          try {
            window.localStorage.setItem(key, JSON.stringify(resolvedValue));
          } catch (error) {
            console.error(`Error setting localStorage key \u201C${key}\u201D:`, error);
          }
          return resolvedValue;
        });
      },
      [key]
    );
    return [state, setPersistentState];
  }

  // contexts/AuthContext.tsx
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var AuthContext = (0, import_react2.createContext)(void 0);
  var defaultNotificationPrefs = { promotions: true, orderUpdates: true, newsletters: true };
  var initialUsers = [
    { id: "assistant-id", name: "Assistant KMER ZONE", email: "assistant@kmerzone.com", password: "password", role: "customer", loyalty: { status: "standard", orderCount: 0, totalSpent: 0, premiumStatusMethod: null }, addresses: [], followedStores: [], notificationPreferences: defaultNotificationPrefs },
    {
      id: "customer-1",
      name: "Client Test",
      email: "customer@example.com",
      password: "password",
      role: "customer",
      loyalty: { status: "premium", orderCount: 12, totalSpent: 62e3, premiumStatusMethod: "loyalty" },
      addresses: [
        { id: "addr1", isDefault: true, label: "Maison", fullName: "Client Test", phone: "690123456", address: "123 Rue de la Libert\xE9", city: "Douala", latitude: 4.0483, longitude: 9.702 }
      ],
      followedStores: ["store-1"],
      profilePictureUrl: "https://i.pravatar.cc/150?u=customer-1",
      phone: "690123456",
      birthDate: "1990-05-15",
      gender: "Homme",
      notificationPreferences: { promotions: true, orderUpdates: true, newsletters: false }
    },
    { id: "seller-1", name: "Kmer Fashion", email: "seller@example.com", password: "password", role: "seller", shopName: "Kmer Fashion", location: "Douala", loyalty: { status: "standard", orderCount: 0, totalSpent: 0, premiumStatusMethod: null }, addresses: [], followedStores: [], notificationPreferences: defaultNotificationPrefs },
    { id: "seller-2", name: "Mama Africa", email: "mamaafrica@example.com", password: "password", role: "seller", shopName: "Mama Africa", location: "Yaound\xE9", loyalty: { status: "standard", orderCount: 0, totalSpent: 0, premiumStatusMethod: null }, addresses: [], followedStores: [], notificationPreferences: defaultNotificationPrefs },
    { id: "seller-3", name: "Electro Plus", email: "electro@example.com", password: "password", role: "seller", shopName: "Electro Plus", location: "Yaound\xE9", loyalty: { status: "standard", orderCount: 0, totalSpent: 0, premiumStatusMethod: null }, addresses: [], followedStores: [], notificationPreferences: defaultNotificationPrefs },
    { id: "seller-4", name: "Douala Soaps", email: "soaps@example.com", password: "password", role: "seller", shopName: "Douala Soaps", location: "Douala", loyalty: { status: "standard", orderCount: 0, totalSpent: 0, premiumStatusMethod: null }, addresses: [], followedStores: [], notificationPreferences: defaultNotificationPrefs },
    { id: "admin-1", name: "Super Admin", email: "superadmin@example.com", password: "password", role: "superadmin", loyalty: { status: "standard", orderCount: 0, totalSpent: 0, premiumStatusMethod: null }, addresses: [], followedStores: [], notificationPreferences: defaultNotificationPrefs },
    { id: "agent-1", name: "Paul Atanga", email: "agent1@example.com", password: "password", role: "delivery_agent", loyalty: { status: "standard", orderCount: 0, totalSpent: 0, premiumStatusMethod: null }, availabilityStatus: "available", addresses: [], followedStores: [], notificationPreferences: defaultNotificationPrefs, zoneId: "zone-dla-a" },
    { id: "agent-2", name: "Brenda Biya", email: "agent2@example.com", password: "password", role: "delivery_agent", loyalty: { status: "standard", orderCount: 0, totalSpent: 0, premiumStatusMethod: null }, availabilityStatus: "available", addresses: [], followedStores: [], notificationPreferences: defaultNotificationPrefs, zoneId: "zone-yde-a" },
    { id: "depot-agent-1", name: "Agent D\xE9p\xF4t Akwa", email: "depot@example.com", password: "password", role: "depot_agent", depotId: "pp1", loyalty: { status: "standard", orderCount: 0, totalSpent: 0, premiumStatusMethod: null }, addresses: [], followedStores: [], notificationPreferences: defaultNotificationPrefs, zoneId: "zone-dla-a" },
    { id: "depot-manager-1", name: "Chef de D\xE9p\xF4t Akwa", email: "depot.manager@example.com", password: "password", role: "depot_manager", depotId: "pp1", loyalty: { status: "standard", orderCount: 0, totalSpent: 0, premiumStatusMethod: null }, addresses: [], followedStores: [], notificationPreferences: defaultNotificationPrefs, zoneId: "zone-dla-a" }
  ];
  var AuthProvider = ({ children }) => {
    const [loggedInUserId, setLoggedInUserId] = usePersistentState("currentUserId", null);
    const [allUsers, setAllUsers] = usePersistentState("allUsers", initialUsers);
    const user = (0, import_react2.useMemo)(() => {
      if (!loggedInUserId) return null;
      return allUsers.find((u) => u.id === loggedInUserId) ?? null;
    }, [loggedInUserId, allUsers]);
    (0, import_react2.useEffect)(() => {
      setAllUsers((prevUsers) => {
        let needsUpdate = false;
        const updatedUsers = prevUsers.map((u) => {
          if (!u.addresses || !u.followedStores || !u.notificationPreferences) {
            needsUpdate = true;
            return {
              ...u,
              addresses: u.addresses || [],
              followedStores: u.followedStores || [],
              notificationPreferences: u.notificationPreferences || defaultNotificationPrefs
            };
          }
          return u;
        });
        return needsUpdate ? updatedUsers : prevUsers;
      });
    }, []);
    const login = (0, import_react2.useCallback)((email, password) => {
      const foundUser = allUsers.find((u) => u.email.toLowerCase() === email.toLowerCase());
      if (foundUser) {
        if (!password) {
          alert("Mot de passe requis.");
          return null;
        }
        if (foundUser.password !== password) {
          alert("Mot de passe incorrect.");
          return null;
        }
        setLoggedInUserId(foundUser.id);
        return foundUser;
      }
      alert("Aucun compte trouv\xE9 avec cet email. Veuillez vous inscrire.");
      return null;
    }, [allUsers, setLoggedInUserId]);
    const register = (0, import_react2.useCallback)((name, email, password, accountType = "customer", phone, birthDate, address) => {
      const existingUser = allUsers.find((u) => u.email.toLowerCase() === email.toLowerCase());
      if (existingUser) {
        alert("Un utilisateur avec cet email existe d\xE9j\xE0.");
        return null;
      }
      if (!password || password.length < 6) {
        alert("Le mot de passe est requis et doit contenir au moins 6 caract\xE8res.");
        return null;
      }
      const newUser = {
        id: (/* @__PURE__ */ new Date()).getTime().toString(),
        name,
        email,
        role: accountType,
        loyalty: { status: "standard", orderCount: 0, totalSpent: 0, premiumStatusMethod: null },
        password,
        phone,
        birthDate,
        addresses: address ? [{
          ...address,
          id: `addr_${Date.now()}`,
          isDefault: true
        }] : [],
        followedStores: [],
        notificationPreferences: defaultNotificationPrefs
      };
      setAllUsers((prev) => [...prev, newUser]);
      setLoggedInUserId(newUser.id);
      return newUser;
    }, [allUsers, setAllUsers, setLoggedInUserId]);
    const updateUser = (0, import_react2.useCallback)((updates) => {
      if (!loggedInUserId) return;
      setAllUsers(
        (prevUsers) => prevUsers.map((u) => {
          if (u.id === loggedInUserId) {
            return {
              ...u,
              ...updates,
              role: updates.shopName ? "seller" : u.role
            };
          }
          return u;
        })
      );
    }, [loggedInUserId, setAllUsers]);
    const logout = (0, import_react2.useCallback)(() => {
      setLoggedInUserId(null);
    }, [setLoggedInUserId]);
    const resetPassword = (0, import_react2.useCallback)((email, newPassword) => {
      setAllUsers(
        (prevUsers) => prevUsers.map(
          (u) => u.email.toLowerCase() === email.toLowerCase() ? { ...u, password: newPassword } : u
        )
      );
      console.log(`Password for ${email} reset successfully.`);
    }, [setAllUsers]);
    const updateUserInfo = (0, import_react2.useCallback)((userId, updates) => {
      setAllUsers((prev) => prev.map((u) => u.id === userId ? { ...u, ...updates } : u));
    }, [setAllUsers]);
    const changePassword = (0, import_react2.useCallback)((userId, oldPassword, newPassword) => {
      let success = false;
      setAllUsers((prev) => {
        const userToUpdate = prev.find((u) => u.id === userId);
        if (!userToUpdate || userToUpdate.password !== oldPassword) {
          success = false;
          return prev;
        }
        success = true;
        return prev.map((u) => u.id === userId ? { ...u, password: newPassword } : u);
      });
      return success;
    }, [setAllUsers]);
    const addAddress = (0, import_react2.useCallback)((userId, address) => {
      setAllUsers((prev) => prev.map((u) => {
        if (u.id === userId) {
          const addresses = u.addresses || [];
          const newAddress = {
            ...address,
            id: `addr_${Date.now()}`,
            isDefault: addresses.length === 0
            // Make first address default
          };
          return { ...u, addresses: [...addresses, newAddress] };
        }
        return u;
      }));
    }, [setAllUsers]);
    const updateAddress = (0, import_react2.useCallback)((userId, updatedAddress) => {
      setAllUsers((prev) => prev.map((u) => {
        if (u.id === userId) {
          const addresses = (u.addresses || []).map(
            (addr) => addr.id === updatedAddress.id ? updatedAddress : addr
          );
          return { ...u, addresses };
        }
        return u;
      }));
    }, [setAllUsers]);
    const deleteAddress = (0, import_react2.useCallback)((userId, addressId) => {
      setAllUsers((prev) => prev.map((u) => {
        if (u.id === userId) {
          const addresses = (u.addresses || []).filter((addr) => addr.id !== addressId);
          if (addresses.length > 0 && !addresses.some((a) => a.isDefault)) {
            addresses[0].isDefault = true;
          }
          return { ...u, addresses };
        }
        return u;
      }));
    }, [setAllUsers]);
    const setDefaultAddress = (0, import_react2.useCallback)((userId, addressId) => {
      setAllUsers((prev) => prev.map((u) => {
        if (u.id === userId) {
          const addresses = (u.addresses || []).map((addr) => ({
            ...addr,
            isDefault: addr.id === addressId
          }));
          return { ...u, addresses };
        }
        return u;
      }));
    }, [setAllUsers]);
    const toggleFollowStore = (0, import_react2.useCallback)((storeId) => {
      if (!loggedInUserId) return;
      setAllUsers(
        (prevUsers) => prevUsers.map((u) => {
          if (u.id === loggedInUserId) {
            const followed = u.followedStores || [];
            const isFollowing = followed.includes(storeId);
            return {
              ...u,
              followedStores: isFollowing ? followed.filter((id) => id !== storeId) : [...followed, storeId]
            };
          }
          return u;
        })
      );
    }, [loggedInUserId, setAllUsers]);
    const contextValue = (0, import_react2.useMemo)(() => ({
      user,
      allUsers,
      login,
      logout,
      register,
      updateUser,
      resetPassword,
      updateUserInfo,
      changePassword,
      addAddress,
      updateAddress,
      deleteAddress,
      setDefaultAddress,
      toggleFollowStore,
      setAllUsers
    }), [user, allUsers, login, logout, register, updateUser, resetPassword, updateUserInfo, changePassword, addAddress, updateAddress, deleteAddress, setDefaultAddress, toggleFollowStore, setAllUsers]);
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(AuthContext.Provider, { value: contextValue, children });
  };
  var useAuth = () => {
    const context = (0, import_react2.useContext)(AuthContext);
    if (context === void 0) {
      throw new Error("useAuth must be used within an AuthProvider");
    }
    return context;
  };

  // contexts/ComparisonContext.tsx
  var import_react3 = __toESM(require_react());
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var ComparisonContext = (0, import_react3.createContext)(void 0);
  var ComparisonProvider = ({ children }) => {
    const [comparisonList, setComparisonList] = (0, import_react3.useState)([]);
    const [products, setProducts] = (0, import_react3.useState)([]);
    const toggleComparison = (0, import_react3.useCallback)((productId) => {
      setComparisonList((prevList) => {
        if (prevList.includes(productId)) {
          return prevList.filter((id) => id !== productId);
        } else {
          if (prevList.length >= 4) {
            alert("Vous ne pouvez comparer que 4 produits \xE0 la fois.");
            return prevList;
          }
          return [...prevList, productId];
        }
      });
    }, []);
    const isInComparison = (0, import_react3.useCallback)((productId) => {
      return comparisonList.includes(productId);
    }, [comparisonList]);
    const clearComparison = (0, import_react3.useCallback)(() => {
      setComparisonList([]);
    }, []);
    const contextValue = (0, import_react3.useMemo)(() => ({
      comparisonList,
      products,
      setProducts,
      toggleComparison,
      isInComparison,
      clearComparison
    }), [comparisonList, products, setProducts, toggleComparison, isInComparison, clearComparison]);
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ComparisonContext.Provider, { value: contextValue, children });
  };
  var useComparison = () => {
    const context = (0, import_react3.useContext)(ComparisonContext);
    if (context === void 0) {
      throw new Error("useComparison must be used within a ComparisonProvider");
    }
    return context;
  };

  // contexts/UIContext.tsx
  var import_react4 = __toESM(require_react());
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var UIContext = (0, import_react4.createContext)(null);
  var UIProvider = ({ children }) => {
    const [isModalOpen, setIsModalOpen] = (0, import_react4.useState)(false);
    const [modalProduct, setModalProduct] = (0, import_react4.useState)(null);
    const openModal = (0, import_react4.useCallback)((product) => {
      setModalProduct(product);
      setIsModalOpen(true);
    }, []);
    const closeModal = (0, import_react4.useCallback)(() => {
      setIsModalOpen(false);
      setModalProduct(null);
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(UIContext.Provider, { value: { isModalOpen, modalProduct, openModal, closeModal }, children });
  };
  var useUI = () => {
    const context = (0, import_react4.useContext)(UIContext);
    if (!context) throw new Error("useUI must be used within a UIProvider");
    return context;
  };

  // components/Header.tsx
  var import_react10 = __toESM(require_react());

  // contexts/CartContext.tsx
  var import_react5 = __toESM(require_react());
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var CartContext = (0, import_react5.createContext)(void 0);
  var areVariantsEqual = (v1, v2) => {
    if (!v1 && !v2) return true;
    if (!v1 || !v2) return false;
    const keys1 = Object.keys(v1);
    const keys2 = Object.keys(v2);
    if (keys1.length !== keys2.length) return false;
    return keys1.every((key) => v1[key] === v2[key]);
  };
  var CartProvider = ({ children }) => {
    const [cart, setCart] = usePersistentState("cart", []);
    const [appliedPromoCode, setAppliedPromoCode] = usePersistentState("appliedPromoCode", null);
    const { openModal } = useUI();
    const { user } = useAuth();
    const addToCart = (0, import_react5.useCallback)((product, quantity = 1, selectedVariant, options) => {
      if (user && user.role === "seller" && user.shopName === product.vendor) {
        alert("Vous ne pouvez pas acheter des produits de votre propre boutique.");
        return;
      }
      if (user && ["superadmin", "delivery_agent", "depot_agent", "depot_manager"].includes(user.role)) {
        alert("Votre r\xF4le ne vous autorise pas \xE0 effectuer des achats sur la plateforme.");
        return;
      }
      let itemAdded = false;
      let addedItem = null;
      setCart((prevCart) => {
        const existingItem = prevCart.find((item) => item.id === product.id && areVariantsEqual(item.selectedVariant, selectedVariant));
        let stock = product.stock;
        let variantDetail;
        if (product.variantDetails && selectedVariant) {
          variantDetail = product.variantDetails.find((vd) => areVariantsEqual(vd.options, selectedVariant));
          stock = variantDetail?.stock ?? 0;
        }
        if (stock === 0) {
          alert("Ce produit ou cette variante est en rupture de stock.");
          return prevCart;
        }
        if (existingItem) {
          const newQuantity = existingItem.quantity + quantity;
          if (newQuantity > stock) {
            alert(`Stock insuffisant. Vous ne pouvez pas commander plus de ${stock} unit\xE9s de cette variante.`);
            return prevCart;
          }
          itemAdded = true;
          return prevCart.map((item) => {
            if (item.id === product.id && areVariantsEqual(item.selectedVariant, selectedVariant)) {
              const updatedItem = { ...item, quantity: newQuantity };
              addedItem = updatedItem;
              return updatedItem;
            }
            return item;
          });
        } else {
          if (quantity > stock) {
            alert(`Stock insuffisant. Vous ne pouvez pas commander plus de ${stock} unit\xE9s de cette variante.`);
            return prevCart;
          }
          itemAdded = true;
          const newItem = { ...product, quantity, selectedVariant };
          if (variantDetail && variantDetail.price) {
            newItem.price = variantDetail.price;
            newItem.promotionPrice = void 0;
          }
          addedItem = newItem;
          return [...prevCart, newItem];
        }
      });
      if (itemAdded && addedItem && !options?.suppressModal) {
        openModal(addedItem);
      }
    }, [user, openModal, setCart]);
    const removeFromCart = (0, import_react5.useCallback)((productId, selectedVariant) => {
      setCart((prevCart) => prevCart.filter((item) => !(item.id === productId && areVariantsEqual(item.selectedVariant, selectedVariant))));
    }, [setCart]);
    const updateQuantity = (0, import_react5.useCallback)((productId, quantity, selectedVariant) => {
      const productInCart = cart.find((item) => item.id === productId && areVariantsEqual(item.selectedVariant, selectedVariant));
      if (!productInCart) return;
      let stock = productInCart.stock;
      if (productInCart.variantDetails && selectedVariant) {
        const variantDetail = productInCart.variantDetails.find((vd) => areVariantsEqual(vd.options, selectedVariant));
        stock = variantDetail?.stock ?? 0;
      }
      if (quantity > stock) {
        alert(`Stock insuffisant. Vous ne pouvez pas commander plus de ${stock} unit\xE9s.`);
        return;
      }
      if (quantity <= 0) {
        removeFromCart(productId, selectedVariant);
      } else {
        setCart(
          (prevCart) => prevCart.map(
            (item) => item.id === productId && areVariantsEqual(item.selectedVariant, selectedVariant) ? { ...item, quantity } : item
          )
        );
      }
    }, [cart, removeFromCart, setCart]);
    const clearCart = (0, import_react5.useCallback)(() => {
      setCart([]);
      setAppliedPromoCode(null);
    }, [setCart, setAppliedPromoCode]);
    const onApplyPromoCode = (0, import_react5.useCallback)((code) => {
      setAppliedPromoCode(code);
    }, [setAppliedPromoCode]);
    const contextValue = (0, import_react5.useMemo)(() => ({
      cart,
      addToCart,
      removeFromCart,
      updateQuantity,
      clearCart,
      appliedPromoCode,
      onApplyPromoCode
    }), [cart, addToCart, removeFromCart, updateQuantity, clearCart, appliedPromoCode, onApplyPromoCode]);
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(CartContext.Provider, { value: contextValue, children });
  };
  var useCart = () => {
    const context = (0, import_react5.useContext)(CartContext);
    if (context === void 0) {
      throw new Error("useCart must be used within a CartProvider");
    }
    return context;
  };

  // contexts/ThemeContext.tsx
  var import_react6 = __toESM(require_react());
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var ThemeContext = (0, import_react6.createContext)(void 0);
  var ThemeProvider = ({ children }) => {
    const [theme, setTheme] = (0, import_react6.useState)(() => {
      if (typeof window !== "undefined" && localStorage.getItem("theme")) {
        return localStorage.getItem("theme");
      }
      if (typeof window !== "undefined" && window.matchMedia("(prefers-color-scheme: dark)").matches) {
        return "dark";
      }
      return "light";
    });
    (0, import_react6.useEffect)(() => {
      const root2 = window.document.documentElement;
      if (theme === "dark") {
        root2.classList.add("dark");
      } else {
        root2.classList.remove("dark");
      }
      localStorage.setItem("theme", theme);
    }, [theme]);
    const toggleTheme = (0, import_react6.useCallback)(() => {
      setTheme((prevTheme) => prevTheme === "light" ? "dark" : "light");
    }, []);
    const contextValue = (0, import_react6.useMemo)(() => ({ theme, toggleTheme }), [theme, toggleTheme]);
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(ThemeContext.Provider, { value: contextValue, children });
  };
  var useTheme = () => {
    const context = (0, import_react6.useContext)(ThemeContext);
    if (context === void 0) {
      throw new Error("useTheme must be used within a ThemeProvider");
    }
    return context;
  };

  // contexts/WishlistContext.tsx
  var import_react7 = __toESM(require_react());
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var WishlistContext = (0, import_react7.createContext)(void 0);
  var WishlistProvider = ({ children }) => {
    const [wishlist, setWishlist] = usePersistentState("wishlist", []);
    const toggleWishlist = (0, import_react7.useCallback)((productId) => {
      setWishlist(
        (prevWishlist) => prevWishlist.includes(productId) ? prevWishlist.filter((id) => id !== productId) : [...prevWishlist, productId]
      );
    }, [setWishlist]);
    const isWishlisted = (0, import_react7.useCallback)((productId) => {
      return wishlist.includes(productId);
    }, [wishlist]);
    const contextValue = (0, import_react7.useMemo)(() => ({
      wishlist,
      toggleWishlist,
      isWishlisted
    }), [wishlist, toggleWishlist, isWishlisted]);
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(WishlistContext.Provider, { value: contextValue, children });
  };
  var useWishlist = () => {
    const context = (0, import_react7.useContext)(WishlistContext);
    if (context === void 0) {
      throw new Error("useWishlist must be used within a WishlistProvider");
    }
    return context;
  };

  // contexts/ChatContext.tsx
  var import_react8 = __toESM(require_react());

  // node_modules/@google/genai/dist/web/index.mjs
  var _defaultBaseGeminiUrl = void 0;
  var _defaultBaseVertexUrl = void 0;
  function getDefaultBaseUrls() {
    return {
      geminiUrl: _defaultBaseGeminiUrl,
      vertexUrl: _defaultBaseVertexUrl
    };
  }
  function getBaseUrl(httpOptions, vertexai, vertexBaseUrlFromEnv, geminiBaseUrlFromEnv) {
    var _a, _b;
    if (!(httpOptions === null || httpOptions === void 0 ? void 0 : httpOptions.baseUrl)) {
      const defaultBaseUrls = getDefaultBaseUrls();
      if (vertexai) {
        return (_a = defaultBaseUrls.vertexUrl) !== null && _a !== void 0 ? _a : vertexBaseUrlFromEnv;
      } else {
        return (_b = defaultBaseUrls.geminiUrl) !== null && _b !== void 0 ? _b : geminiBaseUrlFromEnv;
      }
    }
    return httpOptions.baseUrl;
  }
  var BaseModule = class {
  };
  function formatMap(templateString, valueMap) {
    const regex = /\{([^}]+)\}/g;
    return templateString.replace(regex, (match, key) => {
      if (Object.prototype.hasOwnProperty.call(valueMap, key)) {
        const value = valueMap[key];
        return value !== void 0 && value !== null ? String(value) : "";
      } else {
        throw new Error(`Key '${key}' not found in valueMap.`);
      }
    });
  }
  function setValueByPath(data, keys, value) {
    for (let i = 0; i < keys.length - 1; i++) {
      const key = keys[i];
      if (key.endsWith("[]")) {
        const keyName = key.slice(0, -2);
        if (!(keyName in data)) {
          if (Array.isArray(value)) {
            data[keyName] = Array.from({ length: value.length }, () => ({}));
          } else {
            throw new Error(`Value must be a list given an array path ${key}`);
          }
        }
        if (Array.isArray(data[keyName])) {
          const arrayData = data[keyName];
          if (Array.isArray(value)) {
            for (let j = 0; j < arrayData.length; j++) {
              const entry = arrayData[j];
              setValueByPath(entry, keys.slice(i + 1), value[j]);
            }
          } else {
            for (const d of arrayData) {
              setValueByPath(d, keys.slice(i + 1), value);
            }
          }
        }
        return;
      } else if (key.endsWith("[0]")) {
        const keyName = key.slice(0, -3);
        if (!(keyName in data)) {
          data[keyName] = [{}];
        }
        const arrayData = data[keyName];
        setValueByPath(arrayData[0], keys.slice(i + 1), value);
        return;
      }
      if (!data[key] || typeof data[key] !== "object") {
        data[key] = {};
      }
      data = data[key];
    }
    const keyToSet = keys[keys.length - 1];
    const existingData = data[keyToSet];
    if (existingData !== void 0) {
      if (!value || typeof value === "object" && Object.keys(value).length === 0) {
        return;
      }
      if (value === existingData) {
        return;
      }
      if (typeof existingData === "object" && typeof value === "object" && existingData !== null && value !== null) {
        Object.assign(existingData, value);
      } else {
        throw new Error(`Cannot set value for an existing key. Key: ${keyToSet}`);
      }
    } else {
      if (keyToSet === "_self" && typeof value === "object" && value !== null && !Array.isArray(value)) {
        const valueAsRecord = value;
        Object.assign(data, valueAsRecord);
      } else {
        data[keyToSet] = value;
      }
    }
  }
  function getValueByPath(data, keys) {
    try {
      if (keys.length === 1 && keys[0] === "_self") {
        return data;
      }
      for (let i = 0; i < keys.length; i++) {
        if (typeof data !== "object" || data === null) {
          return void 0;
        }
        const key = keys[i];
        if (key.endsWith("[]")) {
          const keyName = key.slice(0, -2);
          if (keyName in data) {
            const arrayData = data[keyName];
            if (!Array.isArray(arrayData)) {
              return void 0;
            }
            return arrayData.map((d) => getValueByPath(d, keys.slice(i + 1)));
          } else {
            return void 0;
          }
        } else {
          data = data[key];
        }
      }
      return data;
    } catch (error) {
      if (error instanceof TypeError) {
        return void 0;
      }
      throw error;
    }
  }
  function tBytes$1(fromBytes) {
    if (typeof fromBytes !== "string") {
      throw new Error("fromImageBytes must be a string");
    }
    return fromBytes;
  }
  function fetchPredictOperationParametersToVertex(fromObject) {
    const toObject = {};
    const fromOperationName = getValueByPath(fromObject, [
      "operationName"
    ]);
    if (fromOperationName != null) {
      setValueByPath(toObject, ["operationName"], fromOperationName);
    }
    const fromResourceName = getValueByPath(fromObject, ["resourceName"]);
    if (fromResourceName != null) {
      setValueByPath(toObject, ["_url", "resourceName"], fromResourceName);
    }
    return toObject;
  }
  function generateVideosOperationFromMldev$1(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromMetadata = getValueByPath(fromObject, ["metadata"]);
    if (fromMetadata != null) {
      setValueByPath(toObject, ["metadata"], fromMetadata);
    }
    const fromDone = getValueByPath(fromObject, ["done"]);
    if (fromDone != null) {
      setValueByPath(toObject, ["done"], fromDone);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], fromError);
    }
    const fromResponse = getValueByPath(fromObject, [
      "response",
      "generateVideoResponse"
    ]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], generateVideosResponseFromMldev$1(fromResponse));
    }
    return toObject;
  }
  function generateVideosOperationFromVertex$1(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromMetadata = getValueByPath(fromObject, ["metadata"]);
    if (fromMetadata != null) {
      setValueByPath(toObject, ["metadata"], fromMetadata);
    }
    const fromDone = getValueByPath(fromObject, ["done"]);
    if (fromDone != null) {
      setValueByPath(toObject, ["done"], fromDone);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], fromError);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], generateVideosResponseFromVertex$1(fromResponse));
    }
    return toObject;
  }
  function generateVideosResponseFromMldev$1(fromObject) {
    const toObject = {};
    const fromGeneratedVideos = getValueByPath(fromObject, [
      "generatedSamples"
    ]);
    if (fromGeneratedVideos != null) {
      let transformedList = fromGeneratedVideos;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedVideoFromMldev$1(item);
        });
      }
      setValueByPath(toObject, ["generatedVideos"], transformedList);
    }
    const fromRaiMediaFilteredCount = getValueByPath(fromObject, [
      "raiMediaFilteredCount"
    ]);
    if (fromRaiMediaFilteredCount != null) {
      setValueByPath(toObject, ["raiMediaFilteredCount"], fromRaiMediaFilteredCount);
    }
    const fromRaiMediaFilteredReasons = getValueByPath(fromObject, [
      "raiMediaFilteredReasons"
    ]);
    if (fromRaiMediaFilteredReasons != null) {
      setValueByPath(toObject, ["raiMediaFilteredReasons"], fromRaiMediaFilteredReasons);
    }
    return toObject;
  }
  function generateVideosResponseFromVertex$1(fromObject) {
    const toObject = {};
    const fromGeneratedVideos = getValueByPath(fromObject, ["videos"]);
    if (fromGeneratedVideos != null) {
      let transformedList = fromGeneratedVideos;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedVideoFromVertex$1(item);
        });
      }
      setValueByPath(toObject, ["generatedVideos"], transformedList);
    }
    const fromRaiMediaFilteredCount = getValueByPath(fromObject, [
      "raiMediaFilteredCount"
    ]);
    if (fromRaiMediaFilteredCount != null) {
      setValueByPath(toObject, ["raiMediaFilteredCount"], fromRaiMediaFilteredCount);
    }
    const fromRaiMediaFilteredReasons = getValueByPath(fromObject, [
      "raiMediaFilteredReasons"
    ]);
    if (fromRaiMediaFilteredReasons != null) {
      setValueByPath(toObject, ["raiMediaFilteredReasons"], fromRaiMediaFilteredReasons);
    }
    return toObject;
  }
  function generatedVideoFromMldev$1(fromObject) {
    const toObject = {};
    const fromVideo = getValueByPath(fromObject, ["_self"]);
    if (fromVideo != null) {
      setValueByPath(toObject, ["video"], videoFromMldev$1(fromVideo));
    }
    return toObject;
  }
  function generatedVideoFromVertex$1(fromObject) {
    const toObject = {};
    const fromVideo = getValueByPath(fromObject, ["_self"]);
    if (fromVideo != null) {
      setValueByPath(toObject, ["video"], videoFromVertex$1(fromVideo));
    }
    return toObject;
  }
  function getOperationParametersToMldev(fromObject) {
    const toObject = {};
    const fromOperationName = getValueByPath(fromObject, [
      "operationName"
    ]);
    if (fromOperationName != null) {
      setValueByPath(toObject, ["_url", "operationName"], fromOperationName);
    }
    return toObject;
  }
  function getOperationParametersToVertex(fromObject) {
    const toObject = {};
    const fromOperationName = getValueByPath(fromObject, [
      "operationName"
    ]);
    if (fromOperationName != null) {
      setValueByPath(toObject, ["_url", "operationName"], fromOperationName);
    }
    return toObject;
  }
  function videoFromMldev$1(fromObject) {
    const toObject = {};
    const fromUri = getValueByPath(fromObject, ["video", "uri"]);
    if (fromUri != null) {
      setValueByPath(toObject, ["uri"], fromUri);
    }
    const fromVideoBytes = getValueByPath(fromObject, [
      "video",
      "encodedVideo"
    ]);
    if (fromVideoBytes != null) {
      setValueByPath(toObject, ["videoBytes"], tBytes$1(fromVideoBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["encoding"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function videoFromVertex$1(fromObject) {
    const toObject = {};
    const fromUri = getValueByPath(fromObject, ["gcsUri"]);
    if (fromUri != null) {
      setValueByPath(toObject, ["uri"], fromUri);
    }
    const fromVideoBytes = getValueByPath(fromObject, [
      "bytesBase64Encoded"
    ]);
    if (fromVideoBytes != null) {
      setValueByPath(toObject, ["videoBytes"], tBytes$1(fromVideoBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  var Outcome;
  (function(Outcome2) {
    Outcome2["OUTCOME_UNSPECIFIED"] = "OUTCOME_UNSPECIFIED";
    Outcome2["OUTCOME_OK"] = "OUTCOME_OK";
    Outcome2["OUTCOME_FAILED"] = "OUTCOME_FAILED";
    Outcome2["OUTCOME_DEADLINE_EXCEEDED"] = "OUTCOME_DEADLINE_EXCEEDED";
  })(Outcome || (Outcome = {}));
  var Language;
  (function(Language2) {
    Language2["LANGUAGE_UNSPECIFIED"] = "LANGUAGE_UNSPECIFIED";
    Language2["PYTHON"] = "PYTHON";
  })(Language || (Language = {}));
  var Type;
  (function(Type2) {
    Type2["TYPE_UNSPECIFIED"] = "TYPE_UNSPECIFIED";
    Type2["STRING"] = "STRING";
    Type2["NUMBER"] = "NUMBER";
    Type2["INTEGER"] = "INTEGER";
    Type2["BOOLEAN"] = "BOOLEAN";
    Type2["ARRAY"] = "ARRAY";
    Type2["OBJECT"] = "OBJECT";
    Type2["NULL"] = "NULL";
  })(Type || (Type = {}));
  var HarmCategory;
  (function(HarmCategory2) {
    HarmCategory2["HARM_CATEGORY_UNSPECIFIED"] = "HARM_CATEGORY_UNSPECIFIED";
    HarmCategory2["HARM_CATEGORY_HATE_SPEECH"] = "HARM_CATEGORY_HATE_SPEECH";
    HarmCategory2["HARM_CATEGORY_DANGEROUS_CONTENT"] = "HARM_CATEGORY_DANGEROUS_CONTENT";
    HarmCategory2["HARM_CATEGORY_HARASSMENT"] = "HARM_CATEGORY_HARASSMENT";
    HarmCategory2["HARM_CATEGORY_SEXUALLY_EXPLICIT"] = "HARM_CATEGORY_SEXUALLY_EXPLICIT";
    HarmCategory2["HARM_CATEGORY_CIVIC_INTEGRITY"] = "HARM_CATEGORY_CIVIC_INTEGRITY";
    HarmCategory2["HARM_CATEGORY_IMAGE_HATE"] = "HARM_CATEGORY_IMAGE_HATE";
    HarmCategory2["HARM_CATEGORY_IMAGE_DANGEROUS_CONTENT"] = "HARM_CATEGORY_IMAGE_DANGEROUS_CONTENT";
    HarmCategory2["HARM_CATEGORY_IMAGE_HARASSMENT"] = "HARM_CATEGORY_IMAGE_HARASSMENT";
    HarmCategory2["HARM_CATEGORY_IMAGE_SEXUALLY_EXPLICIT"] = "HARM_CATEGORY_IMAGE_SEXUALLY_EXPLICIT";
  })(HarmCategory || (HarmCategory = {}));
  var HarmBlockMethod;
  (function(HarmBlockMethod2) {
    HarmBlockMethod2["HARM_BLOCK_METHOD_UNSPECIFIED"] = "HARM_BLOCK_METHOD_UNSPECIFIED";
    HarmBlockMethod2["SEVERITY"] = "SEVERITY";
    HarmBlockMethod2["PROBABILITY"] = "PROBABILITY";
  })(HarmBlockMethod || (HarmBlockMethod = {}));
  var HarmBlockThreshold;
  (function(HarmBlockThreshold2) {
    HarmBlockThreshold2["HARM_BLOCK_THRESHOLD_UNSPECIFIED"] = "HARM_BLOCK_THRESHOLD_UNSPECIFIED";
    HarmBlockThreshold2["BLOCK_LOW_AND_ABOVE"] = "BLOCK_LOW_AND_ABOVE";
    HarmBlockThreshold2["BLOCK_MEDIUM_AND_ABOVE"] = "BLOCK_MEDIUM_AND_ABOVE";
    HarmBlockThreshold2["BLOCK_ONLY_HIGH"] = "BLOCK_ONLY_HIGH";
    HarmBlockThreshold2["BLOCK_NONE"] = "BLOCK_NONE";
    HarmBlockThreshold2["OFF"] = "OFF";
  })(HarmBlockThreshold || (HarmBlockThreshold = {}));
  var Mode;
  (function(Mode2) {
    Mode2["MODE_UNSPECIFIED"] = "MODE_UNSPECIFIED";
    Mode2["MODE_DYNAMIC"] = "MODE_DYNAMIC";
  })(Mode || (Mode = {}));
  var AuthType;
  (function(AuthType2) {
    AuthType2["AUTH_TYPE_UNSPECIFIED"] = "AUTH_TYPE_UNSPECIFIED";
    AuthType2["NO_AUTH"] = "NO_AUTH";
    AuthType2["API_KEY_AUTH"] = "API_KEY_AUTH";
    AuthType2["HTTP_BASIC_AUTH"] = "HTTP_BASIC_AUTH";
    AuthType2["GOOGLE_SERVICE_ACCOUNT_AUTH"] = "GOOGLE_SERVICE_ACCOUNT_AUTH";
    AuthType2["OAUTH"] = "OAUTH";
    AuthType2["OIDC_AUTH"] = "OIDC_AUTH";
  })(AuthType || (AuthType = {}));
  var ApiSpec;
  (function(ApiSpec2) {
    ApiSpec2["API_SPEC_UNSPECIFIED"] = "API_SPEC_UNSPECIFIED";
    ApiSpec2["SIMPLE_SEARCH"] = "SIMPLE_SEARCH";
    ApiSpec2["ELASTIC_SEARCH"] = "ELASTIC_SEARCH";
  })(ApiSpec || (ApiSpec = {}));
  var UrlRetrievalStatus;
  (function(UrlRetrievalStatus2) {
    UrlRetrievalStatus2["URL_RETRIEVAL_STATUS_UNSPECIFIED"] = "URL_RETRIEVAL_STATUS_UNSPECIFIED";
    UrlRetrievalStatus2["URL_RETRIEVAL_STATUS_SUCCESS"] = "URL_RETRIEVAL_STATUS_SUCCESS";
    UrlRetrievalStatus2["URL_RETRIEVAL_STATUS_ERROR"] = "URL_RETRIEVAL_STATUS_ERROR";
    UrlRetrievalStatus2["URL_RETRIEVAL_STATUS_PAYWALL"] = "URL_RETRIEVAL_STATUS_PAYWALL";
    UrlRetrievalStatus2["URL_RETRIEVAL_STATUS_UNSAFE"] = "URL_RETRIEVAL_STATUS_UNSAFE";
  })(UrlRetrievalStatus || (UrlRetrievalStatus = {}));
  var FinishReason;
  (function(FinishReason2) {
    FinishReason2["FINISH_REASON_UNSPECIFIED"] = "FINISH_REASON_UNSPECIFIED";
    FinishReason2["STOP"] = "STOP";
    FinishReason2["MAX_TOKENS"] = "MAX_TOKENS";
    FinishReason2["SAFETY"] = "SAFETY";
    FinishReason2["RECITATION"] = "RECITATION";
    FinishReason2["LANGUAGE"] = "LANGUAGE";
    FinishReason2["OTHER"] = "OTHER";
    FinishReason2["BLOCKLIST"] = "BLOCKLIST";
    FinishReason2["PROHIBITED_CONTENT"] = "PROHIBITED_CONTENT";
    FinishReason2["SPII"] = "SPII";
    FinishReason2["MALFORMED_FUNCTION_CALL"] = "MALFORMED_FUNCTION_CALL";
    FinishReason2["IMAGE_SAFETY"] = "IMAGE_SAFETY";
    FinishReason2["UNEXPECTED_TOOL_CALL"] = "UNEXPECTED_TOOL_CALL";
  })(FinishReason || (FinishReason = {}));
  var HarmProbability;
  (function(HarmProbability2) {
    HarmProbability2["HARM_PROBABILITY_UNSPECIFIED"] = "HARM_PROBABILITY_UNSPECIFIED";
    HarmProbability2["NEGLIGIBLE"] = "NEGLIGIBLE";
    HarmProbability2["LOW"] = "LOW";
    HarmProbability2["MEDIUM"] = "MEDIUM";
    HarmProbability2["HIGH"] = "HIGH";
  })(HarmProbability || (HarmProbability = {}));
  var HarmSeverity;
  (function(HarmSeverity2) {
    HarmSeverity2["HARM_SEVERITY_UNSPECIFIED"] = "HARM_SEVERITY_UNSPECIFIED";
    HarmSeverity2["HARM_SEVERITY_NEGLIGIBLE"] = "HARM_SEVERITY_NEGLIGIBLE";
    HarmSeverity2["HARM_SEVERITY_LOW"] = "HARM_SEVERITY_LOW";
    HarmSeverity2["HARM_SEVERITY_MEDIUM"] = "HARM_SEVERITY_MEDIUM";
    HarmSeverity2["HARM_SEVERITY_HIGH"] = "HARM_SEVERITY_HIGH";
  })(HarmSeverity || (HarmSeverity = {}));
  var BlockedReason;
  (function(BlockedReason2) {
    BlockedReason2["BLOCKED_REASON_UNSPECIFIED"] = "BLOCKED_REASON_UNSPECIFIED";
    BlockedReason2["SAFETY"] = "SAFETY";
    BlockedReason2["OTHER"] = "OTHER";
    BlockedReason2["BLOCKLIST"] = "BLOCKLIST";
    BlockedReason2["PROHIBITED_CONTENT"] = "PROHIBITED_CONTENT";
    BlockedReason2["IMAGE_SAFETY"] = "IMAGE_SAFETY";
  })(BlockedReason || (BlockedReason = {}));
  var TrafficType;
  (function(TrafficType2) {
    TrafficType2["TRAFFIC_TYPE_UNSPECIFIED"] = "TRAFFIC_TYPE_UNSPECIFIED";
    TrafficType2["ON_DEMAND"] = "ON_DEMAND";
    TrafficType2["PROVISIONED_THROUGHPUT"] = "PROVISIONED_THROUGHPUT";
  })(TrafficType || (TrafficType = {}));
  var Modality;
  (function(Modality2) {
    Modality2["MODALITY_UNSPECIFIED"] = "MODALITY_UNSPECIFIED";
    Modality2["TEXT"] = "TEXT";
    Modality2["IMAGE"] = "IMAGE";
    Modality2["AUDIO"] = "AUDIO";
  })(Modality || (Modality = {}));
  var MediaResolution;
  (function(MediaResolution2) {
    MediaResolution2["MEDIA_RESOLUTION_UNSPECIFIED"] = "MEDIA_RESOLUTION_UNSPECIFIED";
    MediaResolution2["MEDIA_RESOLUTION_LOW"] = "MEDIA_RESOLUTION_LOW";
    MediaResolution2["MEDIA_RESOLUTION_MEDIUM"] = "MEDIA_RESOLUTION_MEDIUM";
    MediaResolution2["MEDIA_RESOLUTION_HIGH"] = "MEDIA_RESOLUTION_HIGH";
  })(MediaResolution || (MediaResolution = {}));
  var JobState;
  (function(JobState2) {
    JobState2["JOB_STATE_UNSPECIFIED"] = "JOB_STATE_UNSPECIFIED";
    JobState2["JOB_STATE_QUEUED"] = "JOB_STATE_QUEUED";
    JobState2["JOB_STATE_PENDING"] = "JOB_STATE_PENDING";
    JobState2["JOB_STATE_RUNNING"] = "JOB_STATE_RUNNING";
    JobState2["JOB_STATE_SUCCEEDED"] = "JOB_STATE_SUCCEEDED";
    JobState2["JOB_STATE_FAILED"] = "JOB_STATE_FAILED";
    JobState2["JOB_STATE_CANCELLING"] = "JOB_STATE_CANCELLING";
    JobState2["JOB_STATE_CANCELLED"] = "JOB_STATE_CANCELLED";
    JobState2["JOB_STATE_PAUSED"] = "JOB_STATE_PAUSED";
    JobState2["JOB_STATE_EXPIRED"] = "JOB_STATE_EXPIRED";
    JobState2["JOB_STATE_UPDATING"] = "JOB_STATE_UPDATING";
    JobState2["JOB_STATE_PARTIALLY_SUCCEEDED"] = "JOB_STATE_PARTIALLY_SUCCEEDED";
  })(JobState || (JobState = {}));
  var TuningMode;
  (function(TuningMode2) {
    TuningMode2["TUNING_MODE_UNSPECIFIED"] = "TUNING_MODE_UNSPECIFIED";
    TuningMode2["TUNING_MODE_FULL"] = "TUNING_MODE_FULL";
    TuningMode2["TUNING_MODE_PEFT_ADAPTER"] = "TUNING_MODE_PEFT_ADAPTER";
  })(TuningMode || (TuningMode = {}));
  var AdapterSize;
  (function(AdapterSize2) {
    AdapterSize2["ADAPTER_SIZE_UNSPECIFIED"] = "ADAPTER_SIZE_UNSPECIFIED";
    AdapterSize2["ADAPTER_SIZE_ONE"] = "ADAPTER_SIZE_ONE";
    AdapterSize2["ADAPTER_SIZE_TWO"] = "ADAPTER_SIZE_TWO";
    AdapterSize2["ADAPTER_SIZE_FOUR"] = "ADAPTER_SIZE_FOUR";
    AdapterSize2["ADAPTER_SIZE_EIGHT"] = "ADAPTER_SIZE_EIGHT";
    AdapterSize2["ADAPTER_SIZE_SIXTEEN"] = "ADAPTER_SIZE_SIXTEEN";
    AdapterSize2["ADAPTER_SIZE_THIRTY_TWO"] = "ADAPTER_SIZE_THIRTY_TWO";
  })(AdapterSize || (AdapterSize = {}));
  var FeatureSelectionPreference;
  (function(FeatureSelectionPreference2) {
    FeatureSelectionPreference2["FEATURE_SELECTION_PREFERENCE_UNSPECIFIED"] = "FEATURE_SELECTION_PREFERENCE_UNSPECIFIED";
    FeatureSelectionPreference2["PRIORITIZE_QUALITY"] = "PRIORITIZE_QUALITY";
    FeatureSelectionPreference2["BALANCED"] = "BALANCED";
    FeatureSelectionPreference2["PRIORITIZE_COST"] = "PRIORITIZE_COST";
  })(FeatureSelectionPreference || (FeatureSelectionPreference = {}));
  var Behavior;
  (function(Behavior2) {
    Behavior2["UNSPECIFIED"] = "UNSPECIFIED";
    Behavior2["BLOCKING"] = "BLOCKING";
    Behavior2["NON_BLOCKING"] = "NON_BLOCKING";
  })(Behavior || (Behavior = {}));
  var DynamicRetrievalConfigMode;
  (function(DynamicRetrievalConfigMode2) {
    DynamicRetrievalConfigMode2["MODE_UNSPECIFIED"] = "MODE_UNSPECIFIED";
    DynamicRetrievalConfigMode2["MODE_DYNAMIC"] = "MODE_DYNAMIC";
  })(DynamicRetrievalConfigMode || (DynamicRetrievalConfigMode = {}));
  var Environment;
  (function(Environment2) {
    Environment2["ENVIRONMENT_UNSPECIFIED"] = "ENVIRONMENT_UNSPECIFIED";
    Environment2["ENVIRONMENT_BROWSER"] = "ENVIRONMENT_BROWSER";
  })(Environment || (Environment = {}));
  var FunctionCallingConfigMode;
  (function(FunctionCallingConfigMode2) {
    FunctionCallingConfigMode2["MODE_UNSPECIFIED"] = "MODE_UNSPECIFIED";
    FunctionCallingConfigMode2["AUTO"] = "AUTO";
    FunctionCallingConfigMode2["ANY"] = "ANY";
    FunctionCallingConfigMode2["NONE"] = "NONE";
    FunctionCallingConfigMode2["VALIDATED"] = "VALIDATED";
  })(FunctionCallingConfigMode || (FunctionCallingConfigMode = {}));
  var SafetyFilterLevel;
  (function(SafetyFilterLevel2) {
    SafetyFilterLevel2["BLOCK_LOW_AND_ABOVE"] = "BLOCK_LOW_AND_ABOVE";
    SafetyFilterLevel2["BLOCK_MEDIUM_AND_ABOVE"] = "BLOCK_MEDIUM_AND_ABOVE";
    SafetyFilterLevel2["BLOCK_ONLY_HIGH"] = "BLOCK_ONLY_HIGH";
    SafetyFilterLevel2["BLOCK_NONE"] = "BLOCK_NONE";
  })(SafetyFilterLevel || (SafetyFilterLevel = {}));
  var PersonGeneration;
  (function(PersonGeneration2) {
    PersonGeneration2["DONT_ALLOW"] = "DONT_ALLOW";
    PersonGeneration2["ALLOW_ADULT"] = "ALLOW_ADULT";
    PersonGeneration2["ALLOW_ALL"] = "ALLOW_ALL";
  })(PersonGeneration || (PersonGeneration = {}));
  var ImagePromptLanguage;
  (function(ImagePromptLanguage2) {
    ImagePromptLanguage2["auto"] = "auto";
    ImagePromptLanguage2["en"] = "en";
    ImagePromptLanguage2["ja"] = "ja";
    ImagePromptLanguage2["ko"] = "ko";
    ImagePromptLanguage2["hi"] = "hi";
    ImagePromptLanguage2["zh"] = "zh";
    ImagePromptLanguage2["pt"] = "pt";
    ImagePromptLanguage2["es"] = "es";
  })(ImagePromptLanguage || (ImagePromptLanguage = {}));
  var MaskReferenceMode;
  (function(MaskReferenceMode2) {
    MaskReferenceMode2["MASK_MODE_DEFAULT"] = "MASK_MODE_DEFAULT";
    MaskReferenceMode2["MASK_MODE_USER_PROVIDED"] = "MASK_MODE_USER_PROVIDED";
    MaskReferenceMode2["MASK_MODE_BACKGROUND"] = "MASK_MODE_BACKGROUND";
    MaskReferenceMode2["MASK_MODE_FOREGROUND"] = "MASK_MODE_FOREGROUND";
    MaskReferenceMode2["MASK_MODE_SEMANTIC"] = "MASK_MODE_SEMANTIC";
  })(MaskReferenceMode || (MaskReferenceMode = {}));
  var ControlReferenceType;
  (function(ControlReferenceType2) {
    ControlReferenceType2["CONTROL_TYPE_DEFAULT"] = "CONTROL_TYPE_DEFAULT";
    ControlReferenceType2["CONTROL_TYPE_CANNY"] = "CONTROL_TYPE_CANNY";
    ControlReferenceType2["CONTROL_TYPE_SCRIBBLE"] = "CONTROL_TYPE_SCRIBBLE";
    ControlReferenceType2["CONTROL_TYPE_FACE_MESH"] = "CONTROL_TYPE_FACE_MESH";
  })(ControlReferenceType || (ControlReferenceType = {}));
  var SubjectReferenceType;
  (function(SubjectReferenceType2) {
    SubjectReferenceType2["SUBJECT_TYPE_DEFAULT"] = "SUBJECT_TYPE_DEFAULT";
    SubjectReferenceType2["SUBJECT_TYPE_PERSON"] = "SUBJECT_TYPE_PERSON";
    SubjectReferenceType2["SUBJECT_TYPE_ANIMAL"] = "SUBJECT_TYPE_ANIMAL";
    SubjectReferenceType2["SUBJECT_TYPE_PRODUCT"] = "SUBJECT_TYPE_PRODUCT";
  })(SubjectReferenceType || (SubjectReferenceType = {}));
  var EditMode;
  (function(EditMode2) {
    EditMode2["EDIT_MODE_DEFAULT"] = "EDIT_MODE_DEFAULT";
    EditMode2["EDIT_MODE_INPAINT_REMOVAL"] = "EDIT_MODE_INPAINT_REMOVAL";
    EditMode2["EDIT_MODE_INPAINT_INSERTION"] = "EDIT_MODE_INPAINT_INSERTION";
    EditMode2["EDIT_MODE_OUTPAINT"] = "EDIT_MODE_OUTPAINT";
    EditMode2["EDIT_MODE_CONTROLLED_EDITING"] = "EDIT_MODE_CONTROLLED_EDITING";
    EditMode2["EDIT_MODE_STYLE"] = "EDIT_MODE_STYLE";
    EditMode2["EDIT_MODE_BGSWAP"] = "EDIT_MODE_BGSWAP";
    EditMode2["EDIT_MODE_PRODUCT_IMAGE"] = "EDIT_MODE_PRODUCT_IMAGE";
  })(EditMode || (EditMode = {}));
  var SegmentMode;
  (function(SegmentMode2) {
    SegmentMode2["FOREGROUND"] = "FOREGROUND";
    SegmentMode2["BACKGROUND"] = "BACKGROUND";
    SegmentMode2["PROMPT"] = "PROMPT";
    SegmentMode2["SEMANTIC"] = "SEMANTIC";
    SegmentMode2["INTERACTIVE"] = "INTERACTIVE";
  })(SegmentMode || (SegmentMode = {}));
  var VideoGenerationReferenceType;
  (function(VideoGenerationReferenceType2) {
    VideoGenerationReferenceType2["ASSET"] = "ASSET";
    VideoGenerationReferenceType2["STYLE"] = "STYLE";
  })(VideoGenerationReferenceType || (VideoGenerationReferenceType = {}));
  var VideoGenerationMaskMode;
  (function(VideoGenerationMaskMode2) {
    VideoGenerationMaskMode2["INSERT"] = "INSERT";
    VideoGenerationMaskMode2["REMOVE"] = "REMOVE";
    VideoGenerationMaskMode2["REMOVE_STATIC"] = "REMOVE_STATIC";
    VideoGenerationMaskMode2["OUTPAINT"] = "OUTPAINT";
  })(VideoGenerationMaskMode || (VideoGenerationMaskMode = {}));
  var VideoCompressionQuality;
  (function(VideoCompressionQuality2) {
    VideoCompressionQuality2["OPTIMIZED"] = "OPTIMIZED";
    VideoCompressionQuality2["LOSSLESS"] = "LOSSLESS";
  })(VideoCompressionQuality || (VideoCompressionQuality = {}));
  var FileState;
  (function(FileState2) {
    FileState2["STATE_UNSPECIFIED"] = "STATE_UNSPECIFIED";
    FileState2["PROCESSING"] = "PROCESSING";
    FileState2["ACTIVE"] = "ACTIVE";
    FileState2["FAILED"] = "FAILED";
  })(FileState || (FileState = {}));
  var FileSource;
  (function(FileSource2) {
    FileSource2["SOURCE_UNSPECIFIED"] = "SOURCE_UNSPECIFIED";
    FileSource2["UPLOADED"] = "UPLOADED";
    FileSource2["GENERATED"] = "GENERATED";
  })(FileSource || (FileSource = {}));
  var TurnCompleteReason;
  (function(TurnCompleteReason2) {
    TurnCompleteReason2["TURN_COMPLETE_REASON_UNSPECIFIED"] = "TURN_COMPLETE_REASON_UNSPECIFIED";
    TurnCompleteReason2["MALFORMED_FUNCTION_CALL"] = "MALFORMED_FUNCTION_CALL";
    TurnCompleteReason2["RESPONSE_REJECTED"] = "RESPONSE_REJECTED";
    TurnCompleteReason2["NEED_MORE_INPUT"] = "NEED_MORE_INPUT";
  })(TurnCompleteReason || (TurnCompleteReason = {}));
  var MediaModality;
  (function(MediaModality2) {
    MediaModality2["MODALITY_UNSPECIFIED"] = "MODALITY_UNSPECIFIED";
    MediaModality2["TEXT"] = "TEXT";
    MediaModality2["IMAGE"] = "IMAGE";
    MediaModality2["VIDEO"] = "VIDEO";
    MediaModality2["AUDIO"] = "AUDIO";
    MediaModality2["DOCUMENT"] = "DOCUMENT";
  })(MediaModality || (MediaModality = {}));
  var StartSensitivity;
  (function(StartSensitivity2) {
    StartSensitivity2["START_SENSITIVITY_UNSPECIFIED"] = "START_SENSITIVITY_UNSPECIFIED";
    StartSensitivity2["START_SENSITIVITY_HIGH"] = "START_SENSITIVITY_HIGH";
    StartSensitivity2["START_SENSITIVITY_LOW"] = "START_SENSITIVITY_LOW";
  })(StartSensitivity || (StartSensitivity = {}));
  var EndSensitivity;
  (function(EndSensitivity2) {
    EndSensitivity2["END_SENSITIVITY_UNSPECIFIED"] = "END_SENSITIVITY_UNSPECIFIED";
    EndSensitivity2["END_SENSITIVITY_HIGH"] = "END_SENSITIVITY_HIGH";
    EndSensitivity2["END_SENSITIVITY_LOW"] = "END_SENSITIVITY_LOW";
  })(EndSensitivity || (EndSensitivity = {}));
  var ActivityHandling;
  (function(ActivityHandling2) {
    ActivityHandling2["ACTIVITY_HANDLING_UNSPECIFIED"] = "ACTIVITY_HANDLING_UNSPECIFIED";
    ActivityHandling2["START_OF_ACTIVITY_INTERRUPTS"] = "START_OF_ACTIVITY_INTERRUPTS";
    ActivityHandling2["NO_INTERRUPTION"] = "NO_INTERRUPTION";
  })(ActivityHandling || (ActivityHandling = {}));
  var TurnCoverage;
  (function(TurnCoverage2) {
    TurnCoverage2["TURN_COVERAGE_UNSPECIFIED"] = "TURN_COVERAGE_UNSPECIFIED";
    TurnCoverage2["TURN_INCLUDES_ONLY_ACTIVITY"] = "TURN_INCLUDES_ONLY_ACTIVITY";
    TurnCoverage2["TURN_INCLUDES_ALL_INPUT"] = "TURN_INCLUDES_ALL_INPUT";
  })(TurnCoverage || (TurnCoverage = {}));
  var FunctionResponseScheduling;
  (function(FunctionResponseScheduling2) {
    FunctionResponseScheduling2["SCHEDULING_UNSPECIFIED"] = "SCHEDULING_UNSPECIFIED";
    FunctionResponseScheduling2["SILENT"] = "SILENT";
    FunctionResponseScheduling2["WHEN_IDLE"] = "WHEN_IDLE";
    FunctionResponseScheduling2["INTERRUPT"] = "INTERRUPT";
  })(FunctionResponseScheduling || (FunctionResponseScheduling = {}));
  var Scale;
  (function(Scale2) {
    Scale2["SCALE_UNSPECIFIED"] = "SCALE_UNSPECIFIED";
    Scale2["C_MAJOR_A_MINOR"] = "C_MAJOR_A_MINOR";
    Scale2["D_FLAT_MAJOR_B_FLAT_MINOR"] = "D_FLAT_MAJOR_B_FLAT_MINOR";
    Scale2["D_MAJOR_B_MINOR"] = "D_MAJOR_B_MINOR";
    Scale2["E_FLAT_MAJOR_C_MINOR"] = "E_FLAT_MAJOR_C_MINOR";
    Scale2["E_MAJOR_D_FLAT_MINOR"] = "E_MAJOR_D_FLAT_MINOR";
    Scale2["F_MAJOR_D_MINOR"] = "F_MAJOR_D_MINOR";
    Scale2["G_FLAT_MAJOR_E_FLAT_MINOR"] = "G_FLAT_MAJOR_E_FLAT_MINOR";
    Scale2["G_MAJOR_E_MINOR"] = "G_MAJOR_E_MINOR";
    Scale2["A_FLAT_MAJOR_F_MINOR"] = "A_FLAT_MAJOR_F_MINOR";
    Scale2["A_MAJOR_G_FLAT_MINOR"] = "A_MAJOR_G_FLAT_MINOR";
    Scale2["B_FLAT_MAJOR_G_MINOR"] = "B_FLAT_MAJOR_G_MINOR";
    Scale2["B_MAJOR_A_FLAT_MINOR"] = "B_MAJOR_A_FLAT_MINOR";
  })(Scale || (Scale = {}));
  var MusicGenerationMode;
  (function(MusicGenerationMode2) {
    MusicGenerationMode2["MUSIC_GENERATION_MODE_UNSPECIFIED"] = "MUSIC_GENERATION_MODE_UNSPECIFIED";
    MusicGenerationMode2["QUALITY"] = "QUALITY";
    MusicGenerationMode2["DIVERSITY"] = "DIVERSITY";
    MusicGenerationMode2["VOCALIZATION"] = "VOCALIZATION";
  })(MusicGenerationMode || (MusicGenerationMode = {}));
  var LiveMusicPlaybackControl;
  (function(LiveMusicPlaybackControl2) {
    LiveMusicPlaybackControl2["PLAYBACK_CONTROL_UNSPECIFIED"] = "PLAYBACK_CONTROL_UNSPECIFIED";
    LiveMusicPlaybackControl2["PLAY"] = "PLAY";
    LiveMusicPlaybackControl2["PAUSE"] = "PAUSE";
    LiveMusicPlaybackControl2["STOP"] = "STOP";
    LiveMusicPlaybackControl2["RESET_CONTEXT"] = "RESET_CONTEXT";
  })(LiveMusicPlaybackControl || (LiveMusicPlaybackControl = {}));
  var HttpResponse = class {
    constructor(response) {
      const headers = {};
      for (const pair of response.headers.entries()) {
        headers[pair[0]] = pair[1];
      }
      this.headers = headers;
      this.responseInternal = response;
    }
    json() {
      return this.responseInternal.json();
    }
  };
  var GenerateContentResponse = class {
    /**
     * Returns the concatenation of all text parts from the first candidate in the response.
     *
     * @remarks
     * If there are multiple candidates in the response, the text from the first
     * one will be returned.
     * If there are non-text parts in the response, the concatenation of all text
     * parts will be returned, and a warning will be logged.
     * If there are thought parts in the response, the concatenation of all text
     * parts excluding the thought parts will be returned.
     *
     * @example
     * ```ts
     * const response = await ai.models.generateContent({
     *   model: 'gemini-2.0-flash',
     *   contents:
     *     'Why is the sky blue?',
     * });
     *
     * console.debug(response.text);
     * ```
     */
    get text() {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {
        return void 0;
      }
      if (this.candidates && this.candidates.length > 1) {
        console.warn("there are multiple candidates in the response, returning text from the first one.");
      }
      let text = "";
      let anyTextPartText = false;
      const nonTextParts = [];
      for (const part of (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) !== null && _h !== void 0 ? _h : []) {
        for (const [fieldName, fieldValue] of Object.entries(part)) {
          if (fieldName !== "text" && fieldName !== "thought" && (fieldValue !== null || fieldValue !== void 0)) {
            nonTextParts.push(fieldName);
          }
        }
        if (typeof part.text === "string") {
          if (typeof part.thought === "boolean" && part.thought) {
            continue;
          }
          anyTextPartText = true;
          text += part.text;
        }
      }
      if (nonTextParts.length > 0) {
        console.warn(`there are non-text parts ${nonTextParts} in the response, returning concatenation of all text parts. Please refer to the non text parts for a full response from model.`);
      }
      return anyTextPartText ? text : void 0;
    }
    /**
     * Returns the concatenation of all inline data parts from the first candidate
     * in the response.
     *
     * @remarks
     * If there are multiple candidates in the response, the inline data from the
     * first one will be returned. If there are non-inline data parts in the
     * response, the concatenation of all inline data parts will be returned, and
     * a warning will be logged.
     */
    get data() {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {
        return void 0;
      }
      if (this.candidates && this.candidates.length > 1) {
        console.warn("there are multiple candidates in the response, returning data from the first one.");
      }
      let data = "";
      const nonDataParts = [];
      for (const part of (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) !== null && _h !== void 0 ? _h : []) {
        for (const [fieldName, fieldValue] of Object.entries(part)) {
          if (fieldName !== "inlineData" && (fieldValue !== null || fieldValue !== void 0)) {
            nonDataParts.push(fieldName);
          }
        }
        if (part.inlineData && typeof part.inlineData.data === "string") {
          data += atob(part.inlineData.data);
        }
      }
      if (nonDataParts.length > 0) {
        console.warn(`there are non-data parts ${nonDataParts} in the response, returning concatenation of all data parts. Please refer to the non data parts for a full response from model.`);
      }
      return data.length > 0 ? btoa(data) : void 0;
    }
    /**
     * Returns the function calls from the first candidate in the response.
     *
     * @remarks
     * If there are multiple candidates in the response, the function calls from
     * the first one will be returned.
     * If there are no function calls in the response, undefined will be returned.
     *
     * @example
     * ```ts
     * const controlLightFunctionDeclaration: FunctionDeclaration = {
     *   name: 'controlLight',
     *   parameters: {
     *   type: Type.OBJECT,
     *   description: 'Set the brightness and color temperature of a room light.',
     *   properties: {
     *     brightness: {
     *       type: Type.NUMBER,
     *       description:
     *         'Light level from 0 to 100. Zero is off and 100 is full brightness.',
     *     },
     *     colorTemperature: {
     *       type: Type.STRING,
     *       description:
     *         'Color temperature of the light fixture which can be `daylight`, `cool` or `warm`.',
     *     },
     *   },
     *   required: ['brightness', 'colorTemperature'],
     *  };
     *  const response = await ai.models.generateContent({
     *     model: 'gemini-2.0-flash',
     *     contents: 'Dim the lights so the room feels cozy and warm.',
     *     config: {
     *       tools: [{functionDeclarations: [controlLightFunctionDeclaration]}],
     *       toolConfig: {
     *         functionCallingConfig: {
     *           mode: FunctionCallingConfigMode.ANY,
     *           allowedFunctionNames: ['controlLight'],
     *         },
     *       },
     *     },
     *   });
     *  console.debug(JSON.stringify(response.functionCalls));
     * ```
     */
    get functionCalls() {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {
        return void 0;
      }
      if (this.candidates && this.candidates.length > 1) {
        console.warn("there are multiple candidates in the response, returning function calls from the first one.");
      }
      const functionCalls = (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) === null || _h === void 0 ? void 0 : _h.filter((part) => part.functionCall).map((part) => part.functionCall).filter((functionCall) => functionCall !== void 0);
      if ((functionCalls === null || functionCalls === void 0 ? void 0 : functionCalls.length) === 0) {
        return void 0;
      }
      return functionCalls;
    }
    /**
     * Returns the first executable code from the first candidate in the response.
     *
     * @remarks
     * If there are multiple candidates in the response, the executable code from
     * the first one will be returned.
     * If there are no executable code in the response, undefined will be
     * returned.
     *
     * @example
     * ```ts
     * const response = await ai.models.generateContent({
     *   model: 'gemini-2.0-flash',
     *   contents:
     *     'What is the sum of the first 50 prime numbers? Generate and run code for the calculation, and make sure you get all 50.'
     *   config: {
     *     tools: [{codeExecution: {}}],
     *   },
     * });
     *
     * console.debug(response.executableCode);
     * ```
     */
    get executableCode() {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j;
      if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {
        return void 0;
      }
      if (this.candidates && this.candidates.length > 1) {
        console.warn("there are multiple candidates in the response, returning executable code from the first one.");
      }
      const executableCode = (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) === null || _h === void 0 ? void 0 : _h.filter((part) => part.executableCode).map((part) => part.executableCode).filter((executableCode2) => executableCode2 !== void 0);
      if ((executableCode === null || executableCode === void 0 ? void 0 : executableCode.length) === 0) {
        return void 0;
      }
      return (_j = executableCode === null || executableCode === void 0 ? void 0 : executableCode[0]) === null || _j === void 0 ? void 0 : _j.code;
    }
    /**
     * Returns the first code execution result from the first candidate in the response.
     *
     * @remarks
     * If there are multiple candidates in the response, the code execution result from
     * the first one will be returned.
     * If there are no code execution result in the response, undefined will be returned.
     *
     * @example
     * ```ts
     * const response = await ai.models.generateContent({
     *   model: 'gemini-2.0-flash',
     *   contents:
     *     'What is the sum of the first 50 prime numbers? Generate and run code for the calculation, and make sure you get all 50.'
     *   config: {
     *     tools: [{codeExecution: {}}],
     *   },
     * });
     *
     * console.debug(response.codeExecutionResult);
     * ```
     */
    get codeExecutionResult() {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j;
      if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {
        return void 0;
      }
      if (this.candidates && this.candidates.length > 1) {
        console.warn("there are multiple candidates in the response, returning code execution result from the first one.");
      }
      const codeExecutionResult = (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) === null || _h === void 0 ? void 0 : _h.filter((part) => part.codeExecutionResult).map((part) => part.codeExecutionResult).filter((codeExecutionResult2) => codeExecutionResult2 !== void 0);
      if ((codeExecutionResult === null || codeExecutionResult === void 0 ? void 0 : codeExecutionResult.length) === 0) {
        return void 0;
      }
      return (_j = codeExecutionResult === null || codeExecutionResult === void 0 ? void 0 : codeExecutionResult[0]) === null || _j === void 0 ? void 0 : _j.output;
    }
  };
  var EmbedContentResponse = class {
  };
  var GenerateImagesResponse = class {
  };
  var EditImageResponse = class {
  };
  var UpscaleImageResponse = class {
  };
  var RecontextImageResponse = class {
  };
  var SegmentImageResponse = class {
  };
  var ListModelsResponse = class {
  };
  var DeleteModelResponse = class {
  };
  var CountTokensResponse = class {
  };
  var ComputeTokensResponse = class {
  };
  var GenerateVideosOperation = class _GenerateVideosOperation {
    /**
     * Instantiates an Operation of the same type as the one being called with the fields set from the API response.
     * @internal
     */
    _fromAPIResponse({ apiResponse, isVertexAI }) {
      const operation = new _GenerateVideosOperation();
      let response;
      const op = apiResponse;
      if (isVertexAI) {
        response = generateVideosOperationFromVertex$1(op);
      } else {
        response = generateVideosOperationFromMldev$1(op);
      }
      Object.assign(operation, response);
      return operation;
    }
  };
  var ListTuningJobsResponse = class {
  };
  var DeleteCachedContentResponse = class {
  };
  var ListCachedContentsResponse = class {
  };
  var ListFilesResponse = class {
  };
  var CreateFileResponse = class {
  };
  var DeleteFileResponse = class {
  };
  var ListBatchJobsResponse = class {
  };
  var LiveServerMessage = class {
    /**
     * Returns the concatenation of all text parts from the server content if present.
     *
     * @remarks
     * If there are non-text parts in the response, the concatenation of all text
     * parts will be returned, and a warning will be logged.
     */
    get text() {
      var _a, _b, _c;
      let text = "";
      let anyTextPartFound = false;
      const nonTextParts = [];
      for (const part of (_c = (_b = (_a = this.serverContent) === null || _a === void 0 ? void 0 : _a.modelTurn) === null || _b === void 0 ? void 0 : _b.parts) !== null && _c !== void 0 ? _c : []) {
        for (const [fieldName, fieldValue] of Object.entries(part)) {
          if (fieldName !== "text" && fieldName !== "thought" && fieldValue !== null) {
            nonTextParts.push(fieldName);
          }
        }
        if (typeof part.text === "string") {
          if (typeof part.thought === "boolean" && part.thought) {
            continue;
          }
          anyTextPartFound = true;
          text += part.text;
        }
      }
      if (nonTextParts.length > 0) {
        console.warn(`there are non-text parts ${nonTextParts} in the response, returning concatenation of all text parts. Please refer to the non text parts for a full response from model.`);
      }
      return anyTextPartFound ? text : void 0;
    }
    /**
     * Returns the concatenation of all inline data parts from the server content if present.
     *
     * @remarks
     * If there are non-inline data parts in the
     * response, the concatenation of all inline data parts will be returned, and
     * a warning will be logged.
     */
    get data() {
      var _a, _b, _c;
      let data = "";
      const nonDataParts = [];
      for (const part of (_c = (_b = (_a = this.serverContent) === null || _a === void 0 ? void 0 : _a.modelTurn) === null || _b === void 0 ? void 0 : _b.parts) !== null && _c !== void 0 ? _c : []) {
        for (const [fieldName, fieldValue] of Object.entries(part)) {
          if (fieldName !== "inlineData" && fieldValue !== null) {
            nonDataParts.push(fieldName);
          }
        }
        if (part.inlineData && typeof part.inlineData.data === "string") {
          data += atob(part.inlineData.data);
        }
      }
      if (nonDataParts.length > 0) {
        console.warn(`there are non-data parts ${nonDataParts} in the response, returning concatenation of all data parts. Please refer to the non data parts for a full response from model.`);
      }
      return data.length > 0 ? btoa(data) : void 0;
    }
  };
  var LiveMusicServerMessage = class {
    /**
     * Returns the first audio chunk from the server content, if present.
     *
     * @remarks
     * If there are no audio chunks in the response, undefined will be returned.
     */
    get audioChunk() {
      if (this.serverContent && this.serverContent.audioChunks && this.serverContent.audioChunks.length > 0) {
        return this.serverContent.audioChunks[0];
      }
      return void 0;
    }
  };
  function tModel(apiClient, model) {
    if (!model || typeof model !== "string") {
      throw new Error("model is required and must be a string");
    }
    if (apiClient.isVertexAI()) {
      if (model.startsWith("publishers/") || model.startsWith("projects/") || model.startsWith("models/")) {
        return model;
      } else if (model.indexOf("/") >= 0) {
        const parts = model.split("/", 2);
        return `publishers/${parts[0]}/models/${parts[1]}`;
      } else {
        return `publishers/google/models/${model}`;
      }
    } else {
      if (model.startsWith("models/") || model.startsWith("tunedModels/")) {
        return model;
      } else {
        return `models/${model}`;
      }
    }
  }
  function tCachesModel(apiClient, model) {
    const transformedModel = tModel(apiClient, model);
    if (!transformedModel) {
      return "";
    }
    if (transformedModel.startsWith("publishers/") && apiClient.isVertexAI()) {
      return `projects/${apiClient.getProject()}/locations/${apiClient.getLocation()}/${transformedModel}`;
    } else if (transformedModel.startsWith("models/") && apiClient.isVertexAI()) {
      return `projects/${apiClient.getProject()}/locations/${apiClient.getLocation()}/publishers/google/${transformedModel}`;
    } else {
      return transformedModel;
    }
  }
  function tBlobs(blobs) {
    if (Array.isArray(blobs)) {
      return blobs.map((blob) => tBlob(blob));
    } else {
      return [tBlob(blobs)];
    }
  }
  function tBlob(blob) {
    if (typeof blob === "object" && blob !== null) {
      return blob;
    }
    throw new Error(`Could not parse input as Blob. Unsupported blob type: ${typeof blob}`);
  }
  function tImageBlob(blob) {
    const transformedBlob = tBlob(blob);
    if (transformedBlob.mimeType && transformedBlob.mimeType.startsWith("image/")) {
      return transformedBlob;
    }
    throw new Error(`Unsupported mime type: ${transformedBlob.mimeType}`);
  }
  function tAudioBlob(blob) {
    const transformedBlob = tBlob(blob);
    if (transformedBlob.mimeType && transformedBlob.mimeType.startsWith("audio/")) {
      return transformedBlob;
    }
    throw new Error(`Unsupported mime type: ${transformedBlob.mimeType}`);
  }
  function tPart(origin) {
    if (origin === null || origin === void 0) {
      throw new Error("PartUnion is required");
    }
    if (typeof origin === "object") {
      return origin;
    }
    if (typeof origin === "string") {
      return { text: origin };
    }
    throw new Error(`Unsupported part type: ${typeof origin}`);
  }
  function tParts(origin) {
    if (origin === null || origin === void 0 || Array.isArray(origin) && origin.length === 0) {
      throw new Error("PartListUnion is required");
    }
    if (Array.isArray(origin)) {
      return origin.map((item) => tPart(item));
    }
    return [tPart(origin)];
  }
  function _isContent(origin) {
    return origin !== null && origin !== void 0 && typeof origin === "object" && "parts" in origin && Array.isArray(origin.parts);
  }
  function _isFunctionCallPart(origin) {
    return origin !== null && origin !== void 0 && typeof origin === "object" && "functionCall" in origin;
  }
  function _isFunctionResponsePart(origin) {
    return origin !== null && origin !== void 0 && typeof origin === "object" && "functionResponse" in origin;
  }
  function tContent(origin) {
    if (origin === null || origin === void 0) {
      throw new Error("ContentUnion is required");
    }
    if (_isContent(origin)) {
      return origin;
    }
    return {
      role: "user",
      parts: tParts(origin)
    };
  }
  function tContentsForEmbed(apiClient, origin) {
    if (!origin) {
      return [];
    }
    if (apiClient.isVertexAI() && Array.isArray(origin)) {
      return origin.flatMap((item) => {
        const content = tContent(item);
        if (content.parts && content.parts.length > 0 && content.parts[0].text !== void 0) {
          return [content.parts[0].text];
        }
        return [];
      });
    } else if (apiClient.isVertexAI()) {
      const content = tContent(origin);
      if (content.parts && content.parts.length > 0 && content.parts[0].text !== void 0) {
        return [content.parts[0].text];
      }
      return [];
    }
    if (Array.isArray(origin)) {
      return origin.map((item) => tContent(item));
    }
    return [tContent(origin)];
  }
  function tContents(origin) {
    if (origin === null || origin === void 0 || Array.isArray(origin) && origin.length === 0) {
      throw new Error("contents are required");
    }
    if (!Array.isArray(origin)) {
      if (_isFunctionCallPart(origin) || _isFunctionResponsePart(origin)) {
        throw new Error("To specify functionCall or functionResponse parts, please wrap them in a Content object, specifying the role for them");
      }
      return [tContent(origin)];
    }
    const result = [];
    const accumulatedParts = [];
    const isContentArray = _isContent(origin[0]);
    for (const item of origin) {
      const isContent = _isContent(item);
      if (isContent != isContentArray) {
        throw new Error("Mixing Content and Parts is not supported, please group the parts into a the appropriate Content objects and specify the roles for them");
      }
      if (isContent) {
        result.push(item);
      } else if (_isFunctionCallPart(item) || _isFunctionResponsePart(item)) {
        throw new Error("To specify functionCall or functionResponse parts, please wrap them, and any other parts, in Content objects as appropriate, specifying the role for them");
      } else {
        accumulatedParts.push(item);
      }
    }
    if (!isContentArray) {
      result.push({ role: "user", parts: tParts(accumulatedParts) });
    }
    return result;
  }
  function flattenTypeArrayToAnyOf(typeList, resultingSchema) {
    if (typeList.includes("null")) {
      resultingSchema["nullable"] = true;
    }
    const listWithoutNull = typeList.filter((type) => type !== "null");
    if (listWithoutNull.length === 1) {
      resultingSchema["type"] = Object.values(Type).includes(listWithoutNull[0].toUpperCase()) ? listWithoutNull[0].toUpperCase() : Type.TYPE_UNSPECIFIED;
    } else {
      resultingSchema["anyOf"] = [];
      for (const i of listWithoutNull) {
        resultingSchema["anyOf"].push({
          "type": Object.values(Type).includes(i.toUpperCase()) ? i.toUpperCase() : Type.TYPE_UNSPECIFIED
        });
      }
    }
  }
  function processJsonSchema(_jsonSchema) {
    const genAISchema = {};
    const schemaFieldNames = ["items"];
    const listSchemaFieldNames = ["anyOf"];
    const dictSchemaFieldNames = ["properties"];
    if (_jsonSchema["type"] && _jsonSchema["anyOf"]) {
      throw new Error("type and anyOf cannot be both populated.");
    }
    const incomingAnyOf = _jsonSchema["anyOf"];
    if (incomingAnyOf != null && incomingAnyOf.length == 2) {
      if (incomingAnyOf[0]["type"] === "null") {
        genAISchema["nullable"] = true;
        _jsonSchema = incomingAnyOf[1];
      } else if (incomingAnyOf[1]["type"] === "null") {
        genAISchema["nullable"] = true;
        _jsonSchema = incomingAnyOf[0];
      }
    }
    if (_jsonSchema["type"] instanceof Array) {
      flattenTypeArrayToAnyOf(_jsonSchema["type"], genAISchema);
    }
    for (const [fieldName, fieldValue] of Object.entries(_jsonSchema)) {
      if (fieldValue == null) {
        continue;
      }
      if (fieldName == "type") {
        if (fieldValue === "null") {
          throw new Error("type: null can not be the only possible type for the field.");
        }
        if (fieldValue instanceof Array) {
          continue;
        }
        genAISchema["type"] = Object.values(Type).includes(fieldValue.toUpperCase()) ? fieldValue.toUpperCase() : Type.TYPE_UNSPECIFIED;
      } else if (schemaFieldNames.includes(fieldName)) {
        genAISchema[fieldName] = processJsonSchema(fieldValue);
      } else if (listSchemaFieldNames.includes(fieldName)) {
        const listSchemaFieldValue = [];
        for (const item of fieldValue) {
          if (item["type"] == "null") {
            genAISchema["nullable"] = true;
            continue;
          }
          listSchemaFieldValue.push(processJsonSchema(item));
        }
        genAISchema[fieldName] = listSchemaFieldValue;
      } else if (dictSchemaFieldNames.includes(fieldName)) {
        const dictSchemaFieldValue = {};
        for (const [key, value] of Object.entries(fieldValue)) {
          dictSchemaFieldValue[key] = processJsonSchema(value);
        }
        genAISchema[fieldName] = dictSchemaFieldValue;
      } else {
        if (fieldName === "additionalProperties") {
          continue;
        }
        genAISchema[fieldName] = fieldValue;
      }
    }
    return genAISchema;
  }
  function tSchema(schema) {
    return processJsonSchema(schema);
  }
  function tSpeechConfig(speechConfig) {
    if (typeof speechConfig === "object") {
      return speechConfig;
    } else if (typeof speechConfig === "string") {
      return {
        voiceConfig: {
          prebuiltVoiceConfig: {
            voiceName: speechConfig
          }
        }
      };
    } else {
      throw new Error(`Unsupported speechConfig type: ${typeof speechConfig}`);
    }
  }
  function tLiveSpeechConfig(speechConfig) {
    if ("multiSpeakerVoiceConfig" in speechConfig) {
      throw new Error("multiSpeakerVoiceConfig is not supported in the live API.");
    }
    return speechConfig;
  }
  function tTool(tool) {
    if (tool.functionDeclarations) {
      for (const functionDeclaration of tool.functionDeclarations) {
        if (functionDeclaration.parameters) {
          if (!Object.keys(functionDeclaration.parameters).includes("$schema")) {
            functionDeclaration.parameters = processJsonSchema(functionDeclaration.parameters);
          } else {
            if (!functionDeclaration.parametersJsonSchema) {
              functionDeclaration.parametersJsonSchema = functionDeclaration.parameters;
              delete functionDeclaration.parameters;
            }
          }
        }
        if (functionDeclaration.response) {
          if (!Object.keys(functionDeclaration.response).includes("$schema")) {
            functionDeclaration.response = processJsonSchema(functionDeclaration.response);
          } else {
            if (!functionDeclaration.responseJsonSchema) {
              functionDeclaration.responseJsonSchema = functionDeclaration.response;
              delete functionDeclaration.response;
            }
          }
        }
      }
    }
    return tool;
  }
  function tTools(tools) {
    if (tools === void 0 || tools === null) {
      throw new Error("tools is required");
    }
    if (!Array.isArray(tools)) {
      throw new Error("tools is required and must be an array of Tools");
    }
    const result = [];
    for (const tool of tools) {
      result.push(tool);
    }
    return result;
  }
  function resourceName(client, resourceName2, resourcePrefix, splitsAfterPrefix = 1) {
    const shouldAppendPrefix = !resourceName2.startsWith(`${resourcePrefix}/`) && resourceName2.split("/").length === splitsAfterPrefix;
    if (client.isVertexAI()) {
      if (resourceName2.startsWith("projects/")) {
        return resourceName2;
      } else if (resourceName2.startsWith("locations/")) {
        return `projects/${client.getProject()}/${resourceName2}`;
      } else if (resourceName2.startsWith(`${resourcePrefix}/`)) {
        return `projects/${client.getProject()}/locations/${client.getLocation()}/${resourceName2}`;
      } else if (shouldAppendPrefix) {
        return `projects/${client.getProject()}/locations/${client.getLocation()}/${resourcePrefix}/${resourceName2}`;
      } else {
        return resourceName2;
      }
    }
    if (shouldAppendPrefix) {
      return `${resourcePrefix}/${resourceName2}`;
    }
    return resourceName2;
  }
  function tCachedContentName(apiClient, name) {
    if (typeof name !== "string") {
      throw new Error("name must be a string");
    }
    return resourceName(apiClient, name, "cachedContents");
  }
  function tTuningJobStatus(status) {
    switch (status) {
      case "STATE_UNSPECIFIED":
        return "JOB_STATE_UNSPECIFIED";
      case "CREATING":
        return "JOB_STATE_RUNNING";
      case "ACTIVE":
        return "JOB_STATE_SUCCEEDED";
      case "FAILED":
        return "JOB_STATE_FAILED";
      default:
        return status;
    }
  }
  function tBytes(fromImageBytes) {
    return tBytes$1(fromImageBytes);
  }
  function _isFile(origin) {
    return origin !== null && origin !== void 0 && typeof origin === "object" && "name" in origin;
  }
  function isGeneratedVideo(origin) {
    return origin !== null && origin !== void 0 && typeof origin === "object" && "video" in origin;
  }
  function isVideo(origin) {
    return origin !== null && origin !== void 0 && typeof origin === "object" && "uri" in origin;
  }
  function tFileName(fromName) {
    var _a;
    let name;
    if (_isFile(fromName)) {
      name = fromName.name;
    }
    if (isVideo(fromName)) {
      name = fromName.uri;
      if (name === void 0) {
        return void 0;
      }
    }
    if (isGeneratedVideo(fromName)) {
      name = (_a = fromName.video) === null || _a === void 0 ? void 0 : _a.uri;
      if (name === void 0) {
        return void 0;
      }
    }
    if (typeof fromName === "string") {
      name = fromName;
    }
    if (name === void 0) {
      throw new Error("Could not extract file name from the provided input.");
    }
    if (name.startsWith("https://")) {
      const suffix = name.split("files/")[1];
      const match = suffix.match(/[a-z0-9]+/);
      if (match === null) {
        throw new Error(`Could not extract file name from URI ${name}`);
      }
      name = match[0];
    } else if (name.startsWith("files/")) {
      name = name.split("files/")[1];
    }
    return name;
  }
  function tModelsUrl(apiClient, baseModels) {
    let res;
    if (apiClient.isVertexAI()) {
      res = baseModels ? "publishers/google/models" : "models";
    } else {
      res = baseModels ? "models" : "tunedModels";
    }
    return res;
  }
  function tExtractModels(response) {
    for (const key of ["models", "tunedModels", "publisherModels"]) {
      if (hasField(response, key)) {
        return response[key];
      }
    }
    return [];
  }
  function hasField(data, fieldName) {
    return data !== null && typeof data === "object" && fieldName in data;
  }
  function mcpToGeminiTool(mcpTool, config = {}) {
    const mcpToolSchema = mcpTool;
    const functionDeclaration = {
      name: mcpToolSchema["name"],
      description: mcpToolSchema["description"],
      parametersJsonSchema: mcpToolSchema["inputSchema"]
    };
    if (mcpToolSchema["outputSchema"]) {
      functionDeclaration["responseJsonSchema"] = mcpToolSchema["outputSchema"];
    }
    if (config.behavior) {
      functionDeclaration["behavior"] = config.behavior;
    }
    const geminiTool = {
      functionDeclarations: [
        functionDeclaration
      ]
    };
    return geminiTool;
  }
  function mcpToolsToGeminiTool(mcpTools, config = {}) {
    const functionDeclarations = [];
    const toolNames = /* @__PURE__ */ new Set();
    for (const mcpTool of mcpTools) {
      const mcpToolName = mcpTool.name;
      if (toolNames.has(mcpToolName)) {
        throw new Error(`Duplicate function name ${mcpToolName} found in MCP tools. Please ensure function names are unique.`);
      }
      toolNames.add(mcpToolName);
      const geminiTool = mcpToGeminiTool(mcpTool, config);
      if (geminiTool.functionDeclarations) {
        functionDeclarations.push(...geminiTool.functionDeclarations);
      }
    }
    return { functionDeclarations };
  }
  function tBatchJobSource(client, src) {
    let sourceObj;
    if (typeof src === "string") {
      if (client.isVertexAI()) {
        if (src.startsWith("gs://")) {
          sourceObj = { format: "jsonl", gcsUri: [src] };
        } else if (src.startsWith("bq://")) {
          sourceObj = { format: "bigquery", bigqueryUri: src };
        } else {
          throw new Error(`Unsupported string source for Vertex AI: ${src}`);
        }
      } else {
        if (src.startsWith("files/")) {
          sourceObj = { fileName: src };
        } else {
          throw new Error(`Unsupported string source for Gemini API: ${src}`);
        }
      }
    } else if (Array.isArray(src)) {
      if (client.isVertexAI()) {
        throw new Error("InlinedRequest[] is not supported in Vertex AI.");
      }
      sourceObj = { inlinedRequests: src };
    } else {
      sourceObj = src;
    }
    const vertexSourcesCount = [sourceObj.gcsUri, sourceObj.bigqueryUri].filter(Boolean).length;
    const mldevSourcesCount = [
      sourceObj.inlinedRequests,
      sourceObj.fileName
    ].filter(Boolean).length;
    if (client.isVertexAI()) {
      if (mldevSourcesCount > 0 || vertexSourcesCount !== 1) {
        throw new Error("Exactly one of `gcsUri` or `bigqueryUri` must be set for Vertex AI.");
      }
    } else {
      if (vertexSourcesCount > 0 || mldevSourcesCount !== 1) {
        throw new Error("Exactly one of `inlinedRequests`, `fileName`, must be set for Gemini API.");
      }
    }
    return sourceObj;
  }
  function tBatchJobDestination(dest) {
    if (typeof dest !== "string") {
      return dest;
    }
    const destString = dest;
    if (destString.startsWith("gs://")) {
      return {
        format: "jsonl",
        gcsUri: destString
      };
    } else if (destString.startsWith("bq://")) {
      return {
        format: "bigquery",
        bigqueryUri: destString
      };
    } else {
      throw new Error(`Unsupported destination: ${destString}`);
    }
  }
  function tRecvBatchJobDestination(dest) {
    if (typeof dest !== "object" || dest === null) {
      return {};
    }
    const obj = dest;
    const inlineResponsesVal = obj["inlinedResponses"];
    if (typeof inlineResponsesVal !== "object" || inlineResponsesVal === null) {
      return dest;
    }
    const inlineResponsesObj = inlineResponsesVal;
    const responsesArray = inlineResponsesObj["inlinedResponses"];
    if (!Array.isArray(responsesArray) || responsesArray.length === 0) {
      return dest;
    }
    let hasEmbedding = false;
    for (const responseItem of responsesArray) {
      if (typeof responseItem !== "object" || responseItem === null) {
        continue;
      }
      const responseItemObj = responseItem;
      const responseVal = responseItemObj["response"];
      if (typeof responseVal !== "object" || responseVal === null) {
        continue;
      }
      const responseObj = responseVal;
      if (responseObj["embedding"] !== void 0) {
        hasEmbedding = true;
        break;
      }
    }
    if (hasEmbedding) {
      obj["inlinedEmbedContentResponses"] = obj["inlinedResponses"];
      delete obj["inlinedResponses"];
    }
    return dest;
  }
  function tBatchJobName(apiClient, name) {
    const nameString = name;
    if (!apiClient.isVertexAI()) {
      const mldevPattern = /batches\/[^/]+$/;
      if (mldevPattern.test(nameString)) {
        return nameString.split("/").pop();
      } else {
        throw new Error(`Invalid batch job name: ${nameString}.`);
      }
    }
    const vertexPattern = /^projects\/[^/]+\/locations\/[^/]+\/batchPredictionJobs\/[^/]+$/;
    if (vertexPattern.test(nameString)) {
      return nameString.split("/").pop();
    } else if (/^\d+$/.test(nameString)) {
      return nameString;
    } else {
      throw new Error(`Invalid batch job name: ${nameString}.`);
    }
  }
  function tJobState(state) {
    const stateString = state;
    if (stateString === "BATCH_STATE_UNSPECIFIED") {
      return "JOB_STATE_UNSPECIFIED";
    } else if (stateString === "BATCH_STATE_PENDING") {
      return "JOB_STATE_PENDING";
    } else if (stateString === "BATCH_STATE_RUNNING") {
      return "JOB_STATE_RUNNING";
    } else if (stateString === "BATCH_STATE_SUCCEEDED") {
      return "JOB_STATE_SUCCEEDED";
    } else if (stateString === "BATCH_STATE_FAILED") {
      return "JOB_STATE_FAILED";
    } else if (stateString === "BATCH_STATE_CANCELLED") {
      return "JOB_STATE_CANCELLED";
    } else if (stateString === "BATCH_STATE_EXPIRED") {
      return "JOB_STATE_EXPIRED";
    } else {
      return stateString;
    }
  }
  function batchJobDestinationFromMldev(fromObject) {
    const toObject = {};
    const fromFileName = getValueByPath(fromObject, ["responsesFile"]);
    if (fromFileName != null) {
      setValueByPath(toObject, ["fileName"], fromFileName);
    }
    const fromInlinedResponses = getValueByPath(fromObject, [
      "inlinedResponses",
      "inlinedResponses"
    ]);
    if (fromInlinedResponses != null) {
      let transformedList = fromInlinedResponses;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return inlinedResponseFromMldev(item);
        });
      }
      setValueByPath(toObject, ["inlinedResponses"], transformedList);
    }
    const fromInlinedEmbedContentResponses = getValueByPath(fromObject, [
      "inlinedEmbedContentResponses",
      "inlinedResponses"
    ]);
    if (fromInlinedEmbedContentResponses != null) {
      let transformedList = fromInlinedEmbedContentResponses;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return inlinedEmbedContentResponseFromMldev(item);
        });
      }
      setValueByPath(toObject, ["inlinedEmbedContentResponses"], transformedList);
    }
    return toObject;
  }
  function batchJobDestinationFromVertex(fromObject) {
    const toObject = {};
    const fromFormat = getValueByPath(fromObject, ["predictionsFormat"]);
    if (fromFormat != null) {
      setValueByPath(toObject, ["format"], fromFormat);
    }
    const fromGcsUri = getValueByPath(fromObject, [
      "gcsDestination",
      "outputUriPrefix"
    ]);
    if (fromGcsUri != null) {
      setValueByPath(toObject, ["gcsUri"], fromGcsUri);
    }
    const fromBigqueryUri = getValueByPath(fromObject, [
      "bigqueryDestination",
      "outputUri"
    ]);
    if (fromBigqueryUri != null) {
      setValueByPath(toObject, ["bigqueryUri"], fromBigqueryUri);
    }
    return toObject;
  }
  function batchJobDestinationToVertex(fromObject) {
    const toObject = {};
    const fromFormat = getValueByPath(fromObject, ["format"]);
    if (fromFormat != null) {
      setValueByPath(toObject, ["predictionsFormat"], fromFormat);
    }
    const fromGcsUri = getValueByPath(fromObject, ["gcsUri"]);
    if (fromGcsUri != null) {
      setValueByPath(toObject, ["gcsDestination", "outputUriPrefix"], fromGcsUri);
    }
    const fromBigqueryUri = getValueByPath(fromObject, ["bigqueryUri"]);
    if (fromBigqueryUri != null) {
      setValueByPath(toObject, ["bigqueryDestination", "outputUri"], fromBigqueryUri);
    }
    if (getValueByPath(fromObject, ["fileName"]) !== void 0) {
      throw new Error("fileName parameter is not supported in Vertex AI.");
    }
    if (getValueByPath(fromObject, ["inlinedResponses"]) !== void 0) {
      throw new Error("inlinedResponses parameter is not supported in Vertex AI.");
    }
    if (getValueByPath(fromObject, ["inlinedEmbedContentResponses"]) !== void 0) {
      throw new Error("inlinedEmbedContentResponses parameter is not supported in Vertex AI.");
    }
    return toObject;
  }
  function batchJobFromMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDisplayName = getValueByPath(fromObject, [
      "metadata",
      "displayName"
    ]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromState = getValueByPath(fromObject, ["metadata", "state"]);
    if (fromState != null) {
      setValueByPath(toObject, ["state"], tJobState(fromState));
    }
    const fromCreateTime = getValueByPath(fromObject, [
      "metadata",
      "createTime"
    ]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromEndTime = getValueByPath(fromObject, [
      "metadata",
      "endTime"
    ]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, [
      "metadata",
      "updateTime"
    ]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    const fromModel = getValueByPath(fromObject, ["metadata", "model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], fromModel);
    }
    const fromDest = getValueByPath(fromObject, ["metadata", "output"]);
    if (fromDest != null) {
      setValueByPath(toObject, ["dest"], batchJobDestinationFromMldev(tRecvBatchJobDestination(fromDest)));
    }
    return toObject;
  }
  function batchJobFromVertex(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromState = getValueByPath(fromObject, ["state"]);
    if (fromState != null) {
      setValueByPath(toObject, ["state"], tJobState(fromState));
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], jobErrorFromVertex(fromError));
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], fromModel);
    }
    const fromSrc = getValueByPath(fromObject, ["inputConfig"]);
    if (fromSrc != null) {
      setValueByPath(toObject, ["src"], batchJobSourceFromVertex(fromSrc));
    }
    const fromDest = getValueByPath(fromObject, ["outputConfig"]);
    if (fromDest != null) {
      setValueByPath(toObject, ["dest"], batchJobDestinationFromVertex(tRecvBatchJobDestination(fromDest)));
    }
    return toObject;
  }
  function batchJobSourceFromVertex(fromObject) {
    const toObject = {};
    const fromFormat = getValueByPath(fromObject, ["instancesFormat"]);
    if (fromFormat != null) {
      setValueByPath(toObject, ["format"], fromFormat);
    }
    const fromGcsUri = getValueByPath(fromObject, ["gcsSource", "uris"]);
    if (fromGcsUri != null) {
      setValueByPath(toObject, ["gcsUri"], fromGcsUri);
    }
    const fromBigqueryUri = getValueByPath(fromObject, [
      "bigquerySource",
      "inputUri"
    ]);
    if (fromBigqueryUri != null) {
      setValueByPath(toObject, ["bigqueryUri"], fromBigqueryUri);
    }
    return toObject;
  }
  function batchJobSourceToMldev(apiClient, fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["format"]) !== void 0) {
      throw new Error("format parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["gcsUri"]) !== void 0) {
      throw new Error("gcsUri parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["bigqueryUri"]) !== void 0) {
      throw new Error("bigqueryUri parameter is not supported in Gemini API.");
    }
    const fromFileName = getValueByPath(fromObject, ["fileName"]);
    if (fromFileName != null) {
      setValueByPath(toObject, ["fileName"], fromFileName);
    }
    const fromInlinedRequests = getValueByPath(fromObject, [
      "inlinedRequests"
    ]);
    if (fromInlinedRequests != null) {
      let transformedList = fromInlinedRequests;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return inlinedRequestToMldev(apiClient, item);
        });
      }
      setValueByPath(toObject, ["requests", "requests"], transformedList);
    }
    return toObject;
  }
  function batchJobSourceToVertex(fromObject) {
    const toObject = {};
    const fromFormat = getValueByPath(fromObject, ["format"]);
    if (fromFormat != null) {
      setValueByPath(toObject, ["instancesFormat"], fromFormat);
    }
    const fromGcsUri = getValueByPath(fromObject, ["gcsUri"]);
    if (fromGcsUri != null) {
      setValueByPath(toObject, ["gcsSource", "uris"], fromGcsUri);
    }
    const fromBigqueryUri = getValueByPath(fromObject, ["bigqueryUri"]);
    if (fromBigqueryUri != null) {
      setValueByPath(toObject, ["bigquerySource", "inputUri"], fromBigqueryUri);
    }
    if (getValueByPath(fromObject, ["fileName"]) !== void 0) {
      throw new Error("fileName parameter is not supported in Vertex AI.");
    }
    if (getValueByPath(fromObject, ["inlinedRequests"]) !== void 0) {
      throw new Error("inlinedRequests parameter is not supported in Vertex AI.");
    }
    return toObject;
  }
  function blobFromMldev$2(fromObject) {
    const toObject = {};
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function blobToMldev$4(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function cancelBatchJobParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tBatchJobName(apiClient, fromName));
    }
    return toObject;
  }
  function cancelBatchJobParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tBatchJobName(apiClient, fromName));
    }
    return toObject;
  }
  function candidateFromMldev$1(fromObject) {
    const toObject = {};
    const fromContent = getValueByPath(fromObject, ["content"]);
    if (fromContent != null) {
      setValueByPath(toObject, ["content"], contentFromMldev$2(fromContent));
    }
    const fromCitationMetadata = getValueByPath(fromObject, [
      "citationMetadata"
    ]);
    if (fromCitationMetadata != null) {
      setValueByPath(toObject, ["citationMetadata"], citationMetadataFromMldev$1(fromCitationMetadata));
    }
    const fromTokenCount = getValueByPath(fromObject, ["tokenCount"]);
    if (fromTokenCount != null) {
      setValueByPath(toObject, ["tokenCount"], fromTokenCount);
    }
    const fromFinishReason = getValueByPath(fromObject, ["finishReason"]);
    if (fromFinishReason != null) {
      setValueByPath(toObject, ["finishReason"], fromFinishReason);
    }
    const fromUrlContextMetadata = getValueByPath(fromObject, [
      "urlContextMetadata"
    ]);
    if (fromUrlContextMetadata != null) {
      setValueByPath(toObject, ["urlContextMetadata"], urlContextMetadataFromMldev$2(fromUrlContextMetadata));
    }
    const fromAvgLogprobs = getValueByPath(fromObject, ["avgLogprobs"]);
    if (fromAvgLogprobs != null) {
      setValueByPath(toObject, ["avgLogprobs"], fromAvgLogprobs);
    }
    const fromGroundingMetadata = getValueByPath(fromObject, [
      "groundingMetadata"
    ]);
    if (fromGroundingMetadata != null) {
      setValueByPath(toObject, ["groundingMetadata"], fromGroundingMetadata);
    }
    const fromIndex = getValueByPath(fromObject, ["index"]);
    if (fromIndex != null) {
      setValueByPath(toObject, ["index"], fromIndex);
    }
    const fromLogprobsResult = getValueByPath(fromObject, [
      "logprobsResult"
    ]);
    if (fromLogprobsResult != null) {
      setValueByPath(toObject, ["logprobsResult"], fromLogprobsResult);
    }
    const fromSafetyRatings = getValueByPath(fromObject, [
      "safetyRatings"
    ]);
    if (fromSafetyRatings != null) {
      setValueByPath(toObject, ["safetyRatings"], fromSafetyRatings);
    }
    return toObject;
  }
  function citationMetadataFromMldev$1(fromObject) {
    const toObject = {};
    const fromCitations = getValueByPath(fromObject, ["citationSources"]);
    if (fromCitations != null) {
      setValueByPath(toObject, ["citations"], fromCitations);
    }
    return toObject;
  }
  function contentEmbeddingFromMldev$1(fromObject) {
    const toObject = {};
    const fromValues = getValueByPath(fromObject, ["values"]);
    if (fromValues != null) {
      setValueByPath(toObject, ["values"], fromValues);
    }
    return toObject;
  }
  function contentFromMldev$2(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partFromMldev$2(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contentToMldev$4(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partToMldev$4(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function createBatchJobConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (parentObject !== void 0 && fromDisplayName != null) {
      setValueByPath(parentObject, ["batch", "displayName"], fromDisplayName);
    }
    if (getValueByPath(fromObject, ["dest"]) !== void 0) {
      throw new Error("dest parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function createBatchJobConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (parentObject !== void 0 && fromDisplayName != null) {
      setValueByPath(parentObject, ["displayName"], fromDisplayName);
    }
    const fromDest = getValueByPath(fromObject, ["dest"]);
    if (parentObject !== void 0 && fromDest != null) {
      setValueByPath(parentObject, ["outputConfig"], batchJobDestinationToVertex(tBatchJobDestination(fromDest)));
    }
    return toObject;
  }
  function createBatchJobParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromSrc = getValueByPath(fromObject, ["src"]);
    if (fromSrc != null) {
      setValueByPath(toObject, ["batch", "inputConfig"], batchJobSourceToMldev(apiClient, tBatchJobSource(apiClient, fromSrc)));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      createBatchJobConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function createBatchJobParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], tModel(apiClient, fromModel));
    }
    const fromSrc = getValueByPath(fromObject, ["src"]);
    if (fromSrc != null) {
      setValueByPath(toObject, ["inputConfig"], batchJobSourceToVertex(tBatchJobSource(apiClient, fromSrc)));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      createBatchJobConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function createEmbeddingsBatchJobConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (parentObject !== void 0 && fromDisplayName != null) {
      setValueByPath(parentObject, ["batch", "displayName"], fromDisplayName);
    }
    return toObject;
  }
  function createEmbeddingsBatchJobParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromSrc = getValueByPath(fromObject, ["src"]);
    if (fromSrc != null) {
      setValueByPath(toObject, ["batch", "inputConfig"], embeddingsBatchJobSourceToMldev(apiClient, fromSrc));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      createEmbeddingsBatchJobConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function deleteBatchJobParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tBatchJobName(apiClient, fromName));
    }
    return toObject;
  }
  function deleteBatchJobParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tBatchJobName(apiClient, fromName));
    }
    return toObject;
  }
  function deleteResourceJobFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDone = getValueByPath(fromObject, ["done"]);
    if (fromDone != null) {
      setValueByPath(toObject, ["done"], fromDone);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], jobErrorFromMldev(fromError));
    }
    return toObject;
  }
  function deleteResourceJobFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDone = getValueByPath(fromObject, ["done"]);
    if (fromDone != null) {
      setValueByPath(toObject, ["done"], fromDone);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], jobErrorFromVertex(fromError));
    }
    return toObject;
  }
  function dynamicRetrievalConfigToMldev$4(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromDynamicThreshold = getValueByPath(fromObject, [
      "dynamicThreshold"
    ]);
    if (fromDynamicThreshold != null) {
      setValueByPath(toObject, ["dynamicThreshold"], fromDynamicThreshold);
    }
    return toObject;
  }
  function embedContentBatchToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      setValueByPath(toObject, ["requests[]", "request", "content"], tContentsForEmbed(apiClient, fromContents));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      setValueByPath(toObject, ["config"], embedContentConfigToMldev$1(fromConfig, toObject));
    }
    return toObject;
  }
  function embedContentConfigToMldev$1(fromObject, parentObject) {
    const toObject = {};
    const fromTaskType = getValueByPath(fromObject, ["taskType"]);
    if (parentObject !== void 0 && fromTaskType != null) {
      setValueByPath(parentObject, ["requests[]", "taskType"], fromTaskType);
    }
    const fromTitle = getValueByPath(fromObject, ["title"]);
    if (parentObject !== void 0 && fromTitle != null) {
      setValueByPath(parentObject, ["requests[]", "title"], fromTitle);
    }
    const fromOutputDimensionality = getValueByPath(fromObject, [
      "outputDimensionality"
    ]);
    if (parentObject !== void 0 && fromOutputDimensionality != null) {
      setValueByPath(parentObject, ["requests[]", "outputDimensionality"], fromOutputDimensionality);
    }
    if (getValueByPath(fromObject, ["mimeType"]) !== void 0) {
      throw new Error("mimeType parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["autoTruncate"]) !== void 0) {
      throw new Error("autoTruncate parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function embeddingsBatchJobSourceToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromFileName = getValueByPath(fromObject, ["fileName"]);
    if (fromFileName != null) {
      setValueByPath(toObject, ["file_name"], fromFileName);
    }
    const fromInlinedRequests = getValueByPath(fromObject, [
      "inlinedRequests"
    ]);
    if (fromInlinedRequests != null) {
      setValueByPath(toObject, ["requests"], embedContentBatchToMldev(apiClient, fromInlinedRequests));
    }
    return toObject;
  }
  function fileDataFromMldev$2(fromObject) {
    const toObject = {};
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function fileDataToMldev$4(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function functionCallFromMldev$2(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallToMldev$4(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallingConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromAllowedFunctionNames = getValueByPath(fromObject, [
      "allowedFunctionNames"
    ]);
    if (fromAllowedFunctionNames != null) {
      setValueByPath(toObject, ["allowedFunctionNames"], fromAllowedFunctionNames);
    }
    return toObject;
  }
  function functionDeclarationToMldev$4(fromObject) {
    const toObject = {};
    const fromBehavior = getValueByPath(fromObject, ["behavior"]);
    if (fromBehavior != null) {
      setValueByPath(toObject, ["behavior"], fromBehavior);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromParameters = getValueByPath(fromObject, ["parameters"]);
    if (fromParameters != null) {
      setValueByPath(toObject, ["parameters"], fromParameters);
    }
    const fromParametersJsonSchema = getValueByPath(fromObject, [
      "parametersJsonSchema"
    ]);
    if (fromParametersJsonSchema != null) {
      setValueByPath(toObject, ["parametersJsonSchema"], fromParametersJsonSchema);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], fromResponse);
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    return toObject;
  }
  function generateContentConfigToMldev$1(apiClient, fromObject, parentObject) {
    const toObject = {};
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["systemInstruction"], contentToMldev$4(tContent(fromSystemInstruction)));
    }
    const fromTemperature = getValueByPath(fromObject, ["temperature"]);
    if (fromTemperature != null) {
      setValueByPath(toObject, ["temperature"], fromTemperature);
    }
    const fromTopP = getValueByPath(fromObject, ["topP"]);
    if (fromTopP != null) {
      setValueByPath(toObject, ["topP"], fromTopP);
    }
    const fromTopK = getValueByPath(fromObject, ["topK"]);
    if (fromTopK != null) {
      setValueByPath(toObject, ["topK"], fromTopK);
    }
    const fromCandidateCount = getValueByPath(fromObject, [
      "candidateCount"
    ]);
    if (fromCandidateCount != null) {
      setValueByPath(toObject, ["candidateCount"], fromCandidateCount);
    }
    const fromMaxOutputTokens = getValueByPath(fromObject, [
      "maxOutputTokens"
    ]);
    if (fromMaxOutputTokens != null) {
      setValueByPath(toObject, ["maxOutputTokens"], fromMaxOutputTokens);
    }
    const fromStopSequences = getValueByPath(fromObject, [
      "stopSequences"
    ]);
    if (fromStopSequences != null) {
      setValueByPath(toObject, ["stopSequences"], fromStopSequences);
    }
    const fromResponseLogprobs = getValueByPath(fromObject, [
      "responseLogprobs"
    ]);
    if (fromResponseLogprobs != null) {
      setValueByPath(toObject, ["responseLogprobs"], fromResponseLogprobs);
    }
    const fromLogprobs = getValueByPath(fromObject, ["logprobs"]);
    if (fromLogprobs != null) {
      setValueByPath(toObject, ["logprobs"], fromLogprobs);
    }
    const fromPresencePenalty = getValueByPath(fromObject, [
      "presencePenalty"
    ]);
    if (fromPresencePenalty != null) {
      setValueByPath(toObject, ["presencePenalty"], fromPresencePenalty);
    }
    const fromFrequencyPenalty = getValueByPath(fromObject, [
      "frequencyPenalty"
    ]);
    if (fromFrequencyPenalty != null) {
      setValueByPath(toObject, ["frequencyPenalty"], fromFrequencyPenalty);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (fromSeed != null) {
      setValueByPath(toObject, ["seed"], fromSeed);
    }
    const fromResponseMimeType = getValueByPath(fromObject, [
      "responseMimeType"
    ]);
    if (fromResponseMimeType != null) {
      setValueByPath(toObject, ["responseMimeType"], fromResponseMimeType);
    }
    const fromResponseSchema = getValueByPath(fromObject, [
      "responseSchema"
    ]);
    if (fromResponseSchema != null) {
      setValueByPath(toObject, ["responseSchema"], schemaToMldev$1(tSchema(fromResponseSchema)));
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    if (getValueByPath(fromObject, ["routingConfig"]) !== void 0) {
      throw new Error("routingConfig parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["modelSelectionConfig"]) !== void 0) {
      throw new Error("modelSelectionConfig parameter is not supported in Gemini API.");
    }
    const fromSafetySettings = getValueByPath(fromObject, [
      "safetySettings"
    ]);
    if (parentObject !== void 0 && fromSafetySettings != null) {
      let transformedList = fromSafetySettings;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return safetySettingToMldev$1(item);
        });
      }
      setValueByPath(parentObject, ["safetySettings"], transformedList);
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = tTools(fromTools);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToMldev$4(tTool(item));
        });
      }
      setValueByPath(parentObject, ["tools"], transformedList);
    }
    const fromToolConfig = getValueByPath(fromObject, ["toolConfig"]);
    if (parentObject !== void 0 && fromToolConfig != null) {
      setValueByPath(parentObject, ["toolConfig"], toolConfigToMldev$2(fromToolConfig));
    }
    if (getValueByPath(fromObject, ["labels"]) !== void 0) {
      throw new Error("labels parameter is not supported in Gemini API.");
    }
    const fromCachedContent = getValueByPath(fromObject, [
      "cachedContent"
    ]);
    if (parentObject !== void 0 && fromCachedContent != null) {
      setValueByPath(parentObject, ["cachedContent"], tCachedContentName(apiClient, fromCachedContent));
    }
    const fromResponseModalities = getValueByPath(fromObject, [
      "responseModalities"
    ]);
    if (fromResponseModalities != null) {
      setValueByPath(toObject, ["responseModalities"], fromResponseModalities);
    }
    const fromMediaResolution = getValueByPath(fromObject, [
      "mediaResolution"
    ]);
    if (fromMediaResolution != null) {
      setValueByPath(toObject, ["mediaResolution"], fromMediaResolution);
    }
    const fromSpeechConfig = getValueByPath(fromObject, ["speechConfig"]);
    if (fromSpeechConfig != null) {
      setValueByPath(toObject, ["speechConfig"], speechConfigToMldev$3(tSpeechConfig(fromSpeechConfig)));
    }
    if (getValueByPath(fromObject, ["audioTimestamp"]) !== void 0) {
      throw new Error("audioTimestamp parameter is not supported in Gemini API.");
    }
    const fromThinkingConfig = getValueByPath(fromObject, [
      "thinkingConfig"
    ]);
    if (fromThinkingConfig != null) {
      setValueByPath(toObject, ["thinkingConfig"], thinkingConfigToMldev$1(fromThinkingConfig));
    }
    return toObject;
  }
  function generateContentResponseFromMldev$1(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromCandidates = getValueByPath(fromObject, ["candidates"]);
    if (fromCandidates != null) {
      let transformedList = fromCandidates;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return candidateFromMldev$1(item);
        });
      }
      setValueByPath(toObject, ["candidates"], transformedList);
    }
    const fromModelVersion = getValueByPath(fromObject, ["modelVersion"]);
    if (fromModelVersion != null) {
      setValueByPath(toObject, ["modelVersion"], fromModelVersion);
    }
    const fromPromptFeedback = getValueByPath(fromObject, [
      "promptFeedback"
    ]);
    if (fromPromptFeedback != null) {
      setValueByPath(toObject, ["promptFeedback"], fromPromptFeedback);
    }
    const fromResponseId = getValueByPath(fromObject, ["responseId"]);
    if (fromResponseId != null) {
      setValueByPath(toObject, ["responseId"], fromResponseId);
    }
    const fromUsageMetadata = getValueByPath(fromObject, [
      "usageMetadata"
    ]);
    if (fromUsageMetadata != null) {
      setValueByPath(toObject, ["usageMetadata"], fromUsageMetadata);
    }
    return toObject;
  }
  function getBatchJobParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tBatchJobName(apiClient, fromName));
    }
    return toObject;
  }
  function getBatchJobParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tBatchJobName(apiClient, fromName));
    }
    return toObject;
  }
  function googleSearchRetrievalToMldev$4(fromObject) {
    const toObject = {};
    const fromDynamicRetrievalConfig = getValueByPath(fromObject, [
      "dynamicRetrievalConfig"
    ]);
    if (fromDynamicRetrievalConfig != null) {
      setValueByPath(toObject, ["dynamicRetrievalConfig"], dynamicRetrievalConfigToMldev$4(fromDynamicRetrievalConfig));
    }
    return toObject;
  }
  function googleSearchToMldev$4(fromObject) {
    const toObject = {};
    const fromTimeRangeFilter = getValueByPath(fromObject, [
      "timeRangeFilter"
    ]);
    if (fromTimeRangeFilter != null) {
      setValueByPath(toObject, ["timeRangeFilter"], intervalToMldev$4(fromTimeRangeFilter));
    }
    if (getValueByPath(fromObject, ["excludeDomains"]) !== void 0) {
      throw new Error("excludeDomains parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function inlinedEmbedContentResponseFromMldev(fromObject) {
    const toObject = {};
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], singleEmbedContentResponseFromMldev(fromResponse));
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], jobErrorFromMldev(fromError));
    }
    return toObject;
  }
  function inlinedRequestToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["request", "model"], tModel(apiClient, fromModel));
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      let transformedList = tContents(fromContents);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentToMldev$4(item);
        });
      }
      setValueByPath(toObject, ["request", "contents"], transformedList);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      setValueByPath(toObject, ["request", "generationConfig"], generateContentConfigToMldev$1(apiClient, fromConfig, toObject));
    }
    return toObject;
  }
  function inlinedResponseFromMldev(fromObject) {
    const toObject = {};
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], generateContentResponseFromMldev$1(fromResponse));
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], jobErrorFromMldev(fromError));
    }
    return toObject;
  }
  function intervalToMldev$4(fromObject) {
    const toObject = {};
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    return toObject;
  }
  function jobErrorFromMldev(fromObject) {
    const toObject = {};
    const fromDetails = getValueByPath(fromObject, ["details"]);
    if (fromDetails != null) {
      setValueByPath(toObject, ["details"], fromDetails);
    }
    const fromCode = getValueByPath(fromObject, ["code"]);
    if (fromCode != null) {
      setValueByPath(toObject, ["code"], fromCode);
    }
    const fromMessage = getValueByPath(fromObject, ["message"]);
    if (fromMessage != null) {
      setValueByPath(toObject, ["message"], fromMessage);
    }
    return toObject;
  }
  function jobErrorFromVertex(fromObject) {
    const toObject = {};
    const fromDetails = getValueByPath(fromObject, ["details"]);
    if (fromDetails != null) {
      setValueByPath(toObject, ["details"], fromDetails);
    }
    const fromCode = getValueByPath(fromObject, ["code"]);
    if (fromCode != null) {
      setValueByPath(toObject, ["code"], fromCode);
    }
    const fromMessage = getValueByPath(fromObject, ["message"]);
    if (fromMessage != null) {
      setValueByPath(toObject, ["message"], fromMessage);
    }
    return toObject;
  }
  function latLngToMldev$2(fromObject) {
    const toObject = {};
    const fromLatitude = getValueByPath(fromObject, ["latitude"]);
    if (fromLatitude != null) {
      setValueByPath(toObject, ["latitude"], fromLatitude);
    }
    const fromLongitude = getValueByPath(fromObject, ["longitude"]);
    if (fromLongitude != null) {
      setValueByPath(toObject, ["longitude"], fromLongitude);
    }
    return toObject;
  }
  function listBatchJobsConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    if (getValueByPath(fromObject, ["filter"]) !== void 0) {
      throw new Error("filter parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function listBatchJobsConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    const fromFilter = getValueByPath(fromObject, ["filter"]);
    if (parentObject !== void 0 && fromFilter != null) {
      setValueByPath(parentObject, ["_query", "filter"], fromFilter);
    }
    return toObject;
  }
  function listBatchJobsParametersToMldev(fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listBatchJobsConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function listBatchJobsParametersToVertex(fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listBatchJobsConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function listBatchJobsResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromBatchJobs = getValueByPath(fromObject, ["operations"]);
    if (fromBatchJobs != null) {
      let transformedList = fromBatchJobs;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return batchJobFromMldev(item);
        });
      }
      setValueByPath(toObject, ["batchJobs"], transformedList);
    }
    return toObject;
  }
  function listBatchJobsResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromBatchJobs = getValueByPath(fromObject, [
      "batchPredictionJobs"
    ]);
    if (fromBatchJobs != null) {
      let transformedList = fromBatchJobs;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return batchJobFromVertex(item);
        });
      }
      setValueByPath(toObject, ["batchJobs"], transformedList);
    }
    return toObject;
  }
  function multiSpeakerVoiceConfigToMldev$3(fromObject) {
    const toObject = {};
    const fromSpeakerVoiceConfigs = getValueByPath(fromObject, [
      "speakerVoiceConfigs"
    ]);
    if (fromSpeakerVoiceConfigs != null) {
      let transformedList = fromSpeakerVoiceConfigs;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return speakerVoiceConfigToMldev$3(item);
        });
      }
      setValueByPath(toObject, ["speakerVoiceConfigs"], transformedList);
    }
    return toObject;
  }
  function partFromMldev$2(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataFromMldev$2(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobFromMldev$2(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataFromMldev$2(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallFromMldev$2(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function partToMldev$4(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataToMldev$4(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobToMldev$4(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataToMldev$4(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallToMldev$4(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function prebuiltVoiceConfigToMldev$3(fromObject) {
    const toObject = {};
    const fromVoiceName = getValueByPath(fromObject, ["voiceName"]);
    if (fromVoiceName != null) {
      setValueByPath(toObject, ["voiceName"], fromVoiceName);
    }
    return toObject;
  }
  function retrievalConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromLatLng = getValueByPath(fromObject, ["latLng"]);
    if (fromLatLng != null) {
      setValueByPath(toObject, ["latLng"], latLngToMldev$2(fromLatLng));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function safetySettingToMldev$1(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["method"]) !== void 0) {
      throw new Error("method parameter is not supported in Gemini API.");
    }
    const fromCategory = getValueByPath(fromObject, ["category"]);
    if (fromCategory != null) {
      setValueByPath(toObject, ["category"], fromCategory);
    }
    const fromThreshold = getValueByPath(fromObject, ["threshold"]);
    if (fromThreshold != null) {
      setValueByPath(toObject, ["threshold"], fromThreshold);
    }
    return toObject;
  }
  function schemaToMldev$1(fromObject) {
    const toObject = {};
    const fromAnyOf = getValueByPath(fromObject, ["anyOf"]);
    if (fromAnyOf != null) {
      setValueByPath(toObject, ["anyOf"], fromAnyOf);
    }
    const fromDefault = getValueByPath(fromObject, ["default"]);
    if (fromDefault != null) {
      setValueByPath(toObject, ["default"], fromDefault);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromEnum = getValueByPath(fromObject, ["enum"]);
    if (fromEnum != null) {
      setValueByPath(toObject, ["enum"], fromEnum);
    }
    const fromExample = getValueByPath(fromObject, ["example"]);
    if (fromExample != null) {
      setValueByPath(toObject, ["example"], fromExample);
    }
    const fromFormat = getValueByPath(fromObject, ["format"]);
    if (fromFormat != null) {
      setValueByPath(toObject, ["format"], fromFormat);
    }
    const fromItems = getValueByPath(fromObject, ["items"]);
    if (fromItems != null) {
      setValueByPath(toObject, ["items"], fromItems);
    }
    const fromMaxItems = getValueByPath(fromObject, ["maxItems"]);
    if (fromMaxItems != null) {
      setValueByPath(toObject, ["maxItems"], fromMaxItems);
    }
    const fromMaxLength = getValueByPath(fromObject, ["maxLength"]);
    if (fromMaxLength != null) {
      setValueByPath(toObject, ["maxLength"], fromMaxLength);
    }
    const fromMaxProperties = getValueByPath(fromObject, [
      "maxProperties"
    ]);
    if (fromMaxProperties != null) {
      setValueByPath(toObject, ["maxProperties"], fromMaxProperties);
    }
    const fromMaximum = getValueByPath(fromObject, ["maximum"]);
    if (fromMaximum != null) {
      setValueByPath(toObject, ["maximum"], fromMaximum);
    }
    const fromMinItems = getValueByPath(fromObject, ["minItems"]);
    if (fromMinItems != null) {
      setValueByPath(toObject, ["minItems"], fromMinItems);
    }
    const fromMinLength = getValueByPath(fromObject, ["minLength"]);
    if (fromMinLength != null) {
      setValueByPath(toObject, ["minLength"], fromMinLength);
    }
    const fromMinProperties = getValueByPath(fromObject, [
      "minProperties"
    ]);
    if (fromMinProperties != null) {
      setValueByPath(toObject, ["minProperties"], fromMinProperties);
    }
    const fromMinimum = getValueByPath(fromObject, ["minimum"]);
    if (fromMinimum != null) {
      setValueByPath(toObject, ["minimum"], fromMinimum);
    }
    const fromNullable = getValueByPath(fromObject, ["nullable"]);
    if (fromNullable != null) {
      setValueByPath(toObject, ["nullable"], fromNullable);
    }
    const fromPattern = getValueByPath(fromObject, ["pattern"]);
    if (fromPattern != null) {
      setValueByPath(toObject, ["pattern"], fromPattern);
    }
    const fromProperties = getValueByPath(fromObject, ["properties"]);
    if (fromProperties != null) {
      setValueByPath(toObject, ["properties"], fromProperties);
    }
    const fromPropertyOrdering = getValueByPath(fromObject, [
      "propertyOrdering"
    ]);
    if (fromPropertyOrdering != null) {
      setValueByPath(toObject, ["propertyOrdering"], fromPropertyOrdering);
    }
    const fromRequired = getValueByPath(fromObject, ["required"]);
    if (fromRequired != null) {
      setValueByPath(toObject, ["required"], fromRequired);
    }
    const fromTitle = getValueByPath(fromObject, ["title"]);
    if (fromTitle != null) {
      setValueByPath(toObject, ["title"], fromTitle);
    }
    const fromType = getValueByPath(fromObject, ["type"]);
    if (fromType != null) {
      setValueByPath(toObject, ["type"], fromType);
    }
    return toObject;
  }
  function singleEmbedContentResponseFromMldev(fromObject) {
    const toObject = {};
    const fromEmbedding = getValueByPath(fromObject, ["embedding"]);
    if (fromEmbedding != null) {
      setValueByPath(toObject, ["embedding"], contentEmbeddingFromMldev$1(fromEmbedding));
    }
    const fromTokenCount = getValueByPath(fromObject, ["tokenCount"]);
    if (fromTokenCount != null) {
      setValueByPath(toObject, ["tokenCount"], fromTokenCount);
    }
    return toObject;
  }
  function speakerVoiceConfigToMldev$3(fromObject) {
    const toObject = {};
    const fromSpeaker = getValueByPath(fromObject, ["speaker"]);
    if (fromSpeaker != null) {
      setValueByPath(toObject, ["speaker"], fromSpeaker);
    }
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToMldev$3(fromVoiceConfig));
    }
    return toObject;
  }
  function speechConfigToMldev$3(fromObject) {
    const toObject = {};
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToMldev$3(fromVoiceConfig));
    }
    const fromMultiSpeakerVoiceConfig = getValueByPath(fromObject, [
      "multiSpeakerVoiceConfig"
    ]);
    if (fromMultiSpeakerVoiceConfig != null) {
      setValueByPath(toObject, ["multiSpeakerVoiceConfig"], multiSpeakerVoiceConfigToMldev$3(fromMultiSpeakerVoiceConfig));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function thinkingConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromIncludeThoughts = getValueByPath(fromObject, [
      "includeThoughts"
    ]);
    if (fromIncludeThoughts != null) {
      setValueByPath(toObject, ["includeThoughts"], fromIncludeThoughts);
    }
    const fromThinkingBudget = getValueByPath(fromObject, [
      "thinkingBudget"
    ]);
    if (fromThinkingBudget != null) {
      setValueByPath(toObject, ["thinkingBudget"], fromThinkingBudget);
    }
    return toObject;
  }
  function toolComputerUseToMldev$4(fromObject) {
    const toObject = {};
    const fromEnvironment = getValueByPath(fromObject, ["environment"]);
    if (fromEnvironment != null) {
      setValueByPath(toObject, ["environment"], fromEnvironment);
    }
    const fromExcludedPredefinedFunctions = getValueByPath(fromObject, [
      "excludedPredefinedFunctions"
    ]);
    if (fromExcludedPredefinedFunctions != null) {
      setValueByPath(toObject, ["excludedPredefinedFunctions"], fromExcludedPredefinedFunctions);
    }
    return toObject;
  }
  function toolConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromFunctionCallingConfig = getValueByPath(fromObject, [
      "functionCallingConfig"
    ]);
    if (fromFunctionCallingConfig != null) {
      setValueByPath(toObject, ["functionCallingConfig"], functionCallingConfigToMldev$2(fromFunctionCallingConfig));
    }
    const fromRetrievalConfig = getValueByPath(fromObject, [
      "retrievalConfig"
    ]);
    if (fromRetrievalConfig != null) {
      setValueByPath(toObject, ["retrievalConfig"], retrievalConfigToMldev$2(fromRetrievalConfig));
    }
    return toObject;
  }
  function toolToMldev$4(fromObject) {
    const toObject = {};
    const fromFunctionDeclarations = getValueByPath(fromObject, [
      "functionDeclarations"
    ]);
    if (fromFunctionDeclarations != null) {
      let transformedList = fromFunctionDeclarations;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionDeclarationToMldev$4(item);
        });
      }
      setValueByPath(toObject, ["functionDeclarations"], transformedList);
    }
    if (getValueByPath(fromObject, ["retrieval"]) !== void 0) {
      throw new Error("retrieval parameter is not supported in Gemini API.");
    }
    const fromGoogleSearch = getValueByPath(fromObject, ["googleSearch"]);
    if (fromGoogleSearch != null) {
      setValueByPath(toObject, ["googleSearch"], googleSearchToMldev$4(fromGoogleSearch));
    }
    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [
      "googleSearchRetrieval"
    ]);
    if (fromGoogleSearchRetrieval != null) {
      setValueByPath(toObject, ["googleSearchRetrieval"], googleSearchRetrievalToMldev$4(fromGoogleSearchRetrieval));
    }
    if (getValueByPath(fromObject, ["enterpriseWebSearch"]) !== void 0) {
      throw new Error("enterpriseWebSearch parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["googleMaps"]) !== void 0) {
      throw new Error("googleMaps parameter is not supported in Gemini API.");
    }
    const fromUrlContext = getValueByPath(fromObject, ["urlContext"]);
    if (fromUrlContext != null) {
      setValueByPath(toObject, ["urlContext"], urlContextToMldev$4());
    }
    const fromComputerUse = getValueByPath(fromObject, ["computerUse"]);
    if (fromComputerUse != null) {
      setValueByPath(toObject, ["computerUse"], toolComputerUseToMldev$4(fromComputerUse));
    }
    const fromCodeExecution = getValueByPath(fromObject, [
      "codeExecution"
    ]);
    if (fromCodeExecution != null) {
      setValueByPath(toObject, ["codeExecution"], fromCodeExecution);
    }
    return toObject;
  }
  function urlContextMetadataFromMldev$2(fromObject) {
    const toObject = {};
    const fromUrlMetadata = getValueByPath(fromObject, ["urlMetadata"]);
    if (fromUrlMetadata != null) {
      let transformedList = fromUrlMetadata;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return urlMetadataFromMldev$2(item);
        });
      }
      setValueByPath(toObject, ["urlMetadata"], transformedList);
    }
    return toObject;
  }
  function urlContextToMldev$4() {
    const toObject = {};
    return toObject;
  }
  function urlMetadataFromMldev$2(fromObject) {
    const toObject = {};
    const fromRetrievedUrl = getValueByPath(fromObject, ["retrievedUrl"]);
    if (fromRetrievedUrl != null) {
      setValueByPath(toObject, ["retrievedUrl"], fromRetrievedUrl);
    }
    const fromUrlRetrievalStatus = getValueByPath(fromObject, [
      "urlRetrievalStatus"
    ]);
    if (fromUrlRetrievalStatus != null) {
      setValueByPath(toObject, ["urlRetrievalStatus"], fromUrlRetrievalStatus);
    }
    return toObject;
  }
  function videoMetadataFromMldev$2(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoMetadataToMldev$4(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function voiceConfigToMldev$3(fromObject) {
    const toObject = {};
    const fromPrebuiltVoiceConfig = getValueByPath(fromObject, [
      "prebuiltVoiceConfig"
    ]);
    if (fromPrebuiltVoiceConfig != null) {
      setValueByPath(toObject, ["prebuiltVoiceConfig"], prebuiltVoiceConfigToMldev$3(fromPrebuiltVoiceConfig));
    }
    return toObject;
  }
  var PagedItem;
  (function(PagedItem2) {
    PagedItem2["PAGED_ITEM_BATCH_JOBS"] = "batchJobs";
    PagedItem2["PAGED_ITEM_MODELS"] = "models";
    PagedItem2["PAGED_ITEM_TUNING_JOBS"] = "tuningJobs";
    PagedItem2["PAGED_ITEM_FILES"] = "files";
    PagedItem2["PAGED_ITEM_CACHED_CONTENTS"] = "cachedContents";
  })(PagedItem || (PagedItem = {}));
  var Pager = class {
    constructor(name, request, response, params) {
      this.pageInternal = [];
      this.paramsInternal = {};
      this.requestInternal = request;
      this.init(name, response, params);
    }
    init(name, response, params) {
      var _a, _b;
      this.nameInternal = name;
      this.pageInternal = response[this.nameInternal] || [];
      this.sdkHttpResponseInternal = response === null || response === void 0 ? void 0 : response.sdkHttpResponse;
      this.idxInternal = 0;
      let requestParams = { config: {} };
      if (!params || Object.keys(params).length === 0) {
        requestParams = { config: {} };
      } else if (typeof params === "object") {
        requestParams = Object.assign({}, params);
      } else {
        requestParams = params;
      }
      if (requestParams["config"]) {
        requestParams["config"]["pageToken"] = response["nextPageToken"];
      }
      this.paramsInternal = requestParams;
      this.pageInternalSize = (_b = (_a = requestParams["config"]) === null || _a === void 0 ? void 0 : _a["pageSize"]) !== null && _b !== void 0 ? _b : this.pageInternal.length;
    }
    initNextPage(response) {
      this.init(this.nameInternal, response, this.paramsInternal);
    }
    /**
     * Returns the current page, which is a list of items.
     *
     * @remarks
     * The first page is retrieved when the pager is created. The returned list of
     * items could be a subset of the entire list.
     */
    get page() {
      return this.pageInternal;
    }
    /**
     * Returns the type of paged item (for example, ``batch_jobs``).
     */
    get name() {
      return this.nameInternal;
    }
    /**
     * Returns the length of the page fetched each time by this pager.
     *
     * @remarks
     * The number of items in the page is less than or equal to the page length.
     */
    get pageSize() {
      return this.pageInternalSize;
    }
    /**
     * Returns the headers of the API response.
     */
    get sdkHttpResponse() {
      return this.sdkHttpResponseInternal;
    }
    /**
     * Returns the parameters when making the API request for the next page.
     *
     * @remarks
     * Parameters contain a set of optional configs that can be
     * used to customize the API request. For example, the `pageToken` parameter
     * contains the token to request the next page.
     */
    get params() {
      return this.paramsInternal;
    }
    /**
     * Returns the total number of items in the current page.
     */
    get pageLength() {
      return this.pageInternal.length;
    }
    /**
     * Returns the item at the given index.
     */
    getItem(index) {
      return this.pageInternal[index];
    }
    /**
     * Returns an async iterator that support iterating through all items
     * retrieved from the API.
     *
     * @remarks
     * The iterator will automatically fetch the next page if there are more items
     * to fetch from the API.
     *
     * @example
     *
     * ```ts
     * const pager = await ai.files.list({config: {pageSize: 10}});
     * for await (const file of pager) {
     *   console.log(file.name);
     * }
     * ```
     */
    [Symbol.asyncIterator]() {
      return {
        next: async () => {
          if (this.idxInternal >= this.pageLength) {
            if (this.hasNextPage()) {
              await this.nextPage();
            } else {
              return { value: void 0, done: true };
            }
          }
          const item = this.getItem(this.idxInternal);
          this.idxInternal += 1;
          return { value: item, done: false };
        },
        return: async () => {
          return { value: void 0, done: true };
        }
      };
    }
    /**
     * Fetches the next page of items. This makes a new API request.
     *
     * @throws {Error} If there are no more pages to fetch.
     *
     * @example
     *
     * ```ts
     * const pager = await ai.files.list({config: {pageSize: 10}});
     * let page = pager.page;
     * while (true) {
     *   for (const file of page) {
     *     console.log(file.name);
     *   }
     *   if (!pager.hasNextPage()) {
     *     break;
     *   }
     *   page = await pager.nextPage();
     * }
     * ```
     */
    async nextPage() {
      if (!this.hasNextPage()) {
        throw new Error("No more pages to fetch.");
      }
      const response = await this.requestInternal(this.params);
      this.initNextPage(response);
      return this.page;
    }
    /**
     * Returns true if there are more pages to fetch from the API.
     */
    hasNextPage() {
      var _a;
      if (((_a = this.params["config"]) === null || _a === void 0 ? void 0 : _a["pageToken"]) !== void 0) {
        return true;
      }
      return false;
    }
  };
  var Batches = class extends BaseModule {
    constructor(apiClient) {
      super();
      this.apiClient = apiClient;
      this.create = async (params) => {
        var _a, _b;
        if (this.apiClient.isVertexAI()) {
          params.config = this.formatDestination(params.src, params.config);
          return this.createInternal(params);
        }
        const src = params.src;
        const is_inlined = Array.isArray(params.src) || src.inlinedRequests !== void 0;
        if (!is_inlined) {
          return this.createInternal(params);
        }
        const result = this.createInlinedGenerateContentRequest(params);
        const path = result.path;
        const requestBody = result.body;
        const queryParams = createBatchJobParametersToMldev(this.apiClient, params)["_query"] || {};
        const response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(requestBody),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = batchJobFromMldev(apiResponse);
          return resp;
        });
      };
      this.createEmbeddings = async (params) => {
        var _a, _b;
        console.warn("batches.createEmbeddings() is experimental and may change without notice.");
        if (this.apiClient.isVertexAI()) {
          throw new Error("Vertex AI does not support batches.createEmbeddings.");
        }
        const src = params.src;
        const is_inlined = src.inlinedRequests !== void 0;
        if (!is_inlined) {
          return this.createEmbeddingsInternal(params);
        }
        const result = this.createInlinedEmbedContentRequest(params);
        const path = result.path;
        const requestBody = result.body;
        const queryParams = createEmbeddingsBatchJobParametersToMldev(this.apiClient, params)["_query"] || {};
        const response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(requestBody),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = batchJobFromMldev(apiResponse);
          return resp;
        });
      };
      this.list = async (params = {}) => {
        return new Pager(PagedItem.PAGED_ITEM_BATCH_JOBS, (x) => this.listInternal(x), await this.listInternal(params), params);
      };
    }
    // Helper function to handle inlined generate content requests
    createInlinedGenerateContentRequest(params) {
      const body = createBatchJobParametersToMldev(
        this.apiClient,
        // Use instance apiClient
        params
      );
      const urlParams = body["_url"];
      const path = formatMap("{model}:batchGenerateContent", urlParams);
      const batch = body["batch"];
      const inputConfig = batch["inputConfig"];
      const requestsWrapper = inputConfig["requests"];
      const requests = requestsWrapper["requests"];
      const newRequests = [];
      for (const request of requests) {
        const requestDict = Object.assign({}, request);
        if (requestDict["systemInstruction"]) {
          const systemInstructionValue = requestDict["systemInstruction"];
          delete requestDict["systemInstruction"];
          const requestContent = requestDict["request"];
          requestContent["systemInstruction"] = systemInstructionValue;
          requestDict["request"] = requestContent;
        }
        newRequests.push(requestDict);
      }
      requestsWrapper["requests"] = newRequests;
      delete body["config"];
      delete body["_url"];
      delete body["_query"];
      return { path, body };
    }
    // Helper function to handle inlined embedding requests
    createInlinedEmbedContentRequest(params) {
      const body = createEmbeddingsBatchJobParametersToMldev(
        this.apiClient,
        // Use instance apiClient
        params
      );
      const urlParams = body["_url"];
      const path = formatMap("{model}:asyncBatchEmbedContent", urlParams);
      const batch = body["batch"];
      const inputConfig = batch["inputConfig"];
      const requestsWrapper = inputConfig["requests"];
      const requests = requestsWrapper["requests"];
      const newRequests = [];
      delete requestsWrapper["config"];
      for (const request of requests) {
        const requestDict = Object.assign({}, request);
        const innerRequest = requestDict["request"];
        for (const key in requestDict) {
          if (key !== "request") {
            innerRequest[key] = requestDict[key];
            delete requestDict[key];
          }
        }
        newRequests.push(requestDict);
      }
      requestsWrapper["requests"] = newRequests;
      delete body["config"];
      delete body["_url"];
      delete body["_query"];
      return { path, body };
    }
    // Helper function to get the first GCS URI
    getGcsUri(src) {
      if (typeof src === "string") {
        return src.startsWith("gs://") ? src : void 0;
      }
      if (!Array.isArray(src) && src.gcsUri && src.gcsUri.length > 0) {
        return src.gcsUri[0];
      }
      return void 0;
    }
    // Helper function to get the BigQuery URI
    getBigqueryUri(src) {
      if (typeof src === "string") {
        return src.startsWith("bq://") ? src : void 0;
      }
      if (!Array.isArray(src)) {
        return src.bigqueryUri;
      }
      return void 0;
    }
    // Function to format the destination configuration for Vertex AI
    formatDestination(src, config) {
      const newConfig = config ? Object.assign({}, config) : {};
      const timestampStr = Date.now().toString();
      if (!newConfig.displayName) {
        newConfig.displayName = `genaiBatchJob_${timestampStr}`;
      }
      if (newConfig.dest === void 0) {
        const gcsUri = this.getGcsUri(src);
        const bigqueryUri = this.getBigqueryUri(src);
        if (gcsUri) {
          if (gcsUri.endsWith(".jsonl")) {
            newConfig.dest = `${gcsUri.slice(0, -6)}/dest`;
          } else {
            newConfig.dest = `${gcsUri}_dest_${timestampStr}`;
          }
        } else if (bigqueryUri) {
          newConfig.dest = `${bigqueryUri}_dest_${timestampStr}`;
        } else {
          throw new Error("Unsupported source for Vertex AI: No GCS or BigQuery URI found.");
        }
      }
      return newConfig;
    }
    /**
     * Internal method to create batch job.
     *
     * @param params - The parameters for create batch job request.
     * @return The created batch job.
     *
     */
    async createInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = createBatchJobParametersToVertex(this.apiClient, params);
        path = formatMap("batchPredictionJobs", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = batchJobFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = createBatchJobParametersToMldev(this.apiClient, params);
        path = formatMap("{model}:batchGenerateContent", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = batchJobFromMldev(apiResponse);
          return resp;
        });
      }
    }
    /**
     * Internal method to create batch job.
     *
     * @param params - The parameters for create batch job request.
     * @return The created batch job.
     *
     */
    async createEmbeddingsInternal(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        throw new Error("This method is only supported by the Gemini Developer API.");
      } else {
        const body = createEmbeddingsBatchJobParametersToMldev(this.apiClient, params);
        path = formatMap("{model}:asyncBatchEmbedContent", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = batchJobFromMldev(apiResponse);
          return resp;
        });
      }
    }
    /**
     * Gets batch job configurations.
     *
     * @param params - The parameters for the get request.
     * @return The batch job.
     *
     * @example
     * ```ts
     * await ai.batches.get({name: '...'}); // The server-generated resource name.
     * ```
     */
    async get(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = getBatchJobParametersToVertex(this.apiClient, params);
        path = formatMap("batchPredictionJobs/{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = batchJobFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = getBatchJobParametersToMldev(this.apiClient, params);
        path = formatMap("batches/{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = batchJobFromMldev(apiResponse);
          return resp;
        });
      }
    }
    /**
     * Cancels a batch job.
     *
     * @param params - The parameters for the cancel request.
     * @return The empty response returned by the API.
     *
     * @example
     * ```ts
     * await ai.batches.cancel({name: '...'}); // The server-generated resource name.
     * ```
     */
    async cancel(params) {
      var _a, _b, _c, _d;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = cancelBatchJobParametersToVertex(this.apiClient, params);
        path = formatMap("batchPredictionJobs/{name}:cancel", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        await this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        });
      } else {
        const body = cancelBatchJobParametersToMldev(this.apiClient, params);
        path = formatMap("batches/{name}:cancel", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        await this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        });
      }
    }
    async listInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = listBatchJobsParametersToVertex(params);
        path = formatMap("batchPredictionJobs", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listBatchJobsResponseFromVertex(apiResponse);
          const typedResp = new ListBatchJobsResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = listBatchJobsParametersToMldev(params);
        path = formatMap("batches", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listBatchJobsResponseFromMldev(apiResponse);
          const typedResp = new ListBatchJobsResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Deletes a batch job.
     *
     * @param params - The parameters for the delete request.
     * @return The empty response returned by the API.
     *
     * @example
     * ```ts
     * await ai.batches.delete({name: '...'}); // The server-generated resource name.
     * ```
     */
    async delete(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = deleteBatchJobParametersToVertex(this.apiClient, params);
        path = formatMap("batchPredictionJobs/{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "DELETE",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = deleteResourceJobFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = deleteBatchJobParametersToMldev(this.apiClient, params);
        path = formatMap("batches/{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "DELETE",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = deleteResourceJobFromMldev(apiResponse);
          return resp;
        });
      }
    }
  };
  function apiKeyConfigToVertex$2(fromObject) {
    const toObject = {};
    const fromApiKeyString = getValueByPath(fromObject, ["apiKeyString"]);
    if (fromApiKeyString != null) {
      setValueByPath(toObject, ["apiKeyString"], fromApiKeyString);
    }
    return toObject;
  }
  function authConfigToVertex$2(fromObject) {
    const toObject = {};
    const fromApiKeyConfig = getValueByPath(fromObject, ["apiKeyConfig"]);
    if (fromApiKeyConfig != null) {
      setValueByPath(toObject, ["apiKeyConfig"], apiKeyConfigToVertex$2(fromApiKeyConfig));
    }
    const fromAuthType = getValueByPath(fromObject, ["authType"]);
    if (fromAuthType != null) {
      setValueByPath(toObject, ["authType"], fromAuthType);
    }
    const fromGoogleServiceAccountConfig = getValueByPath(fromObject, [
      "googleServiceAccountConfig"
    ]);
    if (fromGoogleServiceAccountConfig != null) {
      setValueByPath(toObject, ["googleServiceAccountConfig"], fromGoogleServiceAccountConfig);
    }
    const fromHttpBasicAuthConfig = getValueByPath(fromObject, [
      "httpBasicAuthConfig"
    ]);
    if (fromHttpBasicAuthConfig != null) {
      setValueByPath(toObject, ["httpBasicAuthConfig"], fromHttpBasicAuthConfig);
    }
    const fromOauthConfig = getValueByPath(fromObject, ["oauthConfig"]);
    if (fromOauthConfig != null) {
      setValueByPath(toObject, ["oauthConfig"], fromOauthConfig);
    }
    const fromOidcConfig = getValueByPath(fromObject, ["oidcConfig"]);
    if (fromOidcConfig != null) {
      setValueByPath(toObject, ["oidcConfig"], fromOidcConfig);
    }
    return toObject;
  }
  function blobToMldev$3(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function blobToVertex$2(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function cachedContentFromMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], fromModel);
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    const fromExpireTime = getValueByPath(fromObject, ["expireTime"]);
    if (fromExpireTime != null) {
      setValueByPath(toObject, ["expireTime"], fromExpireTime);
    }
    const fromUsageMetadata = getValueByPath(fromObject, [
      "usageMetadata"
    ]);
    if (fromUsageMetadata != null) {
      setValueByPath(toObject, ["usageMetadata"], fromUsageMetadata);
    }
    return toObject;
  }
  function cachedContentFromVertex(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], fromModel);
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    const fromExpireTime = getValueByPath(fromObject, ["expireTime"]);
    if (fromExpireTime != null) {
      setValueByPath(toObject, ["expireTime"], fromExpireTime);
    }
    const fromUsageMetadata = getValueByPath(fromObject, [
      "usageMetadata"
    ]);
    if (fromUsageMetadata != null) {
      setValueByPath(toObject, ["usageMetadata"], fromUsageMetadata);
    }
    return toObject;
  }
  function contentToMldev$3(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partToMldev$3(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contentToVertex$2(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partToVertex$2(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function createCachedContentConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromTtl = getValueByPath(fromObject, ["ttl"]);
    if (parentObject !== void 0 && fromTtl != null) {
      setValueByPath(parentObject, ["ttl"], fromTtl);
    }
    const fromExpireTime = getValueByPath(fromObject, ["expireTime"]);
    if (parentObject !== void 0 && fromExpireTime != null) {
      setValueByPath(parentObject, ["expireTime"], fromExpireTime);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (parentObject !== void 0 && fromDisplayName != null) {
      setValueByPath(parentObject, ["displayName"], fromDisplayName);
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (parentObject !== void 0 && fromContents != null) {
      let transformedList = tContents(fromContents);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentToMldev$3(item);
        });
      }
      setValueByPath(parentObject, ["contents"], transformedList);
    }
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["systemInstruction"], contentToMldev$3(tContent(fromSystemInstruction)));
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = fromTools;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToMldev$3(item);
        });
      }
      setValueByPath(parentObject, ["tools"], transformedList);
    }
    const fromToolConfig = getValueByPath(fromObject, ["toolConfig"]);
    if (parentObject !== void 0 && fromToolConfig != null) {
      setValueByPath(parentObject, ["toolConfig"], toolConfigToMldev$1(fromToolConfig));
    }
    if (getValueByPath(fromObject, ["kmsKeyName"]) !== void 0) {
      throw new Error("kmsKeyName parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function createCachedContentConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromTtl = getValueByPath(fromObject, ["ttl"]);
    if (parentObject !== void 0 && fromTtl != null) {
      setValueByPath(parentObject, ["ttl"], fromTtl);
    }
    const fromExpireTime = getValueByPath(fromObject, ["expireTime"]);
    if (parentObject !== void 0 && fromExpireTime != null) {
      setValueByPath(parentObject, ["expireTime"], fromExpireTime);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (parentObject !== void 0 && fromDisplayName != null) {
      setValueByPath(parentObject, ["displayName"], fromDisplayName);
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (parentObject !== void 0 && fromContents != null) {
      let transformedList = tContents(fromContents);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentToVertex$2(item);
        });
      }
      setValueByPath(parentObject, ["contents"], transformedList);
    }
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["systemInstruction"], contentToVertex$2(tContent(fromSystemInstruction)));
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = fromTools;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToVertex$2(item);
        });
      }
      setValueByPath(parentObject, ["tools"], transformedList);
    }
    const fromToolConfig = getValueByPath(fromObject, ["toolConfig"]);
    if (parentObject !== void 0 && fromToolConfig != null) {
      setValueByPath(parentObject, ["toolConfig"], toolConfigToVertex$1(fromToolConfig));
    }
    const fromKmsKeyName = getValueByPath(fromObject, ["kmsKeyName"]);
    if (parentObject !== void 0 && fromKmsKeyName != null) {
      setValueByPath(parentObject, ["encryption_spec", "kmsKeyName"], fromKmsKeyName);
    }
    return toObject;
  }
  function createCachedContentParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], tCachesModel(apiClient, fromModel));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      createCachedContentConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function createCachedContentParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], tCachesModel(apiClient, fromModel));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      createCachedContentConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function deleteCachedContentParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tCachedContentName(apiClient, fromName));
    }
    return toObject;
  }
  function deleteCachedContentParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tCachedContentName(apiClient, fromName));
    }
    return toObject;
  }
  function deleteCachedContentResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    return toObject;
  }
  function deleteCachedContentResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    return toObject;
  }
  function dynamicRetrievalConfigToMldev$3(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromDynamicThreshold = getValueByPath(fromObject, [
      "dynamicThreshold"
    ]);
    if (fromDynamicThreshold != null) {
      setValueByPath(toObject, ["dynamicThreshold"], fromDynamicThreshold);
    }
    return toObject;
  }
  function dynamicRetrievalConfigToVertex$2(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromDynamicThreshold = getValueByPath(fromObject, [
      "dynamicThreshold"
    ]);
    if (fromDynamicThreshold != null) {
      setValueByPath(toObject, ["dynamicThreshold"], fromDynamicThreshold);
    }
    return toObject;
  }
  function enterpriseWebSearchToVertex$2(fromObject) {
    const toObject = {};
    const fromExcludeDomains = getValueByPath(fromObject, [
      "excludeDomains"
    ]);
    if (fromExcludeDomains != null) {
      setValueByPath(toObject, ["excludeDomains"], fromExcludeDomains);
    }
    return toObject;
  }
  function fileDataToMldev$3(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function fileDataToVertex$2(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function functionCallToMldev$3(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallToVertex$2(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallingConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromAllowedFunctionNames = getValueByPath(fromObject, [
      "allowedFunctionNames"
    ]);
    if (fromAllowedFunctionNames != null) {
      setValueByPath(toObject, ["allowedFunctionNames"], fromAllowedFunctionNames);
    }
    return toObject;
  }
  function functionCallingConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromAllowedFunctionNames = getValueByPath(fromObject, [
      "allowedFunctionNames"
    ]);
    if (fromAllowedFunctionNames != null) {
      setValueByPath(toObject, ["allowedFunctionNames"], fromAllowedFunctionNames);
    }
    return toObject;
  }
  function functionDeclarationToMldev$3(fromObject) {
    const toObject = {};
    const fromBehavior = getValueByPath(fromObject, ["behavior"]);
    if (fromBehavior != null) {
      setValueByPath(toObject, ["behavior"], fromBehavior);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromParameters = getValueByPath(fromObject, ["parameters"]);
    if (fromParameters != null) {
      setValueByPath(toObject, ["parameters"], fromParameters);
    }
    const fromParametersJsonSchema = getValueByPath(fromObject, [
      "parametersJsonSchema"
    ]);
    if (fromParametersJsonSchema != null) {
      setValueByPath(toObject, ["parametersJsonSchema"], fromParametersJsonSchema);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], fromResponse);
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    return toObject;
  }
  function functionDeclarationToVertex$2(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["behavior"]) !== void 0) {
      throw new Error("behavior parameter is not supported in Vertex AI.");
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromParameters = getValueByPath(fromObject, ["parameters"]);
    if (fromParameters != null) {
      setValueByPath(toObject, ["parameters"], fromParameters);
    }
    const fromParametersJsonSchema = getValueByPath(fromObject, [
      "parametersJsonSchema"
    ]);
    if (fromParametersJsonSchema != null) {
      setValueByPath(toObject, ["parametersJsonSchema"], fromParametersJsonSchema);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], fromResponse);
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    return toObject;
  }
  function getCachedContentParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tCachedContentName(apiClient, fromName));
    }
    return toObject;
  }
  function getCachedContentParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tCachedContentName(apiClient, fromName));
    }
    return toObject;
  }
  function googleMapsToVertex$2(fromObject) {
    const toObject = {};
    const fromAuthConfig = getValueByPath(fromObject, ["authConfig"]);
    if (fromAuthConfig != null) {
      setValueByPath(toObject, ["authConfig"], authConfigToVertex$2(fromAuthConfig));
    }
    return toObject;
  }
  function googleSearchRetrievalToMldev$3(fromObject) {
    const toObject = {};
    const fromDynamicRetrievalConfig = getValueByPath(fromObject, [
      "dynamicRetrievalConfig"
    ]);
    if (fromDynamicRetrievalConfig != null) {
      setValueByPath(toObject, ["dynamicRetrievalConfig"], dynamicRetrievalConfigToMldev$3(fromDynamicRetrievalConfig));
    }
    return toObject;
  }
  function googleSearchRetrievalToVertex$2(fromObject) {
    const toObject = {};
    const fromDynamicRetrievalConfig = getValueByPath(fromObject, [
      "dynamicRetrievalConfig"
    ]);
    if (fromDynamicRetrievalConfig != null) {
      setValueByPath(toObject, ["dynamicRetrievalConfig"], dynamicRetrievalConfigToVertex$2(fromDynamicRetrievalConfig));
    }
    return toObject;
  }
  function googleSearchToMldev$3(fromObject) {
    const toObject = {};
    const fromTimeRangeFilter = getValueByPath(fromObject, [
      "timeRangeFilter"
    ]);
    if (fromTimeRangeFilter != null) {
      setValueByPath(toObject, ["timeRangeFilter"], intervalToMldev$3(fromTimeRangeFilter));
    }
    if (getValueByPath(fromObject, ["excludeDomains"]) !== void 0) {
      throw new Error("excludeDomains parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function googleSearchToVertex$2(fromObject) {
    const toObject = {};
    const fromTimeRangeFilter = getValueByPath(fromObject, [
      "timeRangeFilter"
    ]);
    if (fromTimeRangeFilter != null) {
      setValueByPath(toObject, ["timeRangeFilter"], intervalToVertex$2(fromTimeRangeFilter));
    }
    const fromExcludeDomains = getValueByPath(fromObject, [
      "excludeDomains"
    ]);
    if (fromExcludeDomains != null) {
      setValueByPath(toObject, ["excludeDomains"], fromExcludeDomains);
    }
    return toObject;
  }
  function intervalToMldev$3(fromObject) {
    const toObject = {};
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    return toObject;
  }
  function intervalToVertex$2(fromObject) {
    const toObject = {};
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    return toObject;
  }
  function latLngToMldev$1(fromObject) {
    const toObject = {};
    const fromLatitude = getValueByPath(fromObject, ["latitude"]);
    if (fromLatitude != null) {
      setValueByPath(toObject, ["latitude"], fromLatitude);
    }
    const fromLongitude = getValueByPath(fromObject, ["longitude"]);
    if (fromLongitude != null) {
      setValueByPath(toObject, ["longitude"], fromLongitude);
    }
    return toObject;
  }
  function latLngToVertex$1(fromObject) {
    const toObject = {};
    const fromLatitude = getValueByPath(fromObject, ["latitude"]);
    if (fromLatitude != null) {
      setValueByPath(toObject, ["latitude"], fromLatitude);
    }
    const fromLongitude = getValueByPath(fromObject, ["longitude"]);
    if (fromLongitude != null) {
      setValueByPath(toObject, ["longitude"], fromLongitude);
    }
    return toObject;
  }
  function listCachedContentsConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    return toObject;
  }
  function listCachedContentsConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    return toObject;
  }
  function listCachedContentsParametersToMldev(fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listCachedContentsConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function listCachedContentsParametersToVertex(fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listCachedContentsConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function listCachedContentsResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromCachedContents = getValueByPath(fromObject, [
      "cachedContents"
    ]);
    if (fromCachedContents != null) {
      let transformedList = fromCachedContents;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return cachedContentFromMldev(item);
        });
      }
      setValueByPath(toObject, ["cachedContents"], transformedList);
    }
    return toObject;
  }
  function listCachedContentsResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromCachedContents = getValueByPath(fromObject, [
      "cachedContents"
    ]);
    if (fromCachedContents != null) {
      let transformedList = fromCachedContents;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return cachedContentFromVertex(item);
        });
      }
      setValueByPath(toObject, ["cachedContents"], transformedList);
    }
    return toObject;
  }
  function partToMldev$3(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataToMldev$3(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobToMldev$3(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataToMldev$3(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallToMldev$3(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function partToVertex$2(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataToVertex$2(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobToVertex$2(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataToVertex$2(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallToVertex$2(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function retrievalConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromLatLng = getValueByPath(fromObject, ["latLng"]);
    if (fromLatLng != null) {
      setValueByPath(toObject, ["latLng"], latLngToMldev$1(fromLatLng));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function retrievalConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromLatLng = getValueByPath(fromObject, ["latLng"]);
    if (fromLatLng != null) {
      setValueByPath(toObject, ["latLng"], latLngToVertex$1(fromLatLng));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function toolComputerUseToMldev$3(fromObject) {
    const toObject = {};
    const fromEnvironment = getValueByPath(fromObject, ["environment"]);
    if (fromEnvironment != null) {
      setValueByPath(toObject, ["environment"], fromEnvironment);
    }
    const fromExcludedPredefinedFunctions = getValueByPath(fromObject, [
      "excludedPredefinedFunctions"
    ]);
    if (fromExcludedPredefinedFunctions != null) {
      setValueByPath(toObject, ["excludedPredefinedFunctions"], fromExcludedPredefinedFunctions);
    }
    return toObject;
  }
  function toolComputerUseToVertex$2(fromObject) {
    const toObject = {};
    const fromEnvironment = getValueByPath(fromObject, ["environment"]);
    if (fromEnvironment != null) {
      setValueByPath(toObject, ["environment"], fromEnvironment);
    }
    const fromExcludedPredefinedFunctions = getValueByPath(fromObject, [
      "excludedPredefinedFunctions"
    ]);
    if (fromExcludedPredefinedFunctions != null) {
      setValueByPath(toObject, ["excludedPredefinedFunctions"], fromExcludedPredefinedFunctions);
    }
    return toObject;
  }
  function toolConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromFunctionCallingConfig = getValueByPath(fromObject, [
      "functionCallingConfig"
    ]);
    if (fromFunctionCallingConfig != null) {
      setValueByPath(toObject, ["functionCallingConfig"], functionCallingConfigToMldev$1(fromFunctionCallingConfig));
    }
    const fromRetrievalConfig = getValueByPath(fromObject, [
      "retrievalConfig"
    ]);
    if (fromRetrievalConfig != null) {
      setValueByPath(toObject, ["retrievalConfig"], retrievalConfigToMldev$1(fromRetrievalConfig));
    }
    return toObject;
  }
  function toolConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromFunctionCallingConfig = getValueByPath(fromObject, [
      "functionCallingConfig"
    ]);
    if (fromFunctionCallingConfig != null) {
      setValueByPath(toObject, ["functionCallingConfig"], functionCallingConfigToVertex$1(fromFunctionCallingConfig));
    }
    const fromRetrievalConfig = getValueByPath(fromObject, [
      "retrievalConfig"
    ]);
    if (fromRetrievalConfig != null) {
      setValueByPath(toObject, ["retrievalConfig"], retrievalConfigToVertex$1(fromRetrievalConfig));
    }
    return toObject;
  }
  function toolToMldev$3(fromObject) {
    const toObject = {};
    const fromFunctionDeclarations = getValueByPath(fromObject, [
      "functionDeclarations"
    ]);
    if (fromFunctionDeclarations != null) {
      let transformedList = fromFunctionDeclarations;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionDeclarationToMldev$3(item);
        });
      }
      setValueByPath(toObject, ["functionDeclarations"], transformedList);
    }
    if (getValueByPath(fromObject, ["retrieval"]) !== void 0) {
      throw new Error("retrieval parameter is not supported in Gemini API.");
    }
    const fromGoogleSearch = getValueByPath(fromObject, ["googleSearch"]);
    if (fromGoogleSearch != null) {
      setValueByPath(toObject, ["googleSearch"], googleSearchToMldev$3(fromGoogleSearch));
    }
    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [
      "googleSearchRetrieval"
    ]);
    if (fromGoogleSearchRetrieval != null) {
      setValueByPath(toObject, ["googleSearchRetrieval"], googleSearchRetrievalToMldev$3(fromGoogleSearchRetrieval));
    }
    if (getValueByPath(fromObject, ["enterpriseWebSearch"]) !== void 0) {
      throw new Error("enterpriseWebSearch parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["googleMaps"]) !== void 0) {
      throw new Error("googleMaps parameter is not supported in Gemini API.");
    }
    const fromUrlContext = getValueByPath(fromObject, ["urlContext"]);
    if (fromUrlContext != null) {
      setValueByPath(toObject, ["urlContext"], urlContextToMldev$3());
    }
    const fromComputerUse = getValueByPath(fromObject, ["computerUse"]);
    if (fromComputerUse != null) {
      setValueByPath(toObject, ["computerUse"], toolComputerUseToMldev$3(fromComputerUse));
    }
    const fromCodeExecution = getValueByPath(fromObject, [
      "codeExecution"
    ]);
    if (fromCodeExecution != null) {
      setValueByPath(toObject, ["codeExecution"], fromCodeExecution);
    }
    return toObject;
  }
  function toolToVertex$2(fromObject) {
    const toObject = {};
    const fromFunctionDeclarations = getValueByPath(fromObject, [
      "functionDeclarations"
    ]);
    if (fromFunctionDeclarations != null) {
      let transformedList = fromFunctionDeclarations;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionDeclarationToVertex$2(item);
        });
      }
      setValueByPath(toObject, ["functionDeclarations"], transformedList);
    }
    const fromRetrieval = getValueByPath(fromObject, ["retrieval"]);
    if (fromRetrieval != null) {
      setValueByPath(toObject, ["retrieval"], fromRetrieval);
    }
    const fromGoogleSearch = getValueByPath(fromObject, ["googleSearch"]);
    if (fromGoogleSearch != null) {
      setValueByPath(toObject, ["googleSearch"], googleSearchToVertex$2(fromGoogleSearch));
    }
    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [
      "googleSearchRetrieval"
    ]);
    if (fromGoogleSearchRetrieval != null) {
      setValueByPath(toObject, ["googleSearchRetrieval"], googleSearchRetrievalToVertex$2(fromGoogleSearchRetrieval));
    }
    const fromEnterpriseWebSearch = getValueByPath(fromObject, [
      "enterpriseWebSearch"
    ]);
    if (fromEnterpriseWebSearch != null) {
      setValueByPath(toObject, ["enterpriseWebSearch"], enterpriseWebSearchToVertex$2(fromEnterpriseWebSearch));
    }
    const fromGoogleMaps = getValueByPath(fromObject, ["googleMaps"]);
    if (fromGoogleMaps != null) {
      setValueByPath(toObject, ["googleMaps"], googleMapsToVertex$2(fromGoogleMaps));
    }
    const fromUrlContext = getValueByPath(fromObject, ["urlContext"]);
    if (fromUrlContext != null) {
      setValueByPath(toObject, ["urlContext"], urlContextToVertex$2());
    }
    const fromComputerUse = getValueByPath(fromObject, ["computerUse"]);
    if (fromComputerUse != null) {
      setValueByPath(toObject, ["computerUse"], toolComputerUseToVertex$2(fromComputerUse));
    }
    const fromCodeExecution = getValueByPath(fromObject, [
      "codeExecution"
    ]);
    if (fromCodeExecution != null) {
      setValueByPath(toObject, ["codeExecution"], fromCodeExecution);
    }
    return toObject;
  }
  function updateCachedContentConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromTtl = getValueByPath(fromObject, ["ttl"]);
    if (parentObject !== void 0 && fromTtl != null) {
      setValueByPath(parentObject, ["ttl"], fromTtl);
    }
    const fromExpireTime = getValueByPath(fromObject, ["expireTime"]);
    if (parentObject !== void 0 && fromExpireTime != null) {
      setValueByPath(parentObject, ["expireTime"], fromExpireTime);
    }
    return toObject;
  }
  function updateCachedContentConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromTtl = getValueByPath(fromObject, ["ttl"]);
    if (parentObject !== void 0 && fromTtl != null) {
      setValueByPath(parentObject, ["ttl"], fromTtl);
    }
    const fromExpireTime = getValueByPath(fromObject, ["expireTime"]);
    if (parentObject !== void 0 && fromExpireTime != null) {
      setValueByPath(parentObject, ["expireTime"], fromExpireTime);
    }
    return toObject;
  }
  function updateCachedContentParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tCachedContentName(apiClient, fromName));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      updateCachedContentConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function updateCachedContentParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tCachedContentName(apiClient, fromName));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      updateCachedContentConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function urlContextToMldev$3() {
    const toObject = {};
    return toObject;
  }
  function urlContextToVertex$2() {
    const toObject = {};
    return toObject;
  }
  function videoMetadataToMldev$3(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoMetadataToVertex$2(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  var Caches = class extends BaseModule {
    constructor(apiClient) {
      super();
      this.apiClient = apiClient;
      this.list = async (params = {}) => {
        return new Pager(PagedItem.PAGED_ITEM_CACHED_CONTENTS, (x) => this.listInternal(x), await this.listInternal(params), params);
      };
    }
    /**
     * Creates a cached contents resource.
     *
     * @remarks
     * Context caching is only supported for specific models. See [Gemini
     * Developer API reference](https://ai.google.dev/gemini-api/docs/caching?lang=node/context-cac)
     * and [Vertex AI reference](https://cloud.google.com/vertex-ai/generative-ai/docs/context-cache/context-cache-overview#supported_models)
     * for more information.
     *
     * @param params - The parameters for the create request.
     * @return The created cached content.
     *
     * @example
     * ```ts
     * const contents = ...; // Initialize the content to cache.
     * const response = await ai.caches.create({
     *   model: 'gemini-2.0-flash-001',
     *   config: {
     *    'contents': contents,
     *    'displayName': 'test cache',
     *    'systemInstruction': 'What is the sum of the two pdfs?',
     *    'ttl': '86400s',
     *  }
     * });
     * ```
     */
    async create(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = createCachedContentParametersToVertex(this.apiClient, params);
        path = formatMap("cachedContents", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = cachedContentFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = createCachedContentParametersToMldev(this.apiClient, params);
        path = formatMap("cachedContents", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = cachedContentFromMldev(apiResponse);
          return resp;
        });
      }
    }
    /**
     * Gets cached content configurations.
     *
     * @param params - The parameters for the get request.
     * @return The cached content.
     *
     * @example
     * ```ts
     * await ai.caches.get({name: '...'}); // The server-generated resource name.
     * ```
     */
    async get(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = getCachedContentParametersToVertex(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = cachedContentFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = getCachedContentParametersToMldev(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = cachedContentFromMldev(apiResponse);
          return resp;
        });
      }
    }
    /**
     * Deletes cached content.
     *
     * @param params - The parameters for the delete request.
     * @return The empty response returned by the API.
     *
     * @example
     * ```ts
     * await ai.caches.delete({name: '...'}); // The server-generated resource name.
     * ```
     */
    async delete(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = deleteCachedContentParametersToVertex(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "DELETE",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = deleteCachedContentResponseFromVertex(apiResponse);
          const typedResp = new DeleteCachedContentResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = deleteCachedContentParametersToMldev(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "DELETE",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = deleteCachedContentResponseFromMldev(apiResponse);
          const typedResp = new DeleteCachedContentResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Updates cached content configurations.
     *
     * @param params - The parameters for the update request.
     * @return The updated cached content.
     *
     * @example
     * ```ts
     * const response = await ai.caches.update({
     *   name: '...',  // The server-generated resource name.
     *   config: {'ttl': '7600s'}
     * });
     * ```
     */
    async update(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = updateCachedContentParametersToVertex(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "PATCH",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = cachedContentFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = updateCachedContentParametersToMldev(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "PATCH",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = cachedContentFromMldev(apiResponse);
          return resp;
        });
      }
    }
    async listInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = listCachedContentsParametersToVertex(params);
        path = formatMap("cachedContents", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listCachedContentsResponseFromVertex(apiResponse);
          const typedResp = new ListCachedContentsResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = listCachedContentsParametersToMldev(params);
        path = formatMap("cachedContents", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listCachedContentsResponseFromMldev(apiResponse);
          const typedResp = new ListCachedContentsResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
  };
  function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function() {
        if (o && i >= o.length) o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  }
  function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
      return this;
    }, i;
    function awaitReturn(f) {
      return function(v) {
        return Promise.resolve(v).then(f, reject);
      };
    }
    function verb(n, f) {
      if (g[n]) {
        i[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
        if (f) i[n] = f(i[n]);
      }
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
  }
  function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && function(v) {
        return new Promise(function(resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function(v2) {
        resolve({ value: v2, done: d });
      }, reject);
    }
  }
  function isValidResponse(response) {
    var _a;
    if (response.candidates == void 0 || response.candidates.length === 0) {
      return false;
    }
    const content = (_a = response.candidates[0]) === null || _a === void 0 ? void 0 : _a.content;
    if (content === void 0) {
      return false;
    }
    return isValidContent(content);
  }
  function isValidContent(content) {
    if (content.parts === void 0 || content.parts.length === 0) {
      return false;
    }
    for (const part of content.parts) {
      if (part === void 0 || Object.keys(part).length === 0) {
        return false;
      }
    }
    return true;
  }
  function validateHistory(history) {
    if (history.length === 0) {
      return;
    }
    for (const content of history) {
      if (content.role !== "user" && content.role !== "model") {
        throw new Error(`Role must be user or model, but got ${content.role}.`);
      }
    }
  }
  function extractCuratedHistory(comprehensiveHistory) {
    if (comprehensiveHistory === void 0 || comprehensiveHistory.length === 0) {
      return [];
    }
    const curatedHistory = [];
    const length = comprehensiveHistory.length;
    let i = 0;
    while (i < length) {
      if (comprehensiveHistory[i].role === "user") {
        curatedHistory.push(comprehensiveHistory[i]);
        i++;
      } else {
        const modelOutput = [];
        let isValid = true;
        while (i < length && comprehensiveHistory[i].role === "model") {
          modelOutput.push(comprehensiveHistory[i]);
          if (isValid && !isValidContent(comprehensiveHistory[i])) {
            isValid = false;
          }
          i++;
        }
        if (isValid) {
          curatedHistory.push(...modelOutput);
        } else {
          curatedHistory.pop();
        }
      }
    }
    return curatedHistory;
  }
  var Chats = class {
    constructor(modelsModule, apiClient) {
      this.modelsModule = modelsModule;
      this.apiClient = apiClient;
    }
    /**
     * Creates a new chat session.
     *
     * @remarks
     * The config in the params will be used for all requests within the chat
     * session unless overridden by a per-request `config` in
     * @see {@link types.SendMessageParameters#config}.
     *
     * @param params - Parameters for creating a chat session.
     * @returns A new chat session.
     *
     * @example
     * ```ts
     * const chat = ai.chats.create({
     *   model: 'gemini-2.0-flash'
     *   config: {
     *     temperature: 0.5,
     *     maxOutputTokens: 1024,
     *   }
     * });
     * ```
     */
    create(params) {
      return new Chat(
        this.apiClient,
        this.modelsModule,
        params.model,
        params.config,
        // Deep copy the history to avoid mutating the history outside of the
        // chat session.
        structuredClone(params.history)
      );
    }
  };
  var Chat = class {
    constructor(apiClient, modelsModule, model, config = {}, history = []) {
      this.apiClient = apiClient;
      this.modelsModule = modelsModule;
      this.model = model;
      this.config = config;
      this.history = history;
      this.sendPromise = Promise.resolve();
      validateHistory(history);
    }
    /**
     * Sends a message to the model and returns the response.
     *
     * @remarks
     * This method will wait for the previous message to be processed before
     * sending the next message.
     *
     * @see {@link Chat#sendMessageStream} for streaming method.
     * @param params - parameters for sending messages within a chat session.
     * @returns The model's response.
     *
     * @example
     * ```ts
     * const chat = ai.chats.create({model: 'gemini-2.0-flash'});
     * const response = await chat.sendMessage({
     *   message: 'Why is the sky blue?'
     * });
     * console.log(response.text);
     * ```
     */
    async sendMessage(params) {
      var _a;
      await this.sendPromise;
      const inputContent = tContent(params.message);
      const responsePromise = this.modelsModule.generateContent({
        model: this.model,
        contents: this.getHistory(true).concat(inputContent),
        config: (_a = params.config) !== null && _a !== void 0 ? _a : this.config
      });
      this.sendPromise = (async () => {
        var _a2, _b, _c;
        const response = await responsePromise;
        const outputContent = (_b = (_a2 = response.candidates) === null || _a2 === void 0 ? void 0 : _a2[0]) === null || _b === void 0 ? void 0 : _b.content;
        const fullAutomaticFunctionCallingHistory = response.automaticFunctionCallingHistory;
        const index = this.getHistory(true).length;
        let automaticFunctionCallingHistory = [];
        if (fullAutomaticFunctionCallingHistory != null) {
          automaticFunctionCallingHistory = (_c = fullAutomaticFunctionCallingHistory.slice(index)) !== null && _c !== void 0 ? _c : [];
        }
        const modelOutput = outputContent ? [outputContent] : [];
        this.recordHistory(inputContent, modelOutput, automaticFunctionCallingHistory);
        return;
      })();
      await this.sendPromise.catch(() => {
        this.sendPromise = Promise.resolve();
      });
      return responsePromise;
    }
    /**
     * Sends a message to the model and returns the response in chunks.
     *
     * @remarks
     * This method will wait for the previous message to be processed before
     * sending the next message.
     *
     * @see {@link Chat#sendMessage} for non-streaming method.
     * @param params - parameters for sending the message.
     * @return The model's response.
     *
     * @example
     * ```ts
     * const chat = ai.chats.create({model: 'gemini-2.0-flash'});
     * const response = await chat.sendMessageStream({
     *   message: 'Why is the sky blue?'
     * });
     * for await (const chunk of response) {
     *   console.log(chunk.text);
     * }
     * ```
     */
    async sendMessageStream(params) {
      var _a;
      await this.sendPromise;
      const inputContent = tContent(params.message);
      const streamResponse = this.modelsModule.generateContentStream({
        model: this.model,
        contents: this.getHistory(true).concat(inputContent),
        config: (_a = params.config) !== null && _a !== void 0 ? _a : this.config
      });
      this.sendPromise = streamResponse.then(() => void 0).catch(() => void 0);
      const response = await streamResponse;
      const result = this.processStreamResponse(response, inputContent);
      return result;
    }
    /**
     * Returns the chat history.
     *
     * @remarks
     * The history is a list of contents alternating between user and model.
     *
     * There are two types of history:
     * - The `curated history` contains only the valid turns between user and
     * model, which will be included in the subsequent requests sent to the model.
     * - The `comprehensive history` contains all turns, including invalid or
     *   empty model outputs, providing a complete record of the history.
     *
     * The history is updated after receiving the response from the model,
     * for streaming response, it means receiving the last chunk of the response.
     *
     * The `comprehensive history` is returned by default. To get the `curated
     * history`, set the `curated` parameter to `true`.
     *
     * @param curated - whether to return the curated history or the comprehensive
     *     history.
     * @return History contents alternating between user and model for the entire
     *     chat session.
     */
    getHistory(curated = false) {
      const history = curated ? extractCuratedHistory(this.history) : this.history;
      return structuredClone(history);
    }
    processStreamResponse(streamResponse, inputContent) {
      var _a, _b;
      return __asyncGenerator(this, arguments, function* processStreamResponse_1() {
        var _c, e_1, _d, _e;
        const outputContent = [];
        try {
          for (var _f = true, streamResponse_1 = __asyncValues(streamResponse), streamResponse_1_1; streamResponse_1_1 = yield __await(streamResponse_1.next()), _c = streamResponse_1_1.done, !_c; _f = true) {
            _e = streamResponse_1_1.value;
            _f = false;
            const chunk = _e;
            if (isValidResponse(chunk)) {
              const content = (_b = (_a = chunk.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content;
              if (content !== void 0) {
                outputContent.push(content);
              }
            }
            yield yield __await(chunk);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (!_f && !_c && (_d = streamResponse_1.return)) yield __await(_d.call(streamResponse_1));
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        this.recordHistory(inputContent, outputContent);
      });
    }
    recordHistory(userInput, modelOutput, automaticFunctionCallingHistory) {
      let outputContents = [];
      if (modelOutput.length > 0 && modelOutput.every((content) => content.role !== void 0)) {
        outputContents = modelOutput;
      } else {
        outputContents.push({
          role: "model",
          parts: []
        });
      }
      if (automaticFunctionCallingHistory && automaticFunctionCallingHistory.length > 0) {
        this.history.push(...extractCuratedHistory(automaticFunctionCallingHistory));
      } else {
        this.history.push(userInput);
      }
      this.history.push(...outputContents);
    }
  };
  var ApiError = class _ApiError extends Error {
    constructor(options) {
      super(options.message);
      this.name = "ApiError";
      this.status = options.status;
      Object.setPrototypeOf(this, _ApiError.prototype);
    }
  };
  function createFileParametersToMldev(fromObject) {
    const toObject = {};
    const fromFile = getValueByPath(fromObject, ["file"]);
    if (fromFile != null) {
      setValueByPath(toObject, ["file"], fileToMldev(fromFile));
    }
    return toObject;
  }
  function createFileResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    return toObject;
  }
  function deleteFileParametersToMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "file"], tFileName(fromName));
    }
    return toObject;
  }
  function deleteFileResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    return toObject;
  }
  function fileFromMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    const fromSizeBytes = getValueByPath(fromObject, ["sizeBytes"]);
    if (fromSizeBytes != null) {
      setValueByPath(toObject, ["sizeBytes"], fromSizeBytes);
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromExpirationTime = getValueByPath(fromObject, [
      "expirationTime"
    ]);
    if (fromExpirationTime != null) {
      setValueByPath(toObject, ["expirationTime"], fromExpirationTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    const fromSha256Hash = getValueByPath(fromObject, ["sha256Hash"]);
    if (fromSha256Hash != null) {
      setValueByPath(toObject, ["sha256Hash"], fromSha256Hash);
    }
    const fromUri = getValueByPath(fromObject, ["uri"]);
    if (fromUri != null) {
      setValueByPath(toObject, ["uri"], fromUri);
    }
    const fromDownloadUri = getValueByPath(fromObject, ["downloadUri"]);
    if (fromDownloadUri != null) {
      setValueByPath(toObject, ["downloadUri"], fromDownloadUri);
    }
    const fromState = getValueByPath(fromObject, ["state"]);
    if (fromState != null) {
      setValueByPath(toObject, ["state"], fromState);
    }
    const fromSource = getValueByPath(fromObject, ["source"]);
    if (fromSource != null) {
      setValueByPath(toObject, ["source"], fromSource);
    }
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], fromVideoMetadata);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], fileStatusFromMldev(fromError));
    }
    return toObject;
  }
  function fileStatusFromMldev(fromObject) {
    const toObject = {};
    const fromDetails = getValueByPath(fromObject, ["details"]);
    if (fromDetails != null) {
      setValueByPath(toObject, ["details"], fromDetails);
    }
    const fromMessage = getValueByPath(fromObject, ["message"]);
    if (fromMessage != null) {
      setValueByPath(toObject, ["message"], fromMessage);
    }
    const fromCode = getValueByPath(fromObject, ["code"]);
    if (fromCode != null) {
      setValueByPath(toObject, ["code"], fromCode);
    }
    return toObject;
  }
  function fileStatusToMldev(fromObject) {
    const toObject = {};
    const fromDetails = getValueByPath(fromObject, ["details"]);
    if (fromDetails != null) {
      setValueByPath(toObject, ["details"], fromDetails);
    }
    const fromMessage = getValueByPath(fromObject, ["message"]);
    if (fromMessage != null) {
      setValueByPath(toObject, ["message"], fromMessage);
    }
    const fromCode = getValueByPath(fromObject, ["code"]);
    if (fromCode != null) {
      setValueByPath(toObject, ["code"], fromCode);
    }
    return toObject;
  }
  function fileToMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    const fromSizeBytes = getValueByPath(fromObject, ["sizeBytes"]);
    if (fromSizeBytes != null) {
      setValueByPath(toObject, ["sizeBytes"], fromSizeBytes);
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromExpirationTime = getValueByPath(fromObject, [
      "expirationTime"
    ]);
    if (fromExpirationTime != null) {
      setValueByPath(toObject, ["expirationTime"], fromExpirationTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    const fromSha256Hash = getValueByPath(fromObject, ["sha256Hash"]);
    if (fromSha256Hash != null) {
      setValueByPath(toObject, ["sha256Hash"], fromSha256Hash);
    }
    const fromUri = getValueByPath(fromObject, ["uri"]);
    if (fromUri != null) {
      setValueByPath(toObject, ["uri"], fromUri);
    }
    const fromDownloadUri = getValueByPath(fromObject, ["downloadUri"]);
    if (fromDownloadUri != null) {
      setValueByPath(toObject, ["downloadUri"], fromDownloadUri);
    }
    const fromState = getValueByPath(fromObject, ["state"]);
    if (fromState != null) {
      setValueByPath(toObject, ["state"], fromState);
    }
    const fromSource = getValueByPath(fromObject, ["source"]);
    if (fromSource != null) {
      setValueByPath(toObject, ["source"], fromSource);
    }
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], fromVideoMetadata);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], fileStatusToMldev(fromError));
    }
    return toObject;
  }
  function getFileParametersToMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "file"], tFileName(fromName));
    }
    return toObject;
  }
  function listFilesConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    return toObject;
  }
  function listFilesParametersToMldev(fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listFilesConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function listFilesResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromFiles = getValueByPath(fromObject, ["files"]);
    if (fromFiles != null) {
      let transformedList = fromFiles;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return fileFromMldev(item);
        });
      }
      setValueByPath(toObject, ["files"], transformedList);
    }
    return toObject;
  }
  var Files = class extends BaseModule {
    constructor(apiClient) {
      super();
      this.apiClient = apiClient;
      this.list = async (params = {}) => {
        return new Pager(PagedItem.PAGED_ITEM_FILES, (x) => this.listInternal(x), await this.listInternal(params), params);
      };
    }
    /**
     * Uploads a file asynchronously to the Gemini API.
     * This method is not available in Vertex AI.
     * Supported upload sources:
     * - Node.js: File path (string) or Blob object.
     * - Browser: Blob object (e.g., File).
     *
     * @remarks
     * The `mimeType` can be specified in the `config` parameter. If omitted:
     *  - For file path (string) inputs, the `mimeType` will be inferred from the
     *     file extension.
     *  - For Blob object inputs, the `mimeType` will be set to the Blob's `type`
     *     property.
     * Somex eamples for file extension to mimeType mapping:
     * .txt -> text/plain
     * .json -> application/json
     * .jpg  -> image/jpeg
     * .png -> image/png
     * .mp3 -> audio/mpeg
     * .mp4 -> video/mp4
     *
     * This section can contain multiple paragraphs and code examples.
     *
     * @param params - Optional parameters specified in the
     *        `types.UploadFileParameters` interface.
     *         @see {@link types.UploadFileParameters#config} for the optional
     *         config in the parameters.
     * @return A promise that resolves to a `types.File` object.
     * @throws An error if called on a Vertex AI client.
     * @throws An error if the `mimeType` is not provided and can not be inferred,
     * the `mimeType` can be provided in the `params.config` parameter.
     * @throws An error occurs if a suitable upload location cannot be established.
     *
     * @example
     * The following code uploads a file to Gemini API.
     *
     * ```ts
     * const file = await ai.files.upload({file: 'file.txt', config: {
     *   mimeType: 'text/plain',
     * }});
     * console.log(file.name);
     * ```
     */
    async upload(params) {
      if (this.apiClient.isVertexAI()) {
        throw new Error("Vertex AI does not support uploading files. You can share files through a GCS bucket.");
      }
      return this.apiClient.uploadFile(params.file, params.config).then((response) => {
        const file = fileFromMldev(response);
        return file;
      });
    }
    /**
     * Downloads a remotely stored file asynchronously to a location specified in
     * the `params` object. This method only works on Node environment, to
     * download files in the browser, use a browser compliant method like an <a>
     * tag.
     *
     * @param params - The parameters for the download request.
     *
     * @example
     * The following code downloads an example file named "files/mehozpxf877d" as
     * "file.txt".
     *
     * ```ts
     * await ai.files.download({file: file.name, downloadPath: 'file.txt'});
     * ```
     */
    async download(params) {
      await this.apiClient.downloadFile(params);
    }
    async listInternal(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        throw new Error("This method is only supported by the Gemini Developer API.");
      } else {
        const body = listFilesParametersToMldev(params);
        path = formatMap("files", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listFilesResponseFromMldev(apiResponse);
          const typedResp = new ListFilesResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    async createInternal(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        throw new Error("This method is only supported by the Gemini Developer API.");
      } else {
        const body = createFileParametersToMldev(params);
        path = formatMap("upload/v1beta/files", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = createFileResponseFromMldev(apiResponse);
          const typedResp = new CreateFileResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Retrieves the file information from the service.
     *
     * @param params - The parameters for the get request
     * @return The Promise that resolves to the types.File object requested.
     *
     * @example
     * ```ts
     * const config: GetFileParameters = {
     *   name: fileName,
     * };
     * file = await ai.files.get(config);
     * console.log(file.name);
     * ```
     */
    async get(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        throw new Error("This method is only supported by the Gemini Developer API.");
      } else {
        const body = getFileParametersToMldev(params);
        path = formatMap("files/{file}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = fileFromMldev(apiResponse);
          return resp;
        });
      }
    }
    /**
     * Deletes a remotely stored file.
     *
     * @param params - The parameters for the delete request.
     * @return The DeleteFileResponse, the response for the delete method.
     *
     * @example
     * The following code deletes an example file named "files/mehozpxf877d".
     *
     * ```ts
     * await ai.files.delete({name: file.name});
     * ```
     */
    async delete(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        throw new Error("This method is only supported by the Gemini Developer API.");
      } else {
        const body = deleteFileParametersToMldev(params);
        path = formatMap("files/{file}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "DELETE",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = deleteFileResponseFromMldev(apiResponse);
          const typedResp = new DeleteFileResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
  };
  function activityEndToMldev() {
    const toObject = {};
    return toObject;
  }
  function activityEndToVertex() {
    const toObject = {};
    return toObject;
  }
  function activityStartToMldev() {
    const toObject = {};
    return toObject;
  }
  function activityStartToVertex() {
    const toObject = {};
    return toObject;
  }
  function apiKeyConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromApiKeyString = getValueByPath(fromObject, ["apiKeyString"]);
    if (fromApiKeyString != null) {
      setValueByPath(toObject, ["apiKeyString"], fromApiKeyString);
    }
    return toObject;
  }
  function audioChunkFromMldev(fromObject) {
    const toObject = {};
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    const fromSourceMetadata = getValueByPath(fromObject, [
      "sourceMetadata"
    ]);
    if (fromSourceMetadata != null) {
      setValueByPath(toObject, ["sourceMetadata"], liveMusicSourceMetadataFromMldev(fromSourceMetadata));
    }
    return toObject;
  }
  function audioTranscriptionConfigToMldev$1() {
    const toObject = {};
    return toObject;
  }
  function audioTranscriptionConfigToVertex() {
    const toObject = {};
    return toObject;
  }
  function authConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromApiKeyConfig = getValueByPath(fromObject, ["apiKeyConfig"]);
    if (fromApiKeyConfig != null) {
      setValueByPath(toObject, ["apiKeyConfig"], apiKeyConfigToVertex$1(fromApiKeyConfig));
    }
    const fromAuthType = getValueByPath(fromObject, ["authType"]);
    if (fromAuthType != null) {
      setValueByPath(toObject, ["authType"], fromAuthType);
    }
    const fromGoogleServiceAccountConfig = getValueByPath(fromObject, [
      "googleServiceAccountConfig"
    ]);
    if (fromGoogleServiceAccountConfig != null) {
      setValueByPath(toObject, ["googleServiceAccountConfig"], fromGoogleServiceAccountConfig);
    }
    const fromHttpBasicAuthConfig = getValueByPath(fromObject, [
      "httpBasicAuthConfig"
    ]);
    if (fromHttpBasicAuthConfig != null) {
      setValueByPath(toObject, ["httpBasicAuthConfig"], fromHttpBasicAuthConfig);
    }
    const fromOauthConfig = getValueByPath(fromObject, ["oauthConfig"]);
    if (fromOauthConfig != null) {
      setValueByPath(toObject, ["oauthConfig"], fromOauthConfig);
    }
    const fromOidcConfig = getValueByPath(fromObject, ["oidcConfig"]);
    if (fromOidcConfig != null) {
      setValueByPath(toObject, ["oidcConfig"], fromOidcConfig);
    }
    return toObject;
  }
  function automaticActivityDetectionToMldev$1(fromObject) {
    const toObject = {};
    const fromDisabled = getValueByPath(fromObject, ["disabled"]);
    if (fromDisabled != null) {
      setValueByPath(toObject, ["disabled"], fromDisabled);
    }
    const fromStartOfSpeechSensitivity = getValueByPath(fromObject, [
      "startOfSpeechSensitivity"
    ]);
    if (fromStartOfSpeechSensitivity != null) {
      setValueByPath(toObject, ["startOfSpeechSensitivity"], fromStartOfSpeechSensitivity);
    }
    const fromEndOfSpeechSensitivity = getValueByPath(fromObject, [
      "endOfSpeechSensitivity"
    ]);
    if (fromEndOfSpeechSensitivity != null) {
      setValueByPath(toObject, ["endOfSpeechSensitivity"], fromEndOfSpeechSensitivity);
    }
    const fromPrefixPaddingMs = getValueByPath(fromObject, [
      "prefixPaddingMs"
    ]);
    if (fromPrefixPaddingMs != null) {
      setValueByPath(toObject, ["prefixPaddingMs"], fromPrefixPaddingMs);
    }
    const fromSilenceDurationMs = getValueByPath(fromObject, [
      "silenceDurationMs"
    ]);
    if (fromSilenceDurationMs != null) {
      setValueByPath(toObject, ["silenceDurationMs"], fromSilenceDurationMs);
    }
    return toObject;
  }
  function automaticActivityDetectionToVertex(fromObject) {
    const toObject = {};
    const fromDisabled = getValueByPath(fromObject, ["disabled"]);
    if (fromDisabled != null) {
      setValueByPath(toObject, ["disabled"], fromDisabled);
    }
    const fromStartOfSpeechSensitivity = getValueByPath(fromObject, [
      "startOfSpeechSensitivity"
    ]);
    if (fromStartOfSpeechSensitivity != null) {
      setValueByPath(toObject, ["startOfSpeechSensitivity"], fromStartOfSpeechSensitivity);
    }
    const fromEndOfSpeechSensitivity = getValueByPath(fromObject, [
      "endOfSpeechSensitivity"
    ]);
    if (fromEndOfSpeechSensitivity != null) {
      setValueByPath(toObject, ["endOfSpeechSensitivity"], fromEndOfSpeechSensitivity);
    }
    const fromPrefixPaddingMs = getValueByPath(fromObject, [
      "prefixPaddingMs"
    ]);
    if (fromPrefixPaddingMs != null) {
      setValueByPath(toObject, ["prefixPaddingMs"], fromPrefixPaddingMs);
    }
    const fromSilenceDurationMs = getValueByPath(fromObject, [
      "silenceDurationMs"
    ]);
    if (fromSilenceDurationMs != null) {
      setValueByPath(toObject, ["silenceDurationMs"], fromSilenceDurationMs);
    }
    return toObject;
  }
  function blobFromMldev$1(fromObject) {
    const toObject = {};
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function blobFromVertex$1(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function blobToMldev$2(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function blobToVertex$1(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function contentFromMldev$1(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partFromMldev$1(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contentFromVertex$1(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partFromVertex$1(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contentToMldev$2(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partToMldev$2(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contentToVertex$1(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partToVertex$1(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contextWindowCompressionConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromTriggerTokens = getValueByPath(fromObject, [
      "triggerTokens"
    ]);
    if (fromTriggerTokens != null) {
      setValueByPath(toObject, ["triggerTokens"], fromTriggerTokens);
    }
    const fromSlidingWindow = getValueByPath(fromObject, [
      "slidingWindow"
    ]);
    if (fromSlidingWindow != null) {
      setValueByPath(toObject, ["slidingWindow"], slidingWindowToMldev$1(fromSlidingWindow));
    }
    return toObject;
  }
  function contextWindowCompressionConfigToVertex(fromObject) {
    const toObject = {};
    const fromTriggerTokens = getValueByPath(fromObject, [
      "triggerTokens"
    ]);
    if (fromTriggerTokens != null) {
      setValueByPath(toObject, ["triggerTokens"], fromTriggerTokens);
    }
    const fromSlidingWindow = getValueByPath(fromObject, [
      "slidingWindow"
    ]);
    if (fromSlidingWindow != null) {
      setValueByPath(toObject, ["slidingWindow"], slidingWindowToVertex(fromSlidingWindow));
    }
    return toObject;
  }
  function dynamicRetrievalConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromDynamicThreshold = getValueByPath(fromObject, [
      "dynamicThreshold"
    ]);
    if (fromDynamicThreshold != null) {
      setValueByPath(toObject, ["dynamicThreshold"], fromDynamicThreshold);
    }
    return toObject;
  }
  function dynamicRetrievalConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromDynamicThreshold = getValueByPath(fromObject, [
      "dynamicThreshold"
    ]);
    if (fromDynamicThreshold != null) {
      setValueByPath(toObject, ["dynamicThreshold"], fromDynamicThreshold);
    }
    return toObject;
  }
  function enterpriseWebSearchToVertex$1(fromObject) {
    const toObject = {};
    const fromExcludeDomains = getValueByPath(fromObject, [
      "excludeDomains"
    ]);
    if (fromExcludeDomains != null) {
      setValueByPath(toObject, ["excludeDomains"], fromExcludeDomains);
    }
    return toObject;
  }
  function fileDataFromMldev$1(fromObject) {
    const toObject = {};
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function fileDataFromVertex$1(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function fileDataToMldev$2(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function fileDataToVertex$1(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function functionCallFromMldev$1(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallFromVertex$1(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallToMldev$2(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallToVertex$1(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionDeclarationToMldev$2(fromObject) {
    const toObject = {};
    const fromBehavior = getValueByPath(fromObject, ["behavior"]);
    if (fromBehavior != null) {
      setValueByPath(toObject, ["behavior"], fromBehavior);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromParameters = getValueByPath(fromObject, ["parameters"]);
    if (fromParameters != null) {
      setValueByPath(toObject, ["parameters"], fromParameters);
    }
    const fromParametersJsonSchema = getValueByPath(fromObject, [
      "parametersJsonSchema"
    ]);
    if (fromParametersJsonSchema != null) {
      setValueByPath(toObject, ["parametersJsonSchema"], fromParametersJsonSchema);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], fromResponse);
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    return toObject;
  }
  function functionDeclarationToVertex$1(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["behavior"]) !== void 0) {
      throw new Error("behavior parameter is not supported in Vertex AI.");
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromParameters = getValueByPath(fromObject, ["parameters"]);
    if (fromParameters != null) {
      setValueByPath(toObject, ["parameters"], fromParameters);
    }
    const fromParametersJsonSchema = getValueByPath(fromObject, [
      "parametersJsonSchema"
    ]);
    if (fromParametersJsonSchema != null) {
      setValueByPath(toObject, ["parametersJsonSchema"], fromParametersJsonSchema);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], fromResponse);
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    return toObject;
  }
  function googleMapsToVertex$1(fromObject) {
    const toObject = {};
    const fromAuthConfig = getValueByPath(fromObject, ["authConfig"]);
    if (fromAuthConfig != null) {
      setValueByPath(toObject, ["authConfig"], authConfigToVertex$1(fromAuthConfig));
    }
    return toObject;
  }
  function googleSearchRetrievalToMldev$2(fromObject) {
    const toObject = {};
    const fromDynamicRetrievalConfig = getValueByPath(fromObject, [
      "dynamicRetrievalConfig"
    ]);
    if (fromDynamicRetrievalConfig != null) {
      setValueByPath(toObject, ["dynamicRetrievalConfig"], dynamicRetrievalConfigToMldev$2(fromDynamicRetrievalConfig));
    }
    return toObject;
  }
  function googleSearchRetrievalToVertex$1(fromObject) {
    const toObject = {};
    const fromDynamicRetrievalConfig = getValueByPath(fromObject, [
      "dynamicRetrievalConfig"
    ]);
    if (fromDynamicRetrievalConfig != null) {
      setValueByPath(toObject, ["dynamicRetrievalConfig"], dynamicRetrievalConfigToVertex$1(fromDynamicRetrievalConfig));
    }
    return toObject;
  }
  function googleSearchToMldev$2(fromObject) {
    const toObject = {};
    const fromTimeRangeFilter = getValueByPath(fromObject, [
      "timeRangeFilter"
    ]);
    if (fromTimeRangeFilter != null) {
      setValueByPath(toObject, ["timeRangeFilter"], intervalToMldev$2(fromTimeRangeFilter));
    }
    if (getValueByPath(fromObject, ["excludeDomains"]) !== void 0) {
      throw new Error("excludeDomains parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function googleSearchToVertex$1(fromObject) {
    const toObject = {};
    const fromTimeRangeFilter = getValueByPath(fromObject, [
      "timeRangeFilter"
    ]);
    if (fromTimeRangeFilter != null) {
      setValueByPath(toObject, ["timeRangeFilter"], intervalToVertex$1(fromTimeRangeFilter));
    }
    const fromExcludeDomains = getValueByPath(fromObject, [
      "excludeDomains"
    ]);
    if (fromExcludeDomains != null) {
      setValueByPath(toObject, ["excludeDomains"], fromExcludeDomains);
    }
    return toObject;
  }
  function intervalToMldev$2(fromObject) {
    const toObject = {};
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    return toObject;
  }
  function intervalToVertex$1(fromObject) {
    const toObject = {};
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    return toObject;
  }
  function liveConnectConfigToMldev$1(fromObject, parentObject) {
    const toObject = {};
    const fromGenerationConfig = getValueByPath(fromObject, [
      "generationConfig"
    ]);
    if (parentObject !== void 0 && fromGenerationConfig != null) {
      setValueByPath(parentObject, ["setup", "generationConfig"], fromGenerationConfig);
    }
    const fromResponseModalities = getValueByPath(fromObject, [
      "responseModalities"
    ]);
    if (parentObject !== void 0 && fromResponseModalities != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "responseModalities"], fromResponseModalities);
    }
    const fromTemperature = getValueByPath(fromObject, ["temperature"]);
    if (parentObject !== void 0 && fromTemperature != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "temperature"], fromTemperature);
    }
    const fromTopP = getValueByPath(fromObject, ["topP"]);
    if (parentObject !== void 0 && fromTopP != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "topP"], fromTopP);
    }
    const fromTopK = getValueByPath(fromObject, ["topK"]);
    if (parentObject !== void 0 && fromTopK != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "topK"], fromTopK);
    }
    const fromMaxOutputTokens = getValueByPath(fromObject, [
      "maxOutputTokens"
    ]);
    if (parentObject !== void 0 && fromMaxOutputTokens != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "maxOutputTokens"], fromMaxOutputTokens);
    }
    const fromMediaResolution = getValueByPath(fromObject, [
      "mediaResolution"
    ]);
    if (parentObject !== void 0 && fromMediaResolution != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "mediaResolution"], fromMediaResolution);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (parentObject !== void 0 && fromSeed != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "seed"], fromSeed);
    }
    const fromSpeechConfig = getValueByPath(fromObject, ["speechConfig"]);
    if (parentObject !== void 0 && fromSpeechConfig != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "speechConfig"], speechConfigToMldev$2(tLiveSpeechConfig(fromSpeechConfig)));
    }
    const fromEnableAffectiveDialog = getValueByPath(fromObject, [
      "enableAffectiveDialog"
    ]);
    if (parentObject !== void 0 && fromEnableAffectiveDialog != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "enableAffectiveDialog"], fromEnableAffectiveDialog);
    }
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["setup", "systemInstruction"], contentToMldev$2(tContent(fromSystemInstruction)));
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = tTools(fromTools);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToMldev$2(tTool(item));
        });
      }
      setValueByPath(parentObject, ["setup", "tools"], transformedList);
    }
    const fromSessionResumption = getValueByPath(fromObject, [
      "sessionResumption"
    ]);
    if (parentObject !== void 0 && fromSessionResumption != null) {
      setValueByPath(parentObject, ["setup", "sessionResumption"], sessionResumptionConfigToMldev$1(fromSessionResumption));
    }
    const fromInputAudioTranscription = getValueByPath(fromObject, [
      "inputAudioTranscription"
    ]);
    if (parentObject !== void 0 && fromInputAudioTranscription != null) {
      setValueByPath(parentObject, ["setup", "inputAudioTranscription"], audioTranscriptionConfigToMldev$1());
    }
    const fromOutputAudioTranscription = getValueByPath(fromObject, [
      "outputAudioTranscription"
    ]);
    if (parentObject !== void 0 && fromOutputAudioTranscription != null) {
      setValueByPath(parentObject, ["setup", "outputAudioTranscription"], audioTranscriptionConfigToMldev$1());
    }
    const fromRealtimeInputConfig = getValueByPath(fromObject, [
      "realtimeInputConfig"
    ]);
    if (parentObject !== void 0 && fromRealtimeInputConfig != null) {
      setValueByPath(parentObject, ["setup", "realtimeInputConfig"], realtimeInputConfigToMldev$1(fromRealtimeInputConfig));
    }
    const fromContextWindowCompression = getValueByPath(fromObject, [
      "contextWindowCompression"
    ]);
    if (parentObject !== void 0 && fromContextWindowCompression != null) {
      setValueByPath(parentObject, ["setup", "contextWindowCompression"], contextWindowCompressionConfigToMldev$1(fromContextWindowCompression));
    }
    const fromProactivity = getValueByPath(fromObject, ["proactivity"]);
    if (parentObject !== void 0 && fromProactivity != null) {
      setValueByPath(parentObject, ["setup", "proactivity"], proactivityConfigToMldev$1(fromProactivity));
    }
    return toObject;
  }
  function liveConnectConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromGenerationConfig = getValueByPath(fromObject, [
      "generationConfig"
    ]);
    if (parentObject !== void 0 && fromGenerationConfig != null) {
      setValueByPath(parentObject, ["setup", "generationConfig"], fromGenerationConfig);
    }
    const fromResponseModalities = getValueByPath(fromObject, [
      "responseModalities"
    ]);
    if (parentObject !== void 0 && fromResponseModalities != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "responseModalities"], fromResponseModalities);
    }
    const fromTemperature = getValueByPath(fromObject, ["temperature"]);
    if (parentObject !== void 0 && fromTemperature != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "temperature"], fromTemperature);
    }
    const fromTopP = getValueByPath(fromObject, ["topP"]);
    if (parentObject !== void 0 && fromTopP != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "topP"], fromTopP);
    }
    const fromTopK = getValueByPath(fromObject, ["topK"]);
    if (parentObject !== void 0 && fromTopK != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "topK"], fromTopK);
    }
    const fromMaxOutputTokens = getValueByPath(fromObject, [
      "maxOutputTokens"
    ]);
    if (parentObject !== void 0 && fromMaxOutputTokens != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "maxOutputTokens"], fromMaxOutputTokens);
    }
    const fromMediaResolution = getValueByPath(fromObject, [
      "mediaResolution"
    ]);
    if (parentObject !== void 0 && fromMediaResolution != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "mediaResolution"], fromMediaResolution);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (parentObject !== void 0 && fromSeed != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "seed"], fromSeed);
    }
    const fromSpeechConfig = getValueByPath(fromObject, ["speechConfig"]);
    if (parentObject !== void 0 && fromSpeechConfig != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "speechConfig"], speechConfigToVertex$1(tLiveSpeechConfig(fromSpeechConfig)));
    }
    const fromEnableAffectiveDialog = getValueByPath(fromObject, [
      "enableAffectiveDialog"
    ]);
    if (parentObject !== void 0 && fromEnableAffectiveDialog != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "enableAffectiveDialog"], fromEnableAffectiveDialog);
    }
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["setup", "systemInstruction"], contentToVertex$1(tContent(fromSystemInstruction)));
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = tTools(fromTools);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToVertex$1(tTool(item));
        });
      }
      setValueByPath(parentObject, ["setup", "tools"], transformedList);
    }
    const fromSessionResumption = getValueByPath(fromObject, [
      "sessionResumption"
    ]);
    if (parentObject !== void 0 && fromSessionResumption != null) {
      setValueByPath(parentObject, ["setup", "sessionResumption"], sessionResumptionConfigToVertex(fromSessionResumption));
    }
    const fromInputAudioTranscription = getValueByPath(fromObject, [
      "inputAudioTranscription"
    ]);
    if (parentObject !== void 0 && fromInputAudioTranscription != null) {
      setValueByPath(parentObject, ["setup", "inputAudioTranscription"], audioTranscriptionConfigToVertex());
    }
    const fromOutputAudioTranscription = getValueByPath(fromObject, [
      "outputAudioTranscription"
    ]);
    if (parentObject !== void 0 && fromOutputAudioTranscription != null) {
      setValueByPath(parentObject, ["setup", "outputAudioTranscription"], audioTranscriptionConfigToVertex());
    }
    const fromRealtimeInputConfig = getValueByPath(fromObject, [
      "realtimeInputConfig"
    ]);
    if (parentObject !== void 0 && fromRealtimeInputConfig != null) {
      setValueByPath(parentObject, ["setup", "realtimeInputConfig"], realtimeInputConfigToVertex(fromRealtimeInputConfig));
    }
    const fromContextWindowCompression = getValueByPath(fromObject, [
      "contextWindowCompression"
    ]);
    if (parentObject !== void 0 && fromContextWindowCompression != null) {
      setValueByPath(parentObject, ["setup", "contextWindowCompression"], contextWindowCompressionConfigToVertex(fromContextWindowCompression));
    }
    const fromProactivity = getValueByPath(fromObject, ["proactivity"]);
    if (parentObject !== void 0 && fromProactivity != null) {
      setValueByPath(parentObject, ["setup", "proactivity"], proactivityConfigToVertex(fromProactivity));
    }
    return toObject;
  }
  function liveConnectParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["setup", "model"], tModel(apiClient, fromModel));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      setValueByPath(toObject, ["config"], liveConnectConfigToMldev$1(fromConfig, toObject));
    }
    return toObject;
  }
  function liveConnectParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["setup", "model"], tModel(apiClient, fromModel));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      setValueByPath(toObject, ["config"], liveConnectConfigToVertex(fromConfig, toObject));
    }
    return toObject;
  }
  function liveMusicClientContentFromMldev(fromObject) {
    const toObject = {};
    const fromWeightedPrompts = getValueByPath(fromObject, [
      "weightedPrompts"
    ]);
    if (fromWeightedPrompts != null) {
      let transformedList = fromWeightedPrompts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return weightedPromptFromMldev(item);
        });
      }
      setValueByPath(toObject, ["weightedPrompts"], transformedList);
    }
    return toObject;
  }
  function liveMusicClientContentToMldev(fromObject) {
    const toObject = {};
    const fromWeightedPrompts = getValueByPath(fromObject, [
      "weightedPrompts"
    ]);
    if (fromWeightedPrompts != null) {
      let transformedList = fromWeightedPrompts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return weightedPromptToMldev(item);
        });
      }
      setValueByPath(toObject, ["weightedPrompts"], transformedList);
    }
    return toObject;
  }
  function liveMusicClientMessageToMldev(fromObject) {
    const toObject = {};
    const fromSetup = getValueByPath(fromObject, ["setup"]);
    if (fromSetup != null) {
      setValueByPath(toObject, ["setup"], liveMusicClientSetupToMldev(fromSetup));
    }
    const fromClientContent = getValueByPath(fromObject, [
      "clientContent"
    ]);
    if (fromClientContent != null) {
      setValueByPath(toObject, ["clientContent"], liveMusicClientContentToMldev(fromClientContent));
    }
    const fromMusicGenerationConfig = getValueByPath(fromObject, [
      "musicGenerationConfig"
    ]);
    if (fromMusicGenerationConfig != null) {
      setValueByPath(toObject, ["musicGenerationConfig"], liveMusicGenerationConfigToMldev(fromMusicGenerationConfig));
    }
    const fromPlaybackControl = getValueByPath(fromObject, [
      "playbackControl"
    ]);
    if (fromPlaybackControl != null) {
      setValueByPath(toObject, ["playbackControl"], fromPlaybackControl);
    }
    return toObject;
  }
  function liveMusicClientSetupToMldev(fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], fromModel);
    }
    return toObject;
  }
  function liveMusicFilteredPromptFromMldev(fromObject) {
    const toObject = {};
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    const fromFilteredReason = getValueByPath(fromObject, [
      "filteredReason"
    ]);
    if (fromFilteredReason != null) {
      setValueByPath(toObject, ["filteredReason"], fromFilteredReason);
    }
    return toObject;
  }
  function liveMusicGenerationConfigFromMldev(fromObject) {
    const toObject = {};
    const fromTemperature = getValueByPath(fromObject, ["temperature"]);
    if (fromTemperature != null) {
      setValueByPath(toObject, ["temperature"], fromTemperature);
    }
    const fromTopK = getValueByPath(fromObject, ["topK"]);
    if (fromTopK != null) {
      setValueByPath(toObject, ["topK"], fromTopK);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (fromSeed != null) {
      setValueByPath(toObject, ["seed"], fromSeed);
    }
    const fromGuidance = getValueByPath(fromObject, ["guidance"]);
    if (fromGuidance != null) {
      setValueByPath(toObject, ["guidance"], fromGuidance);
    }
    const fromBpm = getValueByPath(fromObject, ["bpm"]);
    if (fromBpm != null) {
      setValueByPath(toObject, ["bpm"], fromBpm);
    }
    const fromDensity = getValueByPath(fromObject, ["density"]);
    if (fromDensity != null) {
      setValueByPath(toObject, ["density"], fromDensity);
    }
    const fromBrightness = getValueByPath(fromObject, ["brightness"]);
    if (fromBrightness != null) {
      setValueByPath(toObject, ["brightness"], fromBrightness);
    }
    const fromScale = getValueByPath(fromObject, ["scale"]);
    if (fromScale != null) {
      setValueByPath(toObject, ["scale"], fromScale);
    }
    const fromMuteBass = getValueByPath(fromObject, ["muteBass"]);
    if (fromMuteBass != null) {
      setValueByPath(toObject, ["muteBass"], fromMuteBass);
    }
    const fromMuteDrums = getValueByPath(fromObject, ["muteDrums"]);
    if (fromMuteDrums != null) {
      setValueByPath(toObject, ["muteDrums"], fromMuteDrums);
    }
    const fromOnlyBassAndDrums = getValueByPath(fromObject, [
      "onlyBassAndDrums"
    ]);
    if (fromOnlyBassAndDrums != null) {
      setValueByPath(toObject, ["onlyBassAndDrums"], fromOnlyBassAndDrums);
    }
    const fromMusicGenerationMode = getValueByPath(fromObject, [
      "musicGenerationMode"
    ]);
    if (fromMusicGenerationMode != null) {
      setValueByPath(toObject, ["musicGenerationMode"], fromMusicGenerationMode);
    }
    return toObject;
  }
  function liveMusicGenerationConfigToMldev(fromObject) {
    const toObject = {};
    const fromTemperature = getValueByPath(fromObject, ["temperature"]);
    if (fromTemperature != null) {
      setValueByPath(toObject, ["temperature"], fromTemperature);
    }
    const fromTopK = getValueByPath(fromObject, ["topK"]);
    if (fromTopK != null) {
      setValueByPath(toObject, ["topK"], fromTopK);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (fromSeed != null) {
      setValueByPath(toObject, ["seed"], fromSeed);
    }
    const fromGuidance = getValueByPath(fromObject, ["guidance"]);
    if (fromGuidance != null) {
      setValueByPath(toObject, ["guidance"], fromGuidance);
    }
    const fromBpm = getValueByPath(fromObject, ["bpm"]);
    if (fromBpm != null) {
      setValueByPath(toObject, ["bpm"], fromBpm);
    }
    const fromDensity = getValueByPath(fromObject, ["density"]);
    if (fromDensity != null) {
      setValueByPath(toObject, ["density"], fromDensity);
    }
    const fromBrightness = getValueByPath(fromObject, ["brightness"]);
    if (fromBrightness != null) {
      setValueByPath(toObject, ["brightness"], fromBrightness);
    }
    const fromScale = getValueByPath(fromObject, ["scale"]);
    if (fromScale != null) {
      setValueByPath(toObject, ["scale"], fromScale);
    }
    const fromMuteBass = getValueByPath(fromObject, ["muteBass"]);
    if (fromMuteBass != null) {
      setValueByPath(toObject, ["muteBass"], fromMuteBass);
    }
    const fromMuteDrums = getValueByPath(fromObject, ["muteDrums"]);
    if (fromMuteDrums != null) {
      setValueByPath(toObject, ["muteDrums"], fromMuteDrums);
    }
    const fromOnlyBassAndDrums = getValueByPath(fromObject, [
      "onlyBassAndDrums"
    ]);
    if (fromOnlyBassAndDrums != null) {
      setValueByPath(toObject, ["onlyBassAndDrums"], fromOnlyBassAndDrums);
    }
    const fromMusicGenerationMode = getValueByPath(fromObject, [
      "musicGenerationMode"
    ]);
    if (fromMusicGenerationMode != null) {
      setValueByPath(toObject, ["musicGenerationMode"], fromMusicGenerationMode);
    }
    return toObject;
  }
  function liveMusicServerContentFromMldev(fromObject) {
    const toObject = {};
    const fromAudioChunks = getValueByPath(fromObject, ["audioChunks"]);
    if (fromAudioChunks != null) {
      let transformedList = fromAudioChunks;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return audioChunkFromMldev(item);
        });
      }
      setValueByPath(toObject, ["audioChunks"], transformedList);
    }
    return toObject;
  }
  function liveMusicServerMessageFromMldev(fromObject) {
    const toObject = {};
    const fromSetupComplete = getValueByPath(fromObject, [
      "setupComplete"
    ]);
    if (fromSetupComplete != null) {
      setValueByPath(toObject, ["setupComplete"], liveMusicServerSetupCompleteFromMldev());
    }
    const fromServerContent = getValueByPath(fromObject, [
      "serverContent"
    ]);
    if (fromServerContent != null) {
      setValueByPath(toObject, ["serverContent"], liveMusicServerContentFromMldev(fromServerContent));
    }
    const fromFilteredPrompt = getValueByPath(fromObject, [
      "filteredPrompt"
    ]);
    if (fromFilteredPrompt != null) {
      setValueByPath(toObject, ["filteredPrompt"], liveMusicFilteredPromptFromMldev(fromFilteredPrompt));
    }
    return toObject;
  }
  function liveMusicServerSetupCompleteFromMldev() {
    const toObject = {};
    return toObject;
  }
  function liveMusicSetConfigParametersToMldev(fromObject) {
    const toObject = {};
    const fromMusicGenerationConfig = getValueByPath(fromObject, [
      "musicGenerationConfig"
    ]);
    if (fromMusicGenerationConfig != null) {
      setValueByPath(toObject, ["musicGenerationConfig"], liveMusicGenerationConfigToMldev(fromMusicGenerationConfig));
    }
    return toObject;
  }
  function liveMusicSetWeightedPromptsParametersToMldev(fromObject) {
    const toObject = {};
    const fromWeightedPrompts = getValueByPath(fromObject, [
      "weightedPrompts"
    ]);
    if (fromWeightedPrompts != null) {
      let transformedList = fromWeightedPrompts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return weightedPromptToMldev(item);
        });
      }
      setValueByPath(toObject, ["weightedPrompts"], transformedList);
    }
    return toObject;
  }
  function liveMusicSourceMetadataFromMldev(fromObject) {
    const toObject = {};
    const fromClientContent = getValueByPath(fromObject, [
      "clientContent"
    ]);
    if (fromClientContent != null) {
      setValueByPath(toObject, ["clientContent"], liveMusicClientContentFromMldev(fromClientContent));
    }
    const fromMusicGenerationConfig = getValueByPath(fromObject, [
      "musicGenerationConfig"
    ]);
    if (fromMusicGenerationConfig != null) {
      setValueByPath(toObject, ["musicGenerationConfig"], liveMusicGenerationConfigFromMldev(fromMusicGenerationConfig));
    }
    return toObject;
  }
  function liveSendRealtimeInputParametersToMldev(fromObject) {
    const toObject = {};
    const fromMedia = getValueByPath(fromObject, ["media"]);
    if (fromMedia != null) {
      let transformedList = tBlobs(fromMedia);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return item;
        });
      }
      setValueByPath(toObject, ["mediaChunks"], transformedList);
    }
    const fromAudio = getValueByPath(fromObject, ["audio"]);
    if (fromAudio != null) {
      setValueByPath(toObject, ["audio"], tAudioBlob(fromAudio));
    }
    const fromAudioStreamEnd = getValueByPath(fromObject, [
      "audioStreamEnd"
    ]);
    if (fromAudioStreamEnd != null) {
      setValueByPath(toObject, ["audioStreamEnd"], fromAudioStreamEnd);
    }
    const fromVideo = getValueByPath(fromObject, ["video"]);
    if (fromVideo != null) {
      setValueByPath(toObject, ["video"], tImageBlob(fromVideo));
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    const fromActivityStart = getValueByPath(fromObject, [
      "activityStart"
    ]);
    if (fromActivityStart != null) {
      setValueByPath(toObject, ["activityStart"], activityStartToMldev());
    }
    const fromActivityEnd = getValueByPath(fromObject, ["activityEnd"]);
    if (fromActivityEnd != null) {
      setValueByPath(toObject, ["activityEnd"], activityEndToMldev());
    }
    return toObject;
  }
  function liveSendRealtimeInputParametersToVertex(fromObject) {
    const toObject = {};
    const fromMedia = getValueByPath(fromObject, ["media"]);
    if (fromMedia != null) {
      let transformedList = tBlobs(fromMedia);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return item;
        });
      }
      setValueByPath(toObject, ["mediaChunks"], transformedList);
    }
    const fromAudio = getValueByPath(fromObject, ["audio"]);
    if (fromAudio != null) {
      setValueByPath(toObject, ["audio"], tAudioBlob(fromAudio));
    }
    const fromAudioStreamEnd = getValueByPath(fromObject, [
      "audioStreamEnd"
    ]);
    if (fromAudioStreamEnd != null) {
      setValueByPath(toObject, ["audioStreamEnd"], fromAudioStreamEnd);
    }
    const fromVideo = getValueByPath(fromObject, ["video"]);
    if (fromVideo != null) {
      setValueByPath(toObject, ["video"], tImageBlob(fromVideo));
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    const fromActivityStart = getValueByPath(fromObject, [
      "activityStart"
    ]);
    if (fromActivityStart != null) {
      setValueByPath(toObject, ["activityStart"], activityStartToVertex());
    }
    const fromActivityEnd = getValueByPath(fromObject, ["activityEnd"]);
    if (fromActivityEnd != null) {
      setValueByPath(toObject, ["activityEnd"], activityEndToVertex());
    }
    return toObject;
  }
  function liveServerContentFromMldev(fromObject) {
    const toObject = {};
    const fromModelTurn = getValueByPath(fromObject, ["modelTurn"]);
    if (fromModelTurn != null) {
      setValueByPath(toObject, ["modelTurn"], contentFromMldev$1(fromModelTurn));
    }
    const fromTurnComplete = getValueByPath(fromObject, ["turnComplete"]);
    if (fromTurnComplete != null) {
      setValueByPath(toObject, ["turnComplete"], fromTurnComplete);
    }
    const fromInterrupted = getValueByPath(fromObject, ["interrupted"]);
    if (fromInterrupted != null) {
      setValueByPath(toObject, ["interrupted"], fromInterrupted);
    }
    const fromGroundingMetadata = getValueByPath(fromObject, [
      "groundingMetadata"
    ]);
    if (fromGroundingMetadata != null) {
      setValueByPath(toObject, ["groundingMetadata"], fromGroundingMetadata);
    }
    const fromGenerationComplete = getValueByPath(fromObject, [
      "generationComplete"
    ]);
    if (fromGenerationComplete != null) {
      setValueByPath(toObject, ["generationComplete"], fromGenerationComplete);
    }
    const fromInputTranscription = getValueByPath(fromObject, [
      "inputTranscription"
    ]);
    if (fromInputTranscription != null) {
      setValueByPath(toObject, ["inputTranscription"], transcriptionFromMldev(fromInputTranscription));
    }
    const fromOutputTranscription = getValueByPath(fromObject, [
      "outputTranscription"
    ]);
    if (fromOutputTranscription != null) {
      setValueByPath(toObject, ["outputTranscription"], transcriptionFromMldev(fromOutputTranscription));
    }
    const fromUrlContextMetadata = getValueByPath(fromObject, [
      "urlContextMetadata"
    ]);
    if (fromUrlContextMetadata != null) {
      setValueByPath(toObject, ["urlContextMetadata"], urlContextMetadataFromMldev$1(fromUrlContextMetadata));
    }
    const fromTurnCompleteReason = getValueByPath(fromObject, [
      "turnCompleteReason"
    ]);
    if (fromTurnCompleteReason != null) {
      setValueByPath(toObject, ["turnCompleteReason"], fromTurnCompleteReason);
    }
    const fromWaitingForInput = getValueByPath(fromObject, [
      "waitingForInput"
    ]);
    if (fromWaitingForInput != null) {
      setValueByPath(toObject, ["waitingForInput"], fromWaitingForInput);
    }
    return toObject;
  }
  function liveServerContentFromVertex(fromObject) {
    const toObject = {};
    const fromModelTurn = getValueByPath(fromObject, ["modelTurn"]);
    if (fromModelTurn != null) {
      setValueByPath(toObject, ["modelTurn"], contentFromVertex$1(fromModelTurn));
    }
    const fromTurnComplete = getValueByPath(fromObject, ["turnComplete"]);
    if (fromTurnComplete != null) {
      setValueByPath(toObject, ["turnComplete"], fromTurnComplete);
    }
    const fromInterrupted = getValueByPath(fromObject, ["interrupted"]);
    if (fromInterrupted != null) {
      setValueByPath(toObject, ["interrupted"], fromInterrupted);
    }
    const fromGroundingMetadata = getValueByPath(fromObject, [
      "groundingMetadata"
    ]);
    if (fromGroundingMetadata != null) {
      setValueByPath(toObject, ["groundingMetadata"], fromGroundingMetadata);
    }
    const fromGenerationComplete = getValueByPath(fromObject, [
      "generationComplete"
    ]);
    if (fromGenerationComplete != null) {
      setValueByPath(toObject, ["generationComplete"], fromGenerationComplete);
    }
    const fromInputTranscription = getValueByPath(fromObject, [
      "inputTranscription"
    ]);
    if (fromInputTranscription != null) {
      setValueByPath(toObject, ["inputTranscription"], transcriptionFromVertex(fromInputTranscription));
    }
    const fromOutputTranscription = getValueByPath(fromObject, [
      "outputTranscription"
    ]);
    if (fromOutputTranscription != null) {
      setValueByPath(toObject, ["outputTranscription"], transcriptionFromVertex(fromOutputTranscription));
    }
    const fromTurnCompleteReason = getValueByPath(fromObject, [
      "turnCompleteReason"
    ]);
    if (fromTurnCompleteReason != null) {
      setValueByPath(toObject, ["turnCompleteReason"], fromTurnCompleteReason);
    }
    const fromWaitingForInput = getValueByPath(fromObject, [
      "waitingForInput"
    ]);
    if (fromWaitingForInput != null) {
      setValueByPath(toObject, ["waitingForInput"], fromWaitingForInput);
    }
    return toObject;
  }
  function liveServerGoAwayFromMldev(fromObject) {
    const toObject = {};
    const fromTimeLeft = getValueByPath(fromObject, ["timeLeft"]);
    if (fromTimeLeft != null) {
      setValueByPath(toObject, ["timeLeft"], fromTimeLeft);
    }
    return toObject;
  }
  function liveServerGoAwayFromVertex(fromObject) {
    const toObject = {};
    const fromTimeLeft = getValueByPath(fromObject, ["timeLeft"]);
    if (fromTimeLeft != null) {
      setValueByPath(toObject, ["timeLeft"], fromTimeLeft);
    }
    return toObject;
  }
  function liveServerMessageFromMldev(fromObject) {
    const toObject = {};
    const fromSetupComplete = getValueByPath(fromObject, [
      "setupComplete"
    ]);
    if (fromSetupComplete != null) {
      setValueByPath(toObject, ["setupComplete"], liveServerSetupCompleteFromMldev());
    }
    const fromServerContent = getValueByPath(fromObject, [
      "serverContent"
    ]);
    if (fromServerContent != null) {
      setValueByPath(toObject, ["serverContent"], liveServerContentFromMldev(fromServerContent));
    }
    const fromToolCall = getValueByPath(fromObject, ["toolCall"]);
    if (fromToolCall != null) {
      setValueByPath(toObject, ["toolCall"], liveServerToolCallFromMldev(fromToolCall));
    }
    const fromToolCallCancellation = getValueByPath(fromObject, [
      "toolCallCancellation"
    ]);
    if (fromToolCallCancellation != null) {
      setValueByPath(toObject, ["toolCallCancellation"], liveServerToolCallCancellationFromMldev(fromToolCallCancellation));
    }
    const fromUsageMetadata = getValueByPath(fromObject, [
      "usageMetadata"
    ]);
    if (fromUsageMetadata != null) {
      setValueByPath(toObject, ["usageMetadata"], usageMetadataFromMldev(fromUsageMetadata));
    }
    const fromGoAway = getValueByPath(fromObject, ["goAway"]);
    if (fromGoAway != null) {
      setValueByPath(toObject, ["goAway"], liveServerGoAwayFromMldev(fromGoAway));
    }
    const fromSessionResumptionUpdate = getValueByPath(fromObject, [
      "sessionResumptionUpdate"
    ]);
    if (fromSessionResumptionUpdate != null) {
      setValueByPath(toObject, ["sessionResumptionUpdate"], liveServerSessionResumptionUpdateFromMldev(fromSessionResumptionUpdate));
    }
    return toObject;
  }
  function liveServerMessageFromVertex(fromObject) {
    const toObject = {};
    const fromSetupComplete = getValueByPath(fromObject, [
      "setupComplete"
    ]);
    if (fromSetupComplete != null) {
      setValueByPath(toObject, ["setupComplete"], liveServerSetupCompleteFromVertex(fromSetupComplete));
    }
    const fromServerContent = getValueByPath(fromObject, [
      "serverContent"
    ]);
    if (fromServerContent != null) {
      setValueByPath(toObject, ["serverContent"], liveServerContentFromVertex(fromServerContent));
    }
    const fromToolCall = getValueByPath(fromObject, ["toolCall"]);
    if (fromToolCall != null) {
      setValueByPath(toObject, ["toolCall"], liveServerToolCallFromVertex(fromToolCall));
    }
    const fromToolCallCancellation = getValueByPath(fromObject, [
      "toolCallCancellation"
    ]);
    if (fromToolCallCancellation != null) {
      setValueByPath(toObject, ["toolCallCancellation"], liveServerToolCallCancellationFromVertex(fromToolCallCancellation));
    }
    const fromUsageMetadata = getValueByPath(fromObject, [
      "usageMetadata"
    ]);
    if (fromUsageMetadata != null) {
      setValueByPath(toObject, ["usageMetadata"], usageMetadataFromVertex(fromUsageMetadata));
    }
    const fromGoAway = getValueByPath(fromObject, ["goAway"]);
    if (fromGoAway != null) {
      setValueByPath(toObject, ["goAway"], liveServerGoAwayFromVertex(fromGoAway));
    }
    const fromSessionResumptionUpdate = getValueByPath(fromObject, [
      "sessionResumptionUpdate"
    ]);
    if (fromSessionResumptionUpdate != null) {
      setValueByPath(toObject, ["sessionResumptionUpdate"], liveServerSessionResumptionUpdateFromVertex(fromSessionResumptionUpdate));
    }
    return toObject;
  }
  function liveServerSessionResumptionUpdateFromMldev(fromObject) {
    const toObject = {};
    const fromNewHandle = getValueByPath(fromObject, ["newHandle"]);
    if (fromNewHandle != null) {
      setValueByPath(toObject, ["newHandle"], fromNewHandle);
    }
    const fromResumable = getValueByPath(fromObject, ["resumable"]);
    if (fromResumable != null) {
      setValueByPath(toObject, ["resumable"], fromResumable);
    }
    const fromLastConsumedClientMessageIndex = getValueByPath(fromObject, [
      "lastConsumedClientMessageIndex"
    ]);
    if (fromLastConsumedClientMessageIndex != null) {
      setValueByPath(toObject, ["lastConsumedClientMessageIndex"], fromLastConsumedClientMessageIndex);
    }
    return toObject;
  }
  function liveServerSessionResumptionUpdateFromVertex(fromObject) {
    const toObject = {};
    const fromNewHandle = getValueByPath(fromObject, ["newHandle"]);
    if (fromNewHandle != null) {
      setValueByPath(toObject, ["newHandle"], fromNewHandle);
    }
    const fromResumable = getValueByPath(fromObject, ["resumable"]);
    if (fromResumable != null) {
      setValueByPath(toObject, ["resumable"], fromResumable);
    }
    const fromLastConsumedClientMessageIndex = getValueByPath(fromObject, [
      "lastConsumedClientMessageIndex"
    ]);
    if (fromLastConsumedClientMessageIndex != null) {
      setValueByPath(toObject, ["lastConsumedClientMessageIndex"], fromLastConsumedClientMessageIndex);
    }
    return toObject;
  }
  function liveServerSetupCompleteFromMldev() {
    const toObject = {};
    return toObject;
  }
  function liveServerSetupCompleteFromVertex(fromObject) {
    const toObject = {};
    const fromSessionId = getValueByPath(fromObject, ["sessionId"]);
    if (fromSessionId != null) {
      setValueByPath(toObject, ["sessionId"], fromSessionId);
    }
    return toObject;
  }
  function liveServerToolCallCancellationFromMldev(fromObject) {
    const toObject = {};
    const fromIds = getValueByPath(fromObject, ["ids"]);
    if (fromIds != null) {
      setValueByPath(toObject, ["ids"], fromIds);
    }
    return toObject;
  }
  function liveServerToolCallCancellationFromVertex(fromObject) {
    const toObject = {};
    const fromIds = getValueByPath(fromObject, ["ids"]);
    if (fromIds != null) {
      setValueByPath(toObject, ["ids"], fromIds);
    }
    return toObject;
  }
  function liveServerToolCallFromMldev(fromObject) {
    const toObject = {};
    const fromFunctionCalls = getValueByPath(fromObject, [
      "functionCalls"
    ]);
    if (fromFunctionCalls != null) {
      let transformedList = fromFunctionCalls;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionCallFromMldev$1(item);
        });
      }
      setValueByPath(toObject, ["functionCalls"], transformedList);
    }
    return toObject;
  }
  function liveServerToolCallFromVertex(fromObject) {
    const toObject = {};
    const fromFunctionCalls = getValueByPath(fromObject, [
      "functionCalls"
    ]);
    if (fromFunctionCalls != null) {
      let transformedList = fromFunctionCalls;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionCallFromVertex$1(item);
        });
      }
      setValueByPath(toObject, ["functionCalls"], transformedList);
    }
    return toObject;
  }
  function modalityTokenCountFromMldev(fromObject) {
    const toObject = {};
    const fromModality = getValueByPath(fromObject, ["modality"]);
    if (fromModality != null) {
      setValueByPath(toObject, ["modality"], fromModality);
    }
    const fromTokenCount = getValueByPath(fromObject, ["tokenCount"]);
    if (fromTokenCount != null) {
      setValueByPath(toObject, ["tokenCount"], fromTokenCount);
    }
    return toObject;
  }
  function modalityTokenCountFromVertex(fromObject) {
    const toObject = {};
    const fromModality = getValueByPath(fromObject, ["modality"]);
    if (fromModality != null) {
      setValueByPath(toObject, ["modality"], fromModality);
    }
    const fromTokenCount = getValueByPath(fromObject, ["tokenCount"]);
    if (fromTokenCount != null) {
      setValueByPath(toObject, ["tokenCount"], fromTokenCount);
    }
    return toObject;
  }
  function multiSpeakerVoiceConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromSpeakerVoiceConfigs = getValueByPath(fromObject, [
      "speakerVoiceConfigs"
    ]);
    if (fromSpeakerVoiceConfigs != null) {
      let transformedList = fromSpeakerVoiceConfigs;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return speakerVoiceConfigToMldev$2(item);
        });
      }
      setValueByPath(toObject, ["speakerVoiceConfigs"], transformedList);
    }
    return toObject;
  }
  function partFromMldev$1(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataFromMldev$1(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobFromMldev$1(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataFromMldev$1(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallFromMldev$1(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function partFromVertex$1(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataFromVertex$1(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobFromVertex$1(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataFromVertex$1(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallFromVertex$1(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function partToMldev$2(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataToMldev$2(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobToMldev$2(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataToMldev$2(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallToMldev$2(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function partToVertex$1(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataToVertex$1(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobToVertex$1(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataToVertex$1(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallToVertex$1(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function prebuiltVoiceConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromVoiceName = getValueByPath(fromObject, ["voiceName"]);
    if (fromVoiceName != null) {
      setValueByPath(toObject, ["voiceName"], fromVoiceName);
    }
    return toObject;
  }
  function prebuiltVoiceConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromVoiceName = getValueByPath(fromObject, ["voiceName"]);
    if (fromVoiceName != null) {
      setValueByPath(toObject, ["voiceName"], fromVoiceName);
    }
    return toObject;
  }
  function proactivityConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromProactiveAudio = getValueByPath(fromObject, [
      "proactiveAudio"
    ]);
    if (fromProactiveAudio != null) {
      setValueByPath(toObject, ["proactiveAudio"], fromProactiveAudio);
    }
    return toObject;
  }
  function proactivityConfigToVertex(fromObject) {
    const toObject = {};
    const fromProactiveAudio = getValueByPath(fromObject, [
      "proactiveAudio"
    ]);
    if (fromProactiveAudio != null) {
      setValueByPath(toObject, ["proactiveAudio"], fromProactiveAudio);
    }
    return toObject;
  }
  function realtimeInputConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromAutomaticActivityDetection = getValueByPath(fromObject, [
      "automaticActivityDetection"
    ]);
    if (fromAutomaticActivityDetection != null) {
      setValueByPath(toObject, ["automaticActivityDetection"], automaticActivityDetectionToMldev$1(fromAutomaticActivityDetection));
    }
    const fromActivityHandling = getValueByPath(fromObject, [
      "activityHandling"
    ]);
    if (fromActivityHandling != null) {
      setValueByPath(toObject, ["activityHandling"], fromActivityHandling);
    }
    const fromTurnCoverage = getValueByPath(fromObject, ["turnCoverage"]);
    if (fromTurnCoverage != null) {
      setValueByPath(toObject, ["turnCoverage"], fromTurnCoverage);
    }
    return toObject;
  }
  function realtimeInputConfigToVertex(fromObject) {
    const toObject = {};
    const fromAutomaticActivityDetection = getValueByPath(fromObject, [
      "automaticActivityDetection"
    ]);
    if (fromAutomaticActivityDetection != null) {
      setValueByPath(toObject, ["automaticActivityDetection"], automaticActivityDetectionToVertex(fromAutomaticActivityDetection));
    }
    const fromActivityHandling = getValueByPath(fromObject, [
      "activityHandling"
    ]);
    if (fromActivityHandling != null) {
      setValueByPath(toObject, ["activityHandling"], fromActivityHandling);
    }
    const fromTurnCoverage = getValueByPath(fromObject, ["turnCoverage"]);
    if (fromTurnCoverage != null) {
      setValueByPath(toObject, ["turnCoverage"], fromTurnCoverage);
    }
    return toObject;
  }
  function sessionResumptionConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromHandle = getValueByPath(fromObject, ["handle"]);
    if (fromHandle != null) {
      setValueByPath(toObject, ["handle"], fromHandle);
    }
    if (getValueByPath(fromObject, ["transparent"]) !== void 0) {
      throw new Error("transparent parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function sessionResumptionConfigToVertex(fromObject) {
    const toObject = {};
    const fromHandle = getValueByPath(fromObject, ["handle"]);
    if (fromHandle != null) {
      setValueByPath(toObject, ["handle"], fromHandle);
    }
    const fromTransparent = getValueByPath(fromObject, ["transparent"]);
    if (fromTransparent != null) {
      setValueByPath(toObject, ["transparent"], fromTransparent);
    }
    return toObject;
  }
  function slidingWindowToMldev$1(fromObject) {
    const toObject = {};
    const fromTargetTokens = getValueByPath(fromObject, ["targetTokens"]);
    if (fromTargetTokens != null) {
      setValueByPath(toObject, ["targetTokens"], fromTargetTokens);
    }
    return toObject;
  }
  function slidingWindowToVertex(fromObject) {
    const toObject = {};
    const fromTargetTokens = getValueByPath(fromObject, ["targetTokens"]);
    if (fromTargetTokens != null) {
      setValueByPath(toObject, ["targetTokens"], fromTargetTokens);
    }
    return toObject;
  }
  function speakerVoiceConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromSpeaker = getValueByPath(fromObject, ["speaker"]);
    if (fromSpeaker != null) {
      setValueByPath(toObject, ["speaker"], fromSpeaker);
    }
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToMldev$2(fromVoiceConfig));
    }
    return toObject;
  }
  function speechConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToMldev$2(fromVoiceConfig));
    }
    const fromMultiSpeakerVoiceConfig = getValueByPath(fromObject, [
      "multiSpeakerVoiceConfig"
    ]);
    if (fromMultiSpeakerVoiceConfig != null) {
      setValueByPath(toObject, ["multiSpeakerVoiceConfig"], multiSpeakerVoiceConfigToMldev$2(fromMultiSpeakerVoiceConfig));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function speechConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToVertex$1(fromVoiceConfig));
    }
    if (getValueByPath(fromObject, ["multiSpeakerVoiceConfig"]) !== void 0) {
      throw new Error("multiSpeakerVoiceConfig parameter is not supported in Vertex AI.");
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function toolComputerUseToMldev$2(fromObject) {
    const toObject = {};
    const fromEnvironment = getValueByPath(fromObject, ["environment"]);
    if (fromEnvironment != null) {
      setValueByPath(toObject, ["environment"], fromEnvironment);
    }
    const fromExcludedPredefinedFunctions = getValueByPath(fromObject, [
      "excludedPredefinedFunctions"
    ]);
    if (fromExcludedPredefinedFunctions != null) {
      setValueByPath(toObject, ["excludedPredefinedFunctions"], fromExcludedPredefinedFunctions);
    }
    return toObject;
  }
  function toolComputerUseToVertex$1(fromObject) {
    const toObject = {};
    const fromEnvironment = getValueByPath(fromObject, ["environment"]);
    if (fromEnvironment != null) {
      setValueByPath(toObject, ["environment"], fromEnvironment);
    }
    const fromExcludedPredefinedFunctions = getValueByPath(fromObject, [
      "excludedPredefinedFunctions"
    ]);
    if (fromExcludedPredefinedFunctions != null) {
      setValueByPath(toObject, ["excludedPredefinedFunctions"], fromExcludedPredefinedFunctions);
    }
    return toObject;
  }
  function toolToMldev$2(fromObject) {
    const toObject = {};
    const fromFunctionDeclarations = getValueByPath(fromObject, [
      "functionDeclarations"
    ]);
    if (fromFunctionDeclarations != null) {
      let transformedList = fromFunctionDeclarations;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionDeclarationToMldev$2(item);
        });
      }
      setValueByPath(toObject, ["functionDeclarations"], transformedList);
    }
    if (getValueByPath(fromObject, ["retrieval"]) !== void 0) {
      throw new Error("retrieval parameter is not supported in Gemini API.");
    }
    const fromGoogleSearch = getValueByPath(fromObject, ["googleSearch"]);
    if (fromGoogleSearch != null) {
      setValueByPath(toObject, ["googleSearch"], googleSearchToMldev$2(fromGoogleSearch));
    }
    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [
      "googleSearchRetrieval"
    ]);
    if (fromGoogleSearchRetrieval != null) {
      setValueByPath(toObject, ["googleSearchRetrieval"], googleSearchRetrievalToMldev$2(fromGoogleSearchRetrieval));
    }
    if (getValueByPath(fromObject, ["enterpriseWebSearch"]) !== void 0) {
      throw new Error("enterpriseWebSearch parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["googleMaps"]) !== void 0) {
      throw new Error("googleMaps parameter is not supported in Gemini API.");
    }
    const fromUrlContext = getValueByPath(fromObject, ["urlContext"]);
    if (fromUrlContext != null) {
      setValueByPath(toObject, ["urlContext"], urlContextToMldev$2());
    }
    const fromComputerUse = getValueByPath(fromObject, ["computerUse"]);
    if (fromComputerUse != null) {
      setValueByPath(toObject, ["computerUse"], toolComputerUseToMldev$2(fromComputerUse));
    }
    const fromCodeExecution = getValueByPath(fromObject, [
      "codeExecution"
    ]);
    if (fromCodeExecution != null) {
      setValueByPath(toObject, ["codeExecution"], fromCodeExecution);
    }
    return toObject;
  }
  function toolToVertex$1(fromObject) {
    const toObject = {};
    const fromFunctionDeclarations = getValueByPath(fromObject, [
      "functionDeclarations"
    ]);
    if (fromFunctionDeclarations != null) {
      let transformedList = fromFunctionDeclarations;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionDeclarationToVertex$1(item);
        });
      }
      setValueByPath(toObject, ["functionDeclarations"], transformedList);
    }
    const fromRetrieval = getValueByPath(fromObject, ["retrieval"]);
    if (fromRetrieval != null) {
      setValueByPath(toObject, ["retrieval"], fromRetrieval);
    }
    const fromGoogleSearch = getValueByPath(fromObject, ["googleSearch"]);
    if (fromGoogleSearch != null) {
      setValueByPath(toObject, ["googleSearch"], googleSearchToVertex$1(fromGoogleSearch));
    }
    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [
      "googleSearchRetrieval"
    ]);
    if (fromGoogleSearchRetrieval != null) {
      setValueByPath(toObject, ["googleSearchRetrieval"], googleSearchRetrievalToVertex$1(fromGoogleSearchRetrieval));
    }
    const fromEnterpriseWebSearch = getValueByPath(fromObject, [
      "enterpriseWebSearch"
    ]);
    if (fromEnterpriseWebSearch != null) {
      setValueByPath(toObject, ["enterpriseWebSearch"], enterpriseWebSearchToVertex$1(fromEnterpriseWebSearch));
    }
    const fromGoogleMaps = getValueByPath(fromObject, ["googleMaps"]);
    if (fromGoogleMaps != null) {
      setValueByPath(toObject, ["googleMaps"], googleMapsToVertex$1(fromGoogleMaps));
    }
    const fromUrlContext = getValueByPath(fromObject, ["urlContext"]);
    if (fromUrlContext != null) {
      setValueByPath(toObject, ["urlContext"], urlContextToVertex$1());
    }
    const fromComputerUse = getValueByPath(fromObject, ["computerUse"]);
    if (fromComputerUse != null) {
      setValueByPath(toObject, ["computerUse"], toolComputerUseToVertex$1(fromComputerUse));
    }
    const fromCodeExecution = getValueByPath(fromObject, [
      "codeExecution"
    ]);
    if (fromCodeExecution != null) {
      setValueByPath(toObject, ["codeExecution"], fromCodeExecution);
    }
    return toObject;
  }
  function transcriptionFromMldev(fromObject) {
    const toObject = {};
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    const fromFinished = getValueByPath(fromObject, ["finished"]);
    if (fromFinished != null) {
      setValueByPath(toObject, ["finished"], fromFinished);
    }
    return toObject;
  }
  function transcriptionFromVertex(fromObject) {
    const toObject = {};
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    const fromFinished = getValueByPath(fromObject, ["finished"]);
    if (fromFinished != null) {
      setValueByPath(toObject, ["finished"], fromFinished);
    }
    return toObject;
  }
  function urlContextMetadataFromMldev$1(fromObject) {
    const toObject = {};
    const fromUrlMetadata = getValueByPath(fromObject, ["urlMetadata"]);
    if (fromUrlMetadata != null) {
      let transformedList = fromUrlMetadata;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return urlMetadataFromMldev$1(item);
        });
      }
      setValueByPath(toObject, ["urlMetadata"], transformedList);
    }
    return toObject;
  }
  function urlContextToMldev$2() {
    const toObject = {};
    return toObject;
  }
  function urlContextToVertex$1() {
    const toObject = {};
    return toObject;
  }
  function urlMetadataFromMldev$1(fromObject) {
    const toObject = {};
    const fromRetrievedUrl = getValueByPath(fromObject, ["retrievedUrl"]);
    if (fromRetrievedUrl != null) {
      setValueByPath(toObject, ["retrievedUrl"], fromRetrievedUrl);
    }
    const fromUrlRetrievalStatus = getValueByPath(fromObject, [
      "urlRetrievalStatus"
    ]);
    if (fromUrlRetrievalStatus != null) {
      setValueByPath(toObject, ["urlRetrievalStatus"], fromUrlRetrievalStatus);
    }
    return toObject;
  }
  function usageMetadataFromMldev(fromObject) {
    const toObject = {};
    const fromPromptTokenCount = getValueByPath(fromObject, [
      "promptTokenCount"
    ]);
    if (fromPromptTokenCount != null) {
      setValueByPath(toObject, ["promptTokenCount"], fromPromptTokenCount);
    }
    const fromCachedContentTokenCount = getValueByPath(fromObject, [
      "cachedContentTokenCount"
    ]);
    if (fromCachedContentTokenCount != null) {
      setValueByPath(toObject, ["cachedContentTokenCount"], fromCachedContentTokenCount);
    }
    const fromResponseTokenCount = getValueByPath(fromObject, [
      "responseTokenCount"
    ]);
    if (fromResponseTokenCount != null) {
      setValueByPath(toObject, ["responseTokenCount"], fromResponseTokenCount);
    }
    const fromToolUsePromptTokenCount = getValueByPath(fromObject, [
      "toolUsePromptTokenCount"
    ]);
    if (fromToolUsePromptTokenCount != null) {
      setValueByPath(toObject, ["toolUsePromptTokenCount"], fromToolUsePromptTokenCount);
    }
    const fromThoughtsTokenCount = getValueByPath(fromObject, [
      "thoughtsTokenCount"
    ]);
    if (fromThoughtsTokenCount != null) {
      setValueByPath(toObject, ["thoughtsTokenCount"], fromThoughtsTokenCount);
    }
    const fromTotalTokenCount = getValueByPath(fromObject, [
      "totalTokenCount"
    ]);
    if (fromTotalTokenCount != null) {
      setValueByPath(toObject, ["totalTokenCount"], fromTotalTokenCount);
    }
    const fromPromptTokensDetails = getValueByPath(fromObject, [
      "promptTokensDetails"
    ]);
    if (fromPromptTokensDetails != null) {
      let transformedList = fromPromptTokensDetails;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modalityTokenCountFromMldev(item);
        });
      }
      setValueByPath(toObject, ["promptTokensDetails"], transformedList);
    }
    const fromCacheTokensDetails = getValueByPath(fromObject, [
      "cacheTokensDetails"
    ]);
    if (fromCacheTokensDetails != null) {
      let transformedList = fromCacheTokensDetails;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modalityTokenCountFromMldev(item);
        });
      }
      setValueByPath(toObject, ["cacheTokensDetails"], transformedList);
    }
    const fromResponseTokensDetails = getValueByPath(fromObject, [
      "responseTokensDetails"
    ]);
    if (fromResponseTokensDetails != null) {
      let transformedList = fromResponseTokensDetails;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modalityTokenCountFromMldev(item);
        });
      }
      setValueByPath(toObject, ["responseTokensDetails"], transformedList);
    }
    const fromToolUsePromptTokensDetails = getValueByPath(fromObject, [
      "toolUsePromptTokensDetails"
    ]);
    if (fromToolUsePromptTokensDetails != null) {
      let transformedList = fromToolUsePromptTokensDetails;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modalityTokenCountFromMldev(item);
        });
      }
      setValueByPath(toObject, ["toolUsePromptTokensDetails"], transformedList);
    }
    return toObject;
  }
  function usageMetadataFromVertex(fromObject) {
    const toObject = {};
    const fromPromptTokenCount = getValueByPath(fromObject, [
      "promptTokenCount"
    ]);
    if (fromPromptTokenCount != null) {
      setValueByPath(toObject, ["promptTokenCount"], fromPromptTokenCount);
    }
    const fromCachedContentTokenCount = getValueByPath(fromObject, [
      "cachedContentTokenCount"
    ]);
    if (fromCachedContentTokenCount != null) {
      setValueByPath(toObject, ["cachedContentTokenCount"], fromCachedContentTokenCount);
    }
    const fromResponseTokenCount = getValueByPath(fromObject, [
      "candidatesTokenCount"
    ]);
    if (fromResponseTokenCount != null) {
      setValueByPath(toObject, ["responseTokenCount"], fromResponseTokenCount);
    }
    const fromToolUsePromptTokenCount = getValueByPath(fromObject, [
      "toolUsePromptTokenCount"
    ]);
    if (fromToolUsePromptTokenCount != null) {
      setValueByPath(toObject, ["toolUsePromptTokenCount"], fromToolUsePromptTokenCount);
    }
    const fromThoughtsTokenCount = getValueByPath(fromObject, [
      "thoughtsTokenCount"
    ]);
    if (fromThoughtsTokenCount != null) {
      setValueByPath(toObject, ["thoughtsTokenCount"], fromThoughtsTokenCount);
    }
    const fromTotalTokenCount = getValueByPath(fromObject, [
      "totalTokenCount"
    ]);
    if (fromTotalTokenCount != null) {
      setValueByPath(toObject, ["totalTokenCount"], fromTotalTokenCount);
    }
    const fromPromptTokensDetails = getValueByPath(fromObject, [
      "promptTokensDetails"
    ]);
    if (fromPromptTokensDetails != null) {
      let transformedList = fromPromptTokensDetails;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modalityTokenCountFromVertex(item);
        });
      }
      setValueByPath(toObject, ["promptTokensDetails"], transformedList);
    }
    const fromCacheTokensDetails = getValueByPath(fromObject, [
      "cacheTokensDetails"
    ]);
    if (fromCacheTokensDetails != null) {
      let transformedList = fromCacheTokensDetails;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modalityTokenCountFromVertex(item);
        });
      }
      setValueByPath(toObject, ["cacheTokensDetails"], transformedList);
    }
    const fromResponseTokensDetails = getValueByPath(fromObject, [
      "candidatesTokensDetails"
    ]);
    if (fromResponseTokensDetails != null) {
      let transformedList = fromResponseTokensDetails;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modalityTokenCountFromVertex(item);
        });
      }
      setValueByPath(toObject, ["responseTokensDetails"], transformedList);
    }
    const fromToolUsePromptTokensDetails = getValueByPath(fromObject, [
      "toolUsePromptTokensDetails"
    ]);
    if (fromToolUsePromptTokensDetails != null) {
      let transformedList = fromToolUsePromptTokensDetails;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modalityTokenCountFromVertex(item);
        });
      }
      setValueByPath(toObject, ["toolUsePromptTokensDetails"], transformedList);
    }
    const fromTrafficType = getValueByPath(fromObject, ["trafficType"]);
    if (fromTrafficType != null) {
      setValueByPath(toObject, ["trafficType"], fromTrafficType);
    }
    return toObject;
  }
  function videoMetadataFromMldev$1(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoMetadataFromVertex$1(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoMetadataToMldev$2(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoMetadataToVertex$1(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function voiceConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromPrebuiltVoiceConfig = getValueByPath(fromObject, [
      "prebuiltVoiceConfig"
    ]);
    if (fromPrebuiltVoiceConfig != null) {
      setValueByPath(toObject, ["prebuiltVoiceConfig"], prebuiltVoiceConfigToMldev$2(fromPrebuiltVoiceConfig));
    }
    return toObject;
  }
  function voiceConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromPrebuiltVoiceConfig = getValueByPath(fromObject, [
      "prebuiltVoiceConfig"
    ]);
    if (fromPrebuiltVoiceConfig != null) {
      setValueByPath(toObject, ["prebuiltVoiceConfig"], prebuiltVoiceConfigToVertex$1(fromPrebuiltVoiceConfig));
    }
    return toObject;
  }
  function weightedPromptFromMldev(fromObject) {
    const toObject = {};
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    const fromWeight = getValueByPath(fromObject, ["weight"]);
    if (fromWeight != null) {
      setValueByPath(toObject, ["weight"], fromWeight);
    }
    return toObject;
  }
  function weightedPromptToMldev(fromObject) {
    const toObject = {};
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    const fromWeight = getValueByPath(fromObject, ["weight"]);
    if (fromWeight != null) {
      setValueByPath(toObject, ["weight"], fromWeight);
    }
    return toObject;
  }
  function apiKeyConfigToVertex(fromObject) {
    const toObject = {};
    const fromApiKeyString = getValueByPath(fromObject, ["apiKeyString"]);
    if (fromApiKeyString != null) {
      setValueByPath(toObject, ["apiKeyString"], fromApiKeyString);
    }
    return toObject;
  }
  function authConfigToVertex(fromObject) {
    const toObject = {};
    const fromApiKeyConfig = getValueByPath(fromObject, ["apiKeyConfig"]);
    if (fromApiKeyConfig != null) {
      setValueByPath(toObject, ["apiKeyConfig"], apiKeyConfigToVertex(fromApiKeyConfig));
    }
    const fromAuthType = getValueByPath(fromObject, ["authType"]);
    if (fromAuthType != null) {
      setValueByPath(toObject, ["authType"], fromAuthType);
    }
    const fromGoogleServiceAccountConfig = getValueByPath(fromObject, [
      "googleServiceAccountConfig"
    ]);
    if (fromGoogleServiceAccountConfig != null) {
      setValueByPath(toObject, ["googleServiceAccountConfig"], fromGoogleServiceAccountConfig);
    }
    const fromHttpBasicAuthConfig = getValueByPath(fromObject, [
      "httpBasicAuthConfig"
    ]);
    if (fromHttpBasicAuthConfig != null) {
      setValueByPath(toObject, ["httpBasicAuthConfig"], fromHttpBasicAuthConfig);
    }
    const fromOauthConfig = getValueByPath(fromObject, ["oauthConfig"]);
    if (fromOauthConfig != null) {
      setValueByPath(toObject, ["oauthConfig"], fromOauthConfig);
    }
    const fromOidcConfig = getValueByPath(fromObject, ["oidcConfig"]);
    if (fromOidcConfig != null) {
      setValueByPath(toObject, ["oidcConfig"], fromOidcConfig);
    }
    return toObject;
  }
  function blobFromMldev(fromObject) {
    const toObject = {};
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function blobFromVertex(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function blobToMldev$1(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function blobToVertex(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function candidateFromMldev(fromObject) {
    const toObject = {};
    const fromContent = getValueByPath(fromObject, ["content"]);
    if (fromContent != null) {
      setValueByPath(toObject, ["content"], contentFromMldev(fromContent));
    }
    const fromCitationMetadata = getValueByPath(fromObject, [
      "citationMetadata"
    ]);
    if (fromCitationMetadata != null) {
      setValueByPath(toObject, ["citationMetadata"], citationMetadataFromMldev(fromCitationMetadata));
    }
    const fromTokenCount = getValueByPath(fromObject, ["tokenCount"]);
    if (fromTokenCount != null) {
      setValueByPath(toObject, ["tokenCount"], fromTokenCount);
    }
    const fromFinishReason = getValueByPath(fromObject, ["finishReason"]);
    if (fromFinishReason != null) {
      setValueByPath(toObject, ["finishReason"], fromFinishReason);
    }
    const fromUrlContextMetadata = getValueByPath(fromObject, [
      "urlContextMetadata"
    ]);
    if (fromUrlContextMetadata != null) {
      setValueByPath(toObject, ["urlContextMetadata"], urlContextMetadataFromMldev(fromUrlContextMetadata));
    }
    const fromAvgLogprobs = getValueByPath(fromObject, ["avgLogprobs"]);
    if (fromAvgLogprobs != null) {
      setValueByPath(toObject, ["avgLogprobs"], fromAvgLogprobs);
    }
    const fromGroundingMetadata = getValueByPath(fromObject, [
      "groundingMetadata"
    ]);
    if (fromGroundingMetadata != null) {
      setValueByPath(toObject, ["groundingMetadata"], fromGroundingMetadata);
    }
    const fromIndex = getValueByPath(fromObject, ["index"]);
    if (fromIndex != null) {
      setValueByPath(toObject, ["index"], fromIndex);
    }
    const fromLogprobsResult = getValueByPath(fromObject, [
      "logprobsResult"
    ]);
    if (fromLogprobsResult != null) {
      setValueByPath(toObject, ["logprobsResult"], fromLogprobsResult);
    }
    const fromSafetyRatings = getValueByPath(fromObject, [
      "safetyRatings"
    ]);
    if (fromSafetyRatings != null) {
      setValueByPath(toObject, ["safetyRatings"], fromSafetyRatings);
    }
    return toObject;
  }
  function candidateFromVertex(fromObject) {
    const toObject = {};
    const fromContent = getValueByPath(fromObject, ["content"]);
    if (fromContent != null) {
      setValueByPath(toObject, ["content"], contentFromVertex(fromContent));
    }
    const fromCitationMetadata = getValueByPath(fromObject, [
      "citationMetadata"
    ]);
    if (fromCitationMetadata != null) {
      setValueByPath(toObject, ["citationMetadata"], citationMetadataFromVertex(fromCitationMetadata));
    }
    const fromFinishMessage = getValueByPath(fromObject, [
      "finishMessage"
    ]);
    if (fromFinishMessage != null) {
      setValueByPath(toObject, ["finishMessage"], fromFinishMessage);
    }
    const fromFinishReason = getValueByPath(fromObject, ["finishReason"]);
    if (fromFinishReason != null) {
      setValueByPath(toObject, ["finishReason"], fromFinishReason);
    }
    const fromUrlContextMetadata = getValueByPath(fromObject, [
      "urlContextMetadata"
    ]);
    if (fromUrlContextMetadata != null) {
      setValueByPath(toObject, ["urlContextMetadata"], urlContextMetadataFromVertex(fromUrlContextMetadata));
    }
    const fromAvgLogprobs = getValueByPath(fromObject, ["avgLogprobs"]);
    if (fromAvgLogprobs != null) {
      setValueByPath(toObject, ["avgLogprobs"], fromAvgLogprobs);
    }
    const fromGroundingMetadata = getValueByPath(fromObject, [
      "groundingMetadata"
    ]);
    if (fromGroundingMetadata != null) {
      setValueByPath(toObject, ["groundingMetadata"], fromGroundingMetadata);
    }
    const fromIndex = getValueByPath(fromObject, ["index"]);
    if (fromIndex != null) {
      setValueByPath(toObject, ["index"], fromIndex);
    }
    const fromLogprobsResult = getValueByPath(fromObject, [
      "logprobsResult"
    ]);
    if (fromLogprobsResult != null) {
      setValueByPath(toObject, ["logprobsResult"], fromLogprobsResult);
    }
    const fromSafetyRatings = getValueByPath(fromObject, [
      "safetyRatings"
    ]);
    if (fromSafetyRatings != null) {
      setValueByPath(toObject, ["safetyRatings"], fromSafetyRatings);
    }
    return toObject;
  }
  function checkpointFromVertex(fromObject) {
    const toObject = {};
    const fromCheckpointId = getValueByPath(fromObject, ["checkpointId"]);
    if (fromCheckpointId != null) {
      setValueByPath(toObject, ["checkpointId"], fromCheckpointId);
    }
    const fromEpoch = getValueByPath(fromObject, ["epoch"]);
    if (fromEpoch != null) {
      setValueByPath(toObject, ["epoch"], fromEpoch);
    }
    const fromStep = getValueByPath(fromObject, ["step"]);
    if (fromStep != null) {
      setValueByPath(toObject, ["step"], fromStep);
    }
    return toObject;
  }
  function citationMetadataFromMldev(fromObject) {
    const toObject = {};
    const fromCitations = getValueByPath(fromObject, ["citationSources"]);
    if (fromCitations != null) {
      setValueByPath(toObject, ["citations"], fromCitations);
    }
    return toObject;
  }
  function citationMetadataFromVertex(fromObject) {
    const toObject = {};
    const fromCitations = getValueByPath(fromObject, ["citations"]);
    if (fromCitations != null) {
      setValueByPath(toObject, ["citations"], fromCitations);
    }
    return toObject;
  }
  function computeTokensParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      let transformedList = tContents(fromContents);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentToVertex(item);
        });
      }
      setValueByPath(toObject, ["contents"], transformedList);
    }
    return toObject;
  }
  function computeTokensResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromTokensInfo = getValueByPath(fromObject, ["tokensInfo"]);
    if (fromTokensInfo != null) {
      setValueByPath(toObject, ["tokensInfo"], fromTokensInfo);
    }
    return toObject;
  }
  function contentEmbeddingFromMldev(fromObject) {
    const toObject = {};
    const fromValues = getValueByPath(fromObject, ["values"]);
    if (fromValues != null) {
      setValueByPath(toObject, ["values"], fromValues);
    }
    return toObject;
  }
  function contentEmbeddingFromVertex(fromObject) {
    const toObject = {};
    const fromValues = getValueByPath(fromObject, ["values"]);
    if (fromValues != null) {
      setValueByPath(toObject, ["values"], fromValues);
    }
    const fromStatistics = getValueByPath(fromObject, ["statistics"]);
    if (fromStatistics != null) {
      setValueByPath(toObject, ["statistics"], contentEmbeddingStatisticsFromVertex(fromStatistics));
    }
    return toObject;
  }
  function contentEmbeddingStatisticsFromVertex(fromObject) {
    const toObject = {};
    const fromTruncated = getValueByPath(fromObject, ["truncated"]);
    if (fromTruncated != null) {
      setValueByPath(toObject, ["truncated"], fromTruncated);
    }
    const fromTokenCount = getValueByPath(fromObject, ["token_count"]);
    if (fromTokenCount != null) {
      setValueByPath(toObject, ["tokenCount"], fromTokenCount);
    }
    return toObject;
  }
  function contentFromMldev(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partFromMldev(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contentFromVertex(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partFromVertex(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contentToMldev$1(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partToMldev$1(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contentToVertex(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partToVertex(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function controlReferenceConfigToVertex(fromObject) {
    const toObject = {};
    const fromControlType = getValueByPath(fromObject, ["controlType"]);
    if (fromControlType != null) {
      setValueByPath(toObject, ["controlType"], fromControlType);
    }
    const fromEnableControlImageComputation = getValueByPath(fromObject, [
      "enableControlImageComputation"
    ]);
    if (fromEnableControlImageComputation != null) {
      setValueByPath(toObject, ["computeControl"], fromEnableControlImageComputation);
    }
    return toObject;
  }
  function countTokensConfigToMldev(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["systemInstruction"]) !== void 0) {
      throw new Error("systemInstruction parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["tools"]) !== void 0) {
      throw new Error("tools parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["generationConfig"]) !== void 0) {
      throw new Error("generationConfig parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function countTokensConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["systemInstruction"], contentToVertex(tContent(fromSystemInstruction)));
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = fromTools;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToVertex(item);
        });
      }
      setValueByPath(parentObject, ["tools"], transformedList);
    }
    const fromGenerationConfig = getValueByPath(fromObject, [
      "generationConfig"
    ]);
    if (parentObject !== void 0 && fromGenerationConfig != null) {
      setValueByPath(parentObject, ["generationConfig"], fromGenerationConfig);
    }
    return toObject;
  }
  function countTokensParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      let transformedList = tContents(fromContents);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentToMldev$1(item);
        });
      }
      setValueByPath(toObject, ["contents"], transformedList);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      countTokensConfigToMldev(fromConfig);
    }
    return toObject;
  }
  function countTokensParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      let transformedList = tContents(fromContents);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentToVertex(item);
        });
      }
      setValueByPath(toObject, ["contents"], transformedList);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      countTokensConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function countTokensResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromTotalTokens = getValueByPath(fromObject, ["totalTokens"]);
    if (fromTotalTokens != null) {
      setValueByPath(toObject, ["totalTokens"], fromTotalTokens);
    }
    const fromCachedContentTokenCount = getValueByPath(fromObject, [
      "cachedContentTokenCount"
    ]);
    if (fromCachedContentTokenCount != null) {
      setValueByPath(toObject, ["cachedContentTokenCount"], fromCachedContentTokenCount);
    }
    return toObject;
  }
  function countTokensResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromTotalTokens = getValueByPath(fromObject, ["totalTokens"]);
    if (fromTotalTokens != null) {
      setValueByPath(toObject, ["totalTokens"], fromTotalTokens);
    }
    return toObject;
  }
  function deleteModelParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "name"], tModel(apiClient, fromModel));
    }
    return toObject;
  }
  function deleteModelParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "name"], tModel(apiClient, fromModel));
    }
    return toObject;
  }
  function deleteModelResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    return toObject;
  }
  function deleteModelResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    return toObject;
  }
  function dynamicRetrievalConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromDynamicThreshold = getValueByPath(fromObject, [
      "dynamicThreshold"
    ]);
    if (fromDynamicThreshold != null) {
      setValueByPath(toObject, ["dynamicThreshold"], fromDynamicThreshold);
    }
    return toObject;
  }
  function dynamicRetrievalConfigToVertex(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromDynamicThreshold = getValueByPath(fromObject, [
      "dynamicThreshold"
    ]);
    if (fromDynamicThreshold != null) {
      setValueByPath(toObject, ["dynamicThreshold"], fromDynamicThreshold);
    }
    return toObject;
  }
  function editImageConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromOutputGcsUri = getValueByPath(fromObject, ["outputGcsUri"]);
    if (parentObject !== void 0 && fromOutputGcsUri != null) {
      setValueByPath(parentObject, ["parameters", "storageUri"], fromOutputGcsUri);
    }
    const fromNegativePrompt = getValueByPath(fromObject, [
      "negativePrompt"
    ]);
    if (parentObject !== void 0 && fromNegativePrompt != null) {
      setValueByPath(parentObject, ["parameters", "negativePrompt"], fromNegativePrompt);
    }
    const fromNumberOfImages = getValueByPath(fromObject, [
      "numberOfImages"
    ]);
    if (parentObject !== void 0 && fromNumberOfImages != null) {
      setValueByPath(parentObject, ["parameters", "sampleCount"], fromNumberOfImages);
    }
    const fromAspectRatio = getValueByPath(fromObject, ["aspectRatio"]);
    if (parentObject !== void 0 && fromAspectRatio != null) {
      setValueByPath(parentObject, ["parameters", "aspectRatio"], fromAspectRatio);
    }
    const fromGuidanceScale = getValueByPath(fromObject, [
      "guidanceScale"
    ]);
    if (parentObject !== void 0 && fromGuidanceScale != null) {
      setValueByPath(parentObject, ["parameters", "guidanceScale"], fromGuidanceScale);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (parentObject !== void 0 && fromSeed != null) {
      setValueByPath(parentObject, ["parameters", "seed"], fromSeed);
    }
    const fromSafetyFilterLevel = getValueByPath(fromObject, [
      "safetyFilterLevel"
    ]);
    if (parentObject !== void 0 && fromSafetyFilterLevel != null) {
      setValueByPath(parentObject, ["parameters", "safetySetting"], fromSafetyFilterLevel);
    }
    const fromPersonGeneration = getValueByPath(fromObject, [
      "personGeneration"
    ]);
    if (parentObject !== void 0 && fromPersonGeneration != null) {
      setValueByPath(parentObject, ["parameters", "personGeneration"], fromPersonGeneration);
    }
    const fromIncludeSafetyAttributes = getValueByPath(fromObject, [
      "includeSafetyAttributes"
    ]);
    if (parentObject !== void 0 && fromIncludeSafetyAttributes != null) {
      setValueByPath(parentObject, ["parameters", "includeSafetyAttributes"], fromIncludeSafetyAttributes);
    }
    const fromIncludeRaiReason = getValueByPath(fromObject, [
      "includeRaiReason"
    ]);
    if (parentObject !== void 0 && fromIncludeRaiReason != null) {
      setValueByPath(parentObject, ["parameters", "includeRaiReason"], fromIncludeRaiReason);
    }
    const fromLanguage = getValueByPath(fromObject, ["language"]);
    if (parentObject !== void 0 && fromLanguage != null) {
      setValueByPath(parentObject, ["parameters", "language"], fromLanguage);
    }
    const fromOutputMimeType = getValueByPath(fromObject, [
      "outputMimeType"
    ]);
    if (parentObject !== void 0 && fromOutputMimeType != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "mimeType"], fromOutputMimeType);
    }
    const fromOutputCompressionQuality = getValueByPath(fromObject, [
      "outputCompressionQuality"
    ]);
    if (parentObject !== void 0 && fromOutputCompressionQuality != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "compressionQuality"], fromOutputCompressionQuality);
    }
    const fromAddWatermark = getValueByPath(fromObject, ["addWatermark"]);
    if (parentObject !== void 0 && fromAddWatermark != null) {
      setValueByPath(parentObject, ["parameters", "addWatermark"], fromAddWatermark);
    }
    const fromEditMode = getValueByPath(fromObject, ["editMode"]);
    if (parentObject !== void 0 && fromEditMode != null) {
      setValueByPath(parentObject, ["parameters", "editMode"], fromEditMode);
    }
    const fromBaseSteps = getValueByPath(fromObject, ["baseSteps"]);
    if (parentObject !== void 0 && fromBaseSteps != null) {
      setValueByPath(parentObject, ["parameters", "editConfig", "baseSteps"], fromBaseSteps);
    }
    return toObject;
  }
  function editImageParametersInternalToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (fromPrompt != null) {
      setValueByPath(toObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromReferenceImages = getValueByPath(fromObject, [
      "referenceImages"
    ]);
    if (fromReferenceImages != null) {
      let transformedList = fromReferenceImages;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return referenceImageAPIInternalToVertex(item);
        });
      }
      setValueByPath(toObject, ["instances[0]", "referenceImages"], transformedList);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      editImageConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function editImageResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromGeneratedImages = getValueByPath(fromObject, [
      "predictions"
    ]);
    if (fromGeneratedImages != null) {
      let transformedList = fromGeneratedImages;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedImageFromVertex(item);
        });
      }
      setValueByPath(toObject, ["generatedImages"], transformedList);
    }
    return toObject;
  }
  function embedContentConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromTaskType = getValueByPath(fromObject, ["taskType"]);
    if (parentObject !== void 0 && fromTaskType != null) {
      setValueByPath(parentObject, ["requests[]", "taskType"], fromTaskType);
    }
    const fromTitle = getValueByPath(fromObject, ["title"]);
    if (parentObject !== void 0 && fromTitle != null) {
      setValueByPath(parentObject, ["requests[]", "title"], fromTitle);
    }
    const fromOutputDimensionality = getValueByPath(fromObject, [
      "outputDimensionality"
    ]);
    if (parentObject !== void 0 && fromOutputDimensionality != null) {
      setValueByPath(parentObject, ["requests[]", "outputDimensionality"], fromOutputDimensionality);
    }
    if (getValueByPath(fromObject, ["mimeType"]) !== void 0) {
      throw new Error("mimeType parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["autoTruncate"]) !== void 0) {
      throw new Error("autoTruncate parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function embedContentConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromTaskType = getValueByPath(fromObject, ["taskType"]);
    if (parentObject !== void 0 && fromTaskType != null) {
      setValueByPath(parentObject, ["instances[]", "task_type"], fromTaskType);
    }
    const fromTitle = getValueByPath(fromObject, ["title"]);
    if (parentObject !== void 0 && fromTitle != null) {
      setValueByPath(parentObject, ["instances[]", "title"], fromTitle);
    }
    const fromOutputDimensionality = getValueByPath(fromObject, [
      "outputDimensionality"
    ]);
    if (parentObject !== void 0 && fromOutputDimensionality != null) {
      setValueByPath(parentObject, ["parameters", "outputDimensionality"], fromOutputDimensionality);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (parentObject !== void 0 && fromMimeType != null) {
      setValueByPath(parentObject, ["instances[]", "mimeType"], fromMimeType);
    }
    const fromAutoTruncate = getValueByPath(fromObject, ["autoTruncate"]);
    if (parentObject !== void 0 && fromAutoTruncate != null) {
      setValueByPath(parentObject, ["parameters", "autoTruncate"], fromAutoTruncate);
    }
    return toObject;
  }
  function embedContentMetadataFromMldev() {
    const toObject = {};
    return toObject;
  }
  function embedContentMetadataFromVertex(fromObject) {
    const toObject = {};
    const fromBillableCharacterCount = getValueByPath(fromObject, [
      "billableCharacterCount"
    ]);
    if (fromBillableCharacterCount != null) {
      setValueByPath(toObject, ["billableCharacterCount"], fromBillableCharacterCount);
    }
    return toObject;
  }
  function embedContentParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      setValueByPath(toObject, ["requests[]", "content"], tContentsForEmbed(apiClient, fromContents));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      embedContentConfigToMldev(fromConfig, toObject);
    }
    const fromModelForEmbedContent = getValueByPath(fromObject, ["model"]);
    if (fromModelForEmbedContent !== void 0) {
      setValueByPath(toObject, ["requests[]", "model"], tModel(apiClient, fromModelForEmbedContent));
    }
    return toObject;
  }
  function embedContentParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      setValueByPath(toObject, ["instances[]", "content"], tContentsForEmbed(apiClient, fromContents));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      embedContentConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function embedContentResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromEmbeddings = getValueByPath(fromObject, ["embeddings"]);
    if (fromEmbeddings != null) {
      let transformedList = fromEmbeddings;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentEmbeddingFromMldev(item);
        });
      }
      setValueByPath(toObject, ["embeddings"], transformedList);
    }
    const fromMetadata = getValueByPath(fromObject, ["metadata"]);
    if (fromMetadata != null) {
      setValueByPath(toObject, ["metadata"], embedContentMetadataFromMldev());
    }
    return toObject;
  }
  function embedContentResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromEmbeddings = getValueByPath(fromObject, [
      "predictions[]",
      "embeddings"
    ]);
    if (fromEmbeddings != null) {
      let transformedList = fromEmbeddings;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentEmbeddingFromVertex(item);
        });
      }
      setValueByPath(toObject, ["embeddings"], transformedList);
    }
    const fromMetadata = getValueByPath(fromObject, ["metadata"]);
    if (fromMetadata != null) {
      setValueByPath(toObject, ["metadata"], embedContentMetadataFromVertex(fromMetadata));
    }
    return toObject;
  }
  function endpointFromVertex(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["endpoint"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDeployedModelId = getValueByPath(fromObject, [
      "deployedModelId"
    ]);
    if (fromDeployedModelId != null) {
      setValueByPath(toObject, ["deployedModelId"], fromDeployedModelId);
    }
    return toObject;
  }
  function enterpriseWebSearchToVertex(fromObject) {
    const toObject = {};
    const fromExcludeDomains = getValueByPath(fromObject, [
      "excludeDomains"
    ]);
    if (fromExcludeDomains != null) {
      setValueByPath(toObject, ["excludeDomains"], fromExcludeDomains);
    }
    return toObject;
  }
  function entityLabelFromVertex(fromObject) {
    const toObject = {};
    const fromLabel = getValueByPath(fromObject, ["label"]);
    if (fromLabel != null) {
      setValueByPath(toObject, ["label"], fromLabel);
    }
    const fromScore = getValueByPath(fromObject, ["score"]);
    if (fromScore != null) {
      setValueByPath(toObject, ["score"], fromScore);
    }
    return toObject;
  }
  function fileDataFromMldev(fromObject) {
    const toObject = {};
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function fileDataFromVertex(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function fileDataToMldev$1(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function fileDataToVertex(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function functionCallFromMldev(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallFromVertex(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallToMldev$1(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallToVertex(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallingConfigToMldev(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromAllowedFunctionNames = getValueByPath(fromObject, [
      "allowedFunctionNames"
    ]);
    if (fromAllowedFunctionNames != null) {
      setValueByPath(toObject, ["allowedFunctionNames"], fromAllowedFunctionNames);
    }
    return toObject;
  }
  function functionCallingConfigToVertex(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromAllowedFunctionNames = getValueByPath(fromObject, [
      "allowedFunctionNames"
    ]);
    if (fromAllowedFunctionNames != null) {
      setValueByPath(toObject, ["allowedFunctionNames"], fromAllowedFunctionNames);
    }
    return toObject;
  }
  function functionDeclarationToMldev$1(fromObject) {
    const toObject = {};
    const fromBehavior = getValueByPath(fromObject, ["behavior"]);
    if (fromBehavior != null) {
      setValueByPath(toObject, ["behavior"], fromBehavior);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromParameters = getValueByPath(fromObject, ["parameters"]);
    if (fromParameters != null) {
      setValueByPath(toObject, ["parameters"], fromParameters);
    }
    const fromParametersJsonSchema = getValueByPath(fromObject, [
      "parametersJsonSchema"
    ]);
    if (fromParametersJsonSchema != null) {
      setValueByPath(toObject, ["parametersJsonSchema"], fromParametersJsonSchema);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], fromResponse);
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    return toObject;
  }
  function functionDeclarationToVertex(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["behavior"]) !== void 0) {
      throw new Error("behavior parameter is not supported in Vertex AI.");
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromParameters = getValueByPath(fromObject, ["parameters"]);
    if (fromParameters != null) {
      setValueByPath(toObject, ["parameters"], fromParameters);
    }
    const fromParametersJsonSchema = getValueByPath(fromObject, [
      "parametersJsonSchema"
    ]);
    if (fromParametersJsonSchema != null) {
      setValueByPath(toObject, ["parametersJsonSchema"], fromParametersJsonSchema);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], fromResponse);
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    return toObject;
  }
  function generateContentConfigToMldev(apiClient, fromObject, parentObject) {
    const toObject = {};
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["systemInstruction"], contentToMldev$1(tContent(fromSystemInstruction)));
    }
    const fromTemperature = getValueByPath(fromObject, ["temperature"]);
    if (fromTemperature != null) {
      setValueByPath(toObject, ["temperature"], fromTemperature);
    }
    const fromTopP = getValueByPath(fromObject, ["topP"]);
    if (fromTopP != null) {
      setValueByPath(toObject, ["topP"], fromTopP);
    }
    const fromTopK = getValueByPath(fromObject, ["topK"]);
    if (fromTopK != null) {
      setValueByPath(toObject, ["topK"], fromTopK);
    }
    const fromCandidateCount = getValueByPath(fromObject, [
      "candidateCount"
    ]);
    if (fromCandidateCount != null) {
      setValueByPath(toObject, ["candidateCount"], fromCandidateCount);
    }
    const fromMaxOutputTokens = getValueByPath(fromObject, [
      "maxOutputTokens"
    ]);
    if (fromMaxOutputTokens != null) {
      setValueByPath(toObject, ["maxOutputTokens"], fromMaxOutputTokens);
    }
    const fromStopSequences = getValueByPath(fromObject, [
      "stopSequences"
    ]);
    if (fromStopSequences != null) {
      setValueByPath(toObject, ["stopSequences"], fromStopSequences);
    }
    const fromResponseLogprobs = getValueByPath(fromObject, [
      "responseLogprobs"
    ]);
    if (fromResponseLogprobs != null) {
      setValueByPath(toObject, ["responseLogprobs"], fromResponseLogprobs);
    }
    const fromLogprobs = getValueByPath(fromObject, ["logprobs"]);
    if (fromLogprobs != null) {
      setValueByPath(toObject, ["logprobs"], fromLogprobs);
    }
    const fromPresencePenalty = getValueByPath(fromObject, [
      "presencePenalty"
    ]);
    if (fromPresencePenalty != null) {
      setValueByPath(toObject, ["presencePenalty"], fromPresencePenalty);
    }
    const fromFrequencyPenalty = getValueByPath(fromObject, [
      "frequencyPenalty"
    ]);
    if (fromFrequencyPenalty != null) {
      setValueByPath(toObject, ["frequencyPenalty"], fromFrequencyPenalty);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (fromSeed != null) {
      setValueByPath(toObject, ["seed"], fromSeed);
    }
    const fromResponseMimeType = getValueByPath(fromObject, [
      "responseMimeType"
    ]);
    if (fromResponseMimeType != null) {
      setValueByPath(toObject, ["responseMimeType"], fromResponseMimeType);
    }
    const fromResponseSchema = getValueByPath(fromObject, [
      "responseSchema"
    ]);
    if (fromResponseSchema != null) {
      setValueByPath(toObject, ["responseSchema"], schemaToMldev(tSchema(fromResponseSchema)));
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    if (getValueByPath(fromObject, ["routingConfig"]) !== void 0) {
      throw new Error("routingConfig parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["modelSelectionConfig"]) !== void 0) {
      throw new Error("modelSelectionConfig parameter is not supported in Gemini API.");
    }
    const fromSafetySettings = getValueByPath(fromObject, [
      "safetySettings"
    ]);
    if (parentObject !== void 0 && fromSafetySettings != null) {
      let transformedList = fromSafetySettings;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return safetySettingToMldev(item);
        });
      }
      setValueByPath(parentObject, ["safetySettings"], transformedList);
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = tTools(fromTools);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToMldev$1(tTool(item));
        });
      }
      setValueByPath(parentObject, ["tools"], transformedList);
    }
    const fromToolConfig = getValueByPath(fromObject, ["toolConfig"]);
    if (parentObject !== void 0 && fromToolConfig != null) {
      setValueByPath(parentObject, ["toolConfig"], toolConfigToMldev(fromToolConfig));
    }
    if (getValueByPath(fromObject, ["labels"]) !== void 0) {
      throw new Error("labels parameter is not supported in Gemini API.");
    }
    const fromCachedContent = getValueByPath(fromObject, [
      "cachedContent"
    ]);
    if (parentObject !== void 0 && fromCachedContent != null) {
      setValueByPath(parentObject, ["cachedContent"], tCachedContentName(apiClient, fromCachedContent));
    }
    const fromResponseModalities = getValueByPath(fromObject, [
      "responseModalities"
    ]);
    if (fromResponseModalities != null) {
      setValueByPath(toObject, ["responseModalities"], fromResponseModalities);
    }
    const fromMediaResolution = getValueByPath(fromObject, [
      "mediaResolution"
    ]);
    if (fromMediaResolution != null) {
      setValueByPath(toObject, ["mediaResolution"], fromMediaResolution);
    }
    const fromSpeechConfig = getValueByPath(fromObject, ["speechConfig"]);
    if (fromSpeechConfig != null) {
      setValueByPath(toObject, ["speechConfig"], speechConfigToMldev$1(tSpeechConfig(fromSpeechConfig)));
    }
    if (getValueByPath(fromObject, ["audioTimestamp"]) !== void 0) {
      throw new Error("audioTimestamp parameter is not supported in Gemini API.");
    }
    const fromThinkingConfig = getValueByPath(fromObject, [
      "thinkingConfig"
    ]);
    if (fromThinkingConfig != null) {
      setValueByPath(toObject, ["thinkingConfig"], thinkingConfigToMldev(fromThinkingConfig));
    }
    return toObject;
  }
  function generateContentConfigToVertex(apiClient, fromObject, parentObject) {
    const toObject = {};
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["systemInstruction"], contentToVertex(tContent(fromSystemInstruction)));
    }
    const fromTemperature = getValueByPath(fromObject, ["temperature"]);
    if (fromTemperature != null) {
      setValueByPath(toObject, ["temperature"], fromTemperature);
    }
    const fromTopP = getValueByPath(fromObject, ["topP"]);
    if (fromTopP != null) {
      setValueByPath(toObject, ["topP"], fromTopP);
    }
    const fromTopK = getValueByPath(fromObject, ["topK"]);
    if (fromTopK != null) {
      setValueByPath(toObject, ["topK"], fromTopK);
    }
    const fromCandidateCount = getValueByPath(fromObject, [
      "candidateCount"
    ]);
    if (fromCandidateCount != null) {
      setValueByPath(toObject, ["candidateCount"], fromCandidateCount);
    }
    const fromMaxOutputTokens = getValueByPath(fromObject, [
      "maxOutputTokens"
    ]);
    if (fromMaxOutputTokens != null) {
      setValueByPath(toObject, ["maxOutputTokens"], fromMaxOutputTokens);
    }
    const fromStopSequences = getValueByPath(fromObject, [
      "stopSequences"
    ]);
    if (fromStopSequences != null) {
      setValueByPath(toObject, ["stopSequences"], fromStopSequences);
    }
    const fromResponseLogprobs = getValueByPath(fromObject, [
      "responseLogprobs"
    ]);
    if (fromResponseLogprobs != null) {
      setValueByPath(toObject, ["responseLogprobs"], fromResponseLogprobs);
    }
    const fromLogprobs = getValueByPath(fromObject, ["logprobs"]);
    if (fromLogprobs != null) {
      setValueByPath(toObject, ["logprobs"], fromLogprobs);
    }
    const fromPresencePenalty = getValueByPath(fromObject, [
      "presencePenalty"
    ]);
    if (fromPresencePenalty != null) {
      setValueByPath(toObject, ["presencePenalty"], fromPresencePenalty);
    }
    const fromFrequencyPenalty = getValueByPath(fromObject, [
      "frequencyPenalty"
    ]);
    if (fromFrequencyPenalty != null) {
      setValueByPath(toObject, ["frequencyPenalty"], fromFrequencyPenalty);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (fromSeed != null) {
      setValueByPath(toObject, ["seed"], fromSeed);
    }
    const fromResponseMimeType = getValueByPath(fromObject, [
      "responseMimeType"
    ]);
    if (fromResponseMimeType != null) {
      setValueByPath(toObject, ["responseMimeType"], fromResponseMimeType);
    }
    const fromResponseSchema = getValueByPath(fromObject, [
      "responseSchema"
    ]);
    if (fromResponseSchema != null) {
      setValueByPath(toObject, ["responseSchema"], schemaToVertex(tSchema(fromResponseSchema)));
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    const fromRoutingConfig = getValueByPath(fromObject, [
      "routingConfig"
    ]);
    if (fromRoutingConfig != null) {
      setValueByPath(toObject, ["routingConfig"], fromRoutingConfig);
    }
    const fromModelSelectionConfig = getValueByPath(fromObject, [
      "modelSelectionConfig"
    ]);
    if (fromModelSelectionConfig != null) {
      setValueByPath(toObject, ["modelConfig"], modelSelectionConfigToVertex(fromModelSelectionConfig));
    }
    const fromSafetySettings = getValueByPath(fromObject, [
      "safetySettings"
    ]);
    if (parentObject !== void 0 && fromSafetySettings != null) {
      let transformedList = fromSafetySettings;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return safetySettingToVertex(item);
        });
      }
      setValueByPath(parentObject, ["safetySettings"], transformedList);
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = tTools(fromTools);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToVertex(tTool(item));
        });
      }
      setValueByPath(parentObject, ["tools"], transformedList);
    }
    const fromToolConfig = getValueByPath(fromObject, ["toolConfig"]);
    if (parentObject !== void 0 && fromToolConfig != null) {
      setValueByPath(parentObject, ["toolConfig"], toolConfigToVertex(fromToolConfig));
    }
    const fromLabels = getValueByPath(fromObject, ["labels"]);
    if (parentObject !== void 0 && fromLabels != null) {
      setValueByPath(parentObject, ["labels"], fromLabels);
    }
    const fromCachedContent = getValueByPath(fromObject, [
      "cachedContent"
    ]);
    if (parentObject !== void 0 && fromCachedContent != null) {
      setValueByPath(parentObject, ["cachedContent"], tCachedContentName(apiClient, fromCachedContent));
    }
    const fromResponseModalities = getValueByPath(fromObject, [
      "responseModalities"
    ]);
    if (fromResponseModalities != null) {
      setValueByPath(toObject, ["responseModalities"], fromResponseModalities);
    }
    const fromMediaResolution = getValueByPath(fromObject, [
      "mediaResolution"
    ]);
    if (fromMediaResolution != null) {
      setValueByPath(toObject, ["mediaResolution"], fromMediaResolution);
    }
    const fromSpeechConfig = getValueByPath(fromObject, ["speechConfig"]);
    if (fromSpeechConfig != null) {
      setValueByPath(toObject, ["speechConfig"], speechConfigToVertex(tSpeechConfig(fromSpeechConfig)));
    }
    const fromAudioTimestamp = getValueByPath(fromObject, [
      "audioTimestamp"
    ]);
    if (fromAudioTimestamp != null) {
      setValueByPath(toObject, ["audioTimestamp"], fromAudioTimestamp);
    }
    const fromThinkingConfig = getValueByPath(fromObject, [
      "thinkingConfig"
    ]);
    if (fromThinkingConfig != null) {
      setValueByPath(toObject, ["thinkingConfig"], thinkingConfigToVertex(fromThinkingConfig));
    }
    return toObject;
  }
  function generateContentParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      let transformedList = tContents(fromContents);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentToMldev$1(item);
        });
      }
      setValueByPath(toObject, ["contents"], transformedList);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      setValueByPath(toObject, ["generationConfig"], generateContentConfigToMldev(apiClient, fromConfig, toObject));
    }
    return toObject;
  }
  function generateContentParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      let transformedList = tContents(fromContents);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentToVertex(item);
        });
      }
      setValueByPath(toObject, ["contents"], transformedList);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      setValueByPath(toObject, ["generationConfig"], generateContentConfigToVertex(apiClient, fromConfig, toObject));
    }
    return toObject;
  }
  function generateContentResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromCandidates = getValueByPath(fromObject, ["candidates"]);
    if (fromCandidates != null) {
      let transformedList = fromCandidates;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return candidateFromMldev(item);
        });
      }
      setValueByPath(toObject, ["candidates"], transformedList);
    }
    const fromModelVersion = getValueByPath(fromObject, ["modelVersion"]);
    if (fromModelVersion != null) {
      setValueByPath(toObject, ["modelVersion"], fromModelVersion);
    }
    const fromPromptFeedback = getValueByPath(fromObject, [
      "promptFeedback"
    ]);
    if (fromPromptFeedback != null) {
      setValueByPath(toObject, ["promptFeedback"], fromPromptFeedback);
    }
    const fromResponseId = getValueByPath(fromObject, ["responseId"]);
    if (fromResponseId != null) {
      setValueByPath(toObject, ["responseId"], fromResponseId);
    }
    const fromUsageMetadata = getValueByPath(fromObject, [
      "usageMetadata"
    ]);
    if (fromUsageMetadata != null) {
      setValueByPath(toObject, ["usageMetadata"], fromUsageMetadata);
    }
    return toObject;
  }
  function generateContentResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromCandidates = getValueByPath(fromObject, ["candidates"]);
    if (fromCandidates != null) {
      let transformedList = fromCandidates;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return candidateFromVertex(item);
        });
      }
      setValueByPath(toObject, ["candidates"], transformedList);
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromModelVersion = getValueByPath(fromObject, ["modelVersion"]);
    if (fromModelVersion != null) {
      setValueByPath(toObject, ["modelVersion"], fromModelVersion);
    }
    const fromPromptFeedback = getValueByPath(fromObject, [
      "promptFeedback"
    ]);
    if (fromPromptFeedback != null) {
      setValueByPath(toObject, ["promptFeedback"], fromPromptFeedback);
    }
    const fromResponseId = getValueByPath(fromObject, ["responseId"]);
    if (fromResponseId != null) {
      setValueByPath(toObject, ["responseId"], fromResponseId);
    }
    const fromUsageMetadata = getValueByPath(fromObject, [
      "usageMetadata"
    ]);
    if (fromUsageMetadata != null) {
      setValueByPath(toObject, ["usageMetadata"], fromUsageMetadata);
    }
    return toObject;
  }
  function generateImagesConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["outputGcsUri"]) !== void 0) {
      throw new Error("outputGcsUri parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["negativePrompt"]) !== void 0) {
      throw new Error("negativePrompt parameter is not supported in Gemini API.");
    }
    const fromNumberOfImages = getValueByPath(fromObject, [
      "numberOfImages"
    ]);
    if (parentObject !== void 0 && fromNumberOfImages != null) {
      setValueByPath(parentObject, ["parameters", "sampleCount"], fromNumberOfImages);
    }
    const fromAspectRatio = getValueByPath(fromObject, ["aspectRatio"]);
    if (parentObject !== void 0 && fromAspectRatio != null) {
      setValueByPath(parentObject, ["parameters", "aspectRatio"], fromAspectRatio);
    }
    const fromGuidanceScale = getValueByPath(fromObject, [
      "guidanceScale"
    ]);
    if (parentObject !== void 0 && fromGuidanceScale != null) {
      setValueByPath(parentObject, ["parameters", "guidanceScale"], fromGuidanceScale);
    }
    if (getValueByPath(fromObject, ["seed"]) !== void 0) {
      throw new Error("seed parameter is not supported in Gemini API.");
    }
    const fromSafetyFilterLevel = getValueByPath(fromObject, [
      "safetyFilterLevel"
    ]);
    if (parentObject !== void 0 && fromSafetyFilterLevel != null) {
      setValueByPath(parentObject, ["parameters", "safetySetting"], fromSafetyFilterLevel);
    }
    const fromPersonGeneration = getValueByPath(fromObject, [
      "personGeneration"
    ]);
    if (parentObject !== void 0 && fromPersonGeneration != null) {
      setValueByPath(parentObject, ["parameters", "personGeneration"], fromPersonGeneration);
    }
    const fromIncludeSafetyAttributes = getValueByPath(fromObject, [
      "includeSafetyAttributes"
    ]);
    if (parentObject !== void 0 && fromIncludeSafetyAttributes != null) {
      setValueByPath(parentObject, ["parameters", "includeSafetyAttributes"], fromIncludeSafetyAttributes);
    }
    const fromIncludeRaiReason = getValueByPath(fromObject, [
      "includeRaiReason"
    ]);
    if (parentObject !== void 0 && fromIncludeRaiReason != null) {
      setValueByPath(parentObject, ["parameters", "includeRaiReason"], fromIncludeRaiReason);
    }
    const fromLanguage = getValueByPath(fromObject, ["language"]);
    if (parentObject !== void 0 && fromLanguage != null) {
      setValueByPath(parentObject, ["parameters", "language"], fromLanguage);
    }
    const fromOutputMimeType = getValueByPath(fromObject, [
      "outputMimeType"
    ]);
    if (parentObject !== void 0 && fromOutputMimeType != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "mimeType"], fromOutputMimeType);
    }
    const fromOutputCompressionQuality = getValueByPath(fromObject, [
      "outputCompressionQuality"
    ]);
    if (parentObject !== void 0 && fromOutputCompressionQuality != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "compressionQuality"], fromOutputCompressionQuality);
    }
    if (getValueByPath(fromObject, ["addWatermark"]) !== void 0) {
      throw new Error("addWatermark parameter is not supported in Gemini API.");
    }
    const fromImageSize = getValueByPath(fromObject, ["imageSize"]);
    if (parentObject !== void 0 && fromImageSize != null) {
      setValueByPath(parentObject, ["parameters", "sampleImageSize"], fromImageSize);
    }
    if (getValueByPath(fromObject, ["enhancePrompt"]) !== void 0) {
      throw new Error("enhancePrompt parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function generateImagesConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromOutputGcsUri = getValueByPath(fromObject, ["outputGcsUri"]);
    if (parentObject !== void 0 && fromOutputGcsUri != null) {
      setValueByPath(parentObject, ["parameters", "storageUri"], fromOutputGcsUri);
    }
    const fromNegativePrompt = getValueByPath(fromObject, [
      "negativePrompt"
    ]);
    if (parentObject !== void 0 && fromNegativePrompt != null) {
      setValueByPath(parentObject, ["parameters", "negativePrompt"], fromNegativePrompt);
    }
    const fromNumberOfImages = getValueByPath(fromObject, [
      "numberOfImages"
    ]);
    if (parentObject !== void 0 && fromNumberOfImages != null) {
      setValueByPath(parentObject, ["parameters", "sampleCount"], fromNumberOfImages);
    }
    const fromAspectRatio = getValueByPath(fromObject, ["aspectRatio"]);
    if (parentObject !== void 0 && fromAspectRatio != null) {
      setValueByPath(parentObject, ["parameters", "aspectRatio"], fromAspectRatio);
    }
    const fromGuidanceScale = getValueByPath(fromObject, [
      "guidanceScale"
    ]);
    if (parentObject !== void 0 && fromGuidanceScale != null) {
      setValueByPath(parentObject, ["parameters", "guidanceScale"], fromGuidanceScale);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (parentObject !== void 0 && fromSeed != null) {
      setValueByPath(parentObject, ["parameters", "seed"], fromSeed);
    }
    const fromSafetyFilterLevel = getValueByPath(fromObject, [
      "safetyFilterLevel"
    ]);
    if (parentObject !== void 0 && fromSafetyFilterLevel != null) {
      setValueByPath(parentObject, ["parameters", "safetySetting"], fromSafetyFilterLevel);
    }
    const fromPersonGeneration = getValueByPath(fromObject, [
      "personGeneration"
    ]);
    if (parentObject !== void 0 && fromPersonGeneration != null) {
      setValueByPath(parentObject, ["parameters", "personGeneration"], fromPersonGeneration);
    }
    const fromIncludeSafetyAttributes = getValueByPath(fromObject, [
      "includeSafetyAttributes"
    ]);
    if (parentObject !== void 0 && fromIncludeSafetyAttributes != null) {
      setValueByPath(parentObject, ["parameters", "includeSafetyAttributes"], fromIncludeSafetyAttributes);
    }
    const fromIncludeRaiReason = getValueByPath(fromObject, [
      "includeRaiReason"
    ]);
    if (parentObject !== void 0 && fromIncludeRaiReason != null) {
      setValueByPath(parentObject, ["parameters", "includeRaiReason"], fromIncludeRaiReason);
    }
    const fromLanguage = getValueByPath(fromObject, ["language"]);
    if (parentObject !== void 0 && fromLanguage != null) {
      setValueByPath(parentObject, ["parameters", "language"], fromLanguage);
    }
    const fromOutputMimeType = getValueByPath(fromObject, [
      "outputMimeType"
    ]);
    if (parentObject !== void 0 && fromOutputMimeType != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "mimeType"], fromOutputMimeType);
    }
    const fromOutputCompressionQuality = getValueByPath(fromObject, [
      "outputCompressionQuality"
    ]);
    if (parentObject !== void 0 && fromOutputCompressionQuality != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "compressionQuality"], fromOutputCompressionQuality);
    }
    const fromAddWatermark = getValueByPath(fromObject, ["addWatermark"]);
    if (parentObject !== void 0 && fromAddWatermark != null) {
      setValueByPath(parentObject, ["parameters", "addWatermark"], fromAddWatermark);
    }
    const fromImageSize = getValueByPath(fromObject, ["imageSize"]);
    if (parentObject !== void 0 && fromImageSize != null) {
      setValueByPath(parentObject, ["parameters", "sampleImageSize"], fromImageSize);
    }
    const fromEnhancePrompt = getValueByPath(fromObject, [
      "enhancePrompt"
    ]);
    if (parentObject !== void 0 && fromEnhancePrompt != null) {
      setValueByPath(parentObject, ["parameters", "enhancePrompt"], fromEnhancePrompt);
    }
    return toObject;
  }
  function generateImagesParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (fromPrompt != null) {
      setValueByPath(toObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      generateImagesConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function generateImagesParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (fromPrompt != null) {
      setValueByPath(toObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      generateImagesConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function generateImagesResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromGeneratedImages = getValueByPath(fromObject, [
      "predictions"
    ]);
    if (fromGeneratedImages != null) {
      let transformedList = fromGeneratedImages;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedImageFromMldev(item);
        });
      }
      setValueByPath(toObject, ["generatedImages"], transformedList);
    }
    const fromPositivePromptSafetyAttributes = getValueByPath(fromObject, [
      "positivePromptSafetyAttributes"
    ]);
    if (fromPositivePromptSafetyAttributes != null) {
      setValueByPath(toObject, ["positivePromptSafetyAttributes"], safetyAttributesFromMldev(fromPositivePromptSafetyAttributes));
    }
    return toObject;
  }
  function generateImagesResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromGeneratedImages = getValueByPath(fromObject, [
      "predictions"
    ]);
    if (fromGeneratedImages != null) {
      let transformedList = fromGeneratedImages;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedImageFromVertex(item);
        });
      }
      setValueByPath(toObject, ["generatedImages"], transformedList);
    }
    const fromPositivePromptSafetyAttributes = getValueByPath(fromObject, [
      "positivePromptSafetyAttributes"
    ]);
    if (fromPositivePromptSafetyAttributes != null) {
      setValueByPath(toObject, ["positivePromptSafetyAttributes"], safetyAttributesFromVertex(fromPositivePromptSafetyAttributes));
    }
    return toObject;
  }
  function generateVideosConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromNumberOfVideos = getValueByPath(fromObject, [
      "numberOfVideos"
    ]);
    if (parentObject !== void 0 && fromNumberOfVideos != null) {
      setValueByPath(parentObject, ["parameters", "sampleCount"], fromNumberOfVideos);
    }
    if (getValueByPath(fromObject, ["outputGcsUri"]) !== void 0) {
      throw new Error("outputGcsUri parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["fps"]) !== void 0) {
      throw new Error("fps parameter is not supported in Gemini API.");
    }
    const fromDurationSeconds = getValueByPath(fromObject, [
      "durationSeconds"
    ]);
    if (parentObject !== void 0 && fromDurationSeconds != null) {
      setValueByPath(parentObject, ["parameters", "durationSeconds"], fromDurationSeconds);
    }
    if (getValueByPath(fromObject, ["seed"]) !== void 0) {
      throw new Error("seed parameter is not supported in Gemini API.");
    }
    const fromAspectRatio = getValueByPath(fromObject, ["aspectRatio"]);
    if (parentObject !== void 0 && fromAspectRatio != null) {
      setValueByPath(parentObject, ["parameters", "aspectRatio"], fromAspectRatio);
    }
    const fromResolution = getValueByPath(fromObject, ["resolution"]);
    if (parentObject !== void 0 && fromResolution != null) {
      setValueByPath(parentObject, ["parameters", "resolution"], fromResolution);
    }
    const fromPersonGeneration = getValueByPath(fromObject, [
      "personGeneration"
    ]);
    if (parentObject !== void 0 && fromPersonGeneration != null) {
      setValueByPath(parentObject, ["parameters", "personGeneration"], fromPersonGeneration);
    }
    if (getValueByPath(fromObject, ["pubsubTopic"]) !== void 0) {
      throw new Error("pubsubTopic parameter is not supported in Gemini API.");
    }
    const fromNegativePrompt = getValueByPath(fromObject, [
      "negativePrompt"
    ]);
    if (parentObject !== void 0 && fromNegativePrompt != null) {
      setValueByPath(parentObject, ["parameters", "negativePrompt"], fromNegativePrompt);
    }
    const fromEnhancePrompt = getValueByPath(fromObject, [
      "enhancePrompt"
    ]);
    if (parentObject !== void 0 && fromEnhancePrompt != null) {
      setValueByPath(parentObject, ["parameters", "enhancePrompt"], fromEnhancePrompt);
    }
    if (getValueByPath(fromObject, ["generateAudio"]) !== void 0) {
      throw new Error("generateAudio parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["lastFrame"]) !== void 0) {
      throw new Error("lastFrame parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["referenceImages"]) !== void 0) {
      throw new Error("referenceImages parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["mask"]) !== void 0) {
      throw new Error("mask parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["compressionQuality"]) !== void 0) {
      throw new Error("compressionQuality parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function generateVideosConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromNumberOfVideos = getValueByPath(fromObject, [
      "numberOfVideos"
    ]);
    if (parentObject !== void 0 && fromNumberOfVideos != null) {
      setValueByPath(parentObject, ["parameters", "sampleCount"], fromNumberOfVideos);
    }
    const fromOutputGcsUri = getValueByPath(fromObject, ["outputGcsUri"]);
    if (parentObject !== void 0 && fromOutputGcsUri != null) {
      setValueByPath(parentObject, ["parameters", "storageUri"], fromOutputGcsUri);
    }
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (parentObject !== void 0 && fromFps != null) {
      setValueByPath(parentObject, ["parameters", "fps"], fromFps);
    }
    const fromDurationSeconds = getValueByPath(fromObject, [
      "durationSeconds"
    ]);
    if (parentObject !== void 0 && fromDurationSeconds != null) {
      setValueByPath(parentObject, ["parameters", "durationSeconds"], fromDurationSeconds);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (parentObject !== void 0 && fromSeed != null) {
      setValueByPath(parentObject, ["parameters", "seed"], fromSeed);
    }
    const fromAspectRatio = getValueByPath(fromObject, ["aspectRatio"]);
    if (parentObject !== void 0 && fromAspectRatio != null) {
      setValueByPath(parentObject, ["parameters", "aspectRatio"], fromAspectRatio);
    }
    const fromResolution = getValueByPath(fromObject, ["resolution"]);
    if (parentObject !== void 0 && fromResolution != null) {
      setValueByPath(parentObject, ["parameters", "resolution"], fromResolution);
    }
    const fromPersonGeneration = getValueByPath(fromObject, [
      "personGeneration"
    ]);
    if (parentObject !== void 0 && fromPersonGeneration != null) {
      setValueByPath(parentObject, ["parameters", "personGeneration"], fromPersonGeneration);
    }
    const fromPubsubTopic = getValueByPath(fromObject, ["pubsubTopic"]);
    if (parentObject !== void 0 && fromPubsubTopic != null) {
      setValueByPath(parentObject, ["parameters", "pubsubTopic"], fromPubsubTopic);
    }
    const fromNegativePrompt = getValueByPath(fromObject, [
      "negativePrompt"
    ]);
    if (parentObject !== void 0 && fromNegativePrompt != null) {
      setValueByPath(parentObject, ["parameters", "negativePrompt"], fromNegativePrompt);
    }
    const fromEnhancePrompt = getValueByPath(fromObject, [
      "enhancePrompt"
    ]);
    if (parentObject !== void 0 && fromEnhancePrompt != null) {
      setValueByPath(parentObject, ["parameters", "enhancePrompt"], fromEnhancePrompt);
    }
    const fromGenerateAudio = getValueByPath(fromObject, [
      "generateAudio"
    ]);
    if (parentObject !== void 0 && fromGenerateAudio != null) {
      setValueByPath(parentObject, ["parameters", "generateAudio"], fromGenerateAudio);
    }
    const fromLastFrame = getValueByPath(fromObject, ["lastFrame"]);
    if (parentObject !== void 0 && fromLastFrame != null) {
      setValueByPath(parentObject, ["instances[0]", "lastFrame"], imageToVertex(fromLastFrame));
    }
    const fromReferenceImages = getValueByPath(fromObject, [
      "referenceImages"
    ]);
    if (parentObject !== void 0 && fromReferenceImages != null) {
      let transformedList = fromReferenceImages;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return videoGenerationReferenceImageToVertex(item);
        });
      }
      setValueByPath(parentObject, ["instances[0]", "referenceImages"], transformedList);
    }
    const fromMask = getValueByPath(fromObject, ["mask"]);
    if (parentObject !== void 0 && fromMask != null) {
      setValueByPath(parentObject, ["instances[0]", "mask"], videoGenerationMaskToVertex(fromMask));
    }
    const fromCompressionQuality = getValueByPath(fromObject, [
      "compressionQuality"
    ]);
    if (parentObject !== void 0 && fromCompressionQuality != null) {
      setValueByPath(parentObject, ["parameters", "compressionQuality"], fromCompressionQuality);
    }
    return toObject;
  }
  function generateVideosOperationFromMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromMetadata = getValueByPath(fromObject, ["metadata"]);
    if (fromMetadata != null) {
      setValueByPath(toObject, ["metadata"], fromMetadata);
    }
    const fromDone = getValueByPath(fromObject, ["done"]);
    if (fromDone != null) {
      setValueByPath(toObject, ["done"], fromDone);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], fromError);
    }
    const fromResponse = getValueByPath(fromObject, [
      "response",
      "generateVideoResponse"
    ]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], generateVideosResponseFromMldev(fromResponse));
    }
    return toObject;
  }
  function generateVideosOperationFromVertex(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromMetadata = getValueByPath(fromObject, ["metadata"]);
    if (fromMetadata != null) {
      setValueByPath(toObject, ["metadata"], fromMetadata);
    }
    const fromDone = getValueByPath(fromObject, ["done"]);
    if (fromDone != null) {
      setValueByPath(toObject, ["done"], fromDone);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], fromError);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], generateVideosResponseFromVertex(fromResponse));
    }
    return toObject;
  }
  function generateVideosParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (fromPrompt != null) {
      setValueByPath(toObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (fromImage != null) {
      setValueByPath(toObject, ["instances[0]", "image"], imageToMldev(fromImage));
    }
    if (getValueByPath(fromObject, ["video"]) !== void 0) {
      throw new Error("video parameter is not supported in Gemini API.");
    }
    const fromSource = getValueByPath(fromObject, ["source"]);
    if (fromSource != null) {
      generateVideosSourceToMldev(fromSource, toObject);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      generateVideosConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function generateVideosParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (fromPrompt != null) {
      setValueByPath(toObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (fromImage != null) {
      setValueByPath(toObject, ["instances[0]", "image"], imageToVertex(fromImage));
    }
    const fromVideo = getValueByPath(fromObject, ["video"]);
    if (fromVideo != null) {
      setValueByPath(toObject, ["instances[0]", "video"], videoToVertex(fromVideo));
    }
    const fromSource = getValueByPath(fromObject, ["source"]);
    if (fromSource != null) {
      generateVideosSourceToVertex(fromSource, toObject);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      generateVideosConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function generateVideosResponseFromMldev(fromObject) {
    const toObject = {};
    const fromGeneratedVideos = getValueByPath(fromObject, [
      "generatedSamples"
    ]);
    if (fromGeneratedVideos != null) {
      let transformedList = fromGeneratedVideos;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedVideoFromMldev(item);
        });
      }
      setValueByPath(toObject, ["generatedVideos"], transformedList);
    }
    const fromRaiMediaFilteredCount = getValueByPath(fromObject, [
      "raiMediaFilteredCount"
    ]);
    if (fromRaiMediaFilteredCount != null) {
      setValueByPath(toObject, ["raiMediaFilteredCount"], fromRaiMediaFilteredCount);
    }
    const fromRaiMediaFilteredReasons = getValueByPath(fromObject, [
      "raiMediaFilteredReasons"
    ]);
    if (fromRaiMediaFilteredReasons != null) {
      setValueByPath(toObject, ["raiMediaFilteredReasons"], fromRaiMediaFilteredReasons);
    }
    return toObject;
  }
  function generateVideosResponseFromVertex(fromObject) {
    const toObject = {};
    const fromGeneratedVideos = getValueByPath(fromObject, ["videos"]);
    if (fromGeneratedVideos != null) {
      let transformedList = fromGeneratedVideos;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedVideoFromVertex(item);
        });
      }
      setValueByPath(toObject, ["generatedVideos"], transformedList);
    }
    const fromRaiMediaFilteredCount = getValueByPath(fromObject, [
      "raiMediaFilteredCount"
    ]);
    if (fromRaiMediaFilteredCount != null) {
      setValueByPath(toObject, ["raiMediaFilteredCount"], fromRaiMediaFilteredCount);
    }
    const fromRaiMediaFilteredReasons = getValueByPath(fromObject, [
      "raiMediaFilteredReasons"
    ]);
    if (fromRaiMediaFilteredReasons != null) {
      setValueByPath(toObject, ["raiMediaFilteredReasons"], fromRaiMediaFilteredReasons);
    }
    return toObject;
  }
  function generateVideosSourceToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (parentObject !== void 0 && fromPrompt != null) {
      setValueByPath(parentObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (parentObject !== void 0 && fromImage != null) {
      setValueByPath(parentObject, ["instances[0]", "image"], imageToMldev(fromImage));
    }
    if (getValueByPath(fromObject, ["video"]) !== void 0) {
      throw new Error("video parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function generateVideosSourceToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (parentObject !== void 0 && fromPrompt != null) {
      setValueByPath(parentObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (parentObject !== void 0 && fromImage != null) {
      setValueByPath(parentObject, ["instances[0]", "image"], imageToVertex(fromImage));
    }
    const fromVideo = getValueByPath(fromObject, ["video"]);
    if (parentObject !== void 0 && fromVideo != null) {
      setValueByPath(parentObject, ["instances[0]", "video"], videoToVertex(fromVideo));
    }
    return toObject;
  }
  function generatedImageFromMldev(fromObject) {
    const toObject = {};
    const fromImage = getValueByPath(fromObject, ["_self"]);
    if (fromImage != null) {
      setValueByPath(toObject, ["image"], imageFromMldev(fromImage));
    }
    const fromRaiFilteredReason = getValueByPath(fromObject, [
      "raiFilteredReason"
    ]);
    if (fromRaiFilteredReason != null) {
      setValueByPath(toObject, ["raiFilteredReason"], fromRaiFilteredReason);
    }
    const fromSafetyAttributes = getValueByPath(fromObject, ["_self"]);
    if (fromSafetyAttributes != null) {
      setValueByPath(toObject, ["safetyAttributes"], safetyAttributesFromMldev(fromSafetyAttributes));
    }
    return toObject;
  }
  function generatedImageFromVertex(fromObject) {
    const toObject = {};
    const fromImage = getValueByPath(fromObject, ["_self"]);
    if (fromImage != null) {
      setValueByPath(toObject, ["image"], imageFromVertex(fromImage));
    }
    const fromRaiFilteredReason = getValueByPath(fromObject, [
      "raiFilteredReason"
    ]);
    if (fromRaiFilteredReason != null) {
      setValueByPath(toObject, ["raiFilteredReason"], fromRaiFilteredReason);
    }
    const fromSafetyAttributes = getValueByPath(fromObject, ["_self"]);
    if (fromSafetyAttributes != null) {
      setValueByPath(toObject, ["safetyAttributes"], safetyAttributesFromVertex(fromSafetyAttributes));
    }
    const fromEnhancedPrompt = getValueByPath(fromObject, ["prompt"]);
    if (fromEnhancedPrompt != null) {
      setValueByPath(toObject, ["enhancedPrompt"], fromEnhancedPrompt);
    }
    return toObject;
  }
  function generatedImageMaskFromVertex(fromObject) {
    const toObject = {};
    const fromMask = getValueByPath(fromObject, ["_self"]);
    if (fromMask != null) {
      setValueByPath(toObject, ["mask"], imageFromVertex(fromMask));
    }
    const fromLabels = getValueByPath(fromObject, ["labels"]);
    if (fromLabels != null) {
      let transformedList = fromLabels;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return entityLabelFromVertex(item);
        });
      }
      setValueByPath(toObject, ["labels"], transformedList);
    }
    return toObject;
  }
  function generatedVideoFromMldev(fromObject) {
    const toObject = {};
    const fromVideo = getValueByPath(fromObject, ["_self"]);
    if (fromVideo != null) {
      setValueByPath(toObject, ["video"], videoFromMldev(fromVideo));
    }
    return toObject;
  }
  function generatedVideoFromVertex(fromObject) {
    const toObject = {};
    const fromVideo = getValueByPath(fromObject, ["_self"]);
    if (fromVideo != null) {
      setValueByPath(toObject, ["video"], videoFromVertex(fromVideo));
    }
    return toObject;
  }
  function getModelParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "name"], tModel(apiClient, fromModel));
    }
    return toObject;
  }
  function getModelParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "name"], tModel(apiClient, fromModel));
    }
    return toObject;
  }
  function googleMapsToVertex(fromObject) {
    const toObject = {};
    const fromAuthConfig = getValueByPath(fromObject, ["authConfig"]);
    if (fromAuthConfig != null) {
      setValueByPath(toObject, ["authConfig"], authConfigToVertex(fromAuthConfig));
    }
    return toObject;
  }
  function googleSearchRetrievalToMldev$1(fromObject) {
    const toObject = {};
    const fromDynamicRetrievalConfig = getValueByPath(fromObject, [
      "dynamicRetrievalConfig"
    ]);
    if (fromDynamicRetrievalConfig != null) {
      setValueByPath(toObject, ["dynamicRetrievalConfig"], dynamicRetrievalConfigToMldev$1(fromDynamicRetrievalConfig));
    }
    return toObject;
  }
  function googleSearchRetrievalToVertex(fromObject) {
    const toObject = {};
    const fromDynamicRetrievalConfig = getValueByPath(fromObject, [
      "dynamicRetrievalConfig"
    ]);
    if (fromDynamicRetrievalConfig != null) {
      setValueByPath(toObject, ["dynamicRetrievalConfig"], dynamicRetrievalConfigToVertex(fromDynamicRetrievalConfig));
    }
    return toObject;
  }
  function googleSearchToMldev$1(fromObject) {
    const toObject = {};
    const fromTimeRangeFilter = getValueByPath(fromObject, [
      "timeRangeFilter"
    ]);
    if (fromTimeRangeFilter != null) {
      setValueByPath(toObject, ["timeRangeFilter"], intervalToMldev$1(fromTimeRangeFilter));
    }
    if (getValueByPath(fromObject, ["excludeDomains"]) !== void 0) {
      throw new Error("excludeDomains parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function googleSearchToVertex(fromObject) {
    const toObject = {};
    const fromTimeRangeFilter = getValueByPath(fromObject, [
      "timeRangeFilter"
    ]);
    if (fromTimeRangeFilter != null) {
      setValueByPath(toObject, ["timeRangeFilter"], intervalToVertex(fromTimeRangeFilter));
    }
    const fromExcludeDomains = getValueByPath(fromObject, [
      "excludeDomains"
    ]);
    if (fromExcludeDomains != null) {
      setValueByPath(toObject, ["excludeDomains"], fromExcludeDomains);
    }
    return toObject;
  }
  function imageFromMldev(fromObject) {
    const toObject = {};
    const fromImageBytes = getValueByPath(fromObject, [
      "bytesBase64Encoded"
    ]);
    if (fromImageBytes != null) {
      setValueByPath(toObject, ["imageBytes"], tBytes(fromImageBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function imageFromVertex(fromObject) {
    const toObject = {};
    const fromGcsUri = getValueByPath(fromObject, ["gcsUri"]);
    if (fromGcsUri != null) {
      setValueByPath(toObject, ["gcsUri"], fromGcsUri);
    }
    const fromImageBytes = getValueByPath(fromObject, [
      "bytesBase64Encoded"
    ]);
    if (fromImageBytes != null) {
      setValueByPath(toObject, ["imageBytes"], tBytes(fromImageBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function imageToMldev(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["gcsUri"]) !== void 0) {
      throw new Error("gcsUri parameter is not supported in Gemini API.");
    }
    const fromImageBytes = getValueByPath(fromObject, ["imageBytes"]);
    if (fromImageBytes != null) {
      setValueByPath(toObject, ["bytesBase64Encoded"], tBytes(fromImageBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function imageToVertex(fromObject) {
    const toObject = {};
    const fromGcsUri = getValueByPath(fromObject, ["gcsUri"]);
    if (fromGcsUri != null) {
      setValueByPath(toObject, ["gcsUri"], fromGcsUri);
    }
    const fromImageBytes = getValueByPath(fromObject, ["imageBytes"]);
    if (fromImageBytes != null) {
      setValueByPath(toObject, ["bytesBase64Encoded"], tBytes(fromImageBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function intervalToMldev$1(fromObject) {
    const toObject = {};
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    return toObject;
  }
  function intervalToVertex(fromObject) {
    const toObject = {};
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    return toObject;
  }
  function latLngToMldev(fromObject) {
    const toObject = {};
    const fromLatitude = getValueByPath(fromObject, ["latitude"]);
    if (fromLatitude != null) {
      setValueByPath(toObject, ["latitude"], fromLatitude);
    }
    const fromLongitude = getValueByPath(fromObject, ["longitude"]);
    if (fromLongitude != null) {
      setValueByPath(toObject, ["longitude"], fromLongitude);
    }
    return toObject;
  }
  function latLngToVertex(fromObject) {
    const toObject = {};
    const fromLatitude = getValueByPath(fromObject, ["latitude"]);
    if (fromLatitude != null) {
      setValueByPath(toObject, ["latitude"], fromLatitude);
    }
    const fromLongitude = getValueByPath(fromObject, ["longitude"]);
    if (fromLongitude != null) {
      setValueByPath(toObject, ["longitude"], fromLongitude);
    }
    return toObject;
  }
  function listModelsConfigToMldev(apiClient, fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    const fromFilter = getValueByPath(fromObject, ["filter"]);
    if (parentObject !== void 0 && fromFilter != null) {
      setValueByPath(parentObject, ["_query", "filter"], fromFilter);
    }
    const fromQueryBase = getValueByPath(fromObject, ["queryBase"]);
    if (parentObject !== void 0 && fromQueryBase != null) {
      setValueByPath(parentObject, ["_url", "models_url"], tModelsUrl(apiClient, fromQueryBase));
    }
    return toObject;
  }
  function listModelsConfigToVertex(apiClient, fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    const fromFilter = getValueByPath(fromObject, ["filter"]);
    if (parentObject !== void 0 && fromFilter != null) {
      setValueByPath(parentObject, ["_query", "filter"], fromFilter);
    }
    const fromQueryBase = getValueByPath(fromObject, ["queryBase"]);
    if (parentObject !== void 0 && fromQueryBase != null) {
      setValueByPath(parentObject, ["_url", "models_url"], tModelsUrl(apiClient, fromQueryBase));
    }
    return toObject;
  }
  function listModelsParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listModelsConfigToMldev(apiClient, fromConfig, toObject);
    }
    return toObject;
  }
  function listModelsParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listModelsConfigToVertex(apiClient, fromConfig, toObject);
    }
    return toObject;
  }
  function listModelsResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromModels = getValueByPath(fromObject, ["_self"]);
    if (fromModels != null) {
      let transformedList = tExtractModels(fromModels);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modelFromMldev(item);
        });
      }
      setValueByPath(toObject, ["models"], transformedList);
    }
    return toObject;
  }
  function listModelsResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromModels = getValueByPath(fromObject, ["_self"]);
    if (fromModels != null) {
      let transformedList = tExtractModels(fromModels);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modelFromVertex(item);
        });
      }
      setValueByPath(toObject, ["models"], transformedList);
    }
    return toObject;
  }
  function maskReferenceConfigToVertex(fromObject) {
    const toObject = {};
    const fromMaskMode = getValueByPath(fromObject, ["maskMode"]);
    if (fromMaskMode != null) {
      setValueByPath(toObject, ["maskMode"], fromMaskMode);
    }
    const fromSegmentationClasses = getValueByPath(fromObject, [
      "segmentationClasses"
    ]);
    if (fromSegmentationClasses != null) {
      setValueByPath(toObject, ["maskClasses"], fromSegmentationClasses);
    }
    const fromMaskDilation = getValueByPath(fromObject, ["maskDilation"]);
    if (fromMaskDilation != null) {
      setValueByPath(toObject, ["dilation"], fromMaskDilation);
    }
    return toObject;
  }
  function modelFromMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromVersion = getValueByPath(fromObject, ["version"]);
    if (fromVersion != null) {
      setValueByPath(toObject, ["version"], fromVersion);
    }
    const fromTunedModelInfo = getValueByPath(fromObject, ["_self"]);
    if (fromTunedModelInfo != null) {
      setValueByPath(toObject, ["tunedModelInfo"], tunedModelInfoFromMldev(fromTunedModelInfo));
    }
    const fromInputTokenLimit = getValueByPath(fromObject, [
      "inputTokenLimit"
    ]);
    if (fromInputTokenLimit != null) {
      setValueByPath(toObject, ["inputTokenLimit"], fromInputTokenLimit);
    }
    const fromOutputTokenLimit = getValueByPath(fromObject, [
      "outputTokenLimit"
    ]);
    if (fromOutputTokenLimit != null) {
      setValueByPath(toObject, ["outputTokenLimit"], fromOutputTokenLimit);
    }
    const fromSupportedActions = getValueByPath(fromObject, [
      "supportedGenerationMethods"
    ]);
    if (fromSupportedActions != null) {
      setValueByPath(toObject, ["supportedActions"], fromSupportedActions);
    }
    return toObject;
  }
  function modelFromVertex(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromVersion = getValueByPath(fromObject, ["versionId"]);
    if (fromVersion != null) {
      setValueByPath(toObject, ["version"], fromVersion);
    }
    const fromEndpoints = getValueByPath(fromObject, ["deployedModels"]);
    if (fromEndpoints != null) {
      let transformedList = fromEndpoints;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return endpointFromVertex(item);
        });
      }
      setValueByPath(toObject, ["endpoints"], transformedList);
    }
    const fromLabels = getValueByPath(fromObject, ["labels"]);
    if (fromLabels != null) {
      setValueByPath(toObject, ["labels"], fromLabels);
    }
    const fromTunedModelInfo = getValueByPath(fromObject, ["_self"]);
    if (fromTunedModelInfo != null) {
      setValueByPath(toObject, ["tunedModelInfo"], tunedModelInfoFromVertex(fromTunedModelInfo));
    }
    const fromDefaultCheckpointId = getValueByPath(fromObject, [
      "defaultCheckpointId"
    ]);
    if (fromDefaultCheckpointId != null) {
      setValueByPath(toObject, ["defaultCheckpointId"], fromDefaultCheckpointId);
    }
    const fromCheckpoints = getValueByPath(fromObject, ["checkpoints"]);
    if (fromCheckpoints != null) {
      let transformedList = fromCheckpoints;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return checkpointFromVertex(item);
        });
      }
      setValueByPath(toObject, ["checkpoints"], transformedList);
    }
    return toObject;
  }
  function modelSelectionConfigToVertex(fromObject) {
    const toObject = {};
    const fromFeatureSelectionPreference = getValueByPath(fromObject, [
      "featureSelectionPreference"
    ]);
    if (fromFeatureSelectionPreference != null) {
      setValueByPath(toObject, ["featureSelectionPreference"], fromFeatureSelectionPreference);
    }
    return toObject;
  }
  function multiSpeakerVoiceConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromSpeakerVoiceConfigs = getValueByPath(fromObject, [
      "speakerVoiceConfigs"
    ]);
    if (fromSpeakerVoiceConfigs != null) {
      let transformedList = fromSpeakerVoiceConfigs;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return speakerVoiceConfigToMldev$1(item);
        });
      }
      setValueByPath(toObject, ["speakerVoiceConfigs"], transformedList);
    }
    return toObject;
  }
  function partFromMldev(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataFromMldev(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobFromMldev(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataFromMldev(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallFromMldev(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function partFromVertex(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataFromVertex(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobFromVertex(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataFromVertex(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallFromVertex(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function partToMldev$1(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataToMldev$1(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobToMldev$1(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataToMldev$1(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallToMldev$1(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function partToVertex(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataToVertex(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobToVertex(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataToVertex(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallToVertex(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function prebuiltVoiceConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromVoiceName = getValueByPath(fromObject, ["voiceName"]);
    if (fromVoiceName != null) {
      setValueByPath(toObject, ["voiceName"], fromVoiceName);
    }
    return toObject;
  }
  function prebuiltVoiceConfigToVertex(fromObject) {
    const toObject = {};
    const fromVoiceName = getValueByPath(fromObject, ["voiceName"]);
    if (fromVoiceName != null) {
      setValueByPath(toObject, ["voiceName"], fromVoiceName);
    }
    return toObject;
  }
  function productImageToVertex(fromObject) {
    const toObject = {};
    const fromProductImage = getValueByPath(fromObject, ["productImage"]);
    if (fromProductImage != null) {
      setValueByPath(toObject, ["image"], imageToVertex(fromProductImage));
    }
    return toObject;
  }
  function recontextImageConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromNumberOfImages = getValueByPath(fromObject, [
      "numberOfImages"
    ]);
    if (parentObject !== void 0 && fromNumberOfImages != null) {
      setValueByPath(parentObject, ["parameters", "sampleCount"], fromNumberOfImages);
    }
    const fromBaseSteps = getValueByPath(fromObject, ["baseSteps"]);
    if (parentObject !== void 0 && fromBaseSteps != null) {
      setValueByPath(parentObject, ["parameters", "editConfig", "baseSteps"], fromBaseSteps);
    }
    const fromOutputGcsUri = getValueByPath(fromObject, ["outputGcsUri"]);
    if (parentObject !== void 0 && fromOutputGcsUri != null) {
      setValueByPath(parentObject, ["parameters", "storageUri"], fromOutputGcsUri);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (parentObject !== void 0 && fromSeed != null) {
      setValueByPath(parentObject, ["parameters", "seed"], fromSeed);
    }
    const fromSafetyFilterLevel = getValueByPath(fromObject, [
      "safetyFilterLevel"
    ]);
    if (parentObject !== void 0 && fromSafetyFilterLevel != null) {
      setValueByPath(parentObject, ["parameters", "safetySetting"], fromSafetyFilterLevel);
    }
    const fromPersonGeneration = getValueByPath(fromObject, [
      "personGeneration"
    ]);
    if (parentObject !== void 0 && fromPersonGeneration != null) {
      setValueByPath(parentObject, ["parameters", "personGeneration"], fromPersonGeneration);
    }
    const fromAddWatermark = getValueByPath(fromObject, ["addWatermark"]);
    if (parentObject !== void 0 && fromAddWatermark != null) {
      setValueByPath(parentObject, ["parameters", "addWatermark"], fromAddWatermark);
    }
    const fromOutputMimeType = getValueByPath(fromObject, [
      "outputMimeType"
    ]);
    if (parentObject !== void 0 && fromOutputMimeType != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "mimeType"], fromOutputMimeType);
    }
    const fromOutputCompressionQuality = getValueByPath(fromObject, [
      "outputCompressionQuality"
    ]);
    if (parentObject !== void 0 && fromOutputCompressionQuality != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "compressionQuality"], fromOutputCompressionQuality);
    }
    const fromEnhancePrompt = getValueByPath(fromObject, [
      "enhancePrompt"
    ]);
    if (parentObject !== void 0 && fromEnhancePrompt != null) {
      setValueByPath(parentObject, ["parameters", "enhancePrompt"], fromEnhancePrompt);
    }
    return toObject;
  }
  function recontextImageParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromSource = getValueByPath(fromObject, ["source"]);
    if (fromSource != null) {
      recontextImageSourceToVertex(fromSource, toObject);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      recontextImageConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function recontextImageResponseFromVertex(fromObject) {
    const toObject = {};
    const fromGeneratedImages = getValueByPath(fromObject, [
      "predictions"
    ]);
    if (fromGeneratedImages != null) {
      let transformedList = fromGeneratedImages;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedImageFromVertex(item);
        });
      }
      setValueByPath(toObject, ["generatedImages"], transformedList);
    }
    return toObject;
  }
  function recontextImageSourceToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (parentObject !== void 0 && fromPrompt != null) {
      setValueByPath(parentObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromPersonImage = getValueByPath(fromObject, ["personImage"]);
    if (parentObject !== void 0 && fromPersonImage != null) {
      setValueByPath(parentObject, ["instances[0]", "personImage", "image"], imageToVertex(fromPersonImage));
    }
    const fromProductImages = getValueByPath(fromObject, [
      "productImages"
    ]);
    if (parentObject !== void 0 && fromProductImages != null) {
      let transformedList = fromProductImages;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return productImageToVertex(item);
        });
      }
      setValueByPath(parentObject, ["instances[0]", "productImages"], transformedList);
    }
    return toObject;
  }
  function referenceImageAPIInternalToVertex(fromObject) {
    const toObject = {};
    const fromReferenceImage = getValueByPath(fromObject, [
      "referenceImage"
    ]);
    if (fromReferenceImage != null) {
      setValueByPath(toObject, ["referenceImage"], imageToVertex(fromReferenceImage));
    }
    const fromReferenceId = getValueByPath(fromObject, ["referenceId"]);
    if (fromReferenceId != null) {
      setValueByPath(toObject, ["referenceId"], fromReferenceId);
    }
    const fromReferenceType = getValueByPath(fromObject, [
      "referenceType"
    ]);
    if (fromReferenceType != null) {
      setValueByPath(toObject, ["referenceType"], fromReferenceType);
    }
    const fromMaskImageConfig = getValueByPath(fromObject, [
      "maskImageConfig"
    ]);
    if (fromMaskImageConfig != null) {
      setValueByPath(toObject, ["maskImageConfig"], maskReferenceConfigToVertex(fromMaskImageConfig));
    }
    const fromControlImageConfig = getValueByPath(fromObject, [
      "controlImageConfig"
    ]);
    if (fromControlImageConfig != null) {
      setValueByPath(toObject, ["controlImageConfig"], controlReferenceConfigToVertex(fromControlImageConfig));
    }
    const fromStyleImageConfig = getValueByPath(fromObject, [
      "styleImageConfig"
    ]);
    if (fromStyleImageConfig != null) {
      setValueByPath(toObject, ["styleImageConfig"], styleReferenceConfigToVertex(fromStyleImageConfig));
    }
    const fromSubjectImageConfig = getValueByPath(fromObject, [
      "subjectImageConfig"
    ]);
    if (fromSubjectImageConfig != null) {
      setValueByPath(toObject, ["subjectImageConfig"], subjectReferenceConfigToVertex(fromSubjectImageConfig));
    }
    return toObject;
  }
  function retrievalConfigToMldev(fromObject) {
    const toObject = {};
    const fromLatLng = getValueByPath(fromObject, ["latLng"]);
    if (fromLatLng != null) {
      setValueByPath(toObject, ["latLng"], latLngToMldev(fromLatLng));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function retrievalConfigToVertex(fromObject) {
    const toObject = {};
    const fromLatLng = getValueByPath(fromObject, ["latLng"]);
    if (fromLatLng != null) {
      setValueByPath(toObject, ["latLng"], latLngToVertex(fromLatLng));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function safetyAttributesFromMldev(fromObject) {
    const toObject = {};
    const fromCategories = getValueByPath(fromObject, [
      "safetyAttributes",
      "categories"
    ]);
    if (fromCategories != null) {
      setValueByPath(toObject, ["categories"], fromCategories);
    }
    const fromScores = getValueByPath(fromObject, [
      "safetyAttributes",
      "scores"
    ]);
    if (fromScores != null) {
      setValueByPath(toObject, ["scores"], fromScores);
    }
    const fromContentType = getValueByPath(fromObject, ["contentType"]);
    if (fromContentType != null) {
      setValueByPath(toObject, ["contentType"], fromContentType);
    }
    return toObject;
  }
  function safetyAttributesFromVertex(fromObject) {
    const toObject = {};
    const fromCategories = getValueByPath(fromObject, [
      "safetyAttributes",
      "categories"
    ]);
    if (fromCategories != null) {
      setValueByPath(toObject, ["categories"], fromCategories);
    }
    const fromScores = getValueByPath(fromObject, [
      "safetyAttributes",
      "scores"
    ]);
    if (fromScores != null) {
      setValueByPath(toObject, ["scores"], fromScores);
    }
    const fromContentType = getValueByPath(fromObject, ["contentType"]);
    if (fromContentType != null) {
      setValueByPath(toObject, ["contentType"], fromContentType);
    }
    return toObject;
  }
  function safetySettingToMldev(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["method"]) !== void 0) {
      throw new Error("method parameter is not supported in Gemini API.");
    }
    const fromCategory = getValueByPath(fromObject, ["category"]);
    if (fromCategory != null) {
      setValueByPath(toObject, ["category"], fromCategory);
    }
    const fromThreshold = getValueByPath(fromObject, ["threshold"]);
    if (fromThreshold != null) {
      setValueByPath(toObject, ["threshold"], fromThreshold);
    }
    return toObject;
  }
  function safetySettingToVertex(fromObject) {
    const toObject = {};
    const fromMethod = getValueByPath(fromObject, ["method"]);
    if (fromMethod != null) {
      setValueByPath(toObject, ["method"], fromMethod);
    }
    const fromCategory = getValueByPath(fromObject, ["category"]);
    if (fromCategory != null) {
      setValueByPath(toObject, ["category"], fromCategory);
    }
    const fromThreshold = getValueByPath(fromObject, ["threshold"]);
    if (fromThreshold != null) {
      setValueByPath(toObject, ["threshold"], fromThreshold);
    }
    return toObject;
  }
  function schemaToMldev(fromObject) {
    const toObject = {};
    const fromAnyOf = getValueByPath(fromObject, ["anyOf"]);
    if (fromAnyOf != null) {
      setValueByPath(toObject, ["anyOf"], fromAnyOf);
    }
    const fromDefault = getValueByPath(fromObject, ["default"]);
    if (fromDefault != null) {
      setValueByPath(toObject, ["default"], fromDefault);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromEnum = getValueByPath(fromObject, ["enum"]);
    if (fromEnum != null) {
      setValueByPath(toObject, ["enum"], fromEnum);
    }
    const fromExample = getValueByPath(fromObject, ["example"]);
    if (fromExample != null) {
      setValueByPath(toObject, ["example"], fromExample);
    }
    const fromFormat = getValueByPath(fromObject, ["format"]);
    if (fromFormat != null) {
      setValueByPath(toObject, ["format"], fromFormat);
    }
    const fromItems = getValueByPath(fromObject, ["items"]);
    if (fromItems != null) {
      setValueByPath(toObject, ["items"], fromItems);
    }
    const fromMaxItems = getValueByPath(fromObject, ["maxItems"]);
    if (fromMaxItems != null) {
      setValueByPath(toObject, ["maxItems"], fromMaxItems);
    }
    const fromMaxLength = getValueByPath(fromObject, ["maxLength"]);
    if (fromMaxLength != null) {
      setValueByPath(toObject, ["maxLength"], fromMaxLength);
    }
    const fromMaxProperties = getValueByPath(fromObject, [
      "maxProperties"
    ]);
    if (fromMaxProperties != null) {
      setValueByPath(toObject, ["maxProperties"], fromMaxProperties);
    }
    const fromMaximum = getValueByPath(fromObject, ["maximum"]);
    if (fromMaximum != null) {
      setValueByPath(toObject, ["maximum"], fromMaximum);
    }
    const fromMinItems = getValueByPath(fromObject, ["minItems"]);
    if (fromMinItems != null) {
      setValueByPath(toObject, ["minItems"], fromMinItems);
    }
    const fromMinLength = getValueByPath(fromObject, ["minLength"]);
    if (fromMinLength != null) {
      setValueByPath(toObject, ["minLength"], fromMinLength);
    }
    const fromMinProperties = getValueByPath(fromObject, [
      "minProperties"
    ]);
    if (fromMinProperties != null) {
      setValueByPath(toObject, ["minProperties"], fromMinProperties);
    }
    const fromMinimum = getValueByPath(fromObject, ["minimum"]);
    if (fromMinimum != null) {
      setValueByPath(toObject, ["minimum"], fromMinimum);
    }
    const fromNullable = getValueByPath(fromObject, ["nullable"]);
    if (fromNullable != null) {
      setValueByPath(toObject, ["nullable"], fromNullable);
    }
    const fromPattern = getValueByPath(fromObject, ["pattern"]);
    if (fromPattern != null) {
      setValueByPath(toObject, ["pattern"], fromPattern);
    }
    const fromProperties = getValueByPath(fromObject, ["properties"]);
    if (fromProperties != null) {
      setValueByPath(toObject, ["properties"], fromProperties);
    }
    const fromPropertyOrdering = getValueByPath(fromObject, [
      "propertyOrdering"
    ]);
    if (fromPropertyOrdering != null) {
      setValueByPath(toObject, ["propertyOrdering"], fromPropertyOrdering);
    }
    const fromRequired = getValueByPath(fromObject, ["required"]);
    if (fromRequired != null) {
      setValueByPath(toObject, ["required"], fromRequired);
    }
    const fromTitle = getValueByPath(fromObject, ["title"]);
    if (fromTitle != null) {
      setValueByPath(toObject, ["title"], fromTitle);
    }
    const fromType = getValueByPath(fromObject, ["type"]);
    if (fromType != null) {
      setValueByPath(toObject, ["type"], fromType);
    }
    return toObject;
  }
  function schemaToVertex(fromObject) {
    const toObject = {};
    const fromAnyOf = getValueByPath(fromObject, ["anyOf"]);
    if (fromAnyOf != null) {
      setValueByPath(toObject, ["anyOf"], fromAnyOf);
    }
    const fromDefault = getValueByPath(fromObject, ["default"]);
    if (fromDefault != null) {
      setValueByPath(toObject, ["default"], fromDefault);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromEnum = getValueByPath(fromObject, ["enum"]);
    if (fromEnum != null) {
      setValueByPath(toObject, ["enum"], fromEnum);
    }
    const fromExample = getValueByPath(fromObject, ["example"]);
    if (fromExample != null) {
      setValueByPath(toObject, ["example"], fromExample);
    }
    const fromFormat = getValueByPath(fromObject, ["format"]);
    if (fromFormat != null) {
      setValueByPath(toObject, ["format"], fromFormat);
    }
    const fromItems = getValueByPath(fromObject, ["items"]);
    if (fromItems != null) {
      setValueByPath(toObject, ["items"], fromItems);
    }
    const fromMaxItems = getValueByPath(fromObject, ["maxItems"]);
    if (fromMaxItems != null) {
      setValueByPath(toObject, ["maxItems"], fromMaxItems);
    }
    const fromMaxLength = getValueByPath(fromObject, ["maxLength"]);
    if (fromMaxLength != null) {
      setValueByPath(toObject, ["maxLength"], fromMaxLength);
    }
    const fromMaxProperties = getValueByPath(fromObject, [
      "maxProperties"
    ]);
    if (fromMaxProperties != null) {
      setValueByPath(toObject, ["maxProperties"], fromMaxProperties);
    }
    const fromMaximum = getValueByPath(fromObject, ["maximum"]);
    if (fromMaximum != null) {
      setValueByPath(toObject, ["maximum"], fromMaximum);
    }
    const fromMinItems = getValueByPath(fromObject, ["minItems"]);
    if (fromMinItems != null) {
      setValueByPath(toObject, ["minItems"], fromMinItems);
    }
    const fromMinLength = getValueByPath(fromObject, ["minLength"]);
    if (fromMinLength != null) {
      setValueByPath(toObject, ["minLength"], fromMinLength);
    }
    const fromMinProperties = getValueByPath(fromObject, [
      "minProperties"
    ]);
    if (fromMinProperties != null) {
      setValueByPath(toObject, ["minProperties"], fromMinProperties);
    }
    const fromMinimum = getValueByPath(fromObject, ["minimum"]);
    if (fromMinimum != null) {
      setValueByPath(toObject, ["minimum"], fromMinimum);
    }
    const fromNullable = getValueByPath(fromObject, ["nullable"]);
    if (fromNullable != null) {
      setValueByPath(toObject, ["nullable"], fromNullable);
    }
    const fromPattern = getValueByPath(fromObject, ["pattern"]);
    if (fromPattern != null) {
      setValueByPath(toObject, ["pattern"], fromPattern);
    }
    const fromProperties = getValueByPath(fromObject, ["properties"]);
    if (fromProperties != null) {
      setValueByPath(toObject, ["properties"], fromProperties);
    }
    const fromPropertyOrdering = getValueByPath(fromObject, [
      "propertyOrdering"
    ]);
    if (fromPropertyOrdering != null) {
      setValueByPath(toObject, ["propertyOrdering"], fromPropertyOrdering);
    }
    const fromRequired = getValueByPath(fromObject, ["required"]);
    if (fromRequired != null) {
      setValueByPath(toObject, ["required"], fromRequired);
    }
    const fromTitle = getValueByPath(fromObject, ["title"]);
    if (fromTitle != null) {
      setValueByPath(toObject, ["title"], fromTitle);
    }
    const fromType = getValueByPath(fromObject, ["type"]);
    if (fromType != null) {
      setValueByPath(toObject, ["type"], fromType);
    }
    return toObject;
  }
  function scribbleImageToVertex(fromObject) {
    const toObject = {};
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (fromImage != null) {
      setValueByPath(toObject, ["image"], imageToVertex(fromImage));
    }
    return toObject;
  }
  function segmentImageConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (parentObject !== void 0 && fromMode != null) {
      setValueByPath(parentObject, ["parameters", "mode"], fromMode);
    }
    const fromMaxPredictions = getValueByPath(fromObject, [
      "maxPredictions"
    ]);
    if (parentObject !== void 0 && fromMaxPredictions != null) {
      setValueByPath(parentObject, ["parameters", "maxPredictions"], fromMaxPredictions);
    }
    const fromConfidenceThreshold = getValueByPath(fromObject, [
      "confidenceThreshold"
    ]);
    if (parentObject !== void 0 && fromConfidenceThreshold != null) {
      setValueByPath(parentObject, ["parameters", "confidenceThreshold"], fromConfidenceThreshold);
    }
    const fromMaskDilation = getValueByPath(fromObject, ["maskDilation"]);
    if (parentObject !== void 0 && fromMaskDilation != null) {
      setValueByPath(parentObject, ["parameters", "maskDilation"], fromMaskDilation);
    }
    const fromBinaryColorThreshold = getValueByPath(fromObject, [
      "binaryColorThreshold"
    ]);
    if (parentObject !== void 0 && fromBinaryColorThreshold != null) {
      setValueByPath(parentObject, ["parameters", "binaryColorThreshold"], fromBinaryColorThreshold);
    }
    return toObject;
  }
  function segmentImageParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromSource = getValueByPath(fromObject, ["source"]);
    if (fromSource != null) {
      segmentImageSourceToVertex(fromSource, toObject);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      segmentImageConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function segmentImageResponseFromVertex(fromObject) {
    const toObject = {};
    const fromGeneratedMasks = getValueByPath(fromObject, ["predictions"]);
    if (fromGeneratedMasks != null) {
      let transformedList = fromGeneratedMasks;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedImageMaskFromVertex(item);
        });
      }
      setValueByPath(toObject, ["generatedMasks"], transformedList);
    }
    return toObject;
  }
  function segmentImageSourceToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (parentObject !== void 0 && fromPrompt != null) {
      setValueByPath(parentObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (parentObject !== void 0 && fromImage != null) {
      setValueByPath(parentObject, ["instances[0]", "image"], imageToVertex(fromImage));
    }
    const fromScribbleImage = getValueByPath(fromObject, [
      "scribbleImage"
    ]);
    if (parentObject !== void 0 && fromScribbleImage != null) {
      setValueByPath(parentObject, ["instances[0]", "scribble"], scribbleImageToVertex(fromScribbleImage));
    }
    return toObject;
  }
  function speakerVoiceConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromSpeaker = getValueByPath(fromObject, ["speaker"]);
    if (fromSpeaker != null) {
      setValueByPath(toObject, ["speaker"], fromSpeaker);
    }
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToMldev$1(fromVoiceConfig));
    }
    return toObject;
  }
  function speechConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToMldev$1(fromVoiceConfig));
    }
    const fromMultiSpeakerVoiceConfig = getValueByPath(fromObject, [
      "multiSpeakerVoiceConfig"
    ]);
    if (fromMultiSpeakerVoiceConfig != null) {
      setValueByPath(toObject, ["multiSpeakerVoiceConfig"], multiSpeakerVoiceConfigToMldev$1(fromMultiSpeakerVoiceConfig));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function speechConfigToVertex(fromObject) {
    const toObject = {};
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToVertex(fromVoiceConfig));
    }
    if (getValueByPath(fromObject, ["multiSpeakerVoiceConfig"]) !== void 0) {
      throw new Error("multiSpeakerVoiceConfig parameter is not supported in Vertex AI.");
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function styleReferenceConfigToVertex(fromObject) {
    const toObject = {};
    const fromStyleDescription = getValueByPath(fromObject, [
      "styleDescription"
    ]);
    if (fromStyleDescription != null) {
      setValueByPath(toObject, ["styleDescription"], fromStyleDescription);
    }
    return toObject;
  }
  function subjectReferenceConfigToVertex(fromObject) {
    const toObject = {};
    const fromSubjectType = getValueByPath(fromObject, ["subjectType"]);
    if (fromSubjectType != null) {
      setValueByPath(toObject, ["subjectType"], fromSubjectType);
    }
    const fromSubjectDescription = getValueByPath(fromObject, [
      "subjectDescription"
    ]);
    if (fromSubjectDescription != null) {
      setValueByPath(toObject, ["subjectDescription"], fromSubjectDescription);
    }
    return toObject;
  }
  function thinkingConfigToMldev(fromObject) {
    const toObject = {};
    const fromIncludeThoughts = getValueByPath(fromObject, [
      "includeThoughts"
    ]);
    if (fromIncludeThoughts != null) {
      setValueByPath(toObject, ["includeThoughts"], fromIncludeThoughts);
    }
    const fromThinkingBudget = getValueByPath(fromObject, [
      "thinkingBudget"
    ]);
    if (fromThinkingBudget != null) {
      setValueByPath(toObject, ["thinkingBudget"], fromThinkingBudget);
    }
    return toObject;
  }
  function thinkingConfigToVertex(fromObject) {
    const toObject = {};
    const fromIncludeThoughts = getValueByPath(fromObject, [
      "includeThoughts"
    ]);
    if (fromIncludeThoughts != null) {
      setValueByPath(toObject, ["includeThoughts"], fromIncludeThoughts);
    }
    const fromThinkingBudget = getValueByPath(fromObject, [
      "thinkingBudget"
    ]);
    if (fromThinkingBudget != null) {
      setValueByPath(toObject, ["thinkingBudget"], fromThinkingBudget);
    }
    return toObject;
  }
  function toolComputerUseToMldev$1(fromObject) {
    const toObject = {};
    const fromEnvironment = getValueByPath(fromObject, ["environment"]);
    if (fromEnvironment != null) {
      setValueByPath(toObject, ["environment"], fromEnvironment);
    }
    const fromExcludedPredefinedFunctions = getValueByPath(fromObject, [
      "excludedPredefinedFunctions"
    ]);
    if (fromExcludedPredefinedFunctions != null) {
      setValueByPath(toObject, ["excludedPredefinedFunctions"], fromExcludedPredefinedFunctions);
    }
    return toObject;
  }
  function toolComputerUseToVertex(fromObject) {
    const toObject = {};
    const fromEnvironment = getValueByPath(fromObject, ["environment"]);
    if (fromEnvironment != null) {
      setValueByPath(toObject, ["environment"], fromEnvironment);
    }
    const fromExcludedPredefinedFunctions = getValueByPath(fromObject, [
      "excludedPredefinedFunctions"
    ]);
    if (fromExcludedPredefinedFunctions != null) {
      setValueByPath(toObject, ["excludedPredefinedFunctions"], fromExcludedPredefinedFunctions);
    }
    return toObject;
  }
  function toolConfigToMldev(fromObject) {
    const toObject = {};
    const fromFunctionCallingConfig = getValueByPath(fromObject, [
      "functionCallingConfig"
    ]);
    if (fromFunctionCallingConfig != null) {
      setValueByPath(toObject, ["functionCallingConfig"], functionCallingConfigToMldev(fromFunctionCallingConfig));
    }
    const fromRetrievalConfig = getValueByPath(fromObject, [
      "retrievalConfig"
    ]);
    if (fromRetrievalConfig != null) {
      setValueByPath(toObject, ["retrievalConfig"], retrievalConfigToMldev(fromRetrievalConfig));
    }
    return toObject;
  }
  function toolConfigToVertex(fromObject) {
    const toObject = {};
    const fromFunctionCallingConfig = getValueByPath(fromObject, [
      "functionCallingConfig"
    ]);
    if (fromFunctionCallingConfig != null) {
      setValueByPath(toObject, ["functionCallingConfig"], functionCallingConfigToVertex(fromFunctionCallingConfig));
    }
    const fromRetrievalConfig = getValueByPath(fromObject, [
      "retrievalConfig"
    ]);
    if (fromRetrievalConfig != null) {
      setValueByPath(toObject, ["retrievalConfig"], retrievalConfigToVertex(fromRetrievalConfig));
    }
    return toObject;
  }
  function toolToMldev$1(fromObject) {
    const toObject = {};
    const fromFunctionDeclarations = getValueByPath(fromObject, [
      "functionDeclarations"
    ]);
    if (fromFunctionDeclarations != null) {
      let transformedList = fromFunctionDeclarations;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionDeclarationToMldev$1(item);
        });
      }
      setValueByPath(toObject, ["functionDeclarations"], transformedList);
    }
    if (getValueByPath(fromObject, ["retrieval"]) !== void 0) {
      throw new Error("retrieval parameter is not supported in Gemini API.");
    }
    const fromGoogleSearch = getValueByPath(fromObject, ["googleSearch"]);
    if (fromGoogleSearch != null) {
      setValueByPath(toObject, ["googleSearch"], googleSearchToMldev$1(fromGoogleSearch));
    }
    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [
      "googleSearchRetrieval"
    ]);
    if (fromGoogleSearchRetrieval != null) {
      setValueByPath(toObject, ["googleSearchRetrieval"], googleSearchRetrievalToMldev$1(fromGoogleSearchRetrieval));
    }
    if (getValueByPath(fromObject, ["enterpriseWebSearch"]) !== void 0) {
      throw new Error("enterpriseWebSearch parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["googleMaps"]) !== void 0) {
      throw new Error("googleMaps parameter is not supported in Gemini API.");
    }
    const fromUrlContext = getValueByPath(fromObject, ["urlContext"]);
    if (fromUrlContext != null) {
      setValueByPath(toObject, ["urlContext"], urlContextToMldev$1());
    }
    const fromComputerUse = getValueByPath(fromObject, ["computerUse"]);
    if (fromComputerUse != null) {
      setValueByPath(toObject, ["computerUse"], toolComputerUseToMldev$1(fromComputerUse));
    }
    const fromCodeExecution = getValueByPath(fromObject, [
      "codeExecution"
    ]);
    if (fromCodeExecution != null) {
      setValueByPath(toObject, ["codeExecution"], fromCodeExecution);
    }
    return toObject;
  }
  function toolToVertex(fromObject) {
    const toObject = {};
    const fromFunctionDeclarations = getValueByPath(fromObject, [
      "functionDeclarations"
    ]);
    if (fromFunctionDeclarations != null) {
      let transformedList = fromFunctionDeclarations;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionDeclarationToVertex(item);
        });
      }
      setValueByPath(toObject, ["functionDeclarations"], transformedList);
    }
    const fromRetrieval = getValueByPath(fromObject, ["retrieval"]);
    if (fromRetrieval != null) {
      setValueByPath(toObject, ["retrieval"], fromRetrieval);
    }
    const fromGoogleSearch = getValueByPath(fromObject, ["googleSearch"]);
    if (fromGoogleSearch != null) {
      setValueByPath(toObject, ["googleSearch"], googleSearchToVertex(fromGoogleSearch));
    }
    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [
      "googleSearchRetrieval"
    ]);
    if (fromGoogleSearchRetrieval != null) {
      setValueByPath(toObject, ["googleSearchRetrieval"], googleSearchRetrievalToVertex(fromGoogleSearchRetrieval));
    }
    const fromEnterpriseWebSearch = getValueByPath(fromObject, [
      "enterpriseWebSearch"
    ]);
    if (fromEnterpriseWebSearch != null) {
      setValueByPath(toObject, ["enterpriseWebSearch"], enterpriseWebSearchToVertex(fromEnterpriseWebSearch));
    }
    const fromGoogleMaps = getValueByPath(fromObject, ["googleMaps"]);
    if (fromGoogleMaps != null) {
      setValueByPath(toObject, ["googleMaps"], googleMapsToVertex(fromGoogleMaps));
    }
    const fromUrlContext = getValueByPath(fromObject, ["urlContext"]);
    if (fromUrlContext != null) {
      setValueByPath(toObject, ["urlContext"], urlContextToVertex());
    }
    const fromComputerUse = getValueByPath(fromObject, ["computerUse"]);
    if (fromComputerUse != null) {
      setValueByPath(toObject, ["computerUse"], toolComputerUseToVertex(fromComputerUse));
    }
    const fromCodeExecution = getValueByPath(fromObject, [
      "codeExecution"
    ]);
    if (fromCodeExecution != null) {
      setValueByPath(toObject, ["codeExecution"], fromCodeExecution);
    }
    return toObject;
  }
  function tunedModelInfoFromMldev(fromObject) {
    const toObject = {};
    const fromBaseModel = getValueByPath(fromObject, ["baseModel"]);
    if (fromBaseModel != null) {
      setValueByPath(toObject, ["baseModel"], fromBaseModel);
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    return toObject;
  }
  function tunedModelInfoFromVertex(fromObject) {
    const toObject = {};
    const fromBaseModel = getValueByPath(fromObject, [
      "labels",
      "google-vertex-llm-tuning-base-model-id"
    ]);
    if (fromBaseModel != null) {
      setValueByPath(toObject, ["baseModel"], fromBaseModel);
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    return toObject;
  }
  function updateModelConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (parentObject !== void 0 && fromDisplayName != null) {
      setValueByPath(parentObject, ["displayName"], fromDisplayName);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (parentObject !== void 0 && fromDescription != null) {
      setValueByPath(parentObject, ["description"], fromDescription);
    }
    const fromDefaultCheckpointId = getValueByPath(fromObject, [
      "defaultCheckpointId"
    ]);
    if (parentObject !== void 0 && fromDefaultCheckpointId != null) {
      setValueByPath(parentObject, ["defaultCheckpointId"], fromDefaultCheckpointId);
    }
    return toObject;
  }
  function updateModelConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (parentObject !== void 0 && fromDisplayName != null) {
      setValueByPath(parentObject, ["displayName"], fromDisplayName);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (parentObject !== void 0 && fromDescription != null) {
      setValueByPath(parentObject, ["description"], fromDescription);
    }
    const fromDefaultCheckpointId = getValueByPath(fromObject, [
      "defaultCheckpointId"
    ]);
    if (parentObject !== void 0 && fromDefaultCheckpointId != null) {
      setValueByPath(parentObject, ["defaultCheckpointId"], fromDefaultCheckpointId);
    }
    return toObject;
  }
  function updateModelParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "name"], tModel(apiClient, fromModel));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      updateModelConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function updateModelParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      updateModelConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function upscaleImageAPIConfigInternalToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromOutputGcsUri = getValueByPath(fromObject, ["outputGcsUri"]);
    if (parentObject !== void 0 && fromOutputGcsUri != null) {
      setValueByPath(parentObject, ["parameters", "storageUri"], fromOutputGcsUri);
    }
    const fromIncludeRaiReason = getValueByPath(fromObject, [
      "includeRaiReason"
    ]);
    if (parentObject !== void 0 && fromIncludeRaiReason != null) {
      setValueByPath(parentObject, ["parameters", "includeRaiReason"], fromIncludeRaiReason);
    }
    const fromOutputMimeType = getValueByPath(fromObject, [
      "outputMimeType"
    ]);
    if (parentObject !== void 0 && fromOutputMimeType != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "mimeType"], fromOutputMimeType);
    }
    const fromOutputCompressionQuality = getValueByPath(fromObject, [
      "outputCompressionQuality"
    ]);
    if (parentObject !== void 0 && fromOutputCompressionQuality != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "compressionQuality"], fromOutputCompressionQuality);
    }
    const fromEnhanceInputImage = getValueByPath(fromObject, [
      "enhanceInputImage"
    ]);
    if (parentObject !== void 0 && fromEnhanceInputImage != null) {
      setValueByPath(parentObject, ["parameters", "upscaleConfig", "enhanceInputImage"], fromEnhanceInputImage);
    }
    const fromImagePreservationFactor = getValueByPath(fromObject, [
      "imagePreservationFactor"
    ]);
    if (parentObject !== void 0 && fromImagePreservationFactor != null) {
      setValueByPath(parentObject, ["parameters", "upscaleConfig", "imagePreservationFactor"], fromImagePreservationFactor);
    }
    const fromNumberOfImages = getValueByPath(fromObject, [
      "numberOfImages"
    ]);
    if (parentObject !== void 0 && fromNumberOfImages != null) {
      setValueByPath(parentObject, ["parameters", "sampleCount"], fromNumberOfImages);
    }
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (parentObject !== void 0 && fromMode != null) {
      setValueByPath(parentObject, ["parameters", "mode"], fromMode);
    }
    return toObject;
  }
  function upscaleImageAPIParametersInternalToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (fromImage != null) {
      setValueByPath(toObject, ["instances[0]", "image"], imageToVertex(fromImage));
    }
    const fromUpscaleFactor = getValueByPath(fromObject, [
      "upscaleFactor"
    ]);
    if (fromUpscaleFactor != null) {
      setValueByPath(toObject, ["parameters", "upscaleConfig", "upscaleFactor"], fromUpscaleFactor);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      upscaleImageAPIConfigInternalToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function upscaleImageResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromGeneratedImages = getValueByPath(fromObject, [
      "predictions"
    ]);
    if (fromGeneratedImages != null) {
      let transformedList = fromGeneratedImages;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedImageFromVertex(item);
        });
      }
      setValueByPath(toObject, ["generatedImages"], transformedList);
    }
    return toObject;
  }
  function urlContextMetadataFromMldev(fromObject) {
    const toObject = {};
    const fromUrlMetadata = getValueByPath(fromObject, ["urlMetadata"]);
    if (fromUrlMetadata != null) {
      let transformedList = fromUrlMetadata;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return urlMetadataFromMldev(item);
        });
      }
      setValueByPath(toObject, ["urlMetadata"], transformedList);
    }
    return toObject;
  }
  function urlContextMetadataFromVertex(fromObject) {
    const toObject = {};
    const fromUrlMetadata = getValueByPath(fromObject, ["urlMetadata"]);
    if (fromUrlMetadata != null) {
      let transformedList = fromUrlMetadata;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return urlMetadataFromVertex(item);
        });
      }
      setValueByPath(toObject, ["urlMetadata"], transformedList);
    }
    return toObject;
  }
  function urlContextToMldev$1() {
    const toObject = {};
    return toObject;
  }
  function urlContextToVertex() {
    const toObject = {};
    return toObject;
  }
  function urlMetadataFromMldev(fromObject) {
    const toObject = {};
    const fromRetrievedUrl = getValueByPath(fromObject, ["retrievedUrl"]);
    if (fromRetrievedUrl != null) {
      setValueByPath(toObject, ["retrievedUrl"], fromRetrievedUrl);
    }
    const fromUrlRetrievalStatus = getValueByPath(fromObject, [
      "urlRetrievalStatus"
    ]);
    if (fromUrlRetrievalStatus != null) {
      setValueByPath(toObject, ["urlRetrievalStatus"], fromUrlRetrievalStatus);
    }
    return toObject;
  }
  function urlMetadataFromVertex(fromObject) {
    const toObject = {};
    const fromRetrievedUrl = getValueByPath(fromObject, ["retrievedUrl"]);
    if (fromRetrievedUrl != null) {
      setValueByPath(toObject, ["retrievedUrl"], fromRetrievedUrl);
    }
    const fromUrlRetrievalStatus = getValueByPath(fromObject, [
      "urlRetrievalStatus"
    ]);
    if (fromUrlRetrievalStatus != null) {
      setValueByPath(toObject, ["urlRetrievalStatus"], fromUrlRetrievalStatus);
    }
    return toObject;
  }
  function videoFromMldev(fromObject) {
    const toObject = {};
    const fromUri = getValueByPath(fromObject, ["video", "uri"]);
    if (fromUri != null) {
      setValueByPath(toObject, ["uri"], fromUri);
    }
    const fromVideoBytes = getValueByPath(fromObject, [
      "video",
      "encodedVideo"
    ]);
    if (fromVideoBytes != null) {
      setValueByPath(toObject, ["videoBytes"], tBytes(fromVideoBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["encoding"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function videoFromVertex(fromObject) {
    const toObject = {};
    const fromUri = getValueByPath(fromObject, ["gcsUri"]);
    if (fromUri != null) {
      setValueByPath(toObject, ["uri"], fromUri);
    }
    const fromVideoBytes = getValueByPath(fromObject, [
      "bytesBase64Encoded"
    ]);
    if (fromVideoBytes != null) {
      setValueByPath(toObject, ["videoBytes"], tBytes(fromVideoBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function videoGenerationMaskToVertex(fromObject) {
    const toObject = {};
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (fromImage != null) {
      setValueByPath(toObject, ["_self"], imageToVertex(fromImage));
    }
    const fromMaskMode = getValueByPath(fromObject, ["maskMode"]);
    if (fromMaskMode != null) {
      setValueByPath(toObject, ["maskMode"], fromMaskMode);
    }
    return toObject;
  }
  function videoGenerationReferenceImageToVertex(fromObject) {
    const toObject = {};
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (fromImage != null) {
      setValueByPath(toObject, ["image"], imageToVertex(fromImage));
    }
    const fromReferenceType = getValueByPath(fromObject, [
      "referenceType"
    ]);
    if (fromReferenceType != null) {
      setValueByPath(toObject, ["referenceType"], fromReferenceType);
    }
    return toObject;
  }
  function videoMetadataFromMldev(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoMetadataFromVertex(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoMetadataToMldev$1(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoMetadataToVertex(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoToVertex(fromObject) {
    const toObject = {};
    const fromUri = getValueByPath(fromObject, ["uri"]);
    if (fromUri != null) {
      setValueByPath(toObject, ["gcsUri"], fromUri);
    }
    const fromVideoBytes = getValueByPath(fromObject, ["videoBytes"]);
    if (fromVideoBytes != null) {
      setValueByPath(toObject, ["bytesBase64Encoded"], tBytes(fromVideoBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function voiceConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromPrebuiltVoiceConfig = getValueByPath(fromObject, [
      "prebuiltVoiceConfig"
    ]);
    if (fromPrebuiltVoiceConfig != null) {
      setValueByPath(toObject, ["prebuiltVoiceConfig"], prebuiltVoiceConfigToMldev$1(fromPrebuiltVoiceConfig));
    }
    return toObject;
  }
  function voiceConfigToVertex(fromObject) {
    const toObject = {};
    const fromPrebuiltVoiceConfig = getValueByPath(fromObject, [
      "prebuiltVoiceConfig"
    ]);
    if (fromPrebuiltVoiceConfig != null) {
      setValueByPath(toObject, ["prebuiltVoiceConfig"], prebuiltVoiceConfigToVertex(fromPrebuiltVoiceConfig));
    }
    return toObject;
  }
  var CONTENT_TYPE_HEADER = "Content-Type";
  var SERVER_TIMEOUT_HEADER = "X-Server-Timeout";
  var USER_AGENT_HEADER = "User-Agent";
  var GOOGLE_API_CLIENT_HEADER = "x-goog-api-client";
  var SDK_VERSION = "1.21.0";
  var LIBRARY_LABEL = `google-genai-sdk/${SDK_VERSION}`;
  var VERTEX_AI_API_DEFAULT_VERSION = "v1beta1";
  var GOOGLE_AI_API_DEFAULT_VERSION = "v1beta";
  var responseLineRE = /^\s*data: (.*)(?:\n\n|\r\r|\r\n\r\n)/;
  var ApiClient = class {
    constructor(opts) {
      var _a, _b;
      this.clientOptions = Object.assign(Object.assign({}, opts), { project: opts.project, location: opts.location, apiKey: opts.apiKey, vertexai: opts.vertexai });
      const initHttpOptions = {};
      if (this.clientOptions.vertexai) {
        initHttpOptions.apiVersion = (_a = this.clientOptions.apiVersion) !== null && _a !== void 0 ? _a : VERTEX_AI_API_DEFAULT_VERSION;
        initHttpOptions.baseUrl = this.baseUrlFromProjectLocation();
        this.normalizeAuthParameters();
      } else {
        initHttpOptions.apiVersion = (_b = this.clientOptions.apiVersion) !== null && _b !== void 0 ? _b : GOOGLE_AI_API_DEFAULT_VERSION;
        initHttpOptions.baseUrl = `https://generativelanguage.googleapis.com/`;
      }
      initHttpOptions.headers = this.getDefaultHeaders();
      this.clientOptions.httpOptions = initHttpOptions;
      if (opts.httpOptions) {
        this.clientOptions.httpOptions = this.patchHttpOptions(initHttpOptions, opts.httpOptions);
      }
    }
    /**
     * Determines the base URL for Vertex AI based on project and location.
     * Uses the global endpoint if location is 'global' or if project/location
     * are not specified (implying API key usage).
     * @private
     */
    baseUrlFromProjectLocation() {
      if (this.clientOptions.project && this.clientOptions.location && this.clientOptions.location !== "global") {
        return `https://${this.clientOptions.location}-aiplatform.googleapis.com/`;
      }
      return `https://aiplatform.googleapis.com/`;
    }
    /**
     * Normalizes authentication parameters for Vertex AI.
     * If project and location are provided, API key is cleared.
     * If project and location are not provided (implying API key usage),
     * project and location are cleared.
     * @private
     */
    normalizeAuthParameters() {
      if (this.clientOptions.project && this.clientOptions.location) {
        this.clientOptions.apiKey = void 0;
        return;
      }
      this.clientOptions.project = void 0;
      this.clientOptions.location = void 0;
    }
    isVertexAI() {
      var _a;
      return (_a = this.clientOptions.vertexai) !== null && _a !== void 0 ? _a : false;
    }
    getProject() {
      return this.clientOptions.project;
    }
    getLocation() {
      return this.clientOptions.location;
    }
    getApiVersion() {
      if (this.clientOptions.httpOptions && this.clientOptions.httpOptions.apiVersion !== void 0) {
        return this.clientOptions.httpOptions.apiVersion;
      }
      throw new Error("API version is not set.");
    }
    getBaseUrl() {
      if (this.clientOptions.httpOptions && this.clientOptions.httpOptions.baseUrl !== void 0) {
        return this.clientOptions.httpOptions.baseUrl;
      }
      throw new Error("Base URL is not set.");
    }
    getRequestUrl() {
      return this.getRequestUrlInternal(this.clientOptions.httpOptions);
    }
    getHeaders() {
      if (this.clientOptions.httpOptions && this.clientOptions.httpOptions.headers !== void 0) {
        return this.clientOptions.httpOptions.headers;
      } else {
        throw new Error("Headers are not set.");
      }
    }
    getRequestUrlInternal(httpOptions) {
      if (!httpOptions || httpOptions.baseUrl === void 0 || httpOptions.apiVersion === void 0) {
        throw new Error("HTTP options are not correctly set.");
      }
      const baseUrl = httpOptions.baseUrl.endsWith("/") ? httpOptions.baseUrl.slice(0, -1) : httpOptions.baseUrl;
      const urlElement = [baseUrl];
      if (httpOptions.apiVersion && httpOptions.apiVersion !== "") {
        urlElement.push(httpOptions.apiVersion);
      }
      return urlElement.join("/");
    }
    getBaseResourcePath() {
      return `projects/${this.clientOptions.project}/locations/${this.clientOptions.location}`;
    }
    getApiKey() {
      return this.clientOptions.apiKey;
    }
    getWebsocketBaseUrl() {
      const baseUrl = this.getBaseUrl();
      const urlParts = new URL(baseUrl);
      urlParts.protocol = urlParts.protocol == "http:" ? "ws" : "wss";
      return urlParts.toString();
    }
    setBaseUrl(url) {
      if (this.clientOptions.httpOptions) {
        this.clientOptions.httpOptions.baseUrl = url;
      } else {
        throw new Error("HTTP options are not correctly set.");
      }
    }
    constructUrl(path, httpOptions, prependProjectLocation) {
      const urlElement = [this.getRequestUrlInternal(httpOptions)];
      if (prependProjectLocation) {
        urlElement.push(this.getBaseResourcePath());
      }
      if (path !== "") {
        urlElement.push(path);
      }
      const url = new URL(`${urlElement.join("/")}`);
      return url;
    }
    shouldPrependVertexProjectPath(request) {
      if (this.clientOptions.apiKey) {
        return false;
      }
      if (!this.clientOptions.vertexai) {
        return false;
      }
      if (request.path.startsWith("projects/")) {
        return false;
      }
      if (request.httpMethod === "GET" && request.path.startsWith("publishers/google/models")) {
        return false;
      }
      return true;
    }
    async request(request) {
      let patchedHttpOptions = this.clientOptions.httpOptions;
      if (request.httpOptions) {
        patchedHttpOptions = this.patchHttpOptions(this.clientOptions.httpOptions, request.httpOptions);
      }
      const prependProjectLocation = this.shouldPrependVertexProjectPath(request);
      const url = this.constructUrl(request.path, patchedHttpOptions, prependProjectLocation);
      if (request.queryParams) {
        for (const [key, value] of Object.entries(request.queryParams)) {
          url.searchParams.append(key, String(value));
        }
      }
      let requestInit = {};
      if (request.httpMethod === "GET") {
        if (request.body && request.body !== "{}") {
          throw new Error("Request body should be empty for GET request, but got non empty request body");
        }
      } else {
        requestInit.body = request.body;
      }
      requestInit = await this.includeExtraHttpOptionsToRequestInit(requestInit, patchedHttpOptions, request.abortSignal);
      return this.unaryApiCall(url, requestInit, request.httpMethod);
    }
    patchHttpOptions(baseHttpOptions, requestHttpOptions) {
      const patchedHttpOptions = JSON.parse(JSON.stringify(baseHttpOptions));
      for (const [key, value] of Object.entries(requestHttpOptions)) {
        if (typeof value === "object") {
          patchedHttpOptions[key] = Object.assign(Object.assign({}, patchedHttpOptions[key]), value);
        } else if (value !== void 0) {
          patchedHttpOptions[key] = value;
        }
      }
      return patchedHttpOptions;
    }
    async requestStream(request) {
      let patchedHttpOptions = this.clientOptions.httpOptions;
      if (request.httpOptions) {
        patchedHttpOptions = this.patchHttpOptions(this.clientOptions.httpOptions, request.httpOptions);
      }
      const prependProjectLocation = this.shouldPrependVertexProjectPath(request);
      const url = this.constructUrl(request.path, patchedHttpOptions, prependProjectLocation);
      if (!url.searchParams.has("alt") || url.searchParams.get("alt") !== "sse") {
        url.searchParams.set("alt", "sse");
      }
      let requestInit = {};
      requestInit.body = request.body;
      requestInit = await this.includeExtraHttpOptionsToRequestInit(requestInit, patchedHttpOptions, request.abortSignal);
      return this.streamApiCall(url, requestInit, request.httpMethod);
    }
    async includeExtraHttpOptionsToRequestInit(requestInit, httpOptions, abortSignal) {
      if (httpOptions && httpOptions.timeout || abortSignal) {
        const abortController = new AbortController();
        const signal = abortController.signal;
        if (httpOptions.timeout && (httpOptions === null || httpOptions === void 0 ? void 0 : httpOptions.timeout) > 0) {
          const timeoutHandle = setTimeout(() => abortController.abort(), httpOptions.timeout);
          if (timeoutHandle && typeof timeoutHandle.unref === "function") {
            timeoutHandle.unref();
          }
        }
        if (abortSignal) {
          abortSignal.addEventListener("abort", () => {
            abortController.abort();
          });
        }
        requestInit.signal = signal;
      }
      if (httpOptions && httpOptions.extraBody !== null) {
        includeExtraBodyToRequestInit(requestInit, httpOptions.extraBody);
      }
      requestInit.headers = await this.getHeadersInternal(httpOptions);
      return requestInit;
    }
    async unaryApiCall(url, requestInit, httpMethod) {
      return this.apiCall(url.toString(), Object.assign(Object.assign({}, requestInit), { method: httpMethod })).then(async (response) => {
        await throwErrorIfNotOK(response);
        return new HttpResponse(response);
      }).catch((e) => {
        if (e instanceof Error) {
          throw e;
        } else {
          throw new Error(JSON.stringify(e));
        }
      });
    }
    async streamApiCall(url, requestInit, httpMethod) {
      return this.apiCall(url.toString(), Object.assign(Object.assign({}, requestInit), { method: httpMethod })).then(async (response) => {
        await throwErrorIfNotOK(response);
        return this.processStreamResponse(response);
      }).catch((e) => {
        if (e instanceof Error) {
          throw e;
        } else {
          throw new Error(JSON.stringify(e));
        }
      });
    }
    processStreamResponse(response) {
      var _a;
      return __asyncGenerator(this, arguments, function* processStreamResponse_1() {
        const reader = (_a = response === null || response === void 0 ? void 0 : response.body) === null || _a === void 0 ? void 0 : _a.getReader();
        const decoder = new TextDecoder("utf-8");
        if (!reader) {
          throw new Error("Response body is empty");
        }
        try {
          let buffer = "";
          while (true) {
            const { done, value } = yield __await(reader.read());
            if (done) {
              if (buffer.trim().length > 0) {
                throw new Error("Incomplete JSON segment at the end");
              }
              break;
            }
            const chunkString = decoder.decode(value, { stream: true });
            try {
              const chunkJson = JSON.parse(chunkString);
              if ("error" in chunkJson) {
                const errorJson = JSON.parse(JSON.stringify(chunkJson["error"]));
                const status = errorJson["status"];
                const code = errorJson["code"];
                const errorMessage = `got status: ${status}. ${JSON.stringify(chunkJson)}`;
                if (code >= 400 && code < 600) {
                  const apiError = new ApiError({
                    message: errorMessage,
                    status: code
                  });
                  throw apiError;
                }
              }
            } catch (e) {
              const error = e;
              if (error.name === "ApiError") {
                throw e;
              }
            }
            buffer += chunkString;
            let match = buffer.match(responseLineRE);
            while (match) {
              const processedChunkString = match[1];
              try {
                const partialResponse = new Response(processedChunkString, {
                  headers: response === null || response === void 0 ? void 0 : response.headers,
                  status: response === null || response === void 0 ? void 0 : response.status,
                  statusText: response === null || response === void 0 ? void 0 : response.statusText
                });
                yield yield __await(new HttpResponse(partialResponse));
                buffer = buffer.slice(match[0].length);
                match = buffer.match(responseLineRE);
              } catch (e) {
                throw new Error(`exception parsing stream chunk ${processedChunkString}. ${e}`);
              }
            }
          }
        } finally {
          reader.releaseLock();
        }
      });
    }
    async apiCall(url, requestInit) {
      return fetch(url, requestInit).catch((e) => {
        throw new Error(`exception ${e} sending request`);
      });
    }
    getDefaultHeaders() {
      const headers = {};
      const versionHeaderValue = LIBRARY_LABEL + " " + this.clientOptions.userAgentExtra;
      headers[USER_AGENT_HEADER] = versionHeaderValue;
      headers[GOOGLE_API_CLIENT_HEADER] = versionHeaderValue;
      headers[CONTENT_TYPE_HEADER] = "application/json";
      return headers;
    }
    async getHeadersInternal(httpOptions) {
      const headers = new Headers();
      if (httpOptions && httpOptions.headers) {
        for (const [key, value] of Object.entries(httpOptions.headers)) {
          headers.append(key, value);
        }
        if (httpOptions.timeout && httpOptions.timeout > 0) {
          headers.append(SERVER_TIMEOUT_HEADER, String(Math.ceil(httpOptions.timeout / 1e3)));
        }
      }
      await this.clientOptions.auth.addAuthHeaders(headers);
      return headers;
    }
    /**
     * Uploads a file asynchronously using Gemini API only, this is not supported
     * in Vertex AI.
     *
     * @param file The string path to the file to be uploaded or a Blob object.
     * @param config Optional parameters specified in the `UploadFileConfig`
     *     interface. @see {@link UploadFileConfig}
     * @return A promise that resolves to a `File` object.
     * @throws An error if called on a Vertex AI client.
     * @throws An error if the `mimeType` is not provided and can not be inferred,
     */
    async uploadFile(file, config) {
      var _a;
      const fileToUpload = {};
      if (config != null) {
        fileToUpload.mimeType = config.mimeType;
        fileToUpload.name = config.name;
        fileToUpload.displayName = config.displayName;
      }
      if (fileToUpload.name && !fileToUpload.name.startsWith("files/")) {
        fileToUpload.name = `files/${fileToUpload.name}`;
      }
      const uploader = this.clientOptions.uploader;
      const fileStat = await uploader.stat(file);
      fileToUpload.sizeBytes = String(fileStat.size);
      const mimeType = (_a = config === null || config === void 0 ? void 0 : config.mimeType) !== null && _a !== void 0 ? _a : fileStat.type;
      if (mimeType === void 0 || mimeType === "") {
        throw new Error("Can not determine mimeType. Please provide mimeType in the config.");
      }
      fileToUpload.mimeType = mimeType;
      const uploadUrl = await this.fetchUploadUrl(fileToUpload, config);
      return uploader.upload(file, uploadUrl, this);
    }
    /**
     * Downloads a file asynchronously to the specified path.
     *
     * @params params - The parameters for the download request, see {@link
     * DownloadFileParameters}
     */
    async downloadFile(params) {
      const downloader = this.clientOptions.downloader;
      await downloader.download(params, this);
    }
    async fetchUploadUrl(file, config) {
      var _a;
      let httpOptions = {};
      if (config === null || config === void 0 ? void 0 : config.httpOptions) {
        httpOptions = config.httpOptions;
      } else {
        httpOptions = {
          apiVersion: "",
          headers: {
            "Content-Type": "application/json",
            "X-Goog-Upload-Protocol": "resumable",
            "X-Goog-Upload-Command": "start",
            "X-Goog-Upload-Header-Content-Length": `${file.sizeBytes}`,
            "X-Goog-Upload-Header-Content-Type": `${file.mimeType}`
          }
        };
      }
      const body = {
        "file": file
      };
      const httpResponse = await this.request({
        path: formatMap("upload/v1beta/files", body["_url"]),
        body: JSON.stringify(body),
        httpMethod: "POST",
        httpOptions
      });
      if (!httpResponse || !(httpResponse === null || httpResponse === void 0 ? void 0 : httpResponse.headers)) {
        throw new Error("Server did not return an HttpResponse or the returned HttpResponse did not have headers.");
      }
      const uploadUrl = (_a = httpResponse === null || httpResponse === void 0 ? void 0 : httpResponse.headers) === null || _a === void 0 ? void 0 : _a["x-goog-upload-url"];
      if (uploadUrl === void 0) {
        throw new Error("Failed to get upload url. Server did not return the x-google-upload-url in the headers");
      }
      return uploadUrl;
    }
  };
  async function throwErrorIfNotOK(response) {
    var _a;
    if (response === void 0) {
      throw new Error("response is undefined");
    }
    if (!response.ok) {
      const status = response.status;
      let errorBody;
      if ((_a = response.headers.get("content-type")) === null || _a === void 0 ? void 0 : _a.includes("application/json")) {
        errorBody = await response.json();
      } else {
        errorBody = {
          error: {
            message: await response.text(),
            code: response.status,
            status: response.statusText
          }
        };
      }
      const errorMessage = JSON.stringify(errorBody);
      if (status >= 400 && status < 600) {
        const apiError = new ApiError({
          message: errorMessage,
          status
        });
        throw apiError;
      }
      throw new Error(errorMessage);
    }
  }
  function includeExtraBodyToRequestInit(requestInit, extraBody) {
    if (!extraBody || Object.keys(extraBody).length === 0) {
      return;
    }
    if (requestInit.body instanceof Blob) {
      console.warn("includeExtraBodyToRequestInit: extraBody provided but current request body is a Blob. extraBody will be ignored as merging is not supported for Blob bodies.");
      return;
    }
    let currentBodyObject = {};
    if (typeof requestInit.body === "string" && requestInit.body.length > 0) {
      try {
        const parsedBody = JSON.parse(requestInit.body);
        if (typeof parsedBody === "object" && parsedBody !== null && !Array.isArray(parsedBody)) {
          currentBodyObject = parsedBody;
        } else {
          console.warn("includeExtraBodyToRequestInit: Original request body is valid JSON but not a non-array object. Skip applying extraBody to the request body.");
          return;
        }
      } catch (e) {
        console.warn("includeExtraBodyToRequestInit: Original request body is not valid JSON. Skip applying extraBody to the request body.");
        return;
      }
    }
    function deepMerge(target, source) {
      const output = Object.assign({}, target);
      for (const key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          const sourceValue = source[key];
          const targetValue = output[key];
          if (sourceValue && typeof sourceValue === "object" && !Array.isArray(sourceValue) && targetValue && typeof targetValue === "object" && !Array.isArray(targetValue)) {
            output[key] = deepMerge(targetValue, sourceValue);
          } else {
            if (targetValue && sourceValue && typeof targetValue !== typeof sourceValue) {
              console.warn(`includeExtraBodyToRequestInit:deepMerge: Type mismatch for key "${key}". Original type: ${typeof targetValue}, New type: ${typeof sourceValue}. Overwriting.`);
            }
            output[key] = sourceValue;
          }
        }
      }
      return output;
    }
    const mergedBody = deepMerge(currentBodyObject, extraBody);
    requestInit.body = JSON.stringify(mergedBody);
  }
  var MCP_LABEL = "mcp_used/unknown";
  var hasMcpToolUsageFromMcpToTool = false;
  function hasMcpToolUsage(tools) {
    for (const tool of tools) {
      if (isMcpCallableTool(tool)) {
        return true;
      }
      if (typeof tool === "object" && "inputSchema" in tool) {
        return true;
      }
    }
    return hasMcpToolUsageFromMcpToTool;
  }
  function setMcpUsageHeader(headers) {
    var _a;
    const existingHeader = (_a = headers[GOOGLE_API_CLIENT_HEADER]) !== null && _a !== void 0 ? _a : "";
    headers[GOOGLE_API_CLIENT_HEADER] = (existingHeader + ` ${MCP_LABEL}`).trimStart();
  }
  function isMcpCallableTool(object) {
    return object !== null && typeof object === "object" && object instanceof McpCallableTool;
  }
  function listAllTools(mcpClient, maxTools = 100) {
    return __asyncGenerator(this, arguments, function* listAllTools_1() {
      let cursor = void 0;
      let numTools = 0;
      while (numTools < maxTools) {
        const t = yield __await(mcpClient.listTools({ cursor }));
        for (const tool of t.tools) {
          yield yield __await(tool);
          numTools++;
        }
        if (!t.nextCursor) {
          break;
        }
        cursor = t.nextCursor;
      }
    });
  }
  var McpCallableTool = class _McpCallableTool {
    constructor(mcpClients = [], config) {
      this.mcpTools = [];
      this.functionNameToMcpClient = {};
      this.mcpClients = mcpClients;
      this.config = config;
    }
    /**
     * Creates a McpCallableTool.
     */
    static create(mcpClients, config) {
      return new _McpCallableTool(mcpClients, config);
    }
    /**
     * Validates the function names are not duplicate and initialize the function
     * name to MCP client mapping.
     *
     * @throws {Error} if the MCP tools from the MCP clients have duplicate tool
     *     names.
     */
    async initialize() {
      var _a, e_1, _b, _c;
      if (this.mcpTools.length > 0) {
        return;
      }
      const functionMap = {};
      const mcpTools = [];
      for (const mcpClient of this.mcpClients) {
        try {
          for (var _d = true, _e = (e_1 = void 0, __asyncValues(listAllTools(mcpClient))), _f; _f = await _e.next(), _a = _f.done, !_a; _d = true) {
            _c = _f.value;
            _d = false;
            const mcpTool = _c;
            mcpTools.push(mcpTool);
            const mcpToolName = mcpTool.name;
            if (functionMap[mcpToolName]) {
              throw new Error(`Duplicate function name ${mcpToolName} found in MCP tools. Please ensure function names are unique.`);
            }
            functionMap[mcpToolName] = mcpClient;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (!_d && !_a && (_b = _e.return)) await _b.call(_e);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }
      this.mcpTools = mcpTools;
      this.functionNameToMcpClient = functionMap;
    }
    async tool() {
      await this.initialize();
      return mcpToolsToGeminiTool(this.mcpTools, this.config);
    }
    async callTool(functionCalls) {
      await this.initialize();
      const functionCallResponseParts = [];
      for (const functionCall of functionCalls) {
        if (functionCall.name in this.functionNameToMcpClient) {
          const mcpClient = this.functionNameToMcpClient[functionCall.name];
          let requestOptions = void 0;
          if (this.config.timeout) {
            requestOptions = {
              timeout: this.config.timeout
            };
          }
          const callToolResponse = await mcpClient.callTool(
            {
              name: functionCall.name,
              arguments: functionCall.args
            },
            // Set the result schema to undefined to allow MCP to rely on the
            // default schema.
            void 0,
            requestOptions
          );
          functionCallResponseParts.push({
            functionResponse: {
              name: functionCall.name,
              response: callToolResponse.isError ? { error: callToolResponse } : callToolResponse
            }
          });
        }
      }
      return functionCallResponseParts;
    }
  };
  async function handleWebSocketMessage$1(apiClient, onmessage, event) {
    const serverMessage = new LiveMusicServerMessage();
    let data;
    if (event.data instanceof Blob) {
      data = JSON.parse(await event.data.text());
    } else {
      data = JSON.parse(event.data);
    }
    const response = liveMusicServerMessageFromMldev(data);
    Object.assign(serverMessage, response);
    onmessage(serverMessage);
  }
  var LiveMusic = class {
    constructor(apiClient, auth, webSocketFactory) {
      this.apiClient = apiClient;
      this.auth = auth;
      this.webSocketFactory = webSocketFactory;
    }
    /**
         Establishes a connection to the specified model and returns a
         LiveMusicSession object representing that connection.
    
         @experimental
    
         @remarks
    
         @param params - The parameters for establishing a connection to the model.
         @return A live session.
    
         @example
         ```ts
         let model = 'models/lyria-realtime-exp';
         const session = await ai.live.music.connect({
           model: model,
           callbacks: {
             onmessage: (e: MessageEvent) => {
               console.log('Received message from the server: %s\n', debug(e.data));
             },
             onerror: (e: ErrorEvent) => {
               console.log('Error occurred: %s\n', debug(e.error));
             },
             onclose: (e: CloseEvent) => {
               console.log('Connection closed.');
             },
           },
         });
         ```
        */
    async connect(params) {
      var _a, _b;
      if (this.apiClient.isVertexAI()) {
        throw new Error("Live music is not supported for Vertex AI.");
      }
      console.warn("Live music generation is experimental and may change in future versions.");
      const websocketBaseUrl = this.apiClient.getWebsocketBaseUrl();
      const apiVersion = this.apiClient.getApiVersion();
      const headers = mapToHeaders$1(this.apiClient.getDefaultHeaders());
      const apiKey = this.apiClient.getApiKey();
      const url = `${websocketBaseUrl}/ws/google.ai.generativelanguage.${apiVersion}.GenerativeService.BidiGenerateMusic?key=${apiKey}`;
      let onopenResolve = () => {
      };
      const onopenPromise = new Promise((resolve) => {
        onopenResolve = resolve;
      });
      const callbacks = params.callbacks;
      const onopenAwaitedCallback = function() {
        onopenResolve({});
      };
      const apiClient = this.apiClient;
      const websocketCallbacks = {
        onopen: onopenAwaitedCallback,
        onmessage: (event) => {
          void handleWebSocketMessage$1(apiClient, callbacks.onmessage, event);
        },
        onerror: (_a = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onerror) !== null && _a !== void 0 ? _a : function(e) {
        },
        onclose: (_b = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onclose) !== null && _b !== void 0 ? _b : function(e) {
        }
      };
      const conn = this.webSocketFactory.create(url, headersToMap$1(headers), websocketCallbacks);
      conn.connect();
      await onopenPromise;
      const model = tModel(this.apiClient, params.model);
      const setup = liveMusicClientSetupToMldev({
        model
      });
      const clientMessage = liveMusicClientMessageToMldev({ setup });
      conn.send(JSON.stringify(clientMessage));
      return new LiveMusicSession(conn, this.apiClient);
    }
  };
  var LiveMusicSession = class {
    constructor(conn, apiClient) {
      this.conn = conn;
      this.apiClient = apiClient;
    }
    /**
        Sets inputs to steer music generation. Updates the session's current
        weighted prompts.
    
        @param params - Contains one property, `weightedPrompts`.
    
          - `weightedPrompts` to send to the model; weights are normalized to
            sum to 1.0.
    
        @experimental
       */
    async setWeightedPrompts(params) {
      if (!params.weightedPrompts || Object.keys(params.weightedPrompts).length === 0) {
        throw new Error("Weighted prompts must be set and contain at least one entry.");
      }
      const setWeightedPromptsParameters = liveMusicSetWeightedPromptsParametersToMldev(params);
      const clientContent = liveMusicClientContentToMldev(setWeightedPromptsParameters);
      this.conn.send(JSON.stringify({ clientContent }));
    }
    /**
        Sets a configuration to the model. Updates the session's current
        music generation config.
    
        @param params - Contains one property, `musicGenerationConfig`.
    
          - `musicGenerationConfig` to set in the model. Passing an empty or
        undefined config to the model will reset the config to defaults.
    
        @experimental
       */
    async setMusicGenerationConfig(params) {
      if (!params.musicGenerationConfig) {
        params.musicGenerationConfig = {};
      }
      const setConfigParameters = liveMusicSetConfigParametersToMldev(params);
      const clientMessage = liveMusicClientMessageToMldev(setConfigParameters);
      this.conn.send(JSON.stringify(clientMessage));
    }
    sendPlaybackControl(playbackControl) {
      const clientMessage = liveMusicClientMessageToMldev({
        playbackControl
      });
      this.conn.send(JSON.stringify(clientMessage));
    }
    /**
     * Start the music stream.
     *
     * @experimental
     */
    play() {
      this.sendPlaybackControl(LiveMusicPlaybackControl.PLAY);
    }
    /**
     * Temporarily halt the music stream. Use `play` to resume from the current
     * position.
     *
     * @experimental
     */
    pause() {
      this.sendPlaybackControl(LiveMusicPlaybackControl.PAUSE);
    }
    /**
     * Stop the music stream and reset the state. Retains the current prompts
     * and config.
     *
     * @experimental
     */
    stop() {
      this.sendPlaybackControl(LiveMusicPlaybackControl.STOP);
    }
    /**
     * Resets the context of the music generation without stopping it.
     * Retains the current prompts and config.
     *
     * @experimental
     */
    resetContext() {
      this.sendPlaybackControl(LiveMusicPlaybackControl.RESET_CONTEXT);
    }
    /**
         Terminates the WebSocket connection.
    
         @experimental
       */
    close() {
      this.conn.close();
    }
  };
  function headersToMap$1(headers) {
    const headerMap = {};
    headers.forEach((value, key) => {
      headerMap[key] = value;
    });
    return headerMap;
  }
  function mapToHeaders$1(map) {
    const headers = new Headers();
    for (const [key, value] of Object.entries(map)) {
      headers.append(key, value);
    }
    return headers;
  }
  var FUNCTION_RESPONSE_REQUIRES_ID = "FunctionResponse request must have an `id` field from the response of a ToolCall.FunctionalCalls in Google AI.";
  async function handleWebSocketMessage(apiClient, onmessage, event) {
    const serverMessage = new LiveServerMessage();
    let jsonData;
    if (event.data instanceof Blob) {
      jsonData = await event.data.text();
    } else if (event.data instanceof ArrayBuffer) {
      jsonData = new TextDecoder().decode(event.data);
    } else {
      jsonData = event.data;
    }
    const data = JSON.parse(jsonData);
    if (apiClient.isVertexAI()) {
      const resp = liveServerMessageFromVertex(data);
      Object.assign(serverMessage, resp);
    } else {
      const resp = liveServerMessageFromMldev(data);
      Object.assign(serverMessage, resp);
    }
    onmessage(serverMessage);
  }
  var Live = class {
    constructor(apiClient, auth, webSocketFactory) {
      this.apiClient = apiClient;
      this.auth = auth;
      this.webSocketFactory = webSocketFactory;
      this.music = new LiveMusic(this.apiClient, this.auth, this.webSocketFactory);
    }
    /**
         Establishes a connection to the specified model with the given
         configuration and returns a Session object representing that connection.
    
         @experimental Built-in MCP support is an experimental feature, may change in
         future versions.
    
         @remarks
    
         @param params - The parameters for establishing a connection to the model.
         @return A live session.
    
         @example
         ```ts
         let model: string;
         if (GOOGLE_GENAI_USE_VERTEXAI) {
           model = 'gemini-2.0-flash-live-preview-04-09';
         } else {
           model = 'gemini-live-2.5-flash-preview';
         }
         const session = await ai.live.connect({
           model: model,
           config: {
             responseModalities: [Modality.AUDIO],
           },
           callbacks: {
             onopen: () => {
               console.log('Connected to the socket.');
             },
             onmessage: (e: MessageEvent) => {
               console.log('Received message from the server: %s\n', debug(e.data));
             },
             onerror: (e: ErrorEvent) => {
               console.log('Error occurred: %s\n', debug(e.error));
             },
             onclose: (e: CloseEvent) => {
               console.log('Connection closed.');
             },
           },
         });
         ```
        */
    async connect(params) {
      var _a, _b, _c, _d, _e, _f;
      if (params.config && params.config.httpOptions) {
        throw new Error("The Live module does not support httpOptions at request-level in LiveConnectConfig yet. Please use the client-level httpOptions configuration instead.");
      }
      const websocketBaseUrl = this.apiClient.getWebsocketBaseUrl();
      const apiVersion = this.apiClient.getApiVersion();
      let url;
      const clientHeaders = this.apiClient.getHeaders();
      if (params.config && params.config.tools && hasMcpToolUsage(params.config.tools)) {
        setMcpUsageHeader(clientHeaders);
      }
      const headers = mapToHeaders(clientHeaders);
      if (this.apiClient.isVertexAI()) {
        url = `${websocketBaseUrl}/ws/google.cloud.aiplatform.${apiVersion}.LlmBidiService/BidiGenerateContent`;
        await this.auth.addAuthHeaders(headers);
      } else {
        const apiKey = this.apiClient.getApiKey();
        let method = "BidiGenerateContent";
        let keyName = "key";
        if (apiKey === null || apiKey === void 0 ? void 0 : apiKey.startsWith("auth_tokens/")) {
          console.warn("Warning: Ephemeral token support is experimental and may change in future versions.");
          if (apiVersion !== "v1alpha") {
            console.warn("Warning: The SDK's ephemeral token support is in v1alpha only. Please use const ai = new GoogleGenAI({apiKey: token.name, httpOptions: { apiVersion: 'v1alpha' }}); before session connection.");
          }
          method = "BidiGenerateContentConstrained";
          keyName = "access_token";
        }
        url = `${websocketBaseUrl}/ws/google.ai.generativelanguage.${apiVersion}.GenerativeService.${method}?${keyName}=${apiKey}`;
      }
      let onopenResolve = () => {
      };
      const onopenPromise = new Promise((resolve) => {
        onopenResolve = resolve;
      });
      const callbacks = params.callbacks;
      const onopenAwaitedCallback = function() {
        var _a2;
        (_a2 = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onopen) === null || _a2 === void 0 ? void 0 : _a2.call(callbacks);
        onopenResolve({});
      };
      const apiClient = this.apiClient;
      const websocketCallbacks = {
        onopen: onopenAwaitedCallback,
        onmessage: (event) => {
          void handleWebSocketMessage(apiClient, callbacks.onmessage, event);
        },
        onerror: (_a = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onerror) !== null && _a !== void 0 ? _a : function(e) {
        },
        onclose: (_b = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onclose) !== null && _b !== void 0 ? _b : function(e) {
        }
      };
      const conn = this.webSocketFactory.create(url, headersToMap(headers), websocketCallbacks);
      conn.connect();
      await onopenPromise;
      let transformedModel = tModel(this.apiClient, params.model);
      if (this.apiClient.isVertexAI() && transformedModel.startsWith("publishers/")) {
        const project = this.apiClient.getProject();
        const location = this.apiClient.getLocation();
        transformedModel = `projects/${project}/locations/${location}/` + transformedModel;
      }
      let clientMessage = {};
      if (this.apiClient.isVertexAI() && ((_c = params.config) === null || _c === void 0 ? void 0 : _c.responseModalities) === void 0) {
        if (params.config === void 0) {
          params.config = { responseModalities: [Modality.AUDIO] };
        } else {
          params.config.responseModalities = [Modality.AUDIO];
        }
      }
      if ((_d = params.config) === null || _d === void 0 ? void 0 : _d.generationConfig) {
        console.warn("Setting `LiveConnectConfig.generation_config` is deprecated, please set the fields on `LiveConnectConfig` directly. This will become an error in a future version (not before Q3 2025).");
      }
      const inputTools = (_f = (_e = params.config) === null || _e === void 0 ? void 0 : _e.tools) !== null && _f !== void 0 ? _f : [];
      const convertedTools = [];
      for (const tool of inputTools) {
        if (this.isCallableTool(tool)) {
          const callableTool = tool;
          convertedTools.push(await callableTool.tool());
        } else {
          convertedTools.push(tool);
        }
      }
      if (convertedTools.length > 0) {
        params.config.tools = convertedTools;
      }
      const liveConnectParameters = {
        model: transformedModel,
        config: params.config,
        callbacks: params.callbacks
      };
      if (this.apiClient.isVertexAI()) {
        clientMessage = liveConnectParametersToVertex(this.apiClient, liveConnectParameters);
      } else {
        clientMessage = liveConnectParametersToMldev(this.apiClient, liveConnectParameters);
      }
      delete clientMessage["config"];
      conn.send(JSON.stringify(clientMessage));
      return new Session(conn, this.apiClient);
    }
    // TODO: b/416041229 - Abstract this method to a common place.
    isCallableTool(tool) {
      return "callTool" in tool && typeof tool.callTool === "function";
    }
  };
  var defaultLiveSendClientContentParamerters = {
    turnComplete: true
  };
  var Session = class {
    constructor(conn, apiClient) {
      this.conn = conn;
      this.apiClient = apiClient;
    }
    tLiveClientContent(apiClient, params) {
      if (params.turns !== null && params.turns !== void 0) {
        let contents = [];
        try {
          contents = tContents(params.turns);
          if (apiClient.isVertexAI()) {
            contents = contents.map((item) => contentToVertex(item));
          } else {
            contents = contents.map((item) => contentToMldev$1(item));
          }
        } catch (_a) {
          throw new Error(`Failed to parse client content "turns", type: '${typeof params.turns}'`);
        }
        return {
          clientContent: { turns: contents, turnComplete: params.turnComplete }
        };
      }
      return {
        clientContent: { turnComplete: params.turnComplete }
      };
    }
    tLiveClienttToolResponse(apiClient, params) {
      let functionResponses = [];
      if (params.functionResponses == null) {
        throw new Error("functionResponses is required.");
      }
      if (!Array.isArray(params.functionResponses)) {
        functionResponses = [params.functionResponses];
      } else {
        functionResponses = params.functionResponses;
      }
      if (functionResponses.length === 0) {
        throw new Error("functionResponses is required.");
      }
      for (const functionResponse of functionResponses) {
        if (typeof functionResponse !== "object" || functionResponse === null || !("name" in functionResponse) || !("response" in functionResponse)) {
          throw new Error(`Could not parse function response, type '${typeof functionResponse}'.`);
        }
        if (!apiClient.isVertexAI() && !("id" in functionResponse)) {
          throw new Error(FUNCTION_RESPONSE_REQUIRES_ID);
        }
      }
      const clientMessage = {
        toolResponse: { functionResponses }
      };
      return clientMessage;
    }
    /**
        Send a message over the established connection.
    
        @param params - Contains two **optional** properties, `turns` and
            `turnComplete`.
    
          - `turns` will be converted to a `Content[]`
          - `turnComplete: true` [default] indicates that you are done sending
            content and expect a response. If `turnComplete: false`, the server
            will wait for additional messages before starting generation.
    
        @experimental
    
        @remarks
        There are two ways to send messages to the live API:
        `sendClientContent` and `sendRealtimeInput`.
    
        `sendClientContent` messages are added to the model context **in order**.
        Having a conversation using `sendClientContent` messages is roughly
        equivalent to using the `Chat.sendMessageStream`, except that the state of
        the `chat` history is stored on the API server instead of locally.
    
        Because of `sendClientContent`'s order guarantee, the model cannot respons
        as quickly to `sendClientContent` messages as to `sendRealtimeInput`
        messages. This makes the biggest difference when sending objects that have
        significant preprocessing time (typically images).
    
        The `sendClientContent` message sends a `Content[]`
        which has more options than the `Blob` sent by `sendRealtimeInput`.
    
        So the main use-cases for `sendClientContent` over `sendRealtimeInput` are:
    
        - Sending anything that can't be represented as a `Blob` (text,
        `sendClientContent({turns="Hello?"}`)).
        - Managing turns when not using audio input and voice activity detection.
          (`sendClientContent({turnComplete:true})` or the short form
        `sendClientContent()`)
        - Prefilling a conversation context
          ```
          sendClientContent({
              turns: [
                Content({role:user, parts:...}),
                Content({role:user, parts:...}),
                ...
              ]
          })
          ```
        @experimental
       */
    sendClientContent(params) {
      params = Object.assign(Object.assign({}, defaultLiveSendClientContentParamerters), params);
      const clientMessage = this.tLiveClientContent(this.apiClient, params);
      this.conn.send(JSON.stringify(clientMessage));
    }
    /**
        Send a realtime message over the established connection.
    
        @param params - Contains one property, `media`.
    
          - `media` will be converted to a `Blob`
    
        @experimental
    
        @remarks
        Use `sendRealtimeInput` for realtime audio chunks and video frames (images).
    
        With `sendRealtimeInput` the api will respond to audio automatically
        based on voice activity detection (VAD).
    
        `sendRealtimeInput` is optimized for responsivness at the expense of
        deterministic ordering guarantees. Audio and video tokens are to the
        context when they become available.
    
        Note: The Call signature expects a `Blob` object, but only a subset
        of audio and image mimetypes are allowed.
       */
    sendRealtimeInput(params) {
      let clientMessage = {};
      if (this.apiClient.isVertexAI()) {
        clientMessage = {
          "realtimeInput": liveSendRealtimeInputParametersToVertex(params)
        };
      } else {
        clientMessage = {
          "realtimeInput": liveSendRealtimeInputParametersToMldev(params)
        };
      }
      this.conn.send(JSON.stringify(clientMessage));
    }
    /**
        Send a function response message over the established connection.
    
        @param params - Contains property `functionResponses`.
    
          - `functionResponses` will be converted to a `functionResponses[]`
    
        @remarks
        Use `sendFunctionResponse` to reply to `LiveServerToolCall` from the server.
    
        Use {@link types.LiveConnectConfig#tools} to configure the callable functions.
    
        @experimental
       */
    sendToolResponse(params) {
      if (params.functionResponses == null) {
        throw new Error("Tool response parameters are required.");
      }
      const clientMessage = this.tLiveClienttToolResponse(this.apiClient, params);
      this.conn.send(JSON.stringify(clientMessage));
    }
    /**
         Terminates the WebSocket connection.
    
         @experimental
    
         @example
         ```ts
         let model: string;
         if (GOOGLE_GENAI_USE_VERTEXAI) {
           model = 'gemini-2.0-flash-live-preview-04-09';
         } else {
           model = 'gemini-live-2.5-flash-preview';
         }
         const session = await ai.live.connect({
           model: model,
           config: {
             responseModalities: [Modality.AUDIO],
           }
         });
    
         session.close();
         ```
       */
    close() {
      this.conn.close();
    }
  };
  function headersToMap(headers) {
    const headerMap = {};
    headers.forEach((value, key) => {
      headerMap[key] = value;
    });
    return headerMap;
  }
  function mapToHeaders(map) {
    const headers = new Headers();
    for (const [key, value] of Object.entries(map)) {
      headers.append(key, value);
    }
    return headers;
  }
  var DEFAULT_MAX_REMOTE_CALLS = 10;
  function shouldDisableAfc(config) {
    var _a, _b, _c;
    if ((_a = config === null || config === void 0 ? void 0 : config.automaticFunctionCalling) === null || _a === void 0 ? void 0 : _a.disable) {
      return true;
    }
    let callableToolsPresent = false;
    for (const tool of (_b = config === null || config === void 0 ? void 0 : config.tools) !== null && _b !== void 0 ? _b : []) {
      if (isCallableTool(tool)) {
        callableToolsPresent = true;
        break;
      }
    }
    if (!callableToolsPresent) {
      return true;
    }
    const maxCalls = (_c = config === null || config === void 0 ? void 0 : config.automaticFunctionCalling) === null || _c === void 0 ? void 0 : _c.maximumRemoteCalls;
    if (maxCalls && (maxCalls < 0 || !Number.isInteger(maxCalls)) || maxCalls == 0) {
      console.warn("Invalid maximumRemoteCalls value provided for automatic function calling. Disabled automatic function calling. Please provide a valid integer value greater than 0. maximumRemoteCalls provided:", maxCalls);
      return true;
    }
    return false;
  }
  function isCallableTool(tool) {
    return "callTool" in tool && typeof tool.callTool === "function";
  }
  function hasCallableTools(params) {
    var _a, _b, _c;
    return (_c = (_b = (_a = params.config) === null || _a === void 0 ? void 0 : _a.tools) === null || _b === void 0 ? void 0 : _b.some((tool) => isCallableTool(tool))) !== null && _c !== void 0 ? _c : false;
  }
  function hasNonCallableTools(params) {
    var _a, _b, _c;
    return (_c = (_b = (_a = params.config) === null || _a === void 0 ? void 0 : _a.tools) === null || _b === void 0 ? void 0 : _b.some((tool) => !isCallableTool(tool))) !== null && _c !== void 0 ? _c : false;
  }
  function shouldAppendAfcHistory(config) {
    var _a;
    return !((_a = config === null || config === void 0 ? void 0 : config.automaticFunctionCalling) === null || _a === void 0 ? void 0 : _a.ignoreCallHistory);
  }
  var Models = class extends BaseModule {
    constructor(apiClient) {
      super();
      this.apiClient = apiClient;
      this.generateContent = async (params) => {
        var _a, _b, _c, _d, _e;
        const transformedParams = await this.processParamsMaybeAddMcpUsage(params);
        this.maybeMoveToResponseJsonSchem(params);
        if (!hasCallableTools(params) || shouldDisableAfc(params.config)) {
          return await this.generateContentInternal(transformedParams);
        }
        if (hasNonCallableTools(params)) {
          throw new Error("Automatic function calling with CallableTools and Tools is not yet supported.");
        }
        let response;
        let functionResponseContent;
        const automaticFunctionCallingHistory = tContents(transformedParams.contents);
        const maxRemoteCalls = (_c = (_b = (_a = transformedParams.config) === null || _a === void 0 ? void 0 : _a.automaticFunctionCalling) === null || _b === void 0 ? void 0 : _b.maximumRemoteCalls) !== null && _c !== void 0 ? _c : DEFAULT_MAX_REMOTE_CALLS;
        let remoteCalls = 0;
        while (remoteCalls < maxRemoteCalls) {
          response = await this.generateContentInternal(transformedParams);
          if (!response.functionCalls || response.functionCalls.length === 0) {
            break;
          }
          const responseContent = response.candidates[0].content;
          const functionResponseParts = [];
          for (const tool of (_e = (_d = params.config) === null || _d === void 0 ? void 0 : _d.tools) !== null && _e !== void 0 ? _e : []) {
            if (isCallableTool(tool)) {
              const callableTool = tool;
              const parts = await callableTool.callTool(response.functionCalls);
              functionResponseParts.push(...parts);
            }
          }
          remoteCalls++;
          functionResponseContent = {
            role: "user",
            parts: functionResponseParts
          };
          transformedParams.contents = tContents(transformedParams.contents);
          transformedParams.contents.push(responseContent);
          transformedParams.contents.push(functionResponseContent);
          if (shouldAppendAfcHistory(transformedParams.config)) {
            automaticFunctionCallingHistory.push(responseContent);
            automaticFunctionCallingHistory.push(functionResponseContent);
          }
        }
        if (shouldAppendAfcHistory(transformedParams.config)) {
          response.automaticFunctionCallingHistory = automaticFunctionCallingHistory;
        }
        return response;
      };
      this.generateContentStream = async (params) => {
        this.maybeMoveToResponseJsonSchem(params);
        if (shouldDisableAfc(params.config)) {
          const transformedParams = await this.processParamsMaybeAddMcpUsage(params);
          return await this.generateContentStreamInternal(transformedParams);
        } else {
          return await this.processAfcStream(params);
        }
      };
      this.generateImages = async (params) => {
        return await this.generateImagesInternal(params).then((apiResponse) => {
          var _a;
          let positivePromptSafetyAttributes;
          const generatedImages = [];
          if (apiResponse === null || apiResponse === void 0 ? void 0 : apiResponse.generatedImages) {
            for (const generatedImage of apiResponse.generatedImages) {
              if (generatedImage && (generatedImage === null || generatedImage === void 0 ? void 0 : generatedImage.safetyAttributes) && ((_a = generatedImage === null || generatedImage === void 0 ? void 0 : generatedImage.safetyAttributes) === null || _a === void 0 ? void 0 : _a.contentType) === "Positive Prompt") {
                positivePromptSafetyAttributes = generatedImage === null || generatedImage === void 0 ? void 0 : generatedImage.safetyAttributes;
              } else {
                generatedImages.push(generatedImage);
              }
            }
          }
          let response;
          if (positivePromptSafetyAttributes) {
            response = {
              generatedImages,
              positivePromptSafetyAttributes,
              sdkHttpResponse: apiResponse.sdkHttpResponse
            };
          } else {
            response = {
              generatedImages,
              sdkHttpResponse: apiResponse.sdkHttpResponse
            };
          }
          return response;
        });
      };
      this.list = async (params) => {
        var _a;
        const defaultConfig = {
          queryBase: true
        };
        const actualConfig = Object.assign(Object.assign({}, defaultConfig), params === null || params === void 0 ? void 0 : params.config);
        const actualParams = {
          config: actualConfig
        };
        if (this.apiClient.isVertexAI()) {
          if (!actualParams.config.queryBase) {
            if ((_a = actualParams.config) === null || _a === void 0 ? void 0 : _a.filter) {
              throw new Error("Filtering tuned models list for Vertex AI is not currently supported");
            } else {
              actualParams.config.filter = "labels.tune-type:*";
            }
          }
        }
        return new Pager(PagedItem.PAGED_ITEM_MODELS, (x) => this.listInternal(x), await this.listInternal(actualParams), actualParams);
      };
      this.editImage = async (params) => {
        const paramsInternal = {
          model: params.model,
          prompt: params.prompt,
          referenceImages: [],
          config: params.config
        };
        if (params.referenceImages) {
          if (params.referenceImages) {
            paramsInternal.referenceImages = params.referenceImages.map((img) => img.toReferenceImageAPI());
          }
        }
        return await this.editImageInternal(paramsInternal);
      };
      this.upscaleImage = async (params) => {
        let apiConfig = {
          numberOfImages: 1,
          mode: "upscale"
        };
        if (params.config) {
          apiConfig = Object.assign(Object.assign({}, apiConfig), params.config);
        }
        const apiParams = {
          model: params.model,
          image: params.image,
          upscaleFactor: params.upscaleFactor,
          config: apiConfig
        };
        return await this.upscaleImageInternal(apiParams);
      };
      this.generateVideos = async (params) => {
        if ((params.prompt || params.image || params.video) && params.source) {
          throw new Error("Source and prompt/image/video are mutually exclusive. Please only use source.");
        }
        return await this.generateVideosInternal(params);
      };
    }
    /**
     * This logic is needed for GenerateContentConfig only.
     * Previously we made GenerateContentConfig.responseSchema field to accept
     * unknown. Since v1.9.0, we switch to use backend JSON schema support.
     * To maintain backward compatibility, we move the data that was treated as
     * JSON schema from the responseSchema field to the responseJsonSchema field.
     */
    maybeMoveToResponseJsonSchem(params) {
      if (params.config && params.config.responseSchema) {
        if (!params.config.responseJsonSchema) {
          if (Object.keys(params.config.responseSchema).includes("$schema")) {
            params.config.responseJsonSchema = params.config.responseSchema;
            delete params.config.responseSchema;
          }
        }
      }
      return;
    }
    /**
     * Transforms the CallableTools in the parameters to be simply Tools, it
     * copies the params into a new object and replaces the tools, it does not
     * modify the original params. Also sets the MCP usage header if there are
     * MCP tools in the parameters.
     */
    async processParamsMaybeAddMcpUsage(params) {
      var _a, _b, _c;
      const tools = (_a = params.config) === null || _a === void 0 ? void 0 : _a.tools;
      if (!tools) {
        return params;
      }
      const transformedTools = await Promise.all(tools.map(async (tool) => {
        if (isCallableTool(tool)) {
          const callableTool = tool;
          return await callableTool.tool();
        }
        return tool;
      }));
      const newParams = {
        model: params.model,
        contents: params.contents,
        config: Object.assign(Object.assign({}, params.config), { tools: transformedTools })
      };
      newParams.config.tools = transformedTools;
      if (params.config && params.config.tools && hasMcpToolUsage(params.config.tools)) {
        const headers = (_c = (_b = params.config.httpOptions) === null || _b === void 0 ? void 0 : _b.headers) !== null && _c !== void 0 ? _c : {};
        let newHeaders = Object.assign({}, headers);
        if (Object.keys(newHeaders).length === 0) {
          newHeaders = this.apiClient.getDefaultHeaders();
        }
        setMcpUsageHeader(newHeaders);
        newParams.config.httpOptions = Object.assign(Object.assign({}, params.config.httpOptions), { headers: newHeaders });
      }
      return newParams;
    }
    async initAfcToolsMap(params) {
      var _a, _b, _c;
      const afcTools = /* @__PURE__ */ new Map();
      for (const tool of (_b = (_a = params.config) === null || _a === void 0 ? void 0 : _a.tools) !== null && _b !== void 0 ? _b : []) {
        if (isCallableTool(tool)) {
          const callableTool = tool;
          const toolDeclaration = await callableTool.tool();
          for (const declaration of (_c = toolDeclaration.functionDeclarations) !== null && _c !== void 0 ? _c : []) {
            if (!declaration.name) {
              throw new Error("Function declaration name is required.");
            }
            if (afcTools.has(declaration.name)) {
              throw new Error(`Duplicate tool declaration name: ${declaration.name}`);
            }
            afcTools.set(declaration.name, callableTool);
          }
        }
      }
      return afcTools;
    }
    async processAfcStream(params) {
      var _a, _b, _c;
      const maxRemoteCalls = (_c = (_b = (_a = params.config) === null || _a === void 0 ? void 0 : _a.automaticFunctionCalling) === null || _b === void 0 ? void 0 : _b.maximumRemoteCalls) !== null && _c !== void 0 ? _c : DEFAULT_MAX_REMOTE_CALLS;
      let wereFunctionsCalled = false;
      let remoteCallCount = 0;
      const afcToolsMap = await this.initAfcToolsMap(params);
      return (function(models, afcTools, params2) {
        var _a2, _b2;
        return __asyncGenerator(this, arguments, function* () {
          var _c2, e_1, _d, _e;
          while (remoteCallCount < maxRemoteCalls) {
            if (wereFunctionsCalled) {
              remoteCallCount++;
              wereFunctionsCalled = false;
            }
            const transformedParams = yield __await(models.processParamsMaybeAddMcpUsage(params2));
            const response = yield __await(models.generateContentStreamInternal(transformedParams));
            const functionResponses = [];
            const responseContents = [];
            try {
              for (var _f = true, response_1 = (e_1 = void 0, __asyncValues(response)), response_1_1; response_1_1 = yield __await(response_1.next()), _c2 = response_1_1.done, !_c2; _f = true) {
                _e = response_1_1.value;
                _f = false;
                const chunk = _e;
                yield yield __await(chunk);
                if (chunk.candidates && ((_a2 = chunk.candidates[0]) === null || _a2 === void 0 ? void 0 : _a2.content)) {
                  responseContents.push(chunk.candidates[0].content);
                  for (const part of (_b2 = chunk.candidates[0].content.parts) !== null && _b2 !== void 0 ? _b2 : []) {
                    if (remoteCallCount < maxRemoteCalls && part.functionCall) {
                      if (!part.functionCall.name) {
                        throw new Error("Function call name was not returned by the model.");
                      }
                      if (!afcTools.has(part.functionCall.name)) {
                        throw new Error(`Automatic function calling was requested, but not all the tools the model used implement the CallableTool interface. Available tools: ${afcTools.keys()}, mising tool: ${part.functionCall.name}`);
                      } else {
                        const responseParts = yield __await(afcTools.get(part.functionCall.name).callTool([part.functionCall]));
                        functionResponses.push(...responseParts);
                      }
                    }
                  }
                }
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (!_f && !_c2 && (_d = response_1.return)) yield __await(_d.call(response_1));
              } finally {
                if (e_1) throw e_1.error;
              }
            }
            if (functionResponses.length > 0) {
              wereFunctionsCalled = true;
              const typedResponseChunk = new GenerateContentResponse();
              typedResponseChunk.candidates = [
                {
                  content: {
                    role: "user",
                    parts: functionResponses
                  }
                }
              ];
              yield yield __await(typedResponseChunk);
              const newContents = [];
              newContents.push(...responseContents);
              newContents.push({
                role: "user",
                parts: functionResponses
              });
              const updatedContents = tContents(params2.contents).concat(newContents);
              params2.contents = updatedContents;
            } else {
              break;
            }
          }
        });
      })(this, afcToolsMap, params);
    }
    async generateContentInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = generateContentParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:generateContent", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = generateContentResponseFromVertex(apiResponse);
          const typedResp = new GenerateContentResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = generateContentParametersToMldev(this.apiClient, params);
        path = formatMap("{model}:generateContent", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = generateContentResponseFromMldev(apiResponse);
          const typedResp = new GenerateContentResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    async generateContentStreamInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = generateContentParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:streamGenerateContent?alt=sse", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        const apiClient = this.apiClient;
        response = apiClient.requestStream({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        });
        return response.then(function(apiResponse) {
          return __asyncGenerator(this, arguments, function* () {
            var _a2, e_2, _b2, _c2;
            try {
              for (var _d2 = true, apiResponse_1 = __asyncValues(apiResponse), apiResponse_1_1; apiResponse_1_1 = yield __await(apiResponse_1.next()), _a2 = apiResponse_1_1.done, !_a2; _d2 = true) {
                _c2 = apiResponse_1_1.value;
                _d2 = false;
                const chunk = _c2;
                const resp = generateContentResponseFromVertex(yield __await(chunk.json()));
                resp["sdkHttpResponse"] = {
                  headers: chunk.headers
                };
                const typedResp = new GenerateContentResponse();
                Object.assign(typedResp, resp);
                yield yield __await(typedResp);
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (!_d2 && !_a2 && (_b2 = apiResponse_1.return)) yield __await(_b2.call(apiResponse_1));
              } finally {
                if (e_2) throw e_2.error;
              }
            }
          });
        });
      } else {
        const body = generateContentParametersToMldev(this.apiClient, params);
        path = formatMap("{model}:streamGenerateContent?alt=sse", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        const apiClient = this.apiClient;
        response = apiClient.requestStream({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        });
        return response.then(function(apiResponse) {
          return __asyncGenerator(this, arguments, function* () {
            var _a2, e_3, _b2, _c2;
            try {
              for (var _d2 = true, apiResponse_2 = __asyncValues(apiResponse), apiResponse_2_1; apiResponse_2_1 = yield __await(apiResponse_2.next()), _a2 = apiResponse_2_1.done, !_a2; _d2 = true) {
                _c2 = apiResponse_2_1.value;
                _d2 = false;
                const chunk = _c2;
                const resp = generateContentResponseFromMldev(yield __await(chunk.json()));
                resp["sdkHttpResponse"] = {
                  headers: chunk.headers
                };
                const typedResp = new GenerateContentResponse();
                Object.assign(typedResp, resp);
                yield yield __await(typedResp);
              }
            } catch (e_3_1) {
              e_3 = { error: e_3_1 };
            } finally {
              try {
                if (!_d2 && !_a2 && (_b2 = apiResponse_2.return)) yield __await(_b2.call(apiResponse_2));
              } finally {
                if (e_3) throw e_3.error;
              }
            }
          });
        });
      }
    }
    /**
     * Calculates embeddings for the given contents. Only text is supported.
     *
     * @param params - The parameters for embedding contents.
     * @return The response from the API.
     *
     * @example
     * ```ts
     * const response = await ai.models.embedContent({
     *  model: 'text-embedding-004',
     *  contents: [
     *    'What is your name?',
     *    'What is your favorite color?',
     *  ],
     *  config: {
     *    outputDimensionality: 64,
     *  },
     * });
     * console.log(response);
     * ```
     */
    async embedContent(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = embedContentParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:predict", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = embedContentResponseFromVertex(apiResponse);
          const typedResp = new EmbedContentResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = embedContentParametersToMldev(this.apiClient, params);
        path = formatMap("{model}:batchEmbedContents", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = embedContentResponseFromMldev(apiResponse);
          const typedResp = new EmbedContentResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Private method for generating images.
     */
    async generateImagesInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = generateImagesParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:predict", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = generateImagesResponseFromVertex(apiResponse);
          const typedResp = new GenerateImagesResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = generateImagesParametersToMldev(this.apiClient, params);
        path = formatMap("{model}:predict", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = generateImagesResponseFromMldev(apiResponse);
          const typedResp = new GenerateImagesResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Private method for editing an image.
     */
    async editImageInternal(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = editImageParametersInternalToVertex(this.apiClient, params);
        path = formatMap("{model}:predict", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = editImageResponseFromVertex(apiResponse);
          const typedResp = new EditImageResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        throw new Error("This method is only supported by the Vertex AI.");
      }
    }
    /**
     * Private method for upscaling an image.
     */
    async upscaleImageInternal(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = upscaleImageAPIParametersInternalToVertex(this.apiClient, params);
        path = formatMap("{model}:predict", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = upscaleImageResponseFromVertex(apiResponse);
          const typedResp = new UpscaleImageResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        throw new Error("This method is only supported by the Vertex AI.");
      }
    }
    /**
     * Recontextualizes an image.
     *
     * There are two types of recontextualization currently supported:
     * 1) Imagen Product Recontext - Generate images of products in new scenes
     *    and contexts.
     * 2) Virtual Try-On: Generate images of persons modeling fashion products.
     *
     * @param params - The parameters for recontextualizing an image.
     * @return The response from the API.
     *
     * @example
     * ```ts
     * const response1 = await ai.models.recontextImage({
     *  model: 'imagen-product-recontext-preview-06-30',
     *  source: {
     *    prompt: 'In a modern kitchen setting.',
     *    productImages: [productImage],
     *  },
     *  config: {
     *    numberOfImages: 1,
     *  },
     * });
     * console.log(response1?.generatedImages?.[0]?.image?.imageBytes);
     *
     * const response2 = await ai.models.recontextImage({
     *  model: 'virtual-try-on-preview-08-04',
     *  source: {
     *    personImage: personImage,
     *    productImages: [productImage],
     *  },
     *  config: {
     *    numberOfImages: 1,
     *  },
     * });
     * console.log(response2?.generatedImages?.[0]?.image?.imageBytes);
     * ```
     */
    async recontextImage(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = recontextImageParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:predict", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = recontextImageResponseFromVertex(apiResponse);
          const typedResp = new RecontextImageResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        throw new Error("This method is only supported by the Vertex AI.");
      }
    }
    /**
     * Segments an image, creating a mask of a specified area.
     *
     * @param params - The parameters for segmenting an image.
     * @return The response from the API.
     *
     * @example
     * ```ts
     * const response = await ai.models.segmentImage({
     *  model: 'image-segmentation-001',
     *  source: {
     *    image: image,
     *  },
     *  config: {
     *    mode: 'foreground',
     *  },
     * });
     * console.log(response?.generatedMasks?.[0]?.mask?.imageBytes);
     * ```
     */
    async segmentImage(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = segmentImageParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:predict", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = segmentImageResponseFromVertex(apiResponse);
          const typedResp = new SegmentImageResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        throw new Error("This method is only supported by the Vertex AI.");
      }
    }
    /**
     * Fetches information about a model by name.
     *
     * @example
     * ```ts
     * const modelInfo = await ai.models.get({model: 'gemini-2.0-flash'});
     * ```
     */
    async get(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = getModelParametersToVertex(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = modelFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = getModelParametersToMldev(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = modelFromMldev(apiResponse);
          return resp;
        });
      }
    }
    async listInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = listModelsParametersToVertex(this.apiClient, params);
        path = formatMap("{models_url}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listModelsResponseFromVertex(apiResponse);
          const typedResp = new ListModelsResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = listModelsParametersToMldev(this.apiClient, params);
        path = formatMap("{models_url}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listModelsResponseFromMldev(apiResponse);
          const typedResp = new ListModelsResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Updates a tuned model by its name.
     *
     * @param params - The parameters for updating the model.
     * @return The response from the API.
     *
     * @example
     * ```ts
     * const response = await ai.models.update({
     *   model: 'tuned-model-name',
     *   config: {
     *     displayName: 'New display name',
     *     description: 'New description',
     *   },
     * });
     * ```
     */
    async update(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = updateModelParametersToVertex(this.apiClient, params);
        path = formatMap("{model}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "PATCH",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = modelFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = updateModelParametersToMldev(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "PATCH",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = modelFromMldev(apiResponse);
          return resp;
        });
      }
    }
    /**
     * Deletes a tuned model by its name.
     *
     * @param params - The parameters for deleting the model.
     * @return The response from the API.
     *
     * @example
     * ```ts
     * const response = await ai.models.delete({model: 'tuned-model-name'});
     * ```
     */
    async delete(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = deleteModelParametersToVertex(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "DELETE",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = deleteModelResponseFromVertex(apiResponse);
          const typedResp = new DeleteModelResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = deleteModelParametersToMldev(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "DELETE",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = deleteModelResponseFromMldev(apiResponse);
          const typedResp = new DeleteModelResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Counts the number of tokens in the given contents. Multimodal input is
     * supported for Gemini models.
     *
     * @param params - The parameters for counting tokens.
     * @return The response from the API.
     *
     * @example
     * ```ts
     * const response = await ai.models.countTokens({
     *  model: 'gemini-2.0-flash',
     *  contents: 'The quick brown fox jumps over the lazy dog.'
     * });
     * console.log(response);
     * ```
     */
    async countTokens(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = countTokensParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:countTokens", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = countTokensResponseFromVertex(apiResponse);
          const typedResp = new CountTokensResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = countTokensParametersToMldev(this.apiClient, params);
        path = formatMap("{model}:countTokens", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = countTokensResponseFromMldev(apiResponse);
          const typedResp = new CountTokensResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Given a list of contents, returns a corresponding TokensInfo containing
     * the list of tokens and list of token ids.
     *
     * This method is not supported by the Gemini Developer API.
     *
     * @param params - The parameters for computing tokens.
     * @return The response from the API.
     *
     * @example
     * ```ts
     * const response = await ai.models.computeTokens({
     *  model: 'gemini-2.0-flash',
     *  contents: 'What is your name?'
     * });
     * console.log(response);
     * ```
     */
    async computeTokens(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = computeTokensParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:computeTokens", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = computeTokensResponseFromVertex(apiResponse);
          const typedResp = new ComputeTokensResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        throw new Error("This method is only supported by the Vertex AI.");
      }
    }
    /**
     * Private method for generating videos.
     */
    async generateVideosInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = generateVideosParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:predictLongRunning", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = generateVideosOperationFromVertex(apiResponse);
          const typedResp = new GenerateVideosOperation();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = generateVideosParametersToMldev(this.apiClient, params);
        path = formatMap("{model}:predictLongRunning", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = generateVideosOperationFromMldev(apiResponse);
          const typedResp = new GenerateVideosOperation();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
  };
  var Operations = class extends BaseModule {
    constructor(apiClient) {
      super();
      this.apiClient = apiClient;
    }
    /**
     * Gets the status of a long-running operation.
     *
     * @param parameters The parameters for the get operation request.
     * @return The updated Operation object, with the latest status or result.
     */
    async getVideosOperation(parameters) {
      const operation = parameters.operation;
      const config = parameters.config;
      if (operation.name === void 0 || operation.name === "") {
        throw new Error("Operation name is required.");
      }
      if (this.apiClient.isVertexAI()) {
        const resourceName2 = operation.name.split("/operations/")[0];
        let httpOptions = void 0;
        if (config && "httpOptions" in config) {
          httpOptions = config.httpOptions;
        }
        const rawOperation = await this.fetchPredictVideosOperationInternal({
          operationName: operation.name,
          resourceName: resourceName2,
          config: { httpOptions }
        });
        return operation._fromAPIResponse({
          apiResponse: rawOperation,
          isVertexAI: true
        });
      } else {
        const rawOperation = await this.getVideosOperationInternal({
          operationName: operation.name,
          config
        });
        return operation._fromAPIResponse({
          apiResponse: rawOperation,
          isVertexAI: false
        });
      }
    }
    /**
     * Gets the status of a long-running operation.
     *
     * @param parameters The parameters for the get operation request.
     * @return The updated Operation object, with the latest status or result.
     */
    async get(parameters) {
      const operation = parameters.operation;
      const config = parameters.config;
      if (operation.name === void 0 || operation.name === "") {
        throw new Error("Operation name is required.");
      }
      if (this.apiClient.isVertexAI()) {
        const resourceName2 = operation.name.split("/operations/")[0];
        let httpOptions = void 0;
        if (config && "httpOptions" in config) {
          httpOptions = config.httpOptions;
        }
        const rawOperation = await this.fetchPredictVideosOperationInternal({
          operationName: operation.name,
          resourceName: resourceName2,
          config: { httpOptions }
        });
        return operation._fromAPIResponse({
          apiResponse: rawOperation,
          isVertexAI: true
        });
      } else {
        const rawOperation = await this.getVideosOperationInternal({
          operationName: operation.name,
          config
        });
        return operation._fromAPIResponse({
          apiResponse: rawOperation,
          isVertexAI: false
        });
      }
    }
    async getVideosOperationInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = getOperationParametersToVertex(params);
        path = formatMap("{operationName}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response;
      } else {
        const body = getOperationParametersToMldev(params);
        path = formatMap("{operationName}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response;
      }
    }
    async fetchPredictVideosOperationInternal(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = fetchPredictOperationParametersToVertex(params);
        path = formatMap("{resourceName}:fetchPredictOperation", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response;
      } else {
        throw new Error("This method is only supported by the Vertex AI.");
      }
    }
  };
  function audioTranscriptionConfigToMldev() {
    const toObject = {};
    return toObject;
  }
  function authTokenFromMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function automaticActivityDetectionToMldev(fromObject) {
    const toObject = {};
    const fromDisabled = getValueByPath(fromObject, ["disabled"]);
    if (fromDisabled != null) {
      setValueByPath(toObject, ["disabled"], fromDisabled);
    }
    const fromStartOfSpeechSensitivity = getValueByPath(fromObject, [
      "startOfSpeechSensitivity"
    ]);
    if (fromStartOfSpeechSensitivity != null) {
      setValueByPath(toObject, ["startOfSpeechSensitivity"], fromStartOfSpeechSensitivity);
    }
    const fromEndOfSpeechSensitivity = getValueByPath(fromObject, [
      "endOfSpeechSensitivity"
    ]);
    if (fromEndOfSpeechSensitivity != null) {
      setValueByPath(toObject, ["endOfSpeechSensitivity"], fromEndOfSpeechSensitivity);
    }
    const fromPrefixPaddingMs = getValueByPath(fromObject, [
      "prefixPaddingMs"
    ]);
    if (fromPrefixPaddingMs != null) {
      setValueByPath(toObject, ["prefixPaddingMs"], fromPrefixPaddingMs);
    }
    const fromSilenceDurationMs = getValueByPath(fromObject, [
      "silenceDurationMs"
    ]);
    if (fromSilenceDurationMs != null) {
      setValueByPath(toObject, ["silenceDurationMs"], fromSilenceDurationMs);
    }
    return toObject;
  }
  function blobToMldev(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function contentToMldev(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partToMldev(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contextWindowCompressionConfigToMldev(fromObject) {
    const toObject = {};
    const fromTriggerTokens = getValueByPath(fromObject, [
      "triggerTokens"
    ]);
    if (fromTriggerTokens != null) {
      setValueByPath(toObject, ["triggerTokens"], fromTriggerTokens);
    }
    const fromSlidingWindow = getValueByPath(fromObject, [
      "slidingWindow"
    ]);
    if (fromSlidingWindow != null) {
      setValueByPath(toObject, ["slidingWindow"], slidingWindowToMldev(fromSlidingWindow));
    }
    return toObject;
  }
  function createAuthTokenConfigToMldev(apiClient, fromObject, parentObject) {
    const toObject = {};
    const fromExpireTime = getValueByPath(fromObject, ["expireTime"]);
    if (parentObject !== void 0 && fromExpireTime != null) {
      setValueByPath(parentObject, ["expireTime"], fromExpireTime);
    }
    const fromNewSessionExpireTime = getValueByPath(fromObject, [
      "newSessionExpireTime"
    ]);
    if (parentObject !== void 0 && fromNewSessionExpireTime != null) {
      setValueByPath(parentObject, ["newSessionExpireTime"], fromNewSessionExpireTime);
    }
    const fromUses = getValueByPath(fromObject, ["uses"]);
    if (parentObject !== void 0 && fromUses != null) {
      setValueByPath(parentObject, ["uses"], fromUses);
    }
    const fromLiveConnectConstraints = getValueByPath(fromObject, [
      "liveConnectConstraints"
    ]);
    if (parentObject !== void 0 && fromLiveConnectConstraints != null) {
      setValueByPath(parentObject, ["bidiGenerateContentSetup"], liveConnectConstraintsToMldev(apiClient, fromLiveConnectConstraints));
    }
    const fromLockAdditionalFields = getValueByPath(fromObject, [
      "lockAdditionalFields"
    ]);
    if (parentObject !== void 0 && fromLockAdditionalFields != null) {
      setValueByPath(parentObject, ["fieldMask"], fromLockAdditionalFields);
    }
    return toObject;
  }
  function createAuthTokenParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      setValueByPath(toObject, ["config"], createAuthTokenConfigToMldev(apiClient, fromConfig, toObject));
    }
    return toObject;
  }
  function dynamicRetrievalConfigToMldev(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromDynamicThreshold = getValueByPath(fromObject, [
      "dynamicThreshold"
    ]);
    if (fromDynamicThreshold != null) {
      setValueByPath(toObject, ["dynamicThreshold"], fromDynamicThreshold);
    }
    return toObject;
  }
  function fileDataToMldev(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function functionCallToMldev(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionDeclarationToMldev(fromObject) {
    const toObject = {};
    const fromBehavior = getValueByPath(fromObject, ["behavior"]);
    if (fromBehavior != null) {
      setValueByPath(toObject, ["behavior"], fromBehavior);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromParameters = getValueByPath(fromObject, ["parameters"]);
    if (fromParameters != null) {
      setValueByPath(toObject, ["parameters"], fromParameters);
    }
    const fromParametersJsonSchema = getValueByPath(fromObject, [
      "parametersJsonSchema"
    ]);
    if (fromParametersJsonSchema != null) {
      setValueByPath(toObject, ["parametersJsonSchema"], fromParametersJsonSchema);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], fromResponse);
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    return toObject;
  }
  function googleSearchRetrievalToMldev(fromObject) {
    const toObject = {};
    const fromDynamicRetrievalConfig = getValueByPath(fromObject, [
      "dynamicRetrievalConfig"
    ]);
    if (fromDynamicRetrievalConfig != null) {
      setValueByPath(toObject, ["dynamicRetrievalConfig"], dynamicRetrievalConfigToMldev(fromDynamicRetrievalConfig));
    }
    return toObject;
  }
  function googleSearchToMldev(fromObject) {
    const toObject = {};
    const fromTimeRangeFilter = getValueByPath(fromObject, [
      "timeRangeFilter"
    ]);
    if (fromTimeRangeFilter != null) {
      setValueByPath(toObject, ["timeRangeFilter"], intervalToMldev(fromTimeRangeFilter));
    }
    if (getValueByPath(fromObject, ["excludeDomains"]) !== void 0) {
      throw new Error("excludeDomains parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function intervalToMldev(fromObject) {
    const toObject = {};
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    return toObject;
  }
  function liveConnectConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromGenerationConfig = getValueByPath(fromObject, [
      "generationConfig"
    ]);
    if (parentObject !== void 0 && fromGenerationConfig != null) {
      setValueByPath(parentObject, ["setup", "generationConfig"], fromGenerationConfig);
    }
    const fromResponseModalities = getValueByPath(fromObject, [
      "responseModalities"
    ]);
    if (parentObject !== void 0 && fromResponseModalities != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "responseModalities"], fromResponseModalities);
    }
    const fromTemperature = getValueByPath(fromObject, ["temperature"]);
    if (parentObject !== void 0 && fromTemperature != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "temperature"], fromTemperature);
    }
    const fromTopP = getValueByPath(fromObject, ["topP"]);
    if (parentObject !== void 0 && fromTopP != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "topP"], fromTopP);
    }
    const fromTopK = getValueByPath(fromObject, ["topK"]);
    if (parentObject !== void 0 && fromTopK != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "topK"], fromTopK);
    }
    const fromMaxOutputTokens = getValueByPath(fromObject, [
      "maxOutputTokens"
    ]);
    if (parentObject !== void 0 && fromMaxOutputTokens != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "maxOutputTokens"], fromMaxOutputTokens);
    }
    const fromMediaResolution = getValueByPath(fromObject, [
      "mediaResolution"
    ]);
    if (parentObject !== void 0 && fromMediaResolution != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "mediaResolution"], fromMediaResolution);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (parentObject !== void 0 && fromSeed != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "seed"], fromSeed);
    }
    const fromSpeechConfig = getValueByPath(fromObject, ["speechConfig"]);
    if (parentObject !== void 0 && fromSpeechConfig != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "speechConfig"], speechConfigToMldev(tLiveSpeechConfig(fromSpeechConfig)));
    }
    const fromEnableAffectiveDialog = getValueByPath(fromObject, [
      "enableAffectiveDialog"
    ]);
    if (parentObject !== void 0 && fromEnableAffectiveDialog != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "enableAffectiveDialog"], fromEnableAffectiveDialog);
    }
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["setup", "systemInstruction"], contentToMldev(tContent(fromSystemInstruction)));
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = tTools(fromTools);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToMldev(tTool(item));
        });
      }
      setValueByPath(parentObject, ["setup", "tools"], transformedList);
    }
    const fromSessionResumption = getValueByPath(fromObject, [
      "sessionResumption"
    ]);
    if (parentObject !== void 0 && fromSessionResumption != null) {
      setValueByPath(parentObject, ["setup", "sessionResumption"], sessionResumptionConfigToMldev(fromSessionResumption));
    }
    const fromInputAudioTranscription = getValueByPath(fromObject, [
      "inputAudioTranscription"
    ]);
    if (parentObject !== void 0 && fromInputAudioTranscription != null) {
      setValueByPath(parentObject, ["setup", "inputAudioTranscription"], audioTranscriptionConfigToMldev());
    }
    const fromOutputAudioTranscription = getValueByPath(fromObject, [
      "outputAudioTranscription"
    ]);
    if (parentObject !== void 0 && fromOutputAudioTranscription != null) {
      setValueByPath(parentObject, ["setup", "outputAudioTranscription"], audioTranscriptionConfigToMldev());
    }
    const fromRealtimeInputConfig = getValueByPath(fromObject, [
      "realtimeInputConfig"
    ]);
    if (parentObject !== void 0 && fromRealtimeInputConfig != null) {
      setValueByPath(parentObject, ["setup", "realtimeInputConfig"], realtimeInputConfigToMldev(fromRealtimeInputConfig));
    }
    const fromContextWindowCompression = getValueByPath(fromObject, [
      "contextWindowCompression"
    ]);
    if (parentObject !== void 0 && fromContextWindowCompression != null) {
      setValueByPath(parentObject, ["setup", "contextWindowCompression"], contextWindowCompressionConfigToMldev(fromContextWindowCompression));
    }
    const fromProactivity = getValueByPath(fromObject, ["proactivity"]);
    if (parentObject !== void 0 && fromProactivity != null) {
      setValueByPath(parentObject, ["setup", "proactivity"], proactivityConfigToMldev(fromProactivity));
    }
    return toObject;
  }
  function liveConnectConstraintsToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["setup", "model"], tModel(apiClient, fromModel));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      setValueByPath(toObject, ["config"], liveConnectConfigToMldev(fromConfig, toObject));
    }
    return toObject;
  }
  function multiSpeakerVoiceConfigToMldev(fromObject) {
    const toObject = {};
    const fromSpeakerVoiceConfigs = getValueByPath(fromObject, [
      "speakerVoiceConfigs"
    ]);
    if (fromSpeakerVoiceConfigs != null) {
      let transformedList = fromSpeakerVoiceConfigs;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return speakerVoiceConfigToMldev(item);
        });
      }
      setValueByPath(toObject, ["speakerVoiceConfigs"], transformedList);
    }
    return toObject;
  }
  function partToMldev(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataToMldev(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobToMldev(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataToMldev(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallToMldev(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function prebuiltVoiceConfigToMldev(fromObject) {
    const toObject = {};
    const fromVoiceName = getValueByPath(fromObject, ["voiceName"]);
    if (fromVoiceName != null) {
      setValueByPath(toObject, ["voiceName"], fromVoiceName);
    }
    return toObject;
  }
  function proactivityConfigToMldev(fromObject) {
    const toObject = {};
    const fromProactiveAudio = getValueByPath(fromObject, [
      "proactiveAudio"
    ]);
    if (fromProactiveAudio != null) {
      setValueByPath(toObject, ["proactiveAudio"], fromProactiveAudio);
    }
    return toObject;
  }
  function realtimeInputConfigToMldev(fromObject) {
    const toObject = {};
    const fromAutomaticActivityDetection = getValueByPath(fromObject, [
      "automaticActivityDetection"
    ]);
    if (fromAutomaticActivityDetection != null) {
      setValueByPath(toObject, ["automaticActivityDetection"], automaticActivityDetectionToMldev(fromAutomaticActivityDetection));
    }
    const fromActivityHandling = getValueByPath(fromObject, [
      "activityHandling"
    ]);
    if (fromActivityHandling != null) {
      setValueByPath(toObject, ["activityHandling"], fromActivityHandling);
    }
    const fromTurnCoverage = getValueByPath(fromObject, ["turnCoverage"]);
    if (fromTurnCoverage != null) {
      setValueByPath(toObject, ["turnCoverage"], fromTurnCoverage);
    }
    return toObject;
  }
  function sessionResumptionConfigToMldev(fromObject) {
    const toObject = {};
    const fromHandle = getValueByPath(fromObject, ["handle"]);
    if (fromHandle != null) {
      setValueByPath(toObject, ["handle"], fromHandle);
    }
    if (getValueByPath(fromObject, ["transparent"]) !== void 0) {
      throw new Error("transparent parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function slidingWindowToMldev(fromObject) {
    const toObject = {};
    const fromTargetTokens = getValueByPath(fromObject, ["targetTokens"]);
    if (fromTargetTokens != null) {
      setValueByPath(toObject, ["targetTokens"], fromTargetTokens);
    }
    return toObject;
  }
  function speakerVoiceConfigToMldev(fromObject) {
    const toObject = {};
    const fromSpeaker = getValueByPath(fromObject, ["speaker"]);
    if (fromSpeaker != null) {
      setValueByPath(toObject, ["speaker"], fromSpeaker);
    }
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToMldev(fromVoiceConfig));
    }
    return toObject;
  }
  function speechConfigToMldev(fromObject) {
    const toObject = {};
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToMldev(fromVoiceConfig));
    }
    const fromMultiSpeakerVoiceConfig = getValueByPath(fromObject, [
      "multiSpeakerVoiceConfig"
    ]);
    if (fromMultiSpeakerVoiceConfig != null) {
      setValueByPath(toObject, ["multiSpeakerVoiceConfig"], multiSpeakerVoiceConfigToMldev(fromMultiSpeakerVoiceConfig));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function toolComputerUseToMldev(fromObject) {
    const toObject = {};
    const fromEnvironment = getValueByPath(fromObject, ["environment"]);
    if (fromEnvironment != null) {
      setValueByPath(toObject, ["environment"], fromEnvironment);
    }
    const fromExcludedPredefinedFunctions = getValueByPath(fromObject, [
      "excludedPredefinedFunctions"
    ]);
    if (fromExcludedPredefinedFunctions != null) {
      setValueByPath(toObject, ["excludedPredefinedFunctions"], fromExcludedPredefinedFunctions);
    }
    return toObject;
  }
  function toolToMldev(fromObject) {
    const toObject = {};
    const fromFunctionDeclarations = getValueByPath(fromObject, [
      "functionDeclarations"
    ]);
    if (fromFunctionDeclarations != null) {
      let transformedList = fromFunctionDeclarations;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionDeclarationToMldev(item);
        });
      }
      setValueByPath(toObject, ["functionDeclarations"], transformedList);
    }
    if (getValueByPath(fromObject, ["retrieval"]) !== void 0) {
      throw new Error("retrieval parameter is not supported in Gemini API.");
    }
    const fromGoogleSearch = getValueByPath(fromObject, ["googleSearch"]);
    if (fromGoogleSearch != null) {
      setValueByPath(toObject, ["googleSearch"], googleSearchToMldev(fromGoogleSearch));
    }
    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [
      "googleSearchRetrieval"
    ]);
    if (fromGoogleSearchRetrieval != null) {
      setValueByPath(toObject, ["googleSearchRetrieval"], googleSearchRetrievalToMldev(fromGoogleSearchRetrieval));
    }
    if (getValueByPath(fromObject, ["enterpriseWebSearch"]) !== void 0) {
      throw new Error("enterpriseWebSearch parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["googleMaps"]) !== void 0) {
      throw new Error("googleMaps parameter is not supported in Gemini API.");
    }
    const fromUrlContext = getValueByPath(fromObject, ["urlContext"]);
    if (fromUrlContext != null) {
      setValueByPath(toObject, ["urlContext"], urlContextToMldev());
    }
    const fromComputerUse = getValueByPath(fromObject, ["computerUse"]);
    if (fromComputerUse != null) {
      setValueByPath(toObject, ["computerUse"], toolComputerUseToMldev(fromComputerUse));
    }
    const fromCodeExecution = getValueByPath(fromObject, [
      "codeExecution"
    ]);
    if (fromCodeExecution != null) {
      setValueByPath(toObject, ["codeExecution"], fromCodeExecution);
    }
    return toObject;
  }
  function urlContextToMldev() {
    const toObject = {};
    return toObject;
  }
  function videoMetadataToMldev(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function voiceConfigToMldev(fromObject) {
    const toObject = {};
    const fromPrebuiltVoiceConfig = getValueByPath(fromObject, [
      "prebuiltVoiceConfig"
    ]);
    if (fromPrebuiltVoiceConfig != null) {
      setValueByPath(toObject, ["prebuiltVoiceConfig"], prebuiltVoiceConfigToMldev(fromPrebuiltVoiceConfig));
    }
    return toObject;
  }
  function getFieldMasks(setup) {
    const fields = [];
    for (const key in setup) {
      if (Object.prototype.hasOwnProperty.call(setup, key)) {
        const value = setup[key];
        if (typeof value === "object" && value != null && Object.keys(value).length > 0) {
          const field = Object.keys(value).map((kk) => `${key}.${kk}`);
          fields.push(...field);
        } else {
          fields.push(key);
        }
      }
    }
    return fields.join(",");
  }
  function convertBidiSetupToTokenSetup(requestDict, config) {
    let setupForMaskGeneration = null;
    const bidiGenerateContentSetupValue = requestDict["bidiGenerateContentSetup"];
    if (typeof bidiGenerateContentSetupValue === "object" && bidiGenerateContentSetupValue !== null && "setup" in bidiGenerateContentSetupValue) {
      const innerSetup = bidiGenerateContentSetupValue.setup;
      if (typeof innerSetup === "object" && innerSetup !== null) {
        requestDict["bidiGenerateContentSetup"] = innerSetup;
        setupForMaskGeneration = innerSetup;
      } else {
        delete requestDict["bidiGenerateContentSetup"];
      }
    } else if (bidiGenerateContentSetupValue !== void 0) {
      delete requestDict["bidiGenerateContentSetup"];
    }
    const preExistingFieldMask = requestDict["fieldMask"];
    if (setupForMaskGeneration) {
      const generatedMaskFromBidi = getFieldMasks(setupForMaskGeneration);
      if (Array.isArray(config === null || config === void 0 ? void 0 : config.lockAdditionalFields) && (config === null || config === void 0 ? void 0 : config.lockAdditionalFields.length) === 0) {
        if (generatedMaskFromBidi) {
          requestDict["fieldMask"] = generatedMaskFromBidi;
        } else {
          delete requestDict["fieldMask"];
        }
      } else if ((config === null || config === void 0 ? void 0 : config.lockAdditionalFields) && config.lockAdditionalFields.length > 0 && preExistingFieldMask !== null && Array.isArray(preExistingFieldMask) && preExistingFieldMask.length > 0) {
        const generationConfigFields = [
          "temperature",
          "topK",
          "topP",
          "maxOutputTokens",
          "responseModalities",
          "seed",
          "speechConfig"
        ];
        let mappedFieldsFromPreExisting = [];
        if (preExistingFieldMask.length > 0) {
          mappedFieldsFromPreExisting = preExistingFieldMask.map((field) => {
            if (generationConfigFields.includes(field)) {
              return `generationConfig.${field}`;
            }
            return field;
          });
        }
        const finalMaskParts = [];
        if (generatedMaskFromBidi) {
          finalMaskParts.push(generatedMaskFromBidi);
        }
        if (mappedFieldsFromPreExisting.length > 0) {
          finalMaskParts.push(...mappedFieldsFromPreExisting);
        }
        if (finalMaskParts.length > 0) {
          requestDict["fieldMask"] = finalMaskParts.join(",");
        } else {
          delete requestDict["fieldMask"];
        }
      } else {
        delete requestDict["fieldMask"];
      }
    } else {
      if (preExistingFieldMask !== null && Array.isArray(preExistingFieldMask) && preExistingFieldMask.length > 0) {
        requestDict["fieldMask"] = preExistingFieldMask.join(",");
      } else {
        delete requestDict["fieldMask"];
      }
    }
    return requestDict;
  }
  var Tokens = class extends BaseModule {
    constructor(apiClient) {
      super();
      this.apiClient = apiClient;
    }
    /**
     * Creates an ephemeral auth token resource.
     *
     * @experimental
     *
     * @remarks
     * Ephemeral auth tokens is only supported in the Gemini Developer API.
     * It can be used for the session connection to the Live constrained API.
     * Support in v1alpha only.
     *
     * @param params - The parameters for the create request.
     * @return The created auth token.
     *
     * @example
     * ```ts
     * const ai = new GoogleGenAI({
     *     apiKey: token.name,
     *     httpOptions: { apiVersion: 'v1alpha' }  // Support in v1alpha only.
     * });
     *
     * // Case 1: If LiveEphemeralParameters is unset, unlock LiveConnectConfig
     * // when using the token in Live API sessions. Each session connection can
     * // use a different configuration.
     * const config: CreateAuthTokenConfig = {
     *     uses: 3,
     *     expireTime: '2025-05-01T00:00:00Z',
     * }
     * const token = await ai.tokens.create(config);
     *
     * // Case 2: If LiveEphemeralParameters is set, lock all fields in
     * // LiveConnectConfig when using the token in Live API sessions. For
     * // example, changing `outputAudioTranscription` in the Live API
     * // connection will be ignored by the API.
     * const config: CreateAuthTokenConfig =
     *     uses: 3,
     *     expireTime: '2025-05-01T00:00:00Z',
     *     LiveEphemeralParameters: {
     *        model: 'gemini-2.0-flash-001',
     *        config: {
     *           'responseModalities': ['AUDIO'],
     *           'systemInstruction': 'Always answer in English.',
     *        }
     *     }
     * }
     * const token = await ai.tokens.create(config);
     *
     * // Case 3: If LiveEphemeralParameters is set and lockAdditionalFields is
     * // set, lock LiveConnectConfig with set and additional fields (e.g.
     * // responseModalities, systemInstruction, temperature in this example) when
     * // using the token in Live API sessions.
     * const config: CreateAuthTokenConfig =
     *     uses: 3,
     *     expireTime: '2025-05-01T00:00:00Z',
     *     LiveEphemeralParameters: {
     *        model: 'gemini-2.0-flash-001',
     *        config: {
     *           'responseModalities': ['AUDIO'],
     *           'systemInstruction': 'Always answer in English.',
     *        }
     *     },
     *     lockAdditionalFields: ['temperature'],
     * }
     * const token = await ai.tokens.create(config);
     *
     * // Case 4: If LiveEphemeralParameters is set and lockAdditionalFields is
     * // empty array, lock LiveConnectConfig with set fields (e.g.
     * // responseModalities, systemInstruction in this example) when using the
     * // token in Live API sessions.
     * const config: CreateAuthTokenConfig =
     *     uses: 3,
     *     expireTime: '2025-05-01T00:00:00Z',
     *     LiveEphemeralParameters: {
     *        model: 'gemini-2.0-flash-001',
     *        config: {
     *           'responseModalities': ['AUDIO'],
     *           'systemInstruction': 'Always answer in English.',
     *        }
     *     },
     *     lockAdditionalFields: [],
     * }
     * const token = await ai.tokens.create(config);
     * ```
     */
    async create(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        throw new Error("The client.tokens.create method is only supported by the Gemini Developer API.");
      } else {
        const body = createAuthTokenParametersToMldev(this.apiClient, params);
        path = formatMap("auth_tokens", body["_url"]);
        queryParams = body["_query"];
        delete body["config"];
        delete body["_url"];
        delete body["_query"];
        const transformedBody = convertBidiSetupToTokenSetup(body, params.config);
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(transformedBody),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = authTokenFromMldev(apiResponse);
          return resp;
        });
      }
    }
  };
  function cancelTuningJobParametersToMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], fromName);
    }
    return toObject;
  }
  function cancelTuningJobParametersToVertex(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], fromName);
    }
    return toObject;
  }
  function createTuningJobConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["validationDataset"]) !== void 0) {
      throw new Error("validationDataset parameter is not supported in Gemini API.");
    }
    const fromTunedModelDisplayName = getValueByPath(fromObject, [
      "tunedModelDisplayName"
    ]);
    if (parentObject !== void 0 && fromTunedModelDisplayName != null) {
      setValueByPath(parentObject, ["displayName"], fromTunedModelDisplayName);
    }
    if (getValueByPath(fromObject, ["description"]) !== void 0) {
      throw new Error("description parameter is not supported in Gemini API.");
    }
    const fromEpochCount = getValueByPath(fromObject, ["epochCount"]);
    if (parentObject !== void 0 && fromEpochCount != null) {
      setValueByPath(parentObject, ["tuningTask", "hyperparameters", "epochCount"], fromEpochCount);
    }
    const fromLearningRateMultiplier = getValueByPath(fromObject, [
      "learningRateMultiplier"
    ]);
    if (fromLearningRateMultiplier != null) {
      setValueByPath(toObject, ["tuningTask", "hyperparameters", "learningRateMultiplier"], fromLearningRateMultiplier);
    }
    if (getValueByPath(fromObject, ["exportLastCheckpointOnly"]) !== void 0) {
      throw new Error("exportLastCheckpointOnly parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["preTunedModelCheckpointId"]) !== void 0) {
      throw new Error("preTunedModelCheckpointId parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["adapterSize"]) !== void 0) {
      throw new Error("adapterSize parameter is not supported in Gemini API.");
    }
    const fromBatchSize = getValueByPath(fromObject, ["batchSize"]);
    if (parentObject !== void 0 && fromBatchSize != null) {
      setValueByPath(parentObject, ["tuningTask", "hyperparameters", "batchSize"], fromBatchSize);
    }
    const fromLearningRate = getValueByPath(fromObject, ["learningRate"]);
    if (parentObject !== void 0 && fromLearningRate != null) {
      setValueByPath(parentObject, ["tuningTask", "hyperparameters", "learningRate"], fromLearningRate);
    }
    if (getValueByPath(fromObject, ["labels"]) !== void 0) {
      throw new Error("labels parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function createTuningJobConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromValidationDataset = getValueByPath(fromObject, [
      "validationDataset"
    ]);
    if (parentObject !== void 0 && fromValidationDataset != null) {
      setValueByPath(parentObject, ["supervisedTuningSpec"], tuningValidationDatasetToVertex(fromValidationDataset, toObject));
    }
    const fromTunedModelDisplayName = getValueByPath(fromObject, [
      "tunedModelDisplayName"
    ]);
    if (parentObject !== void 0 && fromTunedModelDisplayName != null) {
      setValueByPath(parentObject, ["tunedModelDisplayName"], fromTunedModelDisplayName);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (parentObject !== void 0 && fromDescription != null) {
      setValueByPath(parentObject, ["description"], fromDescription);
    }
    const fromEpochCount = getValueByPath(fromObject, ["epochCount"]);
    if (parentObject !== void 0 && fromEpochCount != null) {
      setValueByPath(parentObject, ["supervisedTuningSpec", "hyperParameters", "epochCount"], fromEpochCount);
    }
    const fromLearningRateMultiplier = getValueByPath(fromObject, [
      "learningRateMultiplier"
    ]);
    if (parentObject !== void 0 && fromLearningRateMultiplier != null) {
      setValueByPath(parentObject, ["supervisedTuningSpec", "hyperParameters", "learningRateMultiplier"], fromLearningRateMultiplier);
    }
    const fromExportLastCheckpointOnly = getValueByPath(fromObject, [
      "exportLastCheckpointOnly"
    ]);
    if (parentObject !== void 0 && fromExportLastCheckpointOnly != null) {
      setValueByPath(parentObject, ["supervisedTuningSpec", "exportLastCheckpointOnly"], fromExportLastCheckpointOnly);
    }
    const fromAdapterSize = getValueByPath(fromObject, ["adapterSize"]);
    if (parentObject !== void 0 && fromAdapterSize != null) {
      setValueByPath(parentObject, ["supervisedTuningSpec", "hyperParameters", "adapterSize"], fromAdapterSize);
    }
    if (getValueByPath(fromObject, ["batchSize"]) !== void 0) {
      throw new Error("batchSize parameter is not supported in Vertex AI.");
    }
    if (getValueByPath(fromObject, ["learningRate"]) !== void 0) {
      throw new Error("learningRate parameter is not supported in Vertex AI.");
    }
    const fromLabels = getValueByPath(fromObject, ["labels"]);
    if (parentObject !== void 0 && fromLabels != null) {
      setValueByPath(parentObject, ["labels"], fromLabels);
    }
    return toObject;
  }
  function createTuningJobParametersPrivateToMldev(fromObject) {
    const toObject = {};
    const fromBaseModel = getValueByPath(fromObject, ["baseModel"]);
    if (fromBaseModel != null) {
      setValueByPath(toObject, ["baseModel"], fromBaseModel);
    }
    const fromPreTunedModel = getValueByPath(fromObject, [
      "preTunedModel"
    ]);
    if (fromPreTunedModel != null) {
      setValueByPath(toObject, ["preTunedModel"], fromPreTunedModel);
    }
    const fromTrainingDataset = getValueByPath(fromObject, [
      "trainingDataset"
    ]);
    if (fromTrainingDataset != null) {
      setValueByPath(toObject, ["tuningTask", "trainingData"], tuningDatasetToMldev(fromTrainingDataset));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      createTuningJobConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function createTuningJobParametersPrivateToVertex(fromObject) {
    const toObject = {};
    const fromBaseModel = getValueByPath(fromObject, ["baseModel"]);
    if (fromBaseModel != null) {
      setValueByPath(toObject, ["baseModel"], fromBaseModel);
    }
    const fromPreTunedModel = getValueByPath(fromObject, [
      "preTunedModel"
    ]);
    if (fromPreTunedModel != null) {
      setValueByPath(toObject, ["preTunedModel"], fromPreTunedModel);
    }
    const fromTrainingDataset = getValueByPath(fromObject, [
      "trainingDataset"
    ]);
    if (fromTrainingDataset != null) {
      setValueByPath(toObject, ["supervisedTuningSpec", "trainingDatasetUri"], tuningDatasetToVertex(fromTrainingDataset, toObject));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      createTuningJobConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function getTuningJobParametersToMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], fromName);
    }
    return toObject;
  }
  function getTuningJobParametersToVertex(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], fromName);
    }
    return toObject;
  }
  function listTuningJobsConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    const fromFilter = getValueByPath(fromObject, ["filter"]);
    if (parentObject !== void 0 && fromFilter != null) {
      setValueByPath(parentObject, ["_query", "filter"], fromFilter);
    }
    return toObject;
  }
  function listTuningJobsConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    const fromFilter = getValueByPath(fromObject, ["filter"]);
    if (parentObject !== void 0 && fromFilter != null) {
      setValueByPath(parentObject, ["_query", "filter"], fromFilter);
    }
    return toObject;
  }
  function listTuningJobsParametersToMldev(fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listTuningJobsConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function listTuningJobsParametersToVertex(fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listTuningJobsConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function listTuningJobsResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromTuningJobs = getValueByPath(fromObject, ["tunedModels"]);
    if (fromTuningJobs != null) {
      let transformedList = fromTuningJobs;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return tuningJobFromMldev(item);
        });
      }
      setValueByPath(toObject, ["tuningJobs"], transformedList);
    }
    return toObject;
  }
  function listTuningJobsResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromTuningJobs = getValueByPath(fromObject, ["tuningJobs"]);
    if (fromTuningJobs != null) {
      let transformedList = fromTuningJobs;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return tuningJobFromVertex(item);
        });
      }
      setValueByPath(toObject, ["tuningJobs"], transformedList);
    }
    return toObject;
  }
  function tunedModelCheckpointFromVertex(fromObject) {
    const toObject = {};
    const fromCheckpointId = getValueByPath(fromObject, ["checkpointId"]);
    if (fromCheckpointId != null) {
      setValueByPath(toObject, ["checkpointId"], fromCheckpointId);
    }
    const fromEpoch = getValueByPath(fromObject, ["epoch"]);
    if (fromEpoch != null) {
      setValueByPath(toObject, ["epoch"], fromEpoch);
    }
    const fromStep = getValueByPath(fromObject, ["step"]);
    if (fromStep != null) {
      setValueByPath(toObject, ["step"], fromStep);
    }
    const fromEndpoint = getValueByPath(fromObject, ["endpoint"]);
    if (fromEndpoint != null) {
      setValueByPath(toObject, ["endpoint"], fromEndpoint);
    }
    return toObject;
  }
  function tunedModelFromMldev(fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["name"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], fromModel);
    }
    const fromEndpoint = getValueByPath(fromObject, ["name"]);
    if (fromEndpoint != null) {
      setValueByPath(toObject, ["endpoint"], fromEndpoint);
    }
    return toObject;
  }
  function tunedModelFromVertex(fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], fromModel);
    }
    const fromEndpoint = getValueByPath(fromObject, ["endpoint"]);
    if (fromEndpoint != null) {
      setValueByPath(toObject, ["endpoint"], fromEndpoint);
    }
    const fromCheckpoints = getValueByPath(fromObject, ["checkpoints"]);
    if (fromCheckpoints != null) {
      let transformedList = fromCheckpoints;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return tunedModelCheckpointFromVertex(item);
        });
      }
      setValueByPath(toObject, ["checkpoints"], transformedList);
    }
    return toObject;
  }
  function tuningDatasetToMldev(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["gcsUri"]) !== void 0) {
      throw new Error("gcsUri parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["vertexDatasetResource"]) !== void 0) {
      throw new Error("vertexDatasetResource parameter is not supported in Gemini API.");
    }
    const fromExamples = getValueByPath(fromObject, ["examples"]);
    if (fromExamples != null) {
      let transformedList = fromExamples;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return tuningExampleToMldev(item);
        });
      }
      setValueByPath(toObject, ["examples", "examples"], transformedList);
    }
    return toObject;
  }
  function tuningDatasetToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromGcsUri = getValueByPath(fromObject, ["gcsUri"]);
    if (parentObject !== void 0 && fromGcsUri != null) {
      setValueByPath(parentObject, ["supervisedTuningSpec", "trainingDatasetUri"], fromGcsUri);
    }
    const fromVertexDatasetResource = getValueByPath(fromObject, [
      "vertexDatasetResource"
    ]);
    if (parentObject !== void 0 && fromVertexDatasetResource != null) {
      setValueByPath(parentObject, ["supervisedTuningSpec", "trainingDatasetUri"], fromVertexDatasetResource);
    }
    if (getValueByPath(fromObject, ["examples"]) !== void 0) {
      throw new Error("examples parameter is not supported in Vertex AI.");
    }
    return toObject;
  }
  function tuningExampleToMldev(fromObject) {
    const toObject = {};
    const fromTextInput = getValueByPath(fromObject, ["textInput"]);
    if (fromTextInput != null) {
      setValueByPath(toObject, ["textInput"], fromTextInput);
    }
    const fromOutput = getValueByPath(fromObject, ["output"]);
    if (fromOutput != null) {
      setValueByPath(toObject, ["output"], fromOutput);
    }
    return toObject;
  }
  function tuningJobFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromState = getValueByPath(fromObject, ["state"]);
    if (fromState != null) {
      setValueByPath(toObject, ["state"], tTuningJobStatus(fromState));
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromStartTime = getValueByPath(fromObject, [
      "tuningTask",
      "startTime"
    ]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, [
      "tuningTask",
      "completeTime"
    ]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromBaseModel = getValueByPath(fromObject, ["baseModel"]);
    if (fromBaseModel != null) {
      setValueByPath(toObject, ["baseModel"], fromBaseModel);
    }
    const fromTunedModel = getValueByPath(fromObject, ["_self"]);
    if (fromTunedModel != null) {
      setValueByPath(toObject, ["tunedModel"], tunedModelFromMldev(fromTunedModel));
    }
    const fromCustomBaseModel = getValueByPath(fromObject, [
      "customBaseModel"
    ]);
    if (fromCustomBaseModel != null) {
      setValueByPath(toObject, ["customBaseModel"], fromCustomBaseModel);
    }
    const fromExperiment = getValueByPath(fromObject, ["experiment"]);
    if (fromExperiment != null) {
      setValueByPath(toObject, ["experiment"], fromExperiment);
    }
    const fromLabels = getValueByPath(fromObject, ["labels"]);
    if (fromLabels != null) {
      setValueByPath(toObject, ["labels"], fromLabels);
    }
    const fromOutputUri = getValueByPath(fromObject, ["outputUri"]);
    if (fromOutputUri != null) {
      setValueByPath(toObject, ["outputUri"], fromOutputUri);
    }
    const fromPipelineJob = getValueByPath(fromObject, ["pipelineJob"]);
    if (fromPipelineJob != null) {
      setValueByPath(toObject, ["pipelineJob"], fromPipelineJob);
    }
    const fromServiceAccount = getValueByPath(fromObject, [
      "serviceAccount"
    ]);
    if (fromServiceAccount != null) {
      setValueByPath(toObject, ["serviceAccount"], fromServiceAccount);
    }
    const fromTunedModelDisplayName = getValueByPath(fromObject, [
      "tunedModelDisplayName"
    ]);
    if (fromTunedModelDisplayName != null) {
      setValueByPath(toObject, ["tunedModelDisplayName"], fromTunedModelDisplayName);
    }
    return toObject;
  }
  function tuningJobFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromState = getValueByPath(fromObject, ["state"]);
    if (fromState != null) {
      setValueByPath(toObject, ["state"], tTuningJobStatus(fromState));
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], fromError);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromBaseModel = getValueByPath(fromObject, ["baseModel"]);
    if (fromBaseModel != null) {
      setValueByPath(toObject, ["baseModel"], fromBaseModel);
    }
    const fromTunedModel = getValueByPath(fromObject, ["tunedModel"]);
    if (fromTunedModel != null) {
      setValueByPath(toObject, ["tunedModel"], tunedModelFromVertex(fromTunedModel));
    }
    const fromPreTunedModel = getValueByPath(fromObject, [
      "preTunedModel"
    ]);
    if (fromPreTunedModel != null) {
      setValueByPath(toObject, ["preTunedModel"], fromPreTunedModel);
    }
    const fromSupervisedTuningSpec = getValueByPath(fromObject, [
      "supervisedTuningSpec"
    ]);
    if (fromSupervisedTuningSpec != null) {
      setValueByPath(toObject, ["supervisedTuningSpec"], fromSupervisedTuningSpec);
    }
    const fromTuningDataStats = getValueByPath(fromObject, [
      "tuningDataStats"
    ]);
    if (fromTuningDataStats != null) {
      setValueByPath(toObject, ["tuningDataStats"], fromTuningDataStats);
    }
    const fromEncryptionSpec = getValueByPath(fromObject, [
      "encryptionSpec"
    ]);
    if (fromEncryptionSpec != null) {
      setValueByPath(toObject, ["encryptionSpec"], fromEncryptionSpec);
    }
    const fromPartnerModelTuningSpec = getValueByPath(fromObject, [
      "partnerModelTuningSpec"
    ]);
    if (fromPartnerModelTuningSpec != null) {
      setValueByPath(toObject, ["partnerModelTuningSpec"], fromPartnerModelTuningSpec);
    }
    const fromCustomBaseModel = getValueByPath(fromObject, [
      "customBaseModel"
    ]);
    if (fromCustomBaseModel != null) {
      setValueByPath(toObject, ["customBaseModel"], fromCustomBaseModel);
    }
    const fromExperiment = getValueByPath(fromObject, ["experiment"]);
    if (fromExperiment != null) {
      setValueByPath(toObject, ["experiment"], fromExperiment);
    }
    const fromLabels = getValueByPath(fromObject, ["labels"]);
    if (fromLabels != null) {
      setValueByPath(toObject, ["labels"], fromLabels);
    }
    const fromOutputUri = getValueByPath(fromObject, ["outputUri"]);
    if (fromOutputUri != null) {
      setValueByPath(toObject, ["outputUri"], fromOutputUri);
    }
    const fromPipelineJob = getValueByPath(fromObject, ["pipelineJob"]);
    if (fromPipelineJob != null) {
      setValueByPath(toObject, ["pipelineJob"], fromPipelineJob);
    }
    const fromServiceAccount = getValueByPath(fromObject, [
      "serviceAccount"
    ]);
    if (fromServiceAccount != null) {
      setValueByPath(toObject, ["serviceAccount"], fromServiceAccount);
    }
    const fromTunedModelDisplayName = getValueByPath(fromObject, [
      "tunedModelDisplayName"
    ]);
    if (fromTunedModelDisplayName != null) {
      setValueByPath(toObject, ["tunedModelDisplayName"], fromTunedModelDisplayName);
    }
    return toObject;
  }
  function tuningOperationFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromMetadata = getValueByPath(fromObject, ["metadata"]);
    if (fromMetadata != null) {
      setValueByPath(toObject, ["metadata"], fromMetadata);
    }
    const fromDone = getValueByPath(fromObject, ["done"]);
    if (fromDone != null) {
      setValueByPath(toObject, ["done"], fromDone);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], fromError);
    }
    return toObject;
  }
  function tuningValidationDatasetToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromGcsUri = getValueByPath(fromObject, ["gcsUri"]);
    if (fromGcsUri != null) {
      setValueByPath(toObject, ["validationDatasetUri"], fromGcsUri);
    }
    const fromVertexDatasetResource = getValueByPath(fromObject, [
      "vertexDatasetResource"
    ]);
    if (parentObject !== void 0 && fromVertexDatasetResource != null) {
      setValueByPath(parentObject, ["supervisedTuningSpec", "trainingDatasetUri"], fromVertexDatasetResource);
    }
    return toObject;
  }
  var Tunings = class extends BaseModule {
    constructor(apiClient) {
      super();
      this.apiClient = apiClient;
      this.get = async (params) => {
        return await this.getInternal(params);
      };
      this.list = async (params = {}) => {
        return new Pager(PagedItem.PAGED_ITEM_TUNING_JOBS, (x) => this.listInternal(x), await this.listInternal(params), params);
      };
      this.tune = async (params) => {
        var _a;
        if (this.apiClient.isVertexAI()) {
          if (params.baseModel.startsWith("projects/")) {
            const preTunedModel = {
              tunedModelName: params.baseModel
            };
            if ((_a = params.config) === null || _a === void 0 ? void 0 : _a.preTunedModelCheckpointId) {
              preTunedModel.checkpointId = params.config.preTunedModelCheckpointId;
            }
            const paramsPrivate = Object.assign(Object.assign({}, params), { preTunedModel });
            paramsPrivate.baseModel = void 0;
            return await this.tuneInternal(paramsPrivate);
          } else {
            const paramsPrivate = Object.assign({}, params);
            return await this.tuneInternal(paramsPrivate);
          }
        } else {
          const paramsPrivate = Object.assign({}, params);
          const operation = await this.tuneMldevInternal(paramsPrivate);
          let tunedModelName = "";
          if (operation["metadata"] !== void 0 && operation["metadata"]["tunedModel"] !== void 0) {
            tunedModelName = operation["metadata"]["tunedModel"];
          } else if (operation["name"] !== void 0 && operation["name"].includes("/operations/")) {
            tunedModelName = operation["name"].split("/operations/")[0];
          }
          const tuningJob = {
            name: tunedModelName,
            state: JobState.JOB_STATE_QUEUED
          };
          return tuningJob;
        }
      };
    }
    async getInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = getTuningJobParametersToVertex(params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = tuningJobFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = getTuningJobParametersToMldev(params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = tuningJobFromMldev(apiResponse);
          return resp;
        });
      }
    }
    async listInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = listTuningJobsParametersToVertex(params);
        path = formatMap("tuningJobs", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listTuningJobsResponseFromVertex(apiResponse);
          const typedResp = new ListTuningJobsResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = listTuningJobsParametersToMldev(params);
        path = formatMap("tunedModels", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listTuningJobsResponseFromMldev(apiResponse);
          const typedResp = new ListTuningJobsResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Cancels a tuning job.
     *
     * @param params - The parameters for the cancel request.
     * @return The empty response returned by the API.
     *
     * @example
     * ```ts
     * await ai.tunings.cancel({name: '...'}); // The server-generated resource name.
     * ```
     */
    async cancel(params) {
      var _a, _b, _c, _d;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = cancelTuningJobParametersToVertex(params);
        path = formatMap("{name}:cancel", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        await this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        });
      } else {
        const body = cancelTuningJobParametersToMldev(params);
        path = formatMap("{name}:cancel", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        await this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        });
      }
    }
    async tuneInternal(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = createTuningJobParametersPrivateToVertex(params);
        path = formatMap("tuningJobs", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = tuningJobFromVertex(apiResponse);
          return resp;
        });
      } else {
        throw new Error("This method is only supported by the Vertex AI.");
      }
    }
    async tuneMldevInternal(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        throw new Error("This method is only supported by the Gemini Developer API.");
      } else {
        const body = createTuningJobParametersPrivateToMldev(params);
        path = formatMap("tunedModels", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = tuningOperationFromMldev(apiResponse);
          return resp;
        });
      }
    }
  };
  var BrowserDownloader = class {
    async download(_params, _apiClient) {
      throw new Error("Download to file is not supported in the browser, please use a browser compliant download like an <a> tag.");
    }
  };
  var MAX_CHUNK_SIZE = 1024 * 1024 * 8;
  var MAX_RETRY_COUNT = 3;
  var INITIAL_RETRY_DELAY_MS = 1e3;
  var DELAY_MULTIPLIER = 2;
  var X_GOOG_UPLOAD_STATUS_HEADER_FIELD = "x-goog-upload-status";
  async function uploadBlob(file, uploadUrl, apiClient) {
    var _a, _b, _c;
    let fileSize = 0;
    let offset = 0;
    let response = new HttpResponse(new Response());
    let uploadCommand = "upload";
    fileSize = file.size;
    while (offset < fileSize) {
      const chunkSize = Math.min(MAX_CHUNK_SIZE, fileSize - offset);
      const chunk = file.slice(offset, offset + chunkSize);
      if (offset + chunkSize >= fileSize) {
        uploadCommand += ", finalize";
      }
      let retryCount = 0;
      let currentDelayMs = INITIAL_RETRY_DELAY_MS;
      while (retryCount < MAX_RETRY_COUNT) {
        response = await apiClient.request({
          path: "",
          body: chunk,
          httpMethod: "POST",
          httpOptions: {
            apiVersion: "",
            baseUrl: uploadUrl,
            headers: {
              "X-Goog-Upload-Command": uploadCommand,
              "X-Goog-Upload-Offset": String(offset),
              "Content-Length": String(chunkSize)
            }
          }
        });
        if ((_a = response === null || response === void 0 ? void 0 : response.headers) === null || _a === void 0 ? void 0 : _a[X_GOOG_UPLOAD_STATUS_HEADER_FIELD]) {
          break;
        }
        retryCount++;
        await sleep(currentDelayMs);
        currentDelayMs = currentDelayMs * DELAY_MULTIPLIER;
      }
      offset += chunkSize;
      if (((_b = response === null || response === void 0 ? void 0 : response.headers) === null || _b === void 0 ? void 0 : _b[X_GOOG_UPLOAD_STATUS_HEADER_FIELD]) !== "active") {
        break;
      }
      if (fileSize <= offset) {
        throw new Error("All content has been uploaded, but the upload status is not finalized.");
      }
    }
    const responseJson = await (response === null || response === void 0 ? void 0 : response.json());
    if (((_c = response === null || response === void 0 ? void 0 : response.headers) === null || _c === void 0 ? void 0 : _c[X_GOOG_UPLOAD_STATUS_HEADER_FIELD]) !== "final") {
      throw new Error("Failed to upload file: Upload status is not finalized.");
    }
    return responseJson["file"];
  }
  async function getBlobStat(file) {
    const fileStat = { size: file.size, type: file.type };
    return fileStat;
  }
  function sleep(ms) {
    return new Promise((resolvePromise) => setTimeout(resolvePromise, ms));
  }
  var BrowserUploader = class {
    async upload(file, uploadUrl, apiClient) {
      if (typeof file === "string") {
        throw new Error("File path is not supported in browser uploader.");
      }
      return await uploadBlob(file, uploadUrl, apiClient);
    }
    async stat(file) {
      if (typeof file === "string") {
        throw new Error("File path is not supported in browser uploader.");
      } else {
        return await getBlobStat(file);
      }
    }
  };
  var BrowserWebSocketFactory = class {
    create(url, headers, callbacks) {
      return new BrowserWebSocket(url, headers, callbacks);
    }
  };
  var BrowserWebSocket = class {
    constructor(url, headers, callbacks) {
      this.url = url;
      this.headers = headers;
      this.callbacks = callbacks;
    }
    connect() {
      this.ws = new WebSocket(this.url);
      this.ws.onopen = this.callbacks.onopen;
      this.ws.onerror = this.callbacks.onerror;
      this.ws.onclose = this.callbacks.onclose;
      this.ws.onmessage = this.callbacks.onmessage;
    }
    send(message) {
      if (this.ws === void 0) {
        throw new Error("WebSocket is not connected");
      }
      this.ws.send(message);
    }
    close() {
      if (this.ws === void 0) {
        throw new Error("WebSocket is not connected");
      }
      this.ws.close();
    }
  };
  var GOOGLE_API_KEY_HEADER = "x-goog-api-key";
  var WebAuth = class {
    constructor(apiKey) {
      this.apiKey = apiKey;
    }
    async addAuthHeaders(headers) {
      if (headers.get(GOOGLE_API_KEY_HEADER) !== null) {
        return;
      }
      if (this.apiKey.startsWith("auth_tokens/")) {
        throw new Error("Ephemeral tokens are only supported by the live API.");
      }
      if (!this.apiKey) {
        throw new Error("API key is missing. Please provide a valid API key.");
      }
      headers.append(GOOGLE_API_KEY_HEADER, this.apiKey);
    }
  };
  var LANGUAGE_LABEL_PREFIX = "gl-node/";
  var GoogleGenAI = class {
    constructor(options) {
      var _a;
      if (options.apiKey == null) {
        throw new Error("An API Key must be set when running in a browser");
      }
      if (options.project || options.location) {
        throw new Error("Vertex AI project based authentication is not supported on browser runtimes. Please do not provide a project or location.");
      }
      this.vertexai = (_a = options.vertexai) !== null && _a !== void 0 ? _a : false;
      this.apiKey = options.apiKey;
      const baseUrl = getBaseUrl(
        options.httpOptions,
        options.vertexai,
        /*vertexBaseUrlFromEnv*/
        void 0,
        /*geminiBaseUrlFromEnv*/
        void 0
      );
      if (baseUrl) {
        if (options.httpOptions) {
          options.httpOptions.baseUrl = baseUrl;
        } else {
          options.httpOptions = { baseUrl };
        }
      }
      this.apiVersion = options.apiVersion;
      const auth = new WebAuth(this.apiKey);
      this.apiClient = new ApiClient({
        auth,
        apiVersion: this.apiVersion,
        apiKey: this.apiKey,
        vertexai: this.vertexai,
        httpOptions: options.httpOptions,
        userAgentExtra: LANGUAGE_LABEL_PREFIX + "web",
        uploader: new BrowserUploader(),
        downloader: new BrowserDownloader()
      });
      this.models = new Models(this.apiClient);
      this.live = new Live(this.apiClient, auth, new BrowserWebSocketFactory());
      this.batches = new Batches(this.apiClient);
      this.chats = new Chats(this.models, this.apiClient);
      this.caches = new Caches(this.apiClient);
      this.files = new Files(this.apiClient);
      this.operations = new Operations(this.apiClient);
      this.authTokens = new Tokens(this.apiClient);
      this.tunings = new Tunings(this.apiClient);
    }
  };

  // contexts/ChatContext.tsx
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  var ChatContext = (0, import_react8.createContext)(void 0);
  var initialChats = [];
  var initialMessages = {};
  var phoneRegex = /\b(\+?237\s*)?([6-9])([\s.-]*\d){8}\b|\b(?:\+\d{1,3}\s*)?(?:\d[\s-]*){8,}\d\b/g;
  var emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g;
  var censorText = (text, storeInfo) => {
    let censoredText = text.replace(phoneRegex, "***");
    censoredText = censoredText.replace(emailRegex, "***");
    if (storeInfo) {
      const locationKeywords = /* @__PURE__ */ new Set([
        ...storeInfo.physicalAddress.toLowerCase().split(/[\s,.-]+/),
        ...storeInfo.neighborhood ? storeInfo.neighborhood.toLowerCase().split(/[\s,.-]+/) : [],
        ...storeInfo.location.toLowerCase().split(/[\s,.-]+/)
        // city
      ]);
      const commonWords = ["rue", "de", "la", "le", "et", "au", "a", "des", "du", "en", "face", "pr\xE8s", "derri\xE8re", "devant", "carrefour", "akwa", "yaounde", "douala"];
      const significantKeywords = [...locationKeywords].filter((kw) => kw.length > 3 && !commonWords.includes(kw));
      if (significantKeywords.length > 0) {
        const regex = new RegExp(`\\b(${significantKeywords.join("|")})\\b`, "gi");
        censoredText = censoredText.replace(regex, "***");
      }
    }
    return censoredText;
  };
  var ChatProvider = ({ children }) => {
    const { user } = useAuth();
    const [chats, setChats] = (0, import_react8.useState)(initialChats);
    const [messages, setMessages] = (0, import_react8.useState)(initialMessages);
    const [activeChatId, setActiveChatId] = (0, import_react8.useState)(null);
    const [isWidgetOpen, setIsWidgetOpen] = (0, import_react8.useState)(false);
    const [isTyping, setIsTyping] = (0, import_react8.useState)({});
    const [ai, setAi] = (0, import_react8.useState)(null);
    (0, import_react8.useEffect)(() => {
      try {
        setAi(new GoogleGenAI({ apiKey: "undefined" }));
      } catch (error) {
        console.error("Failed to initialize Google GenAI:", error);
        setAi(null);
      }
    }, []);
    const startChat = (0, import_react8.useCallback)((seller, store, product) => {
      if (!user) {
        alert("Veuillez vous connecter pour contacter un vendeur.");
        return;
      }
      if (user.id === seller.id) {
        alert("Vous ne pouvez pas vous envoyer de message.");
        return;
      }
      const participantIds = [user.id, seller.id];
      let existingChat = chats.find(
        (c) => c.participantIds.includes(participantIds[0]) && c.participantIds.includes(participantIds[1]) && c.productContext?.id === product?.id
      );
      let isNewChat = false;
      let chatId = existingChat?.id;
      if (!existingChat) {
        isNewChat = true;
        const newChatId = `chat_${Date.now()}`;
        chatId = newChatId;
        existingChat = {
          id: newChatId,
          participantIds,
          participantNames: {
            [user.id]: user.name,
            [seller.id]: seller.name
          },
          productContext: product ? {
            id: product.id,
            name: product.name,
            imageUrl: product.imageUrls[0]
          } : void 0,
          sellerStoreInfo: {
            physicalAddress: store.physicalAddress,
            location: store.location,
            neighborhood: store.neighborhood
          },
          lastMessageTimestamp: (/* @__PURE__ */ new Date()).toISOString(),
          unreadCount: { [user.id]: 0, [seller.id]: 0 }
        };
        setChats((prev) => [...prev, existingChat]);
        setMessages((prev) => ({ ...prev, [newChatId]: [] }));
      }
      setActiveChatId(chatId);
      setIsWidgetOpen(true);
      if (isNewChat && (!messages[chatId] || messages[chatId].length === 0)) {
        const welcomeMessage = {
          id: `msg_welcome_${Date.now()}`,
          chatId,
          senderId: "assistant-id",
          text: `Bonjour ! Je suis l'assistant KMER ZONE. Comment puis-je vous aider ${product ? `concernant "${product.name}"` : ""} ?`,
          timestamp: (/* @__PURE__ */ new Date()).toISOString(),
          isRead: true
        };
        setMessages((prev) => ({
          ...prev,
          [chatId]: [welcomeMessage]
        }));
        setChats((prev) => prev.map((c) => c.id === chatId ? { ...c, lastMessageTimestamp: welcomeMessage.timestamp } : c));
      }
    }, [user, chats, messages]);
    const sendMessage = (0, import_react8.useCallback)(async (chatId, text, allProducts, allCategories) => {
      if (!user) return;
      const chat = chats.find((c) => c.id === chatId);
      const censoredVersion = censorText(text, chat?.sellerStoreInfo);
      const userMessage = {
        id: `msg_${Date.now()}`,
        chatId,
        senderId: user.id,
        text,
        censoredText: censoredVersion !== text ? censoredVersion : void 0,
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        isRead: false
      };
      setMessages((prev) => ({
        ...prev,
        [chatId]: [...prev[chatId] || [], userMessage]
      }));
      setChats((prev) => prev.map((c) => c.id === chatId ? { ...c, lastMessageTimestamp: userMessage.timestamp } : c));
      if (!ai) {
        const errorMessage = {
          id: `msg_error_${Date.now()}`,
          chatId,
          senderId: "assistant-id",
          text: "D\xE9sol\xE9, la fonction de chat n'est pas disponible pour le moment en raison d'un probl\xE8me de configuration.",
          timestamp: (/* @__PURE__ */ new Date()).toISOString(),
          isRead: false
        };
        setMessages((prev) => ({
          ...prev,
          [chatId]: [...prev[chatId] || [], errorMessage]
        }));
        return;
      }
      setIsTyping((prev) => ({ ...prev, [chatId]: true }));
      try {
        if (!chat) throw new Error("Chat not found");
        const chatHistory = messages[chatId] || [];
        const formattedHistory = chatHistory.map((msg) => `${msg.senderId === user.id ? "Customer" : "Assistant"}: ${msg.text}`).join("\n");
        const getCategoryName = (categoryId) => allCategories.find((c) => c.id === categoryId)?.name || "Unknown";
        const simplifiedProducts = allProducts.map((p) => ({
          id: p.id,
          name: p.name,
          price: p.promotionPrice ?? p.price,
          vendor: p.vendor,
          category: getCategoryName(p.categoryId),
          description: p.description.substring(0, 150) + "..."
        }));
        const productContext = chat.productContext ? `The user is asking about this product: ${JSON.stringify(chat.productContext)}.` : "";
        const prompt2 = `
You are a friendly and helpful shopping assistant for KMER ZONE, an e-commerce marketplace in Cameroon.
Your goal is to help customers find products and answer their questions about the platform.
Provide concise, helpful answers in French.
When recommending products, list their name, price, and vendor.
Your knowledge is limited to the product data provided. Do not invent products or information.
For your safety, never ask for or provide personal contact information like phone numbers or email addresses. Keep all communication on the platform.

Here is the product catalog for KMER ZONE:
${JSON.stringify(simplifiedProducts)}

${productContext}

Here is the chat history so far:
${formattedHistory}

The customer just said: "${text}"

Please provide a helpful response as the KMER ZONE assistant.
        `;
        const assistantMessageId = `msg_assistant_${Date.now()}`;
        const initialAssistantMessage = {
          id: assistantMessageId,
          chatId,
          senderId: "assistant-id",
          text: "",
          // Start with empty text
          timestamp: (/* @__PURE__ */ new Date()).toISOString(),
          isRead: false
        };
        setMessages((prev) => ({
          ...prev,
          [chatId]: [...prev[chatId] || [], initialAssistantMessage]
        }));
        const response = await ai.models.generateContentStream({
          model: "gemini-2.5-flash",
          contents: prompt2
        });
        let fullText = "";
        for await (const chunk of response) {
          const chunkText = chunk.text;
          if (chunkText) {
            fullText += chunkText;
            setMessages((prev) => ({
              ...prev,
              [chatId]: prev[chatId].map(
                (msg) => msg.id === assistantMessageId ? { ...msg, text: fullText } : msg
              )
            }));
          }
        }
        setChats((prev) => prev.map((c) => c.id === chatId ? { ...c, lastMessageTimestamp: (/* @__PURE__ */ new Date()).toISOString() } : c));
      } catch (error) {
        console.error("Gemini API call failed or timed out:", error);
        const errorMessage = {
          id: `msg_error_${Date.now()}`,
          chatId,
          senderId: "assistant-id",
          text: "D\xE9sol\xE9, je n'arrive pas \xE0 r\xE9pondre pour le moment. Veuillez r\xE9essayer plus tard.",
          timestamp: (/* @__PURE__ */ new Date()).toISOString(),
          isRead: false
        };
        setMessages((prev) => ({
          ...prev,
          [chatId]: [...prev[chatId] || [], errorMessage]
        }));
      } finally {
        setIsTyping((prev) => ({ ...prev, [chatId]: false }));
      }
    }, [user, chats, messages, ai]);
    const handleSetActiveChat = (0, import_react8.useCallback)((chatId) => {
      setActiveChatId(chatId);
      if (chatId && user) {
        setChats((prev) => prev.map((chat) => {
          if (chat.id === chatId) {
            return { ...chat, unreadCount: { ...chat.unreadCount, [user.id]: 0 } };
          }
          return chat;
        }));
      }
    }, [user]);
    const totalUnreadCount = (0, import_react8.useMemo)(() => {
      if (!user) return 0;
      return chats.reduce((total, chat) => total + (chat.unreadCount[user.id] || 0), 0);
    }, [chats, user]);
    const contextValue = (0, import_react8.useMemo)(() => ({
      chats,
      messages,
      startChat,
      sendMessage,
      activeChatId,
      setActiveChatId: handleSetActiveChat,
      isWidgetOpen,
      setIsWidgetOpen,
      totalUnreadCount,
      isTyping
    }), [chats, messages, startChat, sendMessage, activeChatId, handleSetActiveChat, isWidgetOpen, setIsWidgetOpen, totalUnreadCount, isTyping]);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ChatContext.Provider, { value: contextValue, children });
  };
  var useChatContext = () => {
    const context = (0, import_react8.useContext)(ChatContext);
    if (context === void 0) {
      throw new Error("useChatContext must be used within a ChatProvider");
    }
    return context;
  };

  // contexts/LanguageContext.tsx
  var import_react9 = __toESM(require_react());

  // translations.ts
  var translations = {
    fr: {
      app: {
        passwordResetEmailSent: "Si un compte existe pour {0}, vous y trouverez un lien pour r\xE9initialiser votre mot de passe."
      },
      common: {
        backToHome: "Retour \xE0 l'accueil",
        save: "Sauvegarder",
        cancel: "Annuler",
        actions: "Actions",
        status: "Statut",
        price: "Prix",
        stock: "Stock",
        product: "Produit",
        date: "Date",
        total: "Total",
        customer: "Client",
        orderId: "ID Commande",
        edit: "Modifier",
        delete: "Supprimer",
        warn: "Avertir",
        approve: "Approuver",
        reject: "Rejeter",
        all: "Tout",
        days7: "7 jours",
        days30: "30 jours",
        days90: "90 jours"
      },
      orderStatus: {
        confirmed: "Confirm\xE9e",
        "ready-for-pickup": "Pr\xEAt pour enl\xE8vement",
        "picked-up": "Pris en charge",
        "at-depot": "Au d\xE9p\xF4t",
        "out-for-delivery": "En livraison",
        delivered: "Livr\xE9",
        cancelled: "Annul\xE9",
        "refund-requested": "Litige",
        refunded: "Rembours\xE9",
        returned: "Retourn\xE9",
        "depot-issue": "Probl\xE8me au d\xE9p\xF4t",
        "delivery-failed": "\xC9chec de livraison"
      },
      header: {
        searchPlaceholder: "Rechercher un produit...",
        login: "Connexion",
        myAccount: "Mon Compte",
        myOrders: "Mes Commandes",
        wishlist: "Favoris",
        messages: "Messages",
        cart: "Panier",
        categories: "Cat\xE9gories",
        promotions: "Promotions",
        flashSales: "Ventes Flash",
        stores: "Boutiques",
        becomeSeller: "Devenir vendeur",
        becomePremium: "Devenir Premium",
        notifications: "Notifications",
        superadminDashboard: "Dashboard Superadmin",
        sellerDashboard: "Dashboard Vendeur",
        sellerProfile: "Profil Boutique",
        deliveryDashboard: "Dashboard Livreur",
        depotDashboard: "Dashboard D\xE9p\xF4t",
        logout: "Se d\xE9connecter",
        noNotifications: "Aucune notification.",
        visualSearch: "Recherche par image",
        followedStores: "Boutiques Suivies",
        support: "Support",
        backToHome: "Retour \xE0 l'accueil"
      },
      footer: {
        aboutUs: "\xC0 propos de nous",
        contact: "Contact",
        faq: "FAQ",
        careers: "Carri\xE8res",
        terms: "Conditions d'utilisation",
        privacy: "Politique de confidentialit\xE9",
        forSellers: "Pour les Vendeurs",
        sellOnKmerZone: "Vendre sur KMER ZONE",
        trainingCenter: "Centre de formation",
        logistics: "Logistique & Livraison",
        followUs: "Suivez-nous",
        paymentMethods: "Moyens de Paiement",
        copyright: "\xA9 {0} {1}. Tous droits r\xE9serv\xE9s.",
        quickLinks: "Liens Rapides",
        aboutKmerZone: "Le meilleur du Cameroun, \xE0 port\xE9e de main. Notre mission est de connecter les commer\xE7ants locaux aux consommateurs."
      },
      home: {
        heroTitle: "Le meilleur du Cameroun, livr\xE9 chez vous.",
        heroSubtitle: "La plus grande s\xE9lection de produits locaux et internationaux, \xE0 port\xE9e de clic.",
        startShopping: "Commencer mes achats",
        storiesTitle: "Stories des Boutiques",
        recommendedForYou: "Recommand\xE9 pour Vous",
        promotionsTitle: "Promotions du moment",
        categoriesTitle: "Parcourir par cat\xE9gorie",
        popularProducts: "Nos produits populaires",
        madeInCameroonTitle: 'Fiert\xE9 Locale: Soutenez le "Made in Cameroon"',
        madeInCameroonSubtitle: "D\xE9couvrez des produits authentiques, fabriqu\xE9s avec passion par nos artisans et producteurs locaux. Chaque achat est un soutien \xE0 notre \xE9conomie.",
        recentlyViewed: "Consult\xE9s R\xE9cemment",
        howItWorksTitle: "Simple, Rapide et Fiable",
        howItWorksStep1Title: "1. Commandez",
        howItWorksStep1Text: "Choisissez parmi des milliers de produits et ajoutez-les \xE0 votre panier.",
        howItWorksStep2Title: "2. Payez en s\xE9curit\xE9",
        howItWorksStep2Text: "Utilisez Orange Money ou MTN Mobile Money pour un paiement 100% s\xE9curis\xE9.",
        howItWorksStep3Title: "3. Suivez votre livraison",
        howItWorksStep3Text: "Suivez votre livreur en temps r\xE9el jusqu'\xE0 votre porte.",
        howItWorksStep4Title: "4. Donnez votre avis",
        howItWorksStep4Text: "Notez les produits et les vendeurs pour aider la communaut\xE9.",
        featuredStores: "Nos boutiques partenaires"
      },
      accountPage: {
        dashboard: "Tableau de bord",
        profile: "Mon Profil",
        addresses: "Mes Adresses",
        orders: "Mes Commandes",
        followedStores: "Boutiques Suivies",
        support: "Support Client",
        notifications: "Notifications",
        security: "S\xE9curit\xE9",
        back: "Retour",
        welcome: "Bienvenue, {0} !",
        loyaltyStatus: "Statut de Fid\xE9lit\xE9",
        loyaltyMember: "Vous \xEAtes un membre {0}.",
        totalOrders: "Total commandes",
        lastOrder: "Derni\xE8re commande",
        noRecentOrder: "Aucune commande r\xE9cente.",
        viewDetails: "Voir les d\xE9tails",
        followedStoresTitle: "Boutiques Suivies",
        noFollowedStores: "Vous ne suivez aucune boutique.",
        manageStores: "G\xE9rer mes boutiques",
        editProfile: "Modifier le profil",
        save: "Enregistrer",
        fullName: "Nom complet",
        phone: "T\xE9l\xE9phone principal",
        birthDate: "Date de naissance",
        gender: "Genre",
        preferNotToSay: "Pr\xE9f\xE8re ne pas r\xE9pondre",
        male: "Homme",
        female: "Femme",
        other: "Autre",
        addNewAddress: "Ajouter une nouvelle adresse",
        default: "Par d\xE9faut",
        changePassword: "Changer mon mot de passe",
        oldPassword: "Ancien mot de passe",
        newPassword: "Nouveau mot de passe",
        confirmNewPassword: "Confirmer le nouveau mot de passe",
        update: "Mettre \xE0 jour",
        passwordMismatch: "Les nouveaux mots de passe ne correspondent pas.",
        passwordIncorrect: "L'ancien mot de passe est incorrect.",
        passwordSuccess: "Mot de passe mis \xE0 jour avec succ\xE8s !",
        notificationsTitle: "Notifications",
        orderUpdates: "Mises \xE0 jour de mes commandes",
        promotions: "Promotions et ventes flash",
        newsletters: "Newsletters de KMER ZONE",
        savePreferences: "Enregistrer les pr\xE9f\xE9rences",
        preferencesSaved: "Pr\xE9f\xE9rences sauvegard\xE9es !",
        createTicket: "Cr\xE9er un nouveau ticket",
        ticketSubject: "Sujet",
        linkToOrder: "(Optionnel) Lier \xE0 une commande",
        describeProblem: "D\xE9crivez votre probl\xE8me...",
        send: "Envoyer",
        backToList: "< Retour \xE0 la liste",
        yourReply: "Votre r\xE9ponse..."
      },
      becomeSeller: {
        title: "Devenez Vendeur sur KMER ZONE",
        subtitle: "Rejoignez notre communaut\xE9 de commer\xE7ants et d\xE9veloppez votre activit\xE9 en ligne.",
        step1Title: "1. Informations sur votre boutique",
        shopNameLabel: "Nom de la boutique*",
        shopLogoLabel: "Logo de la boutique*",
        upload: "T\xE9l\xE9verser",
        step2Title: "2. Vos informations de contact",
        firstNameLabel: "Pr\xE9nom*",
        lastNameLabel: "Nom*",
        phoneLabel: "T\xE9l\xE9phone*",
        step3Title: "3. Adresse de la boutique",
        cityLabel: "Ville*",
        neighborhoodLabel: "Quartier",
        addressLabel: "Adresse physique compl\xE8te (avec rep\xE8re)*",
        gpsLabel: "Localisation GPS",
        gpsDescription: "Cliquez sur la carte pour placer un marqueur \xE0 l'emplacement exact de votre boutique.",
        findMyPosition: "Trouver ma position",
        requiredDocsTitle: "Documents Requis",
        requiredDocsDescription: "Apr\xE8s avoir soumis votre candidature, vous devrez t\xE9l\xE9verser les documents suivants depuis votre tableau de bord vendeur :",
        submitCandidacy: "Soumettre ma candidature",
        errors: {
          shopName: "Le nom de la boutique est requis.",
          firstName: "Le pr\xE9nom est requis.",
          lastName: "Le nom de famille est requis.",
          phone: "Le num\xE9ro de t\xE9l\xE9phone est requis.",
          address: "L'adresse physique est requise.",
          logo: "Un logo est requis."
        }
      },
      sellerSubscription: {
        title: "F\xE9licitations et bienvenue !",
        subtitle: "Votre boutique est presque pr\xEAte. Choisissez le plan qui correspond le mieux \xE0 vos ambitions pour finaliser votre inscription.",
        standardTitle: "Vendeur Standard",
        standardDescription: "Id\xE9al pour les artisans et les petites boutiques qui d\xE9butent.",
        premiumTitle: "Vendeur Premium",
        premiumDescription: "Pour les boutiques \xE9tablies souhaitant acc\xE9l\xE9rer leur croissance.",
        superPremiumTitle: "Super Premium (Entreprise)",
        superPremiumDescription: "Con\xE7u pour les grandes entreprises et les marques reconnues.",
        standardFeatures: "Visibilit\xE9 standard|Gestion de base du catalogue ({0} produits)|Commission de {1}%|Support par email",
        premiumFeatures: "Tous les avantages Standard|Mise en avant dans les cat\xE9gories|{0} produits|Commission r\xE9duite \xE0 {1}%|Support prioritaire|Analyses avanc\xE9es",
        superPremiumFeatures: "Tous les avantages Premium|Visibilit\xE9 maximale sur l'accueil|{0} produits|Commission r\xE9duite \xE0 {1}%|Assistance d\xE9di\xE9e|Service photo inclus",
        selectPlan: "Choisir ce plan"
      },
      sellerDashboard: {
        tabs: {
          overview: "Aper\xE7u",
          products: "Produits",
          collections: "Collections",
          orders: "Commandes",
          reviews: "Avis Clients",
          promotions: "Promotions",
          flashSales: "Ventes Flash",
          analytics: "Statistiques",
          payouts: "Paiements",
          delivery: "Livraison",
          profile: "Profil Boutique",
          subscription: "Abonnement",
          documents: "Documents",
          stories: "Stories",
          chat: "Messages",
          support: "Support"
        },
        premiumFeatureTooltip: "Passez au statut Premium pour d\xE9bloquer cette fonctionnalit\xE9",
        overview: {
          title: "Aper\xE7u de la boutique : {0}",
          totalRevenue: "Revenu total (livr\xE9)",
          pendingOrders: "Commandes en attente",
          status: "Statut",
          warnings: "Avertissements R\xE9cents",
          notifications: "Notifications",
          noNotifications: "Aucune nouvelle notification."
        },
        products: {
          title: "Mes Produits ({0})",
          addProduct: "Ajouter un produit",
          table: {
            product: "Produit",
            price: "Prix",
            stock: "Stock",
            status: "Statut",
            actions: "Actions"
          },
          statusOptions: {
            published: "Publi\xE9",
            draft: "Brouillon",
            archived: "Archiv\xE9"
          },
          actions: {
            promote: "Mettre en promotion",
            edit: "Modifier",
            delete: "Supprimer"
          },
          noProducts: `Vous n'avez aucun produit. Cliquez sur "Ajouter un produit" pour commencer.`
        },
        collections: {
          title: "Mes Collections",
          create: "Cr\xE9er une collection",
          edit: "Modifier",
          createTitle: "Cr\xE9er une collection",
          editTitle: "Modifier une collection",
          name: "Nom de la collection",
          description: "Description (optionnel)",
          selectProducts: "S\xE9lectionner les produits",
          noCollections: "Vous n'avez aucune collection. Cr\xE9ez-en une pour regrouper vos produits !"
        },
        orders: {
          title: "Mes Commandes ({0})",
          table: {
            orderId: "ID Commande",
            customer: "Client",
            total: "Total",
            status: "Statut",
            action: "Action"
          },
          details: "D\xE9tails",
          printSlip: "Imprimer le bon",
          customerInfo: "Informations Client",
          items: "Articles",
          cancelOrder: "Annuler la commande",
          cancelConfirm: "\xCAtes-vous s\xFBr de vouloir annuler cette commande ? Cette action est irr\xE9versible.",
          disputeNotice: "Cette commande fait l'objet d'un litige. Un administrateur examine la situation.",
          markReady: "Marquer comme pr\xEAt pour l'exp\xE9dition"
        },
        reviews: {
          title: "Avis des Clients",
          rating: "{0}/5 par {1}",
          yourReply: "Votre r\xE9ponse :",
          reply: "R\xE9pondre",
          send: "Envoyer"
        },
        promotions: {
          title: "Codes Promo",
          createForm: {
            code: "CODEPROMO",
            value: "Valeur (10 ou 1000)",
            type_percentage: "%",
            type_fixed: "FCFA",
            create: "Cr\xE9er le code"
          }
        },
        flashSales: {
          title: "Ventes Flash",
          endsOn: "Se termine le: {0}",
          submitProduct: "Soumettre un produit",
          chooseProduct: "Choisir un produit",
          flashPrice: "Prix Flash",
          submit: "Soumettre"
        },
        payouts: {
          title: "Historique des Paiements",
          table: {
            date: "Date",
            amount: "Montant"
          }
        },
        documents: {
          title: "Mes Documents",
          replace: "Remplacer",
          upload: "T\xE9l\xE9verser",
          rejectionReason: "Motif du rejet: {0}"
        },
        support: {
          title: "Support Vendeur",
          subject: "Sujet de votre demande",
          describe: "D\xE9crivez votre probl\xE8me...",
          linkOrder: "Lier \xE0 une commande (optionnel)",
          sendTicket: "Envoyer le ticket"
        },
        shipping: {
          title: "Param\xE8tres de Livraison",
          partnersTitle: "Transporteurs Partenaires",
          partnersDescription: "S\xE9lectionnez les transporteurs que vous souhaitez proposer \xE0 vos clients.",
          premium: "Premium",
          customRatesTitle: "Tarifs d'exp\xE9dition personnalis\xE9s",
          customRatesDescription: "Laissez vide pour utiliser les tarifs par d\xE9faut de la plateforme.",
          localRate: "Livraison locale (m\xEAme ville) (FCFA)",
          nationalRate: "Livraison nationale (autre ville) (FCFA)",
          freeShippingTitle: "Livraison gratuite",
          freeShippingDescription: "Offrez la livraison gratuite pour les commandes de votre boutique d\xE9passant un certain montant.",
          freeShippingThreshold: "Seuil de livraison gratuite (FCFA)",
          saveChanges: "Enregistrer les modifications",
          saved: "Enregistr\xE9 !"
        },
        subscription: {
          title: "G\xE9rez votre abonnement",
          subtitle: "Passez \xE0 un plan sup\xE9rieur pour d\xE9bloquer de nouvelles fonctionnalit\xE9s et booster vos ventes.",
          currentPlan: "Votre plan actuel",
          upgrade: "Mettre \xE0 niveau",
          lowerPlan: "Plan inf\xE9rieur"
        },
        upgrade: {
          title: 'D\xE9bloquez la fonctionnalit\xE9 "{0}"',
          description: "Passez au statut Premium pour acc\xE9der \xE0 des outils avanc\xE9s et booster votre visibilit\xE9.",
          button: "Je veux devenir Premium"
        },
        analytics: {
          backToDashboard: "Retour au tableau de bord",
          title: "Analyse des Ventes",
          period: "P\xE9riode :",
          totalRevenue: "Revenu Total (Livr\xE9)",
          vsPrevious: "- vs p\xE9riode pr\xE9c\xE9dente",
          deliveredOrders: "Commandes Livr\xE9es",
          itemsSold: "Articles Vendus",
          averageBasket: "Panier Moyen",
          salesEvolution: "\xC9volution des Ventes",
          top5Products: "Top 5 Produits (par revenu)",
          sold: "vendus",
          noSalesData: "Aucune donn\xE9e de vente pour cette p\xE9riode.",
          lowStockAlerts: "Alertes Stock Faible (< 5)",
          remaining: "restant(s)",
          noLowStock: "Aucun produit en stock faible."
        },
        profile: {
          change: "Changer"
        }
      },
      deliveryDashboard: {
        title: "Tableau de bord Livreur",
        agent: "Agent",
        logout: "D\xE9connexion",
        status: "Statut",
        available: "Disponible",
        unavailable: "Indisponible",
        setUnavailable: "Passer indisponible",
        setAvailable: "Passer disponible",
        activeMissions: "Missions Actives",
        scanPackage: "Scanner un Colis",
        currentMissions: "Missions en cours",
        history: "Historique",
        showMap: "Voir la carte",
        hideMap: "Cacher la carte",
        pickedUpFromSeller: "R\xE9cup\xE9r\xE9 chez le vendeur",
        delivered: "Livr\xE9",
        deliveryFailed: "\xC9chec livraison",
        scannerError: "Impossible d'activer la cam\xE9ra. Veuillez v\xE9rifier les permissions.",
        noCamera: "Aucune cam\xE9ra trouv\xE9e.",
        cancel: "Annuler",
        confirmDelivery: "Confirmer la livraison",
        order: "Commande",
        recipientName: "Nom du r\xE9ceptionnaire *",
        confirm: "Confirmer",
        reportFailure: "Signaler un \xE9chec de livraison",
        reason: "Motif *",
        clientAbsent: "Client absent",
        wrongAddress: "Adresse erron\xE9e",
        packageRefused: "Colis refus\xE9",
        details: "D\xE9tails suppl\xE9mentaires *",
        confirmFailure: "Confirmer l'\xE9chec"
      },
      depotDashboard: {
        title: "Tableau de bord - D\xE9p\xF4t (Zone {0})",
        manager: "Chef de D\xE9p\xF4t",
        logout: "D\xE9connexion",
        overview: "Aper\xE7u",
        parcels: "Suivi Colis",
        inventory: "Inventaire",
        drivers: "Livreurs",
        agents: "Agents",
        sellers: "Vendeurs",
        reports: "Rapports",
        parcelsToAssign: "Colis \xE0 affecter",
        parcelsInDelivery: "Colis en livraison",
        availableAgents: "Livreurs disponibles",
        toAssign: "\xC0 Affecter ({0})",
        inDelivery: "En Livraison ({0})",
        issues: "Probl\xE8mes ({0})",
        client: "Client",
        assign: "Affecter",
        table: {
          orderId: "ID Commande",
          customer: "Client",
          location: "Emplacement",
          numItems: "Nbr Articles",
          agent: "Livreur",
          seller: "Vendeur",
          parcels: "Colis",
          availability: "Disponibilit\xE9",
          performance: "Performance"
        },
        noParcelsInStock: "Aucun colis en stock pour le moment.",
        manageAgents: "Gestion des Agents de la Zone {0}",
        successRate: "Taux de r\xE9ussite",
        deliveriesSucceeded: "{0} / {1} livraisons r\xE9ussies",
        sellersWithParcels: "Vendeurs avec Colis au D\xE9p\xF4t",
        reportsWIP: "Section des rapports en cours de construction.",
        assignDriver: "Affecter un livreur",
        chooseAvailableDriver: "-- Choisir un livreur disponible --",
        scanAndCheckIn: "Scanner & Enregistrer un Colis",
        checkInParcel: "Enregistrer un Colis",
        storageLocation: "Emplacement de stockage (Ex: A3-S2)",
        checkIn: "Enregistrer",
        inventoryPanel: {
          totalSlots: "Emplacements Totals",
          occupiedSlots: "Emplacements Occup\xE9s",
          freeSlots: "Emplacements Libres",
          currentInventory: "Inventaire Actuel des Colis",
          freeLocations: "Emplacements Libres",
          noLayout: "La configuration de l'entrep\xF4t n'est pas d\xE9finie.",
          searchPlaceholder: "Rechercher par ID, client ou emplacement...",
          recentMovements: "Mouvements R\xE9cents de l'Inventaire",
          table: {
            action: "Action",
            details: "D\xE9tails",
            timestamp: "Horodatage",
            entry: "Entr\xE9e",
            exit: "Sortie"
          }
        },
        noData: "Aucune donn\xE9e \xE0 afficher.",
        schedule: "Planning de travail",
        saveSchedule: "Enregistrer le planning",
        scheduleSaved: "Planning enregistr\xE9 !",
        weekdays: {
          monday: "Lundi",
          tuesday: "Mardi",
          wednesday: "Mercredi",
          thursday: "Jeudi",
          friday: "Vendredi",
          saturday: "Samedi",
          sunday: "Dimanche"
        },
        shifts: {
          morning: "Matin",
          afternoon: "Apr\xE8s-midi",
          night: "Nuit",
          off: "Repos"
        },
        reportsPanel: {
          title: "Rapports de Performance du D\xE9p\xF4t",
          selectPeriod: "S\xE9lectionner une p\xE9riode :",
          parcelsCheckedIn: "Colis Enregistr\xE9s (Entr\xE9es)",
          parcelsShippedOut: "Colis Exp\xE9di\xE9s (Sorties)",
          avgProcessingTime: "Temps de Traitement Moyen",
          deliverySuccessRate: "Taux de Succ\xE8s des Livraisons",
          dailyFlow: "Flux Journalier (Entr\xE9es/Sorties)",
          in: "Entr\xE9es",
          out: "Sorties",
          topDrivers: "Top Livreurs (par livraisons r\xE9ussies)",
          driver: "Livreur",
          successfulDeliveries: "Livraisons R\xE9ussies",
          noData: "Pas assez de donn\xE9es pour cette p\xE9riode.",
          hours: "heures"
        }
      },
      superadmin: {
        tabs: {
          overview: "Aper\xE7u",
          orders: "Commandes",
          stores: "Boutiques",
          users: "Utilisateurs",
          catalog: "Catalogue",
          marketing: "Marketing",
          logistics: "Logistique",
          payouts: "Paiements",
          support: "Support",
          reviews: "Avis",
          logs: "Logs",
          settings: "Param\xE8tres"
        },
        panelUnderConstruction: 'Le panneau pour "{0}" est en cours de construction.',
        overview: {
          totalRevenue: "Revenu Total (Livr\xE9)",
          totalOrders: "Commandes Totales",
          totalUsers: "Utilisateurs Totals",
          pendingStores: "Boutiques en Attente",
          revenueLast7Days: "Revenus des 7 derniers jours",
          orderStatuses: "Statuts des Commandes",
          recentOrders: "Derni\xE8res Commandes",
          newUsers: "Nouveaux Utilisateurs"
        },
        users: {
          title: "Gestion des Utilisateurs ({0})",
          searchPlaceholder: "Rechercher par nom ou email...",
          sendEmail: "Envoyer un e-mail ({0})",
          create: "Cr\xE9er",
          table: {
            name: "Nom",
            email: "Email",
            role: "R\xF4le",
            action: "Action"
          },
          form: {
            editTitle: "Modifier l'utilisateur",
            createTitle: "Cr\xE9er un utilisateur",
            name: "Nom complet",
            role_customer: "Client",
            role_seller: "Vendeur",
            role_delivery_agent: "Livreur",
            role_depot_agent: "Agent de d\xE9p\xF4t",
            role_depot_manager: "Chef de D\xE9p\xF4t",
            role_superadmin: "Super Admin",
            assignedDepot: "Point de D\xE9p\xF4t Assign\xE9",
            deliveryZone: "Zone de livraison",
            noDepot: "-- Non assign\xE9 --",
            noZone: "-- Aucune zone --"
          }
        },
        emailModal: {
          title: "Envoyer un e-mail group\xE9",
          recipients: "Destinataires : {0} utilisateur(s) s\xE9lectionn\xE9(s)",
          useTemplate: "Utiliser un mod\xE8le (optionnel)",
          customEmail: "-- R\xE9diger un e-mail personnalis\xE9 --",
          subject: "Sujet",
          body: "Contenu du message",
          variableInfo: "Vous pouvez utiliser la variable `{customerName}` qui sera remplac\xE9e par le nom de chaque destinataire.",
          send: "Envoyer l'e-mail"
        },
        catalog: {
          title: "Gestion du Catalogue",
          addCategory: "Ajouter une Cat\xE9gorie",
          categoryName: "Nom de la cat\xE9gorie",
          parentCategory: "Cat\xE9gorie parente (optionnel)",
          mainCategory: "-- Cat\xE9gorie principale --",
          add: "Ajouter",
          imageUrl: "URL de l'image"
        },
        marketing: {
          tabs: {
            flashSales: "Ventes Flash",
            ads: "Publicit\xE9s",
            announcements: "Annonces"
          },
          createFlashSale: "Cr\xE9er une Vente Flash",
          addAd: "Ajouter une Publicit\xE9",
          createAnnouncement: "Cr\xE9er une Annonce",
          flashSaleForm: {
            title: "Cr\xE9er un \xE9v\xE9nement Vente Flash",
            name: "Nom de l'\xE9v\xE9nement (ex: Black Friday)",
            startDate: "Date et heure de d\xE9but",
            endDate: "Date et heure de fin",
            error_name: "Le nom de l'\xE9v\xE9nement est requis.",
            error_startDate: "La date et l'heure de d\xE9but sont requises.",
            error_endDate: "La date et l'heure de fin sont requises.",
            error_endDateAfterStart: "La date de fin doit \xEAtre post\xE9rieure \xE0 la date de d\xE9but.",
            error_endDatePast: "La date de fin ne peut pas \xEAtre dans le pass\xE9.",
            create: "Cr\xE9er l'\xE9v\xE9nement"
          },
          flashSaleDetail: {
            submissions: "Soumissions de produits",
            approveAll: "Tout Approuver",
            rejectAll: "Tout Rejeter",
            product: "Produit",
            seller: "Vendeur",
            originalPrice: "Prix Original",
            flashPrice: "Prix Flash"
          },
          adForm: {
            imageUrl: "URL de l'image",
            linkUrl: "URL du lien",
            activate: "Activer la publicit\xE9"
          },
          announcementForm: {
            title: "Titre de l'annonce",
            content: "Contenu de l'annonce",
            target_all: "Tous les utilisateurs",
            target_customers: "Clients seulement",
            target_sellers: "Vendeurs seulement",
            activate: "Activer l'annonce"
          }
        },
        stores: {
          title: "Gestion des Boutiques",
          tabs: {
            pending: "En attente",
            active: "Actives",
            suspended: "Suspendues"
          },
          table: {
            store: "Boutique",
            seller: "Vendeur",
            documents: "Documents",
            location: "Localisation"
          },
          noStores: "Aucune boutique dans cette cat\xE9gorie.",
          rejectionReason: "Motif du rejet :",
          warnReason: "Motif de l'avertissement:"
        },
        orders: {
          title: "Gestion des Commandes",
          tabs: {
            all: "Toutes les commandes",
            disputes: "Litiges"
          },
          searchPlaceholder: "Rechercher par ID ou client...",
          allStatuses: "Tous les statuts",
          noDisputes: "Aucun litige en cours.",
          evidence: "Preuves:",
          rejectRequest: "Rejeter la demande",
          approveRefund: "Approuver le remboursement"
        },
        logistics: {
          title: "Gestion Logistique",
          addPickupPoint: "Ajouter un Point de D\xE9p\xF4t",
          form: {
            name: "Nom du point de d\xE9p\xF4t",
            city: "Ville",
            neighborhood: "Quartier",
            street: "Rue / Rep\xE8re"
          },
          staffModal: {
            title: "Personnel - {0}",
            manager: "Responsable",
            noManager: "Aucun responsable assign\xE9.",
            staff: "Personnel",
            noStaff: "Aucun agent assign\xE9 \xE0 ce d\xE9p\xF4t."
          },
          viewStaff: "Voir personnel"
        },
        payouts: {
          title: "Paiements des Vendeurs",
          commissionInfo: "Taux de commission actuel : {0}% (Standard)",
          balanceInfo: "Le solde d\xFB est calcul\xE9 sur les commandes livr\xE9es, moins la commission et les paiements d\xE9j\xE0 effectu\xE9s.",
          table: {
            store: "Boutique",
            totalRevenue: "Revenu Total",
            commissionDue: "Commission Due",
            paidAmount: "D\xE9j\xE0 Pay\xE9",
            balanceDue: "Solde D\xFB"
          },
          markAsPaid: "Marquer comme pay\xE9",
          noPending: "Aucun paiement en attente."
        },
        support: {
          title: "Tickets de Support ({0})",
          detail: {
            back: "< Retour \xE0 la liste",
            user: "Utilisateur:",
            replyPlaceholder: "Votre r\xE9ponse...",
            reply: "R\xE9pondre"
          },
          status: {
            open: "Ouvert",
            inProgress: "En cours",
            resolved: "R\xE9solu"
          }
        },
        reviews: {
          title: "Mod\xE9ration des Avis ({0})",
          noPending: "Aucun avis en attente de mod\xE9ration.",
          goodJob: "Excellent travail !",
          product: "Produit:",
          by: "Par:",
          on: "le"
        },
        logs: {
          title: "Journaux d'Activit\xE9",
          filterPlaceholder: "Filtrer les logs...",
          performedAction: "a effectu\xE9 l'action :",
          details: "D\xE9tails :",
          noLogs: "Aucun log correspondant \xE0 votre recherche."
        },
        settings: {
          title: "Param\xE8tres du Site",
          save: "Sauvegarder les Param\xE8tres",
          sections: {
            identity: "Identit\xE9 Visuelle",
            features: "Fonctionnalit\xE9s",
            delivery: "Livraison",
            sellerDocs: "Documents Vendeur Requis",
            sellerPlans: "Plans Vendeurs",
            loyalty: "Programme de Fid\xE9lit\xE9 Client",
            seo: "SEO & M\xE9tadonn\xE9es",
            content: "Gestion du contenu des pages",
            emails: "Mod\xE8les d'e-mails",
            maintenance: "Mode Maintenance",
            footer: "Pied de page (Footer)"
          },
          identity: {
            logo: "Logo du site",
            banner: "Banni\xE8re de la page d'accueil",
            upload: "Choisir"
          },
          features: {
            chat: "Activer le chat client-vendeur",
            comparison: "Activer la comparaison de produits"
          },
          delivery: {
            intraUrban: "Frais de base intra-urbain (FCFA)",
            interUrban: "Frais de base inter-urbain (FCFA)",
            perKg: "Co\xFBt additionnel par Kg (FCFA)",
            premiumDiscount: "R\xE9duction livraison pour Premium (%)"
          },
          plans: {
            standard: "Plan Standard",
            premium: "Plan Premium",
            superPremium: "Plan Super Premium",
            price: "Prix (FCFA)",
            duration: "Dur\xE9e (jours)",
            limit: "Limite de produits",
            commission: "Commission (%)",
            photoService: "Service photo inclus",
            homepageFeature: "Mise en avant sur l'accueil"
          },
          loyalty: {
            enable: "Activer le programme de fid\xE9lit\xE9 pour les clients",
            premium: "Plan Premium Client",
            ordersRequired: "Nombre de commandes requises",
            spendingRequired: "Montant total d\xE9pens\xE9 requis (FCFA)",
            caution: "Montant de la caution (FCFA)",
            benefits: "Avantages (un par ligne)",
            premiumPlus: "Plan Premium+ Client",
            enablePremiumPlus: "Activer le plan Premium+",
            annualFee: "Frais annuels (FCFA)"
          },
          seo: {
            defaultTitle: "Titre M\xE9ta par d\xE9faut",
            defaultDesc: "Description M\xE9ta par d\xE9faut",
            ogImage: "URL de l'image de partage (OpenGraph)"
          },
          content: {
            pageTitle: "Titre de la page : {0}",
            content: "Contenu"
          },
          emails: {
            subject: "Sujet de l'e-mail",
            body: "Corps de l'e-mail",
            variables: "Variables disponibles : {0}"
          },
          maintenance: {
            enable: "Activer le mode maintenance",
            message: "Message de maintenance"
          },
          footer: {
            companyName: "Nom de l'entreprise (Copyright)",
            iconUrl: "URL de l'ic\xF4ne"
          }
        }
      },
      forbidden: {
        title: "Acc\xE8s Interdit",
        description: "D\xE9sol\xE9, vous n'avez pas les autorisations n\xE9cessaires pour acc\xE9der \xE0 cette page.",
        backHome: "Retour \xE0 l'accueil"
      },
      notFound: {
        title: "Page non trouv\xE9e",
        description: "D\xE9sol\xE9, la page que vous recherchez n'existe pas ou a \xE9t\xE9 d\xE9plac\xE9e.",
        backHome: "Retour \xE0 l'accueil"
      },
      forgotPassword: {
        title: "Mot de passe oubli\xE9",
        description: "Ne vous inqui\xE9tez pas. Entrez votre email et nous vous enverrons un lien de r\xE9initialisation.",
        emailLabel: "Adresse e-mail",
        sendLink: "Envoyer le lien",
        checkEmailTitle: "V\xE9rifiez votre messagerie",
        checkEmailDescription: "Si un compte existe pour {0}, vous y trouverez un lien pour r\xE9initialiser votre mot de passe.",
        close: "Fermer"
      }
    },
    en: {
      app: {
        passwordResetEmailSent: "If an account exists for {0}, you will find a link to reset your password there."
      },
      common: {
        backToHome: "Back to Home",
        save: "Save",
        cancel: "Cancel",
        actions: "Actions",
        status: "Status",
        price: "Price",
        stock: "Stock",
        product: "Product",
        date: "Date",
        total: "Total",
        customer: "Customer",
        orderId: "Order ID",
        edit: "Edit",
        delete: "Delete",
        warn: "Warn",
        approve: "Approve",
        reject: "Reject",
        all: "All",
        days7: "7 days",
        days30: "30 days",
        days90: "90 days"
      },
      orderStatus: {
        confirmed: "Confirmed",
        "ready-for-pickup": "Ready for Pickup",
        "picked-up": "Picked Up",
        "at-depot": "At Depot",
        "out-for-delivery": "Out for Delivery",
        delivered: "Delivered",
        cancelled: "Cancelled",
        "refund-requested": "Dispute",
        refunded: "Refunded",
        returned: "Returned",
        "depot-issue": "Depot Issue",
        "delivery-failed": "Delivery Failed"
      },
      header: {
        searchPlaceholder: "Search for a product...",
        login: "Login",
        myAccount: "My Account",
        myOrders: "My Orders",
        wishlist: "Wishlist",
        messages: "Messages",
        cart: "Cart",
        categories: "Categories",
        promotions: "Promotions",
        flashSales: "Flash Sales",
        stores: "Stores",
        becomeSeller: "Become a Seller",
        becomePremium: "Go Premium",
        notifications: "Notifications",
        superadminDashboard: "Superadmin Dashboard",
        sellerDashboard: "Seller Dashboard",
        sellerProfile: "Store Profile",
        deliveryDashboard: "Delivery Dashboard",
        depotDashboard: "Depot Dashboard",
        logout: "Logout",
        noNotifications: "No notifications.",
        visualSearch: "Visual Search",
        followedStores: "Followed Stores",
        support: "Support",
        backToHome: "Back to Home"
      },
      footer: {
        aboutUs: "About Us",
        contact: "Contact",
        faq: "FAQ",
        careers: "Careers",
        terms: "Terms of Service",
        privacy: "Privacy Policy",
        forSellers: "For Sellers",
        sellOnKmerZone: "Sell on KMER ZONE",
        trainingCenter: "Training Center",
        logistics: "Logistics & Delivery",
        followUs: "Follow Us",
        paymentMethods: "Payment Methods",
        copyright: "\xA9 {0} {1}. All rights reserved.",
        quickLinks: "Quick Links",
        aboutKmerZone: "The best of Cameroon, at your fingertips. Our mission is to connect local merchants with consumers."
      },
      home: {
        heroTitle: "The Best of Cameroon, Delivered to You.",
        heroSubtitle: "The largest selection of local and international products, just a click away.",
        startShopping: "Start Shopping",
        storiesTitle: "Store Stories",
        recommendedForYou: "Recommended for You",
        promotionsTitle: "Current Promotions",
        categoriesTitle: "Browse by Category",
        popularProducts: "Our Popular Products",
        madeInCameroonTitle: 'Local Pride: Support "Made in Cameroon"',
        madeInCameroonSubtitle: "Discover authentic products, crafted with passion by our local artisans and producers. Every purchase supports our economy.",
        recentlyViewed: "Recently Viewed",
        howItWorksTitle: "Simple, Fast, and Reliable",
        howItWorksStep1Title: "1. Order",
        howItWorksStep1Text: "Choose from thousands of products and add them to your cart.",
        howItWorksStep2Title: "2. Pay Securely",
        howItWorksStep2Text: "Use Orange Money or MTN Mobile Money for a 100% secure payment.",
        howItWorksStep3Title: "3. Track Your Delivery",
        howItWorksStep3Text: "Follow your delivery driver in real-time to your door.",
        howItWorksStep4Title: "4. Give Feedback",
        howItWorksStep4Text: "Rate products and sellers to help the community.",
        featuredStores: "Our Partner Stores"
      },
      accountPage: {
        dashboard: "Dashboard",
        profile: "My Profile",
        addresses: "My Addresses",
        orders: "My Orders",
        followedStores: "Followed Stores",
        support: "Customer Support",
        notifications: "Notifications",
        security: "Security",
        back: "Back",
        welcome: "Welcome, {0}!",
        loyaltyStatus: "Loyalty Status",
        loyaltyMember: "You are a {0} member.",
        totalOrders: "Total orders",
        lastOrder: "Last Order",
        noRecentOrder: "No recent orders.",
        viewDetails: "View details",
        followedStoresTitle: "Followed Stores",
        noFollowedStores: "You are not following any stores.",
        manageStores: "Manage my stores",
        editProfile: "Edit Profile",
        save: "Save",
        fullName: "Full Name",
        phone: "Main Phone",
        birthDate: "Date of Birth",
        gender: "Gender",
        preferNotToSay: "Prefer not to say",
        male: "Male",
        female: "Female",
        other: "Other",
        addNewAddress: "Add a new address",
        default: "Default",
        changePassword: "Change my password",
        oldPassword: "Old password",
        newPassword: "New password",
        confirmNewPassword: "Confirm new password",
        update: "Update",
        passwordMismatch: "New passwords do not match.",
        passwordIncorrect: "Old password is incorrect.",
        passwordSuccess: "Password updated successfully!",
        notificationsTitle: "Notifications",
        orderUpdates: "My order updates",
        promotions: "Promotions and flash sales",
        newsletters: "KMER ZONE Newsletters",
        savePreferences: "Save preferences",
        preferencesSaved: "Preferences saved!",
        createTicket: "Create a new ticket",
        ticketSubject: "Subject",
        linkToOrder: "(Optional) Link to an order",
        describeProblem: "Describe your issue...",
        send: "Send",
        backToList: "< Back to list",
        yourReply: "Your reply..."
      },
      becomeSeller: {
        title: "Become a Seller on KMER ZONE",
        subtitle: "Join our community of merchants and grow your business online.",
        step1Title: "1. Your Store Information",
        shopNameLabel: "Store Name*",
        shopLogoLabel: "Store Logo*",
        upload: "Upload",
        step2Title: "2. Your Contact Information",
        firstNameLabel: "First Name*",
        lastNameLabel: "Last Name*",
        phoneLabel: "Phone*",
        step3Title: "3. Store Address",
        cityLabel: "City*",
        neighborhoodLabel: "Neighborhood",
        addressLabel: "Full Physical Address (with landmark)*",
        gpsLabel: "GPS Location",
        gpsDescription: "Click on the map to place a marker at your store's exact location.",
        findMyPosition: "Find my position",
        requiredDocsTitle: "Required Documents",
        requiredDocsDescription: "After submitting your application, you will need to upload the following documents from your seller dashboard:",
        submitCandidacy: "Submit my application",
        errors: {
          shopName: "Store name is required.",
          firstName: "First name is required.",
          lastName: "Last name is required.",
          phone: "Phone number is required.",
          address: "Physical address is required.",
          logo: "A logo is required."
        }
      },
      sellerSubscription: {
        title: "Congratulations and Welcome!",
        subtitle: "Your store is almost ready. Choose the plan that best fits your ambitions to finalize your registration.",
        standardTitle: "Standard Seller",
        standardDescription: "Ideal for artisans and small shops just starting out.",
        premiumTitle: "Premium Seller",
        premiumDescription: "For established stores looking to accelerate their growth.",
        superPremiumTitle: "Super Premium (Enterprise)",
        superPremiumDescription: "Designed for large businesses and well-known brands.",
        standardFeatures: "Standard visibility|Basic catalog management ({0} products)|{1}% commission|Email support",
        premiumFeatures: "All Standard benefits|Featured in categories|{0} products|Commission reduced to {1}%|Priority support|Advanced analytics",
        superPremiumFeatures: "All Premium benefits|Maximum visibility on homepage|{0} products|Commission reduced to {1}%|Dedicated assistance|Photo service included",
        selectPlan: "Choose This Plan"
      },
      sellerDashboard: {
        tabs: {
          overview: "Overview",
          products: "Products",
          collections: "Collections",
          orders: "Orders",
          reviews: "Customer Reviews",
          promotions: "Promotions",
          flashSales: "Flash Sales",
          analytics: "Analytics",
          payouts: "Payouts",
          delivery: "Shipping",
          profile: "Store Profile",
          subscription: "Subscription",
          documents: "Documents",
          stories: "Stories",
          chat: "Messages",
          support: "Support"
        },
        premiumFeatureTooltip: "Upgrade to a Premium plan to unlock this feature",
        overview: {
          title: "Store Overview: {0}",
          totalRevenue: "Total Revenue (Delivered)",
          pendingOrders: "Pending Orders",
          status: "Status",
          warnings: "Recent Warnings",
          notifications: "Notifications",
          noNotifications: "No new notifications."
        },
        products: {
          title: "My Products ({0})",
          addProduct: "Add Product",
          table: {
            product: "Product",
            price: "Price",
            stock: "Stock",
            status: "Status",
            actions: "Actions"
          },
          statusOptions: {
            published: "Published",
            draft: "Draft",
            archived: "Archived"
          },
          actions: {
            promote: "Set promotion",
            edit: "Edit",
            delete: "Delete"
          },
          noProducts: `You don't have any products. Click "Add Product" to get started.`
        },
        collections: {
          title: "My Collections",
          create: "Create Collection",
          edit: "Edit",
          createTitle: "Create a Collection",
          editTitle: "Edit Collection",
          name: "Collection name",
          description: "Description (optional)",
          selectProducts: "Select products",
          noCollections: "You don't have any collections. Create one to group your products!"
        },
        orders: {
          title: "My Orders ({0})",
          table: {
            orderId: "Order ID",
            customer: "Customer",
            total: "Total",
            status: "Status",
            action: "Action"
          },
          details: "Details",
          printSlip: "Print Slip",
          customerInfo: "Customer Information",
          items: "Items",
          cancelOrder: "Cancel Order",
          cancelConfirm: "Are you sure you want to cancel this order? This action is irreversible.",
          disputeNotice: "This order is under dispute. An administrator is reviewing the situation.",
          markReady: "Mark as Ready for Pickup"
        },
        reviews: {
          title: "Customer Reviews",
          rating: "{0}/5 by {1}",
          yourReply: "Your reply:",
          reply: "Reply",
          send: "Send"
        },
        promotions: {
          title: "Promo Codes",
          createForm: {
            code: "PROMOCODE",
            value: "Value (10 or 1000)",
            type_percentage: "%",
            type_fixed: "FCFA",
            create: "Create Code"
          }
        },
        flashSales: {
          title: "Flash Sales",
          endsOn: "Ends on: {0}",
          submitProduct: "Submit a product",
          chooseProduct: "Choose a product",
          flashPrice: "Flash Price",
          submit: "Submit"
        },
        payouts: {
          title: "Payout History",
          table: {
            date: "Date",
            amount: "Amount"
          }
        },
        documents: {
          title: "My Documents",
          replace: "Replace",
          upload: "Upload",
          rejectionReason: "Rejection reason: {0}"
        },
        support: {
          title: "Seller Support",
          subject: "Subject of your request",
          describe: "Describe your issue...",
          linkOrder: "Link to an order (optional)",
          sendTicket: "Send Ticket"
        },
        shipping: {
          title: "Shipping Settings",
          partnersTitle: "Partner Carriers",
          partnersDescription: "Select the carriers you want to offer to your customers.",
          premium: "Premium",
          customRatesTitle: "Custom Shipping Rates",
          customRatesDescription: "Leave empty to use the platform's default rates.",
          localRate: "Local delivery (same city) (FCFA)",
          nationalRate: "National delivery (other city) (FCFA)",
          freeShippingTitle: "Free Shipping",
          freeShippingDescription: "Offer free shipping for orders from your store above a certain amount.",
          freeShippingThreshold: "Free shipping threshold (FCFA)",
          saveChanges: "Save Changes",
          saved: "Saved!"
        },
        subscription: {
          title: "Manage your subscription",
          subtitle: "Upgrade to a higher plan to unlock new features and boost your sales.",
          currentPlan: "Your current plan",
          upgrade: "Upgrade",
          lowerPlan: "Lower plan"
        },
        upgrade: {
          title: 'Unlock the "{0}" feature',
          description: "Upgrade to Premium to access advanced tools and boost your visibility.",
          button: "I want to go Premium"
        },
        analytics: {
          backToDashboard: "Back to Dashboard",
          title: "Sales Analytics",
          period: "Period:",
          totalRevenue: "Total Revenue (Delivered)",
          vsPrevious: "- vs previous period",
          deliveredOrders: "Delivered Orders",
          itemsSold: "Items Sold",
          averageBasket: "Average Basket",
          salesEvolution: "Sales Evolution",
          top5Products: "Top 5 Products (by revenue)",
          sold: "sold",
          noSalesData: "No sales data for this period.",
          lowStockAlerts: "Low Stock Alerts (< 5)",
          remaining: "remaining",
          noLowStock: "No products with low stock."
        },
        profile: {
          change: "Change"
        }
      },
      deliveryDashboard: {
        title: "Delivery Dashboard",
        agent: "Agent",
        logout: "Logout",
        status: "Status",
        available: "Available",
        unavailable: "Unavailable",
        setUnavailable: "Go unavailable",
        setAvailable: "Go available",
        activeMissions: "Active Missions",
        scanPackage: "Scan a Package",
        currentMissions: "Current Missions",
        history: "History",
        showMap: "Show Map",
        hideMap: "Hide Map",
        pickedUpFromSeller: "Picked up from seller",
        delivered: "Delivered",
        deliveryFailed: "Delivery Failed",
        scannerError: "Could not activate camera. Please check permissions.",
        noCamera: "No camera found.",
        cancel: "Cancel",
        confirmDelivery: "Confirm Delivery",
        order: "Order",
        recipientName: "Recipient's name*",
        confirm: "Confirm",
        reportFailure: "Report Delivery Failure",
        reason: "Reason*",
        clientAbsent: "Client absent",
        wrongAddress: "Wrong address",
        packageRefused: "Package refused",
        details: "Additional details*",
        confirmFailure: "Confirm Failure"
      },
      depotDashboard: {
        title: "Depot Dashboard - Zone {0}",
        manager: "Depot Manager",
        logout: "Logout",
        overview: "Overview",
        parcels: "Parcel Tracking",
        inventory: "Inventory",
        drivers: "Drivers",
        agents: "Agents",
        sellers: "Sellers",
        reports: "Reports",
        parcelsToAssign: "Parcels to Assign",
        parcelsInDelivery: "Parcels in Delivery",
        availableAgents: "Available Drivers",
        toAssign: "To Assign ({0})",
        inDelivery: "In Delivery ({0})",
        issues: "Issues ({0})",
        client: "Client",
        assign: "Assign",
        table: {
          orderId: "Order ID",
          customer: "Customer",
          location: "Location",
          numItems: "# Items",
          agent: "Driver",
          seller: "Seller",
          parcels: "Parcels",
          availability: "Availability",
          performance: "Performance"
        },
        noParcelsInStock: "No parcels in stock at the moment.",
        manageAgents: "Manage Agents for Zone {0}",
        successRate: "Success rate",
        deliveriesSucceeded: "{0} / {1} successful deliveries",
        sellersWithParcels: "Sellers with Parcels at Depot",
        reportsWIP: "Reports section is under construction.",
        assignDriver: "Assign a Driver",
        chooseAvailableDriver: "-- Choose an available driver --",
        scanAndCheckIn: "Scan & Check-In a Parcel",
        checkInParcel: "Check-In a Parcel",
        storageLocation: "Storage Location (e.g., A3-S2)",
        checkIn: "Check-In",
        inventoryPanel: {
          totalSlots: "Total Slots",
          occupiedSlots: "Occupied Slots",
          freeSlots: "Free Slots",
          currentInventory: "Current Parcel Inventory",
          freeLocations: "Free Locations",
          noLayout: "Warehouse layout is not configured.",
          searchPlaceholder: "Search by ID, customer, or location...",
          recentMovements: "Recent Inventory Movements",
          table: {
            action: "Action",
            details: "Details",
            timestamp: "Timestamp",
            entry: "Entry",
            exit: "Exit"
          }
        },
        noData: "No data to display.",
        schedule: "Work Schedule",
        saveSchedule: "Save Schedule",
        scheduleSaved: "Schedule saved!",
        weekdays: {
          monday: "Monday",
          tuesday: "Tuesday",
          wednesday: "Wednesday",
          thursday: "Thursday",
          friday: "Friday",
          saturday: "Saturday",
          sunday: "Sunday"
        },
        shifts: {
          morning: "Morning",
          afternoon: "Afternoon",
          night: "Night",
          off: "Off"
        },
        reportsPanel: {
          title: "Depot Performance Reports",
          selectPeriod: "Select period:",
          parcelsCheckedIn: "Parcels Checked-In",
          parcelsShippedOut: "Parcels Shipped Out",
          avgProcessingTime: "Avg. Processing Time",
          deliverySuccessRate: "Delivery Success Rate",
          dailyFlow: "Daily Flow (In/Out)",
          in: "In",
          out: "Out",
          topDrivers: "Top Drivers (by successful deliveries)",
          driver: "Driver",
          successfulDeliveries: "Successful Deliveries",
          noData: "Not enough data for this period.",
          hours: "hours"
        }
      },
      superadmin: {
        tabs: {
          overview: "Overview",
          orders: "Orders",
          stores: "Stores",
          users: "Users",
          catalog: "Catalog",
          marketing: "Marketing",
          logistics: "Logistics",
          payouts: "Payouts",
          support: "Support",
          reviews: "Reviews",
          logs: "Logs",
          settings: "Settings"
        },
        panelUnderConstruction: 'The panel for "{0}" is under construction.',
        overview: {
          totalRevenue: "Total Revenue (Delivered)",
          totalOrders: "Total Orders",
          totalUsers: "Total Users",
          pendingStores: "Pending Stores",
          revenueLast7Days: "Revenue Last 7 Days",
          orderStatuses: "Order Statuses",
          recentOrders: "Recent Orders",
          newUsers: "New Users"
        },
        users: {
          title: "User Management ({0})",
          searchPlaceholder: "Search by name or email...",
          sendEmail: "Send Email ({0})",
          create: "Create User",
          table: {
            name: "Name",
            email: "Email",
            role: "Role",
            action: "Action"
          },
          form: {
            editTitle: "Edit User",
            createTitle: "Create User",
            name: "Full Name",
            role_customer: "Customer",
            role_seller: "Seller",
            role_delivery_agent: "Delivery Agent",
            role_depot_agent: "Depot Agent",
            role_depot_manager: "Depot Manager",
            role_superadmin: "Super Admin",
            assignedDepot: "Assigned Depot Point",
            deliveryZone: "Delivery Zone",
            noDepot: "-- Unassigned --",
            noZone: "-- No zone --"
          }
        },
        emailModal: {
          title: "Send Bulk Email",
          recipients: "Recipients: {0} selected user(s)",
          useTemplate: "Use a template (optional)",
          customEmail: "-- Write a custom email --",
          subject: "Subject",
          body: "Message Body",
          variableInfo: "You can use the variable `{customerName}` which will be replaced with each recipient's name.",
          send: "Send Email"
        },
        catalog: {
          title: "Catalog Management",
          addCategory: "Add a Category",
          categoryName: "Category name",
          parentCategory: "Parent category (optional)",
          mainCategory: "-- Main category --",
          add: "Add",
          imageUrl: "Image URL"
        },
        marketing: {
          tabs: {
            flashSales: "Flash Sales",
            ads: "Advertisements",
            announcements: "Announcements"
          },
          createFlashSale: "Create Flash Sale",
          addAd: "Add Advertisement",
          createAnnouncement: "Create Announcement",
          flashSaleForm: {
            title: "Create Flash Sale Event",
            name: "Event Name (e.g., Black Friday)",
            startDate: "Start Date & Time",
            endDate: "End Date & Time",
            error_name: "Event name is required.",
            error_startDate: "Start date and time are required.",
            error_endDate: "End date and time are required.",
            error_endDateAfterStart: "End date must be after the start date.",
            error_endDatePast: "End date cannot be in the past.",
            create: "Create Event"
          },
          flashSaleDetail: {
            submissions: "Product Submissions",
            approveAll: "Approve All",
            rejectAll: "Reject All",
            product: "Product",
            seller: "Seller",
            originalPrice: "Original Price",
            flashPrice: "Flash Price"
          },
          adForm: {
            imageUrl: "Image URL",
            linkUrl: "Link URL",
            activate: "Activate advertisement"
          },
          announcementForm: {
            title: "Announcement Title",
            content: "Announcement Content",
            target_all: "All users",
            target_customers: "Customers only",
            target_sellers: "Sellers only",
            activate: "Activate announcement"
          }
        },
        stores: {
          title: "Store Management",
          tabs: {
            pending: "Pending",
            active: "Active",
            suspended: "Suspended"
          },
          table: {
            store: "Store",
            seller: "Seller",
            documents: "Documents",
            location: "Location"
          },
          noStores: "No stores in this category.",
          rejectionReason: "Reason for rejection:",
          warnReason: "Reason for warning:"
        },
        orders: {
          title: "Order Management",
          tabs: {
            all: "All Orders",
            disputes: "Disputes"
          },
          searchPlaceholder: "Search by ID or customer...",
          allStatuses: "All statuses",
          noDisputes: "No ongoing disputes.",
          evidence: "Evidence:",
          rejectRequest: "Reject Request",
          approveRefund: "Approve Refund"
        },
        logistics: {
          title: "Logistics Management",
          addPickupPoint: "Add Depot Point",
          form: {
            name: "Depot point name",
            city: "City",
            neighborhood: "Neighborhood",
            street: "Street / Landmark"
          },
          staffModal: {
            title: "Staff - {0}",
            manager: "Manager",
            noManager: "No manager assigned.",
            staff: "Staff",
            noStaff: "No agents assigned to this depot."
          },
          viewStaff: "View Staff"
        },
        payouts: {
          title: "Seller Payouts",
          commissionInfo: "Current commission rate: {0}% (Standard)",
          balanceInfo: "Balance due is calculated on delivered orders, minus commission and previous payouts.",
          table: {
            store: "Store",
            totalRevenue: "Total Revenue",
            commissionDue: "Commission Due",
            paidAmount: "Already Paid",
            balanceDue: "Balance Due"
          },
          markAsPaid: "Mark as Paid",
          noPending: "No pending payouts."
        },
        support: {
          title: "Support Tickets ({0})",
          detail: {
            back: "< Back to list",
            user: "User:",
            replyPlaceholder: "Your reply...",
            reply: "Reply"
          },
          status: {
            open: "Open",
            inProgress: "In Progress",
            resolved: "Resolved"
          }
        },
        reviews: {
          title: "Review Moderation ({0})",
          noPending: "No pending reviews for moderation.",
          goodJob: "Great job!",
          product: "Product:",
          by: "By:",
          on: "on"
        },
        logs: {
          title: "Activity Logs",
          filterPlaceholder: "Filter logs...",
          performedAction: "performed action:",
          details: "Details:",
          noLogs: "No logs match your search."
        },
        settings: {
          title: "Site Settings",
          save: "Save Settings",
          sections: {
            identity: "Visual Identity",
            features: "Features",
            delivery: "Delivery",
            sellerDocs: "Required Seller Documents",
            sellerPlans: "Seller Plans",
            loyalty: "Customer Loyalty Program",
            seo: "SEO & Metadata",
            content: "Page Content Management",
            emails: "Email Templates",
            maintenance: "Maintenance Mode",
            footer: "Footer"
          },
          identity: {
            logo: "Site Logo",
            banner: "Homepage Banner",
            upload: "Choose"
          },
          features: {
            chat: "Enable customer-seller chat",
            comparison: "Enable product comparison"
          },
          delivery: {
            intraUrban: "Intra-urban base fee (FCFA)",
            interUrban: "Inter-urban base fee (FCFA)",
            perKg: "Additional cost per Kg (FCFA)",
            premiumDiscount: "Premium delivery discount (%)"
          },
          plans: {
            standard: "Standard Plan",
            premium: "Premium Plan",
            superPremium: "Super Premium Plan",
            price: "Price (FCFA)",
            duration: "Duration (days)",
            limit: "Product limit",
            commission: "Commission (%)",
            photoService: "Photo service included",
            homepageFeature: "Featured on homepage"
          },
          loyalty: {
            enable: "Enable customer loyalty program",
            premium: "Premium Customer Plan",
            ordersRequired: "Number of orders required",
            spendingRequired: "Total amount spent required (FCFA)",
            caution: "Deposit amount (FCFA)",
            benefits: "Benefits (one per line)",
            premiumPlus: "Premium+ Customer Plan",
            enablePremiumPlus: "Enable Premium+ plan",
            annualFee: "Annual fee (FCFA)"
          },
          seo: {
            defaultTitle: "Default Meta Title",
            defaultDesc: "Default Meta Description",
            ogImage: "Sharing Image URL (OpenGraph)"
          },
          content: {
            pageTitle: "Page Title: {0}",
            content: "Content"
          },
          emails: {
            subject: "Email Subject",
            body: "Email Body",
            variables: "Available variables: {0}"
          },
          maintenance: {
            enable: "Enable maintenance mode",
            message: "Maintenance message"
          },
          footer: {
            companyName: "Company Name (Copyright)",
            iconUrl: "Icon URL"
          }
        }
      },
      forbidden: {
        title: "Access Denied",
        description: "Sorry, you do not have the necessary permissions to access this page.",
        backHome: "Back to Home"
      },
      notFound: {
        title: "Page Not Found",
        description: "Sorry, the page you are looking for does not exist or has been moved.",
        backHome: "Back to Home"
      },
      forgotPassword: {
        title: "Forgot Password",
        description: "Don't worry. Enter your email and we'll send you a reset link.",
        emailLabel: "Email address",
        sendLink: "Send Link",
        checkEmailTitle: "Check your email",
        checkEmailDescription: "If an account exists for {0}, you will find a link to reset your password there.",
        close: "Close"
      }
    }
  };

  // contexts/LanguageContext.tsx
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  var LanguageContext = (0, import_react9.createContext)(void 0);
  var getNestedValue = (obj, path) => {
    return path.split(".").reduce((acc, part) => acc && acc[part], obj);
  };
  var LanguageProvider = ({ children }) => {
    const [language, setLanguage] = (0, import_react9.useState)("fr");
    const t = (0, import_react9.useCallback)((key, ...args) => {
      const translation = getNestedValue(translations[language], key) || key;
      if (args.length > 0) {
        return translation.replace(/\{(\d+)\}/g, (match, index) => {
          return typeof args[index] !== "undefined" ? String(args[index]) : match;
        });
      }
      return translation;
    }, [language]);
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(LanguageContext.Provider, { value: { language, setLanguage, t }, children });
  };
  var useLanguage = () => {
    const context = (0, import_react9.useContext)(LanguageContext);
    if (context === void 0) {
      throw new Error("useLanguage must be used within a LanguageProvider");
    }
    return context;
  };

  // components/Header.tsx
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  var Header = (props) => {
    const { categories, onNavigateHome, onNavigateCart, onNavigateToStores, onNavigateToPromotions, onNavigateToCategory, onNavigateToBecomeSeller, onNavigateToSellerDashboard, onNavigateToSellerProfile, onOpenLogin, onLogout, onNavigateToOrderHistory, onNavigateToSuperAdminDashboard, onNavigateToFlashSales, onNavigateToWishlist, onNavigateToDeliveryAgentDashboard, onNavigateToDepotAgentDashboard, onNavigateToBecomePremium, onNavigateToAccount, onNavigateToVisualSearch, onSearch, isChatEnabled, isPremiumProgramEnabled, logoUrl, notifications, onMarkNotificationAsRead, onNavigateFromNotification } = props;
    const [isMenuOpen, setIsMenuOpen] = (0, import_react10.useState)(false);
    const [isCategoryMenuOpen, setIsCategoryMenuOpen] = (0, import_react10.useState)(false);
    const [isUserMenuOpen, setIsUserMenuOpen] = (0, import_react10.useState)(false);
    const [isNotificationsOpen, setIsNotificationsOpen] = (0, import_react10.useState)(false);
    const [searchQuery, setSearchQuery] = (0, import_react10.useState)("");
    const [mobileSearchQuery, setMobileSearchQuery] = (0, import_react10.useState)("");
    const [isSearchFocused, setIsSearchFocused] = (0, import_react10.useState)(false);
    const { language, setLanguage, t } = useLanguage();
    const { cart } = useCart();
    const { wishlist } = useWishlist();
    const { user } = useAuth();
    const { theme, toggleTheme } = useTheme();
    const { setIsWidgetOpen, totalUnreadCount } = useChatContext();
    const cartItemCount = cart.reduce((count, item) => count + item.quantity, 0);
    const wishlistItemCount = wishlist.length;
    const unreadNotificationsCount = notifications.filter((n) => !n.isRead).length;
    const categoryMenuRef = (0, import_react10.useRef)(null);
    const userMenuRef = (0, import_react10.useRef)(null);
    const notificationsMenuRef = (0, import_react10.useRef)(null);
    const categoryTree = (0, import_react10.useMemo)(() => {
      const mainCategories = categories.filter((c) => !c.parentId);
      return mainCategories.map((mainCat) => ({
        ...mainCat,
        subCategories: categories.filter((c) => c.parentId === mainCat.id)
      }));
    }, [categories]);
    (0, import_react10.useEffect)(() => {
      const handleClickOutside = (event) => {
        if (categoryMenuRef.current && !categoryMenuRef.current.contains(event.target)) {
          setIsCategoryMenuOpen(false);
        }
        if (userMenuRef.current && !userMenuRef.current.contains(event.target)) {
          setIsUserMenuOpen(false);
        }
        if (notificationsMenuRef.current && !notificationsMenuRef.current.contains(event.target)) {
          setIsNotificationsOpen(false);
        }
      };
      if (isCategoryMenuOpen || isUserMenuOpen || isNotificationsOpen) {
        document.addEventListener("mousedown", handleClickOutside);
      } else {
        document.removeEventListener("mousedown", handleClickOutside);
      }
      return () => {
        document.removeEventListener("mousedown", handleClickOutside);
      };
    }, [isCategoryMenuOpen, isUserMenuOpen, isNotificationsOpen]);
    const handleSearchSubmit = (e, query) => {
      e.preventDefault();
      if (query.trim()) {
        onSearch(query);
        setSearchQuery("");
        setMobileSearchQuery("");
        setIsMenuOpen(false);
      }
    };
    const userMenuItems = [
      ...user?.role === "superadmin" ? [{ label: t("header.superadminDashboard"), action: onNavigateToSuperAdminDashboard, icon: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(AcademicCapIcon, { className: "h-5 w-5" }) }] : [],
      ...user?.role === "seller" ? [
        { label: t("header.sellerDashboard"), action: onNavigateToSellerDashboard, icon: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(BuildingStorefrontIcon, { className: "h-5 w-5" }) },
        { label: t("header.sellerProfile"), action: onNavigateToSellerProfile, icon: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Cog8ToothIcon, { className: "h-5 w-5" }) }
      ] : [],
      ...user?.role === "customer" ? [
        { label: t("header.myAccount"), action: () => onNavigateToAccount("profile"), icon: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(UserCircleIcon, { className: "h-5 w-5" }) },
        { label: t("header.followedStores"), action: () => onNavigateToAccount("followed-stores"), icon: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(BuildingStorefrontIcon, { className: "h-5 w-5" }) }
      ] : [],
      ...user?.role === "delivery_agent" ? [{ label: t("header.deliveryDashboard"), action: onNavigateToDeliveryAgentDashboard, icon: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(TruckIcon, { className: "h-5 w-5" }) }] : [],
      ...user?.role === "depot_agent" || user?.role === "depot_manager" ? [{ label: t("header.depotDashboard"), action: onNavigateToDepotAgentDashboard, icon: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(BuildingStorefrontIcon, { className: "h-5 w-5" }) }] : [],
      ...user && (user.role === "customer" || user.role === "seller") ? [
        { label: t("header.myOrders"), action: onNavigateToOrderHistory, icon: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ClipboardDocumentListIcon, { className: "h-5 w-5" }) },
        { label: t("header.support"), action: () => onNavigateToAccount("support"), icon: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ChatBubbleBottomCenterTextIcon, { className: "h-5 w-5" }) }
      ] : []
    ];
    const ActionButton = ({ onClick, icon, label, count }) => /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("button", { onClick, className: "relative flex flex-col items-center text-center text-gray-600 dark:text-gray-300 hover:text-kmer-green px-2 py-1", children: [
      icon,
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("span", { className: "text-xs font-medium mt-1", children: label }),
      count !== void 0 && count > 0 && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("span", { className: "absolute -top-1 right-0 block h-5 w-5 rounded-full bg-kmer-red text-white text-xs flex items-center justify-center ring-2 ring-white dark:ring-gray-800", children: count })
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("header", { className: "bg-white dark:bg-gray-800 shadow-md sticky top-0 z-40", children: [
      /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "flex items-center", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: onNavigateHome, "aria-label": t("header.backToHome"), children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(LogoIcon, { className: "h-10", logoUrl }) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "hidden lg:flex flex-1 mx-8 justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(
            "form",
            {
              onSubmit: (e) => handleSearchSubmit(e, searchQuery),
              className: `relative w-full ${isSearchFocused ? "max-w-2xl" : "max-w-md"} transition-all duration-300 ease-in-out`,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { type: "button", onClick: onNavigateToVisualSearch, className: "absolute inset-y-0 left-0 flex items-center pl-3 text-gray-500 dark:text-gray-400 hover:text-kmer-green", title: t("header.visualSearch"), children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(PhotoIcon, { className: "h-5 w-5" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
                  "input",
                  {
                    type: "text",
                    placeholder: t("header.searchPlaceholder"),
                    value: searchQuery,
                    onChange: (e) => setSearchQuery(e.target.value),
                    onFocus: () => setIsSearchFocused(true),
                    onBlur: () => setIsSearchFocused(false),
                    className: "w-full pl-12 pr-10 py-2 rounded-full border border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-kmer-green focus:border-transparent transition-all duration-300"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { type: "submit", className: "absolute inset-y-0 right-0 flex items-center pr-3 text-gray-500 dark:text-gray-400 hover:text-kmer-green", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(SearchIcon, { className: "h-5 w-5" }) })
              ]
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "hidden lg:flex items-center space-x-2", children: [
            (!user || user.role === "customer") && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: onNavigateToBecomeSeller, className: "text-sm font-semibold text-kmer-green border-2 border-kmer-green rounded-full px-4 py-1.5 hover:bg-kmer-green/10 transition-colors", children: t("header.becomeSeller") }),
            user ? /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(import_jsx_runtime10.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "relative", ref: userMenuRef, children: [
                /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("button", { onClick: () => setIsUserMenuOpen(!isUserMenuOpen), className: "flex flex-col items-center text-center text-gray-600 dark:text-gray-300 hover:text-kmer-green px-2 py-1", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "relative", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(UserCircleIcon, { className: "h-6 w-6" }),
                    user.loyalty?.status === "premium" && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(StarIcon, { filled: true, className: "absolute -bottom-1 -right-1 w-4 h-4 text-kmer-yellow bg-white dark:bg-gray-800 rounded-full p-0.5" }),
                    user.loyalty?.status === "premium_plus" && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(StarPlatinumIcon, { className: "absolute -bottom-1 -right-1 w-4 h-4 bg-white dark:bg-gray-800 rounded-full p-0.5 text-kmer-red" })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("span", { className: "text-xs font-medium mt-1 truncate max-w-[80px]", children: user.name })
                ] }),
                isUserMenuOpen && /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "absolute right-0 mt-2 w-56 bg-white dark:bg-gray-800 rounded-md shadow-lg py-1 ring-1 ring-black ring-opacity-5", children: [
                  userMenuItems.map((item) => /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("button", { onClick: () => {
                    item.action();
                    setIsUserMenuOpen(false);
                  }, className: "w-full text-left flex items-center gap-3 px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700", children: [
                    item.icon,
                    " ",
                    item.label
                  ] }, item.label)),
                  /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "border-t border-gray-200 dark:border-gray-700 my-1" }),
                  /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("button", { onClick: () => {
                    onLogout();
                    setIsUserMenuOpen(false);
                  }, className: "w-full text-left flex items-center gap-3 px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ArrowRightOnRectangleIcon, { className: "h-5 w-5" }),
                    " ",
                    t("header.logout")
                  ] })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "relative", ref: notificationsMenuRef, children: [
                /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ActionButton, { onClick: () => setIsNotificationsOpen((o) => !o), icon: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(BellIcon, { className: "h-6 w-6" }), label: t("header.notifications"), count: unreadNotificationsCount }),
                isNotificationsOpen && /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "absolute right-0 mt-2 w-80 bg-white dark:bg-gray-800 rounded-md shadow-lg ring-1 ring-black ring-opacity-5 max-h-96 overflow-y-auto", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "p-3 border-b dark:border-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("h3", { className: "font-semibold text-gray-800 dark:text-white", children: t("header.notifications") }) }),
                  notifications.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("p", { className: "p-4 text-sm text-gray-500", children: t("header.noNotifications") }) : notifications.map((notif) => /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(
                    "button",
                    {
                      onClick: () => {
                        onMarkNotificationAsRead(notif.id);
                        if (notif.link) onNavigateFromNotification(notif.link);
                        setIsNotificationsOpen(false);
                      },
                      className: `w-full text-left p-3 border-b dark:border-gray-700/50 last:border-b-0 hover:bg-gray-50 dark:hover:bg-gray-700/50 ${!notif.isRead ? "bg-blue-50 dark:bg-blue-900/20" : ""}`,
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("p", { className: "text-sm text-gray-700 dark:text-gray-200", children: notif.message }),
                        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("p", { className: "text-xs text-gray-400 mt-1", children: new Date(notif.timestamp).toLocaleString("fr-FR") })
                      ]
                    },
                    notif.id
                  ))
                ] })
              ] })
            ] }) : /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ActionButton, { onClick: onOpenLogin, icon: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(UserCircleIcon, { className: "h-6 w-6" }), label: t("header.login") }),
            user?.role === "customer" && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ActionButton, { onClick: onNavigateToOrderHistory, icon: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ClipboardDocumentListIcon, { className: "h-6 w-6" }), label: t("header.myOrders") }),
            user && (user.role === "customer" || user.role === "seller") && /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(import_jsx_runtime10.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ActionButton, { onClick: onNavigateToWishlist, icon: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(HeartIcon, { className: "h-6 w-6" }), label: t("header.wishlist"), count: wishlistItemCount }),
              isChatEnabled && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ActionButton, { onClick: () => setIsWidgetOpen(true), icon: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ChatBubbleBottomCenterTextIcon, { className: "h-6 w-6" }), label: t("header.messages"), count: totalUnreadCount })
            ] }),
            user && user.role === "customer" && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ActionButton, { onClick: onNavigateCart, icon: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ShoppingCartIcon, { className: "h-6 w-6" }), label: t("header.cart"), count: cartItemCount }),
            user?.role === "superadmin" && isChatEnabled && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ActionButton, { onClick: () => setIsWidgetOpen(true), icon: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ChatBubbleBottomCenterTextIcon, { className: "h-6 w-6" }), label: t("header.messages"), count: totalUnreadCount }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: toggleTheme, className: "p-2 rounded-full text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700", children: theme === "dark" ? /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(SunIcon, { className: "h-6 w-6" }) : /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(MoonIcon, { className: "h-6 w-6" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => setLanguage(language === "fr" ? "en" : "fr"), className: "p-2 rounded-full text-sm font-bold text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700", children: language.toUpperCase() })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "lg:hidden flex items-center", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => setIsMenuOpen(!isMenuOpen), className: "p-2 rounded-md text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-white", children: isMenuOpen ? /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(XIcon, { className: "h-6 w-6" }) : /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(MenuIcon, { className: "h-6 w-6" }) }) })
        ] }),
        (!user || user.role !== "superadmin" && user.role !== "delivery_agent" && user.role !== "depot_agent") && /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("nav", { className: "hidden lg:flex items-center justify-center space-x-6 border-t border-gray-200 dark:border-gray-700 mt-3 pt-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "relative", ref: categoryMenuRef, children: [
            /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(
              "button",
              {
                onClick: () => setIsCategoryMenuOpen((o) => !o),
                className: "flex items-center text-gray-700 dark:text-gray-200 hover:text-kmer-green font-semibold",
                children: [
                  t("header.categories"),
                  /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ChevronDownIcon, { className: `w-4 h-4 ml-1 transition-transform ${isCategoryMenuOpen ? "rotate-180" : ""}` })
                ]
              }
            ),
            isCategoryMenuOpen && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "absolute left-0 mt-2 w-[840px] max-w-[calc(100vw-2rem)] bg-white dark:bg-gray-800 rounded-md shadow-xl z-50 p-6", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "flex flex-row flex-wrap gap-x-6 gap-y-4", children: categoryTree.map((mainCat) => /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "w-44", children: [
              /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
                "button",
                {
                  onClick: () => {
                    onNavigateToCategory(mainCat.id);
                    setIsCategoryMenuOpen(false);
                  },
                  className: "font-bold text-md text-gray-800 dark:text-gray-100 hover:text-kmer-green mb-2 w-full text-left",
                  children: mainCat.name
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "space-y-1", children: mainCat.subCategories.map((subCat) => /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
                "button",
                {
                  onClick: () => {
                    onNavigateToCategory(subCat.id);
                    setIsCategoryMenuOpen(false);
                  },
                  className: "w-full text-left block text-sm text-gray-600 dark:text-gray-300 hover:text-kmer-green",
                  children: subCat.name
                },
                subCat.id
              )) })
            ] }, mainCat.id)) }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("button", { onClick: onNavigateToPromotions, className: "text-gray-700 dark:text-gray-200 hover:text-kmer-green font-semibold flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(TagIcon, { className: "w-5 h-5 text-kmer-red" }),
            t("header.promotions")
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("button", { onClick: onNavigateToFlashSales, className: "text-gray-700 dark:text-gray-200 hover:text-kmer-green font-semibold flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(BoltIcon, { className: "w-5 h-5 text-blue-500" }),
            t("header.flashSales")
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: onNavigateToStores, className: "text-gray-700 dark:text-gray-200 hover:text-kmer-green font-semibold", children: t("header.stores") }),
          isPremiumProgramEnabled && /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("button", { onClick: user ? onNavigateToBecomePremium : onOpenLogin, className: "text-kmer-yellow hover:text-yellow-400 font-bold flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(StarIcon, { className: "w-5 h-5" }),
            t("header.becomePremium")
          ] })
        ] })
      ] }),
      isMenuOpen && /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "lg:hidden absolute top-full left-0 w-full bg-white dark:bg-gray-800 shadow-lg border-t border-gray-200 dark:border-gray-700 max-h-[calc(100vh-68px)] flex flex-col", children: [
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "p-4 border-b border-gray-200 dark:border-gray-700 flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("form", { onSubmit: (e) => handleSearchSubmit(e, mobileSearchQuery), children: /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
            "input",
            {
              type: "text",
              placeholder: t("header.searchPlaceholder"),
              value: mobileSearchQuery,
              onChange: (e) => setMobileSearchQuery(e.target.value),
              className: "w-full pl-4 pr-10 py-2 rounded-full border border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-kmer-green"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { type: "submit", className: "absolute inset-y-0 right-0 flex items-center pr-3 text-gray-500 dark:text-gray-400", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(SearchIcon, { className: "h-5 w-5" }) })
        ] }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "flex-grow overflow-y-auto p-4", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("nav", { className: "flex flex-col space-y-4", children: [
          user?.role !== "delivery_agent" && user?.role !== "depot_agent" && /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(import_jsx_runtime10.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => {
              onNavigateToPromotions();
              setIsMenuOpen(false);
            }, className: "text-left font-semibold py-2", children: t("header.promotions") }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => {
              onNavigateToFlashSales();
              setIsMenuOpen(false);
            }, className: "text-left font-semibold py-2", children: t("header.flashSales") }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => {
              onNavigateToStores();
              setIsMenuOpen(false);
            }, className: "text-left font-semibold py-2", children: t("header.stores") }),
            (!user || user.role === "customer") && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => {
              onNavigateToBecomeSeller();
              setIsMenuOpen(false);
            }, className: "text-left text-kmer-green font-bold py-2", children: t("header.becomeSeller") }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "border-t border-gray-200 dark:border-gray-700 pt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("h3", { className: "font-bold text-gray-500 dark:text-gray-400 text-sm py-2", children: t("header.categories") }),
              /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "flex flex-col items-start", children: categoryTree.map((mainCat) => /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "w-full", children: [
                /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => {
                  onNavigateToCategory(mainCat.id);
                  setIsMenuOpen(false);
                }, className: "text-left block py-1.5 font-semibold", children: mainCat.name }),
                /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "pl-4", children: mainCat.subCategories.map((subCat) => /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => {
                  onNavigateToCategory(subCat.id);
                  setIsMenuOpen(false);
                }, className: "text-left block py-1", children: subCat.name }, subCat.id)) })
              ] }, mainCat.id)) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "border-t border-gray-200 dark:border-gray-700 pt-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("h3", { className: "font-bold text-gray-500 dark:text-gray-400 text-sm py-2", children: t("header.myAccount") }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "flex flex-col items-start", children: [
              user ? userMenuItems.map((item) => /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("button", { onClick: () => {
                item.action();
                setIsMenuOpen(false);
              }, className: "text-left flex items-center gap-3 py-1.5", children: [
                item.icon,
                " ",
                item.label
              ] }, item.label)) : /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => {
                onOpenLogin();
                setIsMenuOpen(false);
              }, className: "text-left font-semibold py-2", children: t("header.login") }),
              isPremiumProgramEnabled && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => {
                (user ? onNavigateToBecomePremium : onOpenLogin)();
                setIsMenuOpen(false);
              }, className: "text-left font-bold text-kmer-yellow py-2", children: t("header.becomePremium") })
            ] })
          ] })
        ] }) }),
        user && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "p-4 border-t border-gray-200 dark:border-gray-700 flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("button", { onClick: () => {
          onLogout();
          setIsMenuOpen(false);
        }, className: "w-full bg-gray-100 dark:bg-gray-700 font-bold py-2 rounded-lg flex items-center justify-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ArrowRightOnRectangleIcon, { className: "h-5 w-5" }),
          " ",
          t("header.logout")
        ] }) })
      ] })
    ] });
  };

  // components/Footer.tsx
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  var Footer = ({ onNavigate, logoUrl, paymentMethods, socialLinks, companyName }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("footer", { className: "bg-gray-800 text-white dark:bg-gray-950", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "container mx-auto px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "flex flex-col items-start", children: [
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(LogoIcon, { className: "h-10 mb-4", logoUrl }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "text-gray-400", children: t("footer.aboutKmerZone") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("h3", { className: "text-lg font-bold mb-4 text-white", children: t("footer.quickLinks") }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("ul", { className: "space-y-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("button", { onClick: () => onNavigate("about"), className: "text-gray-400 hover:text-white", children: t("footer.aboutUs") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("button", { onClick: () => onNavigate("contact"), className: "text-gray-400 hover:text-white", children: t("footer.contact") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("button", { onClick: () => onNavigate("faq"), className: "text-gray-400 hover:text-white", children: t("footer.faq") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("button", { onClick: () => onNavigate("careers"), className: "text-gray-400 hover:text-white", children: t("footer.careers") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("button", { onClick: () => onNavigate("terms-of-service"), className: "text-gray-400 hover:text-white", children: t("footer.terms") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("button", { onClick: () => onNavigate("privacy-policy"), className: "text-gray-400 hover:text-white", children: t("footer.privacy") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("button", { onClick: () => onNavigate("sitemap"), className: "text-gray-400 hover:text-white", children: "Plan du site" }) })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("h3", { className: "text-lg font-bold mb-4 text-white", children: t("footer.forSellers") }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("ul", { className: "space-y-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("button", { onClick: () => onNavigate("sell"), className: "text-gray-400 hover:text-white", children: t("footer.sellOnKmerZone") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("button", { onClick: () => onNavigate("training-center"), className: "text-gray-400 hover:text-white", children: t("footer.trainingCenter") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("button", { onClick: () => onNavigate("logistics"), className: "text-gray-400 hover:text-white", children: t("footer.logistics") }) })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("h3", { className: "text-lg font-bold mb-4 text-white", children: t("footer.followUs") }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "flex space-x-4 mb-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("a", { href: socialLinks.facebook.linkUrl, target: "_blank", rel: "noopener noreferrer", className: "text-gray-400 hover:text-white", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("img", { src: socialLinks.facebook.iconUrl, alt: "Facebook", className: "h-6 w-6" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("a", { href: socialLinks.twitter.linkUrl, target: "_blank", rel: "noopener noreferrer", className: "text-gray-400 hover:text-white", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("img", { src: socialLinks.twitter.iconUrl, alt: "Twitter", className: "h-6 w-6" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("a", { href: socialLinks.instagram.linkUrl, target: "_blank", rel: "noopener noreferrer", className: "text-gray-400 hover:text-white", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("img", { src: socialLinks.instagram.iconUrl, alt: "Instagram", className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("h3", { className: "text-lg font-bold mb-4 text-white", children: t("footer.paymentMethods") }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "flex items-center space-x-2 flex-wrap gap-y-2", children: paymentMethods.map((method) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("img", { src: method.imageUrl, alt: method.name, title: method.name, className: "h-8 bg-white rounded-md p-1" }, method.id)) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "mt-12 border-t border-gray-700 dark:border-gray-800 pt-6 text-center text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { children: t("footer.copyright", (/* @__PURE__ */ new Date()).getFullYear(), companyName) }) })
    ] }) });
  };
  var Footer_default = Footer;

  // components/MaintenancePage.tsx
  var import_react11 = __toESM(require_react());
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  var MaintenancePage = ({ message, reopenDate }) => {
    const calculateTimeLeft = () => {
      const difference = +new Date(reopenDate) - +/* @__PURE__ */ new Date();
      let timeLeft2 = {};
      if (difference > 0) {
        timeLeft2 = {
          jours: Math.floor(difference / (1e3 * 60 * 60 * 24)),
          heures: Math.floor(difference / (1e3 * 60 * 60) % 24),
          minutes: Math.floor(difference / 1e3 / 60 % 60),
          secondes: Math.floor(difference / 1e3 % 60)
        };
      }
      return timeLeft2;
    };
    const [timeLeft, setTimeLeft] = (0, import_react11.useState)(calculateTimeLeft());
    (0, import_react11.useEffect)(() => {
      const timer = setTimeout(() => {
        setTimeLeft(calculateTimeLeft());
      }, 1e3);
      return () => clearTimeout(timer);
    });
    const hasTimeLeft = Object.keys(timeLeft).length > 0;
    const handleExitMaintenance = () => {
      try {
        const settingsJSON = localStorage.getItem("siteSettings");
        if (settingsJSON) {
          const settings = JSON.parse(settingsJSON);
          if (settings.maintenanceMode) {
            settings.maintenanceMode.isEnabled = false;
            localStorage.setItem("siteSettings", JSON.stringify(settings));
          }
        }
        window.location.reload();
      } catch (e) {
        console.error("Could not exit maintenance mode:", e);
        alert("Impossible de quitter le mode maintenance automatiquement. Veuillez essayer de vider le cache de votre navigateur.");
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "bg-gray-100 dark:bg-gray-900 min-h-screen flex items-center justify-center p-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "text-center bg-white dark:bg-gray-800 p-12 rounded-lg shadow-xl max-w-2xl w-full", children: [
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Cog8ToothIcon, { className: "h-16 w-16 text-kmer-green mx-auto mb-6 animate-spin-slow" }),
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white mb-4", children: "Site en Maintenance" }),
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-8 text-lg", children: message }),
        hasTimeLeft && /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("p", { className: "text-gray-500 dark:text-gray-300 mb-4", children: "Nous serons de retour dans :" }),
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "flex justify-center items-center gap-4 text-center", children: Object.entries(timeLeft).map(([unit, value]) => /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "bg-gray-100 dark:bg-gray-700/50 shadow-inner rounded-lg p-3 min-w-[70px]", children: [
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "text-3xl font-bold text-kmer-green", children: String(value).padStart(2, "0") }),
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "text-xs uppercase text-gray-500 dark:text-gray-400", children: unit })
          ] }, unit)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("button", { onClick: handleExitMaintenance, className: "mt-8 text-sm text-gray-500 dark:text-gray-400 hover:underline", children: "Cliquer ici pour tenter de forcer la sortie du mode maintenance." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("style", { children: `
        @keyframes spin-slow {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
        .animate-spin-slow {
          animation: spin-slow 5s linear infinite;
        }
      ` })
    ] });
  };
  var MaintenancePage_default = MaintenancePage;

  // components/ForgotPasswordModal.tsx
  var import_react12 = __toESM(require_react());
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  var ForgotPasswordModal = ({ onClose, onEmailSubmit }) => {
    const { t } = useLanguage();
    const [email, setEmail] = (0, import_react12.useState)("");
    const [submitted, setSubmitted] = (0, import_react12.useState)(false);
    const handleSubmit = (e) => {
      e.preventDefault();
      onEmailSubmit(email);
      setSubmitted(true);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-2xl p-8 max-w-sm w-full relative", children: [
      /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("button", { onClick: onClose, className: "absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300", children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(XIcon, { className: "h-6 w-6" }) }),
      submitted ? /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("h2", { className: "text-2xl font-bold mb-4 dark:text-white", children: t("forgotPassword.checkEmailTitle") }),
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: t("forgotPassword.checkEmailDescription", email) }),
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
          "button",
          {
            onClick: onClose,
            className: "mt-6 bg-kmer-green hover:bg-green-700 text-white font-bold py-2 px-4 rounded-full focus:outline-none focus:shadow-outline w-full",
            children: t("forgotPassword.close")
          }
        )
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(import_jsx_runtime13.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("h2", { className: "text-2xl font-bold text-center mb-4 dark:text-white", children: t("forgotPassword.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("p", { className: "text-center text-gray-600 dark:text-gray-400 mb-6", children: t("forgotPassword.description") }),
        /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("form", { onSubmit: handleSubmit, children: [
          /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "forgot-email", children: t("forgotPassword.emailLabel") }),
            /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
              "input",
              {
                className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-kmer-green",
                id: "forgot-email",
                type: "email",
                placeholder: "votre.email@example.com",
                value: email,
                onChange: (e) => setEmail(e.target.value),
                required: true
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "flex flex-col items-center justify-between", children: [
            /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
              "button",
              {
                className: "bg-kmer-green hover:bg-green-700 text-white font-bold py-2 px-4 rounded-full focus:outline-none focus:shadow-outline w-full",
                type: "submit",
                children: t("forgotPassword.sendLink")
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
              "button",
              {
                type: "button",
                onClick: onClose,
                className: "mt-4 text-gray-500 dark:text-gray-400 text-sm hover:underline",
                children: t("common.cancel")
              }
            )
          ] })
        ] })
      ] })
    ] }) });
  };
  var ForgotPasswordModal_default = ForgotPasswordModal;

  // components/LoginModal.tsx
  var import_react13 = __toESM(require_react());
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  var LoginModal = ({ onClose, onLoginSuccess, onForgotPassword }) => {
    const [view, setView] = (0, import_react13.useState)("login");
    const [email, setEmail] = (0, import_react13.useState)("");
    const [password, setPassword] = (0, import_react13.useState)("");
    const [name, setName] = (0, import_react13.useState)("");
    const [accountType, setAccountType] = (0, import_react13.useState)("customer");
    const [error, setError] = (0, import_react13.useState)(null);
    const { login, register } = useAuth();
    (0, import_react13.useEffect)(() => {
      setError(null);
    }, [email, password, name, view]);
    const handleLogin = (e) => {
      e.preventDefault();
      if (!email || !password) {
        setError("Veuillez entrer une adresse e-mail et un mot de passe.");
        return;
      }
      const loggedInUser = login(email, password);
      if (loggedInUser) {
        onLoginSuccess(loggedInUser);
      } else {
        setError("Email ou mot de passe incorrect.");
      }
    };
    const handleRegister = (e) => {
      e.preventDefault();
      if (!name || !email || !password) {
        setError("Veuillez remplir tous les champs.");
        return;
      }
      const registeredUser = register(name, email, password, accountType);
      if (registeredUser) {
        onLoginSuccess(registeredUser);
      } else {
        setError("Un compte avec cet email existe d\xE9j\xE0.");
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-2xl p-8 max-w-sm w-full relative", children: [
      /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("button", { onClick: onClose, className: "absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(XIcon, { className: "h-6 w-6" }) }),
      view === "login" ? /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(import_jsx_runtime14.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("h2", { className: "text-2xl font-bold text-center mb-6 dark:text-white", children: "Connexion" }),
        /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("form", { onSubmit: handleLogin, children: [
          /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "login-email", children: "Adresse e-mail" }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
              "input",
              {
                className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-kmer-green",
                id: "login-email",
                type: "email",
                placeholder: "votre.email@example.com",
                value: email,
                onChange: (e) => setEmail(e.target.value),
                required: true
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "flex justify-between items-baseline", children: [
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "login-password", children: "Mot de passe" }),
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("button", { type: "button", onClick: onForgotPassword, className: "inline-block align-baseline font-bold text-sm text-kmer-green hover:text-green-700", children: "Mot de passe oubli\xE9 ?" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
              "input",
              {
                className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-kmer-green",
                id: "login-password",
                type: "password",
                placeholder: "******************",
                value: password,
                onChange: (e) => setPassword(e.target.value),
                required: true
              }
            )
          ] }),
          error && /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("p", { className: "text-red-500 text-sm text-center mb-4", children: error }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "flex flex-col items-center justify-between", children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
              "button",
              {
                className: "bg-kmer-green hover:bg-green-700 text-white font-bold py-2 px-4 rounded-full focus:outline-none focus:shadow-outline w-full",
                type: "submit",
                children: "Se connecter"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("p", { className: "text-center text-gray-500 dark:text-gray-400 text-sm mt-6", children: [
              "Nouveau sur KMER ZONE? ",
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("button", { type: "button", onClick: () => setView("register"), className: "font-bold text-kmer-green hover:underline", children: "Cr\xE9er un compte" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "text-center text-gray-500 dark:text-gray-400 text-xs mt-4 space-y-1 bg-gray-100 dark:bg-gray-700 p-3 rounded-md w-full", children: [
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("p", { className: "font-bold", children: 'Comptes de test (mot de passe : "password")' }),
              /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("p", { className: "text-left", children: [
                /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("strong", { className: "text-blue-500", children: "Client:" }),
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded", children: "customer@example.com" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("p", { className: "text-left", children: [
                /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("strong", { className: "text-purple-500", children: "Admin:" }),
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded", children: "superadmin@example.com" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("p", { className: "text-left", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("strong", { className: "text-green-500", children: "Vendeurs:" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("ul", { className: "list-none text-left pl-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded", children: "seller@example.com" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded", children: "mamaafrica@example.com" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded", children: "electro@example.com" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded", children: "soaps@example.com" }) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("p", { className: "text-left", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("strong", { className: "text-cyan-500", children: "Livreurs:" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("ul", { className: "list-none text-left pl-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded", children: "agent1@example.com" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded", children: "agent2@example.com" }) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("p", { className: "text-left", children: [
                /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("strong", { className: "text-indigo-500", children: "Agent D\xE9p\xF4t:" }),
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded", children: "depot@example.com" })
              ] })
            ] })
          ] })
        ] })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(import_jsx_runtime14.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("h2", { className: "text-2xl font-bold text-center mb-6 dark:text-white", children: "Cr\xE9er un compte" }),
        /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("form", { onSubmit: handleRegister, children: [
          /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", children: "Je suis un" }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "flex rounded-md shadow-sm", children: [
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("button", { type: "button", onClick: () => setAccountType("customer"), className: `px-4 py-2 block w-full text-sm font-medium rounded-l-md ${accountType === "customer" ? "bg-kmer-green text-white z-10 ring-2 ring-kmer-green" : "bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 ring-1 ring-inset ring-gray-300 dark:ring-gray-600 hover:bg-gray-50"}`, children: "Client" }),
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("button", { type: "button", onClick: () => setAccountType("seller"), className: `px-4 py-2 block w-full text-sm font-medium rounded-r-md -ml-px ${accountType === "seller" ? "bg-kmer-green text-white z-10 ring-2 ring-kmer-green" : "bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 ring-1 ring-inset ring-gray-300 dark:ring-gray-600 hover:bg-gray-50"}`, children: "Vendeur" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "register-name", children: "Nom complet" }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
              "input",
              {
                className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-kmer-green",
                id: "register-name",
                type: "text",
                placeholder: "Jean Dupont",
                value: name,
                onChange: (e) => setName(e.target.value),
                required: true
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "register-email", children: "Adresse e-mail" }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
              "input",
              {
                className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-kmer-green",
                id: "register-email",
                type: "email",
                placeholder: "votre.email@example.com",
                value: email,
                onChange: (e) => setEmail(e.target.value),
                required: true
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "register-password", children: "Mot de passe" }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
              "input",
              {
                className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-kmer-green",
                id: "register-password",
                type: "password",
                placeholder: "******************",
                value: password,
                onChange: (e) => setPassword(e.target.value),
                required: true
              }
            )
          ] }),
          error && /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("p", { className: "text-red-500 text-sm text-center mb-4", children: error }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "flex flex-col items-center justify-between", children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
              "button",
              {
                className: "bg-kmer-green hover:bg-green-700 text-white font-bold py-2 px-4 rounded-full focus:outline-none focus:shadow-outline w-full",
                type: "submit",
                children: "S'inscrire"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("p", { className: "text-center text-gray-500 dark:text-gray-400 text-sm mt-6", children: [
              "D\xE9j\xE0 un compte? ",
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("button", { type: "button", onClick: () => setView("login"), className: "font-bold text-kmer-green hover:underline", children: "Se connecter" })
            ] })
          ] })
        ] })
      ] })
    ] }) });
  };
  var LoginModal_default = LoginModal;

  // components/PromotionModal.tsx
  var import_react14 = __toESM(require_react());
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  var PromotionModal = ({ product, onClose, onSave }) => {
    const [promoPrice, setPromoPrice] = (0, import_react14.useState)(product.promotionPrice?.toString() || "");
    const [startDate, setStartDate] = (0, import_react14.useState)(product.promotionStartDate || "");
    const [endDate, setEndDate] = (0, import_react14.useState)(product.promotionEndDate || "");
    const [error, setError] = (0, import_react14.useState)("");
    const handleSave = () => {
      const priceValue = parseFloat(promoPrice);
      if (isNaN(priceValue) || priceValue <= 0) {
        setError("Veuillez saisir un prix valide.");
        return;
      }
      if (priceValue >= product.price) {
        setError("Le prix promotionnel doit \xEAtre inf\xE9rieur au prix original.");
        return;
      }
      if (startDate && endDate && new Date(startDate) > new Date(endDate)) {
        setError("La date de d\xE9but doit \xEAtre ant\xE9rieure \xE0 la date de fin.");
        return;
      }
      setError("");
      onSave(product.id, priceValue, startDate, endDate);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-2xl p-6 max-w-md w-full relative", children: [
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("button", { onClick: onClose, className: "absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(XIcon, { className: "h-6 w-6" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "flex items-center gap-3 text-xl font-semibold text-gray-800 dark:text-white mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(TagIcon, { className: "w-6 h-6 text-kmer-green" }),
        "Mettre en Promotion"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "border-t border-b dark:border-gray-700 py-4 my-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("p", { className: "font-semibold text-lg", children: product.name }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("p", { className: "text-gray-500 dark:text-gray-400", children: [
          "Prix original : ",
          /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("span", { className: "font-bold", children: [
            product.price.toLocaleString("fr-CM"),
            " FCFA"
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("label", { htmlFor: "promoPrice", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Nouveau prix promotionnel (FCFA)" }),
          /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
            "input",
            {
              type: "number",
              id: "promoPrice",
              value: promoPrice,
              onChange: (e) => setPromoPrice(e.target.value),
              className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-kmer-green focus:border-kmer-green dark:bg-gray-700 dark:border-gray-600",
              placeholder: "Ex: 12000",
              required: true
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("label", { htmlFor: "startDate", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Date de d\xE9but (optionnel)" }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
              "input",
              {
                type: "date",
                id: "startDate",
                value: startDate,
                onChange: (e) => setStartDate(e.target.value),
                className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-kmer-green focus:border-kmer-green dark:bg-gray-700 dark:border-gray-600"
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("label", { htmlFor: "endDate", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Date de fin (optionnel)" }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
              "input",
              {
                type: "date",
                id: "endDate",
                value: endDate,
                onChange: (e) => setEndDate(e.target.value),
                className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-kmer-green focus:border-kmer-green dark:bg-gray-700 dark:border-gray-600"
              }
            )
          ] })
        ] }),
        error && /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("p", { className: "text-red-500 text-sm mt-1", children: error })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "mt-6 flex justify-end gap-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("button", { onClick: onClose, className: "bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-800 dark:text-white font-bold py-2 px-4 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors", children: "Annuler" }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("button", { onClick: handleSave, className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg hover:bg-green-700 transition-colors", children: "Enregistrer la promotion" })
      ] })
    ] }) });
  };
  var PromotionModal_default = PromotionModal;

  // components/ChatWidget.tsx
  var import_react15 = __toESM(require_react());
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  var PLACEHOLDER_IMAGE_URL = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none'%3E%3Crect width='24' height='24' fill='%23E5E7EB'/%3E%3Cpath d='M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z' stroke='%239CA3AF' stroke-width='1.5'/%3E%3C/svg%3E";
  var ConversationList = ({ chats, messages, activeChatId, onSelectChat, currentUser }) => {
    const getOtherParticipant = (chat) => {
      const otherId = chat.participantIds.find((id) => id !== currentUser.id);
      return { id: otherId, name: chat.participantNames[otherId] };
    };
    const getLastMessage = (chatId) => {
      const chatMessages = messages[chatId] || [];
      return chatMessages[chatMessages.length - 1];
    };
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "w-full h-full overflow-y-auto border-r border-gray-200 dark:border-gray-700", children: [
      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "p-4 border-b border-gray-200 dark:border-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("h2", { className: "text-xl font-bold text-gray-900 dark:text-white", children: "Messages" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "divide-y divide-gray-200 dark:divide-gray-700", children: chats.sort((a, b) => new Date(b.lastMessageTimestamp).getTime() - new Date(a.lastMessageTimestamp).getTime()).map((chat) => {
        const otherParticipant = getOtherParticipant(chat);
        const lastMessage = getLastMessage(chat.id);
        const unreadCount = chat.unreadCount[currentUser.id] || 0;
        const isReceiver = lastMessage?.senderId !== currentUser.id;
        const lastMessageText = isReceiver && lastMessage?.censoredText ? lastMessage.censoredText : lastMessage?.text;
        return /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
          "button",
          {
            onClick: () => onSelectChat(chat.id),
            className: `w-full text-left p-4 hover:bg-gray-100 dark:hover:bg-gray-700/50 transition-colors ${activeChatId === chat.id ? "bg-gray-100 dark:bg-gray-700/50" : ""}`,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex justify-between items-center", children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("p", { className: `font-semibold text-gray-800 dark:text-gray-200 ${unreadCount > 0 ? "font-bold" : ""}`, children: chat.participantNames[otherParticipant.id] || otherParticipant.name }),
                lastMessage && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: new Date(lastMessage.timestamp).toLocaleTimeString("fr-FR", { hour: "2-digit", minute: "2-digit" }) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex justify-between items-center mt-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400 truncate pr-4", children: lastMessageText }),
                unreadCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "bg-kmer-red text-white text-xs font-bold w-5 h-5 flex items-center justify-center rounded-full", children: unreadCount })
              ] })
            ]
          },
          chat.id
        );
      }) })
    ] });
  };
  var MessageThread = ({ chat, messages, currentUser, onSendMessage, onBack, isTyping }) => {
    const [newMessage, setNewMessage] = (0, import_react15.useState)("");
    const messagesEndRef = (0, import_react15.useRef)(null);
    (0, import_react15.useEffect)(() => {
      messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, [messages, isTyping]);
    if (!chat) {
      return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "h-full flex flex-col justify-center items-center text-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("p", { className: "text-gray-500 dark:text-gray-400", children: "S\xE9lectionnez une conversation pour commencer \xE0 discuter." }) });
    }
    const otherParticipant = chat.participantIds.find((id) => id !== currentUser.id);
    const handleSend = (e) => {
      e.preventDefault();
      if (newMessage.trim()) {
        onSendMessage(newMessage.trim());
        setNewMessage("");
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex flex-col h-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("header", { className: "p-4 border-b border-gray-200 dark:border-gray-700 flex items-center gap-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("button", { onClick: onBack, className: "lg:hidden text-gray-500 dark:text-gray-400", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(ArrowLeftIcon, { className: "w-6 h-6" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("h3", { className: "font-bold text-gray-900 dark:text-white", children: chat.participantNames[otherParticipant] }),
          chat.productContext && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: [
            "\xC0 propos de : ",
            chat.productContext.name
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex-grow p-4 overflow-y-auto space-y-4", children: [
        chat.productContext && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex gap-2 items-center p-2 rounded-lg bg-gray-100 dark:bg-gray-900/50 mb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("img", { src: chat.productContext.imageUrl || PLACEHOLDER_IMAGE_URL, alt: chat.productContext.name, className: "w-12 h-12 object-cover rounded-md" }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("p", { className: "text-sm font-semibold", children: chat.productContext.name })
        ] }),
        messages.map((msg) => {
          const isMe = msg.senderId === currentUser.id;
          const isAssistant = msg.senderId === "assistant-id";
          const textToDisplay = msg.censoredText ? msg.censoredText : msg.text;
          return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: `flex ${isMe ? "justify-end" : "justify-start"}`, children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: `max-w-xs lg:max-w-md p-3 rounded-xl ${isMe ? "bg-kmer-green text-white" : isAssistant ? "bg-gray-500 text-white" : "bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200"}`, children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("p", { children: textToDisplay }) }) }, msg.id);
        }),
        isTyping && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "flex justify-start", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "max-w-xs lg:max-w-md p-3 rounded-xl bg-gray-500 text-white", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center space-x-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "w-2 h-2 bg-gray-400 rounded-full animate-bounce [animation-delay:-0.3s]" }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "w-2 h-2 bg-gray-400 rounded-full animate-bounce [animation-delay:-0.15s]" }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "w-2 h-2 bg-gray-400 rounded-full animate-bounce" })
        ] }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { ref: messagesEndRef })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "p-4 border-t border-gray-200 dark:border-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("form", { onSubmit: handleSend, className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
          "input",
          {
            type: "text",
            value: newMessage,
            onChange: (e) => setNewMessage(e.target.value),
            placeholder: "\xC9crivez votre message...",
            className: "w-full p-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-kmer-green dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("button", { type: "submit", className: "bg-kmer-green text-white rounded-full p-3 hover:bg-green-700 transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(PaperAirplaneIcon, { className: "w-5 h-5" }) })
      ] }) })
    ] });
  };
  var ChatWidget = ({ allUsers, allProducts, allCategories }) => {
    const { user } = useAuth();
    const { chats, messages, activeChatId, setActiveChatId, sendMessage, isWidgetOpen, setIsWidgetOpen, isTyping } = useChatContext();
    if (!isWidgetOpen || !user) return null;
    const activeChat = chats.find((c) => c.id === activeChatId);
    const activeChatIsTyping = activeChatId ? isTyping[activeChatId] || false : false;
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "fixed bottom-0 right-0 sm:right-5 h-full w-full sm:h-[600px] sm:w-[700px] sm:max-h-[80vh] bg-white dark:bg-gray-800 rounded-t-lg sm:rounded-lg shadow-2xl z-50 flex flex-col transition-transform duration-300", children: [
      /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("header", { className: "bg-kmer-green text-white p-3 flex justify-between items-center rounded-t-lg flex-shrink-0", children: [
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("h2", { className: "font-bold", children: "Messagerie" }),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("button", { onClick: () => setIsWidgetOpen(false), className: "text-white opacity-80 hover:opacity-100", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(XIcon, { className: "w-6 h-6" }) }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex-grow flex overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: `w-full lg:w-1/3 flex-shrink-0 transition-transform duration-300 ${activeChatId ? "hidden lg:block" : ""}`, children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
          ConversationList,
          {
            chats,
            messages,
            activeChatId,
            onSelectChat: setActiveChatId,
            currentUser: user
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: `w-full lg:w-2/3 flex-shrink-0 transition-transform duration-300 ${!activeChatId ? "hidden lg:flex" : "flex"}`, children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
          MessageThread,
          {
            chat: activeChat || null,
            messages: activeChatId ? messages[activeChatId] || [] : [],
            currentUser: user,
            onSendMessage: (text) => activeChatId && sendMessage(activeChatId, text, allProducts, allCategories),
            onBack: () => setActiveChatId(null),
            isTyping: activeChatIsTyping
          }
        ) })
      ] })
    ] });
  };
  var ChatWidget_default = ChatWidget;

  // components/AddToCartModal.tsx
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  var PLACEHOLDER_IMAGE_URL2 = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none'%3E%3Crect width='24' height='24' fill='%23E5E7EB'/%3E%3Cpath d='M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z' stroke='%239CA3AF' stroke-width='1.5'/%3E%3C/svg%3E";
  var AddToCartModal = ({ product, onClose, onNavigateToCart }) => {
    const { cart } = useCart();
    const subtotal = cart.reduce((sum, item) => sum + (item.promotionPrice ?? item.price) * item.quantity, 0);
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    const displayImage = product.imageUrls[0] || PLACEHOLDER_IMAGE_URL2;
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-2xl p-6 max-w-lg w-full relative transform transition-all animate-in fade-in-0 zoom-in-95", children: [
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("button", { onClick: onClose, className: "absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(XIcon, { className: "h-6 w-6" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-3 text-lg font-semibold text-green-700 dark:text-green-300 mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CheckCircleIcon, { className: "w-7 h-7" }),
        "Produit ajout\xE9 au panier !"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex gap-4 border-t border-b dark:border-gray-700 py-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("img", { src: displayImage, alt: product.name, className: "w-24 h-24 object-cover rounded-md" }),
        /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("h3", { className: "font-semibold dark:text-white", children: product.name }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("p", { className: "text-gray-500 dark:text-gray-400 text-sm", children: product.vendor }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("p", { className: "text-kmer-green font-bold mt-1", children: [
            (product.promotionPrice ?? product.price).toLocaleString("fr-CM"),
            " FCFA"
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "py-4 space-y-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("span", { className: "dark:text-gray-300", children: [
            "Panier (",
            totalItems,
            " articles)"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("span", { className: "font-semibold dark:text-white", children: [
            subtotal.toLocaleString("fr-CM"),
            " FCFA"
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: "Frais de livraison calcul\xE9s \xE0 l'\xE9tape suivante." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "mt-4 flex flex-col sm:flex-row gap-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("button", { onClick: onClose, className: "w-full bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-800 dark:text-gray-200 font-bold py-2 px-4 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors", children: "Continuer mes achats" }),
        /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("button", { onClick: onNavigateToCart, className: "w-full bg-kmer-green text-white font-bold py-2 px-4 rounded-lg hover:bg-green-700 transition-colors", children: "Voir mon panier" })
      ] })
    ] }) });
  };
  var AddToCartModal_default = AddToCartModal;

  // components/PaymentModal.tsx
  var import_react16 = __toESM(require_react());
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  var getPaymentIcon = (id) => {
    switch (id) {
      case "pm1":
        return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(OrangeMoneyLogo, { className: "h-10 w-16" });
      case "pm2":
        return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(MtnMomoLogo, { className: "h-10 w-16" });
      case "pm3":
        return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(VisaIcon, { className: "h-10 w-16" });
      case "pm4":
        return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(MastercardIcon, { className: "h-10 w-16" });
      case "pm5":
        return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(PaypalIcon, { className: "h-10 w-16" });
      default:
        return null;
    }
  };
  var PaymentModal = ({ paymentRequest, paymentMethods, onClose }) => {
    const [step, setStep] = (0, import_react16.useState)("selection");
    const [selectedMethodId, setSelectedMethodId] = (0, import_react16.useState)(paymentMethods[0]?.id || null);
    const [phoneNumber, setPhoneNumber] = (0, import_react16.useState)("");
    const [error, setError] = (0, import_react16.useState)("");
    const handlePay = () => {
      if (!selectedMethodId) {
        setError("Veuillez s\xE9lectionner un moyen de paiement.");
        return;
      }
      if (["pm1", "pm2"].includes(selectedMethodId) && !/^[6-9]\d{8}$/.test(phoneNumber)) {
        setError("Veuillez entrer un num\xE9ro de t\xE9l\xE9phone camerounais valide (ex: 699887766).");
        return;
      }
      setError("");
      setStep("processing");
      setTimeout(() => {
        setStep("success");
        setTimeout(() => {
          paymentRequest.onSuccess({
            methodId: selectedMethodId,
            transactionId: `TXN_${Date.now()}`,
            phoneNumber
          });
        }, 1500);
      }, 2500);
    };
    const renderContent = () => {
      switch (step) {
        case "selection":
          return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_jsx_runtime18.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "text-center mb-6", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: paymentRequest.reason }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("p", { className: "text-4xl font-bold text-gray-800 dark:text-white mt-2", children: [
                paymentRequest.amount.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2", children: "Choisissez un moyen de paiement" }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "grid grid-cols-2 gap-3", children: paymentMethods.map((method) => /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                "button",
                {
                  onClick: () => setSelectedMethodId(method.id),
                  className: `p-3 border-2 rounded-lg flex items-center justify-center transition-colors ${selectedMethodId === method.id ? "border-kmer-green" : "border-gray-200 dark:border-gray-600 hover:border-gray-300"}`,
                  children: getPaymentIcon(method.id)
                },
                method.id
              )) })
            ] }),
            selectedMethodId && ["pm1", "pm2"].includes(selectedMethodId) && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "mt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("label", { htmlFor: "phoneNumber", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Num\xE9ro de t\xE9l\xE9phone" }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                "input",
                {
                  type: "tel",
                  id: "phoneNumber",
                  value: phoneNumber,
                  onChange: (e) => setPhoneNumber(e.target.value.replace(/\D/g, "")),
                  placeholder: "699887766",
                  className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
                }
              )
            ] }),
            error && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { className: "text-red-500 text-sm mt-2 text-center", children: error }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
              "button",
              {
                onClick: handlePay,
                className: "w-full mt-6 bg-kmer-green text-white font-bold py-3 rounded-lg hover:bg-green-700 transition-colors",
                children: "Payer"
              }
            )
          ] });
        case "processing":
          return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "text-center py-12", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("svg", { className: "animate-spin h-12 w-12 text-kmer-green mx-auto", xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("circle", { className: "opacity-25", cx: "12", cy: "12", r: "10", stroke: "currentColor", strokeWidth: "4" }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("path", { className: "opacity-75", fill: "currentColor", d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { className: "mt-4 font-semibold text-gray-700 dark:text-gray-300", children: "Traitement en cours..." }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: "Veuillez confirmer sur votre t\xE9l\xE9phone si n\xE9cessaire." })
          ] });
        case "success":
          return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "text-center py-12", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CheckCircleIcon, { className: "w-16 h-16 text-kmer-green mx-auto mb-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h3", { className: "text-xl font-bold text-gray-800 dark:text-white", children: "Paiement r\xE9ussi !" }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { className: "text-gray-500 dark:text-gray-400", children: "Votre transaction a \xE9t\xE9 valid\xE9e." })
          ] });
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-60 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-2xl p-6 max-w-sm w-full relative animate-in", children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("button", { onClick: onClose, className: "absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(XIcon, { className: "h-6 w-6" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h2", { className: "text-2xl font-bold text-center mb-4 text-gray-800 dark:text-white", children: "Finaliser le Paiement" }),
      renderContent()
    ] }) });
  };
  var PaymentModal_default = PaymentModal;

  // components/ComponentStubs.tsx
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  var Stub = ({ name, props }) => /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "p-6 m-4 border border-dashed border-gray-400 rounded-lg bg-gray-50 dark:bg-gray-800", children: [
    /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h2", { className: "text-xl font-bold text-gray-700 dark:text-gray-300", children: name }),
    /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("pre", { className: "mt-2 text-xs text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700 p-2 rounded overflow-auto", children: [
      JSON.stringify(props, null, 2).substring(0, 500),
      JSON.stringify(props, null, 2).length > 500 && "..."
    ] })
  ] });
  var ComparisonPage = (props) => /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Stub, { name: "ComparisonPage", props });
  var ComparisonBar = (props) => /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Stub, { name: "ComparisonBar", props });
  var InfoPage = (props) => /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Stub, { name: "InfoPage", props });
  var StoresMapPage = (props) => /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Stub, { name: "StoresMapPage", props });

  // components/StoryViewer.tsx
  var import_react17 = __toESM(require_react());
  var import_jsx_runtime20 = __toESM(require_jsx_runtime());
  var StoryViewer = ({ store, onClose, onProductClick, allProducts }) => {
    const [currentIndex, setCurrentIndex] = (0, import_react17.useState)(0);
    const activeStories = (0, import_react17.useMemo)(() => {
      const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1e3);
      return (store.stories || []).filter((story) => new Date(story.createdAt) > twentyFourHoursAgo);
    }, [store.stories]);
    (0, import_react17.useEffect)(() => {
      if (activeStories.length === 0) return;
      const timer = setTimeout(() => {
        if (currentIndex < activeStories.length - 1) {
          setCurrentIndex(currentIndex + 1);
        } else {
          onClose();
        }
      }, 5e3);
      return () => clearTimeout(timer);
    }, [currentIndex, activeStories, onClose]);
    if (activeStories.length === 0) {
      onClose();
      return null;
    }
    const currentStory = activeStories[currentIndex];
    const product = currentStory.productId ? allProducts.find((p) => p.id === currentStory.productId) : null;
    const goToNext = () => setCurrentIndex((i) => (i + 1) % activeStories.length);
    const goToPrev = () => setCurrentIndex((i) => (i - 1 + activeStories.length) % activeStories.length);
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "fixed inset-0 bg-black/90 z-50 flex items-center justify-center", onClick: onClose, children: [
      /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "relative w-full max-w-sm h-[80vh] rounded-lg overflow-hidden", onClick: (e) => e.stopPropagation(), children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "absolute top-2 left-2 right-2 flex gap-1 z-20", children: activeStories.map((_, index) => /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "flex-1 h-1 bg-white/30 rounded-full", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          "div",
          {
            className: `h-full bg-white rounded-full ${index === currentIndex ? "animate-progress" : index < currentIndex ? "w-full" : "w-0"}`,
            style: { animationDuration: "5s" }
          }
        ) }, index)) }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("img", { src: currentStory.imageUrl, alt: `Story de ${store.name}`, className: "w-full h-full object-cover" }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "absolute top-0 left-0 right-0 p-4 pt-6 bg-gradient-to-b from-black/50 to-transparent z-10", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("img", { src: store.logoUrl, alt: store.name, className: "w-10 h-10 rounded-full object-contain bg-white" }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { className: "text-white font-bold", children: store.name })
        ] }) }),
        product && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "absolute bottom-10 left-1/2 -translate-x-1/2 z-20", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          "button",
          {
            onClick: () => {
              onProductClick(product);
              onClose();
            },
            className: "bg-white/80 backdrop-blur-sm text-black font-bold py-3 px-6 rounded-full hover:bg-white animate-in",
            children: "Voir le produit"
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("button", { onClick: goToPrev, className: "absolute left-2 top-1/2 -translate-y-1/2 text-white bg-black/30 rounded-full p-2 z-20", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(ChevronLeftIcon, { className: "w-6 h-6" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("button", { onClick: goToNext, className: "absolute right-2 top-1/2 -translate-y-1/2 text-white bg-black/30 rounded-full p-2 z-20", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(ChevronRightIcon, { className: "w-6 h-6" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("button", { onClick: onClose, className: "absolute top-2 right-2 text-white bg-black/30 rounded-full p-2 z-20", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(XIcon, { className: "w-6 h-6" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("style", { children: `
                @keyframes progress {
                    from { width: 0%; }
                    to { width: 100%; }
                }
                .animate-progress {
                    animation: progress linear;
                }
            ` })
    ] });
  };
  var StoryViewer_default = StoryViewer;

  // hooks/useSiteData.ts
  var import_react18 = __toESM(require_react());

  // constants.ts
  var initialZones = [
    { id: "zone-dla-a", name: "Zone A", city: "Douala" },
    { id: "zone-dla-b", name: "Zone B", city: "Douala" },
    { id: "zone-yde-a", name: "Zone A", city: "Yaound\xE9" },
    { id: "zone-yde-b", name: "Zone B", city: "Yaound\xE9" }
  ];
  var initialCategories = [
    // Main Categories
    { id: "cat-vetements", name: "V\xEAtements et chaussures", imageUrl: "https://images.unsplash.com/photo-1445205170230-053b83016050?q=80&w=2071&auto=format&fit=crop" },
    { id: "cat-accessoires", name: "Accessoires & bijoux", imageUrl: "https://images.unsplash.com/photo-1611652022417-a551155e9984?q=80&w=1974&auto=format&fit=crop" },
    { id: "cat-beaute", name: "Beaut\xE9", imageUrl: "https://images.unsplash.com/photo-1596422221063-654854db2583?q=80&w=1974&auto=format&fit=crop" },
    { id: "cat-mobilier", name: "Mobilier (Meubles)", imageUrl: "https://images.unsplash.com/photo-1555041469-a586c61ea9bc?q=80&w=2070&auto=format&fit=crop" },
    { id: "cat-electronique", name: "\xC9lectronique", imageUrl: "https://images.unsplash.com/photo-1526738549149-8e07eca6c147?q=80&w=1925&auto=format&fit=crop" },
    { id: "cat-textile", name: "Textile maison", imageUrl: "https://images.unsplash.com/photo-1588195538326-c5b1e9f80a1b?q=80&w=1974&auto=format&fit=crop" },
    { id: "cat-bureau", name: "Fournitures de bureau", imageUrl: "https://images.unsplash.com/photo-1456735185569-8a8b122b1236?q=80&w=2068&auto=format&fit=crop" },
    { id: "cat-animaux", name: "Produits pour animaux", imageUrl: "https://images.unsplash.com/photo-1537151608828-ea2b11777ee8?q=80&w=1974&auto=format&fit=crop" },
    { id: "cat-loisirs", name: "Loisirs & Cr\xE9ativit\xE9", imageUrl: "https://images.unsplash.com/photo-1517420704952-d9f39e95b43e?q=80&w=1974&auto=format&fit=crop" },
    { id: "cat-jardin", name: "Maison & Jardin", imageUrl: "https://images.unsplash.com/photo-1618220179428-22790b461013?q=80&w=1925&auto=format&fit=crop" },
    { id: "cat-electronique-grand-public", name: "\xC9lectronique grand public", imageUrl: "https://images.unsplash.com/photo-1593359677879-a4bb92f82acb?q=80&w=2070&auto=format&fit=crop" },
    { id: "cat-enfants", name: "Produits pour enfants et scolaires", imageUrl: "https://images.unsplash.com/photo-1518498391512-42f5b89a81c1?q=80&w=2070&auto=format&fit=crop" },
    // Sub-categories
    { id: "sub-vetements", parentId: "cat-vetements", name: "V\xEAtements", imageUrl: "https://images.unsplash.com/photo-1612053648936-285a2b342c8d?q=80&w=1974&auto=format&fit=crop" },
    { id: "sub-chaussures", parentId: "cat-vetements", name: "Chaussures", imageUrl: "https://images.unsplash.com/photo-1542291026-7eec264c27ff?q=80&w=2070&auto=format&fit=crop" },
    { id: "sub-sacs", parentId: "cat-accessoires", name: "Sacs", imageUrl: "https://images.unsplash.com/photo-1584917865442-de89df76afd3?q=80&w=1935&auto=format&fit=crop" },
    { id: "sub-montres", parentId: "cat-accessoires", name: "Montres", imageUrl: "https://images.unsplash.com/photo-1533139502658-0198f920d8e8?q=80&w=1974&auto=format&fit=crop" },
    { id: "sub-lunettes", parentId: "cat-accessoires", name: "Lunettes", imageUrl: "https://images.unsplash.com/photo-1511499767150-a48a237f0083?q=80&w=1780&auto=format&fit=crop" },
    { id: "sub-bijoux", parentId: "cat-accessoires", name: "Bijoux", imageUrl: "https://images.unsplash.com/photo-1611591437281-462bf4d3ab45?q=80&w=1974&auto=format&fit=crop" },
    { id: "sub-accessoires-cheveux", parentId: "cat-accessoires", name: "Accessoires cheveux", imageUrl: "https://images.unsplash.com/photo-1599386348459-717a6a70a040?q=80&w=2070&auto=format&fit=crop" },
    { id: "sub-cosmetiques", parentId: "cat-beaute", name: "Cosm\xE9tiques", imageUrl: "https://images.unsplash.com/photo-1512496015851-a90137ba0a43?q=80&w=1974&auto=format&fit=crop" },
    { id: "sub-parfums", parentId: "cat-beaute", name: "Parfums", imageUrl: "https://images.unsplash.com/photo-1585399009939-f4639a4f78d1?q=80&w=2070&auto=format&fit=crop" },
    { id: "sub-chaises", parentId: "cat-mobilier", name: "Chaises", imageUrl: "https://images.unsplash.com/photo-1561582299-a403c00a0063?q=80&w=1964&auto=format&fit=crop" },
    { id: "sub-autres-meubles", parentId: "cat-mobilier", name: "Autres meubles", imageUrl: "https://images.unsplash.com/photo-1592078615290-033ee584e267?q=80&w=2160&auto=format&fit=crop" },
    { id: "sub-chargeurs-cables-batteries", parentId: "cat-electronique", name: "Chargeurs, c\xE2bles, batteries", imageUrl: "https://images.unsplash.com/photo-1588702547919-26089e690ecc?q=80&w=2070&auto=format&fit=crop" },
    { id: "sub-rideaux", parentId: "cat-textile", name: "Rideaux", imageUrl: "https://images.unsplash.com/photo-1605334182479-54a4347781c7?q=80&w=1974&auto=format&fit=crop" },
    { id: "sub-autres-textiles", parentId: "cat-textile", name: "Autres textiles domestiques", imageUrl: "https://images.unsplash.com/photo-1617325247854-dce5e6a83607?q=80&w=1974&auto=format&fit=crop" },
    { id: "sub-papeterie", parentId: "cat-bureau", name: "Papeterie", imageUrl: "https://images.unsplash.com/photo-1600869158702-818a7c168305?q=80&w=1974&auto=format&fit=crop" },
    { id: "sub-office-goods", parentId: "cat-bureau", name: "Office goods", imageUrl: "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?q=80&w=2070&auto=format&fit=crop" },
    { id: "sub-accessoires-animaux", parentId: "cat-animaux", name: "Accessoires pour animaux", imageUrl: "https://images.unsplash.com/photo-1598808520297-8c24c7f76d23?q=80&w=2071&auto=format&fit=crop" },
    { id: "sub-artisanat-jeux", parentId: "cat-loisirs", name: "Hobbies, artisanat, jeux", imageUrl: "https://images.unsplash.com/photo-1541888946425-d81bb19240f5?q=80&w=2070&auto=format&fit=crop" },
    { id: "sub-decoration", parentId: "cat-jardin", name: "D\xE9coration int\xE9rieure, luminaire, objets festifs", imageUrl: "https://images.unsplash.com/photo-1534349762230-e08968f43152?q=80&w=1974&auto=format&fit=crop" },
    { id: "sub-telephones-casques", parentId: "cat-electronique-grand-public", name: "T\xE9l\xE9phones, casques, \xE9lectrom\xE9nagers", imageUrl: "https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?q=80&w=1780&auto=format&fit=crop" },
    { id: "sub-jouets-fournitures", parentId: "cat-enfants", name: "Jouets, fournitures scolaires", imageUrl: "https://images.unsplash.com/photo-1596461404969-9ae70f2830c1?q=80&w=2070&auto=format&fit=crop" }
  ];
  var initialProducts = [
    { id: "1", name: "Ndol\xE9 Royal", price: 3500, promotionPrice: 3e3, imageUrls: ["https://images.unsplash.com/photo-1604329352680-e4a2896d8c22?q=80&w=1974&auto=format&fit=crop"], vendor: "Mama Africa", description: "Le plat national du Cameroun, un d\xE9licieux m\xE9lange de l\xE9gumes, d'arachides et de viande ou de poisson.", reviews: [{ author: "Jean P.", rating: 5, comment: "Incroyable !", date: "2023-10-10", status: "approved" }], stock: 15, categoryId: "sub-autres-textiles", status: "published" },
    { id: "2", name: "Robe en Tissu Pagne", price: 15e3, imageUrls: ["https://images.unsplash.com/photo-1617051395299-52d33b7336b1?q=80&w=1964&auto=format&fit=crop"], vendor: "Kmer Fashion", description: "Une robe \xE9l\xE9gante confectionn\xE9e \xE0 la main avec du tissu pagne de haute qualit\xE9.", reviews: [{ author: "A\xEFcha B.", rating: 4, comment: "Tr\xE8s belles couleurs.", date: "2023-10-11", status: "approved" }], stock: 8, categoryId: "sub-vetements", status: "published", brand: "Kmer Fashion" },
    { id: "3", name: "Savon Artisanal \xE0 l'huile d'olive", price: 1500, imageUrls: ["https://images.unsplash.com/photo-1600966492337-1d83c4bee955?q=80&w=2070&auto=format&fit=crop"], vendor: "Douala Soaps", description: "Un savon artisanal fabriqu\xE9 localement. Doux pour la peau et respectueux de l'environnement.", reviews: [], stock: 50, categoryId: "sub-cosmetiques", status: "published", brand: "Douala Soaps" },
    { id: "4", name: "Smartphone Pro Max", price: 75e3, promotionPrice: 69900, imageUrls: ["https://images.unsplash.com/photo-1580910051074-3eb694886505?q=80&w=1965&auto=format&fit=crop"], vendor: "Electro Plus", description: "Un smartphone performant avec un excellent rapport qualit\xE9-prix. Grand \xE9cran et bonne autonomie.", reviews: [{ author: "Eric K.", rating: 5, comment: "Super t\xE9l\xE9phone pour le prix.", date: "2023-10-12", status: "approved" }], stock: 4, categoryId: "sub-telephones-casques", status: "published", promotionStartDate: "2024-07-01", promotionEndDate: "2024-07-31", brand: "TechPro" },
    { id: "5", name: "Miel d'Oku", price: 5e3, imageUrls: ["https://images.unsplash.com/photo-1558642754-b27b3b95a8a9?q=80&w=1974&auto=format&fit=crop"], vendor: "Mama Africa", description: "Un miel blanc rare et prim\xE9, r\xE9colt\xE9 sur les flancs du mont Oku.", reviews: [{ author: "Fatima G.", rating: 5, comment: "Le meilleur miel que j'ai jamais go\xFBt\xE9.", date: "2023-10-13", status: "approved" }], stock: 25, categoryId: "sub-autres-textiles", status: "published" },
    { id: "6", name: "Sandales en cuir", price: 8e3, imageUrls: ["https://images.unsplash.com/photo-1620652755231-c2f8b16a2b8e?q=80&w=1974&auto=format&fit=crop"], vendor: "Kmer Fashion", description: "Sandales en cuir v\xE9ritable, faites \xE0 la main. Confortables et durables.", reviews: [], stock: 10, categoryId: "sub-chaussures", status: "draft", brand: "Kmer Fashion" },
    { id: "7", name: "Poulet DG", price: 6500, imageUrls: ["https://images.unsplash.com/photo-1543339308-43e59d6b70a6?q=80&w=2070&auto=format&fit=crop"], vendor: "Mama Africa", description: "Un plat de f\xEAte succulent avec du poulet frit, des plantains et une sauce riche en l\xE9gumes.", reviews: [], stock: 12, categoryId: "sub-autres-textiles", status: "published" },
    { id: "8", name: "Jus de Bissap Naturel", price: 1e3, imageUrls: ["https://images.unsplash.com/photo-1623341214825-9f4f96d62c54?q=80&w=1974&auto=format&fit=crop"], vendor: "Mama Africa", description: "Boisson rafra\xEEchissante et naturelle \xE0 base de fleurs d'hibiscus.", reviews: [], stock: 30, categoryId: "sub-autres-textiles", status: "published" },
    { id: "9", name: "Beignets Haricots Bouillie", price: 1500, imageUrls: ["https://img.cuisineaz.com/660x660/2022/01/24/i181710-beignets-souffles-camerounais.jpeg"], vendor: "Mama Africa", description: "Le petit-d\xE9jeuner camerounais par excellence. Des beignets souffl\xE9s accompagn\xE9s d'une pur\xE9e de haricots.", reviews: [], stock: 20, categoryId: "sub-autres-textiles", status: "published" },
    { id: "10", name: "Chemise en Toghu", price: 25e3, imageUrls: ["https://i.pinimg.com/564x/a0/0c/37/a00c3755255673a5a415958253a5f82c.jpg"], vendor: "Kmer Fashion", description: "Chemise de c\xE9r\xE9monie pour homme, en velours noir brod\xE9 avec les motifs color\xE9s traditionnels du Toghu.", reviews: [], stock: 5, categoryId: "sub-vetements", status: "published", brand: "Kmer Fashion" },
    { id: "11", name: "Poivre de Penja", price: 4500, imageUrls: ["https://images.unsplash.com/photo-1508616258423-f3e4e73b29b4?q=80&w=1935&auto=format&fit=crop"], vendor: "Mama Africa", description: "Consid\xE9r\xE9 comme l'un des meilleurs poivres au monde, cultiv\xE9 sur les terres volcaniques de Penja.", reviews: [], stock: 40, categoryId: "sub-autres-textiles", status: "published" },
    { id: "12", name: "Sac \xE0 main en pagne", price: 12e3, imageUrls: ["https://images.unsplash.com/photo-1566150905458-1bf1f2961239?q=80&w=1974&auto=format&fit=crop"], vendor: "Kmer Fashion", description: "Accessoirisez votre tenue avec ce magnifique sac \xE0 main fait main, alliant cuir et tissu pagne.", reviews: [], stock: 15, categoryId: "sub-sacs", status: "published", brand: "Kmer Fashion" },
    { id: "13", name: 'T\xE9l\xE9viseur LED 32"', price: 85e3, imageUrls: ["https://images.unsplash.com/photo-1593359677879-a4bb92f82acb?q=80&w=2070&auto=format&fit=crop"], vendor: "Electro Plus", description: "Un t\xE9l\xE9viseur LED de 32 pouces avec une image de haute qualit\xE9.", reviews: [], stock: 9, categoryId: "sub-telephones-casques", status: "published", brand: "ViewSonic" },
    { id: "14", name: "Fer \xE0 repasser", price: 7500, imageUrls: ["https://images.unsplash.com/photo-1622629734636-95a239552382?q=80&w=1932&auto=format&fit=crop"], vendor: "Electro Plus", description: "Simple, efficace et durable. Ce fer \xE0 repasser est parfait pour un usage quotidien.", reviews: [], stock: 25, categoryId: "sub-telephones-casques", status: "published", brand: "Generic" },
    { id: "15", name: "Blender / Mixeur", price: 18e3, imageUrls: ["https://images.unsplash.com/photo-1582142391035-61f20a003881?q=80&w=1974&auto=format&fit=crop"], vendor: "Electro Plus", description: "Un mixeur puissant pour pr\xE9parer vos jus, soupes et sauces. Bol en verre robuste de 1.5L.", reviews: [], stock: 18, categoryId: "sub-telephones-casques", status: "published", brand: "MixWell" },
    { id: "16", name: "Savon noir gommant", price: 2500, imageUrls: ["https://images.unsplash.com/photo-1623461624469-8a964343169f?q=80&w=1974&auto=format&fit=crop"], vendor: "Douala Soaps", description: "Savon noir africain pour un gommage naturel et une peau douce et purifi\xE9e.", reviews: [], stock: 40, categoryId: "sub-cosmetiques", status: "published", brand: "Douala Soaps" },
    { id: "17", name: "Huile de coco vierge", price: 4e3, imageUrls: ["https://images.unsplash.com/photo-1590945259635-e1a532ac9695?q=80&w=1974&auto=format&fit=crop"], vendor: "Douala Soaps", description: "Huile de coco 100% pure et press\xE9e \xE0 froid. Id\xE9ale pour la peau, les cheveux et la cuisson.", reviews: [], stock: 30, categoryId: "sub-cosmetiques", status: "published", brand: "Douala Soaps" },
    { id: "18", name: "Beurre de karit\xE9", price: 3e3, imageUrls: ["https://images.unsplash.com/photo-1554153041-33924bb6aa67?q=80&w=2070&auto=format&fit=crop"], vendor: "Douala Soaps", description: "Beurre de karit\xE9 brut et non raffin\xE9, parfait pour hydrater en profondeur la peau et les cheveux secs.", reviews: [], stock: 60, categoryId: "sub-cosmetiques", status: "published", brand: "Douala Soaps" },
    { id: "19", name: "Baskets de Ville", price: 22e3, imageUrls: ["https://images.unsplash.com/photo-1515955656352-a1fa3ffcdda9?q=80&w=2070&auto=format&fit=crop"], vendor: "Kmer Fashion", description: "Baskets confortables et styl\xE9es pour un usage quotidien.", reviews: [], stock: 20, categoryId: "sub-chaussures", status: "published", brand: "CityWalkers" },
    { id: "20", name: 'Eau de Parfum "Sawa"', price: 28e3, imageUrls: ["https://images.unsplash.com/photo-1541643600914-78b084683601?q=80&w=1904&auto=format&fit=crop"], vendor: "Douala Soaps", description: "Un parfum bois\xE9 et \xE9pic\xE9 pour homme, inspir\xE9 par la c\xF4te camerounaise.", reviews: [], stock: 15, categoryId: "sub-parfums", status: "published", brand: "Douala Soaps" },
    { id: "21", name: "Fauteuil en Rotin", price: 45e3, imageUrls: ["https://images.unsplash.com/photo-1598300042247-d088f8ab3a91?q=80&w=1965&auto=format&fit=crop"], vendor: "Electro Plus", description: "Fauteuil artisanal en rotin, parfait pour votre salon ou votre terrasse.", reviews: [], stock: 5, categoryId: "sub-chaises", status: "published", brand: "HomeDecor" },
    { id: "22", name: "Masque d\xE9coratif Fang", price: 18e3, imageUrls: ["https://images.unsplash.com/photo-1513480749022-2f7a0b1e4a1a?q=80&w=1974&auto=format&fit=crop"], vendor: "Kmer Fashion", description: "Authentique masque d\xE9coratif de l'ethnie Fang, sculpt\xE9 \xE0 la main.", reviews: [], stock: 10, categoryId: "sub-decoration", status: "published", brand: "Artisanat Local" },
    { id: "23", name: 'Lampe de chevet "Wouri"', price: 13500, imageUrls: ["https://images.unsplash.com/photo-1543198126-a8ad8e47fb22?q=80&w=1974&auto=format&fit=crop"], vendor: "Electro Plus", description: "Lampe de chevet au design moderne avec une base en bois local.", reviews: [], stock: 22, categoryId: "sub-decoration", status: "published", brand: "HomeDecor" },
    { id: "24", name: "Collier de perles", price: 9500, imageUrls: ["https://images.unsplash.com/photo-1599643477877-539eb8a52f18?q=80&w=1974&auto=format&fit=crop"], vendor: "Kmer Fashion", description: "Collier artisanal fait de perles traditionnelles color\xE9es.", reviews: [], stock: 30, categoryId: "sub-bijoux", status: "published", brand: "Artisanat Local" },
    { id: "25", name: "Montre Classique Homme", price: 32e3, imageUrls: ["https://images.unsplash.com/photo-1523275335684-37898b6baf30?q=80&w=1999&auto=format&fit=crop"], vendor: "Electro Plus", description: "Montre \xE9l\xE9gante avec bracelet en cuir, id\xE9ale pour le bureau ou les sorties.", reviews: [], stock: 12, categoryId: "sub-montres", status: "published", brand: "TimeMaster" },
    { id: "26", name: 'Poup\xE9e "Penda"', price: 7e3, imageUrls: ["https://images.unsplash.com/photo-1620243423599-da1c88a51e6c?q=80&w=1964&auto=format&fit=crop"], vendor: "Kmer Fashion", description: "Poup\xE9e en tissu pagne, faite \xE0 la main, pour le bonheur des plus petits.", reviews: [], stock: 25, categoryId: "sub-jouets-fournitures", status: "published", brand: "Artisanat Local" },
    { id: "27", name: "Lot de 10 Cahiers", price: 2500, imageUrls: ["https://images.unsplash.com/photo-1529142893173-665a0a1027c4?q=80&w=2070&auto=format&fit=crop"], vendor: "Electro Plus", description: "Un lot de 10 cahiers de 100 pages pour la rentr\xE9e scolaire.", reviews: [], stock: 100, categoryId: "sub-papeterie", status: "published", brand: "School Essentials" },
    { id: "28", name: 'Bi\xE8re "33" Export (Pack de 6)', price: 4e3, imageUrls: ["https://www.bebe-cash.com/wp-content/uploads/2021/07/33-export.jpg"], vendor: "Mama Africa", description: "La bi\xE8re blonde de r\xE9f\xE9rence au Cameroun. Pack de 6 bouteilles de 65cl.", reviews: [], stock: 50, categoryId: "sub-autres-textiles", status: "published" },
    { id: "29", name: "Caf\xE9 Arabica en Grains", price: 6e3, imageUrls: ["https://images.unsplash.com/photo-1559449272-4d24b2f27b72?q=80&w=1974&auto=format&fit=crop"], vendor: "Bafoussam Brews", description: "Caf\xE9 Arabica de l'Ouest Cameroun, torr\xE9faction artisanale. Sachet de 500g.", reviews: [], stock: 30, categoryId: "sub-autres-textiles", status: "published", brand: "Bafoussam Brews" },
    { id: "30", name: "Statuette en bois d'\xE9b\xE8ne", price: 22e3, imageUrls: ["https://i.pinimg.com/564x/7d/50/e0/7d50e0529d1ccf1b36952d76d4a52efc.jpg"], vendor: "Limbe Arts & Crafts", description: "Statuette finement sculpt\xE9e \xE0 la main par des artisans de la r\xE9gion du Sud-Ouest.", reviews: [], stock: 8, categoryId: "sub-decoration", status: "published", brand: "Limbe Arts & Crafts" },
    { id: "31", name: "Tableau d'art contemporain", price: 48e3, imageUrls: ["https://i.pinimg.com/564x/e7/7d/1f/e77d1f6d396a84c25f573453347f31b2.jpg"], vendor: "Limbe Arts & Crafts", description: "Peinture sur toile vibrante, repr\xE9sentant une sc\xE8ne de march\xE9 local.", reviews: [], stock: 3, categoryId: "sub-decoration", status: "published", brand: "Limbe Arts & Crafts" },
    { id: "32", name: "\xC9couteurs sans fil", price: 12500, imageUrls: ["https://images.unsplash.com/photo-1606220588913-b35474623dc5?q=80&w=1964&auto=format&fit=crop"], vendor: "Kribi Digital", description: "\xC9couteurs Bluetooth avec une bonne autonomie et un son clair. Id\xE9al pour la musique et les appels.", reviews: [], stock: 25, categoryId: "sub-chargeurs-cables-batteries", status: "draft" },
    // In draft, store is pending
    { id: "33", name: "Caf\xE9 Robusta Moulu", price: 4500, imageUrls: ["https://images.unsplash.com/photo-1611162458022-20c24b071a2a?q=80&w=2070&auto=format&fit=crop"], vendor: "Bafoussam Brews", description: "Caf\xE9 Robusta puissant et aromatique, parfait pour un expresso cors\xE9. Sachet de 500g.", reviews: [], stock: 40, categoryId: "sub-autres-textiles", status: "published", brand: "Bafoussam Brews" }
  ];
  var sampleDeliveredOrder = {
    id: "ORDER-SAMPLE-1",
    userId: "customer-1",
    items: [
      { ...initialProducts.find((p) => p.id === "1"), quantity: 1 },
      { ...initialProducts.find((p) => p.id === "5"), quantity: 2 }
    ],
    subtotal: 13e3,
    deliveryFee: 1e3,
    total: 14e3,
    shippingAddress: { fullName: "Client de Test", phone: "655555555", address: "123 Rue du Test", city: "Yaound\xE9", latitude: 3.848, longitude: 11.5021 },
    deliveryMethod: "home-delivery",
    orderDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1e3).toISOString(),
    status: "delivered",
    trackingNumber: "KZSAMPLE1",
    agentId: "agent-1",
    trackingHistory: [
      { status: "confirmed", date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1e3).toISOString(), location: "Mama Africa", details: "Commande confirm\xE9e" },
      { status: "picked-up", date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3).toISOString(), location: "Livreur", details: "Colis pris en charge" },
      { status: "delivered", date: new Date(Date.now() - 1 * 24 * 60 * 60 * 1e3).toISOString(), location: "Yaound\xE9", details: "Livr\xE9 avec succ\xE8s" }
    ],
    statusChangeLog: []
  };
  var sampleDeliveredOrder2 = {
    id: "ORDER-SAMPLE-2",
    userId: "customer-1",
    items: [
      { ...initialProducts.find((p) => p.id === "2"), quantity: 1 },
      { ...initialProducts.find((p) => p.id === "12"), quantity: 1 }
    ],
    subtotal: 27e3,
    deliveryFee: 1e3,
    total: 28e3,
    shippingAddress: { fullName: "Client de Test 2", phone: "655555556", address: "456 Rue du Test", city: "Douala", latitude: 4.0511, longitude: 9.7679 },
    deliveryMethod: "home-delivery",
    orderDate: new Date(Date.now() - 14 * 24 * 60 * 60 * 1e3).toISOString(),
    status: "picked-up",
    agentId: "agent-1",
    trackingNumber: "KZSAMPLE2",
    trackingHistory: [],
    statusChangeLog: []
  };
  var sampleDeliveredOrder3 = {
    id: "ORDER-SAMPLE-3",
    userId: "customer-1",
    items: [
      { ...initialProducts.find((p) => p.id === "13"), quantity: 1 }
    ],
    subtotal: 85e3,
    deliveryFee: 2500,
    total: 87500,
    shippingAddress: { fullName: "Client de Test 3", phone: "655555557", address: "789 Rue du Test", city: "Yaound\xE9", latitude: 3.8647, longitude: 11.521 },
    deliveryMethod: "home-delivery",
    orderDate: new Date(Date.now() - 60 * 24 * 60 * 60 * 1e3).toISOString(),
    status: "delivered",
    trackingNumber: "KZSAMPLE3",
    trackingHistory: [],
    statusChangeLog: []
  };
  var sampleNewMissionOrder = {
    id: "ORDER-SAMPLE-4",
    userId: "customer-2",
    items: [{ ...initialProducts.find((p) => p.id === "25"), quantity: 1 }],
    subtotal: 32e3,
    deliveryFee: 1e3,
    total: 33e3,
    shippingAddress: { fullName: "Nouveau Client", phone: "655555558", address: "Point de retrait Akwa", city: "Douala" },
    deliveryMethod: "pickup",
    pickupPointId: "pp1",
    orderDate: (/* @__PURE__ */ new Date()).toISOString(),
    status: "ready-for-pickup",
    agentId: "agent-1",
    trackingNumber: "KZSAMPLE4",
    trackingHistory: [
      { status: "confirmed", date: (/* @__PURE__ */ new Date()).toISOString(), location: "Electro Plus", details: "Commande confirm\xE9e" },
      { status: "ready-for-pickup", date: (/* @__PURE__ */ new Date()).toISOString(), location: "Electro Plus", details: "Pr\xEAt pour enl\xE8vement par le livreur" }
    ],
    statusChangeLog: []
  };
  var initialShippingPartners = [
    { id: "sp1", name: "Transporteur Standard A", isPremium: false },
    { id: "sp2", name: "Transporteur Standard B", isPremium: false },
    { id: "sp3", name: "KMER ZONE Express", isPremium: true },
    { id: "sp4", name: "Livraison Prioritaire KMER", isPremium: true }
  ];
  var initialStores = [
    {
      id: "store-1",
      sellerId: "seller-1",
      name: "Kmer Fashion",
      logoUrl: "https://d1csarkz8obe9u.cloudfront.net/posterpreviews/fashion-brand-logo-design-template-5355651c6b65163155af4e2c246f5647_screen.jpg?ts=1675753069",
      bannerUrl: "https://images.unsplash.com/photo-1555529669-e69e70197a29?q=80&w=2070&auto=format&fit=crop",
      category: "Mode et V\xEAtements",
      warnings: [],
      status: "active",
      premiumStatus: "premium",
      location: "Douala",
      neighborhood: "Akwa",
      sellerFirstName: "A\xEFcha",
      sellerLastName: "Bakari",
      sellerPhone: "699887766",
      physicalAddress: "45 Avenue de la Mode, Akwa",
      latitude: 4.0483,
      longitude: 9.702,
      subscriptionStatus: "active",
      subscriptionDueDate: "2024-08-15T00:00:00.000Z",
      documents: [
        { name: "CNI (Carte Nationale d'Identit\xE9)", status: "verified", fileUrl: "..." },
        { name: "Registre de Commerce", status: "uploaded", fileUrl: "..." }
      ],
      stories: [{ id: "s1", imageUrl: "https://i.pinimg.com/564x/08/94/a3/0894a30e8a719c676767576f3f054812.jpg", createdAt: (/* @__PURE__ */ new Date()).toISOString() }],
      visits: 258,
      collections: [{ id: "coll1", storeId: "store-1", name: "Nouveaut\xE9s Pagne", description: "Nos derni\xE8res cr\xE9ations en tissu pagne, parfaites pour toutes les occasions.", productIds: ["2", "12", "10"] }],
      shippingSettings: {
        enabledPartners: ["sp1", "sp3"],
        customRates: { local: 500, national: 1500 },
        freeShippingThreshold: 2e4
      }
    },
    {
      id: "store-2",
      sellerId: "seller-2",
      name: "Mama Africa",
      logoUrl: "https://img.freepik.com/vecteurs-premium/modele-logo-cuisine-africaine_210834-31.jpg",
      bannerUrl: "https://images.unsplash.com/photo-1542838132-92c53300491e?q=80&w=1974&auto=format&fit=crop",
      category: "Alimentation",
      warnings: [],
      status: "active",
      premiumStatus: "standard",
      location: "Yaound\xE9",
      neighborhood: "Bastos",
      sellerFirstName: "Jeanne",
      sellerLastName: "Abena",
      sellerPhone: "677665544",
      physicalAddress: "12 Rue des Saveurs, Bastos",
      latitude: 3.8968,
      longitude: 11.5213,
      subscriptionStatus: "overdue",
      subscriptionDueDate: "2024-07-10T00:00:00.000Z",
      documents: [{ name: "CNI (Carte Nationale d'Identit\xE9)", status: "requested" }],
      visits: 134,
      collections: []
    },
    {
      id: "store-3",
      sellerId: "seller-3",
      name: "Electro Plus",
      logoUrl: "https://cdn.dribbble.com/users/188652/screenshots/1029415/electro-logo-2.jpg",
      bannerUrl: "https://images.unsplash.com/photo-1593642702821-c8da6771f0c6?q=80&w=2069&auto=format&fit=crop",
      category: "\xC9lectronique",
      warnings: [],
      status: "active",
      premiumStatus: "super_premium",
      location: "Yaound\xE9",
      neighborhood: "Mokolo",
      sellerFirstName: "Paul",
      sellerLastName: "Kouam",
      sellerPhone: "655443322",
      physicalAddress: "Grand March\xE9 Mokolo, Stand 52",
      latitude: 3.8731,
      longitude: 11.5152,
      subscriptionStatus: "active",
      subscriptionDueDate: "2024-08-20T00:00:00.000Z",
      documents: [{ name: "CNI (Carte Nationale d'Identit\xE9)", status: "verified", fileUrl: "..." }],
      visits: 197,
      collections: []
    },
    {
      id: "store-4",
      sellerId: "seller-4",
      name: "Douala Soaps",
      logoUrl: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRz-M3k_vJXuV2zD6D3XoJzQZzO8Z6O8Z6O8Q&s",
      bannerUrl: "https://images.unsplash.com/photo-1583947581920-802581a58a7?q=80&w=2071&auto=format&fit=crop",
      category: "Beaut\xE9 et Hygi\xE8ne",
      warnings: [],
      status: "suspended",
      premiumStatus: "standard",
      location: "Douala",
      neighborhood: "Bonapriso",
      sellerFirstName: "C\xE9line",
      sellerLastName: "Ngassa",
      sellerPhone: "691234567",
      physicalAddress: "Rue Njo-Njo, Bonapriso",
      latitude: 4.0321,
      longitude: 9.715,
      subscriptionStatus: "inactive",
      documents: [{ name: "Registre de Commerce", status: "rejected", rejectionReason: "Document illisible." }],
      visits: 45,
      collections: []
    },
    {
      id: "store-5",
      sellerId: "seller-5",
      name: "Yaound\xE9 Style",
      logoUrl: "https://img.freepik.com/premium-vector/traditional-african-woman-head-wrap-turban-logo_103045-81.jpg",
      category: "Mode et V\xEAtements",
      warnings: [],
      status: "pending",
      premiumStatus: "standard",
      location: "Yaound\xE9",
      neighborhood: "Mvog-Ada",
      sellerFirstName: "Franck",
      sellerLastName: "Essomba",
      sellerPhone: "698765432",
      physicalAddress: "Avenue Kennedy",
      latitude: 3.8647,
      longitude: 11.521,
      documents: [],
      visits: 0,
      collections: []
    },
    {
      id: "store-6",
      sellerId: "seller-6",
      name: "Bafoussam Brews",
      logoUrl: "https://cdn.dribbble.com/users/1586931/screenshots/3443128/coffee-logo-design.png",
      category: "Alimentation & Boissons",
      warnings: [],
      status: "active",
      premiumStatus: "standard",
      location: "Bafoussam",
      neighborhood: "Centre Ville",
      sellerFirstName: "Pierre",
      sellerLastName: "Kamdem",
      sellerPhone: "696543210",
      physicalAddress: "March\xE9 Central, Bafoussam",
      latitude: 5.4744,
      longitude: 10.4193,
      subscriptionStatus: "active",
      subscriptionDueDate: "2024-09-01T00:00:00.000Z",
      documents: [{ name: "CNI (Carte Nationale d'Identit\xE9)", status: "verified", fileUrl: "..." }],
      visits: 88,
      collections: []
    },
    {
      id: "store-7",
      sellerId: "seller-7",
      name: "Limbe Arts & Crafts",
      logoUrl: "https://i.pinimg.com/736x/8a/9e-12/8a9e-1261a8779728283575647585355e.jpg",
      category: "Artisanat & D\xE9coration",
      warnings: [],
      status: "active",
      premiumStatus: "premium",
      location: "Limbe",
      neighborhood: "Down Beach",
      sellerFirstName: "Sarah",
      sellerLastName: "Eko",
      sellerPhone: "695432109",
      physicalAddress: "Down Beach, Limbe",
      latitude: 4.0145,
      longitude: 9.2133,
      subscriptionStatus: "active",
      subscriptionDueDate: "2024-09-10T00:00:00.000Z",
      documents: [{ name: "CNI (Carte Nationale d'Identit\xE9)", status: "verified", fileUrl: "..." }],
      visits: 120,
      collections: []
    }
  ];
  var initialFlashSales = [
    {
      id: "fs-1",
      name: "Vente Flash de la Rentr\xE9e",
      startDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3).toISOString(),
      endDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1e3).toISOString(),
      products: [
        { productId: "4", sellerShopName: "Electro Plus", flashPrice: 65e3, status: "approved" },
        { productId: "27", sellerShopName: "Electro Plus", flashPrice: 2e3, status: "approved" }
      ]
    }
  ];
  var initialPickupPoints = [
    { id: "pp1", name: "D\xE9p\xF4t Akwa", city: "Douala", neighborhood: "Akwa", street: "Rue de la Joie", latitude: 4.0454, longitude: 9.7028, managerId: "depot-manager-1", zoneId: "zone-dla-a", layout: { aisles: 10, shelves: 5, locations: 10 } },
    { id: "pp2", name: "D\xE9p\xF4t Bastos", city: "Yaound\xE9", neighborhood: "Bastos", street: "Avenue des Ambassades", latitude: 3.8968, longitude: 11.5213, zoneId: "zone-yde-a" }
  ];
  var initialSiteSettings = {
    logoUrl: "https://kmer-zone-logo.svg",
    bannerUrl: "https://images.unsplash.com/photo-1556740738-b6a63e27c4df?q=80&w=2070&auto=format&fit=crop",
    companyName: "KMER ZONE Inc.",
    isStoriesEnabled: true,
    requiredSellerDocuments: { "CNI (Carte Nationale d'Identit\xE9)": true, "Registre de Commerce": true },
    isRentEnabled: false,
    rentAmount: 0,
    canSellersCreateCategories: false,
    commissionRate: 8.5,
    standardPlan: { price: 1e4, durationDays: 30, productLimit: 20, commissionRate: 8.5, photoServiceIncluded: false, featuredOnHomepage: false, prioritySupport: false },
    premiumPlan: { price: 25e3, durationDays: 30, productLimit: 100, commissionRate: 6, photoServiceIncluded: true, featuredOnHomepage: false, prioritySupport: true },
    superPremiumPlan: { price: 5e4, durationDays: 30, productLimit: 500, commissionRate: 4, photoServiceIncluded: true, featuredOnHomepage: true, prioritySupport: true },
    customerLoyaltyProgram: { isEnabled: true, premium: { thresholds: { orders: 10, spending: 5e4 }, cautionAmount: 1e4, benefits: ["Livraison prioritaire", "Acc\xE8s anticip\xE9 aux ventes flash"] }, premiumPlus: { isEnabled: true, annualFee: 25e3, benefits: ["Tous les avantages Premium", "Livraison gratuite sur 5 commandes", "Support client d\xE9di\xE9"] } },
    deliverySettings: { intraUrbanBaseFee: 1e3, interUrbanBaseFee: 2500, costPerKg: 500, premiumDeliveryDiscountPercentage: 15 },
    maintenanceMode: { isEnabled: false, message: "Nous serons de retour bient\xF4t !", reopenDate: "" },
    seo: { metaTitle: "KMER ZONE - Le meilleur du Cameroun, livr\xE9 chez vous.", metaDescription: "Achetez et vendez en ligne au Cameroun. V\xEAtements, \xE9lectronique, alimentation et plus encore.", ogImageUrl: "" },
    socialLinks: { facebook: { linkUrl: "#", iconUrl: "https://example.com/facebook.svg" }, twitter: { linkUrl: "#", iconUrl: "https://example.com/twitter.svg" }, instagram: { linkUrl: "#", iconUrl: "https://example.com/instagram.svg" } },
    emailTemplates: [
      {
        id: "welcome-customer",
        name: "Bienvenue au nouveau client",
        subject: "Bienvenue sur KMER ZONE !",
        body: "Bonjour {customerName},\n\nBienvenue sur KMER ZONE ! Nous sommes ravis de vous compter parmi nous.\n\nExplorez nos produits d\xE8s maintenant !\n\nL'\xE9quipe KMER ZONE",
        variables: "{customerName}"
      },
      {
        id: "order-shipped",
        name: "Commande exp\xE9di\xE9e",
        subject: "Votre commande KMER ZONE a \xE9t\xE9 exp\xE9di\xE9e !",
        body: "Bonjour {customerName},\n\nBonne nouvelle ! Votre commande #{orderId} a \xE9t\xE9 exp\xE9di\xE9e et est en route.\n\nVous pouvez suivre son avancement depuis votre compte.\n\nMerci pour votre confiance,\nL'\xE9quipe KMER ZONE",
        variables: "{customerName}, {orderId}"
      },
      {
        id: "promo-newsletter",
        name: "Newsletter promotionnelle",
        subject: "\u{1F525} Ne manquez pas nos offres sp\xE9ciales !",
        body: "Bonjour {customerName},\n\n{emailContent}\n\nProfitez-en vite sur KMER ZONE !\n\nCordialement,\nL'\xE9quipe Marketing",
        variables: "{customerName}, {emailContent}"
      }
    ],
    isChatEnabled: true,
    isComparisonEnabled: true
  };
  var initialSiteContent = [
    { slug: "about", title: "\xC0 Propos de Nous", content: "<h2>Notre Mission</h2><p>KMER ZONE a pour mission de connecter les commer\xE7ants talentueux du Cameroun avec les acheteurs de tout le pays et au-del\xE0. Nous croyons au potentiel de l'artisanat local et des produits camerounais. Notre plateforme offre les outils et la visibilit\xE9 n\xE9cessaires pour permettre aux petites et grandes entreprises de prosp\xE9rer dans l'\xE9conomie num\xE9rique.</p>" },
    { slug: "contact", title: "Contactez-Nous", content: "<h2>Contact</h2><p>Pour toute question, demande de support ou partenariat, veuillez nous contacter :</p><ul><li><strong>Email :</strong> support@kmerzone.cm</li><li><strong>T\xE9l\xE9phone :</strong> +237 690 00 00 00</li><li><strong>Adresse :</strong> 123 Rue de l'Innovation, Akwa, Douala, Cameroun</li></ul>" },
    { slug: "faq", title: "Foire Aux Questions", content: `<h2>FAQ</h2><h3>Comment puis-je vendre sur KMER ZONE ?</h3><p>C'est simple ! Cliquez sur le lien "Devenir vendeur" en haut de la page et suivez les instructions pour cr\xE9er votre boutique. Vous devrez fournir quelques informations sur votre entreprise et vos produits.</p><h3>Quels sont les moyens de paiement accept\xE9s ?</h3><p>Nous acceptons les paiements s\xE9curis\xE9s via Orange Money et MTN Mobile Money.</p><h3>Comment fonctionne la livraison ?</h3><p>Nous avons un r\xE9seau de livreurs partenaires qui r\xE9cup\xE8rent les colis chez les vendeurs et les livrent directement \xE0 votre porte. Vous pouvez suivre l'avancement de votre livraison en temps r\xE9el depuis votre compte.</p>` },
    { slug: "sitemap", title: "Plan du site", content: "Liste de toutes les pages du site." },
    { slug: "careers", title: "Carri\xE8res", content: "<h2>Rejoignez Notre \xC9quipe</h2><p>Nous sommes une entreprise en pleine croissance et nous sommes toujours \xE0 la recherche de talents passionn\xE9s pour rejoindre notre aventure. Si vous \xEAtes motiv\xE9 par l'innovation et le d\xE9veloppement de l'\xE9cosyst\xE8me num\xE9rique au Cameroun, nous voulons vous conna\xEEtre.</p><p>Consultez nos offres d'emploi sur notre page LinkedIn ou envoyez-nous votre candidature spontan\xE9e \xE0 <strong>careers@kmerzone.cm</strong>.</p>" },
    { slug: "terms-of-service", title: "Conditions d'Utilisation", content: "<h2>Conditions G\xE9n\xE9rales d'Utilisation</h2><p>En utilisant notre site, vous acceptez nos conditions d'utilisation. Celles-ci r\xE9gissent votre acc\xE8s et votre utilisation de la plateforme KMER ZONE, incluant les politiques d'achat, de vente, de retour et de contenu. Nous vous invitons \xE0 les lire attentivement.</p>" },
    { slug: "privacy-policy", title: "Politique de Confidentialit\xE9", content: "<h2>Politique de Confidentialit\xE9</h2><p>Nous nous engageons \xE0 prot\xE9ger votre vie priv\xE9e. Cette politique explique comment nous collectons, utilisons et prot\xE9geons vos donn\xE9es personnelles lorsque vous utilisez nos services. Votre confiance est notre priorit\xE9.</p>" },
    { slug: "training-center", title: "Centre de Formation Vendeur", content: "<h2>Centre de Formation</h2><p>Maximisez votre succ\xE8s sur KMER ZONE ! Notre centre de formation vous offre des ressources exclusives pour vous aider \xE0 :</p><ul><li>Optimiser votre boutique pour attirer plus de clients.</li><li>Prendre des photos de produits professionnelles avec votre smartphone.</li><li>G\xE9rer vos commandes et vos stocks efficacement.</li><li>Comprendre nos outils d'analyse pour booster vos ventes.</li></ul>" },
    { slug: "logistics", title: "Logistique & Livraison", content: "<h2>Logistique et Livraison</h2><p>Notre service de logistique int\xE9gr\xE9 est con\xE7u pour vous simplifier la vie. Nous nous occupons de la collecte de vos colis et de leur livraison s\xE9curis\xE9e \xE0 vos clients.</p><p>D\xE9couvrez nos partenaires, nos tarifs comp\xE9titifs pour les livraisons locales et nationales, et comment suivre vos colis en temps r\xE9el depuis votre tableau de bord vendeur.</p>" }
  ];
  var initialAdvertisements = [
    { id: "ad-1", imageUrl: "https://images.unsplash.com/photo-1511556532299-8f662fc26c06?q=80&w=2070&auto=format&fit=crop", linkUrl: "#", location: "homepage-banner", isActive: true }
  ];
  var initialPaymentMethods = [
    { id: "pm1", name: "Orange Money", imageUrl: "/om.png" },
    { id: "pm2", name: "MTN Mobile Money", imageUrl: "/momo.png" }
  ];
  var initialSiteActivityLogs = [];

  // hooks/useSiteData.ts
  var useSiteData = () => {
    const [allProducts, setAllProducts] = usePersistentState("allProducts", initialProducts);
    const [allCategories, setAllCategories] = usePersistentState("allCategories", initialCategories);
    const [allStores, setAllStores] = usePersistentState("allStores", initialStores);
    const [allOrders, setAllOrders] = usePersistentState("allOrders", [sampleDeliveredOrder, sampleDeliveredOrder2, sampleDeliveredOrder3, sampleNewMissionOrder]);
    const [flashSales, setFlashSales] = usePersistentState("allFlashSales", initialFlashSales);
    const [allPickupPoints, setAllPickupPoints] = usePersistentState("allPickupPoints", initialPickupPoints);
    const [siteSettings, setSiteSettings] = usePersistentState("siteSettings", initialSiteSettings);
    const [siteContent, setSiteContent] = usePersistentState("siteContent", initialSiteContent);
    const [allAdvertisements, setAllAdvertisements] = usePersistentState("allAdvertisements", initialAdvertisements);
    const [allPaymentMethods, setAllPaymentMethods] = usePersistentState("allPaymentMethods", initialPaymentMethods);
    const [allShippingPartners, setAllShippingPartners] = usePersistentState("allShippingPartners", initialShippingPartners);
    const [siteActivityLogs, setSiteActivityLogs] = usePersistentState("siteActivityLogs", initialSiteActivityLogs);
    const [payouts, setPayouts] = usePersistentState("payouts", []);
    const [allPromoCodes, setAllPromoCodes] = usePersistentState("allPromoCodes", []);
    const [allNotifications, setAllNotifications] = usePersistentState("allNotifications", []);
    const [allTickets, setAllTickets] = usePersistentState("allTickets", []);
    const [allAnnouncements, setAllAnnouncements] = usePersistentState("allAnnouncements", []);
    const [dismissedAnnouncements, setDismissedAnnouncements] = usePersistentState("dismissedAnnouncements", []);
    const [recentlyViewedIds, setRecentlyViewedIds] = usePersistentState("recentlyViewed", []);
    const [allZones, setAllZones] = usePersistentState("allZones", initialZones);
    const logActivity = (0, import_react18.useCallback)((user, action, details) => {
      const newLog = {
        id: `log-${Date.now()}`,
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        user: { id: user.id, name: user.name, role: user.role },
        action,
        details
      };
      setSiteActivityLogs((prev) => [newLog, ...prev].slice(0, 100));
    }, [setSiteActivityLogs]);
    const handleAdminUpdateUser = (0, import_react18.useCallback)((userId, updates, allUsers) => {
      let oldUser;
      const userToUpdate = allUsers.find((u) => u.id === userId);
      if (userToUpdate) {
        oldUser = { ...userToUpdate };
      }
      const updatedUsers = allUsers.map((u) => u.id === userId ? { ...u, ...updates } : u);
      const newRole = updates.role;
      const newDepotId = updates.depotId;
      if (oldUser) {
        if (newRole === "depot_manager" && newDepotId) {
          setAllPickupPoints((prevPoints) => prevPoints.map((p) => {
            if (p.managerId === userId && p.id !== newDepotId) {
              return { ...p, managerId: void 0 };
            }
            if (p.id === newDepotId) {
              return { ...p, managerId: userId };
            }
            return p;
          }));
        } else if (oldUser.role === "depot_manager" && (newRole !== "depot_manager" || !newDepotId)) {
          setAllPickupPoints((prevPoints) => prevPoints.map(
            (p) => p.id === oldUser.depotId ? { ...p, managerId: void 0 } : p
          ));
        }
      }
      return updatedUsers;
    }, [setAllPickupPoints]);
    const handleDismissAnnouncement = (0, import_react18.useCallback)((id) => {
      setDismissedAnnouncements((prev) => [...prev, id]);
    }, [setDismissedAnnouncements]);
    const handleSetPromotion = (0, import_react18.useCallback)((productId, promoPrice, startDate, endDate) => {
      setAllProducts((prev) => prev.map((p) => p.id === productId ? { ...p, promotionPrice: promoPrice, promotionStartDate: startDate, promotionEndDate: endDate } : p));
    }, [setAllProducts]);
    const handleConfirmOrder = (0, import_react18.useCallback)((orderData, user) => {
      const newOrder = {
        ...orderData,
        id: `ORDER-${Date.now()}`,
        orderDate: (/* @__PURE__ */ new Date()).toISOString(),
        status: "confirmed",
        trackingNumber: `KZ${Date.now()}`,
        trackingHistory: [{
          status: "confirmed",
          date: (/* @__PURE__ */ new Date()).toISOString(),
          location: "Syst\xE8me",
          details: "Commande confirm\xE9e et transmise au vendeur."
        }]
      };
      setAllOrders((prev) => [...prev, newOrder]);
      logActivity(user, "ORDER_PLACED", `Nouvelle commande: ${newOrder.id} pour un total de ${newOrder.total} FCFA.`);
      return newOrder;
    }, [setAllOrders, logActivity]);
    const handleMarkNotificationAsRead = (0, import_react18.useCallback)((notificationId) => {
      setAllNotifications((prev) => prev.map((n) => n.id === notificationId ? { ...n, isRead: true } : n));
    }, [setAllNotifications]);
    const handlePayoutSeller = (0, import_react18.useCallback)((storeId, amount, user) => {
      const storeName = allStores.find((s) => s.id === storeId)?.name || "Inconnu";
      const newPayout = {
        storeId,
        amount,
        date: (/* @__PURE__ */ new Date()).toISOString()
      };
      setPayouts((prev) => [...prev, newPayout]);
      logActivity(user, "PAYOUT_PROCESSED", `Paiement de ${amount.toLocaleString("fr-CM")} FCFA effectu\xE9 pour la boutique ${storeName} (${storeId}).`);
    }, [setPayouts, logActivity, allStores]);
    const handleAddAdvertisement = (0, import_react18.useCallback)((data, user) => {
      const newAd = { ...data, id: `ad-${Date.now()}` };
      setAllAdvertisements((prev) => [...prev, newAd]);
      logActivity(user, "AD_CREATED", `Publicit\xE9 cr\xE9\xE9e: ${newAd.linkUrl}`);
    }, [setAllAdvertisements, logActivity]);
    const handleUpdateAdvertisement = (0, import_react18.useCallback)((id, data, user) => {
      setAllAdvertisements((prev) => prev.map((ad) => ad.id === id ? { ...ad, ...data } : ad));
      logActivity(user, "AD_UPDATED", `Publicit\xE9 modifi\xE9e: ${id}`);
    }, [setAllAdvertisements, logActivity]);
    const handleDeleteAdvertisement = (0, import_react18.useCallback)((id, user) => {
      setAllAdvertisements((prev) => prev.filter((ad) => ad.id !== id));
      logActivity(user, "AD_DELETED", `Publicit\xE9 supprim\xE9e: ${id}`);
    }, [setAllAdvertisements, logActivity]);
    const handleAssignAgentToOrder = (0, import_react18.useCallback)((orderId, agentId, user, allUsers) => {
      setAllOrders((prevOrders) => prevOrders.map((o) => {
        if (o.id === orderId) {
          const agentName = allUsers.find((u) => u.id === agentId)?.name || "Inconnu";
          const newTrackingHistory = {
            status: "out-for-delivery",
            date: (/* @__PURE__ */ new Date()).toISOString(),
            location: `D\xE9p\xF4t (Agent: ${user.name})`,
            details: `Colis assign\xE9 au livreur ${agentName} (ID: ${agentId})`
          };
          return {
            ...o,
            status: "out-for-delivery",
            agentId,
            trackingHistory: [...o.trackingHistory || [], newTrackingHistory],
            departureProcessedByAgentId: user.id,
            processedForDepartureAt: (/* @__PURE__ */ new Date()).toISOString(),
            storageLocationId: void 0
            // Libère l'emplacement de stockage (check-out)
          };
        }
        return o;
      }));
      logActivity(user, "ORDER_ASSIGNED_TO_AGENT", `Commande ${orderId} assign\xE9e au livreur ${agentId}.`);
    }, [setAllOrders, logActivity]);
    const handleUpdateDeliveryStatus = (0, import_react18.useCallback)((orderId, status, user, details) => {
      setAllOrders((prev) => prev.map((o) => {
        if (o.id === orderId) {
          const newTrackingEvent = {
            status,
            date: (/* @__PURE__ */ new Date()).toISOString(),
            location: user.name,
            details: status === "delivered" ? `Livr\xE9 \xE0 ${details?.signature}.` : `\xC9chec de livraison : ${details?.failureReason?.reason} - ${details?.failureReason?.details}.`
          };
          const updatedOrder = {
            ...o,
            status,
            trackingHistory: [...o.trackingHistory || [], newTrackingEvent]
          };
          if (status === "delivered" && details?.signature) {
            updatedOrder.signatureUrl = details.signature;
            updatedOrder.proofOfDeliveryUrl = "Signature captured";
          }
          if (status === "delivery-failed" && details?.failureReason) {
            updatedOrder.deliveryFailureReason = { ...details.failureReason, date: (/* @__PURE__ */ new Date()).toISOString() };
          }
          return updatedOrder;
        }
        return o;
      }));
      logActivity(user, "DELIVERY_STATUS_UPDATE", `Statut de la commande ${orderId} chang\xE9 \xE0 ${status}.`);
    }, [setAllOrders, logActivity]);
    const handleSendBulkEmail = (0, import_react18.useCallback)((recipientIds, subject, body, currentUser) => {
      logActivity(currentUser, "BULK_EMAIL_SENT", `E-mail envoy\xE9 \xE0 ${recipientIds.length} utilisateur(s) avec le sujet : "${subject}".`);
    }, [logActivity]);
    const handleApproveStore = (0, import_react18.useCallback)((storeToApprove, user) => {
      setAllStores((prev) => prev.map((s) => s.id === storeToApprove.id ? { ...s, status: "active" } : s));
      logActivity(user, "STORE_APPROVED", `Boutique approuv\xE9e : ${storeToApprove.name} (ID: ${storeToApprove.id})`);
    }, [setAllStores, logActivity]);
    const handleRejectStore = (0, import_react18.useCallback)((storeToReject, user) => {
      setAllStores((prev) => prev.filter((s) => s.id !== storeToReject.id));
      logActivity(user, "STORE_REJECTED", `Boutique rejet\xE9e et supprim\xE9e : ${storeToReject.name} (ID: ${storeToReject.id})`);
    }, [setAllStores, logActivity]);
    const handleToggleStoreStatus = (0, import_react18.useCallback)((storeId, currentStatus, user) => {
      const newStatus = currentStatus === "active" ? "suspended" : "active";
      let storeName = "";
      setAllStores((prev) => prev.map((s) => {
        if (s.id === storeId) {
          storeName = s.name;
          return { ...s, status: newStatus };
        }
        return s;
      }));
      logActivity(user, "STORE_STATUS_TOGGLED", `Statut de la boutique ${storeName} (ID: ${storeId}) chang\xE9 \xE0 ${newStatus}.`);
    }, [setAllStores, logActivity]);
    const handleWarnStore = (0, import_react18.useCallback)((storeId, reason, user) => {
      const newWarning = {
        id: `warn-${Date.now()}`,
        date: (/* @__PURE__ */ new Date()).toISOString(),
        reason
      };
      let storeName = "";
      setAllStores((prev) => prev.map((s) => {
        if (s.id === storeId) {
          storeName = s.name;
          return { ...s, warnings: [...s.warnings || [], newWarning] };
        }
        return s;
      }));
      logActivity(user, "STORE_WARNED", `Avertissement envoy\xE9 \xE0 la boutique ${storeName} (ID: ${storeId}). Motif : ${reason}`);
    }, [setAllStores, logActivity]);
    const handleAdminAddCategory = (0, import_react18.useCallback)((name, parentId, user) => {
      const newCategory = { id: `cat-${Date.now()}`, name, parentId, imageUrl: "https://via.placeholder.com/300" };
      setAllCategories((prev) => [...prev, newCategory]);
      logActivity(user, "CATALOG_UPDATE", `Cat\xE9gorie cr\xE9\xE9e : "${name}"`);
    }, [setAllCategories, logActivity]);
    const handleAdminDeleteCategory = (0, import_react18.useCallback)((categoryId, user) => {
      setAllCategories((prev) => prev.filter((c) => c.id !== categoryId && c.parentId !== categoryId));
      logActivity(user, "CATALOG_UPDATE", `Cat\xE9gorie supprim\xE9e : ID ${categoryId}`);
    }, [setAllCategories, logActivity]);
    const handleAdminUpdateCategory = (0, import_react18.useCallback)((categoryId, updates, user) => {
      setAllCategories((prev) => prev.map((c) => c.id === categoryId ? { ...c, ...updates } : c));
      logActivity(user, "CATALOG_UPDATE", `Cat\xE9gorie modifi\xE9e : "${updates.name}" (ID: ${categoryId})`);
    }, [setAllCategories, logActivity]);
    const handleUpdateDocumentStatus = (0, import_react18.useCallback)((storeId, documentName, status, rejectionReason, user) => {
      setAllStores((prev) => prev.map((s) => {
        if (s.id === storeId) {
          return { ...s, documents: s.documents.map((d) => d.name === documentName ? { ...d, status, rejectionReason } : d) };
        }
        return s;
      }));
      logActivity(user, "STORE_DOCUMENT_MODERATED", `Document "${documentName}" pour la boutique ${storeId} mod\xE9r\xE9 \xE0 ${status}.`);
    }, [setAllStores, logActivity]);
    const handleResolveDispute = (0, import_react18.useCallback)((orderId, resolution, user) => {
      const newStatus = resolution === "refunded" ? "refunded" : "delivered";
      setAllOrders((prev) => prev.map((o) => o.id === orderId ? { ...o, status: newStatus } : o));
      logActivity(user, "ORDER_DISPUTE_RESOLVED", `Litige pour la commande ${orderId} r\xE9solu. R\xE9solution : ${resolution}.`);
    }, [setAllOrders, logActivity]);
    const handleSaveFlashSale = (0, import_react18.useCallback)((saleData, user) => {
      const newSale = { ...saleData, id: `fs-${Date.now()}`, products: [] };
      setFlashSales((prev) => [...prev, newSale]);
      logActivity(user, "MARKETING_UPDATE", `Vente flash cr\xE9\xE9e : "${saleData.name}"`);
    }, [setFlashSales, logActivity]);
    const handleUpdateFlashSaleSubmissionStatus = (0, import_react18.useCallback)((flashSaleId, productId, status, user) => {
      setFlashSales((prev) => prev.map((fs) => fs.id === flashSaleId ? { ...fs, products: fs.products.map((p) => p.productId === productId ? { ...p, status } : p) } : fs));
      logActivity(user, "MARKETING_UPDATE", `Statut du produit ${productId} chang\xE9 \xE0 ${status} pour la vente flash ${flashSaleId}.`);
    }, [setFlashSales, logActivity]);
    const handleBatchUpdateFlashSaleStatus = (0, import_react18.useCallback)((flashSaleId, productIds, status, user) => {
      setFlashSales((prev) => prev.map((fs) => {
        if (fs.id === flashSaleId) {
          const updatedProducts = fs.products.map((p) => {
            if (productIds.includes(p.productId)) {
              return { ...p, status };
            }
            return p;
          });
          return { ...fs, products: updatedProducts };
        }
        return fs;
      }));
      logActivity(user, "MARKETING_UPDATE", `Statut de ${productIds.length} produit(s) chang\xE9 \xE0 ${status} pour la vente flash ${flashSaleId}.`);
    }, [setFlashSales, logActivity]);
    const handleCreateOrUpdateAnnouncement = (0, import_react18.useCallback)((data, user) => {
      if ("id" in data && data.id) {
        setAllAnnouncements((prev) => prev.map((a) => a.id === data.id ? { ...a, ...data } : a));
        logActivity(user, "ANNOUNCEMENT_UPDATED", `Annonce modifi\xE9e : "${data.title}"`);
      } else {
        const newAnnouncement = { ...data, id: `ann-${Date.now()}` };
        setAllAnnouncements((prev) => [...prev, newAnnouncement]);
        logActivity(user, "ANNOUNCEMENT_CREATED", `Annonce cr\xE9\xE9e : "${data.title}"`);
      }
    }, [setAllAnnouncements, logActivity]);
    const handleDeleteAnnouncement = (0, import_react18.useCallback)((id, user) => {
      setAllAnnouncements((prev) => prev.filter((a) => a.id !== id));
      logActivity(user, "ANNOUNCEMENT_DELETED", `Annonce supprim\xE9e : ID ${id}`);
    }, [setAllAnnouncements, logActivity]);
    const handleAddPickupPoint = (0, import_react18.useCallback)((point, user) => {
      const newPoint = { ...point, id: `pp-${Date.now()}` };
      setAllPickupPoints((prev) => [...prev, newPoint]);
      logActivity(user, "LOGISTICS_UPDATE", `Point de retrait ajout\xE9 : "${point.name}"`);
    }, [setAllPickupPoints, logActivity]);
    const handleUpdatePickupPoint = (0, import_react18.useCallback)((point, user) => {
      setAllPickupPoints((prev) => prev.map((p) => p.id === point.id ? point : p));
      logActivity(user, "LOGISTICS_UPDATE", `Point de retrait mis \xE0 jour : "${point.name}"`);
    }, [setAllPickupPoints, logActivity]);
    const handleDeletePickupPoint = (0, import_react18.useCallback)((pointId, user) => {
      setAllPickupPoints((prev) => prev.filter((p) => p.id !== pointId));
      logActivity(user, "LOGISTICS_UPDATE", `Point de retrait supprim\xE9 : ID ${pointId}`);
    }, [setAllPickupPoints, logActivity]);
    const handleAdminReplyToTicket = (0, import_react18.useCallback)((ticketId, message, user) => {
      const newMessage = { authorId: user.id, authorName: user.name, message, date: (/* @__PURE__ */ new Date()).toISOString() };
      setAllTickets((prev) => prev.map((t) => t.id === ticketId ? { ...t, messages: [...t.messages, newMessage], updatedAt: (/* @__PURE__ */ new Date()).toISOString() } : t));
      logActivity(user, "SUPPORT_TICKET_REPLY", `R\xE9ponse au ticket ${ticketId}.`);
    }, [setAllTickets, logActivity]);
    const handleAdminUpdateTicketStatus = (0, import_react18.useCallback)((ticketId, status, user) => {
      setAllTickets((prev) => prev.map((t) => t.id === ticketId ? { ...t, status, updatedAt: (/* @__PURE__ */ new Date()).toISOString() } : t));
      logActivity(user, "SUPPORT_TICKET_STATUS_CHANGE", `Statut du ticket ${ticketId} chang\xE9 \xE0 ${status}.`);
    }, [setAllTickets, logActivity]);
    const handleReviewModeration = (0, import_react18.useCallback)((productId, reviewIdentifier, newStatus, user) => {
      setAllProducts((prev) => prev.map((p) => {
        if (p.id === productId) {
          return { ...p, reviews: p.reviews.map((r) => r.author === reviewIdentifier.author && r.date === reviewIdentifier.date ? { ...r, status: newStatus } : r) };
        }
        return p;
      }));
      logActivity(user, "REVIEW_MODERATED", `Avis sur le produit ${productId} mod\xE9r\xE9 \xE0 ${newStatus}.`);
    }, [setAllProducts, logActivity]);
    const handleCreateUserByAdmin = (0, import_react18.useCallback)((data, adminUser) => {
      const newUser = {
        id: `user-${Date.now()}`,
        name: data.name,
        email: data.email,
        role: data.role,
        password: "password",
        // Default password
        loyalty: { status: "standard", orderCount: 0, totalSpent: 0, premiumStatusMethod: null }
      };
      logActivity(adminUser, "USER_CREATED", `Utilisateur cr\xE9\xE9 : ${data.name} (${data.email}) avec le r\xF4le ${data.role}.`);
      alert("La cr\xE9ation d'utilisateur est simul\xE9e et loggu\xE9e. La gestion des utilisateurs devrait \xEAtre centralis\xE9e dans AuthContext pour un \xE9tat persistant.");
    }, [logActivity]);
    const handleUpdateOrderStatus = (0, import_react18.useCallback)((orderId, status, user) => {
      setAllOrders((prev) => prev.map((o) => o.id === orderId ? { ...o, status } : o));
      logActivity(user, "ORDER_STATUS_UPDATED", `Statut de la commande ${orderId} chang\xE9 \xE0 ${status}.`);
    }, [setAllOrders, logActivity]);
    const handleDepotCheckIn = (0, import_react18.useCallback)((orderId, storageLocationId, user) => {
      setAllOrders((prev) => prev.map((o) => {
        if (o.id === orderId) {
          const newTrackingEvent = {
            status: "at-depot",
            date: (/* @__PURE__ */ new Date()).toISOString(),
            location: user.name,
            details: `Colis enregistr\xE9 au d\xE9p\xF4t \xE0 l'emplacement: ${storageLocationId}.`
          };
          return {
            ...o,
            status: "at-depot",
            storageLocationId,
            checkedInAt: (/* @__PURE__ */ new Date()).toISOString(),
            checkedInBy: user.id,
            trackingHistory: [...o.trackingHistory || [], newTrackingEvent]
          };
        }
        return o;
      }));
      logActivity(user, "DEPOT_CHECK_IN", `Colis ${orderId} enregistr\xE9 \xE0 l'emplacement ${storageLocationId}.`);
    }, [setAllOrders, logActivity]);
    const handleUpdateSchedule = (0, import_react18.useCallback)((depotId, newSchedule, user) => {
      setAllPickupPoints((prevPoints) => prevPoints.map(
        (point) => point.id === depotId ? { ...point, schedule: newSchedule } : point
      ));
      logActivity(user, "SCHEDULE_UPDATED", `Planning mis \xE0 jour pour le d\xE9p\xF4t ${depotId}.`);
    }, [setAllPickupPoints, logActivity]);
    const handleSellerUpdateOrderStatus = (0, import_react18.useCallback)((orderId, status, user) => {
      setAllOrders((prev) => prev.map((o) => {
        if (o.id === orderId) {
          const newTrackingEvent = {
            status,
            date: (/* @__PURE__ */ new Date()).toISOString(),
            location: user.shopName || "Vendeur",
            details: "Statut mis \xE0 jour par le vendeur."
          };
          return { ...o, status, trackingHistory: [...o.trackingHistory || [], newTrackingEvent] };
        }
        return o;
      }));
      logActivity(user, "SELLER_ORDER_UPDATE", `Le vendeur a mis \xE0 jour le statut de la commande ${orderId} \xE0 ${status}.`);
    }, [setAllOrders, logActivity]);
    const handleSellerCancelOrder = (0, import_react18.useCallback)((orderId, user) => {
      let orderToCancel;
      setAllOrders((prev) => {
        const updatedOrders = [...prev];
        const orderIndex = updatedOrders.findIndex((o) => o.id === orderId);
        if (orderIndex === -1) return prev;
        orderToCancel = updatedOrders[orderIndex];
        if (orderToCancel.status === "confirmed") {
          const newTrackingEvent = {
            status: "cancelled",
            date: (/* @__PURE__ */ new Date()).toISOString(),
            location: user.shopName || "Vendeur",
            details: "Commande annul\xE9e par le vendeur."
          };
          updatedOrders[orderIndex] = {
            ...orderToCancel,
            status: "cancelled",
            trackingHistory: [...orderToCancel.trackingHistory || [], newTrackingEvent]
          };
          logActivity(user, "SELLER_ORDER_CANCEL", `Le vendeur a annul\xE9 la commande ${orderId}.`);
          return updatedOrders;
        } else {
          alert("Cette commande ne peut pas \xEAtre annul\xE9e \xE0 ce stade.");
          return prev;
        }
      });
    }, [setAllOrders, logActivity]);
    const handleCreateOrUpdateCollection = (0, import_react18.useCallback)((storeId, collection, user) => {
      setAllStores((prev) => prev.map((s) => {
        if (s.id === storeId) {
          const collections = s.collections || [];
          const existingIndex = collections.findIndex((c) => c.id === collection.id);
          if (existingIndex > -1) {
            collections[existingIndex] = collection;
          } else {
            collections.push({ ...collection, id: `coll-${Date.now()}` });
          }
          return { ...s, collections };
        }
        return s;
      }));
      logActivity(user, "STORE_COLLECTION_UPDATE", `Collection "${collection.name}" mise \xE0 jour pour la boutique ${storeId}.`);
    }, [setAllStores, logActivity]);
    const handleDeleteCollection = (0, import_react18.useCallback)((storeId, collectionId, user) => {
      setAllStores((prev) => prev.map((s) => {
        if (s.id === storeId) {
          return { ...s, collections: (s.collections || []).filter((c) => c.id !== collectionId) };
        }
        return s;
      }));
      logActivity(user, "STORE_COLLECTION_DELETE", `Collection ${collectionId} supprim\xE9e pour la boutique ${storeId}.`);
    }, [setAllStores, logActivity]);
    const handleUpdateStoreProfile = (0, import_react18.useCallback)((storeId, updatedData, user) => {
      setAllStores((prev) => prev.map((s) => s.id === storeId ? { ...s, ...updatedData } : s));
      logActivity(user, "STORE_PROFILE_UPDATE", `Profil de la boutique ${storeId} mis \xE0 jour.`);
    }, [setAllStores, logActivity]);
    const createStoreAndNotifyAdmin = (0, import_react18.useCallback)((storeData, user, allUsers) => {
      if (!user) {
        console.error("A valid user must be provided to create a store.");
        return null;
      }
      const requiredDocs = Object.entries(siteSettings.requiredSellerDocuments).filter(([, isRequired]) => isRequired).map(([name]) => ({ name, status: "requested" }));
      const newStore = {
        ...storeData,
        id: `store-${Date.now()}`,
        sellerId: user.id,
        warnings: [],
        status: "pending",
        documents: requiredDocs,
        premiumStatus: "standard",
        subscriptionStatus: "inactive"
      };
      setAllStores((prev) => [...prev, newStore]);
      const adminUsers = allUsers.filter((u) => u.role === "superadmin");
      const newNotifications = adminUsers.map((admin) => ({
        id: `notif-${Date.now()}-${admin.id}`,
        userId: admin.id,
        message: `Nouvelle boutique en attente d'approbation : "${newStore.name}".`,
        link: {
          page: "superadmin-dashboard"
        },
        isRead: false,
        timestamp: (/* @__PURE__ */ new Date()).toISOString()
      }));
      setAllNotifications((prev) => [...prev, ...newNotifications]);
      logActivity(user, "STORE_CREATED", `Boutique "${newStore.name}" cr\xE9\xE9e et en attente d'approbation.`);
      return newStore;
    }, [setAllStores, setAllNotifications, logActivity, siteSettings.requiredSellerDocuments]);
    const handleAddProductToStory = (0, import_react18.useCallback)((productId, user) => {
      if (user.role !== "seller" || !user.shopName) {
        alert("Seuls les vendeurs peuvent ajouter des produits \xE0 leur story.");
        return;
      }
      const product = allProducts.find((p) => p.id === productId);
      if (!product || !product.imageUrls || product.imageUrls.length === 0) {
        alert("Le produit s\xE9lectionn\xE9 n'a pas d'image pour cr\xE9er une story.");
        return;
      }
      const newStory = {
        id: `story-${Date.now()}`,
        imageUrl: product.imageUrls[0],
        createdAt: (/* @__PURE__ */ new Date()).toISOString(),
        productId
      };
      setAllStores((prevStores) => prevStores.map((store) => {
        if (store.name === user.shopName) {
          const updatedStories = [newStory, ...store.stories || []].slice(0, 20);
          return { ...store, stories: updatedStories };
        }
        return store;
      }));
      logActivity(user, "STORY_CREATED", `Story created for product ${productId} in store ${user.shopName}.`);
      alert("Produit ajout\xE9 \xE0 votre story pour 24h !");
    }, [allProducts, setAllStores, logActivity]);
    const handleAddStory = (0, import_react18.useCallback)((imageUrl, user) => {
      if (user.role !== "seller" || !user.shopName) {
        alert("Seuls les vendeurs peuvent ajouter des stories.");
        return;
      }
      const newStory = {
        id: `story-${Date.now()}`,
        imageUrl,
        createdAt: (/* @__PURE__ */ new Date()).toISOString()
      };
      setAllStores((prevStores) => prevStores.map((store) => {
        if (store.name === user.shopName) {
          const updatedStories = [newStory, ...store.stories || []].slice(0, 20);
          return { ...store, stories: updatedStories };
        }
        return store;
      }));
      logActivity(user, "STORY_CREATED", `Story created for store ${user.shopName}.`);
      alert("Story ajout\xE9e pour 24h !");
    }, [setAllStores, logActivity]);
    const memoizedValue = (0, import_react18.useMemo)(() => ({
      allProducts,
      setAllProducts,
      allCategories,
      setAllCategories,
      allStores,
      setAllStores,
      allOrders,
      setAllOrders,
      flashSales,
      setFlashSales,
      allPickupPoints,
      setAllPickupPoints,
      siteSettings,
      setSiteSettings,
      siteContent,
      setSiteContent,
      allAdvertisements,
      setAllAdvertisements,
      allPaymentMethods,
      setAllPaymentMethods,
      allShippingPartners,
      setAllShippingPartners,
      siteActivityLogs,
      setSiteActivityLogs,
      payouts,
      setPayouts,
      allPromoCodes,
      setAllPromoCodes,
      allNotifications,
      setAllNotifications,
      allTickets,
      setAllTickets,
      allAnnouncements,
      setAllAnnouncements,
      dismissedAnnouncements,
      setDismissedAnnouncements,
      recentlyViewedIds,
      setRecentlyViewedIds,
      allZones,
      setAllZones,
      handleAdminUpdateUser,
      handleDismissAnnouncement,
      handleSetPromotion,
      handleConfirmOrder,
      handleMarkNotificationAsRead,
      handlePayoutSeller,
      handleAddAdvertisement,
      handleUpdateAdvertisement,
      handleDeleteAdvertisement,
      handleAssignAgentToOrder,
      handleSendBulkEmail,
      logActivity,
      handleApproveStore,
      handleRejectStore,
      handleToggleStoreStatus,
      handleWarnStore,
      handleAdminAddCategory,
      handleAdminDeleteCategory,
      handleSaveFlashSale,
      handleUpdateFlashSaleSubmissionStatus,
      handleBatchUpdateFlashSaleStatus,
      handleCreateOrUpdateAnnouncement,
      handleDeleteAnnouncement,
      handleAddPickupPoint,
      handleUpdatePickupPoint,
      handleDeletePickupPoint,
      handleAdminReplyToTicket,
      handleAdminUpdateTicketStatus,
      handleReviewModeration,
      handleCreateUserByAdmin,
      handleUpdateOrderStatus,
      handleAdminUpdateCategory,
      handleUpdateDocumentStatus,
      handleResolveDispute,
      handleDepotCheckIn,
      handleUpdateSchedule,
      // Seller actions
      handleSellerUpdateOrderStatus,
      handleSellerCancelOrder,
      handleCreateOrUpdateCollection,
      handleDeleteCollection,
      handleUpdateStoreProfile,
      handleUpdateDeliveryStatus,
      createStoreAndNotifyAdmin,
      handleAddProductToStory,
      handleAddStory
    }), [
      allProducts,
      setAllProducts,
      allCategories,
      setAllCategories,
      allStores,
      setAllStores,
      allOrders,
      setAllOrders,
      flashSales,
      setFlashSales,
      allPickupPoints,
      setAllPickupPoints,
      siteSettings,
      setSiteSettings,
      siteContent,
      setSiteContent,
      allAdvertisements,
      setAllAdvertisements,
      allPaymentMethods,
      setAllPaymentMethods,
      allShippingPartners,
      setAllShippingPartners,
      siteActivityLogs,
      setSiteActivityLogs,
      payouts,
      setPayouts,
      allPromoCodes,
      setAllPromoCodes,
      allNotifications,
      setAllNotifications,
      allTickets,
      setAllTickets,
      allAnnouncements,
      setAllAnnouncements,
      dismissedAnnouncements,
      setDismissedAnnouncements,
      recentlyViewedIds,
      setRecentlyViewedIds,
      allZones,
      setAllZones,
      handleAdminUpdateUser,
      handleDismissAnnouncement,
      handleSetPromotion,
      handleConfirmOrder,
      handleMarkNotificationAsRead,
      handlePayoutSeller,
      handleAddAdvertisement,
      handleUpdateAdvertisement,
      handleDeleteAdvertisement,
      handleAssignAgentToOrder,
      handleSendBulkEmail,
      logActivity,
      handleApproveStore,
      handleRejectStore,
      handleToggleStoreStatus,
      handleWarnStore,
      handleAdminAddCategory,
      handleAdminDeleteCategory,
      handleSaveFlashSale,
      handleUpdateFlashSaleSubmissionStatus,
      handleBatchUpdateFlashSaleStatus,
      handleCreateOrUpdateAnnouncement,
      handleDeleteAnnouncement,
      handleAddPickupPoint,
      handleUpdatePickupPoint,
      handleDeletePickupPoint,
      handleAdminReplyToTicket,
      handleAdminUpdateTicketStatus,
      handleReviewModeration,
      handleCreateUserByAdmin,
      handleUpdateOrderStatus,
      handleAdminUpdateCategory,
      handleUpdateDocumentStatus,
      handleResolveDispute,
      handleDepotCheckIn,
      handleUpdateSchedule,
      handleSellerUpdateOrderStatus,
      handleSellerCancelOrder,
      handleCreateOrUpdateCollection,
      handleDeleteCollection,
      handleUpdateStoreProfile,
      handleUpdateDeliveryStatus,
      createStoreAndNotifyAdmin,
      handleAddProductToStory,
      handleAddStory
    ]);
    return memoizedValue;
  };

  // hooks/useAppNavigation.ts
  var import_react19 = __toESM(require_react());
  var useAppNavigation = (allCategories, allStores, allOrders, allSiteContent) => {
    const [page, setPage] = (0, import_react19.useState)("home");
    const [selectedProduct, setSelectedProduct] = (0, import_react19.useState)(null);
    const [selectedCategoryId, setSelectedCategoryId] = (0, import_react19.useState)(null);
    const [selectedStore, setSelectedStore] = (0, import_react19.useState)(null);
    const [selectedOrder, setSelectedOrder] = (0, import_react19.useState)(null);
    const [searchQuery, setSearchQuery] = (0, import_react19.useState)("");
    const [infoPageContent, setInfoPageContent] = (0, import_react19.useState)(null);
    const [viewingStoriesFor, setViewingStoriesFor] = (0, import_react19.useState)(null);
    const [accountPageTab, setAccountPageTab] = (0, import_react19.useState)("dashboard");
    const [sellerDashboardTab, setSellerDashboardTab] = (0, import_react19.useState)("overview");
    (0, import_react19.useEffect)(() => {
      window.scrollTo(0, 0);
    }, [page]);
    const navigateToHome = (0, import_react19.useCallback)(() => setPage("home"), []);
    const navigateToCart = (0, import_react19.useCallback)(() => setPage("cart"), []);
    const navigateToCheckout = (0, import_react19.useCallback)(() => setPage("checkout"), []);
    const navigateToStores = (0, import_react19.useCallback)(() => setPage("stores"), []);
    const navigateToStoresMap = (0, import_react19.useCallback)(() => setPage("stores-map"), []);
    const navigateToBecomeSeller = (0, import_react19.useCallback)(() => setPage("become-seller"), []);
    const navigateToSellerDashboard = (0, import_react19.useCallback)((tab = "overview") => {
      setSellerDashboardTab(tab);
      setPage("seller-dashboard");
    }, []);
    const navigateToSellerProfile = (0, import_react19.useCallback)(() => setPage("seller-profile"), []);
    const navigateToSuperAdminDashboard = (0, import_react19.useCallback)(() => setPage("superadmin-dashboard"), []);
    const navigateToOrderHistory = (0, import_react19.useCallback)(() => setPage("order-history"), []);
    const navigateToPromotions = (0, import_react19.useCallback)(() => setPage("promotions"), []);
    const navigateToFlashSales = (0, import_react19.useCallback)(() => setPage("flash-sales"), []);
    const navigateToWishlist = (0, import_react19.useCallback)(() => setPage("wishlist"), []);
    const navigateToDeliveryAgentDashboard = (0, import_react19.useCallback)(() => setPage("delivery-agent-dashboard"), []);
    const navigateToDepotAgentDashboard = (0, import_react19.useCallback)(() => setPage("depot-agent-dashboard"), []);
    const navigateToComparison = (0, import_react19.useCallback)(() => setPage("comparison"), []);
    const navigateToBecomePremium = (0, import_react19.useCallback)(() => setPage("become-premium"), []);
    const navigateToVisualSearch = (0, import_react19.useCallback)(() => setPage("visual-search"), []);
    const navigateToProduct = (0, import_react19.useCallback)((product) => {
      setSelectedProduct(product);
      setPage("product");
    }, []);
    const navigateToCategory = (0, import_react19.useCallback)((categoryId) => {
      const category = allCategories.find((c) => c.id === categoryId);
      if (category) {
        setSelectedCategoryId(categoryId);
        setPage("category");
      }
    }, [allCategories]);
    const navigateToVendorPage = (0, import_react19.useCallback)((vendorName) => {
      const store = allStores.find((s) => s.name === vendorName);
      if (store) {
        setSelectedStore(store);
        setPage("vendor-page");
      }
    }, [allStores]);
    const navigateToOrderDetail = (0, import_react19.useCallback)((order) => {
      setSelectedOrder(order);
      setPage("order-detail");
    }, []);
    const navigateToAccount = (0, import_react19.useCallback)((tab = "dashboard") => {
      setAccountPageTab(tab);
      setPage("account");
    }, []);
    const handleSearch = (0, import_react19.useCallback)((query) => {
      setSearchQuery(query);
      setPage("search-results");
    }, []);
    const navigateToInfoPage = (0, import_react19.useCallback)((slug) => {
      if (slug === "sell") {
        navigateToBecomeSeller();
        return;
      }
      const content = allSiteContent.find((c) => c.slug === slug);
      if (content) {
        setInfoPageContent(content);
      } else {
        console.warn(`Info page content for slug '${slug}' not found.`);
        setInfoPageContent({
          title: "Page en construction",
          content: "<h2>Contenu bient\xF4t disponible</h2><p>Cette page est actuellement en cours de construction. Revenez bient\xF4t !</p>"
        });
      }
      setPage("info");
    }, [allSiteContent, navigateToBecomeSeller]);
    const handleNavigateFromNotification = (0, import_react19.useCallback)((link) => {
      if (!link) return;
      const { page: targetPage, params } = link;
      switch (targetPage) {
        case "order-detail":
          const order = allOrders.find((o) => o.id === params?.orderId);
          if (order) navigateToOrderDetail(order);
          break;
        case "seller-dashboard":
          navigateToSellerDashboard(params?.tab || "overview");
          break;
        // Add other cases as needed
        default:
          setPage(targetPage);
      }
    }, [allOrders, navigateToOrderDetail, navigateToSellerDashboard]);
    const handleCloseStories = (0, import_react19.useCallback)(() => setViewingStoriesFor(null), []);
    return (0, import_react19.useMemo)(() => ({
      page,
      setPage,
      selectedProduct,
      selectedCategoryId,
      selectedStore,
      selectedOrder,
      setSelectedOrder,
      searchQuery,
      infoPageContent,
      viewingStoriesFor,
      setViewingStoriesFor,
      accountPageTab,
      sellerDashboardTab,
      navigateToHome,
      navigateToCart,
      navigateToCheckout,
      navigateToStores,
      navigateToStoresMap,
      navigateToBecomeSeller,
      navigateToSellerDashboard,
      navigateToSellerProfile,
      navigateToSuperAdminDashboard,
      navigateToOrderHistory,
      navigateToPromotions,
      navigateToFlashSales,
      navigateToWishlist,
      navigateToDeliveryAgentDashboard,
      navigateToDepotAgentDashboard,
      navigateToComparison,
      navigateToBecomePremium,
      navigateToProduct,
      navigateToCategory,
      navigateToVendorPage,
      navigateToOrderDetail,
      navigateToAccount,
      handleSearch,
      navigateToInfoPage,
      handleNavigateFromNotification,
      handleCloseStories,
      navigateToVisualSearch
    }), [
      page,
      selectedProduct,
      selectedCategoryId,
      selectedStore,
      selectedOrder,
      searchQuery,
      infoPageContent,
      viewingStoriesFor,
      accountPageTab,
      sellerDashboardTab,
      navigateToHome,
      navigateToCart,
      navigateToCheckout,
      navigateToStores,
      navigateToStoresMap,
      navigateToBecomeSeller,
      navigateToSellerDashboard,
      navigateToSellerProfile,
      navigateToSuperAdminDashboard,
      navigateToOrderHistory,
      navigateToPromotions,
      navigateToFlashSales,
      navigateToWishlist,
      navigateToDeliveryAgentDashboard,
      navigateToDepotAgentDashboard,
      navigateToComparison,
      navigateToBecomePremium,
      navigateToProduct,
      navigateToCategory,
      navigateToVendorPage,
      navigateToOrderDetail,
      navigateToAccount,
      handleSearch,
      navigateToInfoPage,
      handleNavigateFromNotification,
      handleCloseStories,
      navigateToVisualSearch,
      setSelectedOrder,
      setViewingStoriesFor
    ]);
  };

  // components/PageRouter.tsx
  var import_react64 = __toESM(require_react());

  // components/HomePage.tsx
  var import_react21 = __toESM(require_react());

  // components/CategoryCard.tsx
  var import_jsx_runtime21 = __toESM(require_jsx_runtime());
  var CategoryCard = ({ category, onClick }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
      "button",
      {
        onClick: () => onClick(category.id),
        className: "group relative block w-full aspect-square rounded-lg overflow-hidden shadow-md hover:shadow-xl transition-shadow duration-300",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            "img",
            {
              src: category.imageUrl,
              alt: category.name,
              className: "w-full h-full object-cover group-hover:scale-110 transition-transform duration-300"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "absolute inset-0 bg-black bg-opacity-40 group-hover:bg-opacity-50 transition-colors duration-300 flex items-center justify-center p-2", children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("h3", { className: "text-white text-lg font-bold text-center", style: { textShadow: "1px 1px 3px rgba(0,0,0,0.7)" }, children: category.name }) })
        ]
      }
    );
  };
  var CategoryCard_default = CategoryCard;

  // components/ProductCard.tsx
  var import_react20 = __toESM(require_react());
  var import_jsx_runtime22 = __toESM(require_jsx_runtime());
  var PLACEHOLDER_IMAGE_URL3 = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none'%3E%3Crect width='24' height='24' fill='%23E5E7EB'/%3E%3Cpath d='M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z' stroke='%239CA3AF' stroke-width='1.5'/%3E%3C/svg%3E";
  var getActiveFlashSalePrice = (productId, flashSales) => {
    const now = /* @__PURE__ */ new Date();
    for (const sale of flashSales) {
      const startDate = new Date(sale.startDate);
      const endDate = new Date(sale.endDate);
      if (now >= startDate && now <= endDate) {
        const productInSale = sale.products.find((p) => p.productId === productId && p.status === "approved");
        if (productInSale) return productInSale.flashPrice;
      }
    }
    return null;
  };
  var isPromotionActive = (product) => {
    if (!product.promotionPrice || product.promotionPrice >= product.price) {
      return false;
    }
    const now = /* @__PURE__ */ new Date();
    const startDate = product.promotionStartDate ? /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") : null;
    const endDate = product.promotionEndDate ? /* @__PURE__ */ new Date(product.promotionEndDate + "T23:59:59") : null;
    if (!startDate && !endDate) return false;
    if (startDate && endDate) return now >= startDate && now <= endDate;
    if (startDate) return now >= startDate;
    if (endDate) return now <= endDate;
    return false;
  };
  var ProductCard = ({ product, onProductClick, onVendorClick, location, flashSales, isComparisonEnabled, isFlashSaleUpcoming, stores }) => {
    const { addToCart } = useCart();
    const { isWishlisted, toggleWishlist } = useWishlist();
    const { isInComparison, toggleComparison } = useComparison();
    const { user, toggleFollowStore } = useAuth();
    const isMyProduct = user?.role === "seller" && user.shopName === product.vendor;
    const hasVariants = product.variants && product.variants.length > 0;
    const store = (0, import_react20.useMemo)(() => stores.find((s) => s.name === product.vendor), [stores, product.vendor]);
    const isFollowingStore = user?.followedStores?.includes(store?.id || "");
    const handleAddToCart = (e) => {
      e.stopPropagation();
      if (hasVariants) {
        onProductClick(product);
        return;
      }
      if (product.stock > 0) {
        addToCart(product, 1);
      }
    };
    const handleWishlistClick = (e) => {
      e.stopPropagation();
      toggleWishlist(product.id);
    };
    const handleCompareClick = (e) => {
      e.stopPropagation();
      toggleComparison(product.id);
    };
    const handleFollowClick = (e) => {
      e.stopPropagation();
      if (store && user) {
        toggleFollowStore(store.id);
      } else if (!user) {
        alert("Veuillez vous connecter pour suivre une boutique.");
      }
    };
    const handleVendorClick = (e) => {
      e.stopPropagation();
      onVendorClick(product.vendor);
    };
    const flashPrice = getActiveFlashSalePrice(product.id, flashSales);
    const promotionIsActive = isPromotionActive(product);
    const promotionIsDefined = !!(product.promotionPrice && product.promotionPrice < product.price && (product.promotionStartDate || product.promotionEndDate));
    const promotionIsUpcoming = promotionIsDefined && !promotionIsActive && product.promotionStartDate && /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") > /* @__PURE__ */ new Date();
    const finalPrice = flashPrice ?? (promotionIsActive ? product.promotionPrice : product.price);
    const originalPrice = flashPrice || promotionIsActive && product.promotionPrice ? product.price : null;
    const promotionPercentage = originalPrice ? Math.round((originalPrice - finalPrice) / originalPrice * 100) : 0;
    const totalStock = hasVariants ? (product.variantDetails || []).reduce((sum, v) => sum + v.stock, 0) : product.stock;
    const inComparison = isInComparison(product.id);
    const displayImage = product.imageUrls[0] || PLACEHOLDER_IMAGE_URL3;
    const averageRating = (0, import_react20.useMemo)(() => {
      const approvedReviews = product.reviews.filter((r) => r.status === "approved");
      if (approvedReviews.length === 0) return 0;
      return approvedReviews.reduce((acc, r) => acc + r.rating, 0) / approvedReviews.length;
    }, [product.reviews]);
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { onClick: () => onProductClick(product), className: "bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden group transition-all duration-300 hover:shadow-2xl hover:-translate-y-1 cursor-pointer flex flex-col", children: [
      /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "relative", children: [
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("img", { className: "h-56 w-full object-cover", src: displayImage, alt: product.name }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "absolute inset-0 bg-black bg-opacity-20 group-hover:bg-opacity-10 transition-all duration-300" }),
        isFlashSaleUpcoming && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "absolute top-2 left-2 bg-purple-600 text-white text-sm font-bold px-3 py-1.5 rounded-md shadow-lg flex items-center gap-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(CalendarDaysIcon, { className: "w-4 h-4" }),
          " VENTE BIENT\xD4T"
        ] }),
        flashPrice && !isFlashSaleUpcoming && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "absolute top-2 left-2 bg-blue-600 text-white text-sm font-bold px-3 py-1.5 rounded-md shadow-lg flex items-center gap-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(BoltIcon, { className: "w-4 h-4" }),
          " VENTE FLASH"
        ] }),
        !flashPrice && !isFlashSaleUpcoming && promotionIsUpcoming && /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "absolute top-2 left-2 bg-blue-500 text-white text-xs font-bold px-3 py-1.5 rounded-md shadow-lg", children: "PROMO \xC0 VENIR" }),
        !flashPrice && !isFlashSaleUpcoming && promotionIsActive && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "absolute top-2 left-2 bg-kmer-red text-white text-sm font-bold px-3 py-1.5 rounded-md shadow-lg", children: [
          "-",
          promotionPercentage,
          "%"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "absolute top-2 right-2 flex flex-col gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
            "button",
            {
              onClick: handleWishlistClick,
              className: "bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm rounded-full p-2 hover:bg-white dark:hover:bg-gray-700 transition-colors",
              "aria-label": "Ajouter \xE0 la liste de souhaits",
              children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(HeartIcon, { className: "h-5 w-5", filled: isWishlisted(product.id) })
            }
          ),
          user && user.role === "customer" && /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
            "button",
            {
              onClick: handleFollowClick,
              className: `bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm rounded-full p-2 hover:bg-white dark:hover:bg-gray-700 transition-colors ${isFollowingStore ? "text-kmer-green" : ""}`,
              "aria-label": "Suivre la boutique",
              children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(BookmarkSquareIcon, { className: "h-5 w-5" })
            }
          ),
          isComparisonEnabled && /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
            "button",
            {
              onClick: handleCompareClick,
              className: `bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm rounded-full p-2 hover:bg-white dark:hover:bg-gray-700 transition-colors ${inComparison ? "text-kmer-green" : ""}`,
              "aria-label": "Ajouter \xE0 la comparaison",
              children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(ScaleIcon, { className: "h-5 w-5" })
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "absolute bottom-2 right-2", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
          "button",
          {
            onClick: handleAddToCart,
            disabled: totalStock === 0 || isMyProduct,
            className: `flex items-center justify-center h-12 w-12 text-gray-900 rounded-full shadow-md transform transition-all duration-300 hover:scale-110 bg-kmer-yellow disabled:bg-gray-400 dark:disabled:bg-gray-600 disabled:cursor-not-allowed`,
            "aria-label": isMyProduct ? "Vous ne pouvez pas acheter votre propre produit" : totalStock === 0 ? "\xC9puis\xE9" : hasVariants ? "Choisir options" : "Ajouter au panier",
            title: isMyProduct ? "Vous ne pouvez pas acheter votre propre produit" : hasVariants ? "Choisir les options" : "Ajouter au panier",
            children: totalStock === 0 ? /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { className: "text-xs font-bold text-white", children: "\xC9PUIS\xC9" }) : /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(ShoppingCartIcon, { className: "h-5 w-5" })
          }
        ) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "p-4 flex-grow flex flex-col", children: [
        /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex justify-between items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("button", { onClick: handleVendorClick, className: "text-sm text-gray-500 dark:text-gray-400 mb-1 hover:text-kmer-green hover:underline text-left truncate flex items-center gap-1.5", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { children: product.vendor }) }),
          location && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("span", { className: "text-xs text-gray-500 dark:text-gray-400 flex items-center gap-1 flex-shrink-0", children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(MapPinIcon, { className: "w-3.5 h-3.5" }),
            location
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("h3", { className: "text-lg font-semibold text-gray-800 dark:text-white truncate flex-grow", children: product.name }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "flex items-center gap-2 mt-1 h-5", children: averageRating > 0 && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(import_jsx_runtime22.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "flex items-center", children: [...Array(5)].map((_, i) => /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(StarIcon, { className: "w-4 h-4 text-yellow-400", filled: i < Math.round(averageRating) }, i)) }),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("span", { className: "text-xs text-gray-500", children: [
            "(",
            product.reviews.filter((r) => r.status === "approved").length,
            ")"
          ] })
        ] }) }),
        promotionIsActive && product.promotionEndDate && !flashPrice && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex items-center gap-1 text-xs text-yellow-600 dark:text-yellow-400 mt-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(CalendarDaysIcon, { className: "w-4 h-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("span", { children: [
            "Se termine le ",
            new Date(product.promotionEndDate).toLocaleDateString("fr-FR")
          ] })
        ] }),
        promotionIsUpcoming && product.promotionStartDate && !flashPrice && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex items-center gap-1 text-xs text-blue-500 dark:text-blue-400 mt-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(CalendarDaysIcon, { className: "w-4 h-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("span", { children: [
            "Promo le ",
            new Date(product.promotionStartDate).toLocaleDateString("fr-FR")
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "mt-2", children: flashPrice || promotionIsActive ? /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex items-baseline gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("p", { className: `text-xl font-bold ${flashPrice ? "text-blue-600" : "text-kmer-red"}`, children: [
            finalPrice.toLocaleString("fr-CM"),
            " FCFA"
          ] }),
          originalPrice && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400 line-through", children: [
            originalPrice.toLocaleString("fr-CM"),
            " FCFA"
          ] })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("p", { className: "text-xl font-bold text-kmer-green", children: [
          finalPrice.toLocaleString("fr-CM"),
          " FCFA"
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "mt-2 text-sm font-bold", children: totalStock > 0 ? /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("p", { className: totalStock < 5 ? "text-orange-500 font-semibold" : "text-green-600", children: [
          totalStock,
          " en stock"
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("p", { className: "text-red-500 font-semibold", children: "Rupture de stock" }) })
      ] })
    ] });
  };
  var ProductCard_default = ProductCard;

  // components/StoreCard.tsx
  var import_jsx_runtime23 = __toESM(require_jsx_runtime());
  var StoreCard = ({ store, onVisitStore }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(
      "button",
      {
        onClick: () => onVisitStore(store.name),
        className: "group relative flex flex-col items-center text-center bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300",
        children: [
          store.status !== "active" && /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: `absolute top-2 left-2 text-xs font-bold px-2 py-0.5 rounded-full z-10 ${store.status === "pending" ? "bg-yellow-100 text-yellow-700 dark:bg-yellow-900/50 dark:text-yellow-300" : "bg-red-100 text-red-700 dark:bg-red-900/50 dark:text-red-300"}`, children: store.status === "pending" ? "En attente" : "Suspendu" }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "w-24 h-24 mb-4 rounded-full overflow-hidden bg-gray-100 dark:bg-gray-700 flex items-center justify-center border-2 border-gray-200 dark:border-gray-600", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("img", { src: store.logoUrl, alt: `${store.name} logo`, className: "w-full h-full object-contain" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h3", { className: "font-bold text-md text-gray-800 dark:text-white group-hover:text-kmer-green", children: store.name }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: store.category })
        ]
      }
    );
  };
  var StoreCard_default = StoreCard;

  // components/HomePage.tsx
  var import_jsx_runtime24 = __toESM(require_jsx_runtime());
  var StoryCarousel = ({ stores, onViewStories }) => {
    const { t } = useLanguage();
    const storesWithStories = stores.filter((store) => {
      if (!store.stories || store.stories.length === 0) return false;
      const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1e3);
      return store.stories.some((story) => new Date(story.createdAt) > twentyFourHoursAgo);
    });
    if (storesWithStories.length === 0) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "py-8", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "container mx-auto px-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h2", { className: "text-2xl font-bold mb-4 dark:text-white", children: t("home.storiesTitle") }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "flex space-x-4 overflow-x-auto pb-4", children: storesWithStories.map((store) => /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex-shrink-0 text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { onClick: () => onViewStories(store), className: "w-20 h-20 p-1 rounded-full border-2 border-kmer-red hover:border-kmer-yellow transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("img", { src: store.logoUrl, alt: store.name, className: "w-full h-full object-contain rounded-full bg-white" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { className: "text-xs mt-2 font-semibold truncate w-20", children: store.name })
      ] }, store.id)) })
    ] }) });
  };
  var AdCarousel = ({ advertisements }) => {
    const [currentIndex, setCurrentIndex] = (0, import_react21.useState)(0);
    const timeoutRef = (0, import_react21.useRef)(null);
    const resetTimeout = () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
    (0, import_react21.useEffect)(() => {
      resetTimeout();
      timeoutRef.current = setTimeout(
        () => setCurrentIndex((prevIndex) => prevIndex === advertisements.length - 1 ? 0 : prevIndex + 1),
        5e3
        // Change slide every 5 seconds
      );
      return () => {
        resetTimeout();
      };
    }, [currentIndex, advertisements.length]);
    const prevSlide = () => {
      const isFirstSlide = currentIndex === 0;
      const newIndex = isFirstSlide ? advertisements.length - 1 : currentIndex - 1;
      setCurrentIndex(newIndex);
    };
    const nextSlide = () => {
      const isLastSlide = currentIndex === advertisements.length - 1;
      const newIndex = isLastSlide ? 0 : currentIndex + 1;
      setCurrentIndex(newIndex);
    };
    const goToSlide = (slideIndex) => {
      setCurrentIndex(slideIndex);
    };
    if (advertisements.length === 0) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "relative w-full h-48 sm:h-64 rounded-lg shadow-lg group", children: [
      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "w-full h-full rounded-lg overflow-hidden", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
        "div",
        {
          className: "flex transition-transform ease-in-out duration-700 h-full",
          style: { transform: `translateX(-${currentIndex * 100}%)` },
          children: advertisements.map((ad) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("a", { href: ad.linkUrl, target: "_blank", rel: "noopener noreferrer", className: "flex-shrink-0 w-full h-full", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("img", { src: ad.imageUrl, alt: "Publicit\xE9", className: "w-full h-full object-cover" }) }, ad.id))
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { onClick: prevSlide, className: "hidden group-hover:block absolute top-1/2 -translate-y-1/2 left-5 text-2xl rounded-full p-2 bg-black/20 text-white cursor-pointer", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ChevronLeftIcon, { className: "w-6 h-6" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { onClick: nextSlide, className: "hidden group-hover:block absolute top-1/2 -translate-y-1/2 right-5 text-2xl rounded-full p-2 bg-black/20 text-white cursor-pointer", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ChevronRightIcon, { className: "w-6 h-6" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "absolute bottom-5 left-1/2 -translate-x-1/2 flex justify-center py-2 space-x-2", children: advertisements.map((_, slideIndex) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
        "div",
        {
          onClick: () => goToSlide(slideIndex),
          className: `w-3 h-3 rounded-full cursor-pointer transition-colors ${currentIndex === slideIndex ? "bg-white" : "bg-white/50"}`
        },
        slideIndex
      )) })
    ] });
  };
  var RecommendedForYou = ({ userOrders, wishlist, recentlyViewedIds, products, categories, onProductClick, onVendorClick, stores, flashSales, isComparisonEnabled }) => {
    const { user } = useAuth();
    const { t } = useLanguage();
    const recommendedProducts = (0, import_react21.useMemo)(() => {
      if (!user) return [];
      const interactedProductIds = /* @__PURE__ */ new Set([
        ...recentlyViewedIds,
        ...wishlist,
        ...userOrders.flatMap((o) => o.items.map((i) => i.id))
      ]);
      if (interactedProductIds.size === 0) return [];
      const categoryCounts = {};
      interactedProductIds.forEach((id) => {
        const product = products.find((p) => p.id === id);
        if (product) {
          categoryCounts[product.categoryId] = (categoryCounts[product.categoryId] || 0) + 1;
        }
      });
      const sortedCategories = Object.entries(categoryCounts).sort((a, b) => b[1] - a[1]);
      if (sortedCategories.length === 0) return [];
      const topCategoryId = sortedCategories[0][0];
      return products.filter((p) => p.categoryId === topCategoryId && !interactedProductIds.has(p.id)).slice(0, 4);
    }, [user, userOrders, wishlist, recentlyViewedIds, products]);
    if (recommendedProducts.length === 0) return null;
    const findStoreLocation = (vendorName) => stores.find((s) => s.name === vendorName)?.location;
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("section", { className: "py-16 bg-white dark:bg-gray-800/30", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "container mx-auto px-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex justify-center items-center gap-4 mb-10", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(StarIcon, { className: "w-8 h-8 text-kmer-yellow" }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h2", { className: "text-3xl font-bold text-center dark:text-white", children: t("home.recommendedForYou") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8", children: recommendedProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
        ProductCard_default,
        {
          product,
          onProductClick,
          onVendorClick,
          location: findStoreLocation(product.vendor),
          flashSales,
          isComparisonEnabled,
          stores
        },
        product.id
      )) })
    ] }) });
  };
  var HomePage = (props) => {
    const { categories, products, stores, flashSales, advertisements, siteSettings, onProductClick, onCategoryClick, onVendorClick, onVisitStore, onViewStories, isComparisonEnabled, isStoriesEnabled, recentlyViewedIds, userOrders, wishlist } = props;
    const { t } = useLanguage();
    const popularProductsRef = import_react21.default.useRef(null);
    const findStoreLocation = (vendorName) => stores.find((s) => s.name === vendorName)?.location;
    const mainCategories = categories.filter((c) => !c.parentId);
    const madeInCameroonCategoryId = "cat-main-3";
    const madeInCameroonProducts = products.filter((p) => {
      const category = categories.find((c) => c.id === p.categoryId);
      return category?.parentId === madeInCameroonCategoryId || p.categoryId === madeInCameroonCategoryId;
    }).slice(0, 4);
    const recentlyViewedProducts = (0, import_react21.useMemo)(() => {
      if (!recentlyViewedIds || recentlyViewedIds.length === 0) return [];
      const productMap = new Map(products.map((p) => [p.id, p]));
      return recentlyViewedIds.map((id) => productMap.get(id)).filter((p) => !!p);
    }, [recentlyViewedIds, products]);
    const sortedStores = (0, import_react21.useMemo)(() => {
      return [...stores].filter((s) => s.status === "active").sort((a, b) => {
        if (a.premiumStatus === "premium" && b.premiumStatus !== "premium") return -1;
        if (a.premiumStatus !== "premium" && b.premiumStatus === "premium") return 1;
        return 0;
      });
    }, [stores]);
    const handleScrollToProducts = () => {
      popularProductsRef.current?.scrollIntoView({ behavior: "smooth" });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(import_jsx_runtime24.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("section", { className: "relative bg-gradient-to-br from-kmer-green to-green-900 text-white h-[60vh] flex items-center justify-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "absolute inset-0", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("img", { src: siteSettings.bannerUrl || "https://picsum.photos/seed/market/1600/900", alt: "March\xE9 camerounais", className: "w-full h-full object-cover opacity-20" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "relative z-10 text-center p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h1", { className: "text-4xl md:text-6xl font-bold mb-4", style: { textShadow: "2px 2px 4px rgba(0,0,0,0.5)" }, children: t("home.heroTitle") }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { className: "text-lg md:text-xl mb-8 max-w-2xl mx-auto", children: t("home.heroSubtitle") }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { onClick: handleScrollToProducts, className: "bg-kmer-yellow text-gray-900 font-bold py-3 px-8 rounded-full text-lg hover:bg-yellow-300 transition-transform transform hover:scale-105", children: t("home.startShopping") })
        ] })
      ] }),
      advertisements.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("section", { className: "py-8 bg-gray-100 dark:bg-gray-800/50", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "container mx-auto px-6", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(AdCarousel, { advertisements }) }) }),
      isStoriesEnabled && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(StoryCarousel, { stores, onViewStories }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(RecommendedForYou, { ...props }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("section", { className: "py-16 bg-white dark:bg-gray-800/30", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "container mx-auto px-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex justify-center items-center gap-4 mb-10", children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(TagIcon, { className: "w-8 h-8 text-kmer-red" }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h2", { className: "text-3xl font-bold text-center dark:text-white", children: t("home.promotionsTitle") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8", children: products.filter((p) => p.promotionPrice).slice(0, 4).map((product) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: findStoreLocation(product.vendor), flashSales, isComparisonEnabled, stores }, product.id)) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("section", { className: "py-16 bg-gray-50 dark:bg-gray-900", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "container mx-auto px-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h2", { className: "text-3xl font-bold text-center mb-10 dark:text-white", children: t("home.categoriesTitle") }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-8", children: mainCategories.map((cat) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(CategoryCard_default, { category: cat, onClick: onCategoryClick }, cat.id)) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("section", { ref: popularProductsRef, className: "py-16 bg-white dark:bg-gray-800/30", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "container mx-auto px-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h2", { className: "text-3xl font-bold text-center mb-10 dark:text-white", children: t("home.popularProducts") }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8", children: products.slice(0, 4).map((product) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: findStoreLocation(product.vendor), flashSales, isComparisonEnabled, stores }, product.id)) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("section", { className: "py-16 bg-kmer-green/10 dark:bg-kmer-green/20", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "container mx-auto px-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex justify-center items-center gap-4 mb-10", children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(SparklesIcon, { className: "w-10 h-10 text-kmer-green" }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h2", { className: "text-3xl font-bold text-center dark:text-white", children: t("home.madeInCameroonTitle") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { className: "text-center text-gray-600 dark:text-gray-300 mb-12 max-w-3xl mx-auto", children: t("home.madeInCameroonSubtitle") }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8", children: madeInCameroonProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: findStoreLocation(product.vendor), flashSales, isComparisonEnabled, stores }, product.id)) })
      ] }) }),
      recentlyViewedProducts.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("section", { className: "py-16 bg-white dark:bg-gray-800/30", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "container mx-auto px-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h2", { className: "text-3xl font-bold text-center mb-10 dark:text-white", children: t("home.recentlyViewed") }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8", children: recentlyViewedProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
          ProductCard_default,
          {
            product,
            onProductClick,
            onVendorClick,
            location: findStoreLocation(product.vendor),
            flashSales,
            isComparisonEnabled,
            stores
          },
          product.id
        )) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("section", { className: "py-20 bg-white dark:bg-gray-800/30", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "container mx-auto px-6 text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h2", { className: "text-3xl font-bold mb-12 dark:text-white", children: t("home.howItWorksTitle") }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "grid md:grid-cols-4 gap-10", children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex flex-col items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "bg-kmer-yellow/20 p-5 rounded-full mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ShoppingBagIcon, { className: "h-12 w-12 text-kmer-yellow" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h3", { className: "text-xl font-semibold mb-2 dark:text-gray-200", children: t("home.howItWorksStep1Title") }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: t("home.howItWorksStep1Text") })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex flex-col items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "bg-kmer-red/20 p-5 rounded-full mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(CreditCardIcon, { className: "h-12 w-12 text-kmer-red" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h3", { className: "text-xl font-semibold mb-2 dark:text-gray-200", children: t("home.howItWorksStep2Title") }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: t("home.howItWorksStep2Text") })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex flex-col items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "bg-kmer-green/20 p-5 rounded-full mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(TruckIcon, { className: "h-12 w-12 text-kmer-green" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h3", { className: "text-xl font-semibold mb-2 dark:text-gray-200", children: t("home.howItWorksStep3Title") }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: t("home.howItWorksStep3Text") })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex flex-col items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "bg-blue-500/20 p-5 rounded-full mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ChatBubbleBottomCenterTextIcon, { className: "h-12 w-12 text-blue-500" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h3", { className: "text-xl font-semibold mb-2 dark:text-gray-200", children: t("home.howItWorksStep4Title") }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: t("home.howItWorksStep4Text") })
          ] })
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("section", { className: "py-16 bg-gray-50 dark:bg-gray-900", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "container mx-auto px-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h2", { className: "text-3xl font-bold text-center mb-10 dark:text-white", children: t("home.featuredStores") }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-8", children: sortedStores.map((store) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(StoreCard_default, { store, onVisitStore }, store.id)) })
      ] }) })
    ] });
  };
  var HomePage_default = HomePage;

  // components/ProductDetail.tsx
  var import_react22 = __toESM(require_react());

  // components/RecommendedProducts.tsx
  var import_jsx_runtime25 = __toESM(require_jsx_runtime());
  var RecommendedProducts = ({ currentProduct, allProducts, stores, flashSales, onProductClick, onVendorClick, isComparisonEnabled }) => {
    const recommended = allProducts.filter((p) => p.categoryId === currentProduct.categoryId && p.id !== currentProduct.id).slice(0, 4);
    if (recommended.length === 0) return null;
    const findStoreLocation = (vendorName) => stores.find((s) => s.name === vendorName)?.location;
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("div", { className: "bg-gray-50 dark:bg-gray-900/50 py-16", children: /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "container mx-auto px-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("h2", { className: "text-3xl font-bold text-center mb-10 dark:text-white", children: "Produits similaires" }),
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8", children: recommended.map((product) => /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
        ProductCard_default,
        {
          product,
          onProductClick,
          onVendorClick,
          location: findStoreLocation(product.vendor),
          flashSales,
          isComparisonEnabled,
          stores
        },
        product.id
      )) })
    ] }) });
  };
  var RecommendedProducts_default = RecommendedProducts;

  // components/AutoComparison.tsx
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  var AutoComparison = ({ currentProduct, otherOffers, stores, onProductClick }) => {
    const allItems = [currentProduct, ...otherOffers];
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "mt-16 bg-gray-100 dark:bg-gray-800/50 p-6 rounded-lg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("h2", { className: "text-2xl font-bold mb-4", children: "Comparer les offres" }),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6", children: "Ce produit est disponible chez plusieurs vendeurs. Comparez les options ci-dessous." }),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: allItems.map((product) => {
        const store = stores.find((s) => s.name === product.vendor);
        return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("button", { onClick: () => onProductClick(product), className: "p-4 border dark:border-gray-700 rounded-lg text-left hover:bg-white dark:hover:bg-gray-700 transition-colors", children: [
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("p", { className: "font-bold", children: product.vendor }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("p", { className: "text-lg text-kmer-green font-semibold", children: [
            product.price.toLocaleString("fr-CM"),
            " FCFA"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("p", { className: "text-sm", children: [
            "Vendu depuis: ",
            store?.location
          ] })
        ] }, product.id);
      }) })
    ] });
  };
  var AutoComparison_default = AutoComparison;

  // components/ProductDetail.tsx
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  var getActiveFlashSalePrice2 = (productId, flashSales) => {
    const now = /* @__PURE__ */ new Date();
    for (const sale of flashSales) {
      const startDate = new Date(sale.startDate);
      const endDate = new Date(sale.endDate);
      if (now >= startDate && now <= endDate) {
        const productInSale = sale.products.find((p) => p.productId === productId && p.status === "approved");
        if (productInSale) return productInSale.flashPrice;
      }
    }
    return null;
  };
  var isPromotionActive2 = (product) => {
    if (!product.promotionPrice || product.promotionPrice >= product.price) {
      return false;
    }
    const now = /* @__PURE__ */ new Date();
    const startDate = product.promotionStartDate ? /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") : null;
    const endDate = product.promotionEndDate ? /* @__PURE__ */ new Date(product.promotionEndDate + "T23:59:59") : null;
    if (!startDate && !endDate) {
      return false;
    }
    if (startDate && endDate) {
      return now >= startDate && now <= endDate;
    }
    if (startDate) {
      return now >= startDate;
    }
    if (endDate) {
      return now <= endDate;
    }
    return false;
  };
  var Rating = ({ rating, setRating }) => /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "flex items-center", children: [...Array(5)].map((_, i) => /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
    "button",
    {
      type: "button",
      onClick: setRating ? () => setRating(i + 1) : void 0,
      className: setRating ? "cursor-pointer" : "",
      disabled: !setRating,
      children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
        StarIcon,
        {
          className: `w-5 h-5 ${i < rating ? "text-kmer-yellow" : "text-gray-300 dark:text-gray-500"}`,
          filled: i < rating
        }
      )
    },
    i
  )) });
  var ReviewForm = ({ productId, onAddReview, onOpenLogin }) => {
    const { user } = useAuth();
    const [rating, setRating] = (0, import_react22.useState)(0);
    const [comment, setComment] = (0, import_react22.useState)("");
    const [submitted, setSubmitted] = (0, import_react22.useState)(false);
    const handleSubmit = (e) => {
      e.preventDefault();
      if (!rating || !comment || !user) {
        alert("Veuillez donner une note et un commentaire.");
        return;
      }
      const newReview = {
        author: user.name,
        rating,
        comment,
        date: (/* @__PURE__ */ new Date()).toISOString().split("T")[0],
        status: "pending"
      };
      onAddReview(productId, newReview);
      setRating(0);
      setComment("");
      setSubmitted(true);
    };
    if (!user) {
      return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "mt-8 text-center text-gray-600 dark:text-gray-300 bg-gray-100 dark:bg-gray-800 p-4 rounded-lg", children: [
        "Vous devez \xEAtre ",
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { onClick: onOpenLogin, className: "text-kmer-green font-bold underline", children: "connect\xE9" }),
        " pour laisser un avis."
      ] });
    }
    if (submitted) {
      return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "mt-8 text-center text-green-700 dark:text-green-300 bg-green-50 dark:bg-green-900/50 p-6 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("h3", { className: "font-bold text-lg", children: "Merci pour votre avis !" }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("p", { children: "Il a \xE9t\xE9 soumis et est en attente de mod\xE9ration avant d'\xEAtre publi\xE9." })
      ] });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("form", { onSubmit: handleSubmit, className: "mt-8 bg-gray-50 dark:bg-gray-800 p-6 rounded-lg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("h3", { className: "font-bold text-lg mb-4", children: "Laissez votre avis" }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("label", { className: "block font-medium mb-1", children: "Votre note" }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Rating, { rating, setRating })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("label", { htmlFor: "comment", className: "block font-medium mb-1", children: "Votre commentaire" }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
          "textarea",
          {
            id: "comment",
            rows: 4,
            value: comment,
            onChange: (e) => setComment(e.target.value),
            className: "w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600",
            placeholder: "D\xE9crivez votre exp\xE9rience avec ce produit...",
            required: true
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { type: "submit", className: "bg-kmer-green text-white font-bold py-2 px-6 rounded-lg hover:bg-green-700 transition-colors", children: "Soumettre l'avis" })
    ] });
  };
  var ProductCharacteristics = ({ product }) => {
    const characteristics = [
      // Generic
      { label: "Marque", value: product.brand },
      { label: "Genre", value: product.gender },
      { label: "Mat\xE9riau", value: product.material },
      { label: "Poids", value: product.weight },
      { label: "Dimensions", value: product.dimensions },
      // Electronics
      { label: "Mod\xE8le", value: product.modelNumber },
      { label: "Couleur", value: product.color },
      { label: "Garantie", value: product.warranty },
      // Books
      { label: "Auteur", value: product.author },
      { label: "\xC9diteur", value: product.publisher },
      { label: "Ann\xE9e", value: product.publicationYear },
      { label: "ISBN", value: product.isbn },
      // Others
      { label: "N\xB0 de s\xE9rie", value: product.serialNumber },
      { label: "Date de production", value: product.productionDate ? new Date(product.productionDate).toLocaleDateString("fr-FR") : void 0 },
      { label: "Date d'expiration", value: product.expirationDate ? new Date(product.expirationDate).toLocaleDateString("fr-FR") : void 0 }
    ].filter((c) => c.value);
    if (characteristics.length === 0) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "mt-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("h3", { className: "text-lg font-semibold border-b pb-2 mb-3 dark:border-gray-700", children: "Caract\xE9ristiques" }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "text-sm space-y-2", children: characteristics.map((char) => /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex", children: [
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", { className: "w-1/3 text-gray-500 dark:text-gray-400", children: char.label }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", { className: "w-2/3 font-medium text-gray-800 dark:text-gray-200", children: char.value })
      ] }, char.label)) })
    ] });
  };
  var ProductDetail = ({ product, allProducts, allUsers, stores, flashSales, onBack, onAddReview, onVendorClick, onProductClick, onOpenLogin, isChatEnabled, isComparisonEnabled, onProductView }) => {
    const [quantity, setQuantity] = (0, import_react22.useState)(1);
    const [selectedVariants, setSelectedVariants] = (0, import_react22.useState)({});
    const [mainImage, setMainImage] = (0, import_react22.useState)(product.imageUrls[0]);
    const [otherOffers, setOtherOffers] = (0, import_react22.useState)([]);
    const [toastMessage, setToastMessage] = (0, import_react22.useState)(null);
    const { addToCart } = useCart();
    const { user } = useAuth();
    const { startChat } = useChatContext();
    const { isWishlisted, toggleWishlist } = useWishlist();
    const { isInComparison, toggleComparison } = useComparison();
    const isMyProduct = user?.role === "seller" && user.shopName === product.vendor;
    const vendorStore = stores.find((s) => s.name === product.vendor);
    const sellerUser = allUsers.find((u) => u.role === "seller" && u.shopName === product.vendor);
    const inComparison = isInComparison(product.id);
    const approvedReviews = product.reviews.filter((r) => r.status === "approved");
    (0, import_react22.useEffect)(() => {
      onProductView(product.id);
    }, [product.id, onProductView]);
    (0, import_react22.useEffect)(() => {
      const offers = allProducts.filter((p) => p.name === product.name && p.id !== product.id);
      setOtherOffers(offers);
      setMainImage(product.imageUrls[0]);
      setQuantity(1);
      setSelectedVariants({});
      window.scrollTo(0, 0);
    }, [product, allProducts]);
    const handleAddToCart = () => {
      addToCart(product, quantity);
    };
    const handleContactSeller = () => {
      if (sellerUser && vendorStore) {
        startChat(sellerUser, vendorStore, product);
      } else {
        alert("Impossible de trouver les informations du vendeur.");
      }
    };
    const handleShare = async () => {
      const productUrl = `${window.location.origin}${window.location.pathname}?page=product&id=${product.id}`;
      const shareData = {
        title: product.name,
        text: `D\xE9couvrez ${product.name} sur KMER ZONE !`,
        url: productUrl
      };
      if (navigator.share) {
        try {
          await navigator.share(shareData);
        } catch (err) {
          console.error("Share failed:", err);
        }
      } else if (navigator.clipboard) {
        try {
          await navigator.clipboard.writeText(productUrl);
          setToastMessage("Lien copi\xE9 dans le presse-papiers !");
          setTimeout(() => setToastMessage(null), 3e3);
        } catch (err) {
          console.error("Failed to copy: ", err);
          setToastMessage("La copie du lien a \xE9chou\xE9.");
          setTimeout(() => setToastMessage(null), 3e3);
        }
      } else {
        setToastMessage("Le partage ou la copie n'est pas support\xE9 sur votre navigateur.");
        setTimeout(() => setToastMessage(null), 3e3);
      }
    };
    const handleVariantSelect = (variantName, option) => {
      setSelectedVariants((prev) => ({ ...prev, [variantName]: option }));
    };
    const flashPrice = getActiveFlashSalePrice2(product.id, flashSales);
    const promotionIsActive = isPromotionActive2(product);
    let finalPrice = product.price;
    let priceToDisplay;
    if (flashPrice !== null) {
      priceToDisplay = /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("p", { className: "text-3xl font-bold text-blue-600", children: [
        flashPrice.toLocaleString("fr-CM"),
        " FCFA"
      ] });
      finalPrice = flashPrice;
    } else if (promotionIsActive) {
      priceToDisplay = /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("p", { className: "text-3xl font-bold text-kmer-red", children: [
        product.promotionPrice?.toLocaleString("fr-CM"),
        " FCFA"
      ] });
      finalPrice = product.promotionPrice;
    } else {
      priceToDisplay = /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("p", { className: "text-3xl font-bold text-kmer-green", children: [
        product.price.toLocaleString("fr-CM"),
        " FCFA"
      ] });
    }
    const percentageOff = flashPrice ? Math.round((product.price - flashPrice) / product.price * 100) : promotionIsActive ? Math.round((product.price - product.promotionPrice) / product.price * 100) : 0;
    const promotionIsDefined = !!(product.promotionPrice && product.promotionPrice < product.price && (product.promotionStartDate || product.promotionEndDate));
    const promotionIsUpcoming = promotionIsDefined && !promotionIsActive && product.promotionStartDate && /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") > /* @__PURE__ */ new Date();
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(import_jsx_runtime27.Fragment, { children: [
      toastMessage && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "fixed bottom-20 left-1/2 -translate-x-1/2 bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg z-50 animate-in fade-in-0 slide-in-from-bottom-5", children: toastMessage }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "container mx-auto px-6 py-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
          "Retour"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "grid md:grid-cols-2 gap-12", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "mb-4 relative", children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("img", { src: mainImage, alt: product.name, className: "w-full h-auto max-h-[500px] object-cover rounded-lg shadow-lg" }),
              flashPrice && /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "absolute top-3 left-3 bg-blue-600 text-white text-sm font-bold px-3 py-1.5 rounded-md shadow-lg flex items-center gap-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(BoltIcon, { className: "w-4 h-4" }),
                " VENTE FLASH"
              ] }),
              !flashPrice && promotionIsUpcoming && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "absolute top-3 left-3 bg-blue-500 text-white text-xs font-bold px-3 py-1.5 rounded-md shadow-lg", children: "PROMO \xC0 VENIR" }),
              !flashPrice && promotionIsActive && /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "absolute top-3 left-3 bg-kmer-red text-white text-sm font-bold px-3 py-1.5 rounded-md shadow-lg", children: [
                "-",
                percentageOff,
                "%"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "flex space-x-2", children: product.imageUrls.map((url, index) => /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("img", { src: url, alt: `${product.name} thumbnail ${index + 1}`, onClick: () => setMainImage(url), className: `w-20 h-20 object-cover rounded-md cursor-pointer border-2 ${mainImage === url ? "border-kmer-green" : "border-transparent"}` }, index)) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { onClick: () => onVendorClick(product.vendor), className: "text-gray-500 dark:text-gray-400 hover:text-kmer-green hover:underline", children: product.vendor }),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("h1", { className: "text-4xl font-bold mt-2 text-gray-800 dark:text-white", children: product.name }),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex items-center mt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Rating, { rating: approvedReviews.reduce((acc, r) => acc + r.rating, 0) / approvedReviews.length }),
              /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("span", { className: "ml-2 text-gray-600 dark:text-gray-300 text-sm", children: [
                "(",
                approvedReviews.length,
                " avis)"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "my-6", children: [
              priceToDisplay,
              (flashPrice || promotionIsActive) && /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("p", { className: "text-gray-500 dark:text-gray-400 line-through", children: [
                "Prix original : ",
                product.price.toLocaleString("fr-CM"),
                " FCFA"
              ] }),
              promotionIsActive && product.promotionEndDate && !flashPrice && /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex items-center gap-1 text-sm text-yellow-600 dark:text-yellow-400 mt-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(CalendarDaysIcon, { className: "w-4 h-4" }),
                /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("span", { children: [
                  "L'offre se termine le ",
                  new Date(product.promotionEndDate).toLocaleDateString("fr-FR")
                ] })
              ] }),
              promotionIsUpcoming && product.promotionStartDate && !flashPrice && /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex items-center gap-1 text-sm text-blue-500 dark:text-blue-400 mt-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(CalendarDaysIcon, { className: "w-4 h-4" }),
                /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("span", { children: [
                  "Promotion disponible le ",
                  new Date(product.promotionStartDate).toLocaleDateString("fr-FR")
                ] })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("p", { className: "text-gray-600 dark:text-gray-300", children: product.description }),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ProductCharacteristics, { product }),
            vendorStore && /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "mt-6 p-3 bg-gray-100 dark:bg-gray-800 rounded-lg flex items-center gap-2 text-sm text-gray-600 dark:text-gray-300", children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(MapPinIcon, { className: "w-5 h-5 text-kmer-green flex-shrink-0" }),
              "Vendu et exp\xE9di\xE9 depuis ",
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("strong", { children: vendorStore.location })
            ] }),
            product.variants && product.variants.map((variant) => /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "mt-6", children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("h3", { className: "font-semibold text-gray-700 dark:text-gray-300", children: variant.name }),
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "flex flex-wrap gap-2 mt-2", children: variant.options.map((option) => /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { onClick: () => handleVariantSelect(variant.name, option), className: `px-4 py-2 border rounded-md text-sm font-medium ${selectedVariants[variant.name] === option ? "border-kmer-green bg-kmer-green/10 text-kmer-green" : "border-gray-300 dark:border-gray-600"}`, children: option }, option)) })
            ] }, variant.name)),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "mt-8 flex flex-col sm:flex-row gap-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(
                "button",
                {
                  onClick: handleAddToCart,
                  disabled: product.stock === 0 || isMyProduct,
                  className: "w-full flex-grow bg-kmer-green text-white font-bold py-3 px-6 rounded-lg flex items-center justify-center gap-3 hover:bg-green-700 transition-colors disabled:bg-gray-400 dark:disabled:bg-gray-600 disabled:cursor-not-allowed",
                  title: isMyProduct ? "Vous ne pouvez pas acheter votre propre produit" : "",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ShoppingCartIcon, { className: "w-6 h-6" }),
                    product.stock === 0 ? "Rupture de stock" : "Ajouter au panier"
                  ]
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { onClick: () => toggleWishlist(product.id), className: "p-3 border-2 rounded-lg hover:border-kmer-red transition-colors", "aria-label": "Ajouter \xE0 la liste de souhaits", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(HeartIcon, { className: "w-6 h-6", filled: isWishlisted(product.id) }) }),
              isComparisonEnabled && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { onClick: () => toggleComparison(product.id), className: `p-3 border-2 rounded-lg hover:border-kmer-green transition-colors ${inComparison ? "border-kmer-green text-kmer-green" : ""}`, "aria-label": "Ajouter \xE0 la comparaison", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ScaleIcon, { className: "w-6 h-6" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { onClick: handleShare, className: "p-3 border-2 rounded-lg hover:border-blue-500 transition-colors", "aria-label": "Partager", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ShareIcon, { className: "w-6 h-6" }) })
            ] }),
            isChatEnabled && /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(
              "button",
              {
                onClick: handleContactSeller,
                disabled: isMyProduct,
                className: "mt-4 w-full bg-blue-500 text-white font-bold py-3 px-6 rounded-lg flex items-center justify-center gap-3 hover:bg-blue-600 transition-colors disabled:bg-gray-400 dark:disabled:bg-gray-600 disabled:cursor-not-allowed",
                title: isMyProduct ? "Vous ne pouvez pas contacter votre propre boutique" : "",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ChatBubbleBottomCenterTextIcon, { className: "w-6 h-6" }),
                  "Contacter le vendeur"
                ]
              }
            )
          ] })
        ] }),
        otherOffers.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(AutoComparison_default, { currentProduct: product, otherOffers, stores, onProductClick }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "mt-16", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("h2", { className: "text-2xl font-bold mb-6 border-b pb-4 dark:border-gray-700", children: [
            "Avis des clients (",
            approvedReviews.length,
            ")"
          ] }),
          approvedReviews.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "space-y-6", children: approvedReviews.map((review, index) => /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "border-b pb-6 last:border-b-0 dark:border-gray-700", children: [
            /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex items-center mb-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Rating, { rating: review.rating }),
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", { className: "ml-4 font-bold text-gray-800 dark:text-white", children: review.author })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("p", { className: "text-gray-500 dark:text-gray-400 text-sm mb-2", children: new Date(review.date).toLocaleDateString("fr-FR") }),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("p", { className: "text-gray-600 dark:text-gray-300 italic", children: [
              '"',
              review.comment,
              '"'
            ] }),
            review.sellerReply && /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "mt-4 ml-8 p-4 bg-gray-100 dark:bg-gray-700/50 rounded-lg border-l-4 border-kmer-green", children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("p", { className: "font-bold text-sm text-gray-800 dark:text-gray-200", children: "R\xE9ponse du vendeur" }),
              /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("p", { className: "text-gray-600 dark:text-gray-300 italic", children: [
                '"',
                review.sellerReply.text,
                '"'
              ] })
            ] })
          ] }, index)) }) : /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("p", { className: "text-gray-500 dark:text-gray-400", children: "Aucun avis pour ce produit pour le moment." }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ReviewForm, { productId: product.id, onAddReview, onOpenLogin })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
        RecommendedProducts_default,
        {
          currentProduct: product,
          allProducts,
          stores,
          flashSales,
          onProductClick,
          onVendorClick,
          isComparisonEnabled
        }
      )
    ] });
  };
  var ProductDetail_default = ProductDetail;

  // components/CartView.tsx
  var import_react23 = __toESM(require_react());
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  var PLACEHOLDER_IMAGE_URL4 = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none'%3E%3Crect width='24' height='24' fill='%23E5E7EB'/%3E%3Cpath d='M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z' stroke='%239CA3AF' stroke-width='1.5'/%3E%3C/svg%3E";
  var getActiveFlashSalePrice3 = (productId, flashSales) => {
    const now = /* @__PURE__ */ new Date();
    for (const sale of flashSales) {
      const startDate = new Date(sale.startDate);
      const endDate = new Date(sale.endDate);
      if (now >= startDate && now <= endDate) {
        const productInSale = sale.products.find((p) => p.productId === productId && p.status === "approved");
        if (productInSale) return productInSale.flashPrice;
      }
    }
    return null;
  };
  var isPromotionActive3 = (product) => {
    if (!product.promotionPrice || product.promotionPrice >= product.price) {
      return false;
    }
    const now = /* @__PURE__ */ new Date();
    const startDate = product.promotionStartDate ? /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") : null;
    const endDate = product.promotionEndDate ? /* @__PURE__ */ new Date(product.promotionEndDate + "T23:59:59") : null;
    if (!startDate && !endDate) {
      return false;
    }
    if (startDate && endDate) {
      return now >= startDate && now <= endDate;
    }
    if (startDate) {
      return now >= startDate;
    }
    if (endDate) {
      return now <= endDate;
    }
    return false;
  };
  var CartView = ({ onBack, onNavigateToCheckout, flashSales, allPromoCodes, appliedPromoCode, onApplyPromoCode }) => {
    const { cart, removeFromCart, updateQuantity } = useCart();
    const [promoCodeInput, setPromoCodeInput] = (0, import_react23.useState)("");
    const [promoError, setPromoError] = (0, import_react23.useState)("");
    const getFinalPrice4 = (item) => {
      if (item.selectedVariant) {
        const variantDetail = item.variantDetails?.find((vd) => {
          const vdKeys = Object.keys(vd.options);
          const selectedKeys = Object.keys(item.selectedVariant);
          if (vdKeys.length !== selectedKeys.length) return false;
          return vdKeys.every((key) => vd.options[key] === item.selectedVariant[key]);
        });
        if (variantDetail?.price) {
          return variantDetail.price;
        }
      }
      const flashPrice = getActiveFlashSalePrice3(item.id, flashSales);
      if (flashPrice !== null) return flashPrice;
      if (isPromotionActive3(item)) return item.promotionPrice;
      return item.price;
    };
    const handleApplyPromoCode = () => {
      setPromoError("");
      onApplyPromoCode(null);
      if (!promoCodeInput.trim()) {
        setPromoError("Veuillez entrer un code.");
        return;
      }
      const code = allPromoCodes.find((pc) => pc.code.toLowerCase() === promoCodeInput.toLowerCase());
      if (!code) {
        setPromoError("Code promo invalide.");
        return;
      }
      if (code.validUntil && new Date(code.validUntil) < /* @__PURE__ */ new Date()) {
        setPromoError("Ce code promo a expir\xE9.");
        return;
      }
      onApplyPromoCode(code);
      setPromoCodeInput("");
    };
    const subtotal = cart.reduce((sum, item) => sum + getFinalPrice4(item) * item.quantity, 0);
    const discount = appliedPromoCode ? appliedPromoCode.discountType === "percentage" ? subtotal * appliedPromoCode.discountValue / 100 : appliedPromoCode.discountValue : 0;
    const totalBeforeDelivery = subtotal - discount;
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "bg-gray-100 dark:bg-gray-900 min-h-[80vh]", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Continuer mes achats"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white mb-8", children: "Mon Panier" }),
      cart.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: "Votre panier est vide." }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6", children: "Parcourez nos cat\xE9gories pour trouver votre bonheur !" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("button", { onClick: onBack, className: "bg-kmer-green text-white font-bold py-3 px-8 rounded-full hover:bg-green-700 transition-colors", children: "Commencer mes achats" })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "grid lg:grid-cols-3 gap-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "lg:col-span-2 bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 sm:p-6 space-y-4", children: cart.map((item) => /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 border-b dark:border-gray-700 pb-4 last:border-b-0", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex items-center gap-4 flex-grow w-full", children: [
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("img", { src: item.imageUrls[0] || PLACEHOLDER_IMAGE_URL4, alt: item.name, className: "w-20 h-20 sm:w-24 sm:h-24 object-cover rounded-md flex-shrink-0" }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("h3", { className: "font-semibold text-lg dark:text-white", children: item.name }),
              item.selectedVariant && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400 font-medium", children: Object.entries(item.selectedVariant).map(([key, value]) => `${key}: ${value}`).join(" / ") }),
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("p", { className: "text-gray-500 dark:text-gray-400 text-sm", children: item.vendor }),
              /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("p", { className: "text-kmer-green font-bold mt-1", children: [
                getFinalPrice4(item).toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex items-center gap-4 w-full sm:w-auto justify-end", children: [
            /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex items-center border border-gray-300 dark:border-gray-600 rounded-md", children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("button", { onClick: () => updateQuantity(item.id, item.quantity - 1, item.selectedVariant), className: "px-3 py-1 text-lg font-bold dark:text-gray-200", children: "-" }),
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("span", { className: "w-12 text-center border-l border-r border-gray-300 dark:border-gray-600 py-1 dark:text-white", children: item.quantity }),
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("button", { onClick: () => updateQuantity(item.id, item.quantity + 1, item.selectedVariant), className: "px-3 py-1 text-lg font-bold dark:text-gray-200", children: "+" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("button", { onClick: () => removeFromCart(item.id, item.selectedVariant), className: "text-gray-500 hover:text-red-600 p-2", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(TrashIcon, { className: "w-5 h-5" }) })
          ] })
        ] }, item.id + JSON.stringify(item.selectedVariant))) }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "lg:col-span-1", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 sticky top-24", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("h2", { className: "text-xl font-bold border-b dark:border-gray-700 pb-4 mb-4 dark:text-white", children: "R\xE9sum\xE9 de la commande" }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("label", { htmlFor: "promo-code", className: "text-sm font-medium dark:text-gray-300", children: "Code Promo" }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex gap-2 mt-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
                "input",
                {
                  type: "text",
                  id: "promo-code",
                  value: promoCodeInput,
                  onChange: (e) => setPromoCodeInput(e.target.value),
                  placeholder: "Entrez votre code",
                  className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 text-sm"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("button", { onClick: handleApplyPromoCode, className: "bg-gray-200 dark:bg-gray-600 font-semibold px-4 rounded-md hover:bg-gray-300 dark:hover:bg-gray-500", children: "Appliquer" })
            ] }),
            promoError && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("p", { className: "text-red-500 text-xs mt-1", children: promoError })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "space-y-3 dark:text-gray-300 border-t dark:border-gray-700 pt-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("span", { children: "Sous-total" }),
              /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("span", { className: "font-semibold dark:text-white", children: [
                subtotal.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] }),
            appliedPromoCode && /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex justify-between text-green-600 dark:text-green-400", children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("span", { children: [
                "R\xE9duction (",
                appliedPromoCode.code,
                ")"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("span", { className: "font-semibold", children: [
                "- ",
                discount.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("span", { children: "Frais de livraison" }),
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("span", { className: "font-semibold dark:text-white", children: "\xC0 calculer" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "border-t dark:border-gray-700 pt-4 mt-4 flex justify-between text-lg font-bold dark:text-white", children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("span", { children: "Total (avant livraison)" }),
              /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("span", { children: [
                totalBeforeDelivery.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("button", { onClick: onNavigateToCheckout, className: "w-full mt-6 bg-kmer-red text-white font-bold py-3 rounded-lg hover:bg-red-700 transition-colors disabled:bg-gray-400", disabled: cart.length === 0, children: "Passer au paiement" })
        ] }) })
      ] })
    ] }) });
  };
  var CartView_default = CartView;

  // components/Checkout.tsx
  var import_react24 = __toESM(require_react());
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  var getActiveFlashSalePrice4 = (productId, flashSales) => {
    const now = /* @__PURE__ */ new Date();
    for (const sale of flashSales) {
      if (new Date(sale.startDate) <= now && new Date(sale.endDate) >= now) {
        const productInSale = sale.products.find((p) => p.productId === productId && p.status === "approved");
        if (productInSale) return productInSale.flashPrice;
      }
    }
    return null;
  };
  var isPromotionActive4 = (product) => {
    if (!product.promotionPrice || product.promotionPrice >= product.price) return false;
    const now = /* @__PURE__ */ new Date();
    const startDate = product.promotionStartDate ? /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") : null;
    const endDate = product.promotionEndDate ? /* @__PURE__ */ new Date(product.promotionEndDate + "T23:59:59") : null;
    if (!startDate && !endDate) return false;
    if (startDate && endDate) return now >= startDate && now <= endDate;
    if (startDate) return now >= startDate;
    if (endDate) return now <= endDate;
    return false;
  };
  var getFinalPrice = (item, flashSales) => {
    if (item.selectedVariant) {
      const variantDetail = item.variantDetails?.find((vd) => {
        if (!item.selectedVariant) return false;
        const vdKeys = Object.keys(vd.options);
        const selectedKeys = Object.keys(item.selectedVariant);
        if (vdKeys.length !== selectedKeys.length) return false;
        return vdKeys.every((key) => vd.options[key] === item.selectedVariant[key]);
      });
      if (variantDetail?.price) return variantDetail.price;
    }
    const flashPrice = getActiveFlashSalePrice4(item.id, flashSales);
    if (flashPrice !== null) return flashPrice;
    if (isPromotionActive4(item)) return item.promotionPrice;
    return item.price;
  };
  var AddressForm = ({ onSave, onCancel }) => {
    const { user } = useAuth();
    const [formData, setFormData] = (0, import_react24.useState)({
      fullName: user?.name || "",
      phone: user?.phone || "",
      address: "",
      city: "Douala",
      label: "Maison"
    });
    const handleChange = (e) => {
      setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onSave(formData);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-4 p-4 mt-4 border rounded-lg dark:border-gray-700 bg-gray-50 dark:bg-gray-700/50 animate-in", children: [
      /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("h3", { className: "font-semibold text-lg dark:text-white", children: "Ajouter une nouvelle adresse" }),
      /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "grid grid-cols-1 sm:grid-cols-2 gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("input", { name: "fullName", value: formData.fullName, onChange: handleChange, placeholder: "Nom complet", className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("input", { name: "phone", value: formData.phone, onChange: handleChange, placeholder: "T\xE9l\xE9phone", className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("input", { name: "address", value: formData.address, onChange: handleChange, placeholder: "Adresse (Rue, quartier, rep\xE8re...)", className: "sm:col-span-2 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("select", { name: "city", value: formData.city, onChange: handleChange, className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("option", { children: "Douala" }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("option", { children: "Yaound\xE9" }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("option", { children: "Bafoussam" }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("option", { children: "Limbe" }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("option", { children: "Kribi" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("input", { name: "label", value: formData.label, onChange: handleChange, placeholder: "\xC9tiquette (Maison, Bureau...)", className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex justify-end gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("button", { type: "button", onClick: onCancel, className: "bg-gray-200 dark:bg-gray-600 font-bold py-2 px-4 rounded-lg", children: "Annuler" }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("button", { type: "submit", className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg", children: "Enregistrer" })
      ] })
    ] });
  };
  var Checkout = ({ onBack, onOrderConfirm, flashSales, allPickupPoints, allStores, appliedPromoCode, siteSettings, paymentMethods }) => {
    const { user, addAddress } = useAuth();
    const { cart } = useCart();
    const [deliveryMethod, setDeliveryMethod] = (0, import_react24.useState)("home-delivery");
    const defaultAddressId = user?.addresses?.find((a) => a.isDefault)?.id;
    const [selectedAddressId, setSelectedAddressId] = (0, import_react24.useState)(defaultAddressId);
    const [selectedPickupPointId, setSelectedPickupPointId] = (0, import_react24.useState)(allPickupPoints[0]?.id);
    const [selectedPaymentMethodId, setSelectedPaymentMethodId] = (0, import_react24.useState)(paymentMethods[0]?.id);
    const [isAddingAddress, setIsAddingAddress] = (0, import_react24.useState)(false);
    const subtotal = cart.reduce((sum, item) => sum + getFinalPrice(item, flashSales) * item.quantity, 0);
    const discount = appliedPromoCode ? appliedPromoCode.discountType === "percentage" ? subtotal * appliedPromoCode.discountValue / 100 : appliedPromoCode.discountValue : 0;
    const subtotalAfterDiscount = subtotal - discount;
    const selectedAddress = user?.addresses?.find((a) => a.id === selectedAddressId);
    const deliveryFee = (0, import_react24.useMemo)(() => {
      if (deliveryMethod === "pickup" || !selectedAddress) return 0;
      const customerCity = selectedAddress.city;
      const itemsByVendor = cart.reduce((acc, item) => {
        (acc[item.vendor] = acc[item.vendor] || []).push(item);
        return acc;
      }, {});
      let totalFee = 0;
      for (const vendorName in itemsByVendor) {
        const vendorItems = itemsByVendor[vendorName];
        const store = allStores.find((s) => s.name === vendorName);
        if (!store) continue;
        const vendorSubtotal = vendorItems.reduce((sum, item) => sum + getFinalPrice(item, flashSales) * item.quantity, 0);
        if (store.shippingSettings) {
          if (store.shippingSettings.freeShippingThreshold !== null && vendorSubtotal >= store.shippingSettings.freeShippingThreshold) {
            continue;
          }
          const isLocal = store.location === customerCity;
          const customRate = isLocal ? store.shippingSettings.customRates.local : store.shippingSettings.customRates.national;
          if (customRate !== null) {
            totalFee += customRate;
            continue;
          }
        }
        const isInterUrban = store.location !== customerCity;
        const baseFee = isInterUrban ? siteSettings.deliverySettings.interUrbanBaseFee : siteSettings.deliverySettings.intraUrbanBaseFee;
        totalFee += baseFee;
      }
      let discountPercentage = 0;
      if (siteSettings.deliverySettings.premiumDeliveryDiscountPercentage && (user?.loyalty.status === "premium" || user?.loyalty.status === "premium_plus")) {
        discountPercentage = siteSettings.deliverySettings.premiumDeliveryDiscountPercentage;
      }
      return totalFee - totalFee * discountPercentage / 100;
    }, [selectedAddress, deliveryMethod, cart, allStores, siteSettings, user, flashSales]);
    const total = subtotalAfterDiscount + deliveryFee;
    const handleSaveAddress = (address) => {
      if (user) {
        addAddress(user.id, address);
        setIsAddingAddress(false);
      }
    };
    const handleConfirmOrder = () => {
      if (!user) return;
      if (deliveryMethod === "home-delivery" && !selectedAddress) {
        alert("Veuillez s\xE9lectionner une adresse de livraison.");
        return;
      }
      if (deliveryMethod === "pickup" && !selectedPickupPointId) {
        alert("Veuillez s\xE9lectionner un point de retrait.");
        return;
      }
      let finalShippingAddress;
      if (deliveryMethod === "home-delivery") {
        if (!selectedAddress) {
          alert("Veuillez s\xE9lectionner une adresse de livraison.");
          return;
        }
        finalShippingAddress = selectedAddress;
      } else {
        const pickupPoint = allPickupPoints.find((p) => p.id === selectedPickupPointId);
        finalShippingAddress = {
          id: `pickup-${pickupPoint?.id || "unknown"}`,
          fullName: user.name,
          phone: user.phone || "N/A",
          address: pickupPoint ? `${pickupPoint.name}, ${pickupPoint.neighborhood}` : "Point de retrait",
          city: pickupPoint?.city || ""
        };
      }
      const orderData = {
        userId: user.id,
        items: cart,
        subtotal,
        deliveryFee,
        total,
        shippingAddress: finalShippingAddress,
        deliveryMethod,
        pickupPointId: deliveryMethod === "pickup" ? selectedPickupPointId : void 0,
        appliedPromoCode: appliedPromoCode || void 0
      };
      onOrderConfirm(orderData);
    };
    if (cart.length === 0) {
      return /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "text-center p-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("p", { children: "Votre panier est vide." }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("button", { onClick: onBack, className: "mt-4 bg-kmer-green text-white px-4 py-2 rounded", children: "Retourner \xE0 la boutique" })
      ] });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "bg-gray-100 dark:bg-gray-900 min-h-screen", children: /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour au panier"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white mb-8", children: "Finaliser ma commande" }),
      /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "grid lg:grid-cols-3 gap-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "lg:col-span-2 space-y-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("h2", { className: "text-xl font-bold mb-4 dark:text-white", children: "1. M\xE9thode de livraison" }),
            /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex gap-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("button", { onClick: () => setDeliveryMethod("home-delivery"), className: `flex-1 p-4 border-2 rounded-lg text-left ${deliveryMethod === "home-delivery" ? "border-kmer-green" : "dark:border-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex items-center gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TruckIcon, { className: "w-6 h-6" }),
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("span", { className: "font-semibold", children: "Livraison \xE0 domicile" })
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("button", { onClick: () => setDeliveryMethod("pickup"), className: `flex-1 p-4 border-2 rounded-lg text-left ${deliveryMethod === "pickup" ? "border-kmer-green" : "dark:border-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex items-center gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(BuildingStorefrontIcon, { className: "w-6 h-6" }),
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("span", { className: "font-semibold", children: "Retrait en point relais" })
              ] }) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("h2", { className: "text-xl font-bold mb-4 dark:text-white", children: [
              "2. ",
              deliveryMethod === "home-delivery" ? "Adresse de livraison" : "Point de retrait"
            ] }),
            deliveryMethod === "home-delivery" ? /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "space-y-4", children: [
              user?.addresses?.map((addr) => /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { onClick: () => setSelectedAddressId(addr.id), className: `p-4 border-2 rounded-lg cursor-pointer flex items-start gap-4 ${selectedAddressId === addr.id ? "border-kmer-green" : "dark:border-gray-700"}`, children: [
                /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("input", { type: "radio", checked: selectedAddressId === addr.id, readOnly: true, className: "mt-1 h-4 w-4 text-kmer-green focus:ring-kmer-green" }),
                /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "text-sm", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("p", { className: "font-bold", children: addr.label }),
                  /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("address", { className: "not-italic", children: [
                    addr.fullName,
                    ", ",
                    addr.address,
                    ", ",
                    addr.city,
                    ", ",
                    addr.phone
                  ] })
                ] })
              ] }, addr.id)),
              !isAddingAddress && /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("button", { onClick: () => setIsAddingAddress(true), className: "flex items-center gap-2 text-kmer-green font-semibold", children: [
                /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(PlusIcon, { className: "w-5 h-5" }),
                " Ajouter une adresse"
              ] }),
              isAddingAddress && /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(AddressForm, { onSave: handleSaveAddress, onCancel: () => setIsAddingAddress(false) })
            ] }) : /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("select", { onChange: (e) => setSelectedPickupPointId(e.target.value), value: selectedPickupPointId, className: "w-full p-3 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: allPickupPoints.map((p) => /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("option", { value: p.id, children: [
              p.name,
              " - ",
              p.neighborhood,
              ", ",
              p.city
            ] }, p.id)) })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "lg:col-span-1", children: /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 sticky top-24", children: [
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("h2", { className: "text-xl font-bold border-b dark:border-gray-700 pb-4 mb-4 dark:text-white", children: "R\xE9sum\xE9 de la commande" }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "space-y-2 mb-4 max-h-60 overflow-y-auto", children: cart.map((item) => /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex items-center gap-3 text-sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("img", { src: item.imageUrls[0], alt: item.name, className: "w-12 h-12 rounded-md object-cover" }),
            /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex-grow", children: [
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("p", { className: "font-semibold line-clamp-1", children: item.name }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("p", { className: "text-xs text-gray-500", children: [
                "x ",
                item.quantity
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("p", { className: "font-semibold whitespace-nowrap", children: [
              (getFinalPrice(item, flashSales) * item.quantity).toLocaleString("fr-CM"),
              " F"
            ] })
          ] }, item.id + JSON.stringify(item.selectedVariant))) }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "space-y-3 dark:text-gray-300 border-t dark:border-gray-700 pt-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("span", { children: "Sous-total" }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("span", { className: "font-semibold dark:text-white", children: [
                subtotal.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] }),
            appliedPromoCode && /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex justify-between text-green-600 dark:text-green-400", children: [
              /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("span", { children: [
                "R\xE9duction (",
                appliedPromoCode.code,
                ")"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("span", { className: "font-semibold", children: [
                "- ",
                discount.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("span", { children: "Livraison" }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("span", { className: "font-semibold dark:text-white", children: [
                deliveryFee.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "border-t dark:border-gray-700 pt-4 mt-4 flex justify-between text-xl font-bold dark:text-white", children: [
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("span", { children: "Total" }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("span", { children: [
                total.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("button", { onClick: handleConfirmOrder, className: "w-full mt-6 bg-kmer-red text-white font-bold py-3 rounded-lg hover:bg-red-700 transition-colors", children: "Confirmer la commande" })
        ] }) })
      ] })
    ] }) });
  };
  var Checkout_default = Checkout;

  // components/OrderSuccess.tsx
  var import_react25 = __toESM(require_react());
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  var OrderSuccess = ({ order, onNavigateHome, onNavigateToOrders }) => {
    const qrCodeRef = (0, import_react25.useRef)(null);
    const { t } = useLanguage();
    (0, import_react25.useEffect)(() => {
      if (qrCodeRef.current && order?.trackingNumber && typeof QRCode !== "undefined") {
        QRCode.toCanvas(qrCodeRef.current, order.trackingNumber, { width: 160 }, (error) => {
          if (error) console.error(error);
        });
      }
    }, [order]);
    const handlePrint = () => {
      window.print();
    };
    if (!order) {
      return /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12 text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("h1", { className: "text-2xl font-bold", children: "Chargement de votre confirmation de commande..." }),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "mt-4", children: 'Si cette page ne se charge pas, vous pouvez retrouver votre commande dans la section "Mes Commandes".' }),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("button", { onClick: onNavigateToOrders, className: "mt-6 bg-kmer-green text-white font-bold py-3 px-6 rounded-full", children: "Voir mes commandes" })
      ] });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "container mx-auto px-4 sm:px-6 py-12 flex justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "text-center bg-white dark:bg-gray-800 p-6 sm:p-12 rounded-lg shadow-xl max-w-2xl w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "mx-auto flex items-center justify-center h-16 w-16 sm:h-20 sm:w-20 rounded-full bg-green-100 mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(CheckIcon, { className: "h-10 w-10 sm:h-12 sm:w-12 text-kmer-green" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("h1", { className: "text-2xl sm:text-3xl font-bold text-gray-800 dark:text-white mb-4", children: "Commande pass\xE9e avec succ\xE8s !" }),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-8 max-w-md mx-auto", children: "Merci pour votre achat. Votre commande est confirm\xE9e et sera pr\xE9par\xE9e pour exp\xE9dition." }),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "printable bg-gray-50 dark:bg-gray-900/50 border dark:border-gray-700 rounded-lg p-6 my-8 text-left space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex flex-col sm:flex-row justify-between items-start gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("h2", { className: "text-xl font-bold text-gray-800 dark:text-white", children: "R\xE9capitulatif" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
              "Commande #",
              order.id
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("p", { className: "text-sm font-semibold text-kmer-green", children: [
              "Total: ",
              order.total.toLocaleString("fr-CM"),
              " FCFA"
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("canvas", { ref: qrCodeRef, className: "rounded-lg shadow-sm mx-auto" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-sm font-semibold mt-2 dark:text-gray-200", children: "N\xB0 de suivi:" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "font-mono text-sm bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded-md inline-block", children: order.trackingNumber })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("h3", { className: "font-semibold dark:text-white", children: "Livraison \xE0:" }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("address", { className: "text-sm text-gray-600 dark:text-gray-300 not-italic", children: [
            order.shippingAddress.fullName,
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("br", {}),
            order.shippingAddress.address,
            ", ",
            order.shippingAddress.city,
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("br", {}),
            order.shippingAddress.phone
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex flex-col sm:flex-row gap-4 justify-center no-print", children: [
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
          "button",
          {
            onClick: onNavigateToOrders,
            className: "w-full sm:w-auto bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-800 dark:text-gray-200 font-bold py-3 px-6 rounded-full hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors",
            children: "Voir mes commandes"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
          "button",
          {
            onClick: onNavigateHome,
            className: "w-full sm:w-auto bg-kmer-green text-white font-bold py-3 px-6 rounded-full hover:bg-green-700 transition-colors",
            children: "Continuer mes achats"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("button", { onClick: handlePrint, className: "mt-6 text-sm text-gray-500 dark:text-gray-400 hover:underline flex items-center justify-center gap-2 mx-auto no-print", children: [
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(PrinterIcon, { className: "w-4 h-4" }),
        "Imprimer le re\xE7u"
      ] })
    ] }) });
  };
  var OrderSuccess_default = OrderSuccess;

  // components/StoresPage.tsx
  var import_react26 = __toESM(require_react());
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  var StoresPage = ({ stores, onBack, onVisitStore, onNavigateToStoresMap }) => {
    const [filters, setFilters] = (0, import_react26.useState)({
      search: "",
      city: "",
      category: "",
      premium: false
    });
    const [isMobileFiltersOpen, setIsMobileFiltersOpen] = (0, import_react26.useState)(false);
    const availableCities = (0, import_react26.useMemo)(() => [...new Set(stores.map((s) => s.location))], [stores]);
    const storeCategories = (0, import_react26.useMemo)(() => [...new Set(stores.map((s) => s.category))], [stores]);
    const filteredStores = (0, import_react26.useMemo)(() => {
      const filtered = stores.filter((store) => {
        const searchMatch = store.name.toLowerCase().includes(filters.search.toLowerCase());
        const cityMatch = !filters.city || store.location === filters.city;
        const categoryMatch = !filters.category || store.category === filters.category;
        const premiumMatch = !filters.premium || store.premiumStatus === "premium";
        return searchMatch && cityMatch && categoryMatch && premiumMatch;
      });
      return filtered.sort((a, b) => {
        if (a.premiumStatus === "premium" && b.premiumStatus !== "premium") return -1;
        if (a.premiumStatus !== "premium" && b.premiumStatus === "premium") return 1;
        return a.name.localeCompare(b.name);
      });
    }, [stores, filters]);
    const resetFilters = () => {
      setFilters({ search: "", city: "", category: "", premium: false });
    };
    const FilterPanel = () => /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("aside", { className: "w-full lg:w-72 lg:flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "p-6 bg-white dark:bg-gray-800 rounded-lg shadow-sm space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("label", { className: "font-semibold block mb-2", children: "Rechercher par nom" }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
          "input",
          {
            type: "text",
            value: filters.search,
            onChange: (e) => setFilters((f) => ({ ...f, search: e.target.value })),
            placeholder: "Nom de la boutique...",
            className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("label", { className: "font-semibold block mb-2", children: "Filtrer par ville" }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "flex flex-wrap gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("button", { onClick: () => setFilters((f) => ({ ...f, city: "" })), className: `px-3 py-1 rounded-full text-sm ${!filters.city ? "bg-kmer-green text-white" : "bg-gray-200 dark:bg-gray-700"}`, children: "Toutes" }),
          availableCities.map((city) => /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("button", { onClick: () => setFilters((f) => ({ ...f, city })), className: `px-3 py-1 rounded-full text-sm ${filters.city === city ? "bg-kmer-green text-white" : "bg-gray-200 dark:bg-gray-700"}`, children: city }, city))
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("label", { className: "font-semibold block mb-2", children: "Filtrer par cat\xE9gorie" }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("select", { value: filters.category, onChange: (e) => setFilters((f) => ({ ...f, category: e.target.value })), className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("option", { value: "", children: "Toutes les cat\xE9gories" }),
          storeCategories.map((cat) => /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("option", { value: cat, children: cat }, cat))
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("label", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("input", { type: "checkbox", checked: filters.premium, onChange: (e) => setFilters((f) => ({ ...f, premium: e.target.checked })), className: "h-4 w-4 rounded text-kmer-yellow focus:ring-kmer-yellow" }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("span", { children: "Boutiques Premium seulement" })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("button", { onClick: resetFilters, className: "w-full flex items-center justify-center gap-2 text-sm font-semibold text-gray-600 dark:text-gray-300 hover:text-kmer-red", children: [
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(ArrowPathIcon, { className: "w-4 h-4" }),
        "Effacer les filtres"
      ] })
    ] }) });
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour \xE0 l'accueil"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "lg:flex lg:gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "lg:hidden mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("button", { onClick: () => setIsMobileFiltersOpen(true), className: "w-full flex items-center justify-center gap-2 bg-white dark:bg-gray-800 p-3 rounded-lg shadow-md font-semibold", children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(FilterIcon, { className: "w-5 h-5" }),
          "Filtrer les boutiques"
        ] }) }),
        isMobileFiltersOpen && /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "fixed inset-0 bg-black/60 z-40 lg:hidden", onClick: () => setIsMobileFiltersOpen(false), children: /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "fixed inset-y-0 left-0 w-4/5 max-w-sm bg-gray-50 dark:bg-gray-800 shadow-xl overflow-y-auto", onClick: (e) => e.stopPropagation(), children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "flex justify-between items-center p-4 border-b dark:border-gray-700", children: [
            /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("h2", { className: "font-bold text-lg dark:text-white", children: "Filtres" }),
            /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("button", { onClick: () => setIsMobileFiltersOpen(false), children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(XIcon, { className: "w-6 h-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(FilterPanel, {})
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "hidden lg:block", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(FilterPanel, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("main", { className: "flex-grow", children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "flex flex-col sm:flex-row justify-between items-center mb-8 gap-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: "Nos boutiques partenaires" }),
              /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("p", { className: "text-gray-500", children: [
                filteredStores.length,
                " boutique(s) trouv\xE9e(s)"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("button", { onClick: onNavigateToStoresMap, className: "flex-shrink-0 flex items-center gap-2 bg-blue-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors", children: [
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(MapPinIcon, { className: "w-5 h-5" }),
              "Voir sur la carte"
            ] })
          ] }),
          filteredStores.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "grid grid-cols-2 md:grid-cols-3 gap-6", children: filteredStores.map((store) => /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(StoreCard_default, { store, onVisitStore }, store.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("h2", { className: "text-2xl font-semibold mb-2", children: "Aucune boutique trouv\xE9e" }),
            /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("p", { className: "text-gray-600", children: "Essayez de modifier vos filtres." })
          ] })
        ] })
      ] })
    ] });
  };
  var StoresPage_default = StoresPage;

  // components/BecomeSeller.tsx
  var import_react27 = __toESM(require_react());
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  var BecomeSeller = ({ onBack, onBecomeSeller, siteSettings }) => {
    const { t } = useLanguage();
    const [formData, setFormData] = (0, import_react27.useState)({
      shopName: "",
      location: "Douala",
      neighborhood: "",
      sellerFirstName: "",
      sellerLastName: "",
      sellerPhone: "",
      physicalAddress: "",
      logoUrl: "",
      latitude: void 0,
      longitude: void 0
    });
    const [logoPreview, setLogoPreview] = (0, import_react27.useState)(null);
    const [errors, setErrors] = (0, import_react27.useState)({});
    const mapContainerRef = (0, import_react27.useRef)(null);
    const mapRef = (0, import_react27.useRef)(null);
    const markerRef = (0, import_react27.useRef)(null);
    const updateMarkerAndForm = (0, import_react27.useCallback)((latlng) => {
      setFormData((prev) => ({ ...prev, latitude: latlng.lat, longitude: latlng.lng }));
      if (mapRef.current) {
        if (!markerRef.current) {
          markerRef.current = L.marker(latlng, { draggable: true }).addTo(mapRef.current);
          markerRef.current.on("dragend", (e) => updateMarkerAndForm(e.target.getLatLng()));
        } else {
          markerRef.current.setLatLng(latlng);
        }
        mapRef.current.panTo(latlng);
      }
    }, []);
    (0, import_react27.useEffect)(() => {
      if (mapContainerRef.current && !mapRef.current && typeof L !== "undefined") {
        const initialLatLng = [4.0511, 9.7679];
        mapRef.current = L.map(mapContainerRef.current).setView(initialLatLng, 13);
        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(mapRef.current);
        mapRef.current.on("click", (e) => updateMarkerAndForm(e.latlng));
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            (position) => {
              const { latitude, longitude } = position.coords;
              const userLatLng = { lat: latitude, lng: longitude };
              mapRef.current.setView(userLatLng, 15);
              updateMarkerAndForm(userLatLng);
            },
            (error) => {
              console.warn(`Geolocation error: ${error.message}`);
              updateMarkerAndForm({ lat: initialLatLng[0], lng: initialLatLng[1] });
            },
            { timeout: 1e4 }
          );
        } else {
          updateMarkerAndForm({ lat: initialLatLng[0], lng: initialLatLng[1] });
        }
        setTimeout(() => mapRef.current?.invalidateSize(), 400);
      }
    }, [updateMarkerAndForm]);
    const handleGeolocate = () => {
      if (navigator.geolocation && mapRef.current) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const { latitude, longitude } = position.coords;
            const userLatLng = { lat: latitude, lng: longitude };
            mapRef.current.setView(userLatLng, 15);
            updateMarkerAndForm(userLatLng);
          },
          (error) => {
            alert(`Erreur de g\xE9olocalisation: ${error.message}`);
          },
          { enableHighAccuracy: true }
        );
      } else {
        alert("La g\xE9olocalisation n'est pas support\xE9e par votre navigateur.");
      }
    };
    const handleChange = (e) => {
      const { name, value } = e.target;
      setFormData((prev) => ({ ...prev, [name]: value }));
      if (errors[name]) {
        setErrors((prev) => ({ ...prev, [name]: void 0 }));
      }
    };
    const handleLogoChange = (e) => {
      if (e.target.files && e.target.files[0]) {
        const file = e.target.files[0];
        const reader = new FileReader();
        reader.onloadend = () => {
          const result = reader.result;
          setLogoPreview(result);
          setFormData((prev) => ({ ...prev, logoUrl: result }));
        };
        reader.readAsDataURL(file);
      }
    };
    const validate = () => {
      const newErrors = {};
      if (!formData.shopName.trim()) newErrors.shopName = t("becomeSeller.errors.shopName");
      if (!formData.sellerFirstName.trim()) newErrors.sellerFirstName = t("becomeSeller.errors.firstName");
      if (!formData.sellerLastName.trim()) newErrors.sellerLastName = t("becomeSeller.errors.lastName");
      if (!formData.sellerPhone.trim()) newErrors.sellerPhone = t("becomeSeller.errors.phone");
      if (!formData.physicalAddress.trim()) newErrors.physicalAddress = t("becomeSeller.errors.address");
      if (!formData.logoUrl) newErrors.logoUrl = t("becomeSeller.errors.logo");
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        onBecomeSeller(
          formData.shopName,
          formData.location,
          formData.neighborhood,
          formData.sellerFirstName,
          formData.sellerLastName,
          formData.sellerPhone,
          formData.physicalAddress,
          formData.logoUrl,
          formData.latitude,
          formData.longitude
        );
      }
    };
    const requiredDocuments = Object.entries(siteSettings.requiredSellerDocuments).filter(([, isRequired]) => isRequired).map(([name]) => name);
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "bg-gray-50 dark:bg-gray-900 py-12", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "container mx-auto px-4 sm:px-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        t("common.backToHome")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "max-w-4xl mx-auto bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "text-center mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(BecomeSellerIcon, { className: "w-12 h-12 mx-auto text-kmer-green" }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white mt-4", children: t("becomeSeller.title") }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mt-2", children: t("becomeSeller.subtitle") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("fieldset", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("legend", { className: "px-2 font-semibold text-lg dark:text-gray-200", children: t("becomeSeller.step1Title") }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 pt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("label", { htmlFor: "shopName", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.shopNameLabel") }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("input", { type: "text", id: "shopName", name: "shopName", value: formData.shopName, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }),
                errors.shopName && /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("p", { className: "text-red-500 text-xs mt-1", children: errors.shopName })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("label", { className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.shopLogoLabel") }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "mt-1 flex items-center gap-4", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "h-20 w-20 rounded-md bg-gray-100 dark:bg-gray-700 p-1 flex items-center justify-center", children: logoPreview ? /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("img", { src: logoPreview, alt: "Logo", className: "h-full w-full object-contain rounded-md" }) : /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(PhotoIcon, { className: "w-10 h-10 text-gray-400" }) }),
                  /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("label", { htmlFor: "logo-upload", className: "cursor-pointer bg-white dark:bg-gray-700 py-2 px-3 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center gap-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(PhotoIcon, { className: "w-5 h-5" }),
                    " ",
                    t("becomeSeller.upload"),
                    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("input", { id: "logo-upload", type: "file", className: "sr-only", onChange: handleLogoChange, accept: "image/*" })
                  ] })
                ] }),
                errors.logoUrl && /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("p", { className: "text-red-500 text-xs mt-1", children: errors.logoUrl })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("fieldset", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("legend", { className: "px-2 font-semibold text-lg dark:text-gray-200", children: t("becomeSeller.step2Title") }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 pt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("label", { htmlFor: "sellerFirstName", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.firstNameLabel") }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("input", { type: "text", id: "sellerFirstName", name: "sellerFirstName", value: formData.sellerFirstName, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }),
                errors.sellerFirstName && /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("p", { className: "text-red-500 text-xs mt-1", children: errors.sellerFirstName })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("label", { htmlFor: "sellerLastName", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.lastNameLabel") }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("input", { type: "text", id: "sellerLastName", name: "sellerLastName", value: formData.sellerLastName, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }),
                errors.sellerLastName && /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("p", { className: "text-red-500 text-xs mt-1", children: errors.sellerLastName })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "md:col-span-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("label", { htmlFor: "sellerPhone", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.phoneLabel") }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("input", { type: "tel", id: "sellerPhone", name: "sellerPhone", value: formData.sellerPhone, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }),
                errors.sellerPhone && /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("p", { className: "text-red-500 text-xs mt-1", children: errors.sellerPhone })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("fieldset", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("legend", { className: "px-2 font-semibold text-lg dark:text-gray-200", children: t("becomeSeller.step3Title") }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 pt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("label", { htmlFor: "location", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.cityLabel") }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("select", { id: "location", name: "location", value: formData.location, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("option", { children: "Douala" }),
                  /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("option", { children: "Yaound\xE9" }),
                  /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("option", { children: "Bafoussam" })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("label", { htmlFor: "neighborhood", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.neighborhoodLabel") }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("input", { type: "text", id: "neighborhood", name: "neighborhood", value: formData.neighborhood, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "md:col-span-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("label", { htmlFor: "physicalAddress", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.addressLabel") }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("textarea", { id: "physicalAddress", name: "physicalAddress", value: formData.physicalAddress, onChange: handleChange, rows: 2, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }),
                errors.physicalAddress && /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("p", { className: "text-red-500 text-xs mt-1", children: errors.physicalAddress })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "md:col-span-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "flex justify-between items-center mb-1", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("label", { className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.gpsLabel") }),
                  /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("button", { type: "button", onClick: handleGeolocate, className: "flex items-center gap-2 text-sm font-semibold text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(MapPinIcon, { className: "w-4 h-4" }),
                    t("becomeSeller.findMyPosition")
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: t("becomeSeller.gpsDescription") }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { ref: mapContainerRef, className: "h-64 w-full mt-2 rounded-md z-0" })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "p-4 border-l-4 border-kmer-green bg-green-50 dark:bg-green-900/20 rounded-r-lg", children: [
            /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("h2", { className: "text-lg font-semibold flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(DocumentTextIcon, { className: "w-5 h-5" }),
              " ",
              t("becomeSeller.requiredDocsTitle")
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("p", { className: "text-sm mt-2 text-gray-700 dark:text-gray-300", children: t("becomeSeller.requiredDocsDescription") }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("ul", { className: "list-disc list-inside mt-2 space-y-1 text-sm text-gray-700 dark:text-gray-300", children: requiredDocuments.map((doc) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("li", { children: doc }, doc)) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "flex justify-end pt-4", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("button", { type: "submit", className: "bg-kmer-green text-white font-bold py-3 px-8 rounded-lg hover:bg-green-700 transition-colors text-lg", children: t("becomeSeller.submitCandidacy") }) })
        ] })
      ] })
    ] }) });
  };
  var BecomeSeller_default = BecomeSeller;

  // components/CategoryPage.tsx
  var import_react30 = __toESM(require_react());

  // hooks/useProductFiltering.ts
  var import_react28 = __toESM(require_react());
  var getActiveFlashSalePrice5 = (productId, flashSales) => {
    const now = /* @__PURE__ */ new Date();
    for (const sale of flashSales) {
      const startDate = new Date(sale.startDate);
      const endDate = new Date(sale.endDate);
      if (now >= startDate && now <= endDate) {
        const productInSale = sale.products.find((p) => p.productId === productId && p.status === "approved");
        if (productInSale) return productInSale.flashPrice;
      }
    }
    return null;
  };
  var isPromotionActive5 = (product) => {
    if (!product.promotionPrice || product.promotionPrice >= product.price) {
      return false;
    }
    const now = /* @__PURE__ */ new Date();
    const startDate = product.promotionStartDate ? /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") : null;
    const endDate = product.promotionEndDate ? /* @__PURE__ */ new Date(product.promotionEndDate + "T23:59:59") : null;
    if (!startDate && !endDate) return false;
    if (startDate && endDate) return now >= startDate && now <= endDate;
    if (startDate) return now >= startDate;
    if (endDate) return now <= endDate;
    return false;
  };
  var getFinalPrice2 = (product, flashSales = []) => {
    const flashPrice = getActiveFlashSalePrice5(product.id, flashSales);
    if (flashPrice !== null) return flashPrice;
    if (isPromotionActive5(product)) return product.promotionPrice;
    return product.price;
  };
  var getAverageRating = (product) => {
    const approvedReviews = product.reviews.filter((r) => r.status === "approved");
    if (approvedReviews.length === 0) return 0;
    return approvedReviews.reduce((sum, review) => sum + review.rating, 0) / approvedReviews.length;
  };
  var initialFilters = {
    sort: "relevance",
    priceMin: void 0,
    priceMax: void 0,
    vendors: [],
    brands: [],
    minRating: 0
  };
  var useProductFiltering = (products, allStores) => {
    const [filters, setFilters] = (0, import_react28.useState)({
      ...initialFilters,
      key: Date.now()
      // Force reset when component mounts
    });
    (0, import_react28.useEffect)(() => {
      setFilters((prev) => ({ ...initialFilters, key: prev.key }));
    }, [products]);
    const resetFilters = () => setFilters((prev) => ({ ...initialFilters, key: prev.key }));
    const filteredAndSortedProducts = (0, import_react28.useMemo)(() => {
      let filtered = [...products];
      if (filters.priceMin !== void 0) {
        filtered = filtered.filter((p) => getFinalPrice2(p) >= filters.priceMin);
      }
      if (filters.priceMax !== void 0) {
        filtered = filtered.filter((p) => getFinalPrice2(p) <= filters.priceMax);
      }
      if (filters.vendors.length > 0) {
        filtered = filtered.filter((p) => filters.vendors.includes(p.vendor));
      }
      if (filters.brands.length > 0) {
        filtered = filtered.filter((p) => p.brand && filters.brands.includes(p.brand));
      }
      if (filters.minRating > 0) {
        filtered = filtered.filter((p) => getAverageRating(p) >= filters.minRating);
      }
      const premiumVendors = new Set(allStores.filter((s) => s.premiumStatus === "premium").map((s) => s.name));
      const premiumSort = (a, b) => {
        const aIsPremium = premiumVendors.has(a.vendor);
        const bIsPremium = premiumVendors.has(b.vendor);
        if (aIsPremium && !bIsPremium) return -1;
        if (!aIsPremium && bIsPremium) return 1;
        return 0;
      };
      switch (filters.sort) {
        case "price-asc":
          filtered.sort((a, b) => premiumSort(a, b) || getFinalPrice2(a) - getFinalPrice2(b));
          break;
        case "price-desc":
          filtered.sort((a, b) => premiumSort(a, b) || getFinalPrice2(b) - getFinalPrice2(a));
          break;
        case "rating-desc":
          filtered.sort((a, b) => premiumSort(a, b) || getAverageRating(b) - getAverageRating(a));
          break;
        case "newest-desc":
          filtered.sort((a, b) => premiumSort(a, b) || parseInt(b.id) - parseInt(a.id));
          break;
        case "relevance":
        default:
          filtered.sort(premiumSort);
          break;
      }
      return filtered;
    }, [products, filters, allStores]);
    return {
      filteredAndSortedProducts,
      filters,
      setFilters,
      resetFilters
    };
  };

  // components/ProductFilters.tsx
  var import_react29 = __toESM(require_react());
  var import_jsx_runtime33 = __toESM(require_jsx_runtime());
  var getFinalPrice3 = (product) => {
    return product.promotionPrice ?? product.price;
  };
  var SortOptions = {
    "relevance": "Pertinence",
    "price-asc": "Prix : Croissant",
    "price-desc": "Prix : D\xE9croissant",
    "rating-desc": "Mieux not\xE9s",
    "newest-desc": "Plus r\xE9cents"
  };
  var ProductFilters = ({ allProducts, filters, setFilters, resetFilters }) => {
    const [isFilterOpen, setIsFilterOpen] = (0, import_react29.useState)(false);
    const [localFilters, setLocalFilters] = (0, import_react29.useState)(filters);
    (0, import_react29.useEffect)(() => {
      setLocalFilters(filters);
    }, [filters]);
    const availableVendors = (0, import_react29.useMemo)(() => {
      return [...new Set(allProducts.map((p) => p.vendor))].sort();
    }, [allProducts]);
    const availableBrands = (0, import_react29.useMemo)(() => {
      return [...new Set(allProducts.map((p) => p.brand).filter(Boolean))].sort();
    }, [allProducts]);
    const priceRange = (0, import_react29.useMemo)(() => {
      if (allProducts.length === 0) return { min: 0, max: 1e5 };
      const prices = allProducts.map(getFinalPrice3);
      return {
        min: Math.floor(Math.min(...prices) / 1e3) * 1e3,
        max: Math.ceil(Math.max(...prices) / 1e3) * 1e3
      };
    }, [allProducts]);
    const activeFilterCount = (0, import_react29.useMemo)(() => {
      const { priceMin, priceMax, vendors, brands, minRating } = filters;
      let count = 0;
      if (priceMin !== void 0 && priceMin !== priceRange.min) count++;
      if (priceMax !== void 0 && priceMax !== priceRange.max) count++;
      if (vendors.length > 0) count++;
      if (brands.length > 0) count++;
      if (minRating > 0) count++;
      return count;
    }, [filters, priceRange]);
    const handleApplyFilters = () => {
      setFilters(localFilters);
      setIsFilterOpen(false);
    };
    const handleResetAndApply = () => {
      resetFilters();
      setIsFilterOpen(false);
    };
    const handleVendorChange = (vendor) => {
      setLocalFilters((prev) => ({
        ...prev,
        vendors: prev.vendors.includes(vendor) ? prev.vendors.filter((v) => v !== vendor) : [...prev.vendors, vendor]
      }));
    };
    const handleBrandChange = (brand) => {
      setLocalFilters((prev) => ({
        ...prev,
        brands: prev.brands.includes(brand) ? prev.brands.filter((b) => b !== brand) : [...prev.brands, brand]
      }));
    };
    const filterContent = /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "p-4 space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("h3", { className: "font-semibold mb-2 dark:text-gray-200", children: "Prix (FCFA)" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
            "input",
            {
              type: "number",
              placeholder: `Min (${priceRange.min})`,
              value: localFilters.priceMin ?? "",
              onChange: (e) => setLocalFilters((f) => ({ ...f, priceMin: e.target.value ? parseInt(e.target.value) : void 0 })),
              className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 text-sm"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { children: "-" }),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
            "input",
            {
              type: "number",
              placeholder: `Max (${priceRange.max})`,
              value: localFilters.priceMax ?? "",
              onChange: (e) => setLocalFilters((f) => ({ ...f, priceMax: e.target.value ? parseInt(e.target.value) : void 0 })),
              className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 text-sm"
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("h3", { className: "font-semibold mb-2 dark:text-gray-200", children: "Boutiques" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "space-y-1 max-h-48 overflow-y-auto", children: availableVendors.map((vendor) => /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("label", { className: "flex items-center gap-2 text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
            "input",
            {
              type: "checkbox",
              checked: localFilters.vendors.includes(vendor),
              onChange: () => handleVendorChange(vendor),
              className: "h-4 w-4 rounded border-gray-300 text-kmer-green focus:ring-kmer-green"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "dark:text-gray-300", children: vendor })
        ] }, vendor)) })
      ] }),
      availableBrands.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("h3", { className: "font-semibold mb-2 dark:text-gray-200", children: "Marques" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "space-y-1 max-h-48 overflow-y-auto", children: availableBrands.map((brand) => /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("label", { className: "flex items-center gap-2 text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
            "input",
            {
              type: "checkbox",
              checked: localFilters.brands.includes(brand),
              onChange: () => handleBrandChange(brand),
              className: "h-4 w-4 rounded border-gray-300 text-kmer-green focus:ring-kmer-green"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "dark:text-gray-300", children: brand })
        ] }, brand)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("h3", { className: "font-semibold mb-2 dark:text-gray-200", children: "Note minimale" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex justify-around", children: [4, 3, 2, 1].map((rating) => /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
          "button",
          {
            onClick: () => setLocalFilters((f) => ({ ...f, minRating: f.minRating === rating ? 0 : rating })),
            className: `flex items-center gap-1 p-2 rounded-md transition-colors ${localFilters.minRating === rating ? "bg-kmer-yellow/20 text-kmer-yellow" : "hover:bg-gray-100 dark:hover:bg-gray-700"}`,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(StarIcon, { className: "w-4 h-4 text-kmer-yellow" }),
              /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("span", { className: "text-sm font-semibold", children: [
                rating,
                "+"
              ] })
            ]
          },
          rating
        )) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex flex-col gap-2 pt-4 border-t dark:border-gray-600", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("button", { onClick: handleApplyFilters, className: "w-full bg-kmer-green text-white font-bold py-2 rounded-lg", children: "Appliquer" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("button", { onClick: handleResetAndApply, className: "w-full flex items-center justify-center gap-2 bg-gray-200 dark:bg-gray-600 font-semibold py-2 rounded-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ArrowPathIcon, { className: "w-4 h-4" }),
          " R\xE9initialiser"
        ] })
      ] })
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(import_jsx_runtime33.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "lg:hidden mb-4 flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("button", { onClick: () => setIsFilterOpen(true), className: `relative flex items-center gap-2 font-bold p-2 rounded-md ${activeFilterCount > 0 ? "bg-kmer-green/20 text-kmer-green" : "bg-kmer-green/10 text-kmer-green"}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(FilterIcon, { className: "w-5 h-5" }),
          " Filtres",
          activeFilterCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "absolute -top-1 -right-1 flex h-5 w-5 items-center justify-center rounded-full bg-kmer-red text-white text-xs", children: activeFilterCount })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          "select",
          {
            value: filters.sort,
            onChange: (e) => setFilters((f) => ({ ...f, sort: e.target.value })),
            className: "p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 text-sm font-semibold",
            children: Object.keys(SortOptions).map((key) => /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("option", { value: key, children: SortOptions[key] }, key))
          }
        )
      ] }),
      isFilterOpen && /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "fixed inset-0 bg-black/50 z-40 lg:hidden", onClick: () => setIsFilterOpen(false), children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "fixed inset-y-0 left-0 w-4/5 max-w-sm bg-white dark:bg-gray-800 shadow-xl", onClick: (e) => e.stopPropagation(), children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex justify-between items-center p-4 border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("h2", { className: "font-bold text-lg dark:text-white", children: "Filtres" }),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("button", { onClick: () => setIsFilterOpen(false), children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(XIcon, { className: "w-6 h-6" }) })
        ] }),
        filterContent
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("aside", { className: "hidden lg:block w-72 flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-sm sticky top-28", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "p-4 border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("label", { htmlFor: "sort-desktop", className: "text-sm font-medium dark:text-gray-400", children: "Trier par" }),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
            "select",
            {
              id: "sort-desktop",
              value: filters.sort,
              onChange: (e) => setFilters((f) => ({ ...f, sort: e.target.value })),
              className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 font-semibold focus:ring-1 focus:ring-kmer-green",
              children: Object.keys(SortOptions).map((key) => /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("option", { value: key, children: SortOptions[key] }, key))
            }
          )
        ] }),
        filterContent
      ] }) })
    ] });
  };
  var ProductFilters_default = ProductFilters;

  // components/CategoryPage.tsx
  var import_jsx_runtime34 = __toESM(require_jsx_runtime());
  var CategoryPage = ({ categoryId, allCategories, allProducts, allStores, flashSales, onProductClick, onBack, onVendorClick, isComparisonEnabled }) => {
    const { selectedCategory, productsInCategory } = (0, import_react30.useMemo)(() => {
      const selectedCat = allCategories.find((c) => c.id === categoryId);
      if (!selectedCat) {
        return { selectedCategory: null, productsInCategory: [] };
      }
      let categoryIdsToFilter;
      if (!selectedCat.parentId) {
        const subCategoryIds = allCategories.filter((c) => c.parentId === selectedCat.id).map((c) => c.id);
        categoryIdsToFilter = [selectedCat.id, ...subCategoryIds];
      } else {
        categoryIdsToFilter = [selectedCat.id];
      }
      const filteredProducts = allProducts.filter((p) => categoryIdsToFilter.includes(p.categoryId));
      return { selectedCategory: selectedCat, productsInCategory: filteredProducts };
    }, [allProducts, categoryId, allCategories]);
    const { filteredAndSortedProducts, filters, setFilters, resetFilters } = useProductFiltering(productsInCategory, allStores);
    const findStoreLocation = (vendorName) => allStores.find((s) => s.name === vendorName)?.location;
    if (!selectedCategory) {
      return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12 text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("p", { children: "Cat\xE9gorie non trouv\xE9e." }),
        /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("button", { onClick: onBack, className: "mt-4 text-kmer-green font-semibold", children: "Retour" })
      ] });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour \xE0 l'accueil"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "lg:flex lg:gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
          ProductFilters_default,
          {
            allProducts: productsInCategory,
            filters,
            setFilters,
            resetFilters
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("main", { className: "flex-grow", children: [
          /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "mb-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: [
              "Cat\xE9gorie: ",
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { className: "text-kmer-green", children: selectedCategory.name })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("p", { className: "text-gray-600 dark:text-gray-300", children: [
              filteredAndSortedProducts.length,
              " sur ",
              productsInCategory.length,
              " produits affich\xE9s"
            ] })
          ] }),
          filteredAndSortedProducts.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6", children: filteredAndSortedProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: findStoreLocation(product.vendor), flashSales, isComparisonEnabled, stores: allStores }, product.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md h-full flex flex-col justify-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: "Aucun produit ne correspond \xE0 vos filtres." }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: "Essayez d'\xE9largir votre recherche." })
          ] })
        ] })
      ] })
    ] });
  };
  var CategoryPage_default = CategoryPage;

  // components/SellerDashboard.tsx
  var import_react39 = __toESM(require_react());

  // components/seller/OverviewPanel.tsx
  var import_jsx_runtime35 = __toESM(require_jsx_runtime());
  var StatCard = ({ label, value, icon }) => /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("div", { className: "p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg shadow-sm", children: /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex items-center gap-3", children: [
    icon,
    /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("h3", { className: "text-sm font-medium text-gray-500 dark:text-gray-400", children: label }),
      /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("p", { className: "text-2xl font-bold text-gray-800 dark:text-white", children: value })
    ] })
  ] }) });
  var OverviewPanel = ({ store, sellerOrders, sellerNotifications, onNavigateToAnalytics, setActiveTab }) => {
    const { t } = useLanguage();
    const totalRevenue = sellerOrders.filter((o) => o.status === "delivered").reduce((sum, o) => sum + o.total, 0);
    const pendingOrders = sellerOrders.filter((o) => ["confirmed", "ready-for-pickup"].includes(o.status)).length;
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "p-6 space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("h2", { className: "text-2xl font-bold", children: t("sellerDashboard.overview.title", store.name) }),
      /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(StatCard, { label: t("sellerDashboard.overview.totalRevenue"), value: `${totalRevenue.toLocaleString("fr-CM")} FCFA`, icon: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(ChartPieIcon, { className: "w-6 h-6 text-green-500" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(StatCard, { label: t("sellerDashboard.overview.pendingOrders"), value: pendingOrders, icon: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(ShoppingBagIcon, { className: "w-6 h-6 text-yellow-500" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(StatCard, { label: t("sellerDashboard.overview.status"), value: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("span", { className: "capitalize", children: store.premiumStatus.replace("_", " ") }), icon: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(StarIcon, { className: "w-6 h-6 text-blue-500" }) })
      ] }),
      store.warnings && store.warnings.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "p-4 bg-red-50 dark:bg-red-900/50 border-l-4 border-red-500 rounded-r-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("h3", { className: "font-bold text-lg text-red-800 dark:text-red-200 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(ExclamationTriangleIcon, { className: "w-6 h-6" }),
          " ",
          t("sellerDashboard.overview.warnings")
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("ul", { className: "list-disc list-inside mt-2 text-sm text-red-700 dark:text-red-300", children: store.warnings.map((w) => /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("li", { children: [
          "Le ",
          new Date(w.date).toLocaleDateString(),
          ": ",
          w.reason
        ] }, w.id)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "p-4 bg-blue-50 dark:bg-blue-900/50 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("h3", { className: "font-bold text-lg text-blue-800 dark:text-blue-200 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(BellIcon, { className: "w-6 h-6" }),
          " ",
          t("sellerDashboard.overview.notifications")
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("ul", { className: "mt-2 space-y-1 text-sm", children: [
          sellerNotifications.slice(0, 3).map((n) => /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("li", { className: "text-blue-700 dark:text-blue-300", children: n.message }, n.id)),
          sellerNotifications.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("p", { className: "text-gray-500", children: t("sellerDashboard.overview.noNotifications") })
        ] })
      ] })
    ] });
  };
  var OverviewPanel_default = OverviewPanel;

  // components/seller/ProductsPanel.tsx
  var import_jsx_runtime36 = __toESM(require_jsx_runtime());
  var ProductsPanel = ({ products, onAddProduct, onEditProduct, onDeleteProduct, onUpdateProductStatus, onSetPromotion, onAddProductToStory }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { className: "flex justify-between items-center mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("h2", { className: "text-2xl font-bold", children: t("sellerDashboard.products.title", products.length) }),
        /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("button", { onClick: onAddProduct, className: "bg-green-500 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(PlusIcon, { className: "w-5 h-5" }),
          " ",
          t("sellerDashboard.products.addProduct")
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { className: "overflow-x-auto", children: [
        /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("table", { className: "w-full text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("th", { className: "p-2 text-left", children: t("sellerDashboard.products.table.product") }),
            /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("th", { className: "p-2 text-right", children: t("sellerDashboard.products.table.price") }),
            /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("th", { className: "p-2 text-center", children: t("sellerDashboard.products.table.stock") }),
            /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("th", { className: "p-2 text-center", children: t("sellerDashboard.products.table.status") }),
            /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("th", { className: "p-2 text-center", children: t("sellerDashboard.products.table.actions") })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("tbody", { children: products.map((p) => /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
            /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("td", { className: "p-2 flex items-center gap-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("img", { src: p.imageUrls[0], alt: p.name, className: "w-12 h-12 object-cover rounded-md" }),
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("span", { className: "font-semibold", children: p.name })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("td", { className: "p-2 text-right", children: [
              p.price.toLocaleString("fr-CM"),
              " FCFA"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("td", { className: "p-2 text-center", children: p.stock }),
            /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("td", { className: "p-2 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("select", { value: p.status, onChange: (e) => onUpdateProductStatus(p.id, e.target.value), className: "p-1 border rounded-md text-xs dark:bg-gray-600 dark:border-gray-500", children: [
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("option", { value: "published", children: t("sellerDashboard.products.statusOptions.published") }),
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("option", { value: "draft", children: t("sellerDashboard.products.statusOptions.draft") }),
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("option", { value: "archived", children: t("sellerDashboard.products.statusOptions.archived") })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("td", { className: "p-2", children: /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { className: "flex justify-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("button", { onClick: () => onAddProductToStory(p.id), className: "text-purple-500", title: "Ajouter \xE0 la story", children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(SparklesIcon, { className: "w-5 h-5" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("button", { onClick: () => onSetPromotion(p), className: "text-yellow-500", title: t("sellerDashboard.products.actions.promote"), children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(TagIcon, { className: "w-5 h-5" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("button", { onClick: () => onEditProduct(p), className: "text-blue-500", title: t("sellerDashboard.products.actions.edit"), children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(PencilSquareIcon, { className: "w-5 h-5" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("button", { onClick: () => onDeleteProduct(p.id), className: "text-red-500", title: t("sellerDashboard.products.actions.delete"), children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(TrashIcon, { className: "w-5 h-5" }) })
            ] }) })
          ] }, p.id)) })
        ] }),
        products.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("p", { className: "text-center text-gray-500 py-8", children: t("sellerDashboard.products.noProducts") })
      ] })
    ] });
  };
  var ProductsPanel_default = ProductsPanel;

  // components/seller/OrdersPanel.tsx
  var import_jsx_runtime37 = __toESM(require_jsx_runtime());
  var statusTranslations = {
    confirmed: "Confirm\xE9e",
    "ready-for-pickup": "Pr\xEAt pour enl\xE8vement",
    "picked-up": "Pris en charge",
    "at-depot": "Au d\xE9p\xF4t",
    "out-for-delivery": "En livraison",
    delivered: "Livr\xE9",
    cancelled: "Annul\xE9",
    "refund-requested": "Litige",
    refunded: "Rembours\xE9",
    returned: "Retourn\xE9",
    "depot-issue": "Probl\xE8me au d\xE9p\xF4t",
    "delivery-failed": "\xC9chec de livraison"
  };
  var OrdersPanel = ({ sellerOrders, onUpdateOrderStatus, onSellerCancelOrder }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("h2", { className: "text-2xl font-bold mb-4", children: t("sellerDashboard.orders.title", sellerOrders.length) }),
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "overflow-x-auto", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("table", { className: "w-full text-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("th", { className: "p-2 text-left", children: t("sellerDashboard.orders.table.orderId") }),
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("th", { className: "p-2 text-left", children: t("sellerDashboard.orders.table.customer") }),
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("th", { className: "p-2 text-right", children: t("sellerDashboard.orders.table.total") }),
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("th", { className: "p-2 text-center", children: t("sellerDashboard.orders.table.status") }),
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("th", { className: "p-2 text-center", children: t("sellerDashboard.orders.table.action") })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("tbody", { children: sellerOrders.map((order) => /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("td", { className: "p-2 font-mono", children: order.id }),
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("td", { className: "p-2", children: order.shippingAddress.fullName }),
          /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("td", { className: "p-2 text-right font-semibold", children: [
            order.total.toLocaleString("fr-CM"),
            " FCFA"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("td", { className: "p-2 text-center capitalize", children: statusTranslations[order.status] || order.status }),
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("td", { className: "p-2 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "flex justify-center items-center gap-2", children: [
            order.status === "confirmed" && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("button", { onClick: () => onUpdateOrderStatus(order.id, "ready-for-pickup"), className: "bg-blue-500 text-white text-xs font-bold py-1 px-2 rounded-md hover:bg-blue-600", children: t("sellerDashboard.orders.markReady") }),
            order.status === "confirmed" && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("button", { onClick: () => {
              if (window.confirm(t("sellerDashboard.orders.cancelConfirm"))) {
                onSellerCancelOrder(order.id);
              }
            }, className: "bg-red-500 text-white text-xs font-bold py-1 px-2 rounded-md hover:bg-red-600", children: t("sellerDashboard.orders.cancelOrder") })
          ] }) })
        ] }, order.id)) })
      ] }) })
    ] });
  };
  var OrdersPanel_default = OrdersPanel;

  // components/seller/ReviewsPanel.tsx
  var import_react31 = __toESM(require_react());
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  var ReviewsPanel = ({ products, onReplyToReview }) => {
    const { t } = useLanguage();
    const allReviews = products.flatMap((p) => p.reviews.map((r) => ({ ...r, productId: p.id, productName: p.name })));
    const [replyingTo, setReplyingTo] = (0, import_react31.useState)(null);
    const [replyText, setReplyText] = (0, import_react31.useState)("");
    const handleReply = (productId, review) => {
      onReplyToReview(productId, { author: review.author, date: review.date }, replyText);
      setReplyingTo(null);
      setReplyText("");
    };
    return /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("h2", { className: "text-2xl font-bold mb-4", children: t("sellerDashboard.reviews.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "space-y-4", children: allReviews.map((review) => /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("p", { className: "font-semibold text-kmer-green", children: review.productName }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(StarIcon, { className: "w-4 h-4 text-yellow-400" }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("span", { children: t("sellerDashboard.reviews.rating", review.rating, review.author) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("p", { className: "italic", children: [
          '"',
          review.comment,
          '"'
        ] }),
        review.sellerReply ? /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "mt-2 p-2 bg-green-100 dark:bg-green-900/50 rounded-md text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("strong", { children: t("sellerDashboard.reviews.yourReply") }),
          " ",
          review.sellerReply.text
        ] }) : replyingTo === `${review.productId}-${review.date}` ? /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "mt-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("textarea", { value: replyText, onChange: (e) => setReplyText(e.target.value), rows: 2, className: "w-full p-1 border rounded" }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("button", { onClick: () => handleReply(review.productId, review), className: "bg-blue-500 text-white text-xs px-2 py-1 rounded", children: t("sellerDashboard.reviews.send") })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("button", { onClick: () => setReplyingTo(`${review.productId}-${review.date}`), className: "text-sm text-blue-500 mt-2", children: t("sellerDashboard.reviews.reply") })
      ] }, `${review.productId}-${review.date}`)) })
    ] });
  };
  var ReviewsPanel_default = ReviewsPanel;

  // components/seller/PromotionsPanel.tsx
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  var PromotionsPanel = ({ promoCodes, onCreatePromoCode, onDeletePromoCode }) => {
    const { t } = useLanguage();
    const handleCreate = (e) => {
      e.preventDefault();
      const formData = new FormData(e.currentTarget);
      const newCode = {
        code: formData.get("code"),
        discountType: formData.get("discountType"),
        discountValue: Number(formData.get("discountValue"))
      };
      onCreatePromoCode({ ...newCode, sellerId: "seller-1" });
      e.currentTarget.reset();
    };
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("h2", { className: "text-2xl font-bold mb-4", children: t("sellerDashboard.promotions.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("form", { onSubmit: handleCreate, className: "p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg grid grid-cols-3 gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("input", { name: "code", placeholder: t("sellerDashboard.promotions.createForm.code"), className: "p-2 border rounded", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("input", { name: "discountValue", type: "number", placeholder: t("sellerDashboard.promotions.createForm.value"), className: "p-2 border rounded", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("select", { name: "discountType", className: "p-2 border rounded", children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("option", { value: "percentage", children: t("sellerDashboard.promotions.createForm.type_percentage") }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("option", { value: "fixed", children: t("sellerDashboard.promotions.createForm.type_fixed") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("button", { type: "submit", className: "col-span-3 bg-blue-500 text-white p-2 rounded", children: t("sellerDashboard.promotions.createForm.create") })
      ] })
    ] });
  };
  var PromotionsPanel_default = PromotionsPanel;

  // components/seller/FlashSalesPanel.tsx
  var import_react32 = __toESM(require_react());
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  var FlashSalesPanel = ({ flashSales, products, onProposeForFlashSale, store }) => {
    const { t } = useLanguage();
    const [selectedProduct, setSelectedProduct] = (0, import_react32.useState)("");
    const [flashPrice, setFlashPrice] = (0, import_react32.useState)("");
    const handleSubmit = (saleId) => {
      if (selectedProduct && flashPrice && store) {
        onProposeForFlashSale(saleId, selectedProduct, Number(flashPrice), store.name);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("h2", { className: "text-2xl font-bold mb-4", children: t("sellerDashboard.flashSales.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "space-y-4", children: flashSales.map((sale) => /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "p-4 border rounded-lg dark:border-gray-700", children: [
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("h3", { className: "font-semibold", children: sale.name }),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("p", { className: "text-sm", children: t("sellerDashboard.flashSales.endsOn", new Date(sale.endDate).toLocaleDateString()) }),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "mt-2 p-2 bg-gray-100 dark:bg-gray-700/50 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("h4", { className: "font-semibold text-sm", children: t("sellerDashboard.flashSales.submitProduct") }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "grid grid-cols-3 gap-2 mt-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("select", { onChange: (e) => setSelectedProduct(e.target.value), className: "p-1 border rounded text-xs col-span-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("option", { value: "", children: t("sellerDashboard.flashSales.chooseProduct") }),
              products.map((p) => /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("option", { value: p.id, children: p.name }, p.id))
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("input", { type: "number", value: flashPrice, onChange: (e) => setFlashPrice(e.target.value), placeholder: t("sellerDashboard.flashSales.flashPrice"), className: "p-1 border rounded text-xs" }),
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("button", { onClick: () => handleSubmit(sale.id), className: "col-span-3 bg-blue-500 text-white p-1 rounded text-sm", children: t("sellerDashboard.flashSales.submit") })
          ] })
        ] })
      ] }, sale.id)) })
    ] });
  };
  var FlashSalesPanel_default = FlashSalesPanel;

  // components/seller/PayoutsPanel.tsx
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  var PayoutsPanel = ({ payouts }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("h2", { className: "text-2xl font-bold mb-4", children: t("sellerDashboard.payouts.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "overflow-x-auto", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("table", { className: "w-full text-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("th", { className: "p-2 text-left", children: t("sellerDashboard.payouts.table.date") }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("th", { className: "p-2 text-right", children: t("sellerDashboard.payouts.table.amount") })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("tbody", { children: payouts.map((payout) => /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("td", { className: "p-2", children: new Date(payout.date).toLocaleDateString() }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("td", { className: "p-2 text-right font-semibold text-green-600", children: [
            payout.amount.toLocaleString("fr-CM"),
            " FCFA"
          ] })
        ] }, payout.date)) })
      ] }) })
    ] });
  };
  var PayoutsPanel_default = PayoutsPanel;

  // components/seller/DocumentsPanel.tsx
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  var getStatusIcon = (status) => {
    switch (status) {
      case "verified":
        return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(CheckCircleIcon, { className: "w-5 h-5 text-green-500" });
      case "uploaded":
        return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(ClockIcon, { className: "w-5 h-5 text-blue-500" });
      case "rejected":
        return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(ExclamationTriangleIcon, { className: "w-5 h-5 text-red-500" });
      default:
        return null;
    }
  };
  var DocumentsPanel = ({ store, onUploadDocument }) => {
    const { t } = useLanguage();
    const handleFileUpload = (documentName, e) => {
      if (e.target.files && e.target.files[0]) {
        const reader = new FileReader();
        reader.onload = (event) => {
          onUploadDocument(store.id, documentName, event.target?.result);
        };
        reader.readAsDataURL(e.target.files[0]);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("h2", { className: "text-2xl font-bold mb-4", children: t("sellerDashboard.documents.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "space-y-4", children: store.documents.map((doc) => /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "p-4 border rounded-lg dark:border-gray-700", children: [
        /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "flex justify-between items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "font-semibold", children: doc.name }),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("p", { className: "text-sm capitalize flex items-center gap-1", children: [
              getStatusIcon(doc.status),
              " ",
              doc.status
            ] })
          ] }),
          doc.status !== "verified" && /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("label", { className: "bg-blue-500 text-white text-sm font-bold py-1 px-3 rounded-md cursor-pointer", children: [
            doc.status === "uploaded" ? t("sellerDashboard.documents.replace") : t("sellerDashboard.documents.upload"),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("input", { type: "file", className: "hidden", onChange: (e) => handleFileUpload(doc.name, e) })
          ] })
        ] }),
        doc.rejectionReason && /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "text-xs text-red-500 mt-1", children: t("sellerDashboard.documents.rejectionReason", doc.rejectionReason) })
      ] }, doc.name)) })
    ] });
  };
  var DocumentsPanel_default = DocumentsPanel;

  // components/seller/SupportPanel.tsx
  var import_react33 = __toESM(require_react());
  var import_jsx_runtime43 = __toESM(require_jsx_runtime());
  var SupportPanel = ({ allTickets, sellerOrders, onCreateTicket }) => {
    const { t } = useLanguage();
    const [subject, setSubject] = (0, import_react33.useState)("");
    const [message, setMessage] = (0, import_react33.useState)("");
    const [orderId, setOrderId] = (0, import_react33.useState)("");
    const handleSubmit = (e) => {
      e.preventDefault();
      onCreateTicket(subject, message, orderId);
      setSubject("");
      setMessage("");
      setOrderId("");
    };
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("h2", { className: "text-2xl font-bold mb-4", children: t("sellerDashboard.support.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("form", { onSubmit: handleSubmit, className: "p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg space-y-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("input", { value: subject, onChange: (e) => setSubject(e.target.value), placeholder: t("sellerDashboard.support.subject"), className: "w-full p-2 border rounded", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("textarea", { value: message, onChange: (e) => setMessage(e.target.value), placeholder: t("sellerDashboard.support.describe"), rows: 4, className: "w-full p-2 border rounded", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("select", { value: orderId, onChange: (e) => setOrderId(e.target.value), className: "w-full p-2 border rounded", children: [
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("option", { value: "", children: t("sellerDashboard.support.linkOrder") }),
          sellerOrders.map((o) => /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("option", { value: o.id, children: o.id }, o.id))
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("button", { type: "submit", className: "bg-blue-500 text-white p-2 rounded w-full", children: t("sellerDashboard.support.sendTicket") })
      ] })
    ] });
  };
  var SupportPanel_default = SupportPanel;

  // components/seller/CollectionsPanel.tsx
  var import_react34 = __toESM(require_react());
  var import_jsx_runtime44 = __toESM(require_jsx_runtime());
  var CollectionForm = ({ collection, allProducts, onSave, onCancel }) => {
    const { t } = useLanguage();
    const [name, setName] = (0, import_react34.useState)(collection?.name || "");
    const [description, setDescription] = (0, import_react34.useState)(collection?.description || "");
    const [selectedProductIds, setSelectedProductIds] = (0, import_react34.useState)(collection?.productIds || []);
    const handleToggleProduct = (productId) => {
      setSelectedProductIds(
        (prev) => prev.includes(productId) ? prev.filter((id) => id !== productId) : [...prev, productId]
      );
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onSave({ id: collection?.id, name, description, productIds: selectedProductIds });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("form", { onSubmit: handleSubmit, className: "bg-white dark:bg-gray-800 rounded-lg p-6 max-w-2xl w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("h3", { className: "text-lg font-bold mb-4", children: collection ? t("sellerDashboard.collections.editTitle") : t("sellerDashboard.collections.createTitle") }),
      /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("input", { value: name, onChange: (e) => setName(e.target.value), placeholder: t("sellerDashboard.collections.name"), className: "w-full p-2 border rounded-md", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("textarea", { value: description, onChange: (e) => setDescription(e.target.value), placeholder: t("sellerDashboard.collections.description"), rows: 3, className: "w-full p-2 border rounded-md" }),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("h4", { className: "font-semibold mb-2", children: t("sellerDashboard.collections.selectProducts") }),
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "max-h-60 overflow-y-auto border p-2 rounded-md space-y-2", children: allProducts.map((p) => /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("label", { className: "flex items-center gap-2 p-1 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700/50", children: [
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("input", { type: "checkbox", checked: selectedProductIds.includes(p.id), onChange: () => handleToggleProduct(p.id) }),
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("img", { src: p.imageUrls[0], alt: p.name, className: "w-8 h-8 object-cover rounded-sm" }),
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("span", { children: p.name })
          ] }, p.id)) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "flex justify-end gap-2 mt-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("button", { type: "button", onClick: onCancel, className: "bg-gray-200 px-4 py-2 rounded-lg", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("button", { type: "submit", className: "bg-blue-500 text-white px-4 py-2 rounded-lg", children: t("common.save") })
      ] })
    ] }) });
  };
  var CollectionsPanel = ({ store, products, onCreateOrUpdateCollection, onDeleteCollection }) => {
    const { t } = useLanguage();
    const [isFormOpen, setIsFormOpen] = (0, import_react34.useState)(false);
    const [editingCollection, setEditingCollection] = (0, import_react34.useState)(null);
    const handleSave = (collectionData) => {
      const collectionToSave = {
        ...collectionData,
        id: collectionData.id || `new-${Date.now()}`
      };
      onCreateOrUpdateCollection(store.id, collectionToSave);
      setIsFormOpen(false);
      setEditingCollection(null);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "p-6", children: [
      isFormOpen && /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
        CollectionForm,
        {
          collection: editingCollection,
          allProducts: products,
          onSave: handleSave,
          onCancel: () => {
            setIsFormOpen(false);
            setEditingCollection(null);
          }
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "flex justify-between items-center mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("h2", { className: "text-2xl font-bold", children: t("sellerDashboard.collections.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("button", { onClick: () => {
          setEditingCollection(null);
          setIsFormOpen(true);
        }, className: "bg-green-500 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(PlusIcon, { className: "w-5 h-5" }),
          " ",
          t("sellerDashboard.collections.create")
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "space-y-4", children: [
        store.collections?.map((collection) => /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "flex justify-between items-start", children: [
          /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("h3", { className: "font-bold text-lg", children: collection.name }),
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: collection.description }),
            /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("p", { className: "text-xs mt-1", children: [
              collection.productIds.length,
              " produit(s)"
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "flex gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("button", { onClick: () => {
              setEditingCollection(collection);
              setIsFormOpen(true);
            }, className: "text-blue-500", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(PencilSquareIcon, { className: "w-5 h-5" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("button", { onClick: () => onDeleteCollection(store.id, collection.id), className: "text-red-500", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(TrashIcon, { className: "w-5 h-5" }) })
          ] })
        ] }) }, collection.id)),
        (!store.collections || store.collections.length === 0) && /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "text-center py-8 text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("p", { children: t("sellerDashboard.collections.noCollections") }) })
      ] })
    ] });
  };
  var CollectionsPanel_default = CollectionsPanel;

  // components/seller/ShippingPanel.tsx
  var import_react35 = __toESM(require_react());
  var import_jsx_runtime45 = __toESM(require_jsx_runtime());
  var ShippingPanel = ({ store, allShippingPartners, onUpdate }) => {
    const { t } = useLanguage();
    const [settings, setSettings] = (0, import_react35.useState)(
      store.shippingSettings || {
        enabledPartners: [],
        customRates: { local: null, national: null },
        freeShippingThreshold: null
      }
    );
    const [saved, setSaved] = (0, import_react35.useState)(false);
    const handlePartnerToggle = (partnerId) => {
      setSettings((prev) => ({
        ...prev,
        enabledPartners: prev.enabledPartners.includes(partnerId) ? prev.enabledPartners.filter((id) => id !== partnerId) : [...prev.enabledPartners, partnerId]
      }));
    };
    const handleRateChange = (e) => {
      const { name, value } = e.target;
      const numValue = value === "" ? null : Number(value);
      setSettings((prev) => ({
        ...prev,
        customRates: {
          ...prev.customRates,
          [name]: numValue
        }
      }));
    };
    const handleThresholdChange = (e) => {
      const { value } = e.target;
      setSettings((prev) => ({
        ...prev,
        freeShippingThreshold: value === "" ? null : Number(value)
      }));
    };
    const handleSave = () => {
      onUpdate(store.id, settings);
      setSaved(true);
      setTimeout(() => setSaved(false), 3e3);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("h2", { className: "text-2xl font-bold mb-4 flex items-center gap-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(TruckIcon, { className: "w-6 h-6" }),
        " ",
        t("sellerDashboard.shipping.title")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "space-y-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("h3", { className: "font-semibold text-lg mb-2", children: t("sellerDashboard.shipping.partnersTitle") }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("p", { className: "text-sm text-gray-500 mb-4", children: t("sellerDashboard.shipping.partnersDescription") }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "grid grid-cols-1 sm:grid-cols-2 gap-4", children: allShippingPartners.map((partner) => /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("label", { className: "flex items-center gap-3 p-3 border rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700/50", children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
              "input",
              {
                type: "checkbox",
                checked: settings.enabledPartners.includes(partner.id),
                onChange: () => handlePartnerToggle(partner.id),
                className: "h-5 w-5 rounded border-gray-300 text-kmer-green focus:ring-kmer-green"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { className: "font-medium", children: partner.name }),
            partner.isPremium && /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { className: "text-xs font-bold bg-kmer-yellow/20 text-kmer-yellow px-2 py-0.5 rounded-full", children: t("sellerDashboard.shipping.premium") })
          ] }, partner.id)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("h3", { className: "font-semibold text-lg mb-2", children: t("sellerDashboard.shipping.customRatesTitle") }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("p", { className: "text-sm text-gray-500 mb-4", children: t("sellerDashboard.shipping.customRatesDescription") }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "grid grid-cols-1 sm:grid-cols-2 gap-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("label", { className: "block text-sm font-medium mb-1", children: t("sellerDashboard.shipping.localRate") }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
                "input",
                {
                  type: "number",
                  name: "local",
                  value: settings.customRates.local ?? "",
                  onChange: handleRateChange,
                  placeholder: "Ex: 500",
                  className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("label", { className: "block text-sm font-medium mb-1", children: t("sellerDashboard.shipping.nationalRate") }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
                "input",
                {
                  type: "number",
                  name: "national",
                  value: settings.customRates.national ?? "",
                  onChange: handleRateChange,
                  placeholder: "Ex: 1500",
                  className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
                }
              )
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("h3", { className: "font-semibold text-lg mb-2", children: t("sellerDashboard.shipping.freeShippingTitle") }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("p", { className: "text-sm text-gray-500 mb-4", children: t("sellerDashboard.shipping.freeShippingDescription") }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("label", { className: "block text-sm font-medium mb-1", children: t("sellerDashboard.shipping.freeShippingThreshold") }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
              "input",
              {
                type: "number",
                value: settings.freeShippingThreshold ?? "",
                onChange: handleThresholdChange,
                placeholder: "Ex: 25000 (laisser vide pour d\xE9sactiver)",
                className: "w-full sm:w-1/2 p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
              }
            )
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "mt-8 pt-6 border-t dark:border-gray-700 flex justify-end items-center gap-4", children: [
        saved && /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("span", { className: "text-green-600 flex items-center gap-1 text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(CheckCircleIcon, { className: "w-5 h-5" }),
          " ",
          t("sellerDashboard.shipping.saved")
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
          "button",
          {
            onClick: handleSave,
            className: "bg-kmer-green text-white font-bold py-2 px-6 rounded-lg hover:bg-green-700 transition-colors",
            children: t("sellerDashboard.shipping.saveChanges")
          }
        )
      ] })
    ] });
  };
  var ShippingPanel_default = ShippingPanel;

  // components/seller/SubscriptionPanel.tsx
  var import_jsx_runtime46 = __toESM(require_jsx_runtime());
  var PlanCard = ({ title, description, price, icon, features, onSelect, isFeatured, isCurrent, isDisabled }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: `p-8 rounded-2xl shadow-lg flex flex-col border-2 ${isCurrent ? "bg-green-50 dark:bg-green-900/20 border-kmer-green" : isFeatured ? "bg-kmer-yellow/5 dark:bg-kmer-yellow/10 border-kmer-yellow" : "bg-white dark:bg-gray-800 dark:border-gray-700"}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "flex items-center gap-3 mb-4", children: [
        icon,
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("h3", { className: "text-2xl font-bold", children: title })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6 flex-grow", children: description }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("p", { className: "text-4xl font-extrabold mb-6", children: price }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("ul", { className: "space-y-3 mb-8", children: features.map((feature, index) => /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("li", { className: "flex items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(CheckCircleIcon, { className: "w-5 h-5 text-green-500 flex-shrink-0 mt-0.5" }),
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("span", { children: feature })
      ] }, index)) }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "mt-auto", children: isCurrent ? /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "text-center font-bold text-kmer-green p-3 rounded-lg bg-kmer-green/10", children: [
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(CheckCircleIcon, { className: "w-6 h-6 mx-auto mb-2" }),
        t("sellerDashboard.subscription.currentPlan")
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
        "button",
        {
          onClick: onSelect,
          disabled: isDisabled,
          className: `w-full font-bold py-3 rounded-lg transition-colors ${isDisabled ? "bg-gray-300 dark:bg-gray-700 cursor-not-allowed" : isFeatured ? "bg-kmer-yellow text-gray-900 hover:bg-yellow-300" : "bg-kmer-green text-white hover:bg-green-700"}`,
          children: isDisabled ? t("sellerDashboard.subscription.lowerPlan") : t("sellerDashboard.subscription.upgrade")
        }
      ) })
    ] });
  };
  var SubscriptionPanel = ({ store, siteSettings, onUpgrade }) => {
    const { t } = useLanguage();
    const currentStatus = store.premiumStatus;
    const plans = [
      {
        title: t("sellerSubscription.standardTitle"),
        status: "standard",
        description: t("sellerSubscription.standardDescription"),
        price: `${siteSettings.standardPlan.price.toLocaleString("fr-CM")} FCFA / ${siteSettings.standardPlan.durationDays} jrs`,
        icon: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(BuildingStorefrontIcon, { className: "w-8 h-8 text-gray-500" }),
        features: t("sellerSubscription.standardFeatures", siteSettings.standardPlan.productLimit, siteSettings.standardPlan.commissionRate).split("|"),
        onSelect: () => {
        },
        isFeatured: false
      },
      {
        title: t("sellerSubscription.premiumTitle"),
        status: "premium",
        description: t("sellerSubscription.premiumDescription"),
        price: `${siteSettings.premiumPlan.price.toLocaleString("fr-CM")} FCFA / ${siteSettings.premiumPlan.durationDays} jrs`,
        icon: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(StarIcon, { className: "w-8 h-8 text-kmer-yellow" }),
        features: t("sellerSubscription.premiumFeatures", siteSettings.premiumPlan.productLimit, siteSettings.premiumPlan.commissionRate).split("|"),
        onSelect: () => onUpgrade("premium"),
        isFeatured: true
      },
      {
        title: t("sellerSubscription.superPremiumTitle"),
        status: "super_premium",
        description: t("sellerSubscription.superPremiumDescription"),
        price: `${siteSettings.superPremiumPlan.price.toLocaleString("fr-CM")} FCFA / ${siteSettings.superPremiumPlan.durationDays} jrs`,
        icon: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(StarPlatinumIcon, { className: "w-8 h-8 text-kmer-red" }),
        features: t("sellerSubscription.superPremiumFeatures", siteSettings.superPremiumPlan.productLimit, siteSettings.superPremiumPlan.commissionRate).split("|"),
        onSelect: () => onUpgrade("super_premium"),
        isFeatured: false
      }
    ];
    const planHierarchy = {
      "standard": 0,
      "premium": 1,
      "super_premium": 2
    };
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "text-center max-w-3xl mx-auto mb-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("h2", { className: "text-3xl font-extrabold text-gray-800 dark:text-white mb-4", children: t("sellerDashboard.subscription.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("p", { className: "text-lg text-gray-600 dark:text-gray-400", children: t("sellerDashboard.subscription.subtitle") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-6xl mx-auto", children: plans.map((plan, index) => /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
        PlanCard,
        {
          title: plan.title,
          description: plan.description,
          price: plan.price,
          icon: plan.icon,
          features: plan.features,
          onSelect: plan.onSelect,
          isFeatured: plan.isFeatured,
          isCurrent: currentStatus === plan.status,
          isDisabled: plan.status !== "standard" && planHierarchy[currentStatus] >= planHierarchy[plan.status]
        },
        index
      )) })
    ] });
  };
  var SubscriptionPanel_default = SubscriptionPanel;

  // components/seller/UpgradePanel.tsx
  var import_jsx_runtime47 = __toESM(require_jsx_runtime());
  var UpgradePanel = ({ store, siteSettings, onRequestUpgrade, featureName }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "text-center p-8 bg-gray-50 dark:bg-gray-800/50 rounded-lg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(StarIcon, { className: "w-12 h-12 text-kmer-yellow mx-auto mb-4" }),
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("h2", { className: "text-2xl font-bold mb-2", children: t("sellerDashboard.upgrade.title", featureName) }),
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6", children: t("sellerDashboard.upgrade.description") }),
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("button", { onClick: () => onRequestUpgrade(store.id, "premium"), className: "bg-kmer-yellow text-gray-900 font-bold py-3 px-6 rounded-lg hover:bg-yellow-300 transition-colors", children: t("sellerDashboard.upgrade.button") })
    ] });
  };
  var UpgradePanel_default = UpgradePanel;

  // components/SellerAnalyticsDashboard.tsx
  var import_react36 = __toESM(require_react());
  var import_jsx_runtime48 = __toESM(require_jsx_runtime());
  var getActiveFlashSalePrice6 = (productId, flashSales) => {
    const now = /* @__PURE__ */ new Date();
    for (const sale of flashSales) {
      const startDate = new Date(sale.startDate);
      const endDate = new Date(sale.endDate);
      if (now >= startDate && now <= endDate) {
        const productInSale = sale.products.find((p) => p.productId === productId && p.status === "approved");
        if (productInSale) return productInSale.flashPrice;
      }
    }
    return null;
  };
  var isPromotionActive6 = (product) => {
    if (!product.promotionPrice || product.promotionPrice >= product.price) {
      return false;
    }
    const now = /* @__PURE__ */ new Date();
    const startDate = product.promotionStartDate ? /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") : null;
    const endDate = product.promotionEndDate ? /* @__PURE__ */ new Date(product.promotionEndDate + "T23:59:59") : null;
    if (!startDate && !endDate) return false;
    if (startDate && endDate) return now >= startDate && now <= endDate;
    if (startDate) return now >= startDate;
    if (endDate) return now <= endDate;
    return false;
  };
  var StatCard2 = ({ icon, label, value, color, change }) => /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "p-4 bg-white dark:bg-gray-800/50 rounded-lg shadow-sm flex items-center gap-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: `p-3 rounded-full ${color}`, children: icon }),
    /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "flex items-baseline gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-2xl font-bold text-gray-800 dark:text-white", children: value }),
        change !== void 0 && change !== null && /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("span", { className: `text-sm font-semibold flex items-center ${change >= 0 ? "text-green-500" : "text-red-500"}`, children: [
          change >= 0 ? /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", className: "h-4 w-4", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: "3", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M5 15l7-7 7 7" }) }) : /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", className: "h-4 w-4", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: "3", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M19 9l-7 7-7-7" }) }),
          Math.abs(change).toFixed(1),
          "%"
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: label })
    ] })
  ] });
  var SellerAnalyticsDashboard = ({ onBack, sellerOrders, sellerProducts, flashSales }) => {
    const [timeRange, setTimeRange] = (0, import_react36.useState)("all");
    const { t } = useLanguage();
    const { analytics, comparisonAnalytics } = (0, import_react36.useMemo)(() => {
      const getFinalPrice4 = (item) => {
        const flashPrice = getActiveFlashSalePrice6(item.id, flashSales);
        if (flashPrice !== null) return flashPrice;
        if (isPromotionActive6(item)) return item.promotionPrice;
        return item.price;
      };
      const now = /* @__PURE__ */ new Date();
      const deliveredOrders = sellerOrders.filter((o) => o.status === "delivered");
      const filterOrdersByDate = (orders, range) => {
        return orders.filter((o) => {
          const orderDate = new Date(o.orderDate);
          if (timeRange === "all") return range === "current";
          const cutoffDate = /* @__PURE__ */ new Date();
          const prevCutoffDate = /* @__PURE__ */ new Date();
          let periodDays = 0;
          if (timeRange === "week") periodDays = 7;
          if (timeRange === "month") periodDays = 30;
          if (timeRange === "quarter") periodDays = 90;
          cutoffDate.setDate(now.getDate() - periodDays);
          prevCutoffDate.setDate(now.getDate() - periodDays * 2);
          if (range === "current") {
            return orderDate >= cutoffDate;
          } else {
            return orderDate >= prevCutoffDate && orderDate < cutoffDate;
          }
        });
      };
      const currentPeriodOrders = filterOrdersByDate(deliveredOrders, "current");
      const previousPeriodOrders = filterOrdersByDate(deliveredOrders, "previous");
      const calculateRevenue = (orders) => orders.reduce((sum, order) => {
        const sellerItemsTotal = order.items.reduce((itemSum, item) => itemSum + getFinalPrice4(item) * item.quantity, 0);
        return sum + sellerItemsTotal;
      }, 0);
      const totalRevenue = calculateRevenue(currentPeriodOrders);
      const previousTotalRevenue = calculateRevenue(previousPeriodOrders);
      let revenueChangePercentage = null;
      if (timeRange !== "all") {
        if (previousTotalRevenue > 0) {
          revenueChangePercentage = (totalRevenue - previousTotalRevenue) / previousTotalRevenue * 100;
        } else if (totalRevenue > 0) {
          revenueChangePercentage = 100;
        } else {
          revenueChangePercentage = 0;
        }
      }
      const totalDeliveredOrders = currentPeriodOrders.length;
      const totalItemsSold = currentPeriodOrders.flatMap((o) => o.items).reduce((sum, item) => sum + item.quantity, 0);
      const averageOrderValue = totalDeliveredOrders > 0 ? totalRevenue / totalDeliveredOrders : 0;
      const topProducts = currentPeriodOrders.flatMap((o) => o.items).reduce((acc, item) => {
        const existing = acc.find((p) => p.id === item.id);
        const revenue = getFinalPrice4(item) * item.quantity;
        if (existing) {
          existing.revenue += revenue;
          existing.quantitySold += item.quantity;
        } else {
          acc.push({ id: item.id, name: item.name, revenue, quantitySold: item.quantity });
        }
        return acc;
      }, []);
      const sortedTopProducts = topProducts.sort((a, b) => b.revenue - a.revenue).slice(0, 5);
      let salesChartData = [];
      const getOrderTotal = (order) => order.items.reduce((sum, item) => sum + getFinalPrice4(item) * item.quantity, 0);
      if (timeRange === "week") {
        const last7Days = Array.from({ length: 7 }, (_, i) => {
          const d = /* @__PURE__ */ new Date();
          d.setDate(d.getDate() - i);
          return d;
        });
        const dailySales = currentPeriodOrders.reduce((acc, order) => {
          const day = new Date(order.orderDate).toLocaleDateString("fr-CM", { day: "2-digit", month: "2-digit" });
          acc[day] = (acc[day] || 0) + getOrderTotal(order);
          return acc;
        }, {});
        salesChartData = last7Days.map((d) => {
          const label = d.toLocaleDateString("fr-CM", { day: "2-digit", month: "2-digit" });
          return { label: d.toLocaleDateString("fr-CM", { weekday: "short" }), revenue: dailySales[label] || 0 };
        }).reverse();
      } else if (timeRange === "month") {
        const last4WeeksLabels = ["-3 sem.", "-2 sem.", "-1 sem.", "Cette sem."];
        const weeklySales = currentPeriodOrders.reduce((acc, order) => {
          const weekIndex = Math.floor((now.getTime() - new Date(order.orderDate).getTime()) / (1e3 * 60 * 60 * 24 * 7));
          if (weekIndex < 4) acc[3 - weekIndex] = (acc[3 - weekIndex] || 0) + getOrderTotal(order);
          return acc;
        }, []);
        salesChartData = last4WeeksLabels.map((label, i) => ({ label, revenue: weeklySales[i] || 0 }));
      } else {
        const numMonths = timeRange === "quarter" ? 3 : 6;
        const monthLabels = Array.from({ length: numMonths }, (_, i) => {
          const d = /* @__PURE__ */ new Date();
          d.setMonth(d.getMonth() - i);
          return d;
        }).reverse();
        const monthlySales = currentPeriodOrders.reduce((acc, order) => {
          const month = new Date(order.orderDate).toLocaleString("fr-CM", { month: "short", year: "2-digit" });
          acc[month] = (acc[month] || 0) + getOrderTotal(order);
          return acc;
        }, {});
        salesChartData = monthLabels.map((d) => {
          const label = d.toLocaleString("fr-CM", { month: "short", year: "2-digit" });
          return { label, revenue: monthlySales[label] || 0 };
        });
      }
      return {
        analytics: {
          totalRevenue,
          totalOrders: totalDeliveredOrders,
          totalItemsSold,
          averageOrderValue,
          topProducts: sortedTopProducts,
          salesChartData
        },
        comparisonAnalytics: {
          revenueChangePercentage
        }
      };
    }, [sellerOrders, flashSales, timeRange]);
    const lowStockProducts = (0, import_react36.useMemo)(() => {
      return sellerProducts.filter((p) => p.stock < 5).slice(0, 5);
    }, [sellerProducts]);
    const TimeRangeButton = ({ label, value }) => {
      const isActive = timeRange === value;
      return /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
        "button",
        {
          onClick: () => setTimeRange(value),
          className: `px-3 py-1.5 text-sm font-semibold rounded-md transition-colors ${isActive ? "bg-kmer-green text-white shadow" : "bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600"}`,
          children: label
        }
      );
    };
    return /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "container mx-auto p-4 sm:p-8 bg-gray-50 dark:bg-gray-900", children: [
      onBack.toString() !== "() => {}" && /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("button", { onClick: onBack, className: "text-kmer-green font-semibold mb-6 inline-flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        t("sellerDashboard.analytics.backToDashboard")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "flex items-center gap-3 mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(BarChartIcon, { className: "w-8 h-8" }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("h1", { className: "text-3xl font-bold", children: t("sellerDashboard.analytics.title") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "flex items-center gap-2 mb-8 flex-wrap", children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "font-semibold text-sm", children: t("sellerDashboard.analytics.period") }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(TimeRangeButton, { label: t("common.days7"), value: "week" }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(TimeRangeButton, { label: t("common.days30"), value: "month" }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(TimeRangeButton, { label: t("common.days90"), value: "quarter" }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(TimeRangeButton, { label: t("common.all"), value: "all" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
          StatCard2,
          {
            icon: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(CurrencyDollarIcon, { className: "w-7 h-7" }),
            label: `${t("sellerDashboard.analytics.totalRevenue")}${timeRange !== "all" ? ` ${t("sellerDashboard.analytics.vsPrevious")}` : ""}`,
            value: `${analytics.totalRevenue.toLocaleString("fr-CM")} FCFA`,
            color: "bg-green-100 dark:bg-green-900/50 text-green-600 dark:text-green-300",
            change: comparisonAnalytics.revenueChangePercentage
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(StatCard2, { icon: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(ShoppingBagIcon, { className: "w-7 h-7" }), label: t("sellerDashboard.analytics.deliveredOrders"), value: analytics.totalOrders, color: "bg-blue-100 dark:bg-blue-900/50 text-blue-600 dark:text-blue-300" }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(StatCard2, { icon: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(ArchiveBoxIcon, { className: "w-7 h-7" }), label: t("sellerDashboard.analytics.itemsSold"), value: analytics.totalItemsSold, color: "bg-indigo-100 dark:bg-indigo-900/50 text-indigo-600 dark:text-indigo-300" }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(StatCard2, { icon: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(StarIcon, { className: "w-7 h-7" }), label: t("sellerDashboard.analytics.averageBasket"), value: `${analytics.averageOrderValue.toLocaleString("fr-CM", { maximumFractionDigits: 0 })} FCFA`, color: "bg-purple-100 dark:bg-purple-900/50 text-purple-600 dark:text-purple-300" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "lg:col-span-2 bg-white dark:bg-gray-800/50 rounded-lg shadow-sm p-6 h-full", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("sellerDashboard.analytics.salesEvolution") }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "flex justify-around items-end h-64 border-l border-b border-gray-200 dark:border-gray-700 pl-4 pb-4", children: analytics.salesChartData.map(({ label, revenue }) => /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "flex flex-col items-center h-full justify-end", title: `${revenue.toLocaleString("fr-CM")} FCFA`, children: [
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "w-8 bg-kmer-green rounded-t-md hover:bg-green-700", style: { height: `${revenue / Math.max(...analytics.salesChartData.map((d) => d.revenue), 1) * 100}%` } }),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-xs mt-1", children: label })
          ] }, label)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "space-y-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "bg-white dark:bg-gray-800/50 rounded-lg shadow-sm p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("sellerDashboard.analytics.top5Products") }),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("ul", { className: "space-y-3", children: [
              analytics.topProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("li", { className: "flex justify-between items-center text-sm", children: [
                /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("span", { className: "font-medium dark:text-gray-200", children: product.name }),
                  /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("span", { className: "text-xs text-gray-500 dark:text-gray-400 ml-2", children: [
                    "(",
                    product.quantitySold,
                    " ",
                    t("sellerDashboard.analytics.sold"),
                    ")"
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("span", { className: "font-bold text-kmer-green", children: [
                  product.revenue.toLocaleString("fr-CM"),
                  " FCFA"
                ] })
              ] }, product.id)),
              analytics.topProducts.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: t("sellerDashboard.analytics.noSalesData") })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "bg-orange-50 dark:bg-orange-900/50 rounded-lg shadow-sm p-6 border-l-4 border-orange-400", children: [
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("h2", { className: "text-xl font-bold mb-4 text-orange-800 dark:text-orange-200", children: t("sellerDashboard.analytics.lowStockAlerts") }),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("ul", { className: "space-y-2", children: [
              lowStockProducts.map((p) => /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("li", { className: "flex justify-between items-center text-sm", children: [
                /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("span", { className: "font-medium text-orange-700 dark:text-orange-300", children: p.name }),
                /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("span", { className: "font-bold text-orange-600 dark:text-orange-400", children: [
                  p.stock,
                  " ",
                  t("sellerDashboard.analytics.remaining")
                ] })
              ] }, p.id)),
              lowStockProducts.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-sm text-orange-700 dark:text-orange-300", children: t("sellerDashboard.analytics.noLowStock") })
            ] })
          ] })
        ] })
      ] })
    ] });
  };

  // components/seller/AnalyticsPanel.tsx
  var import_jsx_runtime49 = __toESM(require_jsx_runtime());
  var AnalyticsPanel = ({ sellerOrders, sellerProducts, flashSales }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
      SellerAnalyticsDashboard,
      {
        sellerOrders,
        sellerProducts,
        flashSales,
        onBack: () => {
        }
      }
    );
  };
  var AnalyticsPanel_default = AnalyticsPanel;

  // components/SellerProfile.tsx
  var import_react37 = __toESM(require_react());
  var import_jsx_runtime50 = __toESM(require_jsx_runtime());
  var SellerProfile = ({ store, onBack, onUpdateProfile }) => {
    const { t } = useLanguage();
    const [formData, setFormData] = (0, import_react37.useState)(store);
    const [logoPreview, setLogoPreview] = (0, import_react37.useState)(store.logoUrl);
    const [bannerPreview, setBannerPreview] = (0, import_react37.useState)(store.bannerUrl);
    const mapContainerRef = (0, import_react37.useRef)(null);
    const mapRef = (0, import_react37.useRef)(null);
    const markerRef = (0, import_react37.useRef)(null);
    (0, import_react37.useEffect)(() => {
      if (!mapContainerRef.current || mapRef.current || typeof L === "undefined") return;
      const initialLatLng = [
        formData.latitude || 4.0511,
        // Default to Douala
        formData.longitude || 9.7679
      ];
      mapRef.current = L.map(mapContainerRef.current).setView(initialLatLng, 13);
      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(mapRef.current);
      const updateMarker = (latlng) => {
        setFormData((prev) => ({ ...prev, latitude: latlng.lat, longitude: latlng.lng }));
        if (!markerRef.current) {
          markerRef.current = L.marker(latlng, { draggable: true }).addTo(mapRef.current);
          markerRef.current.on("dragend", (e) => {
            updateMarker(e.target.getLatLng());
          });
        } else {
          markerRef.current.setLatLng(latlng);
        }
        mapRef.current.panTo(latlng);
      };
      if (formData.latitude && formData.longitude) {
        updateMarker({ lat: formData.latitude, lng: formData.longitude });
      }
      mapRef.current.on("click", (e) => {
        updateMarker(e.latlng);
      });
      setTimeout(() => mapRef.current?.invalidateSize(), 100);
    }, []);
    const handleChange = (e) => {
      const { name, value } = e.target;
      setFormData((prev) => ({ ...prev, [name]: value }));
    };
    const handleImageChange = (e, field) => {
      if (e.target.files && e.target.files[0]) {
        const reader = new FileReader();
        reader.onloadend = () => {
          const result = reader.result;
          setFormData((prev) => ({ ...prev, [field]: result }));
          if (field === "logoUrl") setLogoPreview(result);
          if (field === "bannerUrl") setBannerPreview(result);
        };
        reader.readAsDataURL(e.target.files[0]);
      }
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onUpdateProfile(store.id, formData);
      alert("Profil mis \xE0 jour !");
      onBack();
    };
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        t("sellerDashboard.analytics.backToDashboard")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("form", { onSubmit: handleSubmit, className: "bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg max-w-4xl mx-auto space-y-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "flex items-center gap-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(BuildingStorefrontIcon, { className: "w-8 h-8 text-kmer-green" }),
          /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("h1", { className: "text-3xl font-bold dark:text-white", children: t("sellerDashboard.tabs.profile") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("fieldset", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("legend", { className: "px-2 font-semibold dark:text-gray-200", children: t("becomeSeller.step1Title") }),
          /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 pt-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("label", { htmlFor: "name", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.shopNameLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("input", { type: "text", id: "name", name: "name", value: formData.name || "", onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("label", { htmlFor: "category", className: "block text-sm font-medium dark:text-gray-300", children: t("header.categories") }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("input", { type: "text", id: "category", name: "category", value: formData.category || "", onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("label", { className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.shopLogoLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "mt-1 flex items-center gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("img", { src: logoPreview, alt: "Logo", className: "h-20 w-20 object-contain rounded-md bg-gray-100 dark:bg-gray-700 p-1" }),
                /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("label", { htmlFor: "logo-upload", className: "cursor-pointer bg-white dark:bg-gray-700 py-2 px-3 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(PhotoIcon, { className: "w-5 h-5" }),
                  " ",
                  t("sellerDashboard.profile.change"),
                  /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("input", { id: "logo-upload", type: "file", className: "sr-only", onChange: (e) => handleImageChange(e, "logoUrl"), accept: "image/*" })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("label", { className: "block text-sm font-medium dark:text-gray-300", children: t("Banni\xE8re") }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "mt-1 flex items-center gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("div", { className: "h-20 w-40 rounded-md bg-gray-100 dark:bg-gray-700 p-1 flex items-center justify-center", children: bannerPreview ? /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("img", { src: bannerPreview, alt: "Banner", className: "h-full w-full object-cover rounded-md" }) : /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(PhotoIcon, { className: "w-10 h-10 text-gray-400" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("label", { htmlFor: "banner-upload", className: "cursor-pointer bg-white dark:bg-gray-700 py-2 px-3 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(PhotoIcon, { className: "w-5 h-5" }),
                  " ",
                  t("sellerDashboard.profile.change"),
                  /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("input", { id: "banner-upload", type: "file", className: "sr-only", onChange: (e) => handleImageChange(e, "bannerUrl"), accept: "image/*" })
                ] })
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("fieldset", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("legend", { className: "px-2 font-semibold dark:text-gray-200", children: t("becomeSeller.step2Title") }),
          /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 pt-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("label", { htmlFor: "sellerFirstName", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.firstNameLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("input", { type: "text", id: "sellerFirstName", name: "sellerFirstName", value: formData.sellerFirstName || "", onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("label", { htmlFor: "sellerLastName", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.lastNameLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("input", { type: "text", id: "sellerLastName", name: "sellerLastName", value: formData.sellerLastName || "", onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "md:col-span-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("label", { htmlFor: "sellerPhone", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.phoneLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("input", { type: "tel", id: "sellerPhone", name: "sellerPhone", value: formData.sellerPhone || "", onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("fieldset", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("legend", { className: "px-2 font-semibold dark:text-gray-200", children: t("becomeSeller.step3Title") }),
          /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 pt-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("label", { htmlFor: "physicalAddress", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.addressLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("textarea", { id: "physicalAddress", name: "physicalAddress", value: formData.physicalAddress || "", onChange: handleChange, rows: 2, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("label", { htmlFor: "location", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.cityLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("select", { id: "location", name: "location", value: formData.location || "", onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
                /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("option", { children: "Douala" }),
                /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("option", { children: "Yaound\xE9" }),
                /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("option", { children: "Bafoussam" }),
                /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("option", { children: "Limbe" }),
                /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("option", { children: "Kribi" })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "md:col-span-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("label", { htmlFor: "neighborhood", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.neighborhoodLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("input", { type: "text", id: "neighborhood", name: "neighborhood", value: formData.neighborhood || "", onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "md:col-span-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("label", { className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.gpsLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: t("becomeSeller.gpsDescription") }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("div", { ref: mapContainerRef, className: "h-64 w-full mt-2 rounded-md z-0", "aria-label": "Carte pour s\xE9lectionner l'emplacement" }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "flex gap-4 mt-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("input", { type: "number", readOnly: true, value: formData.latitude || "", placeholder: "Latitude", className: "w-full p-2 border rounded-md bg-gray-100 dark:bg-gray-700 dark:border-gray-600" }),
                /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("input", { type: "number", readOnly: true, value: formData.longitude || "", placeholder: "Longitude", className: "w-full p-2 border rounded-md bg-gray-100 dark:bg-gray-700 dark:border-gray-600" })
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "flex justify-end gap-4 pt-4 border-t dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("button", { type: "button", onClick: onBack, className: "bg-gray-200 dark:bg-gray-600 font-bold py-2 px-6 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500", children: t("common.cancel") }),
          /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("button", { type: "submit", className: "bg-kmer-green text-white font-bold py-2 px-6 rounded-lg hover:bg-green-700", children: t("common.save") })
        ] })
      ] })
    ] });
  };
  var SellerProfile_default = SellerProfile;

  // components/seller/ProfilePanel.tsx
  var import_jsx_runtime51 = __toESM(require_jsx_runtime());
  var ProfilePanel = ({ store, onUpdateProfile }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
      SellerProfile_default,
      {
        store,
        onUpdateProfile,
        onBack: () => {
        }
      }
    );
  };
  var ProfilePanel_default = ProfilePanel;

  // components/seller/ChatPanel.tsx
  var import_jsx_runtime52 = __toESM(require_jsx_runtime());
  var ChatPanel = () => {
    const { user, allUsers } = useAuth();
    const { t } = useLanguage();
    const { isWidgetOpen, setIsWidgetOpen } = useChatContext();
    const { chats, messages, activeChatId, setActiveChatId, sendMessage } = useChatContext();
    if (!user) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "p-6 h-[calc(100vh-10rem)]", children: [
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("h2", { className: "text-2xl font-bold mb-4", children: t("sellerDashboard.tabs.chat") }),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "border rounded-lg h-full overflow-hidden", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("p", { className: "p-4 text-center text-gray-500", children: `La gestion de la messagerie se fait via le widget de chat global. Cliquez sur l'ic\xF4ne "Messages" dans l'en-t\xEAte pour ouvrir vos conversations.` }) })
    ] });
  };
  var ChatPanel_default = ChatPanel;

  // components/seller/StoriesPanel.tsx
  var import_react38 = __toESM(require_react());
  var import_jsx_runtime53 = __toESM(require_jsx_runtime());
  var StoriesPanel = ({ store, onAddStory }) => {
    const activeStories = (0, import_react38.useMemo)(() => {
      const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1e3);
      return (store.stories || []).filter((story) => new Date(story.createdAt) > twentyFourHoursAgo);
    }, [store.stories]);
    const handleFileChange = (e) => {
      if (e.target.files && e.target.files[0]) {
        const file = e.target.files[0];
        const reader = new FileReader();
        reader.onloadend = () => {
          const result = reader.result;
          onAddStory(result);
        };
        reader.readAsDataURL(file);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("h2", { className: "text-2xl font-bold mb-4", children: "G\xE9rer les Stories" }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { className: "mb-8", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("label", { htmlFor: "story-upload", className: "cursor-pointer", children: [
        /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "w-full min-h-[150px] border-2 border-dashed rounded-lg flex flex-col items-center justify-center p-6 hover:bg-gray-50 dark:hover:bg-gray-700/50", children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(PhotoIcon, { className: "w-12 h-12 text-gray-400" }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("p", { className: "mt-2 text-sm font-semibold text-gray-600 dark:text-gray-300", children: "Ajouter une nouvelle story" }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: "Cliquez pour t\xE9l\xE9verser une image (PNG, JPG)" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("input", { id: "story-upload", type: "file", className: "sr-only", accept: "image/png, image/jpeg", onChange: handleFileChange })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("h3", { className: "text-xl font-semibold mb-4", children: "Stories Actives (24h)" }),
        activeStories.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { className: "grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4", children: activeStories.map((story) => /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "relative group aspect-[9/16] rounded-lg overflow-hidden shadow-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("img", { src: story.imageUrl, alt: `Story ${story.id}`, className: "w-full h-full object-cover" }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { className: "absolute inset-0 bg-gradient-to-t from-black/60 to-transparent" }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "absolute bottom-2 left-2 text-white text-xs flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(ClockIcon, { className: "w-3 h-3" }),
            /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("span", { children: new Date(story.createdAt).toLocaleTimeString("fr-FR", { hour: "2-digit", minute: "2-digit" }) })
          ] })
        ] }, story.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "text-center py-12 text-gray-500 bg-gray-50 dark:bg-gray-800/50 rounded-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("p", { children: "Vous n'avez aucune story active." }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("p", { className: "text-sm", children: "Ajoutez-en une pour engager vos clients !" })
        ] })
      ] })
    ] });
  };
  var StoriesPanel_default = StoriesPanel;

  // components/SellerDashboard.tsx
  var import_jsx_runtime54 = __toESM(require_jsx_runtime());
  var TabButton = ({ icon, label, isActive, onClick, count, isLocked }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(
      "button",
      {
        onClick,
        disabled: isLocked,
        className: `relative flex items-center gap-3 w-full text-left px-3 py-3 text-sm font-semibold rounded-lg transition-colors whitespace-nowrap ${isActive ? "bg-kmer-green/10 text-kmer-green" : "text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 dark:text-gray-400"} ${isLocked ? "opacity-50 cursor-not-allowed" : ""}`,
        title: isLocked ? t("sellerDashboard.premiumFeatureTooltip") : "",
        children: [
          icon,
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { children: label }),
          count !== void 0 && count > 0 && /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "ml-auto text-xs bg-kmer-red text-white rounded-full px-1.5 py-0.5", children: count })
        ]
      }
    );
  };
  var SellerDashboard = (props) => {
    const { store, initialTab, sellerNotifications, siteSettings, onRequestUpgrade, onSellerCancelOrder } = props;
    const [activeTab, setActiveTab] = (0, import_react39.useState)(initialTab || "overview");
    const { user } = useAuth();
    const { t } = useLanguage();
    (0, import_react39.useEffect)(() => {
      setActiveTab(initialTab);
    }, [initialTab]);
    if (!store) {
      return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "p-8 text-center", children: "Loading store information..." });
    }
    const isPremium = store.premiumStatus === "premium" || store.premiumStatus === "super_premium";
    const unreadNotifications = sellerNotifications.filter((n) => !n.isRead).length;
    const TABS = [
      { id: "overview", label: t("sellerDashboard.tabs.overview"), icon: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ChartPieIcon, { className: "w-5 h-5" }), count: unreadNotifications, isLocked: false },
      { id: "products", label: t("sellerDashboard.tabs.products"), icon: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ShoppingBagIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "collections", label: t("sellerDashboard.tabs.collections"), icon: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(BookmarkSquareIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "orders", label: t("sellerDashboard.tabs.orders"), icon: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(TruckIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "reviews", label: t("sellerDashboard.tabs.reviews"), icon: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(StarIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "promotions", label: t("sellerDashboard.tabs.promotions"), icon: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(TagIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "flash-sales", label: t("sellerDashboard.tabs.flashSales"), icon: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(BoltIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "analytics", label: t("sellerDashboard.tabs.analytics"), icon: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(BarChartIcon, { className: "w-5 h-5" }), isLocked: !isPremium },
      { id: "payouts", label: t("sellerDashboard.tabs.payouts"), icon: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(BanknotesIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "livraison", label: t("sellerDashboard.tabs.delivery"), icon: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(TruckIcon, { className: "w-5 h-5" }), isLocked: !isPremium },
      { id: "profile", label: t("sellerDashboard.tabs.profile"), icon: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(BuildingStorefrontIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "subscription", label: t("sellerDashboard.tabs.subscription"), icon: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(StarPlatinumIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "documents", label: t("sellerDashboard.tabs.documents"), icon: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(DocumentTextIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "stories", label: t("sellerDashboard.tabs.stories"), icon: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(MegaphoneIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "chat", label: t("sellerDashboard.tabs.chat"), icon: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ChatBubbleLeftRightIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "support", label: t("sellerDashboard.tabs.support"), icon: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ChatBubbleBottomCenterTextIcon, { className: "w-5 h-5" }), isLocked: false }
    ];
    const renderContent = () => {
      const selectedTab = TABS.find((t2) => t2.id === activeTab);
      if (selectedTab?.isLocked) {
        return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(UpgradePanel_default, { store, siteSettings, onRequestUpgrade, featureName: selectedTab.label });
      }
      switch (activeTab) {
        case "overview":
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(OverviewPanel_default, { ...props, store, setActiveTab });
        case "products":
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ProductsPanel_default, { ...props });
        case "collections":
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(CollectionsPanel_default, { ...props, store });
        case "orders":
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(OrdersPanel_default, { ...props, store, onSellerCancelOrder: (orderId) => user && onSellerCancelOrder(orderId, user) });
        case "reviews":
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ReviewsPanel_default, { ...props });
        case "promotions":
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(PromotionsPanel_default, { ...props });
        case "flash-sales":
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(FlashSalesPanel_default, { ...props, store });
        case "analytics":
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(AnalyticsPanel_default, { sellerOrders: props.sellerOrders, sellerProducts: props.products, flashSales: props.flashSales });
        case "payouts":
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(PayoutsPanel_default, { ...props });
        case "livraison":
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ShippingPanel_default, { store, allShippingPartners: props.allShippingPartners, onUpdate: props.onUpdateShippingSettings });
        case "profile":
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ProfilePanel_default, { store, onUpdateProfile: props.onUpdateStoreProfile });
        case "subscription":
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(SubscriptionPanel_default, { store, siteSettings, onUpgrade: (level) => onRequestUpgrade(store.id, level) });
        case "documents":
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(DocumentsPanel_default, { ...props, store });
        case "stories":
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(StoriesPanel_default, { store, onAddStory: props.onAddStory });
        case "chat":
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ChatPanel_default, {});
        case "support":
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(SupportPanel_default, { ...props });
        default:
          return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(OverviewPanel_default, { ...props, store, setActiveTab });
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "bg-gray-100 dark:bg-gray-950 min-h-screen", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-6 flex flex-col md:flex-row gap-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("aside", { className: "md:w-1/4 lg:w-1/5 flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md space-y-2 sticky top-24", children: TABS.map((tab) => /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
        TabButton,
        {
          icon: tab.icon,
          label: tab.label,
          isActive: activeTab === tab.id,
          onClick: () => setActiveTab(tab.id),
          count: tab.id === "overview" ? unreadNotifications : void 0,
          isLocked: tab.isLocked
        },
        tab.id
      )) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("main", { className: "flex-grow", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md min-h-full", children: renderContent() }) })
    ] }) });
  };

  // components/VendorPage.tsx
  var import_react40 = __toESM(require_react());
  var import_jsx_runtime55 = __toESM(require_jsx_runtime());
  var VendorPage = ({ vendorName, allProducts, allStores, flashSales, onProductClick, onBack, onVendorClick, isComparisonEnabled }) => {
    const { user, toggleFollowStore } = useAuth();
    const { t } = useLanguage();
    const productsFromVendor = (0, import_react40.useMemo)(() => allProducts.filter((p) => p.vendor === vendorName), [allProducts, vendorName]);
    const { filteredAndSortedProducts, filters, setFilters, resetFilters } = useProductFiltering(productsFromVendor, allStores);
    const store = allStores.find((s) => s.name === vendorName);
    const isFollowing = user?.followedStores?.includes(store?.id || "");
    return /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour"
      ] }),
      store?.bannerUrl && /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "mb-8 rounded-lg overflow-hidden shadow-lg h-48 bg-gray-200 dark:bg-gray-800", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("img", { src: store.bannerUrl, alt: `${store.name} banner`, className: "w-full h-full object-cover" }) }),
      store?.collections && store.collections.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("section", { className: "mb-12 space-y-10", children: store.collections.map((collection) => {
        const collectionProducts = collection.productIds.map((id) => allProducts.find((p) => p.id === id)).filter((p) => !!p);
        if (collectionProducts.length === 0) return null;
        return /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("h2", { className: "text-2xl font-bold mb-2 dark:text-white", children: collection.name }),
          collection.description && /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-4 max-w-3xl", children: collection.description }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "-mx-4 sm:-mx-6 px-4 sm:px-6", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "flex overflow-x-auto space-x-6 pb-4", children: collectionProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "w-72 flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
            ProductCard_default,
            {
              product,
              onProductClick,
              onVendorClick,
              location: store?.location,
              flashSales,
              isComparisonEnabled,
              stores: allStores
            }
          ) }, product.id)) }) })
        ] }, collection.id);
      }) }),
      /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "lg:flex lg:gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
          ProductFilters_default,
          {
            allProducts: productsFromVendor,
            filters,
            setFilters,
            resetFilters
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("main", { className: "flex-grow", children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "mb-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "flex items-center gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("img", { src: store?.logoUrl, alt: store?.name, className: "h-16 w-16 object-contain rounded-md bg-white p-1 shadow-sm" }),
                /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white flex items-center gap-2", children: [
                    "Boutique ",
                    /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("span", { className: "text-kmer-green", children: vendorName })
                  ] }),
                  store && /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("p", { className: "text-gray-500 dark:text-gray-400", children: store.location })
                ] })
              ] }),
              store && user && user.role === "customer" && /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(
                "button",
                {
                  onClick: () => toggleFollowStore(store.id),
                  className: `flex items-center gap-2 px-6 py-2 rounded-lg font-bold transition-colors w-full sm:w-auto ${isFollowing ? "bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-300" : "bg-kmer-green text-white hover:bg-green-700"}`,
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(BookmarkSquareIcon, { className: `w-5 h-5 ${isFollowing ? "text-kmer-green" : "text-inherit"}` }),
                    /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("span", { children: isFollowing ? "Suivi" : "Suivre" })
                  ]
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("p", { className: "text-gray-600 dark:text-gray-300 mt-4", children: [
              filteredAndSortedProducts.length,
              " sur ",
              productsFromVendor.length,
              " produits affich\xE9s"
            ] })
          ] }),
          filteredAndSortedProducts.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6", children: filteredAndSortedProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: store?.location, flashSales, isComparisonEnabled, stores: allStores }, product.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md h-full flex flex-col justify-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: "Aucun produit ne correspond \xE0 vos filtres." }),
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: "Cette boutique n'a peut-\xEAtre pas de produits ou vos filtres sont trop stricts." })
          ] })
        ] })
      ] })
    ] });
  };
  var VendorPage_default = VendorPage;

  // components/SuperAdminDashboard.tsx
  var import_react54 = __toESM(require_react());

  // components/admin/OverviewPanel.tsx
  var import_react41 = __toESM(require_react());
  var import_jsx_runtime56 = __toESM(require_jsx_runtime());
  var StatCard3 = ({ icon, label, value, color }) => /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "p-4 bg-white dark:bg-gray-800/50 rounded-lg shadow-sm flex items-center gap-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: `p-3 rounded-full ${color}`, children: icon }),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-2xl font-bold text-gray-800 dark:text-white", children: value }),
      /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: label })
    ] })
  ] });
  var OverviewPanel2 = ({ allOrders, allStores, allUsers, siteActivityLogs }) => {
    const { t } = useLanguage();
    const { stats, salesData, orderStatusDistribution } = (0, import_react41.useMemo)(() => {
      const deliveredOrders = allOrders.filter((o) => o.status === "delivered");
      const totalRevenue = deliveredOrders.reduce((sum, order) => sum + order.total, 0);
      const last7Days = Array.from({ length: 7 }, (_, i) => {
        const d = /* @__PURE__ */ new Date();
        d.setDate(d.getDate() - i);
        return d;
      });
      const dailySales = allOrders.reduce((acc, order) => {
        const day = new Date(order.orderDate).toLocaleDateString("fr-CM", { day: "2-digit", month: "2-digit" });
        acc[day] = (acc[day] || 0) + order.total;
        return acc;
      }, {});
      const _salesData = last7Days.map((d) => {
        const label = d.toLocaleDateString("fr-CM", { day: "2-digit", month: "2-digit" });
        return { label: d.toLocaleDateString("fr-CM", { weekday: "short" }), revenue: dailySales[label] || 0 };
      }).reverse();
      const _orderStatusDistribution = allOrders.reduce((acc, order) => {
        acc[order.status] = (acc[order.status] || 0) + 1;
        return acc;
      }, {});
      return {
        stats: {
          totalRevenue,
          totalOrders: allOrders.length,
          pendingStores: allStores.filter((s) => s.status === "pending").length,
          totalUsers: allUsers.length
        },
        salesData: _salesData,
        orderStatusDistribution: Object.entries(_orderStatusDistribution).sort((a, b) => b[1] - a[1])
      };
    }, [allOrders, allStores, allUsers]);
    const recentOrders = (0, import_react41.useMemo)(() => [...allOrders].sort((a, b) => new Date(b.orderDate).getTime() - new Date(a.orderDate).getTime()).slice(0, 5), [allOrders]);
    const recentUsers = (0, import_react41.useMemo)(() => [...allUsers].sort((a, b) => parseInt(b.id) - parseInt(a.id)).slice(0, 5), [allUsers]);
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "p-4 sm:p-6 space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(StatCard3, { icon: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(CurrencyDollarIcon, { className: "w-7 h-7" }), label: t("superadmin.overview.totalRevenue"), value: `${stats.totalRevenue.toLocaleString("fr-CM")} FCFA`, color: "bg-green-100 dark:bg-green-900/50 text-green-600 dark:text-green-300" }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(StatCard3, { icon: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(ShoppingBagIcon, { className: "w-7 h-7" }), label: t("superadmin.overview.totalOrders"), value: stats.totalOrders, color: "bg-blue-100 dark:bg-blue-900/50 text-blue-600 dark:text-blue-300" }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(StatCard3, { icon: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(UsersIcon, { className: "w-7 h-7" }), label: t("superadmin.overview.totalUsers"), value: stats.totalUsers, color: "bg-yellow-100 dark:bg-yellow-900/50 text-yellow-600 dark:text-yellow-300" }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(StatCard3, { icon: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(BuildingStorefrontIcon, { className: "w-7 h-7" }), label: t("superadmin.overview.pendingStores"), value: stats.pendingStores, color: "bg-purple-100 dark:bg-purple-900/50 text-purple-600 dark:text-purple-300" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "lg:col-span-2 bg-white dark:bg-gray-800/50 rounded-lg shadow-sm p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.overview.revenueLast7Days") }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "flex justify-around items-end h-64 border-l border-b border-gray-200 dark:border-gray-700 pl-4 pb-4", children: salesData.map(({ label, revenue }) => /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex flex-col items-center h-full justify-end", title: `${revenue.toLocaleString("fr-CM")} FCFA`, children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "w-8 bg-kmer-green rounded-t-md hover:bg-green-700", style: { height: `${revenue / Math.max(...salesData.map((d) => d.revenue), 1) * 100}%` } }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-xs mt-1", children: label })
          ] }, label)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "bg-white dark:bg-gray-800/50 rounded-lg shadow-sm p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.overview.orderStatuses") }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("ul", { className: "space-y-2", children: orderStatusDistribution.map(([status, count]) => /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("li", { className: "flex justify-between text-sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { children: t(`orderStatus.${status}`, status) }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { className: "font-bold", children: count })
          ] }, status)) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "bg-white dark:bg-gray-800/50 rounded-lg shadow-sm p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.overview.recentOrders") }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("ul", { className: "divide-y dark:divide-gray-700", children: recentOrders.map((o) => /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("li", { className: "py-2 flex justify-between items-center text-sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "font-semibold", children: o.shippingAddress.fullName }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-xs text-gray-500", children: o.id })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "text-right", children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("p", { className: "font-bold", children: [
                o.total.toLocaleString("fr-CM"),
                " FCFA"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-xs", children: t(`orderStatus.${o.status}`, o.status) })
            ] })
          ] }, o.id)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "bg-white dark:bg-gray-800/50 rounded-lg shadow-sm p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.overview.newUsers") }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("ul", { className: "divide-y dark:divide-gray-700", children: recentUsers.map((u) => /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("li", { className: "py-2 flex justify-between items-center text-sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "font-semibold", children: u.name }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-xs text-gray-500", children: u.email })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { className: "capitalize text-xs font-medium bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded-full", children: u.role.replace("_", " ") })
          ] }, u.id)) })
        ] })
      ] })
    ] });
  };

  // components/admin/UsersPanel.tsx
  var import_react43 = __toESM(require_react());

  // components/admin/BulkEmailModal.tsx
  var import_react42 = __toESM(require_react());
  var import_jsx_runtime57 = __toESM(require_jsx_runtime());
  var BulkEmailModal = ({ isOpen, onClose, onSend, recipients, emailTemplates }) => {
    const { t } = useLanguage();
    const [subject, setSubject] = (0, import_react42.useState)("");
    const [body, setBody] = (0, import_react42.useState)("");
    const [selectedTemplateId, setSelectedTemplateId] = (0, import_react42.useState)("");
    (0, import_react42.useEffect)(() => {
      if (selectedTemplateId) {
        const template = emailTemplates.find((t2) => t2.id === selectedTemplateId);
        if (template) {
          setSubject(template.subject);
          setBody(template.body.replace("{emailContent}", ""));
        }
      } else {
        setSubject("");
        setBody("");
      }
    }, [selectedTemplateId, emailTemplates]);
    if (!isOpen) return null;
    const handleSubmit = (e) => {
      e.preventDefault();
      onSend(subject, body);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 max-w-2xl w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex justify-between items-center mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("h2", { className: "text-xl font-bold", children: t("superadmin.emailModal.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("button", { onClick: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(XIcon, { className: "w-6 h-6" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("p", { className: "text-sm text-gray-500 mb-4", children: t("superadmin.emailModal.recipients", recipients.length) }),
      /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("label", { htmlFor: "template", className: "block text-sm font-medium", children: t("superadmin.emailModal.useTemplate") }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(
            "select",
            {
              id: "template",
              value: selectedTemplateId,
              onChange: (e) => setSelectedTemplateId(e.target.value),
              className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("option", { value: "", children: t("superadmin.emailModal.customEmail") }),
                emailTemplates.map((t2) => /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("option", { value: t2.id, children: t2.name }, t2.id))
              ]
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("label", { htmlFor: "subject", className: "block text-sm font-medium", children: t("superadmin.emailModal.subject") }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
            "input",
            {
              type: "text",
              id: "subject",
              value: subject,
              onChange: (e) => setSubject(e.target.value),
              className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600",
              required: true
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("label", { htmlFor: "body", className: "block text-sm font-medium", children: t("superadmin.emailModal.body") }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
            "textarea",
            {
              id: "body",
              rows: 8,
              value: body,
              onChange: (e) => setBody(e.target.value),
              className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600",
              required: true
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("p", { className: "text-xs text-gray-400 mt-1", children: t("superadmin.emailModal.variableInfo") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex justify-end gap-3 pt-4 border-t dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("button", { type: "button", onClick: onClose, className: "bg-gray-200 dark:bg-gray-600 font-semibold py-2 px-4 rounded-lg", children: t("common.cancel") }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("button", { type: "submit", className: "bg-blue-600 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(PaperAirplaneIcon, { className: "w-5 h-5" }),
            t("superadmin.emailModal.send")
          ] })
        ] })
      ] })
    ] }) });
  };
  var BulkEmailModal_default = BulkEmailModal;

  // components/admin/UsersPanel.tsx
  var import_jsx_runtime58 = __toESM(require_jsx_runtime());
  var UsersPanel = ({ allUsers, onUpdateUser, onCreateUserByAdmin, onWarnUser, allPickupPoints, allZones, onSendBulkEmail, siteSettings }) => {
    const { t } = useLanguage();
    const [searchTerm, setSearchTerm] = (0, import_react43.useState)("");
    const [editingUser, setEditingUser] = (0, import_react43.useState)(null);
    const [isCreating, setIsCreating] = (0, import_react43.useState)(false);
    const [selectedUserIds, setSelectedUserIds] = (0, import_react43.useState)([]);
    const [isEmailModalOpen, setIsEmailModalOpen] = (0, import_react43.useState)(false);
    const filteredUsers = (0, import_react43.useMemo)(
      () => allUsers.filter((u) => u.name.toLowerCase().includes(searchTerm.toLowerCase()) || u.email.toLowerCase().includes(searchTerm.toLowerCase())),
      [allUsers, searchTerm]
    );
    const handleSelectUser = (userId) => {
      setSelectedUserIds(
        (prev) => prev.includes(userId) ? prev.filter((id) => id !== userId) : [...prev, userId]
      );
    };
    const handleSelectAll = (e) => {
      if (e.target.checked) {
        setSelectedUserIds(filteredUsers.map((u) => u.id));
      } else {
        setSelectedUserIds([]);
      }
    };
    const UserForm = ({ user, onSave, onCancel }) => {
      const [data, setData] = (0, import_react43.useState)({ name: user?.name || "", email: user?.email || "", role: user?.role || "customer", depotId: user?.depotId || "", zoneId: user?.zoneId || "" });
      const handleChange = (e) => setData((d) => ({ ...d, [e.target.name]: e.target.value }));
      const handleSubmit = (e) => {
        e.preventDefault();
        onSave(data);
      };
      const isLogisticsRole = ["delivery_agent", "depot_agent", "depot_manager"].includes(data.role);
      return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("form", { onSubmit: handleSubmit, className: "bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("h3", { className: "text-lg font-bold", children: user ? t("superadmin.users.form.editTitle") : t("superadmin.users.form.createTitle") }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("input", { name: "name", value: data.name, onChange: handleChange, placeholder: t("superadmin.users.form.name"), className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("input", { type: "email", name: "email", value: data.email, onChange: handleChange, placeholder: "Email", className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", required: true, disabled: !!user }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("select", { name: "role", value: data.role, onChange: handleChange, className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("option", { value: "customer", children: t("superadmin.users.form.role_customer") }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("option", { value: "seller", children: t("superadmin.users.form.role_seller") }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("option", { value: "delivery_agent", children: t("superadmin.users.form.role_delivery_agent") }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("option", { value: "depot_agent", children: t("superadmin.users.form.role_depot_agent") }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("option", { value: "depot_manager", children: t("superadmin.users.form.role_depot_manager") }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("option", { value: "superadmin", children: t("superadmin.users.form.role_superadmin") })
        ] }),
        isLogisticsRole && /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)(import_jsx_runtime58.Fragment, { children: [
          (data.role === "depot_agent" || data.role === "depot_manager") && /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("label", { htmlFor: "depotId", className: "block text-sm font-medium dark:text-gray-300", children: t("superadmin.users.form.assignedDepot") }),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("select", { name: "depotId", id: "depotId", value: data.depotId, onChange: handleChange, className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 mt-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("option", { value: "", children: t("superadmin.users.form.noDepot") }),
              allPickupPoints.map((point) => /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("option", { value: point.id, children: [
                point.name,
                " - ",
                point.city
              ] }, point.id))
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("label", { htmlFor: "zoneId", className: "block text-sm font-medium dark:text-gray-300", children: t("superadmin.users.form.deliveryZone") }),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("select", { name: "zoneId", id: "zoneId", value: data.zoneId, onChange: handleChange, className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 mt-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("option", { value: "", children: t("superadmin.users.form.noZone") }),
              allZones.map((zone) => /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("option", { value: zone.id, children: [
                zone.name,
                " - ",
                zone.city
              ] }, zone.id))
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex justify-end gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("button", { type: "button", onClick: onCancel, className: "px-4 py-2 bg-gray-200 dark:bg-gray-600 rounded-lg", children: t("common.cancel") }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("button", { type: "submit", className: "px-4 py-2 bg-blue-500 text-white rounded-lg", children: t("common.save") })
        ] })
      ] }) });
    };
    const handleSaveUser = (data) => {
      if (editingUser) {
        const updates = { role: data.role, name: data.name };
        if (["delivery_agent", "depot_agent", "depot_manager"].includes(data.role)) {
          updates.depotId = data.depotId || void 0;
          updates.zoneId = data.zoneId || void 0;
        } else {
          updates.depotId = void 0;
          updates.zoneId = void 0;
        }
        onUpdateUser(editingUser.id, updates);
      } else {
        onCreateUserByAdmin(data);
      }
      setEditingUser(null);
      setIsCreating(false);
    };
    const handleSendEmail = (subject, body) => {
      onSendBulkEmail(selectedUserIds, subject, body);
      setIsEmailModalOpen(false);
      setSelectedUserIds([]);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "p-4 sm:p-6", children: [
      isEmailModalOpen && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
        BulkEmailModal_default,
        {
          isOpen: isEmailModalOpen,
          onClose: () => setIsEmailModalOpen(false),
          onSend: handleSendEmail,
          recipients: allUsers.filter((u) => selectedUserIds.includes(u.id)),
          emailTemplates: siteSettings.emailTemplates || []
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.users.title", allUsers.length) }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex justify-between items-center mb-4 flex-wrap gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("input", { type: "text", placeholder: t("superadmin.users.searchPlaceholder"), value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: "p-2 border rounded-md w-full sm:w-1/2 dark:bg-gray-700 dark:border-gray-600" }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("button", { onClick: () => setIsEmailModalOpen(true), disabled: selectedUserIds.length === 0, className: "bg-blue-500 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2 disabled:bg-gray-400", children: t("superadmin.users.sendEmail", selectedUserIds.length) }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("button", { onClick: () => setIsCreating(true), className: "bg-green-500 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(PlusIcon, { className: "w-5 h-5" }),
            " ",
            t("superadmin.users.create")
          ] })
        ] })
      ] }),
      (editingUser || isCreating) && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(UserForm, { user: editingUser, onSave: handleSaveUser, onCancel: () => {
        setEditingUser(null);
        setIsCreating(false);
      } }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "overflow-x-auto", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("table", { className: "w-full text-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("th", { className: "p-2 w-10", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("input", { type: "checkbox", onChange: handleSelectAll, checked: selectedUserIds.length === filteredUsers.length && filteredUsers.length > 0 }) }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("th", { className: "p-2 text-left", children: t("superadmin.users.table.name") }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("th", { className: "p-2 text-left", children: t("superadmin.users.table.email") }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("th", { className: "p-2 text-left", children: t("superadmin.users.table.role") }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("th", { className: "p-2 text-center", children: t("superadmin.users.table.action") })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("tbody", { children: filteredUsers.map((user) => /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("td", { className: "p-2", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("input", { type: "checkbox", checked: selectedUserIds.includes(user.id), onChange: () => handleSelectUser(user.id) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("td", { className: "p-2", children: user.name }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("td", { className: "p-2", children: user.email }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("td", { className: "p-2 capitalize", children: user.role.replace("_", " ") }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("td", { className: "p-2 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex justify-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("button", { onClick: () => setEditingUser(user), className: "text-blue-500", title: t("common.edit"), children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(PencilSquareIcon, { className: "w-5 h-5" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("button", { onClick: () => {
              const reason = prompt(`${t("superadmin.stores.warnReason")} ${user.name}:`);
              if (reason) onWarnUser(user.id, reason);
            }, className: "text-yellow-500", title: t("common.warn"), children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(ExclamationTriangleIcon, { className: "w-5 h-5" }) })
          ] }) })
        ] }, user.id)) })
      ] }) })
    ] });
  };

  // components/admin/CatalogPanel.tsx
  var import_react44 = __toESM(require_react());
  var import_jsx_runtime59 = __toESM(require_jsx_runtime());
  var CatalogPanel = ({ allCategories, onAdminAddCategory, onAdminDeleteCategory, onAdminUpdateCategory }) => {
    const { t } = useLanguage();
    const [newCategoryName, setNewCategoryName] = (0, import_react44.useState)("");
    const [selectedParent, setSelectedParent] = (0, import_react44.useState)("");
    const [editingCategories, setEditingCategories] = (0, import_react44.useState)({});
    const categoryTree = (0, import_react44.useMemo)(() => {
      const mainCategories = allCategories.filter((c) => !c.parentId);
      return mainCategories.map((mainCat) => ({
        ...mainCat,
        subCategories: allCategories.filter((c) => c.parentId === mainCat.id)
      }));
    }, [allCategories]);
    const handleAddCategory = (e) => {
      e.preventDefault();
      if (!newCategoryName.trim()) return;
      onAdminAddCategory(newCategoryName, selectedParent || void 0);
      setNewCategoryName("");
      setSelectedParent("");
    };
    const handleCategoryChange = (id, field, value) => {
      setEditingCategories((prev) => ({
        ...prev,
        [id]: {
          ...prev[id],
          [field]: value
        }
      }));
    };
    const handleSaveCategory = (id) => {
      if (editingCategories[id]) {
        onAdminUpdateCategory(id, editingCategories[id]);
        setEditingCategories((prev) => {
          const newState = { ...prev };
          delete newState[id];
          return newState;
        });
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "p-4 sm:p-6 grid grid-cols-1 lg:grid-cols-3 gap-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "lg:col-span-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.catalog.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "space-y-4 max-h-[70vh] overflow-y-auto", children: categoryTree.map((mainCat) => /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-900/50 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
              "input",
              {
                value: editingCategories[mainCat.id]?.name ?? mainCat.name,
                onChange: (e) => handleCategoryChange(mainCat.id, "name", e.target.value),
                className: "font-bold p-1 border rounded w-full bg-transparent dark:border-gray-600"
              }
            ),
            editingCategories[mainCat.id] && /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("button", { onClick: () => handleSaveCategory(mainCat.id), className: "text-green-500", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(CheckCircleIcon, { className: "w-5 h-5" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("button", { onClick: () => onAdminDeleteCategory(mainCat.id), className: "text-red-500 hover:text-red-700", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(TrashIcon, { className: "w-4 h-4" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "flex items-center gap-2 mt-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("img", { src: editingCategories[mainCat.id]?.imageUrl ?? mainCat.imageUrl, alt: mainCat.name, className: "w-10 h-10 object-cover rounded-sm" }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
              "input",
              {
                placeholder: t("superadmin.catalog.imageUrl"),
                value: editingCategories[mainCat.id]?.imageUrl ?? mainCat.imageUrl,
                onChange: (e) => handleCategoryChange(mainCat.id, "imageUrl", e.target.value),
                className: "text-xs p-1 border rounded w-full bg-transparent dark:border-gray-600"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("label", { htmlFor: `cat-img-upload-${mainCat.id}`, className: "cursor-pointer bg-gray-200 dark:bg-gray-600 px-2 py-1 rounded-md text-xs font-medium whitespace-nowrap", children: [
              t("superadmin.settings.identity.upload"),
              /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
                "input",
                {
                  id: `cat-img-upload-${mainCat.id}`,
                  type: "file",
                  className: "sr-only",
                  onChange: (e) => {
                    if (e.target.files && e.target.files[0]) {
                      const reader = new FileReader();
                      reader.onloadend = () => {
                        handleCategoryChange(mainCat.id, "imageUrl", reader.result);
                      };
                      reader.readAsDataURL(e.target.files[0]);
                    }
                  },
                  accept: "image/*"
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("ul", { className: "list-disc list-inside pl-4 mt-2 space-y-2", children: mainCat.subCategories.map((subCat) => /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("li", { className: "flex flex-col gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
                "input",
                {
                  value: editingCategories[subCat.id]?.name ?? subCat.name,
                  onChange: (e) => handleCategoryChange(subCat.id, "name", e.target.value),
                  className: "p-1 border rounded w-full bg-transparent text-sm dark:border-gray-600"
                }
              ),
              editingCategories[subCat.id] && /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("button", { onClick: () => handleSaveCategory(subCat.id), className: "text-green-500", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(CheckCircleIcon, { className: "w-5 h-5" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("button", { onClick: () => onAdminDeleteCategory(subCat.id), className: "text-red-500 hover:text-red-700", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(TrashIcon, { className: "w-4 h-4" }) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "flex items-center gap-2 mt-1 pl-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("img", { src: editingCategories[subCat.id]?.imageUrl ?? subCat.imageUrl, alt: subCat.name, className: "w-8 h-8 object-cover rounded-sm" }),
              /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
                "input",
                {
                  placeholder: t("superadmin.catalog.imageUrl"),
                  value: editingCategories[subCat.id]?.imageUrl ?? subCat.imageUrl,
                  onChange: (e) => handleCategoryChange(subCat.id, "imageUrl", e.target.value),
                  className: "text-xs p-1 border rounded w-full bg-transparent dark:border-gray-600"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("label", { htmlFor: `cat-img-upload-${subCat.id}`, className: "cursor-pointer bg-gray-200 dark:bg-gray-600 px-2 py-1 rounded-md text-xs font-medium whitespace-nowrap", children: [
                t("superadmin.settings.identity.upload"),
                /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
                  "input",
                  {
                    id: `cat-img-upload-${subCat.id}`,
                    type: "file",
                    className: "sr-only",
                    onChange: (e) => {
                      if (e.target.files && e.target.files[0]) {
                        const reader = new FileReader();
                        reader.onloadend = () => {
                          handleCategoryChange(subCat.id, "imageUrl", reader.result);
                        };
                        reader.readAsDataURL(e.target.files[0]);
                      }
                    },
                    accept: "image/*"
                  }
                )
              ] })
            ] })
          ] }, subCat.id)) })
        ] }, mainCat.id)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("h3", { className: "text-lg font-bold mb-4", children: t("superadmin.catalog.addCategory") }),
        /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("form", { onSubmit: handleAddCategory, className: "p-4 bg-gray-100 dark:bg-gray-700/50 rounded-lg space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("label", { htmlFor: "catName", className: "block text-sm font-medium", children: t("superadmin.catalog.categoryName") }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("input", { type: "text", id: "catName", value: newCategoryName, onChange: (e) => setNewCategoryName(e.target.value), className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", required: true })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("label", { htmlFor: "catParent", className: "block text-sm font-medium", children: t("superadmin.catalog.parentCategory") }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("select", { id: "catParent", value: selectedParent, onChange: (e) => setSelectedParent(e.target.value), className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
              /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("option", { value: "", children: t("superadmin.catalog.mainCategory") }),
              allCategories.filter((c) => !c.parentId).map((c) => /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("option", { value: c.id, children: c.name }, c.id))
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("button", { type: "submit", className: "w-full bg-blue-500 text-white font-bold py-2 rounded-lg flex items-center justify-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(PlusIcon, { className: "w-5 h-5" }),
            " ",
            t("superadmin.catalog.add")
          ] })
        ] })
      ] })
    ] });
  };

  // components/admin/MarketingPanel.tsx
  var import_react46 = __toESM(require_react());

  // components/admin/FlashSaleForm.tsx
  var import_react45 = __toESM(require_react());
  var import_jsx_runtime60 = __toESM(require_jsx_runtime());
  var FlashSaleForm = ({ onSave, onCancel }) => {
    const { t } = useLanguage();
    const [name, setName] = (0, import_react45.useState)("");
    const [startDate, setStartDate] = (0, import_react45.useState)("");
    const [endDate, setEndDate] = (0, import_react45.useState)("");
    const [errors, setErrors] = (0, import_react45.useState)({});
    const validate = () => {
      const newErrors = {};
      if (!name.trim()) {
        newErrors.name = t("superadmin.marketing.flashSaleForm.error_name");
      }
      if (!startDate) {
        newErrors.startDate = t("superadmin.marketing.flashSaleForm.error_startDate");
      }
      if (!endDate) {
        newErrors.endDate = t("superadmin.marketing.flashSaleForm.error_endDate");
      }
      if (startDate && endDate) {
        const start = new Date(startDate);
        const end = new Date(endDate);
        const now = /* @__PURE__ */ new Date();
        if (start >= end) {
          newErrors.endDate = t("superadmin.marketing.flashSaleForm.error_endDateAfterStart");
        }
        if (end < now) {
          newErrors.endDate = t("superadmin.marketing.flashSaleForm.error_endDatePast");
        }
      }
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handleSave = () => {
      if (validate()) {
        onSave({ name, startDate, endDate });
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "p-6 bg-gray-50 dark:bg-gray-800/50 rounded-lg border dark:border-gray-700", children: [
      /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("h3", { className: "text-xl font-bold mb-4 dark:text-white", children: t("superadmin.marketing.flashSaleForm.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("label", { htmlFor: "fsName", className: "block text-sm font-medium dark:text-gray-300", children: t("superadmin.marketing.flashSaleForm.name") }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
            "input",
            {
              type: "text",
              id: "fsName",
              value: name,
              onChange: (e) => setName(e.target.value),
              className: `mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600 ${errors.name ? "border-red-500" : ""}`,
              "aria-invalid": !!errors.name,
              "aria-describedby": errors.name ? "fsName-error" : void 0
            }
          ),
          errors.name && /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { id: "fsName-error", className: "flex items-center gap-1 mt-1 text-sm text-red-600 dark:text-red-400", children: [
            /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(ExclamationTriangleIcon, { className: "w-4 h-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("span", { children: errors.name })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("label", { htmlFor: "fsStartDate", className: "block text-sm font-medium dark:text-gray-300", children: t("superadmin.marketing.flashSaleForm.startDate") }),
            /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
              "input",
              {
                type: "datetime-local",
                id: "fsStartDate",
                value: startDate,
                onChange: (e) => setStartDate(e.target.value),
                className: `mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600 ${errors.startDate ? "border-red-500" : ""}`,
                "aria-invalid": !!errors.startDate,
                "aria-describedby": errors.startDate ? "fsStartDate-error" : void 0
              }
            ),
            errors.startDate && /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { id: "fsStartDate-error", className: "flex items-center gap-1 mt-1 text-sm text-red-600 dark:text-red-400", children: [
              /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(ExclamationTriangleIcon, { className: "w-4 h-4" }),
              /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("span", { children: errors.startDate })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("label", { htmlFor: "fsEndDate", className: "block text-sm font-medium dark:text-gray-300", children: t("superadmin.marketing.flashSaleForm.endDate") }),
            /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
              "input",
              {
                type: "datetime-local",
                id: "fsEndDate",
                value: endDate,
                onChange: (e) => setEndDate(e.target.value),
                className: `mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600 ${errors.endDate ? "border-red-500" : ""}`,
                "aria-invalid": !!errors.endDate,
                "aria-describedby": errors.endDate ? "fsEndDate-error" : void 0
              }
            ),
            errors.endDate && /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { id: "fsEndDate-error", className: "flex items-center gap-1 mt-1 text-sm text-red-600 dark:text-red-400", children: [
              /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(ExclamationTriangleIcon, { className: "w-4 h-4" }),
              /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("span", { children: errors.endDate })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "flex justify-end gap-3 pt-4 border-t dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("button", { onClick: onCancel, className: "bg-white dark:bg-gray-600 py-2 px-4 border border-gray-300 dark:border-gray-500 rounded-md shadow-sm text-sm font-medium hover:bg-gray-50 dark:hover:bg-gray-500", children: t("common.cancel") }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("button", { onClick: handleSave, className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg hover:bg-green-700", children: t("superadmin.marketing.flashSaleForm.create") })
        ] })
      ] })
    ] });
  };
  var FlashSaleForm_default = FlashSaleForm;

  // components/admin/FlashSaleDetailView.tsx
  var import_jsx_runtime61 = __toESM(require_jsx_runtime());
  var FlashSaleDetailView = ({ sale, allProducts, onUpdateStatus, onBatchUpdateStatus }) => {
    const { t } = useLanguage();
    const pendingProductIds = sale.products.filter((p) => p.status === "pending").map((p) => p.productId);
    const getProductInfo = (productId) => {
      return allProducts.find((p) => p.id === productId);
    };
    const handleBatchApprove = () => {
      if (pendingProductIds.length > 0) {
        onBatchUpdateStatus(sale.id, pendingProductIds, "approved");
      }
    };
    const handleBatchReject = () => {
      if (pendingProductIds.length > 0) {
        onBatchUpdateStatus(sale.id, pendingProductIds, "rejected");
      }
    };
    if (sale.products.length === 0) {
      return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "p-4 text-center text-gray-500", children: "Aucun produit n'a \xE9t\xE9 soumis pour cette vente." });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "p-4 bg-gray-100 dark:bg-gray-900/50", children: [
      /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex justify-between items-center mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("h4", { className: "font-bold", children: t("superadmin.marketing.flashSaleDetail.submissions") }),
        pendingProductIds.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("button", { onClick: handleBatchApprove, className: "bg-green-500 text-white text-xs font-bold py-1 px-3 rounded-md hover:bg-green-600", children: t("superadmin.marketing.flashSaleDetail.approveAll") }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("button", { onClick: handleBatchReject, className: "bg-red-500 text-white text-xs font-bold py-1 px-3 rounded-md hover:bg-red-600", children: t("superadmin.marketing.flashSaleDetail.rejectAll") })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "overflow-x-auto", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("table", { className: "min-w-full text-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("thead", { className: "bg-gray-200 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("th", { className: "px-4 py-2 text-left", children: t("superadmin.marketing.flashSaleDetail.product") }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("th", { className: "px-4 py-2 text-left", children: t("superadmin.marketing.flashSaleDetail.seller") }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("th", { className: "px-4 py-2 text-right", children: t("superadmin.marketing.flashSaleDetail.originalPrice") }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("th", { className: "px-4 py-2 text-right", children: t("superadmin.marketing.flashSaleDetail.flashPrice") }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("th", { className: "px-4 py-2 text-center", children: t("common.status") }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("th", { className: "px-4 py-2 text-center", children: t("common.actions") })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("tbody", { className: "divide-y divide-gray-200 dark:divide-gray-600", children: sale.products.map((sp) => {
          const product = getProductInfo(sp.productId);
          if (!product) return null;
          return /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("td", { className: "px-4 py-2 flex items-center gap-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("img", { src: product.imageUrls[0], alt: product.name, className: "w-10 h-10 object-cover rounded-md" }),
              /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("span", { children: product.name })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("td", { className: "px-4 py-2", children: sp.sellerShopName }),
            /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("td", { className: "px-4 py-2 text-right", children: [
              product.price.toLocaleString("fr-CM"),
              " FCFA"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("td", { className: "px-4 py-2 text-right font-bold text-kmer-green", children: [
              sp.flashPrice.toLocaleString("fr-CM"),
              " FCFA"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("td", { className: "px-4 py-2 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("span", { className: `px-2 py-0.5 text-xs font-semibold rounded-full ${sp.status === "approved" ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200" : sp.status === "rejected" ? "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200" : "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200"}`, children: sp.status }) }),
            /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("td", { className: "px-4 py-2 text-center", children: sp.status === "pending" ? /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex justify-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("button", { onClick: () => onUpdateStatus(sale.id, sp.productId, "approved"), className: "p-1 text-green-600 hover:bg-green-100 dark:hover:bg-green-900/50 rounded-full", "aria-label": t("common.approve"), children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(CheckIcon, { className: "w-5 h-5" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("button", { onClick: () => onUpdateStatus(sale.id, sp.productId, "rejected"), className: "p-1 text-red-600 hover:bg-red-100 dark:hover:bg-red-900/50 rounded-full", "aria-label": t("common.reject"), children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(XIcon, { className: "w-5 h-5" }) })
            ] }) : "-" })
          ] }, sp.productId);
        }) })
      ] }) })
    ] });
  };
  var FlashSaleDetailView_default = FlashSaleDetailView;

  // components/admin/MarketingPanel.tsx
  var import_jsx_runtime62 = __toESM(require_jsx_runtime());
  var PanelButton = ({ tab, label, activeTab, setActiveTab }) => /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("button", { onClick: () => setActiveTab(tab), className: `px-4 py-2 font-semibold ${activeTab === tab ? "border-b-2 border-kmer-green text-kmer-green" : "text-gray-500 dark:text-gray-400"}`, children: label });
  var AnnouncementForm = ({ announcement, onSave, onCancel }) => {
    const { t } = useLanguage();
    const [data, setData] = (0, import_react46.useState)({
      id: announcement?.id || void 0,
      title: announcement?.title || "",
      content: announcement?.content || "",
      target: announcement?.target || "all",
      startDate: announcement?.startDate ? new Date(announcement.startDate).toISOString().substring(0, 10) : "",
      endDate: announcement?.endDate ? new Date(announcement.endDate).toISOString().substring(0, 10) : "",
      isActive: announcement?.isActive === void 0 ? true : announcement.isActive
    });
    const handleChange = (e) => {
      const { name, value, type } = e.target;
      const checked = e.target.checked;
      setData((d) => ({ ...d, [name]: type === "checkbox" ? checked : value }));
    };
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("form", { onSubmit: (e) => {
      e.preventDefault();
      onSave(data);
    }, className: "space-y-4 p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("input", { name: "title", value: data.title, onChange: handleChange, placeholder: t("superadmin.marketing.announcementForm.title"), className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("textarea", { name: "content", value: data.content, onChange: handleChange, placeholder: t("superadmin.marketing.announcementForm.content"), className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("input", { type: "date", name: "startDate", value: data.startDate, onChange: handleChange, className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("input", { type: "date", name: "endDate", value: data.endDate, onChange: handleChange, className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("select", { name: "target", value: data.target, onChange: handleChange, className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("option", { value: "all", children: t("superadmin.marketing.announcementForm.target_all") }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("option", { value: "customers", children: t("superadmin.marketing.announcementForm.target_customers") }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("option", { value: "sellers", children: t("superadmin.marketing.announcementForm.target_sellers") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("label", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("input", { type: "checkbox", name: "isActive", checked: data.isActive, onChange: handleChange }),
        " ",
        t("superadmin.marketing.announcementForm.activate")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex justify-end gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("button", { type: "button", onClick: onCancel, className: "px-4 py-2 bg-gray-200 rounded", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("button", { type: "submit", className: "px-4 py-2 bg-blue-500 text-white rounded", children: t("common.save") })
      ] })
    ] });
  };
  var AdForm = ({ ad, onSave, onCancel }) => {
    const { t } = useLanguage();
    const [data, setData] = (0, import_react46.useState)({
      imageUrl: ad?.imageUrl || "",
      linkUrl: ad?.linkUrl || "",
      location: ad?.location || "homepage-banner",
      isActive: ad?.isActive === void 0 ? true : ad.isActive
    });
    const handleChange = (e) => {
      const { name, value, type, checked } = e.target;
      setData((d) => ({ ...d, [name]: type === "checkbox" ? checked : value }));
    };
    const handleFileChange = (e) => {
      if (e.target.files && e.target.files[0]) {
        const reader = new FileReader();
        reader.onloadend = () => {
          setData((d) => ({ ...d, imageUrl: reader.result }));
        };
        reader.readAsDataURL(e.target.files[0]);
      }
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onSave(data);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("form", { onSubmit: handleSubmit, className: "p-4 space-y-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("label", { className: "block text-sm font-medium", children: t("superadmin.marketing.adForm.imageUrl") }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex items-center gap-2 mt-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("input", { name: "imageUrl", value: data.imageUrl, onChange: handleChange, placeholder: "https://... ou t\xE9l\xE9verser", className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true }),
          /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("label", { htmlFor: "ad-image-upload", className: "cursor-pointer bg-gray-200 dark:bg-gray-600 px-3 py-2 rounded-md text-sm font-medium whitespace-nowrap", children: [
            t("superadmin.settings.identity.upload"),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("input", { id: "ad-image-upload", type: "file", className: "sr-only", onChange: handleFileChange, accept: "image/*" })
          ] })
        ] }),
        data.imageUrl && /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("img", { src: data.imageUrl, alt: "Aper\xE7u", className: "h-20 mt-2 object-contain rounded" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("input", { name: "linkUrl", value: data.linkUrl, onChange: handleChange, placeholder: t("superadmin.marketing.adForm.linkUrl"), className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("label", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("input", { type: "checkbox", name: "isActive", checked: data.isActive, onChange: handleChange }),
        " ",
        t("superadmin.marketing.adForm.activate")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex justify-end gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("button", { type: "button", onClick: onCancel, className: "px-4 py-2 bg-gray-200 rounded", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("button", { type: "submit", className: "px-4 py-2 bg-blue-500 text-white rounded", children: t("common.save") })
      ] })
    ] });
  };
  var MarketingPanel = (props) => {
    const { flashSales, onSaveFlashSale, allProducts, onUpdateFlashSaleSubmissionStatus, onBatchUpdateFlashSaleStatus, advertisements, onAddAdvertisement, onUpdateAdvertisement, onDeleteAdvertisement, allAnnouncements, onCreateOrUpdateAnnouncement } = props;
    const { t } = useLanguage();
    const [subTab, setSubTab] = (0, import_react46.useState)("flashSales");
    const [isCreatingFlashSale, setIsCreatingFlashSale] = (0, import_react46.useState)(false);
    const [isAdFormOpen, setIsAdFormOpen] = (0, import_react46.useState)(false);
    const [editingAd, setEditingAd] = (0, import_react46.useState)(null);
    const [isAnnouncementFormOpen, setIsAnnouncementFormOpen] = (0, import_react46.useState)(false);
    const [editingAnnouncement, setEditingAnnouncement] = (0, import_react46.useState)(null);
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "p-4 sm:p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex border-b dark:border-gray-700 mb-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(PanelButton, { tab: "flashSales", label: t("superadmin.marketing.tabs.flashSales"), activeTab: subTab, setActiveTab: setSubTab }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(PanelButton, { tab: "ads", label: t("superadmin.marketing.tabs.ads"), activeTab: subTab, setActiveTab: setSubTab }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(PanelButton, { tab: "announcements", label: t("superadmin.marketing.tabs.announcements"), activeTab: subTab, setActiveTab: setSubTab })
      ] }),
      subTab === "flashSales" && /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("button", { onClick: () => setIsCreatingFlashSale(true), className: "bg-green-500 text-white font-bold py-2 px-4 rounded-lg mb-4 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(PlusIcon, { className: "w-5 h-5" }),
          " ",
          t("superadmin.marketing.createFlashSale")
        ] }),
        isCreatingFlashSale && /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(FlashSaleForm_default, { onSave: (data) => {
          onSaveFlashSale(data);
          setIsCreatingFlashSale(false);
        }, onCancel: () => setIsCreatingFlashSale(false) }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: "space-y-4 mt-4", children: flashSales.map((sale) => /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("details", { className: "p-3 bg-gray-50 dark:bg-gray-700/50 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("summary", { className: "font-semibold cursor-pointer", children: sale.name }),
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(FlashSaleDetailView_default, { sale, allProducts, onUpdateStatus: onUpdateFlashSaleSubmissionStatus, onBatchUpdateStatus: onBatchUpdateFlashSaleStatus })
        ] }, sale.id)) })
      ] }),
      subTab === "ads" && /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { children: [
        !isAdFormOpen && /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("button", { onClick: () => {
          setEditingAd(null);
          setIsAdFormOpen(true);
        }, className: "bg-green-500 text-white font-bold py-2 px-4 rounded-lg mb-4 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(PlusIcon, { className: "w-5 h-5" }),
          " ",
          t("superadmin.marketing.addAd")
        ] }),
        isAdFormOpen && /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(AdForm, { ad: editingAd, onSave: (data) => {
          if (editingAd) {
            onUpdateAdvertisement(editingAd.id, data);
          } else {
            onAddAdvertisement(data);
          }
          setIsAdFormOpen(false);
        }, onCancel: () => setIsAdFormOpen(false) }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: "space-y-2 mt-4", children: advertisements.map((ad) => /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-700/50 rounded-md flex justify-between items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex items-center gap-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("img", { src: ad.imageUrl, alt: "Ad preview", className: "w-24 h-12 object-contain rounded" }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("a", { href: ad.linkUrl, target: "_blank", rel: "noopener noreferrer", className: "font-semibold hover:underline", children: ad.linkUrl }),
              /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("p", { className: `text-xs px-2 py-0.5 rounded-full inline-block mt-1 ${ad.isActive ? "bg-green-200 text-green-800" : "bg-gray-200 text-gray-800"}`, children: ad.isActive ? "Active" : "Inactive" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("button", { onClick: () => {
              setEditingAd(ad);
              setIsAdFormOpen(true);
            }, className: "text-blue-500", children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(PencilSquareIcon, { className: "w-5 h-5" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("button", { onClick: () => onDeleteAdvertisement(ad.id), className: "text-red-500", children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(TrashIcon, { className: "w-5 h-5" }) })
          ] })
        ] }, ad.id)) })
      ] }),
      subTab === "announcements" && /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { children: [
        !isAnnouncementFormOpen && /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("button", { onClick: () => {
          setEditingAnnouncement(null);
          setIsAnnouncementFormOpen(true);
        }, className: "bg-green-500 text-white font-bold py-2 px-4 rounded-lg mb-4 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(PlusIcon, { className: "w-5 h-5" }),
          " ",
          t("superadmin.marketing.createAnnouncement")
        ] }),
        isAnnouncementFormOpen && /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(AnnouncementForm, { announcement: editingAnnouncement, onSave: (data) => {
          onCreateOrUpdateAnnouncement(data);
          setIsAnnouncementFormOpen(false);
        }, onCancel: () => setIsAnnouncementFormOpen(false) }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: "space-y-2 mt-4", children: allAnnouncements.map((ann) => /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-700/50 rounded-md flex justify-between items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("p", { className: "font-semibold", children: [
              ann.title,
              " ",
              /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("span", { className: `text-xs px-2 py-0.5 rounded-full ${ann.isActive ? "bg-green-200 text-green-800" : "bg-gray-200 text-gray-800"}`, children: ann.isActive ? "Active" : "Inactive" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("p", { className: "text-sm", children: ann.content })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("button", { onClick: () => {
            setEditingAnnouncement(ann);
            setIsAnnouncementFormOpen(true);
          }, className: "text-blue-500", children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(PencilSquareIcon, { className: "w-5 h-5" }) })
        ] }, ann.id)) })
      ] })
    ] });
  };

  // components/admin/StoresPanel.tsx
  var import_react47 = __toESM(require_react());
  var import_jsx_runtime63 = __toESM(require_jsx_runtime());
  var DocumentStatusBadge = ({ status }) => {
    const styles = {
      requested: "bg-gray-200 text-gray-700",
      uploaded: "bg-blue-100 text-blue-700",
      verified: "bg-green-100 text-green-700",
      rejected: "bg-red-100 text-red-700"
    };
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("span", { className: `px-2 py-0.5 text-xs font-semibold rounded-full ${styles[status]}`, children: status });
  };
  var StoresPanel = ({ allStores, onApproveStore, onRejectStore, onToggleStoreStatus, onWarnStore, onUpdateDocumentStatus }) => {
    const { t } = useLanguage();
    const [activeTab, setActiveTab] = (0, import_react47.useState)("pending");
    const storesByStatus = {
      pending: allStores.filter((s) => s.status === "pending"),
      active: allStores.filter((s) => s.status === "active"),
      suspended: allStores.filter((s) => s.status === "suspended")
    };
    const tabLabels = {
      pending: t("superadmin.stores.tabs.pending"),
      active: t("superadmin.stores.tabs.active"),
      suspended: t("superadmin.stores.tabs.suspended")
    };
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "p-4 sm:p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.stores.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "flex border-b dark:border-gray-700 mb-4", children: Object.keys(storesByStatus).map((status) => /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("button", { onClick: () => setActiveTab(status), className: `px-4 py-2 font-semibold capitalize ${activeTab === status ? "border-b-2 border-kmer-green text-kmer-green" : "text-gray-500 dark:text-gray-400"}`, children: [
        tabLabels[status],
        " (",
        storesByStatus[status].length,
        ")"
      ] }, status)) }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "overflow-x-auto", children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("table", { className: "w-full text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("th", { className: "p-2 text-left", children: t("superadmin.stores.table.store") }),
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("th", { className: "p-2 text-left", children: t("superadmin.stores.table.seller") }),
            activeTab === "pending" && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("th", { className: "p-2 text-left", children: t("superadmin.stores.table.documents") }),
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("th", { className: "p-2 text-left", children: t("superadmin.stores.table.location") }),
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("th", { className: "p-2 text-center", children: t("common.actions") })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("tbody", { children: storesByStatus[activeTab].map((store) => /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("td", { className: "p-2 font-semibold", children: store.name }),
            /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("td", { className: "p-2", children: [
              store.sellerFirstName,
              " ",
              store.sellerLastName
            ] }),
            activeTab === "pending" && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("td", { className: "p-2", children: store.documents.map((doc) => /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex items-center gap-2 mb-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(DocumentStatusBadge, { status: doc.status }),
              /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("span", { children: doc.name }),
              doc.status === "uploaded" && /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex items-center", children: [
                /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("button", { onClick: () => onUpdateDocumentStatus(store.id, doc.name, "verified"), className: "p-1 text-green-500", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(CheckIcon, { className: "w-4 h-4" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("button", { onClick: () => {
                  const reason = prompt(t("superadmin.stores.rejectionReason"));
                  if (reason) onUpdateDocumentStatus(store.id, doc.name, "rejected", reason);
                }, className: "p-1 text-red-500", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(XIcon, { className: "w-4 h-4" }) })
              ] })
            ] }, doc.name)) }),
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("td", { className: "p-2", children: store.location }),
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("td", { className: "p-2", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex justify-center gap-2", children: [
              activeTab === "pending" && /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(import_jsx_runtime63.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("button", { onClick: () => onApproveStore(store), className: "text-green-500 flex items-center gap-1 text-xs font-bold", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(CheckCircleIcon, { className: "w-4 h-4" }),
                  " ",
                  t("common.approve")
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("button", { onClick: () => onRejectStore(store), className: "text-red-500 flex items-center gap-1 text-xs font-bold", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(XCircleIcon, { className: "w-4 h-4" }),
                  " ",
                  t("common.reject")
                ] })
              ] }),
              activeTab === "active" && /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(import_jsx_runtime63.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("button", { onClick: () => onToggleStoreStatus(store.id, "active"), className: "text-red-500 flex items-center gap-1 text-xs font-bold", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(XCircleIcon, { className: "w-4 h-4" }),
                  " ",
                  t("superadmin.stores.tabs.suspended")
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("button", { onClick: () => {
                  const reason = prompt(`${t("superadmin.stores.warnReason")}:`);
                  if (reason) onWarnStore(store.id, reason);
                }, className: "text-yellow-500 flex items-center gap-1 text-xs font-bold", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(ExclamationTriangleIcon, { className: "w-4 h-4" }),
                  " ",
                  t("common.warn")
                ] })
              ] }),
              activeTab === "suspended" && /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("button", { onClick: () => onToggleStoreStatus(store.id, "suspended"), className: "text-green-500 flex items-center gap-1 text-xs font-bold", children: [
                /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(CheckCircleIcon, { className: "w-4 h-4" }),
                " ",
                t("superadmin.stores.tabs.active")
              ] })
            ] }) })
          ] }, store.id)) })
        ] }),
        storesByStatus[activeTab].length === 0 && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "text-center text-gray-500 py-8", children: t("superadmin.stores.noStores") })
      ] })
    ] });
  };

  // components/admin/OrdersPanel.tsx
  var import_react48 = __toESM(require_react());
  var import_jsx_runtime64 = __toESM(require_jsx_runtime());
  var AllOrdersView = ({ orders }) => {
    const { t, language } = useLanguage();
    const [searchTerm, setSearchTerm] = (0, import_react48.useState)("");
    const [statusFilter, setStatusFilter] = (0, import_react48.useState)("");
    const filteredOrders = (0, import_react48.useMemo)(() => {
      return orders.filter((o) => {
        const searchMatch = o.id.toLowerCase().includes(searchTerm.toLowerCase()) || o.shippingAddress.fullName.toLowerCase().includes(searchTerm.toLowerCase());
        const statusMatch = !statusFilter || o.status === statusFilter;
        return searchMatch && statusMatch;
      });
    }, [orders, searchTerm, statusFilter]);
    return /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "flex flex-col sm:flex-row gap-4 mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("input", { type: "text", placeholder: t("superadmin.orders.searchPlaceholder"), value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: "p-2 border rounded-md w-full sm:w-1/2 dark:bg-gray-700 dark:border-gray-600" }),
        /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("select", { value: statusFilter, onChange: (e) => setStatusFilter(e.target.value), className: "p-2 border rounded-md w-full sm:w-auto dark:bg-gray-700 dark:border-gray-600", children: [
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("option", { value: "", children: t("superadmin.orders.allStatuses") }),
          Object.keys(translations[language]?.orderStatus || translations.fr.orderStatus).map((key) => /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("option", { value: key, children: t(`orderStatus.${key}`) }, key))
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "overflow-x-auto", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("table", { className: "w-full text-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("th", { className: "p-2 text-left", children: t("common.orderId") }),
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("th", { className: "p-2 text-left", children: t("common.customer") }),
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("th", { className: "p-2 text-left", children: t("common.date") }),
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("th", { className: "p-2 text-right", children: t("common.total") }),
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("th", { className: "p-2 text-center", children: t("common.status") })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("tbody", { children: filteredOrders.map((order) => /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("td", { className: "p-2 font-mono", children: order.id }),
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("td", { className: "p-2", children: order.shippingAddress.fullName }),
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("td", { className: "p-2", children: new Date(order.orderDate).toLocaleDateString() }),
          /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("td", { className: "p-2 text-right font-semibold", children: [
            order.total.toLocaleString("fr-CM"),
            " FCFA"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("td", { className: "p-2 text-center", children: t(`orderStatus.${order.status}`, order.status) })
        ] }, order.id)) })
      ] }) })
    ] });
  };
  var DisputesView = ({ orders, onResolve }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "space-y-4", children: orders.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("p", { className: "text-center py-8 text-gray-500", children: t("superadmin.orders.noDisputes") }) : orders.map((order) => /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg border-l-4 border-yellow-400", children: [
      /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("p", { className: "font-bold", children: [
        t("common.orderId"),
        ": ",
        order.id
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("p", { className: "text-sm", children: [
        t("common.customer"),
        ": ",
        order.shippingAddress.fullName
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("p", { className: "mt-2 text-sm italic", children: [
        '"',
        order.refundReason,
        '"'
      ] }),
      order.refundEvidenceUrls && /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "mt-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("p", { className: "text-xs font-semibold", children: t("superadmin.orders.evidence") }),
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "flex gap-2 flex-wrap", children: order.refundEvidenceUrls.map((url, i) => /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("a", { href: url, target: "_blank", rel: "noopener noreferrer", className: "text-blue-500 underline text-xs", children: [
          "Preuve ",
          i + 1
        ] }, i)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "flex justify-end gap-2 mt-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("button", { onClick: () => onResolve(order.id, "rejected"), className: "bg-gray-500 text-white px-3 py-1 text-sm rounded-md", children: t("superadmin.orders.rejectRequest") }),
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("button", { onClick: () => onResolve(order.id, "refunded"), className: "bg-red-500 text-white px-3 py-1 text-sm rounded-md", children: t("superadmin.orders.approveRefund") })
      ] })
    ] }, order.id)) });
  };
  var OrdersPanel2 = ({ allOrders, onUpdateOrderStatus, onResolveDispute }) => {
    const { t } = useLanguage();
    const [activeTab, setActiveTab] = (0, import_react48.useState)("all");
    const disputeOrders = (0, import_react48.useMemo)(() => allOrders.filter((o) => o.status === "refund-requested"), [allOrders]);
    return /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "p-4 sm:p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.orders.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "flex border-b dark:border-gray-700 mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("button", { onClick: () => setActiveTab("all"), className: `px-4 py-2 font-semibold ${activeTab === "all" ? "border-b-2 border-kmer-green text-kmer-green" : "text-gray-500 dark:text-gray-400"}`, children: t("superadmin.orders.tabs.all") }),
        /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("button", { onClick: () => setActiveTab("disputes"), className: `relative px-4 py-2 font-semibold ${activeTab === "disputes" ? "border-b-2 border-kmer-green text-kmer-green" : "text-gray-500 dark:text-gray-400"}`, children: [
          t("superadmin.orders.tabs.disputes"),
          disputeOrders.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("span", { className: "absolute top-1 right-1 h-4 w-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center", children: disputeOrders.length })
        ] })
      ] }),
      activeTab === "all" && /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(AllOrdersView, { orders: allOrders }),
      activeTab === "disputes" && /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(DisputesView, { orders: disputeOrders, onResolve: onResolveDispute })
    ] });
  };

  // components/admin/LogisticsPanel.tsx
  var import_react49 = __toESM(require_react());
  var import_jsx_runtime65 = __toESM(require_jsx_runtime());
  var StaffModal = ({ point, manager, staff, onClose }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "flex justify-between items-center mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("h3", { className: "text-lg font-bold", children: t("superadmin.logistics.staffModal.title", point.name) }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("button", { onClick: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(XIcon, { className: "w-6 h-6" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("h4", { className: "font-bold text-md mb-2", children: t("superadmin.logistics.staffModal.manager") }),
        manager ? /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "p-2 bg-yellow-100 dark:bg-yellow-900/50 rounded-md border-l-4 border-yellow-500", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("p", { className: "font-semibold", children: manager.name }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("p", { className: "text-sm text-gray-500", children: manager.email })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("p", { className: "text-sm text-gray-500", children: t("superadmin.logistics.staffModal.noManager") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "mt-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("h4", { className: "font-bold text-md mb-2", children: t("superadmin.logistics.staffModal.staff") }),
        staff.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("ul", { className: "space-y-2 max-h-60 overflow-y-auto", children: staff.map((agent) => /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("li", { className: "p-2 bg-gray-100 dark:bg-gray-700 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("p", { className: "font-semibold", children: agent.name }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("p", { className: "text-sm text-gray-500", children: agent.email })
        ] }, agent.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("p", { className: "text-center text-gray-500 text-sm py-4", children: t("superadmin.logistics.staffModal.noStaff") })
      ] })
    ] }) });
  };
  var PointForm = ({ point, onSave, onCancel }) => {
    const { t } = useLanguage();
    const [data, setData] = (0, import_react49.useState)({
      id: point?.id,
      name: point?.name || "",
      city: point?.city || "Douala",
      neighborhood: point?.neighborhood || "",
      street: point?.street || "",
      latitude: point?.latitude || 4.05,
      longitude: point?.longitude || 9.75
    });
    const mapContainerRef = (0, import_react49.useRef)(null);
    const mapRef = (0, import_react49.useRef)(null);
    const markerRef = (0, import_react49.useRef)(null);
    (0, import_react49.useEffect)(() => {
      if (mapContainerRef.current && !mapRef.current) {
        const initialLatLng = [data.latitude, data.longitude];
        mapRef.current = L.map(mapContainerRef.current).setView(initialLatLng, 13);
        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(mapRef.current);
        const updateMarker = (latlng) => {
          setData((prev) => ({ ...prev, latitude: latlng.lat, longitude: latlng.lng }));
          if (!markerRef.current) {
            markerRef.current = L.marker(latlng, { draggable: true }).addTo(mapRef.current);
            markerRef.current.on("dragend", (e) => updateMarker(e.target.getLatLng()));
          } else {
            markerRef.current.setLatLng(latlng);
          }
        };
        updateMarker({ lat: data.latitude, lng: data.longitude });
        mapRef.current.on("click", (e) => updateMarker(e.latlng));
        setTimeout(() => mapRef.current?.invalidateSize(), 100);
      }
    }, []);
    const handleChange = (e) => {
      setData((d) => ({ ...d, [e.target.name]: e.target.value }));
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onSave(data);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("form", { onSubmit: handleSubmit, className: "p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg space-y-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { name: "name", value: data.name, onChange: handleChange, placeholder: t("superadmin.logistics.form.name"), className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { name: "city", value: data.city, onChange: handleChange, placeholder: t("superadmin.logistics.form.city"), className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { name: "neighborhood", value: data.neighborhood, onChange: handleChange, placeholder: t("superadmin.logistics.form.neighborhood"), className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { name: "street", value: data.street, onChange: handleChange, placeholder: t("superadmin.logistics.form.street"), className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { ref: mapContainerRef, className: "h-48 w-full rounded-md z-0" }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "flex justify-end gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("button", { type: "button", onClick: onCancel, className: "px-4 py-2 bg-gray-200 rounded", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("button", { type: "submit", className: "px-4 py-2 bg-blue-500 text-white rounded", children: t("common.save") })
      ] })
    ] });
  };
  var LogisticsPanel = ({ allPickupPoints, allUsers, onAddPickupPoint, onUpdatePickupPoint, onDeletePickupPoint }) => {
    const { t } = useLanguage();
    const [isFormOpen, setIsFormOpen] = (0, import_react49.useState)(false);
    const [editingPoint, setEditingPoint] = (0, import_react49.useState)(null);
    const [viewingStaffFor, setViewingStaffFor] = (0, import_react49.useState)(null);
    const staffAndManagerForPoint = (0, import_react49.useMemo)(() => {
      if (!viewingStaffFor) return { manager: void 0, staff: [] };
      const manager = allUsers.find((user) => user.id === viewingStaffFor.managerId);
      const staff = allUsers.filter((user) => (user.role === "depot_agent" || user.role === "depot_manager") && user.depotId === viewingStaffFor.id && user.id !== viewingStaffFor.managerId);
      return { manager, staff };
    }, [viewingStaffFor, allUsers]);
    const handleSave = (data) => {
      if (editingPoint) {
        onUpdatePickupPoint(data);
      } else {
        onAddPickupPoint(data);
      }
      setIsFormOpen(false);
      setEditingPoint(null);
    };
    const handleCancel = () => {
      setIsFormOpen(false);
      setEditingPoint(null);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "p-4 sm:p-6", children: [
      viewingStaffFor && /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(StaffModal, { point: viewingStaffFor, manager: staffAndManagerForPoint.manager, staff: staffAndManagerForPoint.staff, onClose: () => setViewingStaffFor(null) }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.logistics.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "mb-4", children: [
        !isFormOpen && /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("button", { onClick: () => setIsFormOpen(true), className: "bg-green-500 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(PlusIcon, { className: "w-5 h-5" }),
          " ",
          t("superadmin.logistics.addPickupPoint")
        ] }),
        isFormOpen && /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "mt-4", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(PointForm, { point: editingPoint, onSave: handleSave, onCancel: handleCancel }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "space-y-2", children: allPickupPoints.map((point) => /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "p-3 bg-gray-100 dark:bg-gray-700/50 rounded-md flex justify-between items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("p", { className: "font-semibold", children: point.name }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("p", { className: "text-sm", children: [
            point.street,
            ", ",
            point.neighborhood,
            ", ",
            point.city
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "flex gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("button", { onClick: () => setViewingStaffFor(point), className: "text-blue-500 flex items-center gap-1 text-sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(UsersIcon, { className: "w-4 h-4" }),
            " ",
            t("superadmin.logistics.viewStaff")
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("button", { onClick: () => {
            setEditingPoint(point);
            setIsFormOpen(true);
          }, className: "text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(PencilSquareIcon, { className: "w-5 h-5" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("button", { onClick: () => onDeletePickupPoint(point.id), className: "text-red-500", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(TrashIcon, { className: "w-5 h-5" }) })
        ] })
      ] }, point.id)) })
    ] });
  };

  // components/admin/PayoutsPanel.tsx
  var import_react50 = __toESM(require_react());
  var import_jsx_runtime66 = __toESM(require_jsx_runtime());
  var PayoutsPanel2 = ({ allOrders, allStores, payouts, onPayoutSeller, siteSettings }) => {
    const { t } = useLanguage();
    const getCommissionRate = (store) => {
      switch (store.premiumStatus) {
        case "premium":
          return siteSettings.premiumPlan.commissionRate / 100;
        case "super_premium":
          return siteSettings.superPremiumPlan.commissionRate / 100;
        default:
          return siteSettings.commissionRate / 100;
      }
    };
    const payoutData = (0, import_react50.useMemo)(() => {
      return allStores.filter((s) => s.status === "active").map((store) => {
        const commissionRate = getCommissionRate(store);
        const storeOrders = allOrders.filter((o) => o.status === "delivered" && o.items.some((i) => i.vendor === store.name));
        const totalRevenue = storeOrders.reduce((sum, order) => {
          const sellerItemsTotal = order.items.filter((item) => item.vendor === store.name).reduce((itemSum, item) => itemSum + (item.promotionPrice ?? item.price) * item.quantity, 0);
          return sum + sellerItemsTotal;
        }, 0);
        const paidAmount = payouts.filter((p) => p.storeId === store.id).reduce((sum, p) => sum + p.amount, 0);
        const totalCommission = totalRevenue * commissionRate;
        const balanceDue = totalRevenue - totalCommission - paidAmount;
        return {
          storeId: store.id,
          storeName: store.name,
          totalRevenue,
          totalCommission,
          paidAmount,
          balanceDue
        };
      }).filter((data) => data.balanceDue > 0);
    }, [allOrders, allStores, payouts, siteSettings]);
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("div", { className: "p-4 sm:p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.payouts.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("div", { className: "mb-6 p-4 bg-blue-50 dark:bg-blue-900/50 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("p", { className: "font-semibold", children: t("superadmin.payouts.commissionInfo", siteSettings.commissionRate) }),
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("p", { className: "text-sm", children: t("superadmin.payouts.balanceInfo") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("div", { className: "overflow-x-auto", children: [
        /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("table", { className: "w-full text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("th", { className: "p-2 text-left", children: t("superadmin.payouts.table.store") }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("th", { className: "p-2 text-right", children: t("superadmin.payouts.table.totalRevenue") }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("th", { className: "p-2 text-right", children: t("superadmin.payouts.table.commissionDue") }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("th", { className: "p-2 text-right", children: t("superadmin.payouts.table.paidAmount") }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("th", { className: "p-2 text-right", children: t("superadmin.payouts.table.balanceDue") }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("th", { className: "p-2 text-center", children: t("common.actions") })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("tbody", { children: payoutData.map((data) => /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("td", { className: "p-2 font-semibold", children: data.storeName }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("td", { className: "p-2 text-right", children: [
              data.totalRevenue.toLocaleString("fr-CM"),
              " F"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("td", { className: "p-2 text-right text-red-500", children: [
              "-",
              data.totalCommission.toLocaleString("fr-CM"),
              " F"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("td", { className: "p-2 text-right text-green-500", children: [
              data.paidAmount.toLocaleString("fr-CM"),
              " F"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("td", { className: "p-2 text-right font-bold", children: [
              data.balanceDue.toLocaleString("fr-CM"),
              " F"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("td", { className: "p-2 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("button", { onClick: () => onPayoutSeller(data.storeId, data.balanceDue), className: "bg-green-500 text-white text-xs font-bold py-1 px-3 rounded-md hover:bg-green-600", children: t("superadmin.payouts.markAsPaid") }) })
          ] }, data.storeId)) })
        ] }),
        payoutData.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("p", { className: "text-center text-gray-500 py-8", children: t("superadmin.payouts.noPending") })
      ] })
    ] });
  };

  // components/admin/SupportPanel.tsx
  var import_react51 = __toESM(require_react());
  var import_jsx_runtime67 = __toESM(require_jsx_runtime());
  var TicketDetail = ({ ticket, onReply, onStatusChange, onBack }) => {
    const { t } = useLanguage();
    const [reply, setReply] = (0, import_react51.useState)("");
    return /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("button", { onClick: onBack, className: "text-sm font-semibold text-blue-500 mb-4", children: t("superadmin.support.detail.back") }),
      /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("h3", { className: "font-bold", children: ticket.subject }),
      /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("p", { className: "text-sm", children: [
        t("superadmin.support.detail.user"),
        ": ",
        ticket.userName
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("div", { className: "my-4 p-2 bg-gray-100 dark:bg-gray-900/50 rounded-lg max-h-60 overflow-y-auto space-y-2", children: ticket.messages.map((msg, i) => /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("div", { className: "p-2 bg-white dark:bg-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("p", { className: "font-semibold text-xs", children: msg.authorName }),
        /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("p", { children: msg.message })
      ] }, i)) }),
      /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("textarea", { value: reply, onChange: (e) => setReply(e.target.value), placeholder: t("superadmin.support.detail.replyPlaceholder"), rows: 3, className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }),
      /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("div", { className: "flex justify-between items-center mt-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("select", { value: ticket.status, onChange: (e) => onStatusChange(ticket.id, e.target.value), className: "p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
          /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("option", { value: "Ouvert", children: t("superadmin.support.status.open") }),
          /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("option", { value: "En cours", children: t("superadmin.support.status.inProgress") }),
          /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("option", { value: "R\xE9solu", children: t("superadmin.support.status.resolved") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("button", { onClick: () => {
          onReply(ticket.id, reply);
          setReply("");
        }, className: "bg-blue-500 text-white px-4 py-2 rounded-lg", children: t("superadmin.support.detail.reply") })
      ] })
    ] });
  };
  var SupportPanel2 = ({ allTickets, onAdminReplyToTicket, onAdminUpdateTicketStatus }) => {
    const { t } = useLanguage();
    const [selectedTicket, setSelectedTicket] = (0, import_react51.useState)(null);
    if (selectedTicket) {
      return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("div", { className: "p-4 sm:p-6", children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(TicketDetail, { ticket: selectedTicket, onReply: onAdminReplyToTicket, onStatusChange: onAdminUpdateTicketStatus, onBack: () => setSelectedTicket(null) }) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("div", { className: "p-4 sm:p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.support.title", allTickets.length) }),
      /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("div", { className: "space-y-2", children: allTickets.map((ticket) => /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("button", { onClick: () => setSelectedTicket(ticket), className: "w-full text-left p-3 border dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700/50 flex justify-between items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("p", { className: "font-semibold", children: [
            ticket.subject,
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("span", { className: "font-normal text-sm text-gray-500", children: [
              "- ",
              ticket.userName
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("p", { className: "text-xs text-gray-500", children: [
            "Derni\xE8re mise \xE0 jour: ",
            new Date(ticket.updatedAt).toLocaleDateString()
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("span", { className: `px-2 py-1 text-xs font-semibold rounded-full ${ticket.status === "R\xE9solu" ? "bg-green-200 text-green-800" : "bg-yellow-200 text-yellow-800"}`, children: ticket.status })
      ] }, ticket.id)) })
    ] });
  };

  // components/admin/LogsPanel.tsx
  var import_react52 = __toESM(require_react());
  var import_jsx_runtime68 = __toESM(require_jsx_runtime());
  var LogsPanel = ({ siteActivityLogs }) => {
    const { t } = useLanguage();
    const [filter, setFilter] = (0, import_react52.useState)("");
    const filteredLogs = (0, import_react52.useMemo)(() => {
      const sortedLogs = [...siteActivityLogs].sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
      if (!filter) return sortedLogs;
      const lowerFilter = filter.toLowerCase();
      return sortedLogs.filter(
        (log) => log.user.name.toLowerCase().includes(lowerFilter) || log.action.toLowerCase().includes(lowerFilter) || log.details.toLowerCase().includes(lowerFilter)
      );
    }, [siteActivityLogs, filter]);
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "p-4 sm:p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.logs.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(
        "input",
        {
          type: "text",
          placeholder: t("superadmin.logs.filterPlaceholder"),
          value: filter,
          onChange: (e) => setFilter(e.target.value),
          className: "w-full p-2 border rounded-md mb-4 dark:bg-gray-700 dark:border-gray-600"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "space-y-2 max-h-[70vh] overflow-y-auto pr-2", children: [
        filteredLogs.map((log) => /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-900/50 rounded-md text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("p", { className: "font-mono text-xs text-gray-400 dark:text-gray-500", children: new Date(log.timestamp).toLocaleString("fr-FR") }),
          /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("span", { className: "font-semibold", children: log.user.name }),
            " (",
            log.user.role,
            ") ",
            t("superadmin.logs.performedAction"),
            /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("span", { className: "font-bold text-kmer-green ml-1", children: log.action })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("p", { className: "text-gray-600 dark:text-gray-300", children: [
            t("superadmin.logs.details"),
            " ",
            log.details
          ] })
        ] }, log.id)),
        filteredLogs.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("div", { className: "text-center py-8 text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("p", { children: t("superadmin.logs.noLogs") }) })
      ] })
    ] });
  };

  // components/admin/SettingsPanel.tsx
  var import_react53 = __toESM(require_react());
  var import_jsx_runtime69 = __toESM(require_jsx_runtime());
  var Field = ({ label, children, description }) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: label }),
    children,
    description && /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("p", { className: "mt-1 text-xs text-gray-500 dark:text-gray-400", children: description })
  ] });
  var ImageUrlOrUpload = ({ label, name, value, preview, onChange }) => {
    const { t } = useLanguage();
    const handleFileChange = (e) => {
      if (e.target.files && e.target.files[0]) {
        const reader = new FileReader();
        reader.onloadend = () => {
          const syntheticEvent = {
            target: { name, value: reader.result, type: "text" }
          };
          onChange(syntheticEvent);
        };
        reader.readAsDataURL(e.target.files[0]);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Field, { label, children: [
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
          "input",
          {
            type: "url",
            name,
            value: value || "",
            onChange,
            placeholder: "https://... ou t\xE9l\xE9verser",
            className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("label", { htmlFor: `${name}-upload`, className: "cursor-pointer bg-gray-200 dark:bg-gray-600 px-3 py-2 rounded-md text-sm font-medium whitespace-nowrap", children: [
          t("superadmin.settings.identity.upload"),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { id: `${name}-upload`, type: "file", className: "sr-only", onChange: handleFileChange, accept: "image/*" })
        ] })
      ] }),
      preview && /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "mt-2 p-2 bg-gray-100 dark:bg-gray-700 rounded-md inline-block", children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("img", { src: preview, alt: "Aper\xE7u", className: "h-12 object-contain" }) })
    ] });
  };
  var SettingsPanel = ({ siteSettings, onUpdateSiteSettings, siteContent, onUpdateSiteContent }) => {
    const { t } = useLanguage();
    const [settings, setSettings] = (0, import_react53.useState)(siteSettings);
    const [content, setContent] = (0, import_react53.useState)(siteContent);
    const handleSettingsChange = (e) => {
      const { name, value, type } = e.target;
      const checked = e.target.checked;
      const valueToSet = (() => {
        if (type === "checkbox") {
          return checked;
        }
        if (type === "number") {
          const num = parseFloat(value);
          return isNaN(num) ? null : num;
        }
        return value;
      })();
      const keys = name.split(".");
      if (keys.length > 1) {
        setSettings((s) => {
          const newSettings = JSON.parse(JSON.stringify(s));
          let current = newSettings;
          for (let i = 0; i < keys.length - 1; i++) {
            current = current[keys[i]];
          }
          current[keys[keys.length - 1]] = valueToSet;
          return newSettings;
        });
      } else {
        setSettings((s) => ({ ...s, [name]: valueToSet }));
      }
    };
    const handleRequiredDocsChange = (docName, isRequired) => {
      setSettings((s) => ({
        ...s,
        requiredSellerDocuments: {
          ...s.requiredSellerDocuments,
          [docName]: isRequired
        }
      }));
    };
    const handleBenefitsChange = (plan, value) => {
      setSettings((s) => {
        const newSettings = JSON.parse(JSON.stringify(s));
        newSettings.customerLoyaltyProgram[plan].benefits = value.split("\n").filter((b) => b.trim() !== "");
        return newSettings;
      });
    };
    const handleContentChange = (slug, field, value) => {
      setContent((prev) => prev.map((c) => c.slug === slug ? { ...c, [field]: value } : c));
    };
    const handleEmailTemplateChange = (id, field, value) => {
      setSettings((prev) => {
        const updatedTemplates = (prev.emailTemplates || []).map(
          (template) => template.id === id ? { ...template, [field]: value } : template
        );
        return { ...prev, emailTemplates: updatedTemplates };
      });
    };
    const handleSave = () => {
      onUpdateSiteSettings(settings);
      onUpdateSiteContent(content);
      alert("Param\xE8tres sauvegard\xE9s !");
    };
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "p-4 sm:p-6 space-y-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "flex justify-between items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h2", { className: "text-xl font-bold", children: t("superadmin.settings.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("button", { onClick: handleSave, className: "bg-blue-500 text-white font-bold py-2 px-4 rounded-lg", children: t("superadmin.settings.save") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.identity") }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "mt-4 grid grid-cols-1 md:grid-cols-2 gap-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ImageUrlOrUpload, { label: t("superadmin.settings.identity.logo"), name: "logoUrl", value: settings.logoUrl, preview: settings.logoUrl, onChange: handleSettingsChange }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ImageUrlOrUpload, { label: t("superadmin.settings.identity.banner"), name: "bannerUrl", value: settings.bannerUrl || "", preview: settings.bannerUrl || "", onChange: handleSettingsChange })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.features") }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "mt-4 space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("label", { className: "flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "checkbox", name: "isChatEnabled", checked: settings.isChatEnabled, onChange: handleSettingsChange, className: "h-5 w-5 rounded" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: t("superadmin.settings.features.chat") })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("label", { className: "flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "checkbox", name: "isComparisonEnabled", checked: settings.isComparisonEnabled, onChange: handleSettingsChange, className: "h-5 w-5 rounded" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: t("superadmin.settings.features.comparison") })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", open: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.delivery") }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "mt-4 space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.delivery.intraUrban"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "deliverySettings.intraUrbanBaseFee", value: settings.deliverySettings.intraUrbanBaseFee, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.delivery.interUrban"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "deliverySettings.interUrbanBaseFee", value: settings.deliverySettings.interUrbanBaseFee, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.delivery.perKg"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "deliverySettings.costPerKg", value: settings.deliverySettings.costPerKg, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.delivery.premiumDiscount"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "deliverySettings.premiumDeliveryDiscountPercentage", value: settings.deliverySettings.premiumDeliveryDiscountPercentage || 0, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.sellerDocs") }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "mt-4 space-y-2", children: Object.entries(settings.requiredSellerDocuments).map(([name, isRequired]) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("label", { className: "flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "checkbox", checked: isRequired, onChange: (e) => handleRequiredDocsChange(name, e.target.checked), className: "h-5 w-5 rounded" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: name })
        ] }, name)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.sellerPlans") }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "mt-4 grid grid-cols-1 lg:grid-cols-3 gap-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "p-4 border dark:border-gray-600 rounded-md space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { className: "font-bold text-md", children: t("superadmin.settings.plans.standard") }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.plans.price"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "standardPlan.price", value: settings.standardPlan.price, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.plans.duration"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "standardPlan.durationDays", value: settings.standardPlan.durationDays, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.plans.limit"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "standardPlan.productLimit", value: settings.standardPlan.productLimit, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.plans.commission"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "standardPlan.commissionRate", value: settings.standardPlan.commissionRate, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("label", { className: "flex items-center gap-2 pt-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "checkbox", name: "standardPlan.photoServiceIncluded", checked: settings.standardPlan.photoServiceIncluded, onChange: handleSettingsChange }),
              " ",
              t("superadmin.settings.plans.photoService")
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "p-4 border dark:border-gray-600 rounded-md space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { className: "font-bold text-md", children: t("superadmin.settings.plans.premium") }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.plans.price"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "premiumPlan.price", value: settings.premiumPlan.price, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.plans.duration"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "premiumPlan.durationDays", value: settings.premiumPlan.durationDays, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.plans.limit"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "premiumPlan.productLimit", value: settings.premiumPlan.productLimit, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.plans.commission"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "premiumPlan.commissionRate", value: settings.premiumPlan.commissionRate, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("label", { className: "flex items-center gap-2 pt-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "checkbox", name: "premiumPlan.photoServiceIncluded", checked: settings.premiumPlan.photoServiceIncluded, onChange: handleSettingsChange }),
              " ",
              t("superadmin.settings.plans.photoService")
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "p-4 border dark:border-gray-600 rounded-md space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { className: "font-bold text-md", children: t("superadmin.settings.plans.superPremium") }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.plans.price"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "superPremiumPlan.price", value: settings.superPremiumPlan.price, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.plans.duration"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "superPremiumPlan.durationDays", value: settings.superPremiumPlan.durationDays, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.plans.limit"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "superPremiumPlan.productLimit", value: settings.superPremiumPlan.productLimit, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.plans.commission"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "superPremiumPlan.commissionRate", value: settings.superPremiumPlan.commissionRate, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("label", { className: "flex items-center gap-2 pt-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "checkbox", name: "superPremiumPlan.photoServiceIncluded", checked: settings.superPremiumPlan.photoServiceIncluded, onChange: handleSettingsChange }),
              " ",
              t("superadmin.settings.plans.photoService")
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("label", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "checkbox", name: "superPremiumPlan.featuredOnHomepage", checked: settings.superPremiumPlan.featuredOnHomepage, onChange: handleSettingsChange }),
              " ",
              t("superadmin.settings.plans.homepageFeature")
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.loyalty") }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "mt-4 space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("label", { className: "flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "checkbox", name: "customerLoyaltyProgram.isEnabled", checked: settings.customerLoyaltyProgram.isEnabled, onChange: handleSettingsChange, className: "h-5 w-5 rounded" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: t("superadmin.settings.loyalty.enable") })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "p-4 border dark:border-gray-600 rounded-md space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { className: "font-bold text-md", children: t("superadmin.settings.loyalty.premium") }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.loyalty.ordersRequired"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "customerLoyaltyProgram.premium.thresholds.orders", value: settings.customerLoyaltyProgram.premium.thresholds.orders, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.loyalty.spendingRequired"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "customerLoyaltyProgram.premium.thresholds.spending", value: settings.customerLoyaltyProgram.premium.thresholds.spending, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.loyalty.caution"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "customerLoyaltyProgram.premium.cautionAmount", value: settings.customerLoyaltyProgram.premium.cautionAmount, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.loyalty.benefits"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("textarea", { value: settings.customerLoyaltyProgram.premium.benefits.join("\n"), onChange: (e) => handleBenefitsChange("premium", e.target.value), rows: 5, className: "mt-1 block w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "p-4 border dark:border-gray-600 rounded-md space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { className: "font-bold text-md", children: t("superadmin.settings.loyalty.premiumPlus") }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("label", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "checkbox", name: "customerLoyaltyProgram.premiumPlus.isEnabled", checked: settings.customerLoyaltyProgram.premiumPlus.isEnabled, onChange: handleSettingsChange }),
              " ",
              t("superadmin.settings.loyalty.enablePremiumPlus")
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.loyalty.annualFee"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "number", name: "customerLoyaltyProgram.premiumPlus.annualFee", value: settings.customerLoyaltyProgram.premiumPlus.annualFee, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.loyalty.benefits"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("textarea", { value: settings.customerLoyaltyProgram.premiumPlus.benefits.join("\n"), onChange: (e) => handleBenefitsChange("premiumPlus", e.target.value), rows: 5, className: "mt-1 block w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.seo") }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "mt-4 space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.seo.defaultTitle"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "text", name: "seo.metaTitle", value: settings.seo.metaTitle, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.seo.defaultDesc"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("textarea", { name: "seo.metaDescription", value: settings.seo.metaDescription, onChange: handleSettingsChange, rows: 3, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.seo.ogImage"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "url", name: "seo.ogImageUrl", value: settings.seo.ogImageUrl, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.content") }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "mt-4 space-y-4", children: content.map((page) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-900/50 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.content.pageTitle", page.title), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "text", value: page.title, onChange: (e) => handleContentChange(page.slug, "title", e.target.value), className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.content.content"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("textarea", { value: page.content, onChange: (e) => handleContentChange(page.slug, "content", e.target.value), rows: 4, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
        ] }, page.slug)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.emails") }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "mt-4 space-y-4", children: (settings.emailTemplates || []).map((template) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-900/50 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { className: "font-bold text-md mb-2", children: template.name }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.emails.subject"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "text", value: template.subject, onChange: (e) => handleEmailTemplateChange(template.id, "subject", e.target.value), className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.emails.body"), description: t("superadmin.settings.emails.variables", template.variables), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("textarea", { value: template.body, onChange: (e) => handleEmailTemplateChange(template.id, "body", e.target.value), rows: 5, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
        ] }, template.id)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.maintenance") }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "mt-4 flex flex-col gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("label", { className: "flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "checkbox", name: "maintenanceMode.isEnabled", checked: settings.maintenanceMode.isEnabled, onChange: handleSettingsChange, className: "h-5 w-5 rounded" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: t("superadmin.settings.maintenance.enable") })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.maintenance.message"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("textarea", { name: "maintenanceMode.message", value: settings.maintenanceMode.message, onChange: handleSettingsChange, rows: 2, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.footer") }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "mt-4 space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: t("superadmin.settings.footer.companyName"), children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "text", name: "companyName", value: settings.companyName, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-900/50 rounded-md space-y-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { className: "font-semibold", children: "Facebook" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ImageUrlOrUpload, { label: t("superadmin.settings.footer.iconUrl"), name: "socialLinks.facebook.iconUrl", value: settings.socialLinks.facebook.iconUrl, preview: settings.socialLinks.facebook.iconUrl, onChange: handleSettingsChange }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: "URL du lien", children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "url", name: "socialLinks.facebook.linkUrl", value: settings.socialLinks.facebook.linkUrl, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-900/50 rounded-md space-y-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { className: "font-semibold", children: "Twitter" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ImageUrlOrUpload, { label: t("superadmin.settings.footer.iconUrl"), name: "socialLinks.twitter.iconUrl", value: settings.socialLinks.twitter.iconUrl, preview: settings.socialLinks.twitter.iconUrl, onChange: handleSettingsChange }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: "URL du lien", children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "url", name: "socialLinks.twitter.linkUrl", value: settings.socialLinks.twitter.linkUrl, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-900/50 rounded-md space-y-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { className: "font-semibold", children: "Instagram" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ImageUrlOrUpload, { label: t("superadmin.settings.footer.iconUrl"), name: "socialLinks.instagram.iconUrl", value: settings.socialLinks.instagram.iconUrl, preview: settings.socialLinks.instagram.iconUrl, onChange: handleSettingsChange }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Field, { label: "URL du lien", children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("input", { type: "url", name: "socialLinks.instagram.linkUrl", value: settings.socialLinks.instagram.linkUrl, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
          ] })
        ] })
      ] })
    ] });
  };

  // components/admin/ReviewModerationPanel.tsx
  var import_jsx_runtime70 = __toESM(require_jsx_runtime());
  var ReviewModerationPanel = ({ allProducts, onReviewModeration }) => {
    const { t } = useLanguage();
    const pendingReviews = allProducts.flatMap(
      (p) => p.reviews.filter((r) => r.status === "pending").map((r) => ({ ...r, productId: p.id, productName: p.name }))
    );
    if (pendingReviews.length === 0) {
      return /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { className: "p-6 text-center text-gray-500", children: [
        /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("h2", { className: "text-xl font-semibold", children: t("superadmin.reviews.noPending") }),
        /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("p", { children: t("superadmin.reviews.goodJob") })
      ] });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { className: "p-4 sm:p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.reviews.title", pendingReviews.length) }),
      /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("div", { className: "space-y-4 max-h-[60vh] overflow-y-auto pr-2", children: pendingReviews.map((review) => /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("div", { className: "p-4 bg-gray-50 dark:bg-gray-900/50 rounded-lg", children: /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { className: "flex flex-col sm:flex-row justify-between sm:items-start gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { className: "flex-grow", children: [
          /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("p", { className: "font-semibold", children: [
            t("superadmin.reviews.product"),
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("span", { className: "text-kmer-green", children: review.productName })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("p", { className: "text-sm", children: [
            t("superadmin.reviews.by"),
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("span", { className: "font-bold", children: review.author }),
            " ",
            t("superadmin.reviews.on"),
            " ",
            new Date(review.date).toLocaleDateString("fr-FR")
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("div", { className: "flex items-center my-1", children: [...Array(5)].map((_, i) => /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(StarIcon, { filled: i < review.rating, className: `w-4 h-4 ${i < review.rating ? "text-yellow-400" : "text-gray-300"}` }, i)) }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("p", { className: "italic text-gray-600 dark:text-gray-300", children: [
            '"',
            review.comment,
            '"'
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { className: "flex gap-2 flex-shrink-0", children: [
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
            "button",
            {
              onClick: () => onReviewModeration(review.productId, { author: review.author, date: review.date }, "approved"),
              className: "bg-green-500 text-white px-3 py-1 rounded-md text-sm font-semibold hover:bg-green-600",
              children: t("common.approve")
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
            "button",
            {
              onClick: () => onReviewModeration(review.productId, { author: review.author, date: review.date }, "rejected"),
              className: "bg-red-500 text-white px-3 py-1 rounded-md text-sm font-semibold hover:bg-red-600",
              children: t("common.reject")
            }
          )
        ] })
      ] }) }, `${review.productId}-${review.author}-${review.date}`)) })
    ] });
  };
  var ReviewModerationPanel_default = ReviewModerationPanel;

  // components/SuperAdminDashboard.tsx
  var import_jsx_runtime71 = __toESM(require_jsx_runtime());
  var TabButton2 = ({ icon, label, isActive, onClick, count }) => /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(
    "button",
    {
      onClick,
      className: `relative flex items-center gap-3 w-full text-left px-3 py-3 text-sm font-semibold rounded-lg transition-colors whitespace-nowrap ${isActive ? "bg-kmer-green/10 text-kmer-green" : "text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 dark:text-gray-400"}`,
      children: [
        icon,
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("span", { children: label }),
        count !== void 0 && count > 0 && /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("span", { className: "ml-auto text-xs bg-kmer-red text-white rounded-full px-1.5 py-0.5", children: count })
      ]
    }
  );
  var SuperAdminDashboard = (props) => {
    const { allStores, allOrders, allProducts, allTickets } = props;
    const [activeTab, setActiveTab] = (0, import_react54.useState)("overview");
    const { t } = useLanguage();
    const pendingStoresCount = (0, import_react54.useMemo)(() => allStores.filter((s) => s.status === "pending").length, [allStores]);
    const refundRequestsCount = (0, import_react54.useMemo)(() => allOrders.filter((o) => o.status === "refund-requested").length, [allOrders]);
    const pendingReviewsCount = (0, import_react54.useMemo)(() => allProducts.flatMap((p) => p.reviews).filter((r) => r.status === "pending").length, [allProducts]);
    const openTicketsCount = (0, import_react54.useMemo)(() => allTickets.filter((t2) => t2.status === "Ouvert").length, [allTickets]);
    const renderContent = () => {
      switch (activeTab) {
        case "overview":
          return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(OverviewPanel2, { ...props });
        case "users":
          return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(UsersPanel, { allUsers: props.allUsers, onUpdateUser: props.onUpdateUser, onCreateUserByAdmin: props.onCreateUserByAdmin, onWarnUser: props.onWarnUser, allPickupPoints: props.allPickupPoints, allZones: props.allZones, onSendBulkEmail: props.onSendBulkEmail, siteSettings: props.siteSettings });
        case "catalog":
          return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(CatalogPanel, { allCategories: props.allCategories, onAdminAddCategory: props.onAdminAddCategory, onAdminDeleteCategory: props.onAdminDeleteCategory, onAdminUpdateCategory: props.onAdminUpdateCategory });
        case "marketing":
          return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(MarketingPanel, { ...props });
        case "stores":
          return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(StoresPanel, { allStores: props.allStores, onApproveStore: props.onApproveStore, onRejectStore: props.onRejectStore, onToggleStoreStatus: props.onToggleStoreStatus, onWarnStore: props.onWarnStore, onUpdateDocumentStatus: props.onUpdateDocumentStatus });
        case "orders":
          return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(OrdersPanel2, { allOrders: props.allOrders, onUpdateOrderStatus: props.onUpdateOrderStatus, onResolveDispute: props.onResolveDispute });
        case "logistics":
          return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(LogisticsPanel, { ...props });
        case "payouts":
          return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(PayoutsPanel2, { ...props });
        case "support":
          return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(SupportPanel2, { ...props });
        case "reviews":
          return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(ReviewModerationPanel_default, { allProducts, onReviewModeration: props.onReviewModeration });
        case "logs":
          return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(LogsPanel, { ...props });
        case "settings":
          return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(SettingsPanel, { ...props });
        default:
          return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "p-6", children: t("superadmin.panelUnderConstruction", activeTab) });
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "bg-gray-100 dark:bg-gray-950 min-h-screen", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-6 flex flex-col md:flex-row gap-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("aside", { className: "md:w-1/4 lg:w-1/5 flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md space-y-2 sticky top-24", children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TabButton2, { icon: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(ChartPieIcon, { className: "w-5 h-5" }), label: t("superadmin.tabs.overview"), isActive: activeTab === "overview", onClick: () => setActiveTab("overview") }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TabButton2, { icon: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(ShoppingBagIcon, { className: "w-5 h-5" }), label: t("superadmin.tabs.orders"), isActive: activeTab === "orders", onClick: () => setActiveTab("orders"), count: refundRequestsCount }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TabButton2, { icon: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(BuildingStorefrontIcon, { className: "w-5 h-5" }), label: t("superadmin.tabs.stores"), isActive: activeTab === "stores", onClick: () => setActiveTab("stores"), count: pendingStoresCount }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TabButton2, { icon: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(UsersIcon, { className: "w-5 h-5" }), label: t("superadmin.tabs.users"), isActive: activeTab === "users", onClick: () => setActiveTab("users") }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TabButton2, { icon: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TagIcon, { className: "w-5 h-5" }), label: t("superadmin.tabs.catalog"), isActive: activeTab === "catalog", onClick: () => setActiveTab("catalog") }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TabButton2, { icon: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(BoltIcon, { className: "w-5 h-5" }), label: t("superadmin.tabs.marketing"), isActive: activeTab === "marketing", onClick: () => setActiveTab("marketing") }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TabButton2, { icon: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TruckIcon, { className: "w-5 h-5" }), label: t("superadmin.tabs.logistics"), isActive: activeTab === "logistics", onClick: () => setActiveTab("logistics") }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TabButton2, { icon: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(BanknotesIcon, { className: "w-5 h-5" }), label: t("superadmin.tabs.payouts"), isActive: activeTab === "payouts", onClick: () => setActiveTab("payouts") }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TabButton2, { icon: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(ChatBubbleBottomCenterTextIcon, { className: "w-5 h-5" }), label: t("superadmin.tabs.support"), isActive: activeTab === "support", onClick: () => setActiveTab("support"), count: openTicketsCount }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TabButton2, { icon: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(StarIcon, { className: "w-5 h-5" }), label: t("superadmin.tabs.reviews"), isActive: activeTab === "reviews", onClick: () => setActiveTab("reviews"), count: pendingReviewsCount }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TabButton2, { icon: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(ScaleIcon, { className: "w-5 h-5" }), label: t("superadmin.tabs.logs"), isActive: activeTab === "logs", onClick: () => setActiveTab("logs") }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TabButton2, { icon: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Cog8ToothIcon, { className: "w-5 h-5" }), label: t("superadmin.tabs.settings"), isActive: activeTab === "settings", onClick: () => setActiveTab("settings") })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("main", { className: "flex-grow", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md min-h-full", children: renderContent() }) })
    ] }) });
  };

  // components/OrderHistoryPage.tsx
  var import_jsx_runtime72 = __toESM(require_jsx_runtime());
  var OrderHistoryPage = ({ userOrders, onBack, onSelectOrder, onRepeatOrder }) => {
    const { user } = useAuth();
    const { t } = useLanguage();
    const getStatusClass = (status) => {
      switch (status) {
        case "confirmed":
          return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300";
        case "ready-for-pickup":
          return "bg-orange-100 text-orange-800 dark:bg-orange-900/50 dark:text-orange-300";
        case "picked-up":
          return "bg-cyan-100 text-cyan-800 dark:bg-cyan-900/50 dark:text-cyan-300";
        case "at-depot":
          return "bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300";
        case "out-for-delivery":
          return "bg-indigo-100 text-indigo-800 dark:bg-indigo-900/50 dark:text-indigo-300";
        case "delivered":
          return "bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300";
        case "cancelled":
          return "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300";
        case "refund-requested":
          return "bg-purple-100 text-purple-800 dark:bg-purple-900/50 dark:text-purple-300";
        case "refunded":
          return "bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-gray-300";
        case "depot-issue":
          return "bg-red-200 text-red-900 dark:bg-red-800/50 dark:text-red-200";
        case "delivery-failed":
          return "bg-red-200 text-red-900 dark:bg-red-800/50 dark:text-red-200 font-bold";
        default:
          return "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300";
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "container mx-auto px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white mb-8", children: "Mes Commandes" }),
      userOrders.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: "Vous n'avez pas encore pass\xE9 de commande." }),
        /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: "Tous vos achats appara\xEEtront ici." })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden", children: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("div", { className: "overflow-x-auto", children: /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("table", { className: "w-full text-sm text-left", children: [
        /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("thead", { className: "text-xs text-gray-700 dark:text-gray-300 uppercase bg-gray-50 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("th", { scope: "col", className: "px-6 py-3", children: "ID Commande" }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("th", { scope: "col", className: "px-6 py-3", children: "Date" }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("th", { scope: "col", className: "px-6 py-3", children: "Total" }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("th", { scope: "col", className: "px-6 py-3", children: "Statut" }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("th", { scope: "col", className: "px-6 py-3", children: "Action" })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("tbody", { children: userOrders.map((order) => /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("tr", { className: "border-b dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50", children: [
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("th", { scope: "row", className: "px-6 py-4 font-medium text-gray-900 dark:text-white whitespace-nowrap", children: order.id }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("td", { className: "px-6 py-4", children: new Date(order.orderDate).toLocaleDateString("fr-FR") }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("td", { className: "px-6 py-4", children: [
            order.total.toLocaleString("fr-CM"),
            " FCFA"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("td", { className: "px-6 py-4", children: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("span", { className: `px-2 py-1 rounded-full text-xs font-medium ${getStatusClass(order.status)}`, children: t(`orderStatus.${order.status}`, order.status) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("td", { className: "px-6 py-4", children: /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "flex items-center gap-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("button", { onClick: () => onSelectOrder(order), className: "font-medium text-kmer-green hover:underline whitespace-nowrap", children: "Voir d\xE9tails" }),
            /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("button", { onClick: () => onRepeatOrder(order), className: "font-medium text-blue-500 hover:underline whitespace-nowrap flex items-center gap-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(ArrowPathIcon, { className: "w-4 h-4" }),
              "Commander \xE0 nouveau"
            ] })
          ] }) })
        ] }, order.id)) })
      ] }) }) })
    ] });
  };
  var OrderHistoryPage_default = OrderHistoryPage;

  // components/OrderDetailPage.tsx
  var import_react55 = __toESM(require_react());
  var import_jsx_runtime73 = __toESM(require_jsx_runtime());
  var RefundRequestModal = ({ onClose, onSubmit }) => {
    const [reason, setReason] = (0, import_react55.useState)("");
    const [evidence, setEvidence] = (0, import_react55.useState)([]);
    const handleFileChange = (e) => {
      if (e.target.files) {
        const files = Array.from(e.target.files);
        if (evidence.length + files.length > 5) {
          alert("Vous pouvez t\xE9l\xE9charger jusqu'\xE0 5 fichiers.");
          return;
        }
        files.forEach((file) => {
          const reader = new FileReader();
          reader.onloadend = () => {
            setEvidence((prev) => [...prev, reader.result]);
          };
          reader.readAsDataURL(file);
        });
      }
    };
    const removeEvidence = (index) => {
      setEvidence((prev) => prev.filter((_, i) => i !== index));
    };
    const handleSubmit = () => {
      if (!reason.trim()) {
        alert("Veuillez fournir un motif pour votre demande de remboursement.");
        return;
      }
      onSubmit(reason, evidence);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-2xl p-6 max-w-lg w-full relative", children: [
      /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("button", { onClick: onClose, className: "absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300", children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(XIcon, { className: "h-6 w-6" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("h3", { className: "text-xl font-bold mb-4 dark:text-white", children: "Demander un remboursement" }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400 mb-4", children: "Veuillez d\xE9crire pourquoi le produit re\xE7u ne correspond pas \xE0 vos attentes. Votre demande sera examin\xE9e par un administrateur." }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Motif de la demande" }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
            "textarea",
            {
              value: reason,
              onChange: (e) => setReason(e.target.value),
              rows: 4,
              className: "mt-1 w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600",
              placeholder: "Ex: Le produit est arriv\xE9 endommag\xE9, la couleur ne correspond pas \xE0 la photo...",
              required: true
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Ajouter des preuves (photos, vid\xE9os...)" }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "mt-1 flex items-center gap-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("label", { htmlFor: "evidence-upload", className: "cursor-pointer bg-white dark:bg-gray-700 py-2 px-3 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(PhotoIcon, { className: "w-5 h-5" }),
              "Choisir des fichiers"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("input", { id: "evidence-upload", name: "evidence-upload", type: "file", multiple: true, className: "sr-only", onChange: handleFileChange, accept: "image/*,video/*" })
          ] }),
          evidence.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "mt-2 grid grid-cols-3 sm:grid-cols-5 gap-2", children: evidence.map((url, i) => /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "relative group", children: [
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("img", { src: url, alt: `Preview ${i}`, className: "h-20 w-full object-cover rounded-md" }),
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("button", { onClick: () => removeEvidence(i), className: "absolute -top-1 -right-1 bg-red-500 text-white rounded-full p-0.5 opacity-0 group-hover:opacity-100 transition-opacity", children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TrashIcon, { className: "w-4 h-4" }) })
          ] }, i)) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex justify-end gap-2 mt-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("button", { onClick: onClose, className: "bg-gray-200 dark:bg-gray-600 px-4 py-2 rounded-md", children: "Annuler" }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("button", { onClick: handleSubmit, className: "bg-kmer-red text-white px-4 py-2 rounded-md", children: "Envoyer la demande" })
      ] })
    ] }) });
  };
  var statusSteps = ["confirmed", "ready-for-pickup", "picked-up", "at-depot", "out-for-delivery", "delivered"];
  var OrderDetailPage = ({ order, onBack, allPickupPoints, allUsers, onCancelOrder, onRequestRefund, onCustomerDisputeMessage }) => {
    const { t } = useLanguage();
    const [isRefundModalOpen, setIsRefundModalOpen] = (0, import_react55.useState)(false);
    const qrCodeRef = (0, import_react55.useRef)(null);
    const currentStatusIndex = statusSteps.indexOf(order.status);
    const pickupPoint = order.deliveryMethod === "pickup" ? allPickupPoints.find((p) => p.id === order.pickupPointId) : null;
    const deliveryAgent = order.deliveryMethod === "home-delivery" && order.agentId ? allUsers.find((u) => u.id === order.agentId) : null;
    const canCancel = ["confirmed", "ready-for-pickup"].includes(order.status);
    const canRequestRefund = order.status === "delivered";
    const getStatusTranslation = (status) => t(`orderStatus.${status}`, status);
    const statusDescriptions = {
      confirmed: "La boutique pr\xE9pare le colis.",
      "ready-for-pickup": "Le vendeur a pr\xE9par\xE9 votre colis pour l'enl\xE8vement.",
      "picked-up": "Un transporteur a r\xE9cup\xE9r\xE9 le colis.",
      "at-depot": order.deliveryMethod === "pickup" ? "Votre colis est pr\xEAt pour le retrait." : "Pr\xEAt pour la distribution locale.",
      "out-for-delivery": "Le livreur est en route.",
      delivered: "Votre colis a \xE9t\xE9 remis.",
      cancelled: "Votre commande a \xE9t\xE9 annul\xE9e.",
      "refund-requested": "Votre demande est en cours d'examen.",
      refunded: "Cette commande a \xE9t\xE9 rembours\xE9e.",
      returned: "Le colis a \xE9t\xE9 retourn\xE9.",
      "depot-issue": "Un probl\xE8me a \xE9t\xE9 signal\xE9 avec votre colis au d\xE9p\xF4t.",
      "delivery-failed": "Un probl\xE8me est survenu lors de la livraison."
    };
    (0, import_react55.useEffect)(() => {
      if (qrCodeRef.current && order.trackingNumber && typeof QRCode !== "undefined") {
        QRCode.toCanvas(qrCodeRef.current, order.trackingNumber, { width: 128 }, (error) => {
          if (error) console.error(error);
        });
      }
    }, [order.trackingNumber]);
    const handleRefundSubmit = (reason, evidenceUrls) => {
      onRequestRefund(order.id, reason, evidenceUrls);
      setIsRefundModalOpen(false);
    };
    const getStepIcon = (step) => {
      switch (step) {
        case "out-for-delivery":
          return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TruckIcon, { className: "w-6 h-6" });
        case "delivered":
          return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(CheckIcon, { className: "w-6 h-6" });
        default:
          return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(CheckIcon, { className: "w-6 h-6" });
      }
    };
    const relevantStatusSteps = order.deliveryMethod === "pickup" ? statusSteps.filter((step) => step !== "out-for-delivery") : statusSteps;
    const handlePrint = () => {
      window.print();
    };
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(import_jsx_runtime73.Fragment, { children: [
      isRefundModalOpen && /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(RefundRequestModal, { onClose: () => setIsRefundModalOpen(false), onSubmit: handleRefundSubmit }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "bg-gray-100 dark:bg-gray-950 min-h-[80vh] py-12", children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "container mx-auto px-4 sm:px-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex justify-between items-center mb-8 no-print", children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold", children: [
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
            "Retour \xE0 l'historique"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("button", { onClick: handlePrint, className: "flex items-center gap-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 font-semibold py-2 px-4 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600", children: [
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(PrinterIcon, { className: "w-5 h-5" }),
            " Imprimer la facture"
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 sm:p-8 printable", children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex flex-col sm:flex-row justify-between sm:items-center border-b dark:border-gray-700 pb-4 mb-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("h1", { className: "text-2xl font-bold text-gray-800 dark:text-white", children: "D\xE9tails de la commande" }),
              /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
                "ID: ",
                order.id
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "text-left sm:text-right mt-2 sm:mt-0", children: [
              /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
                "Command\xE9 le ",
                new Date(order.orderDate).toLocaleDateString("fr-FR")
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("p", { className: "font-semibold dark:text-white", children: [
                "Total: ",
                order.total.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "mb-8", children: [
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("h2", { className: "text-xl font-semibold mb-6 dark:text-white", children: "Suivi de la commande" }),
            ["cancelled", "refund-requested", "refunded", "depot-issue", "delivery-failed"].includes(order.status) ? /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: `p-4 rounded-lg ${order.status === "cancelled" ? "bg-red-100 text-red-700 dark:bg-red-900/50 dark:text-red-300" : order.status === "refund-requested" ? "bg-purple-100 text-purple-700 dark:bg-purple-900/50 dark:text-purple-300" : order.status === "depot-issue" ? "bg-red-100 text-red-700 dark:bg-red-900/50 dark:text-red-300 font-bold" : order.status === "delivery-failed" ? "bg-red-100 text-red-700 dark:bg-red-900/50 dark:text-red-300 font-bold" : "bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-200"}`, children: [
              getStatusTranslation(order.status),
              order.status === "depot-issue" && /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "font-normal mt-1", children: order.discrepancy?.reason }),
              order.status === "delivery-failed" && /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("p", { className: "font-normal mt-1", children: [
                order.deliveryFailureReason?.reason,
                ": ",
                order.deliveryFailureReason?.details
              ] })
            ] }) : /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "flex flex-col sm:flex-row justify-between items-start", children: relevantStatusSteps.map((step, index) => {
              const stepIndexInOriginal = statusSteps.indexOf(step);
              const isActive = stepIndexInOriginal <= currentStatusIndex;
              const isCurrent = stepIndexInOriginal === currentStatusIndex;
              return /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex sm:flex-col sm:flex-1 items-center text-center relative w-full sm:w-auto mb-6 sm:mb-0", children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: `w-10 h-10 rounded-full flex items-center justify-center border-2 flex-shrink-0 z-10 ${isActive ? "bg-kmer-green border-kmer-green text-white" : "bg-gray-200 dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-500"}`, children: isActive ? getStepIcon(step) : /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "w-3 h-3 bg-gray-300 dark:bg-gray-600 rounded-full" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "ml-4 sm:ml-0 sm:mt-2 text-left sm:text-center", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: `text-sm font-semibold ${isActive ? "text-kmer-green" : "text-gray-500 dark:text-gray-400"}`, children: getStatusTranslation(step) }),
                  isCurrent && /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400 px-2", children: statusDescriptions[step] })
                ] }),
                index < relevantStatusSteps.length - 1 && /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: `absolute left-5 sm:left-1/2 top-10 sm:top-5 h-full sm:h-0.5 w-0.5 sm:w-full ${index < currentStatusIndex ? "bg-kmer-green" : "bg-gray-300 dark:bg-gray-600"}` })
              ] }, step);
            }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "grid md:grid-cols-2 gap-8 border-t dark:border-gray-700 pt-6 mt-8", children: [
            /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("h3", { className: "font-semibold mb-4 dark:text-white", children: "Historique des statuts" }),
              /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "border dark:border-gray-700 rounded-lg p-4 bg-gray-50 dark:bg-gray-800/50 max-h-48 overflow-y-auto", children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("ul", { className: "space-y-2 text-sm text-gray-600 dark:text-gray-300", children: (order.statusChangeLog || []).map((log, index) => /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("li", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("span", { className: "font-semibold", children: [
                  new Date(log.date).toLocaleString("fr-FR"),
                  ":"
                ] }),
                " ",
                getStatusTranslation(log.status),
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("span", { className: "text-xs text-gray-400", children: [
                  "(par ",
                  log.changedBy,
                  ")"
                ] })
              ] }, index)) }) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("h3", { className: "font-semibold mb-4 dark:text-white flex items-center gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(QrCodeIcon, { className: "w-5 h-5" }),
                " Suivi par QR Code"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex flex-col sm:flex-row items-center gap-4 p-4 bg-gray-50 dark:bg-gray-900/50 rounded-lg", children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("canvas", { ref: qrCodeRef, className: "rounded-lg shadow-sm mx-auto" }),
                /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "text-sm font-semibold dark:text-gray-200", children: "Num\xE9ro de suivi :" }),
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "font-mono text-lg bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded-md inline-block", children: order.trackingNumber }),
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400 mt-2", children: "Utilisez ce code pour le suivi aupr\xE8s de nos agents." })
                ] })
              ] })
            ] })
          ] }),
          order.disputeLog && order.disputeLog.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "border-t dark:border-gray-700 pt-6 mt-8", children: [
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("h3", { className: "font-semibold mb-4 dark:text-white", children: "Discussion sur le litige" }),
            /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "p-4 bg-gray-50 dark:bg-gray-900/50 rounded-lg space-y-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "max-h-60 overflow-y-auto space-y-3 pr-2", children: order.disputeLog.map((msg, i) => {
                const isMe = msg.author === "customer";
                const authorName = msg.author.charAt(0).toUpperCase() + msg.author.slice(1);
                return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: `flex ${isMe ? "justify-end" : "justify-start"}`, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: `max-w-md p-3 rounded-xl text-sm ${isMe ? "bg-kmer-green text-white" : "bg-gray-200 dark:bg-gray-700"}`, children: [
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "font-bold mb-1", children: isMe ? "Vous" : authorName }),
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { children: msg.message }),
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "text-xs opacity-70 mt-1 text-right", children: new Date(msg.date).toLocaleTimeString("fr-FR") })
                ] }) }, i);
              }) }),
              /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("form", { onSubmit: (e) => {
                e.preventDefault();
                const input = e.target.message;
                onCustomerDisputeMessage(order.id, input.value);
                input.value = "";
              }, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("input", { name: "message", placeholder: "Envoyer un message...", className: "flex-grow text-sm p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }),
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("button", { type: "submit", className: "p-2 bg-blue-500 text-white rounded-md hover:bg-blue-600", children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(PaperAirplaneIcon, { className: "w-5 h-5" }) })
              ] }) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "grid md:grid-cols-2 gap-8 border-t dark:border-gray-700 pt-6 mt-8", children: [
            /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("h3", { className: "font-semibold mb-2 dark:text-white", children: "Adresse de Livraison" }),
              /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("address", { className: "not-italic text-gray-600 dark:text-gray-300", children: [
                order.shippingAddress.fullName,
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("br", {}),
                order.shippingAddress.address,
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("br", {}),
                order.shippingAddress.city,
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("br", {}),
                order.shippingAddress.phone
              ] }),
              order.deliveryMethod === "pickup" && pickupPoint && /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "mt-4 p-3 bg-blue-50 dark:bg-blue-900/50 rounded-lg", children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "font-bold text-sm text-blue-800 dark:text-blue-200", children: "Point de retrait:" }),
                /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("p", { className: "text-sm text-blue-700 dark:text-blue-300", children: [
                  pickupPoint.name,
                  ", ",
                  pickupPoint.neighborhood
                ] })
              ] }),
              deliveryAgent && /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "mt-4 p-3 bg-green-50 dark:bg-green-900/50 rounded-lg", children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "font-bold text-sm text-green-800 dark:text-green-200", children: "Votre livreur:" }),
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "text-sm text-green-700 dark:text-green-300", children: deliveryAgent.name })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("h3", { className: "font-semibold mb-2 dark:text-white", children: "Articles" }),
              /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("ul", { className: "space-y-2", children: order.items.map((item) => /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("li", { className: "flex justify-between items-center text-sm", children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("span", { className: "dark:text-gray-300", children: [
                  item.name,
                  " x ",
                  item.quantity
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("span", { className: "font-semibold dark:text-white", children: [
                  (item.promotionPrice ?? item.price).toLocaleString("fr-CM"),
                  " FCFA"
                ] })
              ] }, item.id)) }),
              /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "border-t dark:border-gray-700 mt-4 pt-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex justify-between text-sm", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("span", { children: "Sous-total" }),
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("span", { children: [
                    order.subtotal.toLocaleString("fr-CM"),
                    " FCFA"
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex justify-between text-sm", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("span", { children: "Livraison" }),
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("span", { children: [
                    order.deliveryFee.toLocaleString("fr-CM"),
                    " FCFA"
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex justify-between font-bold mt-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("span", { children: "Total" }),
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("span", { children: [
                    order.total.toLocaleString("fr-CM"),
                    " FCFA"
                  ] })
                ] })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "mt-8 pt-6 border-t dark:border-gray-700 flex flex-col sm:flex-row gap-4 no-print", children: [
            canRequestRefund && /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("button", { onClick: () => setIsRefundModalOpen(true), className: "flex-1 w-full bg-yellow-500 text-white font-bold py-3 rounded-lg hover:bg-yellow-600 flex items-center justify-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(ExclamationTriangleIcon, { className: "w-5 h-5" }),
              " Demander un remboursement"
            ] }),
            canCancel && /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("button", { onClick: () => onCancelOrder(order.id), className: "flex-1 w-full bg-red-500 text-white font-bold py-3 rounded-lg hover:bg-red-600 flex items-center justify-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(XIcon, { className: "w-5 h-5" }),
              " Annuler la commande"
            ] })
          ] })
        ] })
      ] }) })
    ] });
  };
  var OrderDetailPage_default = OrderDetailPage;

  // components/PromotionsPage.tsx
  var import_react56 = __toESM(require_react());
  var import_jsx_runtime74 = __toESM(require_jsx_runtime());
  var isPromotionActive7 = (product) => {
    if (!product.promotionPrice || product.promotionPrice >= product.price) {
      return false;
    }
    const now = /* @__PURE__ */ new Date();
    const startDate = product.promotionStartDate ? /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") : null;
    const endDate = product.promotionEndDate ? /* @__PURE__ */ new Date(product.promotionEndDate + "T23:59:59") : null;
    if (!startDate && !endDate) {
      return true;
    }
    if (startDate && endDate) {
      return now >= startDate && now <= endDate;
    }
    if (startDate) {
      return now >= startDate;
    }
    if (endDate) {
      return now <= endDate;
    }
    return false;
  };
  var PromotionsPage = ({ allProducts, allStores, flashSales, onProductClick, onBack, onVendorClick, isComparisonEnabled }) => {
    const promotionalProducts = (0, import_react56.useMemo)(() => allProducts.filter((p) => isPromotionActive7(p)), [allProducts]);
    const { filteredAndSortedProducts, filters, setFilters, resetFilters } = useProductFiltering(promotionalProducts, allStores);
    const findStoreLocation = (vendorName) => allStores.find((s) => s.name === vendorName)?.location;
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour \xE0 l'accueil"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("div", { className: "lg:flex lg:gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(
          ProductFilters_default,
          {
            allProducts: promotionalProducts,
            filters,
            setFilters,
            resetFilters
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("main", { className: "flex-grow", children: [
          /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("div", { className: "mb-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("div", { className: "flex items-center gap-3 mb-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(TagIcon, { className: "w-8 h-8 text-kmer-red" }),
              /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: "Promotions du Moment" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("p", { className: "text-gray-600 dark:text-gray-300", children: [
              filteredAndSortedProducts.length,
              " sur ",
              promotionalProducts.length,
              " produits affich\xE9s"
            ] })
          ] }),
          filteredAndSortedProducts.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6", children: filteredAndSortedProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: findStoreLocation(product.vendor), flashSales, isComparisonEnabled, stores: allStores }, product.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md h-full flex flex-col justify-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: "Aucune promotion pour le moment." }),
            /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: "Revenez bient\xF4t pour d\xE9couvrir nos offres !" })
          ] })
        ] })
      ] })
    ] });
  };
  var PromotionsPage_default = PromotionsPage;

  // components/FlashSalesPage.tsx
  var import_react57 = __toESM(require_react());
  var import_jsx_runtime75 = __toESM(require_jsx_runtime());
  var CountdownTimer = ({ targetDate }) => {
    const calculateTimeLeft = (0, import_react57.useCallback)(() => {
      const difference = +new Date(targetDate) - +/* @__PURE__ */ new Date();
      let timeLeft2 = {};
      if (difference > 0) {
        timeLeft2 = {
          jours: Math.floor(difference / (1e3 * 60 * 60 * 24)),
          heures: Math.floor(difference / (1e3 * 60 * 60) % 24),
          minutes: Math.floor(difference / 1e3 / 60 % 60),
          secondes: Math.floor(difference / 1e3 % 60)
        };
      }
      return timeLeft2;
    }, [targetDate]);
    const [timeLeft, setTimeLeft] = (0, import_react57.useState)(calculateTimeLeft());
    (0, import_react57.useEffect)(() => {
      const timerId = setInterval(() => {
        const newTimeLeft = calculateTimeLeft();
        setTimeLeft(newTimeLeft);
        if (Object.keys(newTimeLeft).length === 0) {
          clearInterval(timerId);
        }
      }, 1e3);
      return () => clearInterval(timerId);
    }, [calculateTimeLeft]);
    return /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "flex justify-center items-center gap-4 text-center", children: [
      Object.entries(timeLeft).map(([unit, value]) => /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "bg-white dark:bg-gray-700/50 shadow-md rounded-lg p-2 min-w-[60px]", children: [
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("div", { className: "text-2xl font-bold text-blue-500", children: String(value).padStart(2, "0") }),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("div", { className: "text-xs uppercase text-gray-500 dark:text-gray-400", children: unit })
      ] }, unit)),
      Object.keys(timeLeft).length === 0 && /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("p", { className: "text-lg font-semibold text-red-400", children: "Cette vente est termin\xE9e !" })
    ] });
  };
  var FlashSalesPage = ({ allProducts, allStores, flashSales, onProductClick, onBack, onVendorClick, isComparisonEnabled }) => {
    const { user } = useAuth();
    const { visibleSales, saleForCountdown, isCountdownForUpcoming } = (0, import_react57.useMemo)(() => {
      const now = /* @__PURE__ */ new Date();
      const isPremium = user?.loyalty?.status === "premium" || user?.loyalty?.status === "premium_plus";
      const twentyFourHoursFromNow = new Date(now.getTime() + 24 * 60 * 60 * 1e3);
      const _visibleSales = flashSales.filter((sale) => {
        const startDate = new Date(sale.startDate);
        const endDate = new Date(sale.endDate);
        if (endDate < now) return false;
        if (isPremium) {
          return startDate <= twentyFourHoursFromNow;
        } else {
          return startDate <= now;
        }
      });
      const _saleForCountdown = (() => {
        const upcoming = _visibleSales.filter((s) => new Date(s.startDate) > now).sort((a, b) => +new Date(a.startDate) - +new Date(b.startDate));
        if (upcoming.length > 0) return upcoming[0];
        const active = _visibleSales.filter((s) => new Date(s.startDate) <= now).sort((a, b) => +new Date(a.endDate) - +new Date(b.endDate));
        return active[0];
      })();
      const _isCountdownForUpcoming = _saleForCountdown && new Date(_saleForCountdown.startDate) > now;
      return { visibleSales: _visibleSales, saleForCountdown: _saleForCountdown, isCountdownForUpcoming: _isCountdownForUpcoming };
    }, [flashSales, user]);
    const allFlashSaleProducts = (0, import_react57.useMemo)(() => {
      const approvedProductIdsInVisibleSales = new Set(
        visibleSales.flatMap(
          (sale) => sale.products.filter((fp) => fp.status === "approved").map((fp) => fp.productId)
        )
      );
      return allProducts.filter((p) => approvedProductIdsInVisibleSales.has(p.id));
    }, [visibleSales, allProducts]);
    const { filteredAndSortedProducts, filters, setFilters, resetFilters } = useProductFiltering(allFlashSaleProducts, allStores);
    const findStoreLocation = (vendorName) => allStores.find((s) => s.name === vendorName)?.location;
    return /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("div", { className: "bg-gray-50 dark:bg-gray-900 min-h-[80vh]", children: /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour \xE0 l'accueil"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "text-center bg-blue-900/80 text-white border border-blue-500 rounded-xl p-8 mb-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "flex items-center justify-center gap-3 mb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(BoltIcon, { className: "w-10 h-10 text-yellow-300" }),
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("h1", { className: "text-4xl font-bold", children: "Ventes Flash" })
        ] }),
        saleForCountdown ? /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(import_jsx_runtime75.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("p", { className: "text-lg text-gray-300 mb-6", children: isCountdownForUpcoming ? `La vente flash "${saleForCountdown.name}" commence dans :` : `La vente flash "${saleForCountdown.name}" se termine dans :` }),
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(CountdownTimer, { targetDate: isCountdownForUpcoming ? saleForCountdown.startDate : saleForCountdown.endDate })
        ] }) : null
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "lg:flex lg:gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
          ProductFilters_default,
          {
            allProducts: allFlashSaleProducts,
            filters,
            setFilters,
            resetFilters
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("main", { className: "flex-grow", children: filteredAndSortedProducts.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6", children: filteredAndSortedProducts.map((product) => {
          const saleForProduct = visibleSales.find((s) => s.products.some((p) => p.productId === product.id));
          const isUpcoming = saleForProduct && new Date(saleForProduct.startDate) > /* @__PURE__ */ new Date();
          return product && /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: findStoreLocation(product.vendor), flashSales, isComparisonEnabled, isFlashSaleUpcoming: isUpcoming, stores: allStores }, product.id);
        }) }) : /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md h-full flex flex-col justify-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: "Aucune vente flash en ce moment." }),
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("p", { className: "text-gray-400", children: "Revenez bient\xF4t pour des offres incroyables !" })
        ] }) })
      ] })
    ] }) });
  };
  var FlashSalesPage_default = FlashSalesPage;

  // components/SearchResultsPage.tsx
  var import_react58 = __toESM(require_react());
  var import_jsx_runtime76 = __toESM(require_jsx_runtime());
  var SearchResultsPage = ({ searchQuery, products, stores, flashSales, onProductClick, onBack, onVendorClick, isComparisonEnabled }) => {
    const searchedProducts = (0, import_react58.useMemo)(() => {
      if (!searchQuery) return [];
      const lowerCaseQuery = searchQuery.toLowerCase();
      return products.filter(
        (p) => p.name.toLowerCase().includes(lowerCaseQuery) || p.description.toLowerCase().includes(lowerCaseQuery) || p.vendor.toLowerCase().includes(lowerCaseQuery) || p.brand?.toLowerCase().includes(lowerCaseQuery)
      );
    }, [products, searchQuery]);
    const { filteredAndSortedProducts, filters, setFilters, resetFilters } = useProductFiltering(searchedProducts, stores);
    const findStoreLocation = (vendorName) => stores.find((s) => s.name === vendorName)?.location;
    return /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("div", { className: "lg:flex lg:gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
          ProductFilters_default,
          {
            allProducts: searchedProducts,
            filters,
            setFilters,
            resetFilters
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("main", { className: "flex-grow", children: [
          /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("div", { className: "mb-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: [
              "R\xE9sultats pour: ",
              /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("span", { className: "text-kmer-green", children: [
                '"',
                searchQuery,
                '"'
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("p", { className: "text-gray-600 dark:text-gray-300", children: [
              filteredAndSortedProducts.length,
              " sur ",
              searchedProducts.length,
              " produits affich\xE9s"
            ] })
          ] }),
          filteredAndSortedProducts.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6", children: filteredAndSortedProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: findStoreLocation(product.vendor), flashSales, isComparisonEnabled, stores }, product.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md h-full flex flex-col justify-center items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(SearchIcon, { className: "w-16 h-16 text-gray-400 mb-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: "Aucun produit trouv\xE9." }),
            /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: "Nous n'avons trouv\xE9 aucun r\xE9sultat pour votre recherche." }),
            /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("p", { className: "text-gray-500 dark:text-gray-500 text-sm mt-1", children: "Essayez d'utiliser des mots-cl\xE9s plus g\xE9n\xE9raux." })
          ] })
        ] })
      ] })
    ] });
  };
  var SearchResultsPage_default = SearchResultsPage;

  // components/WishlistPage.tsx
  var import_jsx_runtime77 = __toESM(require_jsx_runtime());
  var WishlistPage = ({ allProducts, allStores, flashSales, onProductClick, onBack, onVendorClick, isComparisonEnabled }) => {
    const { wishlist } = useWishlist();
    const wishlistedProducts = allProducts.filter((p) => wishlist.includes(p.id));
    const findStoreLocation = (vendorName) => allStores.find((s) => s.name === vendorName)?.location;
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)("div", { className: "container mx-auto px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour \xE0 l'accueil"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)("div", { className: "flex items-center justify-center gap-3 mb-10", children: [
        /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(HeartIcon, { className: "w-8 h-8 text-kmer-red", filled: true }),
        /* @__PURE__ */ (0, import_jsx_runtime77.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: "Mes Favoris" })
      ] }),
      wishlistedProducts.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime77.jsx)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8", children: wishlistedProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
        ProductCard_default,
        {
          product,
          onProductClick,
          onVendorClick,
          location: findStoreLocation(product.vendor),
          flashSales,
          isComparisonEnabled,
          stores: allStores
        },
        product.id
      )) }) : /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime77.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: "Votre liste de favoris est vide." }),
        /* @__PURE__ */ (0, import_jsx_runtime77.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6", children: "Cliquez sur le c\u0153ur d'un produit pour l'ajouter ici !" }),
        /* @__PURE__ */ (0, import_jsx_runtime77.jsx)("button", { onClick: onBack, className: "bg-kmer-green text-white font-bold py-3 px-8 rounded-full hover:bg-green-700 transition-colors", children: "D\xE9couvrir des produits" })
      ] })
    ] });
  };
  var WishlistPage_default = WishlistPage;

  // components/DeliveryAgentDashboard.tsx
  var import_react59 = __toESM(require_react());
  var import_jsx_runtime78 = __toESM(require_jsx_runtime());
  var statusTranslations2 = {
    confirmed: "Confirm\xE9e",
    "ready-for-pickup": "Pr\xEAt pour enl\xE8vement",
    "picked-up": "Pris en charge",
    "at-depot": "Au d\xE9p\xF4t",
    "out-for-delivery": "En livraison",
    delivered: "Livr\xE9",
    cancelled: "Annul\xE9",
    "refund-requested": "Remboursement demand\xE9",
    refunded: "Rembours\xE9",
    returned: "Retourn\xE9",
    "depot-issue": "Probl\xE8me au d\xE9p\xF4t",
    "delivery-failed": "\xC9chec de livraison"
  };
  var ScannerModal = ({ onClose, onScanSuccess, t }) => {
    const html5QrCodeRef = (0, import_react59.useRef)(null);
    const [scannerError, setScannerError] = (0, import_react59.useState)(null);
    (0, import_react59.useEffect)(() => {
      if (typeof Html5Qrcode === "undefined") {
        setScannerError("La biblioth\xE8que de scan n'a pas pu \xEAtre charg\xE9e.");
        return;
      }
      const html5QrCode = new Html5Qrcode("reader");
      html5QrCodeRef.current = html5QrCode;
      const config = { fps: 10, qrbox: { width: 250, height: 250 } };
      const startScanner = async () => {
        try {
          if (!html5QrCodeRef.current?.isScanning) {
            setScannerError(null);
            await html5QrCode.start(
              { facingMode: "environment" },
              config,
              (decodedText) => {
                onScanSuccess(decodedText);
              },
              (errorMessage) => {
              }
            );
          }
        } catch (err) {
          console.error("Failed to start scanner", err);
          setScannerError(t("deliveryDashboard.scannerError"));
        }
      };
      const timer = setTimeout(startScanner, 100);
      return () => {
        clearTimeout(timer);
        if (html5QrCodeRef.current?.isScanning) {
          html5QrCodeRef.current.stop().catch((err) => console.error("Error stopping scanner", err));
        }
      };
    }, [onScanSuccess, t]);
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("div", { className: "fixed inset-0 bg-black/75 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "bg-gray-800 rounded-lg p-6 max-w-md w-full text-white", children: [
      /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("h3", { className: "text-xl font-bold mb-4", children: t("deliveryDashboard.scanPackage") }),
      /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("div", { id: "reader", className: "w-full h-64 bg-gray-900 rounded-md" }),
      scannerError && /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("p", { className: "text-red-400 mt-2", children: scannerError }),
      /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("button", { onClick: onClose, className: "mt-4 w-full bg-gray-600 py-2 rounded-md", children: t("common.cancel") })
    ] }) });
  };
  var SignatureModal = ({ order, onClose, onConfirm, t }) => {
    const [recipientName, setRecipientName] = (0, import_react59.useState)("");
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("div", { className: "fixed inset-0 bg-black/75 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("h3", { className: "text-xl font-bold mb-4 dark:text-white", children: t("deliveryDashboard.confirmDelivery") }),
      /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("p", { className: "text-sm mb-4", children: [
        t("deliveryDashboard.order"),
        ": ",
        /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("span", { className: "font-mono", children: order.id })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("label", { htmlFor: "recipientName", className: "block text-sm font-medium dark:text-gray-300", children: t("deliveryDashboard.recipientName") }),
        /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
          "input",
          {
            id: "recipientName",
            type: "text",
            value: recipientName,
            onChange: (e) => setRecipientName(e.target.value),
            className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600",
            placeholder: "Ex: Jean Dupont",
            required: true
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "flex justify-end gap-2 mt-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("button", { onClick: onClose, className: "bg-gray-200 dark:bg-gray-600 px-4 py-2 rounded-lg", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("button", { onClick: () => onConfirm(order.id, recipientName), disabled: !recipientName.trim(), className: "bg-green-500 text-white px-4 py-2 rounded-lg disabled:bg-gray-400 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(CheckIcon, { className: "w-5 h-5" }),
          " ",
          t("deliveryDashboard.confirm")
        ] })
      ] })
    ] }) });
  };
  var DeliveryFailureModal = ({ order, onClose, onConfirm, t }) => {
    const [reason, setReason] = (0, import_react59.useState)("client-absent");
    const [details, setDetails] = (0, import_react59.useState)("");
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("div", { className: "fixed inset-0 bg-black/75 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("h3", { className: "text-xl font-bold mb-4 dark:text-white", children: t("deliveryDashboard.reportFailure") }),
      /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("p", { className: "text-sm mb-4", children: [
        t("deliveryDashboard.order"),
        ": ",
        /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("span", { className: "font-mono", children: order.id })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("label", { htmlFor: "failureReason", className: "block text-sm font-medium dark:text-gray-300", children: t("deliveryDashboard.reason") }),
          /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)(
            "select",
            {
              id: "failureReason",
              value: reason,
              onChange: (e) => setReason(e.target.value),
              className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("option", { value: "client-absent", children: t("deliveryDashboard.clientAbsent") }),
                /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("option", { value: "adresse-erronee", children: t("deliveryDashboard.wrongAddress") }),
                /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("option", { value: "colis-refuse", children: t("deliveryDashboard.packageRefused") })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("label", { htmlFor: "failureDetails", className: "block text-sm font-medium dark:text-gray-300", children: t("deliveryDashboard.details") }),
          /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
            "textarea",
            {
              id: "failureDetails",
              value: details,
              onChange: (e) => setDetails(e.target.value),
              rows: 3,
              className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600",
              placeholder: "Ex: Le client ne r\xE9pond pas au t\xE9l\xE9phone, la porte est ferm\xE9e...",
              required: true
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "flex justify-end gap-2 mt-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("button", { onClick: onClose, className: "bg-gray-200 dark:bg-gray-600 px-4 py-2 rounded-lg", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("button", { onClick: () => onConfirm(order.id, { reason, details, date: (/* @__PURE__ */ new Date()).toISOString() }), disabled: !details.trim(), className: "bg-red-500 text-white px-4 py-2 rounded-lg disabled:bg-gray-400 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(XIcon, { className: "w-5 h-5" }),
          " ",
          t("deliveryDashboard.confirmFailure")
        ] })
      ] })
    ] }) });
  };
  var MissionMap = ({ start, end }) => {
    const mapRef = (0, import_react59.useRef)(null);
    const leafletMap = (0, import_react59.useRef)();
    const routingControlRef = (0, import_react59.useRef)(null);
    (0, import_react59.useEffect)(() => {
      if (mapRef.current && !leafletMap.current) {
        leafletMap.current = L.map(mapRef.current).setView([4.05, 9.75], 11);
        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
          attribution: "&copy; OpenStreetMap contributors"
        }).addTo(leafletMap.current);
      }
      if (leafletMap.current && end) {
        if (routingControlRef.current) {
          leafletMap.current.removeControl(routingControlRef.current);
        }
        if (start) {
          routingControlRef.current = L.Routing.control({
            waypoints: [start, end],
            routeWhileDragging: false,
            show: false,
            createMarker: () => null
          }).addTo(leafletMap.current);
        } else {
          L.marker(end).addTo(leafletMap.current);
          leafletMap.current.setView(end, 14);
        }
      }
      setTimeout(() => leafletMap.current?.invalidateSize(false), 100);
    }, [start, end]);
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("div", { ref: mapRef, className: "h-48 w-full rounded-md mt-4 z-0" });
  };
  var DeliveryAgentDashboard = ({ allOrders, allStores, allPickupPoints, onLogout, onUpdateUserAvailability, onUpdateDeliveryStatus }) => {
    const { user } = useAuth();
    const { t } = useLanguage();
    const [view, setView] = (0, import_react59.useState)("missions");
    const [isScannerOpen, setIsScannerOpen] = (0, import_react59.useState)(false);
    const [modalState, setModalState] = (0, import_react59.useState)(null);
    const [openMapOrderId, setOpenMapOrderId] = (0, import_react59.useState)(null);
    const { missions, history } = (0, import_react59.useMemo)(() => {
      if (!user) return { missions: [], history: [] };
      const agentOrders = allOrders.filter((o) => o.agentId === user.id);
      const _missions = agentOrders.filter((o) => ["picked-up", "at-depot", "out-for-delivery", "ready-for-pickup"].includes(o.status));
      const _history = agentOrders.filter((o) => ["delivered", "delivery-failed", "returned"].includes(o.status));
      return { missions: _missions, history: _history };
    }, [allOrders, user]);
    const handleConfirmDelivery = (0, import_react59.useCallback)((orderId, recipientName) => {
      onUpdateDeliveryStatus(orderId, "delivered", { signature: recipientName });
      setModalState(null);
    }, [onUpdateDeliveryStatus]);
    const handleConfirmFailure = (0, import_react59.useCallback)((orderId, failureReason) => {
      onUpdateDeliveryStatus(orderId, "delivery-failed", { failureReason });
      setModalState(null);
    }, [onUpdateDeliveryStatus]);
    const handleScannerClose = (0, import_react59.useCallback)(() => {
      setIsScannerOpen(false);
    }, []);
    const handleScanSuccess = (0, import_react59.useCallback)((decodedText) => {
      setIsScannerOpen(false);
      const order = allOrders.find((o) => o.trackingNumber === decodedText);
      if (!order) {
        alert("Commande non trouv\xE9e.");
        return;
      }
      if (order.status === "ready-for-pickup") {
        onUpdateDeliveryStatus(order.id, "picked-up");
        alert(`Commande ${order.id} marqu\xE9e comme "Pris en charge".`);
      } else if (order.status === "out-for-delivery") {
        setModalState({ type: "signature", order });
      } else {
        alert(`Action non valide pour le statut actuel de la commande (${statusTranslations2[order.status]}).`);
      }
    }, [allOrders, onUpdateDeliveryStatus]);
    const getRouteDetails = (0, import_react59.useCallback)((order) => {
      let start;
      let end;
      let destinationLabel = "";
      const agentZoneDepot = allPickupPoints.find((p) => p.zoneId === user?.zoneId);
      if (agentZoneDepot?.latitude && agentZoneDepot?.longitude) {
        start = L.latLng(agentZoneDepot.latitude, agentZoneDepot.longitude);
      }
      if (order.status === "ready-for-pickup") {
        const vendorName = order.items[0]?.vendor;
        const store = allStores.find((s) => s.name === vendorName);
        if (store?.latitude && store?.longitude) {
          end = L.latLng(store.latitude, store.longitude);
          destinationLabel = `R\xE9cup\xE9rer chez : ${store.name}`;
        }
      } else if (["picked-up", "at-depot", "out-for-delivery"].includes(order.status)) {
        if (order.shippingAddress.latitude && order.shippingAddress.longitude) {
          end = L.latLng(order.shippingAddress.latitude, order.shippingAddress.longitude);
          destinationLabel = `Livrer \xE0 : ${order.shippingAddress.fullName}`;
        }
      }
      return { start, end, destinationLabel };
    }, [user, allStores, allPickupPoints]);
    if (!user) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)(import_jsx_runtime78.Fragment, { children: [
      isScannerOpen && /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(ScannerModal, { onClose: handleScannerClose, onScanSuccess: handleScanSuccess, t }),
      modalState?.type === "signature" && /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(SignatureModal, { order: modalState.order, onClose: () => setModalState(null), onConfirm: handleConfirmDelivery, t }),
      modalState?.type === "failure" && /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(DeliveryFailureModal, { order: modalState.order, onClose: () => setModalState(null), onConfirm: handleConfirmFailure, t }),
      /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "bg-gray-100 dark:bg-gray-950 min-h-screen", children: [
        /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("header", { className: "bg-white dark:bg-gray-800 shadow-sm sticky top-0 z-20", children: /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("div", { className: "container mx-auto px-4 sm:px-6 py-3", children: /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "flex justify-between items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("h1", { className: "text-xl font-bold text-gray-800 dark:text-white", children: t("deliveryDashboard.title") }),
            /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
              t("deliveryDashboard.agent"),
              ": ",
              user.name
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("button", { onClick: onLogout, className: "text-sm bg-gray-200 dark:bg-gray-700 font-semibold px-4 py-2 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600", children: t("deliveryDashboard.logout") })
        ] }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("main", { className: "container mx-auto px-4 sm:px-6 py-6 space-y-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "p-4 bg-white dark:bg-gray-800 rounded-lg shadow-md flex justify-between items-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("h3", { className: "font-bold text-gray-600 dark:text-gray-300", children: t("deliveryDashboard.status") }),
                /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("p", { className: `text-xl font-bold ${user.availabilityStatus === "available" ? "text-green-500" : "text-red-500"}`, children: user.availabilityStatus === "available" ? t("deliveryDashboard.available") : t("deliveryDashboard.unavailable") })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("button", { onClick: () => onUpdateUserAvailability(user.id, user.availabilityStatus === "available" ? "unavailable" : "available"), className: `px-4 py-2 rounded-md font-semibold text-white ${user.availabilityStatus === "available" ? "bg-red-500" : "bg-green-500"}`, children: user.availabilityStatus === "available" ? t("deliveryDashboard.setUnavailable") : t("deliveryDashboard.setAvailable") })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "p-4 bg-white dark:bg-gray-800 rounded-lg shadow-md", children: [
              /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("h3", { className: "font-bold text-gray-600 dark:text-gray-300", children: t("deliveryDashboard.activeMissions") }),
              /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("p", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: missions.length })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("button", { onClick: () => setIsScannerOpen(true), className: "md:col-span-1 p-4 bg-kmer-green text-white rounded-lg shadow-md flex flex-col justify-center items-center text-center hover:bg-green-700", children: [
              /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(QrCodeIcon, { className: "w-8 h-8" }),
              /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("p", { className: "font-bold mt-1", children: t("deliveryDashboard.scanPackage") })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "p-2 border-b dark:border-gray-700 flex justify-start items-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("button", { onClick: () => setView("missions"), className: `px-4 py-2 font-semibold ${view === "missions" ? "border-b-2 border-kmer-green text-kmer-green" : ""}`, children: t("deliveryDashboard.currentMissions") }),
              /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("button", { onClick: () => setView("history"), className: `px-4 py-2 font-semibold ${view === "history" ? "border-b-2 border-kmer-green text-kmer-green" : ""}`, children: t("deliveryDashboard.history") })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("div", { className: "space-y-4 p-4", children: (view === "missions" ? missions : history).map((order) => {
              const { start, end, destinationLabel } = getRouteDetails(order);
              return /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "p-4 border rounded-md dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50", children: [
                /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "flex justify-between items-start", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("p", { className: "font-bold", children: order.id }),
                    /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("span", { className: `px-2 py-0.5 text-xs font-semibold rounded-full ${order.status === "out-for-delivery" ? "bg-indigo-100 text-indigo-800" : "bg-blue-100 text-blue-800"}`, children: statusTranslations2[order.status] })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("p", { className: "text-lg font-bold", children: [
                    order.total.toLocaleString("fr-CM"),
                    " FCFA"
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "mt-4 border-t pt-4 dark:border-gray-700", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("p", { className: "font-semibold", children: destinationLabel || `Client: ${order.shippingAddress.fullName} (${order.shippingAddress.phone})` }),
                  /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("p", { children: [
                    "Adresse: ",
                    order.shippingAddress.address,
                    ", ",
                    order.shippingAddress.city
                  ] })
                ] }),
                openMapOrderId === order.id && end && /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(MissionMap, { start, end }),
                /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "mt-4 flex flex-wrap gap-2", children: [
                  end && /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("button", { onClick: () => setOpenMapOrderId((prev) => prev === order.id ? null : order.id), className: "bg-gray-200 dark:bg-gray-600 px-4 py-2 rounded-lg font-semibold text-sm flex items-center gap-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(MapIcon, { className: "w-5 h-5" }),
                    openMapOrderId === order.id ? t("deliveryDashboard.hideMap") : t("deliveryDashboard.showMap")
                  ] }),
                  order.status === "ready-for-pickup" && /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("button", { onClick: () => onUpdateDeliveryStatus(order.id, "picked-up"), className: "bg-blue-500 text-white px-3 py-2 rounded-lg font-semibold text-sm", children: t("deliveryDashboard.pickedUpFromSeller") }),
                  order.status === "out-for-delivery" && /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)(import_jsx_runtime78.Fragment, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("button", { onClick: () => setModalState({ type: "signature", order }), className: "bg-green-500 text-white px-4 py-2 rounded-lg font-semibold text-sm", children: t("deliveryDashboard.delivered") }),
                    /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("button", { onClick: () => setModalState({ type: "failure", order }), className: "bg-red-500 text-white px-4 py-2 rounded-lg font-semibold text-sm", children: t("deliveryDashboard.deliveryFailed") })
                  ] })
                ] })
              ] }, order.id);
            }) })
          ] })
        ] })
      ] })
    ] });
  };

  // components/DepotAgentDashboard.tsx
  var import_react60 = __toESM(require_react());
  var import_jsx_runtime79 = __toESM(require_jsx_runtime());
  var StatCard4 = ({ label, value }) => /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg shadow-sm", children: [
    /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("h3", { className: "text-sm font-medium text-gray-500 dark:text-gray-400", children: label }),
    /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("p", { className: "text-3xl font-bold text-gray-800 dark:text-white mt-1", children: value })
  ] });
  var ScannerModal2 = ({ onClose, onScanSuccess, t }) => {
    const html5QrCodeRef = (0, import_react60.useRef)(null);
    (0, import_react60.useEffect)(() => {
      const html5QrCode = new Html5Qrcode("reader");
      html5QrCodeRef.current = html5QrCode;
      const startScanner = async () => {
        try {
          if (!html5QrCodeRef.current?.isScanning) {
            await html5QrCode.start(
              { facingMode: "environment" },
              { fps: 10, qrbox: { width: 250, height: 250 } },
              (decodedText) => onScanSuccess(decodedText),
              (errorMessage) => {
              }
            );
          }
        } catch (err) {
          console.error("Scanner start error", err);
        }
      };
      const timer = setTimeout(startScanner, 100);
      return () => {
        clearTimeout(timer);
        if (html5QrCodeRef.current?.isScanning) {
          html5QrCodeRef.current.stop().catch((err) => console.error("Scanner stop error", err));
        }
      };
    }, [onScanSuccess]);
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "fixed inset-0 bg-black/75 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "bg-gray-800 rounded-lg p-6 max-w-md w-full text-white", children: [
      /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("h3", { className: "text-xl font-bold mb-4", children: t("deliveryDashboard.scanPackage") }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { id: "reader", className: "w-full h-64 bg-gray-900 rounded-md" }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("button", { onClick: onClose, className: "mt-4 w-full bg-gray-600 py-2 rounded-md", children: t("common.cancel") })
    ] }) });
  };
  var CheckInModal = ({ order, onClose, onConfirm, t }) => {
    const [location, setLocation] = (0, import_react60.useState)("");
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "fixed inset-0 bg-black/75 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("h3", { className: "text-xl font-bold mb-4", children: t("depotDashboard.checkInParcel") }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("p", { className: "text-sm mb-4", children: [
        t("common.orderId"),
        ": ",
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("span", { className: "font-mono", children: order.id })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("label", { htmlFor: "location", className: "block text-sm font-medium", children: t("depotDashboard.storageLocation") }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("input", { id: "location", type: "text", value: location, onChange: (e) => setLocation(e.target.value.toUpperCase()), className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", required: true })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "flex justify-end gap-2 mt-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("button", { onClick: onClose, className: "bg-gray-200 dark:bg-gray-600 px-4 py-2 rounded-lg", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("button", { onClick: () => onConfirm(order.id, location), disabled: !location.trim(), className: "bg-green-500 text-white px-4 py-2 rounded-lg disabled:bg-gray-400", children: t("depotDashboard.checkIn") })
      ] })
    ] }) });
  };
  var InventoryPanel = ({ inventory, depot, recentMovements }) => {
    const { t } = useLanguage();
    const [searchTerm, setSearchTerm] = (0, import_react60.useState)("");
    const { totalSlots, occupiedSlots, freeSlots, freeLocations } = (0, import_react60.useMemo)(() => {
      if (!depot?.layout) return { totalSlots: 0, occupiedSlots: 0, freeSlots: 0, freeLocations: [] };
      const { aisles, shelves, locations } = depot.layout;
      const total = aisles * shelves * locations;
      const allPossibleLocations = /* @__PURE__ */ new Set();
      for (let a = 1; a <= aisles; a++) for (let s = 1; s <= shelves; s++) for (let l = 1; l <= locations; l++) allPossibleLocations.add(`A${a}-S${s}-L${l}`);
      const occupied = new Set(inventory.map((o) => o.storageLocationId).filter(Boolean));
      const free = [...allPossibleLocations].filter((loc) => !occupied.has(loc));
      return { totalSlots: total, occupiedSlots: occupied.size, freeSlots: free.length, freeLocations: free };
    }, [inventory, depot]);
    const filteredInventory = (0, import_react60.useMemo)(() => {
      if (!searchTerm) return inventory;
      const lowerSearch = searchTerm.toLowerCase();
      return inventory.filter(
        (order) => order.id.toLowerCase().includes(lowerSearch) || order.shippingAddress.fullName.toLowerCase().includes(lowerSearch) || order.storageLocationId?.toLowerCase().includes(lowerSearch)
      );
    }, [inventory, searchTerm]);
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(StatCard4, { label: t("depotDashboard.inventoryPanel.totalSlots"), value: totalSlots }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(StatCard4, { label: t("depotDashboard.inventoryPanel.occupiedSlots"), value: occupiedSlots }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(StatCard4, { label: t("depotDashboard.inventoryPanel.freeSlots"), value: freeSlots })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("h3", { className: "font-bold mb-2", children: t("depotDashboard.inventoryPanel.currentInventory") }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(
            "input",
            {
              type: "text",
              value: searchTerm,
              onChange: (e) => setSearchTerm(e.target.value),
              placeholder: t("depotDashboard.inventoryPanel.searchPlaceholder"),
              className: "w-full p-2 border rounded-md mb-2 dark:bg-gray-700 dark:border-gray-600"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "bg-white dark:bg-gray-800/50 rounded-lg shadow-md overflow-hidden max-h-96 overflow-y-auto", children: [
            /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("table", { className: "w-full text-sm", children: [
              /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700 sticky top-0", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("tr", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.orderId") }),
                /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.location") }),
                /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.customer") })
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("tbody", { children: filteredInventory.map((order) => /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
                /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-2 font-mono", children: order.id }),
                /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-2 font-semibold", children: order.storageLocationId }),
                /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-2", children: order.shippingAddress.fullName })
              ] }, order.id)) })
            ] }),
            filteredInventory.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("p", { className: "text-center p-4", children: t("depotDashboard.noParcelsInStock") })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("h3", { className: "font-bold mb-2", children: t("depotDashboard.inventoryPanel.freeLocations") }),
          depot?.layout ? /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "bg-white dark:bg-gray-800/50 rounded-lg shadow-md p-4 max-h-96 overflow-y-auto", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "flex flex-wrap gap-2", children: freeLocations.map((loc) => /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("span", { className: "bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300 text-xs font-mono px-2 py-1 rounded-full", children: loc }, loc)) }) }) : /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("p", { className: "text-center p-4 text-sm text-gray-500", children: t("depotDashboard.inventoryPanel.noLayout") })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "mt-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("h3", { className: "font-bold mb-2", children: t("depotDashboard.inventoryPanel.recentMovements") }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "bg-white dark:bg-gray-800/50 rounded-lg shadow-md overflow-hidden max-h-96 overflow-y-auto", children: [
          /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("table", { className: "w-full text-sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700 sticky top-0", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("tr", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.inventoryPanel.table.timestamp") }),
              /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.inventoryPanel.table.action") }),
              /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-left", children: t("common.orderId") }),
              /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.inventoryPanel.table.details") })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("tbody", { children: recentMovements.map((move, index) => /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
              /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-2 text-xs text-gray-500", children: new Date(move.timestamp).toLocaleString("fr-FR") }),
              /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-2", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("span", { className: `px-2 py-0.5 text-xs font-semibold rounded-full ${move.type === "Entr\xE9e" ? "bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300" : "bg-orange-100 text-orange-800 dark:bg-orange-900/50 dark:text-orange-300"}`, children: move.type }) }),
              /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-2 font-mono", children: move.orderId }),
              /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-2 text-xs", children: move.details })
            ] }, index)) })
          ] }),
          recentMovements.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("p", { className: "text-center p-4 text-gray-500", children: t("depotDashboard.noData") })
        ] })
      ] })
    ] });
  };
  var AssignModal = ({ order, agents, onAssign, onCancel }) => {
    const { t } = useLanguage();
    const [selectedAgentId, setSelectedAgentId] = (0, import_react60.useState)("");
    const availableAgents = agents.filter((a) => a.availabilityStatus === "available");
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("h3", { className: "text-lg font-bold mb-4", children: t("depotDashboard.assignDriver") }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("p", { className: "text-sm mb-4", children: [
        t("common.orderId"),
        ": ",
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("span", { className: "font-mono", children: order.id })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("select", { value: selectedAgentId, onChange: (e) => setSelectedAgentId(e.target.value), className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("option", { value: "", children: t("depotDashboard.chooseAvailableDriver") }),
        availableAgents.map((agent) => /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("option", { value: agent.id, children: agent.name }, agent.id))
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "flex justify-end gap-2 mt-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("button", { onClick: onCancel, className: "bg-gray-200 px-4 py-2 rounded-lg", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("button", { onClick: () => onAssign(order.id, selectedAgentId), disabled: !selectedAgentId, className: "bg-blue-500 text-white px-4 py-2 rounded-lg disabled:bg-gray-400", children: t("depotDashboard.assign") })
      ] })
    ] }) });
  };
  var ParcelsPanel = ({ ordersToAssign, ordersInDelivery, ordersWithIssues, deliveryAgents, setAssigningOrder }) => {
    const { t } = useLanguage();
    const [subTab, setSubTab] = (0, import_react60.useState)("toAssign");
    const renderTable = (orders) => /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "overflow-x-auto", children: [
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("table", { className: "w-full text-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.orderId") }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.customer") }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-left", children: subTab === "inDelivery" ? t("depotDashboard.table.agent") : t("depotDashboard.table.numItems") }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-center", children: t("common.actions") })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("tbody", { children: orders.map((order) => /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-2 font-mono", children: order.id }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-2", children: order.shippingAddress.fullName }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-2", children: subTab === "inDelivery" ? deliveryAgents.find((a) => a.id === order.agentId)?.name || order.agentId : order.items.length }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-2 text-center", children: subTab === "toAssign" && /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("button", { onClick: () => setAssigningOrder(order), className: "bg-blue-500 text-white text-xs font-bold py-1 px-2 rounded-md", children: t("depotDashboard.assign") }) })
        ] }, order.id)) })
      ] }),
      orders.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("p", { className: "text-center p-4 text-gray-500", children: t("depotDashboard.noData") })
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "flex border-b dark:border-gray-700 mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("button", { onClick: () => setSubTab("toAssign"), className: `px-4 py-2 font-semibold ${subTab === "toAssign" ? "border-b-2 border-kmer-green text-kmer-green" : "text-gray-500"}`, children: t("depotDashboard.toAssign", ordersToAssign.length) }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("button", { onClick: () => setSubTab("inDelivery"), className: `px-4 py-2 font-semibold ${subTab === "inDelivery" ? "border-b-2 border-kmer-green text-kmer-green" : "text-gray-500"}`, children: t("depotDashboard.inDelivery", ordersInDelivery.length) }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("button", { onClick: () => setSubTab("issues"), className: `px-4 py-2 font-semibold ${subTab === "issues" ? "border-b-2 border-kmer-green text-kmer-green" : "text-gray-500"}`, children: t("depotDashboard.issues", ordersWithIssues.length) })
      ] }),
      subTab === "toAssign" && renderTable(ordersToAssign),
      subTab === "inDelivery" && renderTable(ordersInDelivery),
      subTab === "issues" && renderTable(ordersWithIssues)
    ] });
  };
  var AgentsPanel = ({ agents, depot, onSaveSchedule }) => {
    const { t } = useLanguage();
    const [schedule, setSchedule] = (0, import_react60.useState)(depot.schedule || {});
    const [saved, setSaved] = (0, import_react60.useState)(false);
    (0, import_react60.useEffect)(() => {
      setSchedule(depot.schedule || {});
    }, [depot.schedule]);
    const days = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"];
    const shifts = ["Matin", "Apr\xE8s-midi", "Nuit", "Repos"];
    const translatedShifts = {
      "Matin": t("depotDashboard.shifts.morning"),
      "Apr\xE8s-midi": t("depotDashboard.shifts.afternoon"),
      "Nuit": t("depotDashboard.shifts.night"),
      "Repos": t("depotDashboard.shifts.off")
    };
    const handleScheduleChange = (agentId, day, value) => {
      setSchedule((prev) => ({
        ...prev,
        [agentId]: {
          ...prev[agentId] || {},
          [day]: value
        }
      }));
    };
    const handleSave = () => {
      onSaveSchedule(depot.id, schedule);
      setSaved(true);
      setTimeout(() => setSaved(false), 3e3);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "space-y-6", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("h3", { className: "font-bold mb-4", children: t("depotDashboard.schedule") }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "overflow-x-auto", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("table", { className: "w-full text-sm border dark:border-gray-700", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.agent") }),
          days.map((day) => /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-center", children: t(`depotDashboard.weekdays.${day}`) }, day))
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("tbody", { children: agents.map((agent) => /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-2 font-semibold", children: agent.name }),
          days.map((day) => /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-1", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(
            "select",
            {
              value: schedule[agent.id]?.[day] || "Repos",
              onChange: (e) => handleScheduleChange(agent.id, day, e.target.value),
              className: "w-full p-1 border rounded-md text-xs dark:bg-gray-600 dark:border-gray-500",
              children: shifts.map((shift) => /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("option", { value: shift, children: translatedShifts[shift] }, shift))
            }
          ) }, day))
        ] }, agent.id)) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "mt-4 flex justify-end items-center gap-4", children: [
        saved && /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("span", { className: "text-green-600 flex items-center gap-1 text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(CheckCircleIcon, { className: "w-5 h-5" }),
          " ",
          t("depotDashboard.scheduleSaved")
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("button", { onClick: handleSave, className: "bg-blue-500 text-white font-bold py-2 px-4 rounded-lg", children: t("depotDashboard.saveSchedule") })
      ] })
    ] }) });
  };
  var DriversPanel = ({ deliveryAgents }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "overflow-x-auto", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("table", { className: "w-full text-sm", children: [
      /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("tr", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.agent") }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.availability") }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.performance") })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("tbody", { children: deliveryAgents.map((agent) => /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-2 font-semibold", children: agent.name }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-2", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("span", { className: `px-2 py-0.5 rounded-full text-xs font-semibold ${agent.availabilityStatus === "available" ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700"}`, children: agent.availabilityStatus === "available" ? t("deliveryDashboard.available") : t("deliveryDashboard.unavailable") }) }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("td", { children: [
          t("depotDashboard.successRate"),
          ": ",
          agent.successRate.toFixed(1),
          "% (",
          t("depotDashboard.deliveriesSucceeded", agent.deliveredCount, agent.totalMissions),
          ")"
        ] })
      ] }, agent.id)) })
    ] }) });
  };
  var SellersPanel = ({ depotInventory, allStores }) => {
    const { t } = useLanguage();
    const sellersWithParcels = (0, import_react60.useMemo)(() => {
      const sellerParcelCount = {};
      depotInventory.forEach((order) => {
        order.items.forEach((item) => {
          sellerParcelCount[item.vendor] = (sellerParcelCount[item.vendor] || 0) + 1;
        });
      });
      return Object.entries(sellerParcelCount).map(([name, count]) => ({ name, count, store: allStores.find((s) => s.name === name) }));
    }, [depotInventory, allStores]);
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("h3", { className: "font-bold mb-4", children: t("depotDashboard.sellersWithParcels") }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("table", { className: "w-full text-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.seller") }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.location") }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("th", { className: "p-2 text-right", children: t("depotDashboard.table.parcels") })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("tbody", { children: sellersWithParcels.map(({ name, count, store }) => /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-2 font-semibold", children: name }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("td", { className: "p-2", children: [
            store?.location,
            ", ",
            store?.neighborhood
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("td", { className: "p-2 text-right font-bold", children: count })
        ] }, name)) })
      ] })
    ] });
  };
  var ReportsPanel = ({ depotOrders, deliveryAgents }) => {
    const { t } = useLanguage();
    const [period, setPeriod] = (0, import_react60.useState)("7days");
    const reportData = (0, import_react60.useMemo)(() => {
      const now = /* @__PURE__ */ new Date();
      const cutoffDate = /* @__PURE__ */ new Date();
      cutoffDate.setDate(now.getDate() - (period === "7days" ? 7 : 30));
      const filteredOrders = depotOrders.filter((o) => new Date(o.orderDate) >= cutoffDate);
      if (filteredOrders.length === 0) return null;
      let checkedIn = 0;
      let shippedOut = 0;
      let totalProcessingTime = 0;
      let processedCount = 0;
      let successfulDeliveries = 0;
      const dailyFlow = {};
      filteredOrders.forEach((order) => {
        const checkInEvent = order.trackingHistory.find((e) => e.status === "at-depot");
        const shipOutEvent = order.trackingHistory.find((e) => e.status === "out-for-delivery");
        if (checkInEvent) {
          checkedIn++;
          const day = new Date(checkInEvent.date).toLocaleDateString("fr-FR");
          dailyFlow[day] = { ...dailyFlow[day], in: (dailyFlow[day]?.in || 0) + 1 };
        }
        if (shipOutEvent) {
          shippedOut++;
          const day = new Date(shipOutEvent.date).toLocaleDateString("fr-FR");
          dailyFlow[day] = { ...dailyFlow[day], out: (dailyFlow[day]?.out || 0) + 1 };
        }
        if (checkInEvent && shipOutEvent) {
          totalProcessingTime += new Date(shipOutEvent.date).getTime() - new Date(checkInEvent.date).getTime();
          processedCount++;
        }
        if (order.status === "delivered") {
          successfulDeliveries++;
        }
      });
      const topDrivers = deliveryAgents.map((agent) => {
        const agentDeliveries = filteredOrders.filter((o) => o.agentId === agent.id && o.status === "delivered").length;
        return { name: agent.name, count: agentDeliveries };
      }).sort((a, b) => b.count - a.count).slice(0, 5);
      return {
        checkedIn,
        shippedOut,
        avgProcessingTime: processedCount > 0 ? totalProcessingTime / processedCount / (1e3 * 60 * 60) : 0,
        // in hours
        deliverySuccessRate: shippedOut > 0 ? successfulDeliveries / shippedOut * 100 : 0,
        dailyFlow: Object.entries(dailyFlow).map(([day, data]) => ({ day, ...data })),
        topDrivers
      };
    }, [depotOrders, deliveryAgents, period]);
    if (!reportData) {
      return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "p-6 text-center text-gray-500", children: t("depotDashboard.reportsPanel.noData") });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("h3", { className: "font-bold text-xl", children: t("depotDashboard.reportsPanel.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("p", { className: "text-sm font-semibold", children: t("depotDashboard.reportsPanel.selectPeriod") }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("button", { onClick: () => setPeriod("7days"), className: `px-3 py-1 text-sm rounded-md ${period === "7days" ? "bg-kmer-green text-white" : "bg-gray-200"}`, children: t("common.days7") }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("button", { onClick: () => setPeriod("30days"), className: `px-3 py-1 text-sm rounded-md ${period === "30days" ? "bg-kmer-green text-white" : "bg-gray-200"}`, children: t("common.days30") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "grid grid-cols-2 lg:grid-cols-4 gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(StatCard4, { label: t("depotDashboard.reportsPanel.parcelsCheckedIn"), value: reportData.checkedIn }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(StatCard4, { label: t("depotDashboard.reportsPanel.parcelsShippedOut"), value: reportData.shippedOut }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(StatCard4, { label: t("depotDashboard.reportsPanel.avgProcessingTime"), value: `${reportData.avgProcessingTime.toFixed(1)} ${t("depotDashboard.reportsPanel.hours")}` }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(StatCard4, { label: t("depotDashboard.reportsPanel.deliverySuccessRate"), value: `${reportData.deliverySuccessRate.toFixed(1)}%` })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "p-4 bg-white dark:bg-gray-800/50 rounded-lg shadow-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("h4", { className: "font-semibold mb-2", children: t("depotDashboard.reportsPanel.dailyFlow") }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "flex justify-around items-end h-56 border-l border-b border-gray-200 dark:border-gray-700 pl-4 pb-4", children: reportData.dailyFlow.map(({ day, in: inCount, out: outCount }) => /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "flex flex-col items-center h-full justify-end", title: `${day}: ${inCount || 0} Entr\xE9es, ${outCount || 0} Sorties`, children: [
            /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "flex gap-1 items-end h-full", children: [
              /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "w-4 bg-green-500 rounded-t-sm", style: { height: `${(inCount || 0) / Math.max(...reportData.dailyFlow.map((d) => Math.max(d.in || 0, d.out || 0)), 1) * 100}%` } }),
              /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "w-4 bg-orange-500 rounded-t-sm", style: { height: `${(outCount || 0) / Math.max(...reportData.dailyFlow.map((d) => Math.max(d.in || 0, d.out || 0)), 1) * 100}%` } })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("p", { className: "text-xs mt-1", children: day.split("/")[0] })
          ] }, day)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "p-4 bg-white dark:bg-gray-800/50 rounded-lg shadow-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("h4", { className: "font-semibold mb-2", children: t("depotDashboard.reportsPanel.topDrivers") }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("ul", { children: reportData.topDrivers.map((driver, index) => /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("li", { className: "flex justify-between items-center text-sm py-1 border-b last:border-b-0", children: [
            /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("span", { children: [
              index + 1,
              ". ",
              driver.name
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("span", { className: "font-bold", children: [
              driver.count,
              " ",
              t("depotDashboard.reportsPanel.successfulDeliveries")
            ] })
          ] }, driver.name)) })
        ] })
      ] })
    ] });
  };
  var DepotAgentDashboard = ({ user, allUsers, allOrders, allStores, allZones, allPickupPoints, onLogout, onAssignAgentToOrder, handleDepotCheckIn, onUpdateSchedule }) => {
    const { t } = useLanguage();
    const [activeTab, setActiveTab] = (0, import_react60.useState)("overview");
    const [assigningOrder, setAssigningOrder] = (0, import_react60.useState)(null);
    const [isScannerOpen, setIsScannerOpen] = (0, import_react60.useState)(false);
    const [checkingInOrder, setCheckingInOrder] = (0, import_react60.useState)(null);
    const isManager = user.role === "depot_manager";
    const { ordersToAssign, ordersInDelivery, ordersWithIssues, depotInventory, deliveryAgents, depotAgents, zoneName, recentMovements, depotOrders } = (0, import_react60.useMemo)(() => {
      const userZoneId = user.zoneId;
      const _zoneName = allZones.find((z) => z.id === userZoneId)?.name || "Inconnue";
      if (!userZoneId || !user.depotId) return { ordersToAssign: [], ordersInDelivery: [], ordersWithIssues: [], depotInventory: [], deliveryAgents: [], depotAgents: [], zoneName: _zoneName, recentMovements: [], depotOrders: [] };
      const _depotOrders = allOrders.filter((o) => o.pickupPointId === user.depotId || allUsers.find((u) => u.id === o.agentId)?.zoneId === userZoneId);
      const _depotInventory = _depotOrders.filter((o) => o.status === "at-depot" && o.storageLocationId);
      const _ordersToAssign = _depotInventory.filter((o) => o.deliveryMethod === "home-delivery" && !o.agentId);
      const _ordersInDelivery = _depotOrders.filter((o) => o.status === "out-for-delivery");
      const _ordersWithIssues = _depotOrders.filter((o) => ["returned", "depot-issue", "delivery-failed"].includes(o.status));
      const _deliveryAgents = allUsers.filter((u) => u.role === "delivery_agent" && u.zoneId === userZoneId);
      const _depotAgents = allUsers.filter((u) => u.role === "depot_agent" && u.depotId === user.depotId);
      const agentsWithPerf = _deliveryAgents.map((agent) => {
        const agentOrders = allOrders.filter((o) => o.agentId === agent.id);
        const deliveredCount = agentOrders.filter((o) => o.status === "delivered").length;
        const successRate = agentOrders.length > 0 ? deliveredCount / agentOrders.length * 100 : 0;
        return { ...agent, deliveredCount, successRate, totalMissions: agentOrders.length };
      });
      const movements = _depotOrders.flatMap(
        (order) => order.trackingHistory.filter(
          (event) => event.status === "at-depot" && event.details.includes("emplacement") || event.status === "out-for-delivery" && event.details.includes("assign\xE9 au livreur")
        ).map((event) => ({
          type: event.status === "at-depot" ? "Entr\xE9e" : "Sortie",
          orderId: order.id,
          timestamp: event.date,
          details: event.details.split(". ").pop() || event.details
          // Get the relevant part
        }))
      );
      const sortedMovements = movements.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()).slice(0, 50);
      return { ordersToAssign: _ordersToAssign, ordersInDelivery: _ordersInDelivery, ordersWithIssues: _ordersWithIssues, depotInventory: _depotInventory, deliveryAgents: agentsWithPerf, depotAgents: _depotAgents, zoneName: _zoneName, recentMovements: sortedMovements, depotOrders: _depotOrders };
    }, [allOrders, allUsers, user, allZones]);
    const handleScanSuccess = (0, import_react60.useCallback)((decodedText) => {
      setIsScannerOpen(false);
      const order = allOrders.find((o) => o.trackingNumber === decodedText);
      if (!order) {
        alert("Commande non trouv\xE9e.");
        return;
      }
      setCheckingInOrder(order);
    }, [allOrders]);
    const handleConfirmCheckIn = (0, import_react60.useCallback)((orderId, location) => {
      handleDepotCheckIn(orderId, location, user);
      setCheckingInOrder(null);
    }, [handleDepotCheckIn, user]);
    const renderContent = () => {
      const depot = allPickupPoints.find((p) => p.id === user.depotId);
      if (!depot) return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("p", { children: "Erreur: D\xE9p\xF4t non trouv\xE9." });
      switch (activeTab) {
        case "overview":
          return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "space-y-6", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(StatCard4, { label: t("depotDashboard.parcelsToAssign"), value: ordersToAssign.length }),
            /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(StatCard4, { label: t("depotDashboard.parcelsInDelivery"), value: ordersInDelivery.length }),
            /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(StatCard4, { label: t("depotDashboard.availableAgents"), value: deliveryAgents.filter((a) => a.availabilityStatus === "available").length })
          ] }) });
        case "parcels":
          return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ParcelsPanel, { ordersToAssign, ordersInDelivery, ordersWithIssues, deliveryAgents, setAssigningOrder });
        case "inventory":
          return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(InventoryPanel, { inventory: depotInventory, depot, recentMovements });
        case "drivers":
          return isManager ? /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(DriversPanel, { deliveryAgents }) : null;
        case "agents":
          return isManager ? /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(AgentsPanel, { agents: [user, ...depotAgents], depot, onSaveSchedule: (depotId, schedule) => onUpdateSchedule(depotId, schedule) }) : null;
        case "sellers":
          return isManager ? /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(SellersPanel, { depotInventory, allStores }) : null;
        case "reports":
          return isManager ? /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ReportsPanel, { depotOrders, deliveryAgents }) : null;
        default:
          return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "text-center py-8 text-gray-500", children: t("superadmin.panelUnderConstruction", activeTab) });
      }
    };
    const TABS = [
      { id: "overview", label: t("depotDashboard.overview"), icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ChartPieIcon, { className: "w-5 h-5" }), managerOnly: false },
      { id: "parcels", label: t("depotDashboard.parcels"), icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ShoppingBagIcon, { className: "w-5 h-5" }), managerOnly: false },
      { id: "inventory", label: t("depotDashboard.inventory"), icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ArchiveBoxIcon, { className: "w-5 h-5" }), managerOnly: false },
      { id: "drivers", label: t("depotDashboard.drivers"), icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(TruckIcon, { className: "w-5 h-5" }), managerOnly: true },
      { id: "agents", label: t("depotDashboard.agents"), icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(UserGroupIcon, { className: "w-5 h-5" }), managerOnly: true },
      { id: "sellers", label: t("depotDashboard.sellers"), icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(BuildingStorefrontIcon, { className: "w-5 h-5" }), managerOnly: true },
      { id: "reports", label: t("depotDashboard.reports"), icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ChartPieIcon, { className: "w-5 h-5" }), managerOnly: true }
    ].filter((tab) => !tab.managerOnly || isManager);
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "bg-gray-100 dark:bg-gray-950 min-h-screen", children: [
      isScannerOpen && /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ScannerModal2, { onClose: () => setIsScannerOpen(false), onScanSuccess: handleScanSuccess, t }),
      checkingInOrder && /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(CheckInModal, { order: checkingInOrder, onClose: () => setCheckingInOrder(null), onConfirm: handleConfirmCheckIn, t }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("header", { className: "bg-white dark:bg-gray-800 shadow-sm sticky top-0 z-20", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "container mx-auto px-4 sm:px-6 py-3", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "flex justify-between items-center flex-wrap gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("h1", { className: "text-xl font-bold text-gray-800 dark:text-white", children: t("depotDashboard.title", zoneName) }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
            isManager ? t("depotDashboard.manager") : "Agent",
            ": ",
            user.name
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "flex items-center gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("button", { onClick: () => setIsScannerOpen(true), className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(QrCodeIcon, { className: "w-5 h-5" }),
            " ",
            t("depotDashboard.scanAndCheckIn")
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("button", { onClick: onLogout, className: "text-sm bg-gray-200 dark:bg-gray-700 font-semibold px-4 py-2 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600", children: t("depotDashboard.logout") })
        ] })
      ] }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("main", { className: "container mx-auto px-4 sm:px-6 py-6", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "p-2 border-b dark:border-gray-700 flex justify-start items-center overflow-x-auto", children: TABS.map((tab) => /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("button", { onClick: () => setActiveTab(tab.id), className: `px-4 py-2 font-semibold flex-shrink-0 flex items-center gap-2 ${activeTab === tab.id ? "border-b-2 border-kmer-green text-kmer-green" : "text-gray-500"}`, children: [
          tab.icon,
          " ",
          tab.label
        ] }, tab.id)) }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "p-4", children: renderContent() })
      ] }) }),
      assigningOrder && /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(AssignModal, { order: assigningOrder, agents: deliveryAgents, onAssign: (orderId, agentId) => {
        onAssignAgentToOrder(orderId, agentId);
        setAssigningOrder(null);
      }, onCancel: () => setAssigningOrder(null) })
    ] });
  };

  // components/BecomePremiumPage.tsx
  var import_jsx_runtime80 = __toESM(require_jsx_runtime());
  var ProgressBar = ({ value, max, label }) => {
    const percentage = Math.min(value / max * 100, 100);
    return /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "flex justify-between items-center mb-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("span", { className: "text-sm font-medium text-gray-700 dark:text-gray-300", children: label }),
        /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("span", { className: "text-sm font-medium text-gray-700 dark:text-gray-300", children: [
          value.toLocaleString("fr-CM"),
          " / ",
          max.toLocaleString("fr-CM")
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("div", { className: "w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("div", { className: "bg-kmer-green h-2.5 rounded-full", style: { width: `${percentage}%` } }) })
    ] });
  };
  var BecomePremiumPage = ({ siteSettings, onBack, onBecomePremiumByCaution, onUpgradeToPremiumPlus }) => {
    const { user } = useAuth();
    if (!user) return null;
    const loyalty = user.loyalty;
    const loyaltySettings = siteSettings.customerLoyaltyProgram;
    const BenefitItem = ({ children }) => /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("li", { className: "flex items-start gap-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(CheckCircleIcon, { className: "w-5 h-5 text-green-500 flex-shrink-0 mt-0.5" }),
      /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("span", { children })
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("div", { className: "bg-gray-50 dark:bg-gray-900 py-12", children: /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "container mx-auto px-4 sm:px-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "text-center max-w-3xl mx-auto", children: [
        /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("h1", { className: "text-4xl font-extrabold text-gray-800 dark:text-white mb-4", children: "D\xE9bloquez des Avantages Exclusifs" }),
        /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("p", { className: "text-lg text-gray-600 dark:text-gray-400", children: "Passez au niveau sup\xE9rieur avec nos statuts Premium et Premium+ pour une exp\xE9rience d'achat in\xE9gal\xE9e." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "max-w-xl mx-auto my-12 p-6 bg-white dark:bg-gray-800 rounded-2xl shadow-lg border dark:border-gray-700", children: [
        /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("h2", { className: "text-xl font-bold mb-4", children: [
          "Votre Statut Actuel : ",
          /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("span", { className: "capitalize text-kmer-green", children: loyalty.status.replace("_", "+") })
        ] }),
        loyalty.status === "standard" && loyaltySettings.isEnabled && /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: "Atteignez le statut Premium en r\xE9alisant l'un des objectifs suivants :" }),
          /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(ProgressBar, { value: loyalty.orderCount, max: loyaltySettings.premium.thresholds.orders, label: "Commandes pass\xE9es" }),
          /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(ProgressBar, { value: loyalty.totalSpent, max: loyaltySettings.premium.thresholds.spending, label: "Total d\xE9pens\xE9 (FCFA)" })
        ] }),
        loyalty.status === "premium" && /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("p", { className: "text-gray-600 dark:text-gray-300", children: "F\xE9licitations ! Vous profitez d\xE9j\xE0 des avantages Premium." }),
        loyalty.status === "premium_plus" && /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("p", { className: "text-gray-600 dark:text-gray-300", children: "Merci d'\xEAtre un membre Premium+ ! Vous b\xE9n\xE9ficiez de nos meilleurs avantages." })
      ] }),
      loyaltySettings.isEnabled && /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-5xl mx-auto", children: [
        /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: `p-8 rounded-2xl shadow-lg flex flex-col ${loyalty.status === "premium" || loyalty.status === "premium_plus" ? "bg-green-50 dark:bg-green-900/20 border-2 border-kmer-green" : "bg-white dark:bg-gray-800"}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "flex items-center gap-3 mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(StarIcon, { className: "w-8 h-8 text-kmer-yellow" }),
            /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("h3", { className: "text-2xl font-bold", children: "Premium" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6 flex-grow", children: "Id\xE9al pour les acheteurs r\xE9guliers qui veulent plus d'avantages." }),
          /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("ul", { className: "space-y-3 mb-8", children: loyaltySettings.premium.benefits.map((b, i) => /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(BenefitItem, { children: b }, i)) }),
          /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "mt-auto", children: [
            loyalty.status === "standard" && /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("button", { onClick: onBecomePremiumByCaution, className: "w-full bg-kmer-yellow text-gray-900 font-bold py-3 rounded-lg hover:bg-yellow-300 transition-colors", children: [
              "Payer la caution pour devenir Premium",
              /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("span", { className: "block text-xs font-normal", children: [
                "Caution de ",
                loyaltySettings.premium.cautionAmount.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] }),
            loyalty.status === "premium" && /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "text-center font-bold text-kmer-green p-3 rounded-lg bg-kmer-green/10", children: [
              /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(CheckCircleIcon, { className: "w-6 h-6 mx-auto mb-2" }),
              "Vous \xEAtes d\xE9j\xE0 Premium"
            ] }),
            loyalty.status === "premium_plus" && /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("div", { className: "text-center font-bold text-gray-500 p-3", children: "Statut d\xE9j\xE0 atteint" })
          ] })
        ] }),
        loyaltySettings.premiumPlus.isEnabled && /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "p-8 rounded-2xl shadow-lg flex flex-col bg-gray-900 text-white border-2 border-kmer-red", children: [
          /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "flex items-center gap-3 mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(StarPlatinumIcon, { className: "w-8 h-8 text-kmer-red" }),
            /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("h3", { className: "text-2xl font-bold", children: "Premium+" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("p", { className: "text-gray-300 mb-6 flex-grow", children: "L'exp\xE9rience ultime pour nos clients les plus fid\xE8les." }),
          /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("ul", { className: "space-y-3 mb-8", children: loyaltySettings.premiumPlus.benefits.map((b, i) => /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(BenefitItem, { children: b }, i)) }),
          /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "mt-auto", children: [
            loyalty.status !== "premium_plus" && /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("button", { onClick: onUpgradeToPremiumPlus, className: "w-full bg-kmer-red text-white font-bold py-3 rounded-lg hover:bg-red-600 transition-colors", children: [
              loyalty.status === "premium" ? "Payer pour passer \xE0 Premium+" : "Payer pour devenir Premium+",
              /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("span", { className: "block text-xs font-normal", children: [
                loyaltySettings.premiumPlus.annualFee.toLocaleString("fr-CM"),
                " FCFA / an"
              ] })
            ] }),
            loyalty.status === "premium_plus" && /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "text-center font-bold text-kmer-red p-3 rounded-lg bg-kmer-red/10", children: [
              /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(CheckCircleIcon, { className: "w-6 h-6 mx-auto mb-2" }),
              "Vous \xEAtes un membre Premium+"
            ] })
          ] })
        ] })
      ] })
    ] }) });
  };
  var BecomePremiumPage_default = BecomePremiumPage;

  // components/NotFoundPage.tsx
  var import_jsx_runtime81 = __toESM(require_jsx_runtime());
  var NotFoundPage = ({ onNavigateHome }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("div", { className: "container mx-auto px-6 py-24 flex justify-center text-center", children: /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)("div", { className: "max-w-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("h1", { className: "text-6xl font-bold text-kmer-green", children: "404" }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("h2", { className: "text-3xl font-bold text-gray-800 dark:text-white mt-4", children: t("notFound.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mt-4", children: t("notFound.description") }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(
        "button",
        {
          onClick: onNavigateHome,
          className: "mt-8 bg-kmer-green text-white font-bold py-3 px-8 rounded-full hover:bg-green-700 transition-colors flex items-center gap-2 mx-auto",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
            t("notFound.backHome")
          ]
        }
      )
    ] }) });
  };
  var NotFoundPage_default = NotFoundPage;

  // components/ForbiddenPage.tsx
  var import_jsx_runtime82 = __toESM(require_jsx_runtime());
  var ForbiddenPage = ({ onNavigateHome }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("div", { className: "container mx-auto px-6 py-24 flex justify-center text-center", children: /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)("div", { className: "max-w-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(ExclamationTriangleIcon, { className: "h-16 w-16 text-red-500 mx-auto mb-6" }),
      /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("h1", { className: "text-6xl font-bold text-red-500", children: "403" }),
      /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("h2", { className: "text-3xl font-bold text-gray-800 dark:text-white mt-4", children: t("forbidden.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mt-4", children: t("forbidden.description") }),
      /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)(
        "button",
        {
          onClick: onNavigateHome,
          className: "mt-8 bg-kmer-green text-white font-bold py-3 px-8 rounded-full hover:bg-green-700 transition-colors flex items-center gap-2 mx-auto",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
            t("forbidden.backHome")
          ]
        }
      )
    ] }) });
  };
  var ForbiddenPage_default = ForbiddenPage;

  // components/ServerErrorPage.tsx
  var import_jsx_runtime83 = __toESM(require_jsx_runtime());
  var ServerErrorPage = ({ onNavigateHome }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("div", { className: "container mx-auto px-6 py-24 flex justify-center text-center", children: /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { className: "max-w-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(Cog8ToothIcon, { className: "h-16 w-16 text-blue-500 mx-auto mb-6 animate-spin" }),
      /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("h1", { className: "text-6xl font-bold text-blue-500", children: "500" }),
      /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("h2", { className: "text-3xl font-bold text-gray-800 dark:text-white mt-4", children: "Erreur Interne" }),
      /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mt-4", children: "Oups ! Quelque chose s'est mal pass\xE9 de notre c\xF4t\xE9. Notre \xE9quipe technique a \xE9t\xE9 notifi\xE9e. Veuillez r\xE9essayer plus tard." }),
      /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(
        "button",
        {
          onClick: onNavigateHome,
          className: "mt-8 bg-kmer-green text-white font-bold py-3 px-8 rounded-full hover:bg-green-700 transition-colors flex items-center gap-2 mx-auto",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
            "Retourner \xE0 l'accueil"
          ]
        }
      )
    ] }) });
  };
  var ServerErrorPage_default = ServerErrorPage;

  // components/ResetPasswordPage.tsx
  var import_react61 = __toESM(require_react());
  var import_jsx_runtime84 = __toESM(require_jsx_runtime());
  var ResetPasswordPage = ({ onPasswordReset, onNavigateLogin }) => {
    const [password, setPassword] = (0, import_react61.useState)("");
    const [confirmPassword, setConfirmPassword] = (0, import_react61.useState)("");
    const [error, setError] = (0, import_react61.useState)("");
    const [success, setSuccess] = (0, import_react61.useState)(false);
    const handleSubmit = (e) => {
      e.preventDefault();
      if (password.length < 6) {
        setError("Le mot de passe doit contenir au moins 6 caract\xE8res.");
        return;
      }
      if (password !== confirmPassword) {
        setError("Les mots de passe ne correspondent pas.");
        return;
      }
      setError("");
      onPasswordReset(password);
      setSuccess(true);
    };
    if (success) {
      return /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "container mx-auto px-6 py-12 flex justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "text-center bg-white dark:bg-gray-800 p-12 rounded-lg shadow-xl max-w-md w-full", children: [
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(CheckCircleIcon, { className: "w-16 h-16 text-kmer-green mx-auto mb-6" }),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("h1", { className: "text-2xl font-bold text-gray-800 dark:text-white mb-4", children: "Mot de passe r\xE9initialis\xE9 !" }),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-8", children: "Vous pouvez maintenant vous connecter avec votre nouveau mot de passe." }),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
          "button",
          {
            onClick: onNavigateLogin,
            className: "w-full bg-kmer-green text-white font-bold py-3 px-6 rounded-full hover:bg-green-700 transition-colors",
            children: "Se connecter"
          }
        )
      ] }) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "container mx-auto px-6 py-12 flex justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "max-w-md w-full", children: /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("form", { onSubmit: handleSubmit, className: "bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("h1", { className: "text-2xl font-bold text-gray-800 dark:text-white mb-6 text-center", children: "R\xE9initialiser votre mot de passe" }),
      error && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("p", { className: "text-red-500 text-sm text-center mb-4 bg-red-100 dark:bg-red-900/50 p-3 rounded-md", children: error }),
      /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "new-password", children: "Nouveau mot de passe" }),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
          "input",
          {
            className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-kmer-green",
            id: "new-password",
            type: "password",
            placeholder: "******************",
            value: password,
            onChange: (e) => setPassword(e.target.value),
            required: true
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "mb-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "confirm-password", children: "Confirmer le mot de passe" }),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
          "input",
          {
            className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-kmer-green",
            id: "confirm-password",
            type: "password",
            placeholder: "******************",
            value: confirmPassword,
            onChange: (e) => setConfirmPassword(e.target.value),
            required: true
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
        "button",
        {
          className: "w-full bg-kmer-green text-white font-bold py-2 px-4 rounded-full hover:bg-green-700 transition-colors",
          type: "submit",
          children: "D\xE9finir le nouveau mot de passe"
        }
      )
    ] }) }) });
  };
  var ResetPasswordPage_default = ResetPasswordPage;

  // components/AccountPage.tsx
  var import_react62 = __toESM(require_react());
  var import_jsx_runtime85 = __toESM(require_jsx_runtime());
  var TabButton3 = ({ icon, active, onClick, children }) => /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)(
    "button",
    {
      onClick,
      className: `flex items-center gap-3 px-4 py-3 text-sm font-semibold text-left w-full rounded-md transition-colors ${active ? "bg-kmer-green/10 text-kmer-green dark:bg-kmer-green/20" : "text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700/50"}`,
      children: [
        icon,
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("span", { className: "flex-grow", children })
      ]
    }
  );
  var Section = ({ title, children, className = "" }) => /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className, children: [
    /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("h2", { className: "text-2xl font-bold mb-6 text-gray-800 dark:text-white", children: title }),
    children
  ] });
  var DashboardTab = ({ user, userOrders, allStores, onTabChange, onSelectOrder }) => {
    const lastOrder = userOrders.length > 0 ? userOrders.sort((a, b) => new Date(b.orderDate).getTime() - new Date(a.orderDate).getTime())[0] : null;
    const followedStores = allStores.filter((s) => user.followedStores?.includes(s.id));
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(Section, { title: `Bienvenue, ${user.name} !`, children: /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "p-6 bg-gray-50 dark:bg-gray-700/50 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("h3", { className: "font-bold text-lg mb-2", children: "Statut de Fid\xE9lit\xE9" }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "flex items-center gap-2", children: [
          user.loyalty.status === "premium" && /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(StarIcon, { className: "w-6 h-6 text-kmer-yellow" }),
          user.loyalty.status === "premium_plus" && /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(StarPlatinumIcon, { className: "w-6 h-6 text-kmer-red" }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("p", { children: [
            "Vous \xEAtes un membre ",
            /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("span", { className: "font-bold text-kmer-green capitalize", children: user.loyalty.status.replace("_", "+") }),
            "."
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("p", { className: "text-sm text-gray-500 mt-2", children: [
          "Total commandes : ",
          user.loyalty.orderCount
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "p-6 bg-gray-50 dark:bg-gray-700/50 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("h3", { className: "font-bold text-lg mb-2", children: "Derni\xE8re commande" }),
        lastOrder ? /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)(import_jsx_runtime85.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("p", { children: [
            "ID: ",
            /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("span", { className: "font-mono text-sm", children: lastOrder.id })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("p", { children: [
            "Statut: ",
            lastOrder.status
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { onClick: () => onSelectOrder(lastOrder), className: "text-sm text-kmer-green font-semibold mt-2", children: "Voir les d\xE9tails" })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("p", { children: "Aucune commande r\xE9cente." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "md:col-span-2 p-6 bg-gray-50 dark:bg-gray-700/50 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("h3", { className: "font-bold text-lg mb-4", children: "Boutiques Suivies" }),
        followedStores.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: "flex flex-wrap gap-4", children: followedStores.slice(0, 5).map((s) => /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "text-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("img", { src: s.logoUrl, alt: s.name, className: "w-16 h-16 rounded-full object-contain bg-white shadow-md" }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("p", { className: "text-xs mt-1 w-16 truncate", children: s.name })
        ] }, s.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("p", { children: "Vous ne suivez aucune boutique." }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { onClick: () => onTabChange("followed-stores"), className: "text-sm text-kmer-green font-semibold mt-4", children: "G\xE9rer mes boutiques" })
      ] })
    ] }) });
  };
  var ProfileTab = ({ user, onUpdate }) => {
    const [isEditing, setIsEditing] = (0, import_react62.useState)(false);
    const [formData, setFormData] = (0, import_react62.useState)(user);
    const [avatarPreview, setAvatarPreview] = (0, import_react62.useState)(user.profilePictureUrl);
    (0, import_react62.useEffect)(() => {
      setFormData(user);
      setAvatarPreview(user.profilePictureUrl);
    }, [user]);
    const handleChange = (e) => {
      setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
    };
    const handleAvatarChange = (e) => {
      if (e.target.files && e.target.files[0]) {
        const reader = new FileReader();
        reader.onloadend = () => {
          const result = reader.result;
          setAvatarPreview(result);
          setFormData((prev) => ({ ...prev, profilePictureUrl: result }));
        };
        reader.readAsDataURL(e.target.files[0]);
      }
    };
    const handleSave = () => {
      onUpdate(formData);
      setIsEditing(false);
    };
    const handleCancel = () => {
      setFormData(user);
      setAvatarPreview(user.profilePictureUrl);
      setIsEditing(false);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)(Section, { title: "Mon Profil", children: [
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "flex items-center gap-6 mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("img", { src: avatarPreview || `https://ui-avatars.com/api/?name=${user.name}&background=008000&color=fff`, alt: "Avatar", className: "w-24 h-24 rounded-full object-cover" }),
          isEditing && /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("label", { htmlFor: "avatar-upload", className: "absolute -bottom-1 -right-1 bg-white dark:bg-gray-600 p-1.5 rounded-full cursor-pointer shadow-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(PencilSquareIcon, { className: "w-5 h-5" }),
            /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("input", { id: "avatar-upload", type: "file", className: "sr-only", onChange: handleAvatarChange, accept: "image/*" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("h3", { className: "text-xl font-bold", children: user.name }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("p", { className: "text-gray-500", children: user.email })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: "space-y-4", children: /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("label", { className: "text-sm font-medium text-gray-500", children: "Nom complet" }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("input", { type: "text", name: "name", value: formData.name || "", onChange: handleChange, disabled: !isEditing, className: "w-full p-2 mt-1 border rounded-md disabled:bg-gray-100 dark:disabled:bg-gray-700 dark:bg-gray-600" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("label", { className: "text-sm font-medium text-gray-500", children: "T\xE9l\xE9phone principal" }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("input", { type: "tel", name: "phone", value: formData.phone || "", onChange: handleChange, disabled: !isEditing, className: "w-full p-2 mt-1 border rounded-md disabled:bg-gray-100 dark:disabled:bg-gray-700 dark:bg-gray-600" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("label", { className: "text-sm font-medium text-gray-500", children: "Date de naissance" }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("input", { type: "date", name: "birthDate", value: formData.birthDate?.split("T")[0] || "", onChange: handleChange, disabled: !isEditing, className: "w-full p-2 mt-1 border rounded-md disabled:bg-gray-100 dark:disabled:bg-gray-700 dark:bg-gray-600" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("label", { className: "text-sm font-medium text-gray-500", children: "Genre" }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("select", { name: "gender", value: formData.gender, onChange: handleChange, disabled: !isEditing, className: "w-full p-2 mt-1 border rounded-md disabled:bg-gray-100 dark:disabled:bg-gray-700 dark:bg-gray-600", children: [
            /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("option", { children: "Pr\xE9f\xE8re ne pas r\xE9pondre" }),
            /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("option", { children: "Homme" }),
            /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("option", { children: "Femme" }),
            /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("option", { children: "Autre" })
          ] })
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: "mt-8 flex gap-4", children: isEditing ? /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)(import_jsx_runtime85.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { onClick: handleSave, className: "bg-kmer-green text-white font-bold py-2 px-6 rounded-lg", children: "Enregistrer" }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { onClick: handleCancel, className: "bg-gray-200 dark:bg-gray-600 font-bold py-2 px-6 rounded-lg", children: "Annuler" })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { onClick: () => setIsEditing(true), className: "bg-kmer-green text-white font-bold py-2 px-6 rounded-lg", children: "Modifier le profil" }) })
    ] });
  };
  var AddressesTab = () => {
    const { user, addAddress, updateAddress, deleteAddress, setDefaultAddress } = useAuth();
    const [isFormOpen, setIsFormOpen] = (0, import_react62.useState)(false);
    const [editingAddress, setEditingAddress] = (0, import_react62.useState)(null);
    const handleEdit = (address) => {
      setEditingAddress(address);
      setIsFormOpen(true);
    };
    const handleAddNew = () => {
      setEditingAddress(null);
      setIsFormOpen(true);
    };
    const handleSave = (address) => {
      if (!user) return;
      if (editingAddress) {
        updateAddress(user.id, address);
      } else {
        addAddress(user.id, address);
      }
      setIsFormOpen(false);
    };
    if (!user) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(Section, { title: "Mes Adresses", children: isFormOpen ? /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(
      AddressForm2,
      {
        address: editingAddress,
        onSave: handleSave,
        onCancel: () => setIsFormOpen(false)
      }
    ) : /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "space-y-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("button", { onClick: handleAddNew, className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(PlusIcon, { className: "w-5 h-5" }),
        " Ajouter une nouvelle adresse"
      ] }),
      user.addresses && user.addresses.map((addr) => /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: `p-4 border rounded-lg ${addr.isDefault ? "border-kmer-green bg-green-50 dark:bg-green-900/20" : "dark:border-gray-700"}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "flex justify-between items-start", children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("p", { className: "font-bold text-lg", children: addr.label }),
            /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("address", { className: "not-italic text-gray-600 dark:text-gray-300", children: [
              addr.fullName,
              /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("br", {}),
              addr.address,
              ", ",
              addr.city,
              /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("br", {}),
              addr.phone
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "flex gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { onClick: () => handleEdit(addr), children: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(PencilSquareIcon, { className: "w-5 h-5 text-gray-500 hover:text-blue-500" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { onClick: () => deleteAddress(user.id, addr.id), children: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(TrashIcon, { className: "w-5 h-5 text-gray-500 hover:text-red-500" }) })
          ] })
        ] }),
        !addr.isDefault && /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { onClick: () => setDefaultAddress(user.id, addr.id), className: "text-sm font-semibold text-kmer-green mt-2", children: "D\xE9finir par d\xE9faut" })
      ] }, addr.id))
    ] }) });
  };
  var AddressForm2 = ({ address, onSave, onCancel }) => {
    const { user } = useAuth();
    const [formData, setFormData] = (0, import_react62.useState)({
      id: address?.id || void 0,
      isDefault: address?.isDefault || false,
      label: address?.label || "Maison",
      fullName: address?.fullName || user?.name || "",
      phone: address?.phone || user?.phone || "",
      address: address?.address || "",
      city: address?.city || "Douala",
      latitude: address?.latitude,
      longitude: address?.longitude
    });
    const mapContainerRef = (0, import_react62.useRef)(null);
    const mapRef = (0, import_react62.useRef)(null);
    const markerRef = (0, import_react62.useRef)(null);
    (0, import_react62.useEffect)(() => {
      const initialLatLng = [formData.latitude || 4.05, formData.longitude || 9.75];
      if (mapContainerRef.current && !mapRef.current && typeof L !== "undefined") {
        mapRef.current = L.map(mapContainerRef.current).setView(initialLatLng, 13);
        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(mapRef.current);
        const updateMarker = (latlng) => {
          setFormData((prev) => ({ ...prev, latitude: latlng.lat, longitude: latlng.lng }));
          if (!markerRef.current) {
            markerRef.current = L.marker(latlng, { draggable: true }).addTo(mapRef.current);
            markerRef.current.on("dragend", (e) => updateMarker(e.target.getLatLng()));
          } else {
            markerRef.current.setLatLng(latlng);
          }
        };
        if (formData.latitude && formData.longitude) {
          updateMarker({ lat: formData.latitude, lng: formData.longitude });
        }
        mapRef.current.on("click", (e) => updateMarker(e.latlng));
      }
      setTimeout(() => mapRef.current?.invalidateSize(), 100);
    }, []);
    const handleChange = (e) => {
      setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onSave(formData);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("input", { name: "fullName", value: formData.fullName, onChange: handleChange, placeholder: "Nom complet", className: "w-full p-2 border rounded-md", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("input", { name: "phone", value: formData.phone, onChange: handleChange, placeholder: "T\xE9l\xE9phone", className: "w-full p-2 border rounded-md", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("input", { name: "label", value: formData.label, onChange: handleChange, placeholder: "\xC9tiquette (Maison, Bureau...)", className: "w-full p-2 border rounded-md" }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("select", { name: "city", value: formData.city, onChange: handleChange, className: "w-full p-2 border rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("option", { children: "Douala" }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("option", { children: "Yaound\xE9" }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("option", { children: "Bafoussam" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("textarea", { name: "address", value: formData.address, onChange: handleChange, placeholder: "Adresse (Rue, quartier, rep\xE8re...)", rows: 2, className: "w-full p-2 border rounded-md md:col-span-2", required: true })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("label", { className: "text-sm font-medium", children: "Position sur la carte" }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { ref: mapContainerRef, className: "h-64 w-full mt-2 rounded-md z-0" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "flex justify-end gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { type: "button", onClick: onCancel, className: "bg-gray-200 font-bold py-2 px-4 rounded-lg", children: "Annuler" }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { type: "submit", className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg", children: "Enregistrer" })
      ] })
    ] });
  };
  var OrdersTab = ({ userOrders, onSelectOrder, onRepeatOrder }) => /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(Section, { title: "Mes Commandes", children: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(OrderHistoryPage_default, { userOrders, onBack: () => {
  }, onSelectOrder, onRepeatOrder }) });
  var FollowedStoresTab = ({ allStores, onVendorClick }) => {
    const { user } = useAuth();
    const followedStores = allStores.filter((s) => user?.followedStores?.includes(s.id));
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(Section, { title: "Boutiques Suivies", children: followedStores.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: "grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4", children: followedStores.map((s) => /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(StoreCard_default, { store: s, onVisitStore: onVendorClick }, s.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("p", { children: "Vous ne suivez aucune boutique pour le moment." }) });
  };
  var SupportTab = (props) => {
    const { userTickets, userOrders, onCreateTicket, onUserReplyToTicket } = props;
    const [selectedTicket, setSelectedTicket] = (0, import_react62.useState)(null);
    const [isCreating, setIsCreating] = (0, import_react62.useState)(false);
    if (isCreating) {
      return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(NewTicketForm, { userOrders, onCreate: onCreateTicket, onCancel: () => setIsCreating(false) });
    }
    if (selectedTicket) {
      return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(TicketDetailView, { ticket: selectedTicket, onReply: onUserReplyToTicket, onBack: () => setSelectedTicket(null) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)(Section, { title: "Support Client", children: [
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { onClick: () => setIsCreating(true), className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg mb-4", children: "Cr\xE9er un nouveau ticket" }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: "space-y-2", children: userTickets.map((ticket) => /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("button", { onClick: () => setSelectedTicket(ticket), className: "w-full text-left p-3 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700/50 flex justify-between items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("p", { className: "font-semibold", children: [
            ticket.subject,
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("span", { className: "font-normal text-sm text-gray-500", children: [
              "- ",
              ticket.userName
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("p", { className: "text-xs text-gray-500", children: [
            "Derni\xE8re mise \xE0 jour: ",
            new Date(ticket.updatedAt).toLocaleDateString()
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("span", { className: `px-2 py-1 text-xs font-semibold rounded-full ${ticket.status === "R\xE9solu" ? "bg-green-200 text-green-800" : "bg-yellow-200 text-yellow-800"}`, children: ticket.status })
      ] }, ticket.id)) })
    ] });
  };
  var NewTicketForm = ({ userOrders, onCreate, onCancel }) => {
    const [subject, setSubject] = (0, import_react62.useState)("");
    const [message, setMessage] = (0, import_react62.useState)("");
    const [orderId, setOrderId] = (0, import_react62.useState)("");
    const [attachments, setAttachments] = (0, import_react62.useState)([]);
    const handleFileChange = (e) => {
      if (e.target.files) {
        const files = Array.from(e.target.files);
        files.forEach((file) => {
          const reader = new FileReader();
          reader.onloadend = () => setAttachments((prev) => [...prev, reader.result]);
          reader.readAsDataURL(file);
        });
      }
    };
    const removeAttachment = (index) => {
      setAttachments((prev) => prev.filter((_, i) => i !== index));
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onCreate(subject, message, orderId, "support", attachments);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(Section, { title: "Cr\xE9er un ticket", children: /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("input", { type: "text", value: subject, onChange: (e) => setSubject(e.target.value), placeholder: "Sujet", className: "w-full p-2 border rounded-md", required: true }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("select", { value: orderId, onChange: (e) => setOrderId(e.target.value), className: "w-full p-2 border rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("option", { value: "", children: "(Optionnel) Lier \xE0 une commande" }),
        userOrders.map((o) => /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("option", { value: o.id, children: o.id }, o.id))
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("textarea", { value: message, onChange: (e) => setMessage(e.target.value), placeholder: "D\xE9crivez votre probl\xE8me...", rows: 5, className: "w-full p-2 border rounded-md", required: true }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("label", { htmlFor: "attachments-upload-new", className: "cursor-pointer text-sm font-semibold text-blue-500 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(PaperclipIcon, { className: "w-4 h-4" }),
          " Joindre des fichiers"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("input", { id: "attachments-upload-new", type: "file", multiple: true, onChange: handleFileChange, className: "hidden" }),
        attachments.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(AttachmentPreview, { attachments, onRemove: removeAttachment })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "flex gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { type: "button", onClick: onCancel, className: "bg-gray-200 font-bold py-2 px-4 rounded-lg", children: "Annuler" }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { type: "submit", className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg", children: "Envoyer" })
      ] })
    ] }) });
  };
  var AttachmentPreview = ({ attachments, onRemove }) => /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: "mt-2 grid grid-cols-3 sm:grid-cols-5 gap-2", children: attachments.map((url, i) => /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "relative group", children: [
    /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("img", { src: url, alt: `Aper\xE7u ${i}`, className: "h-20 w-full object-cover rounded-md" }),
    /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { type: "button", onClick: () => onRemove(i), className: "absolute -top-1 -right-1 bg-red-500 text-white rounded-full p-0.5 opacity-0 group-hover:opacity-100 transition-opacity", children: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(TrashIcon, { className: "w-4 h-4" }) })
  ] }, i)) });
  var MessageAttachments = ({ urls }) => /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: "mt-2 flex flex-wrap gap-2", children: urls.map((url, i) => {
    const isImage = /\.(jpeg|jpg|gif|png|webp)$/i.test(url) || url.startsWith("data:image");
    if (isImage) {
      return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("a", { href: url, target: "_blank", rel: "noopener noreferrer", className: "block", children: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("img", { src: url, alt: `Pi\xE8ce jointe ${i + 1}`, className: "h-24 w-auto rounded-md object-contain border dark:border-gray-600" }) }, i);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("a", { href: url, target: "_blank", rel: "noopener noreferrer", className: "text-blue-500 underline text-sm flex items-center gap-1 p-2 bg-blue-50 dark:bg-blue-900/50 rounded-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(PaperclipIcon, { className: "w-4 h-4" }),
      "Pi\xE8ce jointe ",
      i + 1
    ] }, i);
  }) });
  var TicketDetailView = ({ ticket, onReply, onBack }) => {
    const [reply, setReply] = (0, import_react62.useState)("");
    const [attachments, setAttachments] = (0, import_react62.useState)([]);
    const { user } = useAuth();
    const handleFileChange = (e) => {
      if (e.target.files) {
        const files = Array.from(e.target.files);
        files.forEach((file) => {
          const reader = new FileReader();
          reader.onloadend = () => setAttachments((prev) => [...prev, reader.result]);
          reader.readAsDataURL(file);
        });
      }
    };
    const removeAttachment = (index) => {
      setAttachments((prev) => prev.filter((_, i) => i !== index));
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onReply(ticket.id, reply, attachments);
      setReply("");
      setAttachments([]);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)(Section, { title: ticket.subject, children: [
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { onClick: onBack, className: "text-sm font-semibold text-kmer-green mb-4", children: " < Retour \xE0 la liste" }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: "border rounded-lg p-4 h-96 overflow-y-auto bg-gray-50 mb-4 space-y-4", children: ticket.messages.map((msg, i) => {
        const isMe = msg.authorId === user?.id;
        return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: `flex ${isMe ? "justify-end" : "justify-start"}`, children: /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: `p-3 rounded-lg max-w-sm ${isMe ? "bg-kmer-green text-white" : "bg-white"}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("p", { className: "font-bold text-sm", children: msg.authorName }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("p", { className: "whitespace-pre-wrap", children: msg.message }),
          msg.attachmentUrls && /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(MessageAttachments, { urls: msg.attachmentUrls })
        ] }) }, i);
      }) }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("form", { onSubmit: handleSubmit, children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("textarea", { value: reply, onChange: (e) => setReply(e.target.value), rows: 3, placeholder: "Votre r\xE9ponse...", className: "w-full p-2 border rounded-md" }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "mt-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("label", { htmlFor: "attachments-upload-reply", className: "cursor-pointer text-sm font-semibold text-blue-500 flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(PaperclipIcon, { className: "w-4 h-4" }),
            " Joindre des fichiers"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("input", { id: "attachments-upload-reply", type: "file", multiple: true, onChange: handleFileChange, className: "hidden" }),
          attachments.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(AttachmentPreview, { attachments, onRemove: removeAttachment })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { type: "submit", className: "mt-2 bg-kmer-green text-white font-bold py-2 px-4 rounded-lg", children: "Envoyer" })
      ] })
    ] });
  };
  var NotificationsTab = () => {
    const { user, updateUserInfo } = useAuth();
    const [prefs, setPrefs] = (0, import_react62.useState)(user?.notificationPreferences || { promotions: true, orderUpdates: true, newsletters: true });
    const handleChange = (e) => {
      const { name, checked } = e.target;
      setPrefs((p) => ({ ...p, [name]: checked }));
    };
    const handleSave = () => {
      if (user) {
        updateUserInfo(user.id, { notificationPreferences: prefs });
        alert("Pr\xE9f\xE9rences sauvegard\xE9es !");
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)(Section, { title: "Notifications", children: [
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("label", { className: "flex items-center gap-3 p-4 border rounded-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("input", { type: "checkbox", name: "orderUpdates", checked: prefs.orderUpdates, onChange: handleChange, className: "h-5 w-5 rounded" }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("span", { children: "Mises \xE0 jour de mes commandes" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("label", { className: "flex items-center gap-3 p-4 border rounded-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("input", { type: "checkbox", name: "promotions", checked: prefs.promotions, onChange: handleChange, className: "h-5 w-5 rounded" }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("span", { children: "Promotions et ventes flash" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("label", { className: "flex items-center gap-3 p-4 border rounded-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("input", { type: "checkbox", name: "newsletters", checked: prefs.newsletters, onChange: handleChange, className: "h-5 w-5 rounded" }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("span", { children: "Newsletters de KMER ZONE" })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { onClick: handleSave, className: "mt-6 bg-kmer-green text-white font-bold py-2 px-4 rounded-lg", children: "Enregistrer les pr\xE9f\xE9rences" })
    ] });
  };
  var SecurityTab = () => {
    const { user, changePassword } = useAuth();
    const [oldPassword, setOldPassword] = (0, import_react62.useState)("");
    const [newPassword, setNewPassword] = (0, import_react62.useState)("");
    const [confirmPassword, setConfirmPassword] = (0, import_react62.useState)("");
    const [message, setMessage] = (0, import_react62.useState)(null);
    const handleSubmit = (e) => {
      e.preventDefault();
      setMessage(null);
      if (newPassword !== confirmPassword) {
        setMessage({ type: "error", text: "Les nouveaux mots de passe ne correspondent pas." });
        return;
      }
      if (user && changePassword(user.id, oldPassword, newPassword)) {
        setMessage({ type: "success", text: "Mot de passe mis \xE0 jour avec succ\xE8s !" });
        setOldPassword("");
        setNewPassword("");
        setConfirmPassword("");
      } else {
        setMessage({ type: "error", text: "L'ancien mot de passe est incorrect." });
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(Section, { title: "S\xE9curit\xE9", children: /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-4 max-w-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("h3", { className: "font-semibold text-lg", children: "Changer mon mot de passe" }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("input", { type: "password", value: oldPassword, onChange: (e) => setOldPassword(e.target.value), placeholder: "Ancien mot de passe", className: "w-full p-2 border rounded-md", required: true }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("input", { type: "password", value: newPassword, onChange: (e) => setNewPassword(e.target.value), placeholder: "Nouveau mot de passe", className: "w-full p-2 border rounded-md", required: true }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("input", { type: "password", value: confirmPassword, onChange: (e) => setConfirmPassword(e.target.value), placeholder: "Confirmer le nouveau mot de passe", className: "w-full p-2 border rounded-md", required: true }),
      message && /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("p", { className: `text-sm ${message.type === "success" ? "text-green-600" : "text-red-600"}`, children: message.text }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { type: "submit", className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg", children: "Mettre \xE0 jour" })
    ] }) });
  };
  var AccountPage = (props) => {
    const { onBack, initialTab = "dashboard", allStores, userOrders, allTickets, onVendorClick, onCreateTicket, onUserReplyToTicket, onSelectOrder, onRepeatOrder } = props;
    const [activeTab, setActiveTab] = (0, import_react62.useState)(initialTab);
    const { user, updateUserInfo } = useAuth();
    if (!user) {
      return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { children: "Veuillez vous connecter pour voir cette page." });
    }
    const userTickets = allTickets.filter((t) => t.userId === user.id);
    const handleUpdateProfile = (updates) => {
      updateUserInfo(user.id, updates);
    };
    const TABS = [
      { id: "dashboard", label: "Tableau de bord", icon: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(ChartPieIcon, { className: "w-5 h-5" }) },
      { id: "profile", label: "Mon Profil", icon: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(UserCircleIcon, { className: "w-5 h-5" }) },
      { id: "addresses", label: "Mes Adresses", icon: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(MapPinIcon, { className: "w-5 h-5" }) },
      { id: "orders", label: "Mes Commandes", icon: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(ClipboardDocumentListIcon, { className: "w-5 h-5" }) },
      { id: "followed-stores", label: "Boutiques Suivies", icon: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(HeartIcon, { className: "w-5 h-5" }) },
      { id: "support", label: "Support Client", icon: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(ChatBubbleBottomCenterTextIcon, { className: "w-5 h-5" }) },
      { id: "notifications", label: "Notifications", icon: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(BellSnoozeIcon, { className: "w-5 h-5" }) },
      { id: "security", label: "S\xE9curit\xE9", icon: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(LockClosedIcon, { className: "w-5 h-5" }) }
    ];
    const renderContent = () => {
      switch (activeTab) {
        case "dashboard":
          return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(DashboardTab, { user, userOrders, allStores, onTabChange: setActiveTab, onSelectOrder });
        case "profile":
          return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(ProfileTab, { user, onUpdate: handleUpdateProfile });
        case "addresses":
          return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(AddressesTab, {});
        case "orders":
          return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(OrdersTab, { userOrders, onSelectOrder, onRepeatOrder });
        case "followed-stores":
          return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(FollowedStoresTab, { allStores, onVendorClick });
        case "support":
          return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(SupportTab, { userTickets, userOrders, onCreateTicket, onUserReplyToTicket });
        case "notifications":
          return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(NotificationsTab, {});
        case "security":
          return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(SecurityTab, {});
        default:
          return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(DashboardTab, { user, userOrders, allStores, onTabChange: setActiveTab, onSelectOrder });
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "md:flex md:gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("aside", { className: "md:w-1/4 lg:w-1/5 flex-shrink-0 mb-8 md:mb-0", children: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: "p-2 bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-lg space-y-1", children: TABS.map((tab) => /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(TabButton3, { icon: tab.icon, active: activeTab === tab.id, onClick: () => setActiveTab(tab.id), children: tab.label }, tab.id)) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("main", { className: "flex-grow p-4 sm:p-6 lg:p-8 border dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800", children: renderContent() })
      ] })
    ] });
  };
  var AccountPage_default = AccountPage;

  // components/VisualSearchPage.tsx
  var import_react63 = __toESM(require_react());
  var import_jsx_runtime86 = __toESM(require_jsx_runtime());
  var VisualSearchPage = ({ onSearch }) => {
    const [image, setImage] = (0, import_react63.useState)(null);
    const [imagePreview, setImagePreview] = (0, import_react63.useState)(null);
    const [isLoading, setIsLoading] = (0, import_react63.useState)(false);
    const [error, setError] = (0, import_react63.useState)(null);
    const ai = (0, import_react63.useMemo)(() => {
      return new GoogleGenAI({ apiKey: "undefined" });
    }, []);
    const handleFileChange = (e) => {
      const file = e.target.files?.[0];
      if (file) {
        setImage(file);
        const reader = new FileReader();
        reader.onloadend = () => {
          setImagePreview(reader.result);
        };
        reader.readAsDataURL(file);
        setError(null);
      }
    };
    const fileToGenerativePart = async (file) => {
      const base64EncodedDataPromise = new Promise((resolve) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result.split(",")[1]);
        reader.readAsDataURL(file);
      });
      return {
        inlineData: { data: await base64EncodedDataPromise, mimeType: file.type }
      };
    };
    const handleSearchClick = async () => {
      if (!image) {
        setError("Veuillez d'abord s\xE9lectionner une image.");
        return;
      }
      setIsLoading(true);
      setError(null);
      try {
        const imagePart = await fileToGenerativePart(image);
        const prompt2 = "D\xE9cris cet objet en 3 \xE0 5 mots-cl\xE9s pertinents pour une recherche e-commerce. S\xE9pare les mots-cl\xE9s par des virgules. Ne retourne que les mots-cl\xE9s. Exemple : robe, pagne, \xE9l\xE9gante, soir\xE9e, coton";
        const response = await ai.models.generateContent({
          model: "gemini-2.5-flash",
          contents: { parts: [imagePart, { text: prompt2 }] }
        });
        const keywords = response.text.trim();
        if (keywords) {
          onSearch(keywords);
        } else {
          setError("L'IA n'a pas pu identifier d'objets dans l'image. Essayez une autre photo.");
        }
      } catch (err) {
        console.error("Gemini API error:", err);
        setError("Une erreur est survenue lors de l'analyse de l'image. Veuillez r\xE9essayer.");
      } finally {
        setIsLoading(false);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("div", { className: "container mx-auto px-4 sm:px-6 py-12 flex justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { className: "max-w-2xl w-full bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(PhotoIcon, { className: "w-16 h-16 mx-auto text-kmer-green mb-4" }),
      /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: "Recherche Visuelle" }),
      /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mt-2", children: "Trouvez des produits similaires \xE0 partir d'une image." }),
      /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("div", { className: "mt-8", children: /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("label", { htmlFor: "image-upload", className: "cursor-pointer", children: [
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("div", { className: "w-full min-h-[200px] border-2 border-dashed rounded-lg flex flex-col items-center justify-center p-6 hover:bg-gray-50 dark:hover:bg-gray-700/50", children: imagePreview ? /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("img", { src: imagePreview, alt: "Aper\xE7u", className: "max-h-48 rounded-md" }),
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
            "button",
            {
              onClick: (e) => {
                e.preventDefault();
                setImage(null);
                setImagePreview(null);
              },
              className: "absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 shadow-lg",
              children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(XIcon, { className: "w-4 h-4" })
            }
          )
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(import_jsx_runtime86.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(PhotoIcon, { className: "w-12 h-12 text-gray-400" }),
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("p", { className: "mt-2 text-sm text-gray-500 dark:text-gray-400", children: "Cliquez pour t\xE9l\xE9verser une image" }),
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("p", { className: "text-xs text-gray-400", children: "PNG, JPG, WEBP" })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("input", { id: "image-upload", type: "file", className: "sr-only", accept: "image/*", onChange: handleFileChange })
      ] }) }),
      error && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("p", { className: "mt-4 text-red-500", children: error }),
      /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
        "button",
        {
          onClick: handleSearchClick,
          disabled: !image || isLoading,
          className: "mt-6 w-full bg-kmer-green text-white font-bold py-3 px-6 rounded-lg flex items-center justify-center gap-3 hover:bg-green-700 transition-colors disabled:bg-gray-400 dark:disabled:bg-gray-600 disabled:cursor-wait",
          children: isLoading ? /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(import_jsx_runtime86.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("svg", { className: "animate-spin -ml-1 mr-3 h-5 w-5 text-white", xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", children: [
              /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("circle", { className: "opacity-25", cx: "12", cy: "12", r: "10", stroke: "currentColor", strokeWidth: "4" }),
              /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("path", { className: "opacity-75", fill: "currentColor", d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" })
            ] }),
            "Analyse en cours..."
          ] }) : /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(import_jsx_runtime86.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(SparklesIcon, { className: "w-6 h-6" }),
            "Rechercher avec l'IA"
          ] })
        }
      )
    ] }) });
  };
  var VisualSearchPage_default = VisualSearchPage;

  // components/SellerSubscriptionPage.tsx
  var import_jsx_runtime87 = __toESM(require_jsx_runtime());
  var PlanCard2 = ({ title, description, price, icon, features, onSelect, isFeatured }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)("div", { className: `p-8 rounded-2xl shadow-lg flex flex-col border-2 ${isFeatured ? "bg-kmer-green/5 dark:bg-kmer-green/10 border-kmer-green" : "bg-white dark:bg-gray-800 dark:border-gray-700"}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)("div", { className: "flex items-center gap-3 mb-4", children: [
        icon,
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("h3", { className: "text-2xl font-bold", children: title })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6 flex-grow", children: description }),
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("p", { className: "text-4xl font-extrabold mb-6", children: price }),
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("ul", { className: "space-y-3 mb-8", children: features.map((feature, index) => /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)("li", { className: "flex items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(CheckCircleIcon, { className: "w-5 h-5 text-green-500 flex-shrink-0 mt-0.5" }),
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("span", { children: feature })
      ] }, index)) }),
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("button", { onClick: onSelect, className: `w-full font-bold py-3 mt-auto rounded-lg transition-colors ${isFeatured ? "bg-kmer-green text-white hover:bg-green-700" : "bg-gray-200 dark:bg-gray-600 hover:bg-gray-300"}`, children: t("sellerSubscription.selectPlan") })
    ] });
  };
  var SellerSubscriptionPage = ({ siteSettings, onSelectSubscription }) => {
    const { t } = useLanguage();
    const plans = [
      {
        title: t("sellerSubscription.standardTitle"),
        description: t("sellerSubscription.standardDescription"),
        price: `${siteSettings.standardPlan.price.toLocaleString("fr-CM")} FCFA / ${siteSettings.standardPlan.durationDays} jrs`,
        icon: /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(BuildingStorefrontIcon, { className: "w-8 h-8 text-gray-500" }),
        features: t("sellerSubscription.standardFeatures", siteSettings.standardPlan.productLimit, siteSettings.standardPlan.commissionRate).split("|"),
        onSelect: () => onSelectSubscription("standard"),
        isFeatured: false
      },
      {
        title: t("sellerSubscription.premiumTitle"),
        description: t("sellerSubscription.premiumDescription"),
        price: `${siteSettings.premiumPlan.price.toLocaleString("fr-CM")} FCFA / ${siteSettings.premiumPlan.durationDays} jrs`,
        icon: /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(StarIcon, { className: "w-8 h-8 text-kmer-yellow" }),
        features: t("sellerSubscription.premiumFeatures", siteSettings.premiumPlan.productLimit, siteSettings.premiumPlan.commissionRate).split("|"),
        onSelect: () => onSelectSubscription("premium"),
        isFeatured: true
      },
      {
        title: t("sellerSubscription.superPremiumTitle"),
        description: t("sellerSubscription.superPremiumDescription"),
        price: `${siteSettings.superPremiumPlan.price.toLocaleString("fr-CM")} FCFA / ${siteSettings.superPremiumPlan.durationDays} jrs`,
        icon: /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(StarPlatinumIcon, { className: "w-8 h-8 text-kmer-red" }),
        features: t("sellerSubscription.superPremiumFeatures", siteSettings.superPremiumPlan.productLimit, siteSettings.superPremiumPlan.commissionRate).split("|"),
        onSelect: () => onSelectSubscription("super_premium"),
        isFeatured: false
      }
    ];
    return /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("div", { className: "bg-gray-50 dark:bg-gray-900 py-12", children: /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)("div", { className: "container mx-auto px-4 sm:px-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)("div", { className: "text-center max-w-3xl mx-auto mb-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("h1", { className: "text-4xl font-extrabold text-gray-800 dark:text-white mb-4", children: t("sellerSubscription.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("p", { className: "text-lg text-gray-600 dark:text-gray-400", children: t("sellerSubscription.subtitle") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-6xl mx-auto", children: plans.map((plan, index) => /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(
        PlanCard2,
        {
          title: plan.title,
          description: plan.description,
          price: plan.price,
          icon: plan.icon,
          features: plan.features,
          onSelect: plan.onSelect,
          isFeatured: plan.isFeatured
        },
        index
      )) })
    ] }) });
  };
  var SellerSubscriptionPage_default = SellerSubscriptionPage;

  // components/PageRouter.tsx
  var import_jsx_runtime88 = __toESM(require_jsx_runtime());
  var PageRouter = (props) => {
    const {
      navigation,
      siteData,
      setPromotionModalProduct,
      setPaymentRequest,
      onAdminUpdateUser,
      onSendBulkEmail,
      onApproveStore,
      onRejectStore,
      onToggleStoreStatus,
      onWarnStore,
      onWarnUser,
      onAdminAddCategory,
      onAdminDeleteCategory,
      onAdminUpdateCategory,
      onUpdateDocumentStatus,
      onSaveFlashSale,
      onUpdateFlashSaleSubmissionStatus,
      onBatchUpdateFlashSaleStatus,
      onAddPickupPoint,
      onUpdatePickupPoint,
      onDeletePickupPoint,
      onAdminReplyToTicket,
      onAdminUpdateTicketStatus,
      onReviewModeration,
      onCreateUserByAdmin,
      onCreateOrUpdateAnnouncement,
      onDeleteAnnouncement,
      onUpdateOrderStatus,
      onResolveDispute,
      onSellerUpdateOrderStatus,
      onSellerCancelOrder,
      onCreateOrUpdateCollection,
      onDeleteCollection,
      onUpdateStoreProfile,
      onUpdateUserAvailability,
      onUpdateDeliveryStatus,
      onUpdateSchedule,
      onAddProductToStory,
      onAddStory
    } = props;
    const { user, allUsers, setAllUsers, logout } = useAuth();
    const { cart, appliedPromoCode, onApplyPromoCode, clearCart } = useCart();
    const { wishlist } = useWishlist();
    const sellerStore = (0, import_react64.useMemo)(() => {
      if (!user) return void 0;
      return siteData.allStores.find((s) => s.sellerId === user.id);
    }, [user, siteData.allStores]);
    const sellerProducts = user?.role === "seller" && sellerStore ? siteData.allProducts.filter((p) => p.vendor === sellerStore.name) : [];
    const sellerOrders = user?.role === "seller" && sellerStore ? siteData.allOrders.filter((o) => o.items.some((i) => i.vendor === sellerStore.name)) : [];
    const sellerNotifications = user?.role === "seller" && sellerStore ? siteData.allNotifications.filter((n) => n.userId === user?.id) : [];
    const onBecomeSeller = (shopName, location, neighborhood, sellerFirstName, sellerLastName, sellerPhone, physicalAddress, logoUrl, latitude, longitude) => {
      if (!user) {
        alert("Erreur: Utilisateur non connect\xE9.");
        return;
      }
      const newStore = siteData.createStoreAndNotifyAdmin({
        name: shopName,
        category: "Non class\xE9",
        location,
        neighborhood,
        sellerFirstName,
        sellerLastName,
        sellerPhone,
        physicalAddress,
        logoUrl,
        latitude,
        longitude
      }, user, allUsers);
      if (newStore) {
        setAllUsers((prevUsers) => prevUsers.map(
          (u) => u.id === user.id ? { ...u, role: "seller", shopName: newStore.name } : u
        ));
        navigation.setPage("seller-subscription");
      } else {
        alert("Erreur: La cr\xE9ation de la boutique a \xE9chou\xE9. Veuillez r\xE9essayer.");
      }
    };
    const onSelectSubscription = (status) => {
      if (!user) return;
      const sellerStoreForSubscription = siteData.allStores.find((s) => s.sellerId === user.id);
      if (sellerStoreForSubscription) {
        const plan = status === "standard" ? siteData.siteSettings.standardPlan : status === "premium" ? siteData.siteSettings.premiumPlan : siteData.siteSettings.superPremiumPlan;
        setPaymentRequest({
          amount: plan.price,
          reason: `Abonnement au plan ${status} pour ${sellerStoreForSubscription.name}`,
          onSuccess: () => {
            siteData.setAllStores((prevStores) => prevStores.map(
              (s) => s.id === sellerStoreForSubscription.id ? {
                ...s,
                premiumStatus: status,
                subscriptionStatus: "active",
                subscriptionDueDate: new Date(Date.now() + plan.durationDays * 24 * 60 * 60 * 1e3).toISOString()
              } : s
            ));
            navigation.navigateToSellerDashboard("overview");
          }
        });
      } else {
        console.error("CRITICAL: Store not found for user ID " + user.id + " after seller registration.");
        alert("Erreur critique : Impossible de trouver votre boutique nouvellement cr\xE9\xE9e pour y appliquer l'abonnement. Veuillez contacter le support.");
        navigation.navigateToHome();
      }
    };
    switch (navigation.page) {
      case "home":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
          HomePage_default,
          {
            categories: siteData.allCategories,
            products: siteData.allProducts,
            stores: siteData.allStores,
            flashSales: siteData.flashSales,
            advertisements: siteData.allAdvertisements,
            siteSettings: siteData.siteSettings,
            onProductClick: navigation.navigateToProduct,
            onCategoryClick: navigation.navigateToCategory,
            onVendorClick: navigation.navigateToVendorPage,
            onVisitStore: navigation.navigateToVendorPage,
            onViewStories: (store) => navigation.setViewingStoriesFor(store),
            isComparisonEnabled: siteData.siteSettings.isComparisonEnabled,
            isStoriesEnabled: siteData.siteSettings.isStoriesEnabled,
            recentlyViewedIds: siteData.recentlyViewedIds,
            userOrders: user ? siteData.allOrders.filter((o) => o.userId === user.id) : [],
            wishlist
          }
        );
      case "product":
        return navigation.selectedProduct ? /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
          ProductDetail_default,
          {
            product: navigation.selectedProduct,
            allProducts: siteData.allProducts,
            allUsers,
            stores: siteData.allStores,
            flashSales: siteData.flashSales,
            onBack: navigation.navigateToHome,
            onAddReview: () => {
            },
            onVendorClick: navigation.navigateToVendorPage,
            onProductClick: navigation.navigateToProduct,
            onOpenLogin: () => {
            },
            isChatEnabled: siteData.siteSettings.isChatEnabled,
            isComparisonEnabled: siteData.siteSettings.isComparisonEnabled,
            onProductView: (id) => siteData.setRecentlyViewedIds((prev) => [id, ...prev.filter((pId) => pId !== id)].slice(0, 10))
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(NotFoundPage_default, { onNavigateHome: navigation.navigateToHome });
      case "cart":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(CartView_default, { onBack: navigation.navigateToHome, onNavigateToCheckout: navigation.navigateToCheckout, flashSales: siteData.flashSales, allPromoCodes: siteData.allPromoCodes, appliedPromoCode, onApplyPromoCode });
      case "checkout":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
          Checkout_default,
          {
            onBack: navigation.navigateToCart,
            onOrderConfirm: (orderData) => {
              if (user) {
                const handlePaymentSuccess = (paymentDetails) => {
                  const finalOrderData = { ...orderData, paymentDetails };
                  const newOrder = siteData.handleConfirmOrder(finalOrderData, user);
                  if (newOrder) {
                    clearCart();
                    navigation.setSelectedOrder(newOrder);
                    navigation.setPage("order-success");
                  }
                };
                setPaymentRequest({
                  amount: orderData.total,
                  reason: `Paiement pour votre commande KMER ZONE`,
                  onSuccess: handlePaymentSuccess
                });
              }
            },
            flashSales: siteData.flashSales,
            allPickupPoints: siteData.allPickupPoints,
            allStores: siteData.allStores,
            appliedPromoCode,
            siteSettings: siteData.siteSettings,
            paymentMethods: siteData.allPaymentMethods
          }
        );
      case "order-success":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(OrderSuccess_default, { order: navigation.selectedOrder || siteData.allOrders[siteData.allOrders.length - 1], onNavigateHome: navigation.navigateToHome, onNavigateToOrders: navigation.navigateToOrderHistory });
      case "category":
        return navigation.selectedCategoryId ? /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(CategoryPage_default, { categoryId: navigation.selectedCategoryId, allCategories: siteData.allCategories, allProducts: siteData.allProducts, allStores: siteData.allStores, flashSales: siteData.flashSales, onProductClick: navigation.navigateToProduct, onBack: navigation.navigateToHome, onVendorClick: navigation.navigateToVendorPage, isComparisonEnabled: siteData.siteSettings.isComparisonEnabled }) : /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(NotFoundPage_default, { onNavigateHome: navigation.navigateToHome });
      case "seller-dashboard":
        return sellerStore ? /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
          SellerDashboard,
          {
            store: sellerStore,
            products: sellerProducts,
            categories: siteData.allCategories,
            flashSales: siteData.flashSales,
            sellerOrders,
            promoCodes: siteData.allPromoCodes.filter((p) => p.sellerId === user?.id),
            allTickets: siteData.allTickets.filter((t) => t.userId === user?.id),
            onBack: () => {
            },
            onAddProduct: () => navigation.setPage("product-form"),
            onEditProduct: (p) => {
            },
            onDeleteProduct: () => {
            },
            onUpdateProductStatus: () => {
            },
            onNavigateToProfile: () => navigation.navigateToSellerDashboard("profile"),
            onNavigateToAnalytics: () => navigation.navigateToSellerDashboard("analytics"),
            onSetPromotion: setPromotionModalProduct,
            onRemovePromotion: () => {
            },
            onProposeForFlashSale: () => {
            },
            onUploadDocument: () => {
            },
            onUpdateOrderStatus: onSellerUpdateOrderStatus,
            onSellerCancelOrder: (orderId) => user && onSellerCancelOrder(orderId, user),
            onCreatePromoCode: () => {
            },
            onDeletePromoCode: () => {
            },
            isChatEnabled: siteData.siteSettings.isChatEnabled,
            siteSettings: siteData.siteSettings,
            payouts: siteData.payouts,
            onReplyToReview: () => {
            },
            onCreateOrUpdateCollection,
            onDeleteCollection,
            initialTab: navigation.sellerDashboardTab,
            sellerNotifications,
            onCreateTicket: () => {
            },
            allShippingPartners: siteData.allShippingPartners,
            onUpdateShippingSettings: () => {
            },
            onRequestUpgrade: () => {
            },
            onUpdateStoreProfile,
            onAddProductToStory,
            onAddStory
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(ForbiddenPage_default, { onNavigateHome: navigation.navigateToHome });
      case "superadmin-dashboard":
        if (user?.role !== "superadmin") return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(ForbiddenPage_default, { onNavigateHome: navigation.navigateToHome });
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
          SuperAdminDashboard,
          {
            allUsers,
            allOrders: siteData.allOrders,
            allCategories: siteData.allCategories,
            allStores: siteData.allStores,
            allProducts: siteData.allProducts,
            siteActivityLogs: siteData.siteActivityLogs,
            flashSales: siteData.flashSales,
            allPickupPoints: siteData.allPickupPoints,
            siteSettings: siteData.siteSettings,
            payouts: siteData.payouts,
            advertisements: siteData.allAdvertisements,
            siteContent: siteData.siteContent,
            allTickets: siteData.allTickets,
            allAnnouncements: siteData.allAnnouncements,
            paymentMethods: siteData.allPaymentMethods,
            onUpdateSiteSettings: siteData.setSiteSettings,
            onPayoutSeller: (storeId, amount) => user && siteData.handlePayoutSeller(storeId, amount, user),
            onAddAdvertisement: (data) => user && siteData.handleAddAdvertisement(data, user),
            onUpdateAdvertisement: (id, data) => user && siteData.handleUpdateAdvertisement(id, data, user),
            onDeleteAdvertisement: (id) => user && siteData.handleDeleteAdvertisement(id, user),
            onSendBulkEmail,
            onUpdateOrderStatus,
            onWarnStore,
            onToggleStoreStatus,
            onApproveStore,
            onRejectStore,
            onSaveFlashSale,
            onUpdateFlashSaleSubmissionStatus,
            onBatchUpdateFlashSaleStatus,
            onAddPickupPoint,
            onUpdatePickupPoint,
            onDeletePickupPoint,
            onAdminAddCategory,
            onAdminDeleteCategory,
            onUpdateUser: onAdminUpdateUser,
            onCreateUserByAdmin,
            onAdminReplyToTicket,
            onAdminUpdateTicketStatus,
            onCreateOrUpdateAnnouncement,
            onDeleteAnnouncement,
            onReviewModeration,
            onUpdatePaymentMethods: siteData.setAllPaymentMethods,
            allZones: siteData.allZones,
            isChatEnabled: siteData.siteSettings.isChatEnabled,
            isComparisonEnabled: siteData.siteSettings.isComparisonEnabled,
            onAdminUpdateCategory,
            onUpdateDocumentStatus,
            onWarnUser,
            onSanctionAgent: () => {
            },
            onAdminStoreMessage: () => {
            },
            onAdminCustomerMessage: () => {
            },
            onUpdateSiteContent: siteData.setSiteContent,
            onRequestDocument: () => {
            },
            onVerifyDocumentStatus: () => {
            },
            onToggleChatFeature: () => {
            },
            onToggleComparisonFeature: () => {
            },
            onAssignAgent: () => {
            },
            onUpdateCategoryImage: () => {
            },
            onResolveDispute
          }
        );
      case "vendor-page":
        return navigation.selectedStore ? /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(VendorPage_default, { vendorName: navigation.selectedStore.name, allProducts: siteData.allProducts, allStores: siteData.allStores, flashSales: siteData.flashSales, onProductClick: navigation.navigateToProduct, onBack: navigation.navigateToHome, onVendorClick: navigation.navigateToVendorPage, isComparisonEnabled: siteData.siteSettings.isComparisonEnabled }) : /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(NotFoundPage_default, { onNavigateHome: navigation.navigateToHome });
      case "order-history":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(OrderHistoryPage_default, { userOrders: user ? siteData.allOrders.filter((o) => o.userId === user.id) : [], onBack: navigation.navigateToHome, onSelectOrder: navigation.navigateToOrderDetail, onRepeatOrder: () => {
        } });
      case "order-detail":
        return navigation.selectedOrder ? /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(OrderDetailPage_default, { order: navigation.selectedOrder, onBack: navigation.navigateToOrderHistory, allPickupPoints: siteData.allPickupPoints, allUsers, onCancelOrder: () => {
        }, onRequestRefund: () => {
        }, onCustomerDisputeMessage: () => {
        } }) : /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(NotFoundPage_default, { onNavigateHome: navigation.navigateToHome });
      case "search-results":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(SearchResultsPage_default, { searchQuery: navigation.searchQuery, products: siteData.allProducts, stores: siteData.allStores, flashSales: siteData.flashSales, onProductClick: navigation.navigateToProduct, onBack: navigation.navigateToHome, onVendorClick: navigation.navigateToVendorPage, isComparisonEnabled: siteData.siteSettings.isComparisonEnabled });
      case "wishlist":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(WishlistPage_default, { allProducts: siteData.allProducts, allStores: siteData.allStores, flashSales: siteData.flashSales, onProductClick: navigation.navigateToProduct, onBack: navigation.navigateToHome, onVendorClick: navigation.navigateToVendorPage, isComparisonEnabled: siteData.siteSettings.isComparisonEnabled });
      case "delivery-agent-dashboard":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
          DeliveryAgentDashboard,
          {
            allOrders: siteData.allOrders,
            allStores: siteData.allStores,
            allPickupPoints: siteData.allPickupPoints,
            onUpdateDeliveryStatus,
            onLogout: logout,
            onUpdateUserAvailability
          }
        );
      case "depot-agent-dashboard":
        return user ? /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
          DepotAgentDashboard,
          {
            user,
            allUsers,
            allOrders: siteData.allOrders,
            allStores: siteData.allStores,
            allZones: siteData.allZones,
            allPickupPoints: siteData.allPickupPoints,
            onLogout: logout,
            onAssignAgentToOrder: (orderId, agentId) => user && siteData.handleAssignAgentToOrder(orderId, agentId, user, allUsers),
            handleDepotCheckIn: (orderId, location) => user && siteData.handleDepotCheckIn(orderId, location, user),
            onUpdateSchedule
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(ForbiddenPage_default, { onNavigateHome: navigation.navigateToHome });
      case "account":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
          AccountPage_default,
          {
            onBack: navigation.navigateToHome,
            initialTab: navigation.accountPageTab,
            allStores: siteData.allStores,
            userOrders: user ? siteData.allOrders.filter((o) => o.userId === user.id) : [],
            allTickets: siteData.allTickets,
            onCreateTicket: () => {
            },
            onUserReplyToTicket: () => {
            },
            onSelectOrder: navigation.navigateToOrderDetail,
            onRepeatOrder: () => {
            },
            onVendorClick: navigation.navigateToVendorPage
          }
        );
      case "seller-analytics-dashboard":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(SellerAnalyticsDashboard, { onBack: () => navigation.navigateToSellerDashboard("overview"), sellerOrders, sellerProducts, flashSales: siteData.flashSales });
      case "seller-subscription":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
          SellerSubscriptionPage_default,
          {
            siteSettings: siteData.siteSettings,
            onSelectSubscription
          }
        );
      case "visual-search":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(VisualSearchPage_default, { onSearch: navigation.handleSearch });
      case "become-seller":
        if (!user) {
          return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(ForbiddenPage_default, { onNavigateHome: navigation.navigateToHome });
        }
        if (user.role === "seller" && sellerStore) {
          navigation.navigateToSellerDashboard("overview");
          return null;
        }
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
          BecomeSeller_default,
          {
            onBack: navigation.navigateToHome,
            onBecomeSeller,
            siteSettings: siteData.siteSettings
          }
        );
      case "become-premium":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(BecomePremiumPage_default, { siteSettings: siteData.siteSettings, onBack: navigation.navigateToHome, onBecomePremiumByCaution: () => {
        }, onUpgradeToPremiumPlus: () => {
        } });
      case "info":
        return navigation.infoPageContent ? /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(InfoPage, { title: navigation.infoPageContent.title, content: navigation.infoPageContent.content, onBack: navigation.navigateToHome }) : /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(NotFoundPage_default, { onNavigateHome: navigation.navigateToHome });
      case "not-found":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(NotFoundPage_default, { onNavigateHome: navigation.navigateToHome });
      case "forbidden":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(ForbiddenPage_default, { onNavigateHome: navigation.navigateToHome });
      case "server-error":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(ServerErrorPage_default, { onNavigateHome: navigation.navigateToHome });
      case "reset-password":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(ResetPasswordPage_default, { onPasswordReset: () => {
        }, onNavigateLogin: () => {
        } });
      case "promotions":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(PromotionsPage_default, { allProducts: siteData.allProducts, allStores: siteData.allStores, flashSales: siteData.flashSales, onProductClick: navigation.navigateToProduct, onBack: navigation.navigateToHome, onVendorClick: navigation.navigateToVendorPage, isComparisonEnabled: siteData.siteSettings.isComparisonEnabled });
      case "flash-sales":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(FlashSalesPage_default, { allProducts: siteData.allProducts, allStores: siteData.allStores, flashSales: siteData.flashSales, onProductClick: navigation.navigateToProduct, onBack: navigation.navigateToHome, onVendorClick: navigation.navigateToVendorPage, isComparisonEnabled: siteData.siteSettings.isComparisonEnabled });
      case "stores":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(StoresPage_default, { stores: siteData.allStores, onBack: navigation.navigateToHome, onVisitStore: navigation.navigateToVendorPage, onNavigateToStoresMap: navigation.navigateToStoresMap });
      case "stores-map":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(StoresMapPage, { stores: siteData.allStores, onBack: navigation.navigateToStores });
      case "comparison":
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(ComparisonPage, {});
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(NotFoundPage_default, { onNavigateHome: navigation.navigateToHome });
    }
  };
  var PageRouter_default = PageRouter;

  // App.tsx
  var import_jsx_runtime89 = __toESM(require_jsx_runtime());
  var updateMetaTag = (name, content, isProperty = false) => {
    const selector = isProperty ? `meta[property='${name}']` : `meta[name='${name}']`;
    let element = document.head.querySelector(selector);
    if (!element) {
      element = document.createElement("meta");
      if (isProperty) element.setAttribute("property", name);
      else element.setAttribute("name", name);
      document.head.appendChild(element);
    }
    element.content = content;
  };
  var AnnouncementBanner = ({ announcement, onDismiss }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("div", { className: "bg-kmer-yellow text-gray-900 p-3 text-center relative font-semibold text-sm", children: [
      /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("p", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("strong", { className: "font-bold uppercase", children: [
          announcement.title,
          ":"
        ] }),
        " ",
        announcement.content
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("button", { onClick: () => onDismiss(announcement.id), className: "absolute top-1/2 right-4 -translate-y-1/2", children: /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(XIcon, { className: "w-5 h-5" }) })
    ] });
  };
  function App() {
    const { user, logout: authLogout, allUsers, setAllUsers, resetPassword, updateUserInfo } = useAuth();
    const { isModalOpen, modalProduct, closeModal: uiCloseModal } = useUI();
    const { comparisonList, setProducts: setComparisonProducts } = useComparison();
    const { t } = useLanguage();
    const [isLoginModalOpen, setIsLoginModalOpen] = (0, import_react65.useState)(false);
    const [isForgotPasswordModalOpen, setIsForgotPasswordModalOpen] = (0, import_react65.useState)(false);
    const [emailForPasswordReset, setEmailForPasswordReset] = (0, import_react65.useState)(null);
    const siteData = useSiteData();
    const navigation = useAppNavigation(siteData.allCategories, siteData.allStores, siteData.allOrders, siteData.siteContent);
    const [paymentRequest, setPaymentRequest] = (0, import_react65.useState)(null);
    const [promotionModalProduct, setPromotionModalProduct] = (0, import_react65.useState)(null);
    const handleLoginSuccess = (0, import_react65.useCallback)((loggedInUser) => {
      setIsLoginModalOpen(false);
      switch (loggedInUser.role) {
        case "superadmin":
          navigation.navigateToSuperAdminDashboard();
          break;
        case "seller":
          if (!loggedInUser.shopName) {
            navigation.navigateToBecomeSeller();
          } else {
            navigation.navigateToSellerDashboard("overview");
          }
          break;
        case "delivery_agent":
          navigation.navigateToDeliveryAgentDashboard();
          break;
        case "depot_agent":
        case "depot_manager":
          navigation.navigateToDepotAgentDashboard();
          break;
        case "customer":
        default:
          navigation.navigateToAccount("dashboard");
          break;
      }
    }, [navigation]);
    const handleAdminUpdateUser = (0, import_react65.useCallback)((userId, updates) => {
      const updatedUsers = siteData.handleAdminUpdateUser(userId, updates, allUsers);
      setAllUsers(updatedUsers);
    }, [siteData, allUsers, setAllUsers]);
    const handleWarnUser = (0, import_react65.useCallback)((userId, reason) => {
      if (!user) return;
      const newWarning = { id: `warn-${Date.now()}`, date: (/* @__PURE__ */ new Date()).toISOString(), reason };
      setAllUsers((prev) => prev.map((u) => u.id === userId ? { ...u, warnings: [...u.warnings || [], newWarning] } : u));
      siteData.logActivity(user, "USER_WARNED", `Avertissement envoy\xE9 \xE0 l'utilisateur ${userId}. Motif: ${reason}`);
    }, [user, setAllUsers, siteData]);
    const handleUpdateDocumentStatus = (0, import_react65.useCallback)((storeId, documentName, status, rejectionReason) => {
      if (!user) return;
      siteData.handleUpdateDocumentStatus(storeId, documentName, status, rejectionReason, user);
    }, [user, siteData]);
    const handleSendBulkEmail = (0, import_react65.useCallback)((recipientIds, subject, body) => {
      if (user) {
        siteData.handleSendBulkEmail(recipientIds, subject, body, user);
      }
    }, [user, siteData]);
    const handleLogout = (0, import_react65.useCallback)(() => {
      authLogout();
      navigation.navigateToHome();
    }, [authLogout, navigation]);
    const handleUpdateUserAvailability = (0, import_react65.useCallback)((userId, newStatus) => {
      updateUserInfo(userId, { availabilityStatus: newStatus });
    }, [updateUserInfo]);
    const handleUpdateDeliveryStatus = (0, import_react65.useCallback)((orderId, status, details) => {
      if (user) {
        siteData.handleUpdateDeliveryStatus(orderId, status, user, details);
      }
    }, [user, siteData]);
    (0, import_react65.useEffect)(() => {
      setComparisonProducts(siteData.allProducts);
    }, [siteData.allProducts, setComparisonProducts]);
    (0, import_react65.useEffect)(() => {
      const favicon = document.getElementById("favicon");
      if (favicon && siteData.siteSettings.logoUrl) {
        if (siteData.siteSettings.logoUrl.startsWith("http") || siteData.siteSettings.logoUrl.startsWith("data:image")) {
          favicon.href = siteData.siteSettings.logoUrl;
        }
      }
    }, [siteData.siteSettings.logoUrl]);
    (0, import_react65.useEffect)(() => {
      let { metaTitle: title, metaDescription: description, ogImageUrl } = siteData.siteSettings.seo;
      const { page, selectedProduct, selectedCategoryId, selectedStore } = navigation;
      switch (page) {
        case "product":
          if (selectedProduct) {
            title = `${selectedProduct.name} | KMER ZONE`;
            description = selectedProduct.description.substring(0, 160);
            ogImageUrl = selectedProduct.imageUrls[0] || ogImageUrl;
          }
          break;
        case "category":
          const category = siteData.allCategories.find((c) => c.id === selectedCategoryId);
          if (category) {
            title = `${category.name} | KMER ZONE`;
            ogImageUrl = category.imageUrl || ogImageUrl;
          }
          break;
        case "vendor-page":
          const store = selectedStore;
          if (store) {
            title = `${store.name} - Boutique sur KMER ZONE`;
            ogImageUrl = store.logoUrl || ogImageUrl;
          }
          break;
        default:
          break;
      }
      document.title = title;
      updateMetaTag("description", description);
      updateMetaTag("og:title", title, true);
      updateMetaTag("og:description", description, true);
      updateMetaTag("og:image", ogImageUrl, true);
      updateMetaTag("twitter:title", title, false);
      updateMetaTag("twitter:description", description, false);
      updateMetaTag("twitter:image", ogImageUrl, false);
    }, [navigation.page, navigation.selectedProduct, navigation.selectedCategoryId, navigation.selectedStore, siteData.siteSettings.seo, siteData.allCategories]);
    const activeAnnouncement = siteData.allAnnouncements.filter((a) => a.isActive && !siteData.dismissedAnnouncements.includes(a.id) && new Date(a.startDate) <= /* @__PURE__ */ new Date() && new Date(a.endDate) >= /* @__PURE__ */ new Date()).find((a) => {
      if (a.target === "all") return true;
      if (!user && (a.target === "customers" || a.target === "sellers")) return false;
      if (user && user.role === "customer" && a.target === "customers") return true;
      if (user && user.role === "seller" && a.target === "sellers") return true;
      return false;
    });
    if (siteData.siteSettings.maintenanceMode.isEnabled && user?.role !== "superadmin") {
      return /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(MaintenancePage_default, { ...siteData.siteSettings.maintenanceMode });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("div", { className: "flex flex-col min-h-screen", children: [
      activeAnnouncement && /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(AnnouncementBanner, { announcement: activeAnnouncement, onDismiss: siteData.handleDismissAnnouncement }),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        Header,
        {
          categories: siteData.allCategories,
          onNavigateHome: navigation.navigateToHome,
          onNavigateCart: navigation.navigateToCart,
          onNavigateToStores: navigation.navigateToStores,
          onNavigateToPromotions: navigation.navigateToPromotions,
          onNavigateToCategory: navigation.navigateToCategory,
          onNavigateToBecomeSeller: navigation.navigateToBecomeSeller,
          onNavigateToSellerDashboard: () => navigation.navigateToSellerDashboard("overview"),
          onNavigateToSellerProfile: navigation.navigateToSellerProfile,
          onNavigateToOrderHistory: navigation.navigateToOrderHistory,
          onNavigateToSuperAdminDashboard: navigation.navigateToSuperAdminDashboard,
          onNavigateToFlashSales: navigation.navigateToFlashSales,
          onNavigateToWishlist: navigation.navigateToWishlist,
          onNavigateToDeliveryAgentDashboard: navigation.navigateToDeliveryAgentDashboard,
          onNavigateToDepotAgentDashboard: navigation.navigateToDepotAgentDashboard,
          onNavigateToBecomePremium: navigation.navigateToBecomePremium,
          onNavigateToAccount: navigation.navigateToAccount,
          onNavigateToVisualSearch: navigation.navigateToVisualSearch,
          onOpenLogin: () => setIsLoginModalOpen(true),
          onLogout: handleLogout,
          onSearch: navigation.handleSearch,
          isChatEnabled: siteData.siteSettings.isChatEnabled,
          isPremiumProgramEnabled: siteData.siteSettings.customerLoyaltyProgram.isEnabled,
          logoUrl: siteData.siteSettings.logoUrl,
          notifications: siteData.allNotifications.filter((n) => n.userId === user?.id),
          onMarkNotificationAsRead: siteData.handleMarkNotificationAsRead,
          onNavigateFromNotification: navigation.handleNavigateFromNotification
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("main", { className: "flex-grow", children: /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        PageRouter_default,
        {
          navigation,
          siteData,
          setPromotionModalProduct,
          setPaymentRequest,
          onAdminUpdateUser: handleAdminUpdateUser,
          onSendBulkEmail: handleSendBulkEmail,
          onApproveStore: (store) => user && siteData.handleApproveStore(store, user),
          onRejectStore: (store) => user && siteData.handleRejectStore(store, user),
          onToggleStoreStatus: (storeId, currentStatus) => user && siteData.handleToggleStoreStatus(storeId, currentStatus, user),
          onWarnStore: (storeId, reason) => user && siteData.handleWarnStore(storeId, reason, user),
          onAdminAddCategory: (name, parentId) => user && siteData.handleAdminAddCategory(name, parentId, user),
          onAdminDeleteCategory: (categoryId) => user && siteData.handleAdminDeleteCategory(categoryId, user),
          onAdminUpdateCategory: (categoryId, updates) => user && siteData.handleAdminUpdateCategory(categoryId, updates, user),
          onUpdateDocumentStatus: handleUpdateDocumentStatus,
          onWarnUser: handleWarnUser,
          onSaveFlashSale: (saleData) => user && siteData.handleSaveFlashSale(saleData, user),
          onUpdateFlashSaleSubmissionStatus: (flashSaleId, productId, status) => user && siteData.handleUpdateFlashSaleSubmissionStatus(flashSaleId, productId, status, user),
          onBatchUpdateFlashSaleStatus: (flashSaleId, productIds, status) => user && siteData.handleBatchUpdateFlashSaleStatus(flashSaleId, productIds, status, user),
          onAddPickupPoint: (point) => user && siteData.handleAddPickupPoint(point, user),
          onUpdatePickupPoint: (point) => user && siteData.handleUpdatePickupPoint(point, user),
          onDeletePickupPoint: (pointId) => user && siteData.handleDeletePickupPoint(pointId, user),
          onAdminReplyToTicket: (ticketId, message) => user && siteData.handleAdminReplyToTicket(ticketId, message, user),
          onAdminUpdateTicketStatus: (ticketId, status) => user && siteData.handleAdminUpdateTicketStatus(ticketId, status, user),
          onReviewModeration: (productId, reviewIdentifier, newStatus) => user && siteData.handleReviewModeration(productId, reviewIdentifier, newStatus, user),
          onCreateUserByAdmin: (data) => user && siteData.handleCreateUserByAdmin(data, user),
          onCreateOrUpdateAnnouncement: (data) => user && siteData.handleCreateOrUpdateAnnouncement(data, user),
          onDeleteAnnouncement: (id) => user && siteData.handleDeleteAnnouncement(id, user),
          onUpdateOrderStatus: (orderId, status) => user && siteData.handleUpdateOrderStatus(orderId, status, user),
          onResolveDispute: (orderId, resolution) => user && siteData.handleResolveDispute(orderId, resolution, user),
          onSellerUpdateOrderStatus: (orderId, status) => user && siteData.handleSellerUpdateOrderStatus(orderId, status, user),
          onSellerCancelOrder: (orderId, user2) => siteData.handleSellerCancelOrder(orderId, user2),
          onCreateOrUpdateCollection: (storeId, collection) => user && siteData.handleCreateOrUpdateCollection(storeId, collection, user),
          onDeleteCollection: (storeId, collectionId) => user && siteData.handleDeleteCollection(storeId, collectionId, user),
          onUpdateStoreProfile: (storeId, data) => user && siteData.handleUpdateStoreProfile(storeId, data, user),
          onUpdateUserAvailability: handleUpdateUserAvailability,
          onUpdateDeliveryStatus: handleUpdateDeliveryStatus,
          onUpdateSchedule: (depotId, schedule) => user && siteData.handleUpdateSchedule(depotId, schedule, user),
          onAddProductToStory: (productId) => user && siteData.handleAddProductToStory(productId, user),
          onAddStory: (imageUrl) => user && siteData.handleAddStory(imageUrl, user)
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        Footer_default,
        {
          onNavigate: navigation.navigateToInfoPage,
          logoUrl: siteData.siteSettings.logoUrl,
          paymentMethods: siteData.allPaymentMethods,
          socialLinks: siteData.siteSettings.socialLinks,
          companyName: siteData.siteSettings.companyName
        }
      ),
      comparisonList.length > 0 && siteData.siteSettings.isComparisonEnabled && /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(ComparisonBar, {}),
      isLoginModalOpen && /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        LoginModal_default,
        {
          onClose: () => setIsLoginModalOpen(false),
          onLoginSuccess: handleLoginSuccess,
          onForgotPassword: () => {
            setIsLoginModalOpen(false);
            setIsForgotPasswordModalOpen(true);
          }
        }
      ),
      isForgotPasswordModalOpen && /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        ForgotPasswordModal_default,
        {
          onClose: () => setIsForgotPasswordModalOpen(false),
          onEmailSubmit: (email) => {
            setEmailForPasswordReset(email);
            alert(t("app.passwordResetEmailSent", email));
          }
        }
      ),
      isModalOpen && modalProduct && /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(AddToCartModal_default, { product: modalProduct, onClose: uiCloseModal, onNavigateToCart: navigation.navigateToCart }),
      promotionModalProduct && /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(PromotionModal_default, { product: promotionModalProduct, onClose: () => setPromotionModalProduct(null), onSave: siteData.handleSetPromotion }),
      paymentRequest && /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(PaymentModal_default, { paymentRequest, paymentMethods: siteData.allPaymentMethods, onClose: () => setPaymentRequest(null) }),
      user && siteData.siteSettings.isChatEnabled && /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(ChatWidget_default, { allUsers, allProducts: siteData.allProducts, allCategories: siteData.allCategories }),
      navigation.viewingStoriesFor && /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(StoryViewer_default, { store: navigation.viewingStoriesFor, onClose: navigation.handleCloseStories, allProducts: siteData.allProducts, onProductClick: navigation.navigateToProduct })
    ] });
  }

  // index.tsx
  var import_jsx_runtime90 = __toESM(require_jsx_runtime());
  var AppProviders = ({ children }) => /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(AuthProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(ThemeProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(LanguageProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(UIProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(CartProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(WishlistProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(ComparisonProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(ChatProvider, { children }) }) }) }) }) }) }) });
  var rootElement = document.getElementById("root");
  if (!rootElement) {
    throw new Error("Could not find root element to mount to");
  }
  var root = import_client.default.createRoot(rootElement);
  root.render(
    /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(AppProviders, { children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(App, {}) })
  );
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@google/genai/dist/web/index.mjs:
@google/genai/dist/web/index.mjs:
@google/genai/dist/web/index.mjs:
@google/genai/dist/web/index.mjs:
@google/genai/dist/web/index.mjs:
  (**
   * @license
   * Copyright 2025 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
//# sourceMappingURL=bundle.js.map
