(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      (function() {
        function performWorkUntilDeadline() {
          needsPaint = false;
          if (isMessageLoopRunning) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasMoreWork = true;
            try {
              a: {
                isHostCallbackScheduled = false;
                isHostTimeoutScheduled && (isHostTimeoutScheduled = false, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
                isPerformingWork = true;
                var previousPriorityLevel = currentPriorityLevel;
                try {
                  b: {
                    advanceTimers(currentTime);
                    for (currentTask = peek(taskQueue); null !== currentTask && !(currentTask.expirationTime > currentTime && shouldYieldToHost()); ) {
                      var callback = currentTask.callback;
                      if ("function" === typeof callback) {
                        currentTask.callback = null;
                        currentPriorityLevel = currentTask.priorityLevel;
                        var continuationCallback = callback(
                          currentTask.expirationTime <= currentTime
                        );
                        currentTime = exports.unstable_now();
                        if ("function" === typeof continuationCallback) {
                          currentTask.callback = continuationCallback;
                          advanceTimers(currentTime);
                          hasMoreWork = true;
                          break b;
                        }
                        currentTask === peek(taskQueue) && pop(taskQueue);
                        advanceTimers(currentTime);
                      } else pop(taskQueue);
                      currentTask = peek(taskQueue);
                    }
                    if (null !== currentTask) hasMoreWork = true;
                    else {
                      var firstTimer = peek(timerQueue);
                      null !== firstTimer && requestHostTimeout(
                        handleTimeout,
                        firstTimer.startTime - currentTime
                      );
                      hasMoreWork = false;
                    }
                  }
                  break a;
                } finally {
                  currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = false;
                }
                hasMoreWork = void 0;
              }
            } finally {
              hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = false;
            }
          }
        }
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          a: for (; 0 < index; ) {
            var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
            if (0 < compare(parent, node))
              heap[parentIndex] = node, heap[index] = parent, index = parentIndex;
            else break a;
          }
        }
        function peek(heap) {
          return 0 === heap.length ? null : heap[0];
        }
        function pop(heap) {
          if (0 === heap.length) return null;
          var first = heap[0], last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            a: for (var index = 0, length = heap.length, halfLength = length >>> 1; index < halfLength; ) {
              var leftIndex = 2 * (index + 1) - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
              if (0 > compare(left, last))
                rightIndex < length && 0 > compare(right, left) ? (heap[index] = right, heap[rightIndex] = last, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last, index = leftIndex);
              else if (rightIndex < length && 0 > compare(right, last))
                heap[index] = right, heap[rightIndex] = last, index = rightIndex;
              else break a;
            }
          }
          return first;
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return 0 !== diff ? diff : a.id - b.id;
        }
        function advanceTimers(currentTime) {
          for (var timer = peek(timerQueue); null !== timer; ) {
            if (null === timer.callback) pop(timerQueue);
            else if (timer.startTime <= currentTime)
              pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
            else break;
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled)
            if (null !== peek(taskQueue))
              isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline());
            else {
              var firstTimer = peek(timerQueue);
              null !== firstTimer && requestHostTimeout(
                handleTimeout,
                firstTimer.startTime - currentTime
              );
            }
        }
        function shouldYieldToHost() {
          return needsPaint ? true : exports.unstable_now() - startTime < frameInterval ? false : true;
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
          }, ms);
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        exports.unstable_now = void 0;
        if ("object" === typeof performance && "function" === typeof performance.now) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date, initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = 3, isPerformingWork = false, isHostCallbackScheduled = false, isHostTimeoutScheduled = false, needsPaint = false, localSetTimeout = "function" === typeof setTimeout ? setTimeout : null, localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null, localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null, isMessageLoopRunning = false, taskTimeoutID = -1, frameInterval = 5, startTime = -1;
        if ("function" === typeof localSetImmediate)
          var schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        else if ("undefined" !== typeof MessageChannel) {
          var channel = new MessageChannel(), port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        exports.unstable_IdlePriority = 5;
        exports.unstable_ImmediatePriority = 1;
        exports.unstable_LowPriority = 4;
        exports.unstable_NormalPriority = 3;
        exports.unstable_Profiling = null;
        exports.unstable_UserBlockingPriority = 2;
        exports.unstable_cancelCallback = function(task) {
          task.callback = null;
        };
        exports.unstable_forceFrameRate = function(fps) {
          0 > fps || 125 < fps ? console.error(
            "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
          ) : frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5;
        };
        exports.unstable_getCurrentPriorityLevel = function() {
          return currentPriorityLevel;
        };
        exports.unstable_next = function(eventHandler) {
          switch (currentPriorityLevel) {
            case 1:
            case 2:
            case 3:
              var priorityLevel = 3;
              break;
            default:
              priorityLevel = currentPriorityLevel;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
        exports.unstable_requestPaint = function() {
          needsPaint = true;
        };
        exports.unstable_runWithPriority = function(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
              break;
            default:
              priorityLevel = 3;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
        exports.unstable_scheduleCallback = function(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          "object" === typeof options && null !== options ? (options = options.delay, options = "number" === typeof options && 0 < options ? currentTime + options : currentTime) : options = currentTime;
          switch (priorityLevel) {
            case 1:
              var timeout = -1;
              break;
            case 2:
              timeout = 250;
              break;
            case 5:
              timeout = 1073741823;
              break;
            case 4:
              timeout = 1e4;
              break;
            default:
              timeout = 5e3;
          }
          timeout = options + timeout;
          priorityLevel = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: options,
            expirationTime: timeout,
            sortIndex: -1
          };
          options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), null === peek(taskQueue) && priorityLevel === peek(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = true, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline())));
          return priorityLevel;
        };
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = function(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        };
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      (function() {
        function defineDeprecationWarning(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function() {
              console.warn(
                "%s(...) is deprecated in plain JavaScript React classes. %s",
                info[0],
                info[1]
              );
            }
          });
        }
        function getIteratorFn(maybeIterable) {
          if (null === maybeIterable || "object" !== typeof maybeIterable)
            return null;
          maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
          return "function" === typeof maybeIterable ? maybeIterable : null;
        }
        function warnNoop(publicInstance, callerName) {
          publicInstance = (publicInstance = publicInstance.constructor) && (publicInstance.displayName || publicInstance.name) || "ReactClass";
          var warningKey = publicInstance + "." + callerName;
          didWarnStateUpdateForUnmountedComponent[warningKey] || (console.error(
            "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
            callerName,
            publicInstance
          ), didWarnStateUpdateForUnmountedComponent[warningKey] = true);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        function ComponentDummy() {
        }
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        function noop() {
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          try {
            testStringCoercion(value);
            var JSCompiler_inline_result = false;
          } catch (e) {
            JSCompiler_inline_result = true;
          }
          if (JSCompiler_inline_result) {
            JSCompiler_inline_result = console;
            var JSCompiler_temp_const = JSCompiler_inline_result.error;
            var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            JSCompiler_temp_const.call(
              JSCompiler_inline_result,
              "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
              JSCompiler_inline_result$jscomp$0
            );
            return testStringCoercion(value);
          }
        }
        function getComponentNameFromType(type) {
          if (null == type) return null;
          if ("function" === typeof type)
            return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
          if ("string" === typeof type) return type;
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_ACTIVITY_TYPE:
              return "Activity";
          }
          if ("object" === typeof type)
            switch ("number" === typeof type.tag && console.error(
              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
            ), type.$$typeof) {
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_CONTEXT_TYPE:
                return type.displayName || "Context";
              case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
              case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
              case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                  return getComponentNameFromType(type(innerType));
                } catch (x) {
                }
            }
          return null;
        }
        function getTaskName(type) {
          if (type === REACT_FRAGMENT_TYPE) return "<>";
          if ("object" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE)
            return "<...>";
          try {
            var name = getComponentNameFromType(type);
            return name ? "<" + name + ">" : "<...>";
          } catch (x) {
            return "<...>";
          }
        }
        function getOwner() {
          var dispatcher = ReactSharedInternals.A;
          return null === dispatcher ? null : dispatcher.getOwner();
        }
        function UnknownOwner() {
          return Error("react-stack-top-frame");
        }
        function hasValidKey(config) {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return false;
          }
          return void 0 !== config.key;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          function warnAboutAccessingKey() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = true, console.error(
              "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
              displayName
            ));
          }
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function elementRefGetterWithDeprecationWarning() {
          var componentName = getComponentNameFromType(this.type);
          didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = true, console.error(
            "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
          ));
          componentName = this.props.ref;
          return void 0 !== componentName ? componentName : null;
        }
        function ReactElement(type, key, props, owner, debugStack, debugTask) {
          var refProp = props.ref;
          type = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            props,
            _owner: owner
          };
          null !== (void 0 !== refProp ? refProp : null) ? Object.defineProperty(type, "ref", {
            enumerable: false,
            get: elementRefGetterWithDeprecationWarning
          }) : Object.defineProperty(type, "ref", { enumerable: false, value: null });
          type._store = {};
          Object.defineProperty(type._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: 0
          });
          Object.defineProperty(type, "_debugInfo", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: null
          });
          Object.defineProperty(type, "_debugStack", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: debugStack
          });
          Object.defineProperty(type, "_debugTask", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: debugTask
          });
          Object.freeze && (Object.freeze(type.props), Object.freeze(type));
          return type;
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          newKey = ReactElement(
            oldElement.type,
            newKey,
            oldElement.props,
            oldElement._owner,
            oldElement._debugStack,
            oldElement._debugTask
          );
          oldElement._store && (newKey._store.validated = oldElement._store.validated);
          return newKey;
        }
        function validateChildKeys(node) {
          isValidElement(node) ? node._store && (node._store.validated = 1) : "object" === typeof node && null !== node && node.$$typeof === REACT_LAZY_TYPE && ("fulfilled" === node._payload.status ? isValidElement(node._payload.value) && node._payload.value._store && (node._payload.value._store.validated = 1) : node._store && (node._store.validated = 1));
        }
        function isValidElement(object) {
          return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function escape(key) {
          var escaperLookup = { "=": "=0", ":": "=2" };
          return "$" + key.replace(/[=:]/g, function(match) {
            return escaperLookup[match];
          });
        }
        function getElementKey(element, index) {
          return "object" === typeof element && null !== element && null != element.key ? (checkKeyStringCoercion(element.key), escape("" + element.key)) : index.toString(36);
        }
        function resolveThenable(thenable) {
          switch (thenable.status) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw thenable.reason;
            default:
              switch ("string" === typeof thenable.status ? thenable.then(noop, noop) : (thenable.status = "pending", thenable.then(
                function(fulfilledValue) {
                  "pending" === thenable.status && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
                },
                function(error) {
                  "pending" === thenable.status && (thenable.status = "rejected", thenable.reason = error);
                }
              )), thenable.status) {
                case "fulfilled":
                  return thenable.value;
                case "rejected":
                  throw thenable.reason;
              }
          }
          throw thenable;
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if ("undefined" === type || "boolean" === type) children = null;
          var invokeCallback = false;
          if (null === children) invokeCallback = true;
          else
            switch (type) {
              case "bigint":
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                    break;
                  case REACT_LAZY_TYPE:
                    return invokeCallback = children._init, mapIntoArray(
                      invokeCallback(children._payload),
                      array,
                      escapedPrefix,
                      nameSoFar,
                      callback
                    );
                }
            }
          if (invokeCallback) {
            invokeCallback = children;
            callback = callback(invokeCallback);
            var childKey = "" === nameSoFar ? "." + getElementKey(invokeCallback, 0) : nameSoFar;
            isArrayImpl(callback) ? (escapedPrefix = "", null != childKey && (escapedPrefix = childKey.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c) {
              return c;
            })) : null != callback && (isValidElement(callback) && (null != callback.key && (invokeCallback && invokeCallback.key === callback.key || checkKeyStringCoercion(callback.key)), escapedPrefix = cloneAndReplaceKey(
              callback,
              escapedPrefix + (null == callback.key || invokeCallback && invokeCallback.key === callback.key ? "" : ("" + callback.key).replace(
                userProvidedKeyEscapeRegex,
                "$&/"
              ) + "/") + childKey
            ), "" !== nameSoFar && null != invokeCallback && isValidElement(invokeCallback) && null == invokeCallback.key && invokeCallback._store && !invokeCallback._store.validated && (escapedPrefix._store.validated = 2), callback = escapedPrefix), array.push(callback));
            return 1;
          }
          invokeCallback = 0;
          childKey = "" === nameSoFar ? "." : nameSoFar + ":";
          if (isArrayImpl(children))
            for (var i = 0; i < children.length; i++)
              nameSoFar = children[i], type = childKey + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(
                nameSoFar,
                array,
                escapedPrefix,
                type,
                callback
              );
          else if (i = getIteratorFn(children), "function" === typeof i)
            for (i === children.entries && (didWarnAboutMaps || console.warn(
              "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
            ), didWarnAboutMaps = true), children = i.call(children), i = 0; !(nameSoFar = children.next()).done; )
              nameSoFar = nameSoFar.value, type = childKey + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(
                nameSoFar,
                array,
                escapedPrefix,
                type,
                callback
              );
          else if ("object" === type) {
            if ("function" === typeof children.then)
              return mapIntoArray(
                resolveThenable(children),
                array,
                escapedPrefix,
                nameSoFar,
                callback
              );
            array = String(children);
            throw Error(
              "Objects are not valid as a React child (found: " + ("[object Object]" === array ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead."
            );
          }
          return invokeCallback;
        }
        function mapChildren(children, func, context) {
          if (null == children) return children;
          var result = [], count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function lazyInitializer(payload) {
          if (-1 === payload._status) {
            var ioInfo = payload._ioInfo;
            null != ioInfo && (ioInfo.start = ioInfo.end = performance.now());
            ioInfo = payload._result;
            var thenable = ioInfo();
            thenable.then(
              function(moduleObject) {
                if (0 === payload._status || -1 === payload._status) {
                  payload._status = 1;
                  payload._result = moduleObject;
                  var _ioInfo = payload._ioInfo;
                  null != _ioInfo && (_ioInfo.end = performance.now());
                  void 0 === thenable.status && (thenable.status = "fulfilled", thenable.value = moduleObject);
                }
              },
              function(error) {
                if (0 === payload._status || -1 === payload._status) {
                  payload._status = 2;
                  payload._result = error;
                  var _ioInfo2 = payload._ioInfo;
                  null != _ioInfo2 && (_ioInfo2.end = performance.now());
                  void 0 === thenable.status && (thenable.status = "rejected", thenable.reason = error);
                }
              }
            );
            ioInfo = payload._ioInfo;
            if (null != ioInfo) {
              ioInfo.value = thenable;
              var displayName = thenable.displayName;
              "string" === typeof displayName && (ioInfo.name = displayName);
            }
            -1 === payload._status && (payload._status = 0, payload._result = thenable);
          }
          if (1 === payload._status)
            return ioInfo = payload._result, void 0 === ioInfo && console.error(
              "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",
              ioInfo
            ), "default" in ioInfo || console.error(
              "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
              ioInfo
            ), ioInfo.default;
          throw payload._result;
        }
        function resolveDispatcher() {
          var dispatcher = ReactSharedInternals.H;
          null === dispatcher && console.error(
            "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
          );
          return dispatcher;
        }
        function releaseAsyncTransition() {
          ReactSharedInternals.asyncTransitions--;
        }
        function enqueueTask(task) {
          if (null === enqueueTaskImpl)
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              enqueueTaskImpl = (module && module[requireString]).call(
                module,
                "timers"
              ).setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                false === didWarnAboutMessageChannel && (didWarnAboutMessageChannel = true, "undefined" === typeof MessageChannel && console.error(
                  "This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."
                ));
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          return enqueueTaskImpl(task);
        }
        function aggregateErrors(errors) {
          return 1 < errors.length && "function" === typeof AggregateError ? new AggregateError(errors) : errors[0];
        }
        function popActScope(prevActQueue, prevActScopeDepth) {
          prevActScopeDepth !== actScopeDepth - 1 && console.error(
            "You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "
          );
          actScopeDepth = prevActScopeDepth;
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          var queue = ReactSharedInternals.actQueue;
          if (null !== queue)
            if (0 !== queue.length)
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                });
                return;
              } catch (error) {
                ReactSharedInternals.thrownErrors.push(error);
              }
            else ReactSharedInternals.actQueue = null;
          0 < ReactSharedInternals.thrownErrors.length ? (queue = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(queue)) : resolve(returnValue);
        }
        function flushActQueue(queue) {
          if (!isFlushing) {
            isFlushing = true;
            var i = 0;
            try {
              for (; i < queue.length; i++) {
                var callback = queue[i];
                do {
                  ReactSharedInternals.didUsePromise = false;
                  var continuation = callback(false);
                  if (null !== continuation) {
                    if (ReactSharedInternals.didUsePromise) {
                      queue[i] = callback;
                      queue.splice(0, i);
                      return;
                    }
                    callback = continuation;
                  } else break;
                } while (1);
              }
              queue.length = 0;
            } catch (error) {
              queue.splice(0, i + 1), ReactSharedInternals.thrownErrors.push(error);
            } finally {
              isFlushing = false;
            }
          }
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_ACTIVITY_TYPE = Symbol.for("react.activity"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, didWarnStateUpdateForUnmountedComponent = {}, ReactNoopUpdateQueue = {
          isMounted: function() {
            return false;
          },
          enqueueForceUpdate: function(publicInstance) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance) {
            warnNoop(publicInstance, "setState");
          }
        }, assign = Object.assign, emptyObject = {};
        Object.freeze(emptyObject);
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if ("object" !== typeof partialState && "function" !== typeof partialState && null != partialState)
            throw Error(
              "takes an object of state variables to update or a function which returns an object of state variables."
            );
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        var deprecatedAPIs = {
          isMounted: [
            "isMounted",
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
          ],
          replaceState: [
            "replaceState",
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
          ]
        };
        for (fnName in deprecatedAPIs)
          deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        ComponentDummy.prototype = Component.prototype;
        deprecatedAPIs = PureComponent.prototype = new ComponentDummy();
        deprecatedAPIs.constructor = PureComponent;
        assign(deprecatedAPIs, Component.prototype);
        deprecatedAPIs.isPureReactComponent = true;
        var isArrayImpl = Array.isArray, REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), ReactSharedInternals = {
          H: null,
          A: null,
          T: null,
          S: null,
          actQueue: null,
          asyncTransitions: 0,
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false,
          didUsePromise: false,
          thrownErrors: [],
          getCurrentStack: null,
          recentlyCreatedOwnerStacks: 0
        }, hasOwnProperty = Object.prototype.hasOwnProperty, createTask = console.createTask ? console.createTask : function() {
          return null;
        };
        deprecatedAPIs = {
          react_stack_bottom_frame: function(callStackForError) {
            return callStackForError();
          }
        };
        var specialPropKeyWarningShown, didWarnAboutOldJSXRuntime;
        var didWarnAboutElementRef = {};
        var unknownOwnerDebugStack = deprecatedAPIs.react_stack_bottom_frame.bind(
          deprecatedAPIs,
          UnknownOwner
        )();
        var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
        var didWarnAboutMaps = false, userProvidedKeyEscapeRegex = /\/+/g, reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
          if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
            var event = new window.ErrorEvent("error", {
              bubbles: true,
              cancelable: true,
              message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
              error
            });
            if (!window.dispatchEvent(event)) return;
          } else if ("object" === typeof process && "function" === typeof process.emit) {
            process.emit("uncaughtException", error);
            return;
          }
          console.error(error);
        }, didWarnAboutMessageChannel = false, enqueueTaskImpl = null, actScopeDepth = 0, didWarnNoAwaitAct = false, isFlushing = false, queueSeveralMicrotasks = "function" === typeof queueMicrotask ? function(callback) {
          queueMicrotask(function() {
            return queueMicrotask(callback);
          });
        } : enqueueTask;
        deprecatedAPIs = Object.freeze({
          __proto__: null,
          c: function(size) {
            return resolveDispatcher().useMemoCache(size);
          }
        });
        var fnName = {
          map: mapChildren,
          forEach: function(children, forEachFunc, forEachContext) {
            mapChildren(
              children,
              function() {
                forEachFunc.apply(this, arguments);
              },
              forEachContext
            );
          },
          count: function(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          },
          toArray: function(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          },
          only: function(children) {
            if (!isValidElement(children))
              throw Error(
                "React.Children.only expected to receive a single React element child."
              );
            return children;
          }
        };
        exports.Activity = REACT_ACTIVITY_TYPE;
        exports.Children = fnName;
        exports.Component = Component;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
        exports.__COMPILER_RUNTIME = deprecatedAPIs;
        exports.act = function(callback) {
          var prevActQueue = ReactSharedInternals.actQueue, prevActScopeDepth = actScopeDepth;
          actScopeDepth++;
          var queue = ReactSharedInternals.actQueue = null !== prevActQueue ? prevActQueue : [], didAwaitActCall = false;
          try {
            var result = callback();
          } catch (error) {
            ReactSharedInternals.thrownErrors.push(error);
          }
          if (0 < ReactSharedInternals.thrownErrors.length)
            throw popActScope(prevActQueue, prevActScopeDepth), callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
          if (null !== result && "object" === typeof result && "function" === typeof result.then) {
            var thenable = result;
            queueSeveralMicrotasks(function() {
              didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = true, console.error(
                "You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"
              ));
            });
            return {
              then: function(resolve, reject) {
                didAwaitActCall = true;
                thenable.then(
                  function(returnValue) {
                    popActScope(prevActQueue, prevActScopeDepth);
                    if (0 === prevActScopeDepth) {
                      try {
                        flushActQueue(queue), enqueueTask(function() {
                          return recursivelyFlushAsyncActWork(
                            returnValue,
                            resolve,
                            reject
                          );
                        });
                      } catch (error$0) {
                        ReactSharedInternals.thrownErrors.push(error$0);
                      }
                      if (0 < ReactSharedInternals.thrownErrors.length) {
                        var _thrownError = aggregateErrors(
                          ReactSharedInternals.thrownErrors
                        );
                        ReactSharedInternals.thrownErrors.length = 0;
                        reject(_thrownError);
                      }
                    } else resolve(returnValue);
                  },
                  function(error) {
                    popActScope(prevActQueue, prevActScopeDepth);
                    0 < ReactSharedInternals.thrownErrors.length ? (error = aggregateErrors(
                      ReactSharedInternals.thrownErrors
                    ), ReactSharedInternals.thrownErrors.length = 0, reject(error)) : reject(error);
                  }
                );
              }
            };
          }
          var returnValue$jscomp$0 = result;
          popActScope(prevActQueue, prevActScopeDepth);
          0 === prevActScopeDepth && (flushActQueue(queue), 0 !== queue.length && queueSeveralMicrotasks(function() {
            didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = true, console.error(
              "A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"
            ));
          }), ReactSharedInternals.actQueue = null);
          if (0 < ReactSharedInternals.thrownErrors.length)
            throw callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
          return {
            then: function(resolve, reject) {
              didAwaitActCall = true;
              0 === prevActScopeDepth ? (ReactSharedInternals.actQueue = queue, enqueueTask(function() {
                return recursivelyFlushAsyncActWork(
                  returnValue$jscomp$0,
                  resolve,
                  reject
                );
              })) : resolve(returnValue$jscomp$0);
            }
          };
        };
        exports.cache = function(fn) {
          return function() {
            return fn.apply(null, arguments);
          };
        };
        exports.cacheSignal = function() {
          return null;
        };
        exports.captureOwnerStack = function() {
          var getCurrentStack = ReactSharedInternals.getCurrentStack;
          return null === getCurrentStack ? null : getCurrentStack();
        };
        exports.cloneElement = function(element, config, children) {
          if (null === element || void 0 === element)
            throw Error(
              "The argument must be a React element, but you passed " + element + "."
            );
          var props = assign({}, element.props), key = element.key, owner = element._owner;
          if (null != config) {
            var JSCompiler_inline_result;
            a: {
              if (hasOwnProperty.call(config, "ref") && (JSCompiler_inline_result = Object.getOwnPropertyDescriptor(
                config,
                "ref"
              ).get) && JSCompiler_inline_result.isReactWarning) {
                JSCompiler_inline_result = false;
                break a;
              }
              JSCompiler_inline_result = void 0 !== config.ref;
            }
            JSCompiler_inline_result && (owner = getOwner());
            hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key);
            for (propName in config)
              !hasOwnProperty.call(config, propName) || "key" === propName || "__self" === propName || "__source" === propName || "ref" === propName && void 0 === config.ref || (props[propName] = config[propName]);
          }
          var propName = arguments.length - 2;
          if (1 === propName) props.children = children;
          else if (1 < propName) {
            JSCompiler_inline_result = Array(propName);
            for (var i = 0; i < propName; i++)
              JSCompiler_inline_result[i] = arguments[i + 2];
            props.children = JSCompiler_inline_result;
          }
          props = ReactElement(
            element.type,
            key,
            props,
            owner,
            element._debugStack,
            element._debugTask
          );
          for (key = 2; key < arguments.length; key++)
            validateChildKeys(arguments[key]);
          return props;
        };
        exports.createContext = function(defaultValue) {
          defaultValue = {
            $$typeof: REACT_CONTEXT_TYPE,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          defaultValue.Provider = defaultValue;
          defaultValue.Consumer = {
            $$typeof: REACT_CONSUMER_TYPE,
            _context: defaultValue
          };
          defaultValue._currentRenderer = null;
          defaultValue._currentRenderer2 = null;
          return defaultValue;
        };
        exports.createElement = function(type, config, children) {
          for (var i = 2; i < arguments.length; i++)
            validateChildKeys(arguments[i]);
          i = {};
          var key = null;
          if (null != config)
            for (propName in didWarnAboutOldJSXRuntime || !("__self" in config) || "key" in config || (didWarnAboutOldJSXRuntime = true, console.warn(
              "Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform"
            )), hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key), config)
              hasOwnProperty.call(config, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (i[propName] = config[propName]);
          var childrenLength = arguments.length - 2;
          if (1 === childrenLength) i.children = children;
          else if (1 < childrenLength) {
            for (var childArray = Array(childrenLength), _i = 0; _i < childrenLength; _i++)
              childArray[_i] = arguments[_i + 2];
            Object.freeze && Object.freeze(childArray);
            i.children = childArray;
          }
          if (type && type.defaultProps)
            for (propName in childrenLength = type.defaultProps, childrenLength)
              void 0 === i[propName] && (i[propName] = childrenLength[propName]);
          key && defineKeyPropWarningGetter(
            i,
            "function" === typeof type ? type.displayName || type.name || "Unknown" : type
          );
          var propName = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
          return ReactElement(
            type,
            key,
            i,
            getOwner(),
            propName ? Error("react-stack-top-frame") : unknownOwnerDebugStack,
            propName ? createTask(getTaskName(type)) : unknownOwnerDebugTask
          );
        };
        exports.createRef = function() {
          var refObject = { current: null };
          Object.seal(refObject);
          return refObject;
        };
        exports.forwardRef = function(render) {
          null != render && render.$$typeof === REACT_MEMO_TYPE ? console.error(
            "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."
          ) : "function" !== typeof render ? console.error(
            "forwardRef requires a render function but was given %s.",
            null === render ? "null" : typeof render
          ) : 0 !== render.length && 2 !== render.length && console.error(
            "forwardRef render functions accept exactly two parameters: props and ref. %s",
            1 === render.length ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."
          );
          null != render && null != render.defaultProps && console.error(
            "forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?"
          );
          var elementType = { $$typeof: REACT_FORWARD_REF_TYPE, render }, ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              render.name || render.displayName || (Object.defineProperty(render, "name", { value: name }), render.displayName = name);
            }
          });
          return elementType;
        };
        exports.isValidElement = isValidElement;
        exports.lazy = function(ctor) {
          ctor = { _status: -1, _result: ctor };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: ctor,
            _init: lazyInitializer
          }, ioInfo = {
            name: "lazy",
            start: -1,
            end: -1,
            value: null,
            owner: null,
            debugStack: Error("react-stack-top-frame"),
            debugTask: console.createTask ? console.createTask("lazy()") : null
          };
          ctor._ioInfo = ioInfo;
          lazyType._debugInfo = [{ awaited: ioInfo }];
          return lazyType;
        };
        exports.memo = function(type, compare) {
          null == type && console.error(
            "memo: The first argument must be a component. Instead received: %s",
            null === type ? "null" : typeof type
          );
          compare = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: void 0 === compare ? null : compare
          };
          var ownName;
          Object.defineProperty(compare, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              type.name || type.displayName || (Object.defineProperty(type, "name", { value: name }), type.displayName = name);
            }
          });
          return compare;
        };
        exports.startTransition = function(scope) {
          var prevTransition = ReactSharedInternals.T, currentTransition = {};
          currentTransition._updatedFibers = /* @__PURE__ */ new Set();
          ReactSharedInternals.T = currentTransition;
          try {
            var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && (ReactSharedInternals.asyncTransitions++, returnValue.then(releaseAsyncTransition, releaseAsyncTransition), returnValue.then(noop, reportGlobalError));
          } catch (error) {
            reportGlobalError(error);
          } finally {
            null === prevTransition && currentTransition._updatedFibers && (scope = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < scope && console.warn(
              "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
            )), null !== prevTransition && null !== currentTransition.types && (null !== prevTransition.types && prevTransition.types !== currentTransition.types && console.error(
              "We expected inner Transitions to have transferred the outer types set and that you cannot add to the outer Transition while inside the inner.This is a bug in React."
            ), prevTransition.types = currentTransition.types), ReactSharedInternals.T = prevTransition;
          }
        };
        exports.unstable_useCacheRefresh = function() {
          return resolveDispatcher().useCacheRefresh();
        };
        exports.use = function(usable) {
          return resolveDispatcher().use(usable);
        };
        exports.useActionState = function(action, initialState, permalink) {
          return resolveDispatcher().useActionState(
            action,
            initialState,
            permalink
          );
        };
        exports.useCallback = function(callback, deps) {
          return resolveDispatcher().useCallback(callback, deps);
        };
        exports.useContext = function(Context) {
          var dispatcher = resolveDispatcher();
          Context.$$typeof === REACT_CONSUMER_TYPE && console.error(
            "Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?"
          );
          return dispatcher.useContext(Context);
        };
        exports.useDebugValue = function(value, formatterFn) {
          return resolveDispatcher().useDebugValue(value, formatterFn);
        };
        exports.useDeferredValue = function(value, initialValue) {
          return resolveDispatcher().useDeferredValue(value, initialValue);
        };
        exports.useEffect = function(create, deps) {
          null == create && console.warn(
            "React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?"
          );
          return resolveDispatcher().useEffect(create, deps);
        };
        exports.useEffectEvent = function(callback) {
          return resolveDispatcher().useEffectEvent(callback);
        };
        exports.useId = function() {
          return resolveDispatcher().useId();
        };
        exports.useImperativeHandle = function(ref, create, deps) {
          return resolveDispatcher().useImperativeHandle(ref, create, deps);
        };
        exports.useInsertionEffect = function(create, deps) {
          null == create && console.warn(
            "React Hook useInsertionEffect requires an effect callback. Did you forget to pass a callback to the hook?"
          );
          return resolveDispatcher().useInsertionEffect(create, deps);
        };
        exports.useLayoutEffect = function(create, deps) {
          null == create && console.warn(
            "React Hook useLayoutEffect requires an effect callback. Did you forget to pass a callback to the hook?"
          );
          return resolveDispatcher().useLayoutEffect(create, deps);
        };
        exports.useMemo = function(create, deps) {
          return resolveDispatcher().useMemo(create, deps);
        };
        exports.useOptimistic = function(passthrough, reducer) {
          return resolveDispatcher().useOptimistic(passthrough, reducer);
        };
        exports.useReducer = function(reducer, initialArg, init) {
          return resolveDispatcher().useReducer(reducer, initialArg, init);
        };
        exports.useRef = function(initialValue) {
          return resolveDispatcher().useRef(initialValue);
        };
        exports.useState = function(initialState) {
          return resolveDispatcher().useState(initialState);
        };
        exports.useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
          return resolveDispatcher().useSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        };
        exports.useTransition = function() {
          return resolveDispatcher().useTransition();
        };
        exports.version = "19.2.0";
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      (function() {
        function noop() {
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function createPortal$1(children, containerInfo, implementation) {
          var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
          try {
            testStringCoercion(key);
            var JSCompiler_inline_result = false;
          } catch (e) {
            JSCompiler_inline_result = true;
          }
          JSCompiler_inline_result && (console.error(
            "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
            "function" === typeof Symbol && Symbol.toStringTag && key[Symbol.toStringTag] || key.constructor.name || "Object"
          ), testStringCoercion(key));
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: null == key ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        function getCrossOriginStringAs(as, input) {
          if ("font" === as) return "";
          if ("string" === typeof input)
            return "use-credentials" === input ? input : "";
        }
        function getValueDescriptorExpectingObjectForWarning(thing) {
          return null === thing ? "`null`" : void 0 === thing ? "`undefined`" : "" === thing ? "an empty string" : 'something with type "' + typeof thing + '"';
        }
        function getValueDescriptorExpectingEnumForWarning(thing) {
          return null === thing ? "`null`" : void 0 === thing ? "`undefined`" : "" === thing ? "an empty string" : "string" === typeof thing ? JSON.stringify(thing) : "number" === typeof thing ? "`" + thing + "`" : 'something with type "' + typeof thing + '"';
        }
        function resolveDispatcher() {
          var dispatcher = ReactSharedInternals.H;
          null === dispatcher && console.error(
            "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
          );
          return dispatcher;
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        var React90 = require_react(), Internals = {
          d: {
            f: noop,
            r: function() {
              throw Error(
                "Invalid form element. requestFormReset must be passed a form that was rendered by React."
              );
            },
            D: noop,
            C: noop,
            L: noop,
            m: noop,
            X: noop,
            S: noop,
            M: noop
          },
          p: 0,
          findDOMNode: null
        }, REACT_PORTAL_TYPE = Symbol.for("react.portal"), ReactSharedInternals = React90.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
        "function" === typeof Map && null != Map.prototype && "function" === typeof Map.prototype.forEach && "function" === typeof Set && null != Set.prototype && "function" === typeof Set.prototype.clear && "function" === typeof Set.prototype.forEach || console.error(
          "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"
        );
        exports.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals;
        exports.createPortal = function(children, container) {
          var key = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
          if (!container || 1 !== container.nodeType && 9 !== container.nodeType && 11 !== container.nodeType)
            throw Error("Target container is not a DOM element.");
          return createPortal$1(children, container, null, key);
        };
        exports.flushSync = function(fn) {
          var previousTransition = ReactSharedInternals.T, previousUpdatePriority = Internals.p;
          try {
            if (ReactSharedInternals.T = null, Internals.p = 2, fn)
              return fn();
          } finally {
            ReactSharedInternals.T = previousTransition, Internals.p = previousUpdatePriority, Internals.d.f() && console.error(
              "flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."
            );
          }
        };
        exports.preconnect = function(href, options) {
          "string" === typeof href && href ? null != options && "object" !== typeof options ? console.error(
            "ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.",
            getValueDescriptorExpectingEnumForWarning(options)
          ) : null != options && "string" !== typeof options.crossOrigin && console.error(
            "ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.",
            getValueDescriptorExpectingObjectForWarning(options.crossOrigin)
          ) : console.error(
            "ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
            getValueDescriptorExpectingObjectForWarning(href)
          );
          "string" === typeof href && (options ? (options = options.crossOrigin, options = "string" === typeof options ? "use-credentials" === options ? options : "" : void 0) : options = null, Internals.d.C(href, options));
        };
        exports.prefetchDNS = function(href) {
          if ("string" !== typeof href || !href)
            console.error(
              "ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
              getValueDescriptorExpectingObjectForWarning(href)
            );
          else if (1 < arguments.length) {
            var options = arguments[1];
            "object" === typeof options && options.hasOwnProperty("crossOrigin") ? console.error(
              "ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",
              getValueDescriptorExpectingEnumForWarning(options)
            ) : console.error(
              "ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",
              getValueDescriptorExpectingEnumForWarning(options)
            );
          }
          "string" === typeof href && Internals.d.D(href);
        };
        exports.preinit = function(href, options) {
          "string" === typeof href && href ? null == options || "object" !== typeof options ? console.error(
            "ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.",
            getValueDescriptorExpectingEnumForWarning(options)
          ) : "style" !== options.as && "script" !== options.as && console.error(
            'ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".',
            getValueDescriptorExpectingEnumForWarning(options.as)
          ) : console.error(
            "ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
            getValueDescriptorExpectingObjectForWarning(href)
          );
          if ("string" === typeof href && options && "string" === typeof options.as) {
            var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin), integrity = "string" === typeof options.integrity ? options.integrity : void 0, fetchPriority = "string" === typeof options.fetchPriority ? options.fetchPriority : void 0;
            "style" === as ? Internals.d.S(
              href,
              "string" === typeof options.precedence ? options.precedence : void 0,
              {
                crossOrigin,
                integrity,
                fetchPriority
              }
            ) : "script" === as && Internals.d.X(href, {
              crossOrigin,
              integrity,
              fetchPriority,
              nonce: "string" === typeof options.nonce ? options.nonce : void 0
            });
          }
        };
        exports.preinitModule = function(href, options) {
          var encountered = "";
          "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
          void 0 !== options && "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && "as" in options && "script" !== options.as && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingEnumForWarning(options.as) + ".");
          if (encountered)
            console.error(
              "ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s",
              encountered
            );
          else
            switch (encountered = options && "string" === typeof options.as ? options.as : "script", encountered) {
              case "script":
                break;
              default:
                encountered = getValueDescriptorExpectingEnumForWarning(encountered), console.error(
                  'ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)',
                  encountered,
                  href
                );
            }
          if ("string" === typeof href)
            if ("object" === typeof options && null !== options) {
              if (null == options.as || "script" === options.as)
                encountered = getCrossOriginStringAs(
                  options.as,
                  options.crossOrigin
                ), Internals.d.M(href, {
                  crossOrigin: encountered,
                  integrity: "string" === typeof options.integrity ? options.integrity : void 0,
                  nonce: "string" === typeof options.nonce ? options.nonce : void 0
                });
            } else null == options && Internals.d.M(href);
        };
        exports.preload = function(href, options) {
          var encountered = "";
          "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
          null == options || "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : "string" === typeof options.as && options.as || (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
          encountered && console.error(
            'ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s',
            encountered
          );
          if ("string" === typeof href && "object" === typeof options && null !== options && "string" === typeof options.as) {
            encountered = options.as;
            var crossOrigin = getCrossOriginStringAs(
              encountered,
              options.crossOrigin
            );
            Internals.d.L(href, encountered, {
              crossOrigin,
              integrity: "string" === typeof options.integrity ? options.integrity : void 0,
              nonce: "string" === typeof options.nonce ? options.nonce : void 0,
              type: "string" === typeof options.type ? options.type : void 0,
              fetchPriority: "string" === typeof options.fetchPriority ? options.fetchPriority : void 0,
              referrerPolicy: "string" === typeof options.referrerPolicy ? options.referrerPolicy : void 0,
              imageSrcSet: "string" === typeof options.imageSrcSet ? options.imageSrcSet : void 0,
              imageSizes: "string" === typeof options.imageSizes ? options.imageSizes : void 0,
              media: "string" === typeof options.media ? options.media : void 0
            });
          }
        };
        exports.preloadModule = function(href, options) {
          var encountered = "";
          "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
          void 0 !== options && "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && "as" in options && "string" !== typeof options.as && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
          encountered && console.error(
            'ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s',
            encountered
          );
          "string" === typeof href && (options ? (encountered = getCrossOriginStringAs(
            options.as,
            options.crossOrigin
          ), Internals.d.m(href, {
            as: "string" === typeof options.as && "script" !== options.as ? options.as : void 0,
            crossOrigin: encountered,
            integrity: "string" === typeof options.integrity ? options.integrity : void 0
          })) : Internals.d.m(href));
        };
        exports.requestFormReset = function(form) {
          Internals.d.r(form);
        };
        exports.unstable_batchedUpdates = function(fn, a) {
          return fn(a);
        };
        exports.useFormState = function(action, initialState, permalink) {
          return resolveDispatcher().useFormState(action, initialState, permalink);
        };
        exports.useFormStatus = function() {
          return resolveDispatcher().useHostTransitionStatus();
        };
        exports.version = "19.2.0";
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom-client.development.js
  var require_react_dom_client_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom-client.development.js"(exports) {
      "use strict";
      (function() {
        function findHook(fiber, id) {
          for (fiber = fiber.memoizedState; null !== fiber && 0 < id; )
            fiber = fiber.next, id--;
          return fiber;
        }
        function copyWithSetImpl(obj, path, index, value) {
          if (index >= path.length) return value;
          var key = path[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
          return updated;
        }
        function copyWithRename(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length)
            console.warn("copyWithRename() expects paths of the same length");
          else {
            for (var i = 0; i < newPath.length - 1; i++)
              if (oldPath[i] !== newPath[i]) {
                console.warn(
                  "copyWithRename() expects paths to be the same except for the deepest key"
                );
                return;
              }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          }
        }
        function copyWithRenameImpl(obj, oldPath, newPath, index) {
          var oldKey = oldPath[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
          index + 1 === oldPath.length ? (updated[newPath[index]] = updated[oldKey], isArrayImpl(updated) ? updated.splice(oldKey, 1) : delete updated[oldKey]) : updated[oldKey] = copyWithRenameImpl(
            obj[oldKey],
            oldPath,
            newPath,
            index + 1
          );
          return updated;
        }
        function copyWithDeleteImpl(obj, path, index) {
          var key = path[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
          if (index + 1 === path.length)
            return isArrayImpl(updated) ? updated.splice(key, 1) : delete updated[key], updated;
          updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
          return updated;
        }
        function shouldSuspendImpl() {
          return false;
        }
        function shouldErrorImpl() {
          return null;
        }
        function warnInvalidHookAccess() {
          console.error(
            "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks"
          );
        }
        function warnInvalidContextAccess() {
          console.error(
            "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
          );
        }
        function noop() {
        }
        function warnForMissingKey() {
        }
        function setToSortedString(set) {
          var array = [];
          set.forEach(function(value) {
            array.push(value);
          });
          return array.sort().join(", ");
        }
        function createFiber(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        }
        function scheduleRoot(root3, element) {
          root3.context === emptyContextObject && (updateContainerImpl(root3.current, 2, element, root3, null, null), flushSyncWork$1());
        }
        function scheduleRefresh(root3, update) {
          if (null !== resolveFamily) {
            var staleFamilies = update.staleFamilies;
            update = update.updatedFamilies;
            flushPendingEffects();
            scheduleFibersWithFamiliesRecursively(
              root3.current,
              update,
              staleFamilies
            );
            flushSyncWork$1();
          }
        }
        function setRefreshHandler(handler) {
          resolveFamily = handler;
        }
        function isValidContainer(node) {
          return !(!node || 1 !== node.nodeType && 9 !== node.nodeType && 11 !== node.nodeType);
        }
        function getNearestMountedFiber(fiber) {
          var node = fiber, nearestMounted = fiber;
          if (fiber.alternate) for (; node.return; ) node = node.return;
          else {
            fiber = node;
            do
              node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return;
            while (fiber);
          }
          return 3 === node.tag ? nearestMounted : null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (13 === fiber.tag) {
            var suspenseState = fiber.memoizedState;
            null === suspenseState && (fiber = fiber.alternate, null !== fiber && (suspenseState = fiber.memoizedState));
            if (null !== suspenseState) return suspenseState.dehydrated;
          }
          return null;
        }
        function getActivityInstanceFromFiber(fiber) {
          if (31 === fiber.tag) {
            var activityState = fiber.memoizedState;
            null === activityState && (fiber = fiber.alternate, null !== fiber && (activityState = fiber.memoizedState));
            if (null !== activityState) return activityState.dehydrated;
          }
          return null;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber)
            throw Error("Unable to find node on an unmounted component.");
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            alternate = getNearestMountedFiber(fiber);
            if (null === alternate)
              throw Error("Unable to find node on an unmounted component.");
            return alternate !== fiber ? null : fiber;
          }
          for (var a = fiber, b = alternate; ; ) {
            var parentA = a.return;
            if (null === parentA) break;
            var parentB = parentA.alternate;
            if (null === parentB) {
              b = parentA.return;
              if (null !== b) {
                a = b;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              for (parentB = parentA.child; parentB; ) {
                if (parentB === a) return assertIsMounted(parentA), fiber;
                if (parentB === b) return assertIsMounted(parentA), alternate;
                parentB = parentB.sibling;
              }
              throw Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) a = parentA, b = parentB;
            else {
              for (var didFindChild = false, _child = parentA.child; _child; ) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                for (_child = parentB.child; _child; ) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild)
                  throw Error(
                    "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."
                  );
              }
            }
            if (a.alternate !== b)
              throw Error(
                "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
              );
          }
          if (3 !== a.tag)
            throw Error("Unable to find node on an unmounted component.");
          return a.stateNode.current === a ? fiber : alternate;
        }
        function findCurrentHostFiberImpl(node) {
          var tag = node.tag;
          if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
          for (node = node.child; null !== node; ) {
            tag = findCurrentHostFiberImpl(node);
            if (null !== tag) return tag;
            node = node.sibling;
          }
          return null;
        }
        function getIteratorFn(maybeIterable) {
          if (null === maybeIterable || "object" !== typeof maybeIterable)
            return null;
          maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
          return "function" === typeof maybeIterable ? maybeIterable : null;
        }
        function getComponentNameFromType(type) {
          if (null == type) return null;
          if ("function" === typeof type)
            return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
          if ("string" === typeof type) return type;
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_ACTIVITY_TYPE:
              return "Activity";
          }
          if ("object" === typeof type)
            switch ("number" === typeof type.tag && console.error(
              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
            ), type.$$typeof) {
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_CONTEXT_TYPE:
                return type.displayName || "Context";
              case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
              case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
              case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                  return getComponentNameFromType(type(innerType));
                } catch (x) {
                }
            }
          return null;
        }
        function getComponentNameFromOwner(owner) {
          return "number" === typeof owner.tag ? getComponentNameFromFiber(owner) : "string" === typeof owner.name ? owner.name : null;
        }
        function getComponentNameFromFiber(fiber) {
          var type = fiber.type;
          switch (fiber.tag) {
            case 31:
              return "Activity";
            case 24:
              return "Cache";
            case 9:
              return (type._context.displayName || "Context") + ".Consumer";
            case 10:
              return type.displayName || "Context";
            case 18:
              return "DehydratedFragment";
            case 11:
              return fiber = type.render, fiber = fiber.displayName || fiber.name || "", type.displayName || ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef");
            case 7:
              return "Fragment";
            case 26:
            case 27:
            case 5:
              return type;
            case 4:
              return "Portal";
            case 3:
              return "Root";
            case 6:
              return "Text";
            case 16:
              return getComponentNameFromType(type);
            case 8:
              return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
            case 22:
              return "Offscreen";
            case 12:
              return "Profiler";
            case 21:
              return "Scope";
            case 13:
              return "Suspense";
            case 19:
              return "SuspenseList";
            case 25:
              return "TracingMarker";
            case 1:
            case 0:
            case 14:
            case 15:
              if ("function" === typeof type)
                return type.displayName || type.name || null;
              if ("string" === typeof type) return type;
              break;
            case 29:
              type = fiber._debugInfo;
              if (null != type) {
                for (var i = type.length - 1; 0 <= i; i--)
                  if ("string" === typeof type[i].name) return type[i].name;
              }
              if (null !== fiber.return)
                return getComponentNameFromFiber(fiber.return);
          }
          return null;
        }
        function createCursor(defaultValue) {
          return { current: defaultValue };
        }
        function pop(cursor, fiber) {
          0 > index$jscomp$0 ? console.error("Unexpected pop.") : (fiber !== fiberStack[index$jscomp$0] && console.error("Unexpected Fiber popped."), cursor.current = valueStack[index$jscomp$0], valueStack[index$jscomp$0] = null, fiberStack[index$jscomp$0] = null, index$jscomp$0--);
        }
        function push(cursor, value, fiber) {
          index$jscomp$0++;
          valueStack[index$jscomp$0] = cursor.current;
          fiberStack[index$jscomp$0] = fiber;
          cursor.current = value;
        }
        function requiredContext(c) {
          null === c && console.error(
            "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."
          );
          return c;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor, null, fiber);
          var nextRootContext = nextRootInstance.nodeType;
          switch (nextRootContext) {
            case 9:
            case 11:
              nextRootContext = 9 === nextRootContext ? "#document" : "#fragment";
              nextRootInstance = (nextRootInstance = nextRootInstance.documentElement) ? (nextRootInstance = nextRootInstance.namespaceURI) ? getOwnHostContext(nextRootInstance) : HostContextNamespaceNone : HostContextNamespaceNone;
              break;
            default:
              if (nextRootContext = nextRootInstance.tagName, nextRootInstance = nextRootInstance.namespaceURI)
                nextRootInstance = getOwnHostContext(nextRootInstance), nextRootInstance = getChildHostContextProd(
                  nextRootInstance,
                  nextRootContext
                );
              else
                switch (nextRootContext) {
                  case "svg":
                    nextRootInstance = HostContextNamespaceSvg;
                    break;
                  case "math":
                    nextRootInstance = HostContextNamespaceMath;
                    break;
                  default:
                    nextRootInstance = HostContextNamespaceNone;
                }
          }
          nextRootContext = nextRootContext.toLowerCase();
          nextRootContext = updatedAncestorInfoDev(null, nextRootContext);
          nextRootContext = {
            context: nextRootInstance,
            ancestorInfo: nextRootContext
          };
          pop(contextStackCursor, fiber);
          push(contextStackCursor, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          return requiredContext(contextStackCursor.current);
        }
        function pushHostContext(fiber) {
          null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber, fiber);
          var context = requiredContext(contextStackCursor.current);
          var type = fiber.type;
          var nextContext = getChildHostContextProd(context.context, type);
          type = updatedAncestorInfoDev(context.ancestorInfo, type);
          nextContext = { context: nextContext, ancestorInfo: type };
          context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor, nextContext, fiber));
        }
        function popHostContext(fiber) {
          contextFiberStackCursor.current === fiber && (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
          hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor, fiber), HostTransitionContext._currentValue = NotPendingTransition);
        }
        function disabledLog() {
        }
        function disableLogs() {
          if (0 === disabledDepth) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
        function reenableLogs() {
          disabledDepth--;
          if (0 === disabledDepth) {
            var props = { configurable: true, enumerable: true, writable: true };
            Object.defineProperties(console, {
              log: assign({}, props, { value: prevLog }),
              info: assign({}, props, { value: prevInfo }),
              warn: assign({}, props, { value: prevWarn }),
              error: assign({}, props, { value: prevError }),
              group: assign({}, props, { value: prevGroup }),
              groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),
              groupEnd: assign({}, props, { value: prevGroupEnd })
            });
          }
          0 > disabledDepth && console.error(
            "disabledDepth fell below zero. This is a bug in React. Please file an issue."
          );
        }
        function formatOwnerStack(error) {
          var prevPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          error = error.stack;
          Error.prepareStackTrace = prevPrepareStackTrace;
          error.startsWith("Error: react-stack-top-frame\n") && (error = error.slice(29));
          prevPrepareStackTrace = error.indexOf("\n");
          -1 !== prevPrepareStackTrace && (error = error.slice(prevPrepareStackTrace + 1));
          prevPrepareStackTrace = error.indexOf("react_stack_bottom_frame");
          -1 !== prevPrepareStackTrace && (prevPrepareStackTrace = error.lastIndexOf(
            "\n",
            prevPrepareStackTrace
          ));
          if (-1 !== prevPrepareStackTrace)
            error = error.slice(0, prevPrepareStackTrace);
          else return "";
          return error;
        }
        function describeBuiltInComponentFrame(name) {
          if (void 0 === prefix)
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
              suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
            }
          return "\n" + prefix + name + suffix;
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) return "";
          var frame = componentFrameCache.get(fn);
          if (void 0 !== frame) return frame;
          reentry = true;
          frame = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher2 = null;
          previousDispatcher2 = ReactSharedInternals.H;
          ReactSharedInternals.H = null;
          disableLogs();
          try {
            var RunInRootFrame = {
              DetermineComponentFrameRoot: function() {
                try {
                  if (construct) {
                    var Fake = function() {
                      throw Error();
                    };
                    Object.defineProperty(Fake.prototype, "props", {
                      set: function() {
                        throw Error();
                      }
                    });
                    if ("object" === typeof Reflect && Reflect.construct) {
                      try {
                        Reflect.construct(Fake, []);
                      } catch (x) {
                        var control = x;
                      }
                      Reflect.construct(fn, [], Fake);
                    } else {
                      try {
                        Fake.call();
                      } catch (x$0) {
                        control = x$0;
                      }
                      fn.call(Fake.prototype);
                    }
                  } else {
                    try {
                      throw Error();
                    } catch (x$1) {
                      control = x$1;
                    }
                    (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {
                    });
                  }
                } catch (sample) {
                  if (sample && control && "string" === typeof sample.stack)
                    return [sample.stack, control.stack];
                }
                return [null, null];
              }
            };
            RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
            var namePropDescriptor = Object.getOwnPropertyDescriptor(
              RunInRootFrame.DetermineComponentFrameRoot,
              "name"
            );
            namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(
              RunInRootFrame.DetermineComponentFrameRoot,
              "name",
              { value: "DetermineComponentFrameRoot" }
            );
            var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
            if (sampleStack && controlStack) {
              var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
              for (_RunInRootFrame$Deter = namePropDescriptor = 0; namePropDescriptor < sampleLines.length && !sampleLines[namePropDescriptor].includes(
                "DetermineComponentFrameRoot"
              ); )
                namePropDescriptor++;
              for (; _RunInRootFrame$Deter < controlLines.length && !controlLines[_RunInRootFrame$Deter].includes(
                "DetermineComponentFrameRoot"
              ); )
                _RunInRootFrame$Deter++;
              if (namePropDescriptor === sampleLines.length || _RunInRootFrame$Deter === controlLines.length)
                for (namePropDescriptor = sampleLines.length - 1, _RunInRootFrame$Deter = controlLines.length - 1; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter && sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]; )
                  _RunInRootFrame$Deter--;
              for (; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter; namePropDescriptor--, _RunInRootFrame$Deter--)
                if (sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                  if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {
                    do
                      if (namePropDescriptor--, _RunInRootFrame$Deter--, 0 > _RunInRootFrame$Deter || sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                        var _frame = "\n" + sampleLines[namePropDescriptor].replace(
                          " at new ",
                          " at "
                        );
                        fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName));
                        "function" === typeof fn && componentFrameCache.set(fn, _frame);
                        return _frame;
                      }
                    while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);
                  }
                  break;
                }
            }
          } finally {
            reentry = false, ReactSharedInternals.H = previousDispatcher2, reenableLogs(), Error.prepareStackTrace = frame;
          }
          sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(sampleLines) : "";
          "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
          return sampleLines;
        }
        function describeFiber(fiber, childFiber) {
          switch (fiber.tag) {
            case 26:
            case 27:
            case 5:
              return describeBuiltInComponentFrame(fiber.type);
            case 16:
              return describeBuiltInComponentFrame("Lazy");
            case 13:
              return fiber.child !== childFiber && null !== childFiber ? describeBuiltInComponentFrame("Suspense Fallback") : describeBuiltInComponentFrame("Suspense");
            case 19:
              return describeBuiltInComponentFrame("SuspenseList");
            case 0:
            case 15:
              return describeNativeComponentFrame(fiber.type, false);
            case 11:
              return describeNativeComponentFrame(fiber.type.render, false);
            case 1:
              return describeNativeComponentFrame(fiber.type, true);
            case 31:
              return describeBuiltInComponentFrame("Activity");
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "", previous = null;
            do {
              info += describeFiber(workInProgress2, previous);
              var debugInfo = workInProgress2._debugInfo;
              if (debugInfo)
                for (var i = debugInfo.length - 1; 0 <= i; i--) {
                  var entry = debugInfo[i];
                  if ("string" === typeof entry.name) {
                    var JSCompiler_temp_const = info;
                    a: {
                      var name = entry.name, env = entry.env, location = entry.debugLocation;
                      if (null != location) {
                        var childStack = formatOwnerStack(location), idx = childStack.lastIndexOf("\n"), lastLine = -1 === idx ? childStack : childStack.slice(idx + 1);
                        if (-1 !== lastLine.indexOf(name)) {
                          var JSCompiler_inline_result = "\n" + lastLine;
                          break a;
                        }
                      }
                      JSCompiler_inline_result = describeBuiltInComponentFrame(
                        name + (env ? " [" + env + "]" : "")
                      );
                    }
                    info = JSCompiler_temp_const + JSCompiler_inline_result;
                  }
                }
              previous = workInProgress2;
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        function describeFunctionComponentFrameWithoutLineNumber(fn) {
          return (fn = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(fn) : "";
        }
        function getCurrentFiberOwnerNameInDevOrNull() {
          if (null === current) return null;
          var owner = current._debugOwner;
          return null != owner ? getComponentNameFromOwner(owner) : null;
        }
        function getCurrentFiberStackInDev() {
          if (null === current) return "";
          var workInProgress2 = current;
          try {
            var info = "";
            6 === workInProgress2.tag && (workInProgress2 = workInProgress2.return);
            switch (workInProgress2.tag) {
              case 26:
              case 27:
              case 5:
                info += describeBuiltInComponentFrame(workInProgress2.type);
                break;
              case 13:
                info += describeBuiltInComponentFrame("Suspense");
                break;
              case 19:
                info += describeBuiltInComponentFrame("SuspenseList");
                break;
              case 31:
                info += describeBuiltInComponentFrame("Activity");
                break;
              case 30:
              case 0:
              case 15:
              case 1:
                workInProgress2._debugOwner || "" !== info || (info += describeFunctionComponentFrameWithoutLineNumber(
                  workInProgress2.type
                ));
                break;
              case 11:
                workInProgress2._debugOwner || "" !== info || (info += describeFunctionComponentFrameWithoutLineNumber(
                  workInProgress2.type.render
                ));
            }
            for (; workInProgress2; )
              if ("number" === typeof workInProgress2.tag) {
                var fiber = workInProgress2;
                workInProgress2 = fiber._debugOwner;
                var debugStack = fiber._debugStack;
                if (workInProgress2 && debugStack) {
                  var formattedStack = formatOwnerStack(debugStack);
                  "" !== formattedStack && (info += "\n" + formattedStack);
                }
              } else if (null != workInProgress2.debugStack) {
                var ownerStack = workInProgress2.debugStack;
                (workInProgress2 = workInProgress2.owner) && ownerStack && (info += "\n" + formatOwnerStack(ownerStack));
              } else break;
            var JSCompiler_inline_result = info;
          } catch (x) {
            JSCompiler_inline_result = "\nError generating stack: " + x.message + "\n" + x.stack;
          }
          return JSCompiler_inline_result;
        }
        function runWithFiberInDEV(fiber, callback, arg0, arg1, arg2, arg3, arg4) {
          var previousFiber = current;
          setCurrentFiber(fiber);
          try {
            return null !== fiber && fiber._debugTask ? fiber._debugTask.run(
              callback.bind(null, arg0, arg1, arg2, arg3, arg4)
            ) : callback(arg0, arg1, arg2, arg3, arg4);
          } finally {
            setCurrentFiber(previousFiber);
          }
          throw Error(
            "runWithFiberInDEV should never be called in production. This is a bug in React."
          );
        }
        function setCurrentFiber(fiber) {
          ReactSharedInternals.getCurrentStack = null === fiber ? null : getCurrentFiberStackInDev;
          isRendering = false;
          current = fiber;
        }
        function typeName(value) {
          return "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        }
        function willCoercionThrow(value) {
          try {
            return testStringCoercion(value), false;
          } catch (e) {
            return true;
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          if (willCoercionThrow(value))
            return console.error(
              "The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.",
              attributeName,
              typeName(value)
            ), testStringCoercion(value);
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          if (willCoercionThrow(value))
            return console.error(
              "The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.",
              propName,
              typeName(value)
            ), testStringCoercion(value);
        }
        function checkFormFieldValueStringCoercion(value) {
          if (willCoercionThrow(value))
            return console.error(
              "Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before using it here.",
              typeName(value)
            ), testStringCoercion(value);
        }
        function injectInternals(internals) {
          if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) return true;
          if (!hook.supportsFiber)
            return console.error(
              "The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://react.dev/link/react-devtools"
            ), true;
          try {
            rendererID = hook.inject(internals), injectedHook = hook;
          } catch (err) {
            console.error("React instrumentation encountered an error: %o.", err);
          }
          return hook.checkDCE ? true : false;
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
          if (injectedHook && "function" === typeof injectedHook.setStrictMode)
            try {
              injectedHook.setStrictMode(rendererID, newIsStrictMode);
            } catch (err) {
              hasLoggedError || (hasLoggedError = true, console.error(
                "React instrumentation encountered an error: %o",
                err
              ));
            }
        }
        function clz32Fallback(x) {
          x >>>= 0;
          return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
        }
        function getHighestPriorityLanes(lanes) {
          var pendingSyncLanes = lanes & 42;
          if (0 !== pendingSyncLanes) return pendingSyncLanes;
          switch (lanes & -lanes) {
            case 1:
              return 1;
            case 2:
              return 2;
            case 4:
              return 4;
            case 8:
              return 8;
            case 16:
              return 16;
            case 32:
              return 32;
            case 64:
              return 64;
            case 128:
              return 128;
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
              return lanes & 261888;
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
              return lanes & 3932160;
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
              return lanes & 62914560;
            case 67108864:
              return 67108864;
            case 134217728:
              return 134217728;
            case 268435456:
              return 268435456;
            case 536870912:
              return 536870912;
            case 1073741824:
              return 0;
            default:
              return console.error(
                "Should have found matching lanes. This is a bug in React."
              ), lanes;
          }
        }
        function getNextLanes(root3, wipLanes, rootHasPendingCommit) {
          var pendingLanes = root3.pendingLanes;
          if (0 === pendingLanes) return 0;
          var nextLanes = 0, suspendedLanes = root3.suspendedLanes, pingedLanes = root3.pingedLanes;
          root3 = root3.warmLanes;
          var nonIdlePendingLanes = pendingLanes & 134217727;
          0 !== nonIdlePendingLanes ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = nonIdlePendingLanes & ~root3, 0 !== rootHasPendingCommit && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = pendingLanes & ~root3, 0 !== rootHasPendingCommit && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))));
          return 0 === nextLanes ? 0 : 0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, rootHasPendingCommit = wipLanes & -wipLanes, suspendedLanes >= rootHasPendingCommit || 32 === suspendedLanes && 0 !== (rootHasPendingCommit & 4194048)) ? wipLanes : nextLanes;
        }
        function checkIfRootIsPrerendering(root3, renderLanes2) {
          return 0 === (root3.pendingLanes & ~(root3.suspendedLanes & ~root3.pingedLanes) & renderLanes2);
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case 1:
            case 2:
            case 4:
            case 8:
            case 64:
              return currentTime + 250;
            case 16:
            case 32:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
              return currentTime + 5e3;
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
              return -1;
            case 67108864:
            case 134217728:
            case 268435456:
            case 536870912:
            case 1073741824:
              return -1;
            default:
              return console.error(
                "Should have found matching lanes. This is a bug in React."
              ), -1;
          }
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
          return lane;
        }
        function createLaneMap(initial) {
          for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
          return laneMap;
        }
        function markRootUpdated$1(root3, updateLane) {
          root3.pendingLanes |= updateLane;
          268435456 !== updateLane && (root3.suspendedLanes = 0, root3.pingedLanes = 0, root3.warmLanes = 0);
        }
        function markRootFinished(root3, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
          var previouslyPendingLanes = root3.pendingLanes;
          root3.pendingLanes = remainingLanes;
          root3.suspendedLanes = 0;
          root3.pingedLanes = 0;
          root3.warmLanes = 0;
          root3.expiredLanes &= remainingLanes;
          root3.entangledLanes &= remainingLanes;
          root3.errorRecoveryDisabledLanes &= remainingLanes;
          root3.shellSuspendCounter = 0;
          var entanglements = root3.entanglements, expirationTimes = root3.expirationTimes, hiddenUpdates = root3.hiddenUpdates;
          for (remainingLanes = previouslyPendingLanes & ~remainingLanes; 0 < remainingLanes; ) {
            var index = 31 - clz32(remainingLanes), lane = 1 << index;
            entanglements[index] = 0;
            expirationTimes[index] = -1;
            var hiddenUpdatesForLane = hiddenUpdates[index];
            if (null !== hiddenUpdatesForLane)
              for (hiddenUpdates[index] = null, index = 0; index < hiddenUpdatesForLane.length; index++) {
                var update = hiddenUpdatesForLane[index];
                null !== update && (update.lane &= -536870913);
              }
            remainingLanes &= ~lane;
          }
          0 !== spawnedLane && markSpawnedDeferredLane(root3, spawnedLane, 0);
          0 !== suspendedRetryLanes && 0 === updatedLanes && 0 !== root3.tag && (root3.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
        }
        function markSpawnedDeferredLane(root3, spawnedLane, entangledLanes) {
          root3.pendingLanes |= spawnedLane;
          root3.suspendedLanes &= ~spawnedLane;
          var spawnedLaneIndex = 31 - clz32(spawnedLane);
          root3.entangledLanes |= spawnedLane;
          root3.entanglements[spawnedLaneIndex] = root3.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 261930;
        }
        function markRootEntangled(root3, entangledLanes) {
          var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
          for (root3 = root3.entanglements; rootEntangledLanes; ) {
            var index = 31 - clz32(rootEntangledLanes), lane = 1 << index;
            lane & entangledLanes | root3[index] & entangledLanes && (root3[index] |= entangledLanes);
            rootEntangledLanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root3, renderLanes2) {
          var renderLane = renderLanes2 & -renderLanes2;
          renderLane = 0 !== (renderLane & 42) ? 1 : getBumpedLaneForHydrationByLane(renderLane);
          return 0 !== (renderLane & (root3.suspendedLanes | renderLanes2)) ? 0 : renderLane;
        }
        function getBumpedLaneForHydrationByLane(lane) {
          switch (lane) {
            case 2:
              lane = 1;
              break;
            case 8:
              lane = 4;
              break;
            case 32:
              lane = 16;
              break;
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
              lane = 128;
              break;
            case 268435456:
              lane = 134217728;
              break;
            default:
              lane = 0;
          }
          return lane;
        }
        function addFiberToLanesMap(root3, fiber, lanes) {
          if (isDevToolsPresent)
            for (root3 = root3.pendingUpdatersLaneMap; 0 < lanes; ) {
              var index = 31 - clz32(lanes), lane = 1 << index;
              root3[index].add(fiber);
              lanes &= ~lane;
            }
        }
        function movePendingFibersToMemoized(root3, lanes) {
          if (isDevToolsPresent)
            for (var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap, memoizedUpdaters = root3.memoizedUpdaters; 0 < lanes; ) {
              var index = 31 - clz32(lanes);
              root3 = 1 << index;
              index = pendingUpdatersLaneMap[index];
              0 < index.size && (index.forEach(function(fiber) {
                var alternate = fiber.alternate;
                null !== alternate && memoizedUpdaters.has(alternate) || memoizedUpdaters.add(fiber);
              }), index.clear());
              lanes &= ~root3;
            }
        }
        function lanesToEventPriority(lanes) {
          lanes &= -lanes;
          return 0 !== DiscreteEventPriority && DiscreteEventPriority < lanes ? 0 !== ContinuousEventPriority && ContinuousEventPriority < lanes ? 0 !== (lanes & 134217727) ? DefaultEventPriority : IdleEventPriority : ContinuousEventPriority : DiscreteEventPriority;
        }
        function resolveUpdatePriority() {
          var updatePriority = ReactDOMSharedInternals.p;
          if (0 !== updatePriority) return updatePriority;
          updatePriority = window.event;
          return void 0 === updatePriority ? DefaultEventPriority : getEventPriority(updatePriority.type);
        }
        function runWithPriority(priority, fn) {
          var previousPriority = ReactDOMSharedInternals.p;
          try {
            return ReactDOMSharedInternals.p = priority, fn();
          } finally {
            ReactDOMSharedInternals.p = previousPriority;
          }
        }
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) return targetInst;
          for (var parentNode = targetNode.parentNode; parentNode; ) {
            if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey]) {
              parentNode = targetInst.alternate;
              if (null !== targetInst.child || null !== parentNode && null !== parentNode.child)
                for (targetNode = getParentHydrationBoundary(targetNode); null !== targetNode; ) {
                  if (parentNode = targetNode[internalInstanceKey])
                    return parentNode;
                  targetNode = getParentHydrationBoundary(targetNode);
                }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          if (node = node[internalInstanceKey] || node[internalContainerInstanceKey]) {
            var tag = node.tag;
            if (5 === tag || 6 === tag || 13 === tag || 31 === tag || 26 === tag || 27 === tag || 3 === tag)
              return node;
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          var tag = inst.tag;
          if (5 === tag || 26 === tag || 27 === tag || 6 === tag)
            return inst.stateNode;
          throw Error("getNodeFromInstance: Invalid argument.");
        }
        function getResourcesFromRoot(root3) {
          var resources = root3[internalRootNodeResourcesKey];
          resources || (resources = root3[internalRootNodeResourcesKey] = { hoistableStyles: /* @__PURE__ */ new Map(), hoistableScripts: /* @__PURE__ */ new Map() });
          return resources;
        }
        function markNodeAsHoistable(node) {
          node[internalHoistableMarker] = true;
        }
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          registrationNameDependencies[registrationName] && console.error(
            "EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.",
            registrationName
          );
          registrationNameDependencies[registrationName] = dependencies;
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName;
          "onDoubleClick" === registrationName && (possibleRegistrationNames.ondblclick = registrationName);
          for (registrationName = 0; registrationName < dependencies.length; registrationName++)
            allNativeEvents.add(dependencies[registrationName]);
        }
        function checkControlledValueProps(tagName, props) {
          hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || null == props.value || ("select" === tagName ? console.error(
            "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`."
          ) : console.error(
            "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."
          ));
          props.onChange || props.readOnly || props.disabled || null == props.checked || console.error(
            "You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`."
          );
        }
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
            return true;
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName))
            return false;
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
            return validatedAttributeNameCache[attributeName] = true;
          illegalAttributeNameCache[attributeName] = true;
          console.error("Invalid attribute name: `%s`", attributeName);
          return false;
        }
        function getValueForAttributeOnCustomComponent(node, name, expected) {
          if (isAttributeNameSafe(name)) {
            if (!node.hasAttribute(name)) {
              switch (typeof expected) {
                case "symbol":
                case "object":
                  return expected;
                case "function":
                  return expected;
                case "boolean":
                  if (false === expected) return expected;
              }
              return void 0 === expected ? void 0 : null;
            }
            node = node.getAttribute(name);
            if ("" === node && true === expected) return true;
            checkAttributeStringCoercion(expected, name);
            return node === "" + expected ? expected : node;
          }
        }
        function setValueForAttribute(node, name, value) {
          if (isAttributeNameSafe(name))
            if (null === value) node.removeAttribute(name);
            else {
              switch (typeof value) {
                case "undefined":
                case "function":
                case "symbol":
                  node.removeAttribute(name);
                  return;
                case "boolean":
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  if ("data-" !== prefix2 && "aria-" !== prefix2) {
                    node.removeAttribute(name);
                    return;
                  }
              }
              checkAttributeStringCoercion(value, name);
              node.setAttribute(name, "" + value);
            }
        }
        function setValueForKnownAttribute(node, name, value) {
          if (null === value) node.removeAttribute(name);
          else {
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                node.removeAttribute(name);
                return;
            }
            checkAttributeStringCoercion(value, name);
            node.setAttribute(name, "" + value);
          }
        }
        function setValueForNamespacedAttribute(node, namespace, name, value) {
          if (null === value) node.removeAttribute(name);
          else {
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                node.removeAttribute(name);
                return;
            }
            checkAttributeStringCoercion(value, name);
            node.setAttributeNS(namespace, name, "" + value);
          }
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "bigint":
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              return checkFormFieldValueStringCoercion(value), value;
            default:
              return "";
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          return (elem = elem.nodeName) && "input" === elem.toLowerCase() && ("checkbox" === type || "radio" === type);
        }
        function trackValueOnNode(node, valueField, currentValue) {
          var descriptor = Object.getOwnPropertyDescriptor(
            node.constructor.prototype,
            valueField
          );
          if (!node.hasOwnProperty(valueField) && "undefined" !== typeof descriptor && "function" === typeof descriptor.get && "function" === typeof descriptor.set) {
            var get = descriptor.get, set = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get.call(this);
              },
              set: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = "" + value;
                set.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            return {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = "" + value;
              },
              stopTracking: function() {
                node._valueTracker = null;
                delete node[valueField];
              }
            };
          }
        }
        function track(node) {
          if (!node._valueTracker) {
            var valueField = isCheckable(node) ? "checked" : "value";
            node._valueTracker = trackValueOnNode(
              node,
              valueField,
              "" + node[valueField]
            );
          }
        }
        function updateValueIfChanged(node) {
          if (!node) return false;
          var tracker = node._valueTracker;
          if (!tracker) return true;
          var lastValue = tracker.getValue();
          var value = "";
          node && (value = isCheckable(node) ? node.checked ? "true" : "false" : node.value);
          node = value;
          return node !== lastValue ? (tracker.setValue(node), true) : false;
        }
        function getActiveElement(doc) {
          doc = doc || ("undefined" !== typeof document ? document : void 0);
          if ("undefined" === typeof doc) return null;
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
          return value.replace(
            escapeSelectorAttributeValueInsideDoubleQuotesRegex,
            function(ch) {
              return "\\" + ch.charCodeAt(0).toString(16) + " ";
            }
          );
        }
        function validateInputProps(element, props) {
          void 0 === props.checked || void 0 === props.defaultChecked || didWarnCheckedDefaultChecked || (console.error(
            "%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",
            getCurrentFiberOwnerNameInDevOrNull() || "A component",
            props.type
          ), didWarnCheckedDefaultChecked = true);
          void 0 === props.value || void 0 === props.defaultValue || didWarnValueDefaultValue$1 || (console.error(
            "%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",
            getCurrentFiberOwnerNameInDevOrNull() || "A component",
            props.type
          ), didWarnValueDefaultValue$1 = true);
        }
        function updateInput(element, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name) {
          element.name = "";
          null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type ? (checkAttributeStringCoercion(type, "type"), element.type = type) : element.removeAttribute("type");
          if (null != value)
            if ("number" === type) {
              if (0 === value && "" === element.value || element.value != value)
                element.value = "" + getToStringValue(value);
            } else
              element.value !== "" + getToStringValue(value) && (element.value = "" + getToStringValue(value));
          else
            "submit" !== type && "reset" !== type || element.removeAttribute("value");
          null != value ? setDefaultValue(element, type, getToStringValue(value)) : null != defaultValue ? setDefaultValue(element, type, getToStringValue(defaultValue)) : null != lastDefaultValue && element.removeAttribute("value");
          null == checked && null != defaultChecked && (element.defaultChecked = !!defaultChecked);
          null != checked && (element.checked = checked && "function" !== typeof checked && "symbol" !== typeof checked);
          null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name ? (checkAttributeStringCoercion(name, "name"), element.name = "" + getToStringValue(name)) : element.removeAttribute("name");
        }
        function initInput(element, value, defaultValue, checked, defaultChecked, type, name, isHydrating2) {
          null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type && (checkAttributeStringCoercion(type, "type"), element.type = type);
          if (null != value || null != defaultValue) {
            if (!("submit" !== type && "reset" !== type || void 0 !== value && null !== value)) {
              track(element);
              return;
            }
            defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
            value = null != value ? "" + getToStringValue(value) : defaultValue;
            isHydrating2 || value === element.value || (element.value = value);
            element.defaultValue = value;
          }
          checked = null != checked ? checked : defaultChecked;
          checked = "function" !== typeof checked && "symbol" !== typeof checked && !!checked;
          element.checked = isHydrating2 ? element.checked : !!checked;
          element.defaultChecked = !!checked;
          null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name && (checkAttributeStringCoercion(name, "name"), element.name = name);
          track(element);
        }
        function setDefaultValue(node, type, value) {
          "number" === type && getActiveElement(node.ownerDocument) === node || node.defaultValue === "" + value || (node.defaultValue = "" + value);
        }
        function validateOptionProps(element, props) {
          null == props.value && ("object" === typeof props.children && null !== props.children ? React90.Children.forEach(props.children, function(child) {
            null == child || "string" === typeof child || "number" === typeof child || "bigint" === typeof child || didWarnInvalidChild || (didWarnInvalidChild = true, console.error(
              "Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>."
            ));
          }) : null == props.dangerouslySetInnerHTML || didWarnInvalidInnerHTML || (didWarnInvalidInnerHTML = true, console.error(
            "Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."
          )));
          null == props.selected || didWarnSelectedSetOnOption || (console.error(
            "Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."
          ), didWarnSelectedSetOnOption = true);
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          return ownerName ? "\n\nCheck the render method of `" + ownerName + "`." : "";
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          node = node.options;
          if (multiple) {
            multiple = {};
            for (var i = 0; i < propValue.length; i++)
              multiple["$" + propValue[i]] = true;
            for (propValue = 0; propValue < node.length; propValue++)
              i = multiple.hasOwnProperty("$" + node[propValue].value), node[propValue].selected !== i && (node[propValue].selected = i), i && setDefaultSelected && (node[propValue].defaultSelected = true);
          } else {
            propValue = "" + getToStringValue(propValue);
            multiple = null;
            for (i = 0; i < node.length; i++) {
              if (node[i].value === propValue) {
                node[i].selected = true;
                setDefaultSelected && (node[i].defaultSelected = true);
                return;
              }
              null !== multiple || node[i].disabled || (multiple = node[i]);
            }
            null !== multiple && (multiple.selected = true);
          }
        }
        function validateSelectProps(element, props) {
          for (element = 0; element < valuePropNames.length; element++) {
            var propName = valuePropNames[element];
            if (null != props[propName]) {
              var propNameIsArray = isArrayImpl(props[propName]);
              props.multiple && !propNameIsArray ? console.error(
                "The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",
                propName,
                getDeclarationErrorAddendum()
              ) : !props.multiple && propNameIsArray && console.error(
                "The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",
                propName,
                getDeclarationErrorAddendum()
              );
            }
          }
          void 0 === props.value || void 0 === props.defaultValue || didWarnValueDefaultValue || (console.error(
            "Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://react.dev/link/controlled-components"
          ), didWarnValueDefaultValue = true);
        }
        function validateTextareaProps(element, props) {
          void 0 === props.value || void 0 === props.defaultValue || didWarnValDefaultVal || (console.error(
            "%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://react.dev/link/controlled-components",
            getCurrentFiberOwnerNameInDevOrNull() || "A component"
          ), didWarnValDefaultVal = true);
          null != props.children && null == props.value && console.error(
            "Use the `defaultValue` or `value` props instead of setting children on <textarea>."
          );
        }
        function updateTextarea(element, value, defaultValue) {
          if (null != value && (value = "" + getToStringValue(value), value !== element.value && (element.value = value), null == defaultValue)) {
            element.defaultValue !== value && (element.defaultValue = value);
            return;
          }
          element.defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
        }
        function initTextarea(element, value, defaultValue, children) {
          if (null == value) {
            if (null != children) {
              if (null != defaultValue)
                throw Error(
                  "If you supply `defaultValue` on a <textarea>, do not pass children."
                );
              if (isArrayImpl(children)) {
                if (1 < children.length)
                  throw Error("<textarea> can only have at most one child.");
                children = children[0];
              }
              defaultValue = children;
            }
            null == defaultValue && (defaultValue = "");
            value = defaultValue;
          }
          defaultValue = getToStringValue(value);
          element.defaultValue = defaultValue;
          children = element.textContent;
          children === defaultValue && "" !== children && null !== children && (element.value = children);
          track(element);
        }
        function findNotableNode(node, indent) {
          return void 0 === node.serverProps && 0 === node.serverTail.length && 1 === node.children.length && 3 < node.distanceFromLeaf && node.distanceFromLeaf > 15 - indent ? findNotableNode(node.children[0], indent) : node;
        }
        function indentation(indent) {
          return "  " + "  ".repeat(indent);
        }
        function added(indent) {
          return "+ " + "  ".repeat(indent);
        }
        function removed(indent) {
          return "- " + "  ".repeat(indent);
        }
        function describeFiberType(fiber) {
          switch (fiber.tag) {
            case 26:
            case 27:
            case 5:
              return fiber.type;
            case 16:
              return "Lazy";
            case 31:
              return "Activity";
            case 13:
              return "Suspense";
            case 19:
              return "SuspenseList";
            case 0:
            case 15:
              return fiber = fiber.type, fiber.displayName || fiber.name || null;
            case 11:
              return fiber = fiber.type.render, fiber.displayName || fiber.name || null;
            case 1:
              return fiber = fiber.type, fiber.displayName || fiber.name || null;
            default:
              return null;
          }
        }
        function describeTextNode(content, maxLength) {
          return needsEscaping.test(content) ? (content = JSON.stringify(content), content.length > maxLength - 2 ? 8 > maxLength ? '{"..."}' : "{" + content.slice(0, maxLength - 7) + '..."}' : "{" + content + "}") : content.length > maxLength ? 5 > maxLength ? '{"..."}' : content.slice(0, maxLength - 3) + "..." : content;
        }
        function describeTextDiff(clientText, serverProps, indent) {
          var maxLength = 120 - 2 * indent;
          if (null === serverProps)
            return added(indent) + describeTextNode(clientText, maxLength) + "\n";
          if ("string" === typeof serverProps) {
            for (var firstDiff = 0; firstDiff < serverProps.length && firstDiff < clientText.length && serverProps.charCodeAt(firstDiff) === clientText.charCodeAt(firstDiff); firstDiff++) ;
            firstDiff > maxLength - 8 && 10 < firstDiff && (clientText = "..." + clientText.slice(firstDiff - 8), serverProps = "..." + serverProps.slice(firstDiff - 8));
            return added(indent) + describeTextNode(clientText, maxLength) + "\n" + removed(indent) + describeTextNode(serverProps, maxLength) + "\n";
          }
          return indentation(indent) + describeTextNode(clientText, maxLength) + "\n";
        }
        function objectName(object) {
          return Object.prototype.toString.call(object).replace(/^\[object (.*)\]$/, function(m, p0) {
            return p0;
          });
        }
        function describeValue(value, maxLength) {
          switch (typeof value) {
            case "string":
              return value = JSON.stringify(value), value.length > maxLength ? 5 > maxLength ? '"..."' : value.slice(0, maxLength - 4) + '..."' : value;
            case "object":
              if (null === value) return "null";
              if (isArrayImpl(value)) return "[...]";
              if (value.$$typeof === REACT_ELEMENT_TYPE)
                return (maxLength = getComponentNameFromType(value.type)) ? "<" + maxLength + ">" : "<...>";
              var name = objectName(value);
              if ("Object" === name) {
                name = "";
                maxLength -= 2;
                for (var propName in value)
                  if (value.hasOwnProperty(propName)) {
                    var jsonPropName = JSON.stringify(propName);
                    jsonPropName !== '"' + propName + '"' && (propName = jsonPropName);
                    maxLength -= propName.length - 2;
                    jsonPropName = describeValue(
                      value[propName],
                      15 > maxLength ? maxLength : 15
                    );
                    maxLength -= jsonPropName.length;
                    if (0 > maxLength) {
                      name += "" === name ? "..." : ", ...";
                      break;
                    }
                    name += ("" === name ? "" : ",") + propName + ":" + jsonPropName;
                  }
                return "{" + name + "}";
              }
              return name;
            case "function":
              return (maxLength = value.displayName || value.name) ? "function " + maxLength : "function";
            default:
              return String(value);
          }
        }
        function describePropValue(value, maxLength) {
          return "string" !== typeof value || needsEscaping.test(value) ? "{" + describeValue(value, maxLength - 2) + "}" : value.length > maxLength - 2 ? 5 > maxLength ? '"..."' : '"' + value.slice(0, maxLength - 5) + '..."' : '"' + value + '"';
        }
        function describeExpandedElement(type, props, rowPrefix) {
          var remainingRowLength = 120 - rowPrefix.length - type.length, properties = [], propName;
          for (propName in props)
            if (props.hasOwnProperty(propName) && "children" !== propName) {
              var propValue = describePropValue(
                props[propName],
                120 - rowPrefix.length - propName.length - 1
              );
              remainingRowLength -= propName.length + propValue.length + 2;
              properties.push(propName + "=" + propValue);
            }
          return 0 === properties.length ? rowPrefix + "<" + type + ">\n" : 0 < remainingRowLength ? rowPrefix + "<" + type + " " + properties.join(" ") + ">\n" : rowPrefix + "<" + type + "\n" + rowPrefix + "  " + properties.join("\n" + rowPrefix + "  ") + "\n" + rowPrefix + ">\n";
        }
        function describePropertiesDiff(clientObject, serverObject, indent) {
          var properties = "", remainingServerProperties = assign({}, serverObject), propName;
          for (propName in clientObject)
            if (clientObject.hasOwnProperty(propName)) {
              delete remainingServerProperties[propName];
              var maxLength = 120 - 2 * indent - propName.length - 2, clientPropValue = describeValue(clientObject[propName], maxLength);
              serverObject.hasOwnProperty(propName) ? (maxLength = describeValue(serverObject[propName], maxLength), properties += added(indent) + propName + ": " + clientPropValue + "\n", properties += removed(indent) + propName + ": " + maxLength + "\n") : properties += added(indent) + propName + ": " + clientPropValue + "\n";
            }
          for (var _propName in remainingServerProperties)
            remainingServerProperties.hasOwnProperty(_propName) && (clientObject = describeValue(
              remainingServerProperties[_propName],
              120 - 2 * indent - _propName.length - 2
            ), properties += removed(indent) + _propName + ": " + clientObject + "\n");
          return properties;
        }
        function describeElementDiff(type, clientProps, serverProps, indent) {
          var content = "", serverPropNames = /* @__PURE__ */ new Map();
          for (propName$jscomp$0 in serverProps)
            serverProps.hasOwnProperty(propName$jscomp$0) && serverPropNames.set(
              propName$jscomp$0.toLowerCase(),
              propName$jscomp$0
            );
          if (1 === serverPropNames.size && serverPropNames.has("children"))
            content += describeExpandedElement(
              type,
              clientProps,
              indentation(indent)
            );
          else {
            for (var _propName2 in clientProps)
              if (clientProps.hasOwnProperty(_propName2) && "children" !== _propName2) {
                var maxLength$jscomp$0 = 120 - 2 * (indent + 1) - _propName2.length - 1, serverPropName = serverPropNames.get(_propName2.toLowerCase());
                if (void 0 !== serverPropName) {
                  serverPropNames.delete(_propName2.toLowerCase());
                  var propName$jscomp$0 = clientProps[_propName2];
                  serverPropName = serverProps[serverPropName];
                  var clientPropValue = describePropValue(
                    propName$jscomp$0,
                    maxLength$jscomp$0
                  );
                  maxLength$jscomp$0 = describePropValue(
                    serverPropName,
                    maxLength$jscomp$0
                  );
                  "object" === typeof propName$jscomp$0 && null !== propName$jscomp$0 && "object" === typeof serverPropName && null !== serverPropName && "Object" === objectName(propName$jscomp$0) && "Object" === objectName(serverPropName) && (2 < Object.keys(propName$jscomp$0).length || 2 < Object.keys(serverPropName).length || -1 < clientPropValue.indexOf("...") || -1 < maxLength$jscomp$0.indexOf("...")) ? content += indentation(indent + 1) + _propName2 + "={{\n" + describePropertiesDiff(
                    propName$jscomp$0,
                    serverPropName,
                    indent + 2
                  ) + indentation(indent + 1) + "}}\n" : (content += added(indent + 1) + _propName2 + "=" + clientPropValue + "\n", content += removed(indent + 1) + _propName2 + "=" + maxLength$jscomp$0 + "\n");
                } else
                  content += indentation(indent + 1) + _propName2 + "=" + describePropValue(clientProps[_propName2], maxLength$jscomp$0) + "\n";
              }
            serverPropNames.forEach(function(propName) {
              if ("children" !== propName) {
                var maxLength = 120 - 2 * (indent + 1) - propName.length - 1;
                content += removed(indent + 1) + propName + "=" + describePropValue(serverProps[propName], maxLength) + "\n";
              }
            });
            content = "" === content ? indentation(indent) + "<" + type + ">\n" : indentation(indent) + "<" + type + "\n" + content + indentation(indent) + ">\n";
          }
          type = serverProps.children;
          clientProps = clientProps.children;
          if ("string" === typeof type || "number" === typeof type || "bigint" === typeof type) {
            serverPropNames = "";
            if ("string" === typeof clientProps || "number" === typeof clientProps || "bigint" === typeof clientProps)
              serverPropNames = "" + clientProps;
            content += describeTextDiff(serverPropNames, "" + type, indent + 1);
          } else if ("string" === typeof clientProps || "number" === typeof clientProps || "bigint" === typeof clientProps)
            content = null == type ? content + describeTextDiff("" + clientProps, null, indent + 1) : content + describeTextDiff("" + clientProps, void 0, indent + 1);
          return content;
        }
        function describeSiblingFiber(fiber, indent) {
          var type = describeFiberType(fiber);
          if (null === type) {
            type = "";
            for (fiber = fiber.child; fiber; )
              type += describeSiblingFiber(fiber, indent), fiber = fiber.sibling;
            return type;
          }
          return indentation(indent) + "<" + type + ">\n";
        }
        function describeNode(node, indent) {
          var skipToNode = findNotableNode(node, indent);
          if (skipToNode !== node && (1 !== node.children.length || node.children[0] !== skipToNode))
            return indentation(indent) + "...\n" + describeNode(skipToNode, indent + 1);
          skipToNode = "";
          var debugInfo = node.fiber._debugInfo;
          if (debugInfo)
            for (var i = 0; i < debugInfo.length; i++) {
              var serverComponentName = debugInfo[i].name;
              "string" === typeof serverComponentName && (skipToNode += indentation(indent) + "<" + serverComponentName + ">\n", indent++);
            }
          debugInfo = "";
          i = node.fiber.pendingProps;
          if (6 === node.fiber.tag)
            debugInfo = describeTextDiff(i, node.serverProps, indent), indent++;
          else if (serverComponentName = describeFiberType(node.fiber), null !== serverComponentName)
            if (void 0 === node.serverProps) {
              debugInfo = indent;
              var maxLength = 120 - 2 * debugInfo - serverComponentName.length - 2, content = "";
              for (propName in i)
                if (i.hasOwnProperty(propName) && "children" !== propName) {
                  var propValue = describePropValue(i[propName], 15);
                  maxLength -= propName.length + propValue.length + 2;
                  if (0 > maxLength) {
                    content += " ...";
                    break;
                  }
                  content += " " + propName + "=" + propValue;
                }
              debugInfo = indentation(debugInfo) + "<" + serverComponentName + content + ">\n";
              indent++;
            } else
              null === node.serverProps ? (debugInfo = describeExpandedElement(
                serverComponentName,
                i,
                added(indent)
              ), indent++) : "string" === typeof node.serverProps ? console.error(
                "Should not have matched a non HostText fiber to a Text node. This is a bug in React."
              ) : (debugInfo = describeElementDiff(
                serverComponentName,
                i,
                node.serverProps,
                indent
              ), indent++);
          var propName = "";
          i = node.fiber.child;
          for (serverComponentName = 0; i && serverComponentName < node.children.length; )
            maxLength = node.children[serverComponentName], maxLength.fiber === i ? (propName += describeNode(maxLength, indent), serverComponentName++) : propName += describeSiblingFiber(i, indent), i = i.sibling;
          i && 0 < node.children.length && (propName += indentation(indent) + "...\n");
          i = node.serverTail;
          null === node.serverProps && indent--;
          for (node = 0; node < i.length; node++)
            serverComponentName = i[node], propName = "string" === typeof serverComponentName ? propName + (removed(indent) + describeTextNode(serverComponentName, 120 - 2 * indent) + "\n") : propName + describeExpandedElement(
              serverComponentName.type,
              serverComponentName.props,
              removed(indent)
            );
          return skipToNode + debugInfo + propName;
        }
        function describeDiff(rootNode) {
          try {
            return "\n\n" + describeNode(rootNode, 0);
          } catch (x) {
            return "";
          }
        }
        function describeAncestors(ancestor, child, props) {
          for (var fiber = child, node = null, distanceFromLeaf = 0; fiber; )
            fiber === ancestor && (distanceFromLeaf = 0), node = {
              fiber,
              children: null !== node ? [node] : [],
              serverProps: fiber === child ? props : fiber === ancestor ? null : void 0,
              serverTail: [],
              distanceFromLeaf
            }, distanceFromLeaf++, fiber = fiber.return;
          return null !== node ? describeDiff(node).replaceAll(/^[+-]/gm, ">") : "";
        }
        function updatedAncestorInfoDev(oldInfo, tag) {
          var ancestorInfo = assign({}, oldInfo || emptyAncestorInfoDev), info = { tag };
          -1 !== inScopeTags.indexOf(tag) && (ancestorInfo.aTagInScope = null, ancestorInfo.buttonTagInScope = null, ancestorInfo.nobrTagInScope = null);
          -1 !== buttonScopeTags.indexOf(tag) && (ancestorInfo.pTagInButtonScope = null);
          -1 !== specialTags.indexOf(tag) && "address" !== tag && "div" !== tag && "p" !== tag && (ancestorInfo.listItemTagAutoclosing = null, ancestorInfo.dlItemTagAutoclosing = null);
          ancestorInfo.current = info;
          "form" === tag && (ancestorInfo.formTag = info);
          "a" === tag && (ancestorInfo.aTagInScope = info);
          "button" === tag && (ancestorInfo.buttonTagInScope = info);
          "nobr" === tag && (ancestorInfo.nobrTagInScope = info);
          "p" === tag && (ancestorInfo.pTagInButtonScope = info);
          "li" === tag && (ancestorInfo.listItemTagAutoclosing = info);
          if ("dd" === tag || "dt" === tag)
            ancestorInfo.dlItemTagAutoclosing = info;
          "#document" === tag || "html" === tag ? ancestorInfo.containerTagInScope = null : ancestorInfo.containerTagInScope || (ancestorInfo.containerTagInScope = info);
          null !== oldInfo || "#document" !== tag && "html" !== tag && "body" !== tag ? true === ancestorInfo.implicitRootScope && (ancestorInfo.implicitRootScope = false) : ancestorInfo.implicitRootScope = true;
          return ancestorInfo;
        }
        function isTagValidWithParent(tag, parentTag, implicitRootScope) {
          switch (parentTag) {
            case "select":
              return "hr" === tag || "option" === tag || "optgroup" === tag || "script" === tag || "template" === tag || "#text" === tag;
            case "optgroup":
              return "option" === tag || "#text" === tag;
            case "option":
              return "#text" === tag;
            case "tr":
              return "th" === tag || "td" === tag || "style" === tag || "script" === tag || "template" === tag;
            case "tbody":
            case "thead":
            case "tfoot":
              return "tr" === tag || "style" === tag || "script" === tag || "template" === tag;
            case "colgroup":
              return "col" === tag || "template" === tag;
            case "table":
              return "caption" === tag || "colgroup" === tag || "tbody" === tag || "tfoot" === tag || "thead" === tag || "style" === tag || "script" === tag || "template" === tag;
            case "head":
              return "base" === tag || "basefont" === tag || "bgsound" === tag || "link" === tag || "meta" === tag || "title" === tag || "noscript" === tag || "noframes" === tag || "style" === tag || "script" === tag || "template" === tag;
            case "html":
              if (implicitRootScope) break;
              return "head" === tag || "body" === tag || "frameset" === tag;
            case "frameset":
              return "frame" === tag;
            case "#document":
              if (!implicitRootScope) return "html" === tag;
          }
          switch (tag) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return "h1" !== parentTag && "h2" !== parentTag && "h3" !== parentTag && "h4" !== parentTag && "h5" !== parentTag && "h6" !== parentTag;
            case "rp":
            case "rt":
              return -1 === impliedEndTags.indexOf(parentTag);
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return null == parentTag;
            case "head":
              return implicitRootScope || null === parentTag;
            case "html":
              return implicitRootScope && "#document" === parentTag || null === parentTag;
            case "body":
              return implicitRootScope && ("#document" === parentTag || "html" === parentTag) || null === parentTag;
          }
          return true;
        }
        function findInvalidAncestorForTag(tag, ancestorInfo) {
          switch (tag) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        }
        function findAncestor(parent, tagName) {
          for (; parent; ) {
            switch (parent.tag) {
              case 5:
              case 26:
              case 27:
                if (parent.type === tagName) return parent;
            }
            parent = parent.return;
          }
          return null;
        }
        function validateDOMNesting(childTag, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfoDev;
          var parentInfo = ancestorInfo.current;
          ancestorInfo = (parentInfo = isTagValidWithParent(
            childTag,
            parentInfo && parentInfo.tag,
            ancestorInfo.implicitRootScope
          ) ? null : parentInfo) ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
          ancestorInfo = parentInfo || ancestorInfo;
          if (!ancestorInfo) return true;
          var ancestorTag = ancestorInfo.tag;
          ancestorInfo = String(!!parentInfo) + "|" + childTag + "|" + ancestorTag;
          if (didWarn[ancestorInfo]) return false;
          didWarn[ancestorInfo] = true;
          var ancestor = (ancestorInfo = current) ? findAncestor(ancestorInfo.return, ancestorTag) : null, ancestorDescription = null !== ancestorInfo && null !== ancestor ? describeAncestors(ancestor, ancestorInfo, null) : "", tagDisplayName = "<" + childTag + ">";
          parentInfo ? (parentInfo = "", "table" === ancestorTag && "tr" === childTag && (parentInfo += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."), console.error(
            "In HTML, %s cannot be a child of <%s>.%s\nThis will cause a hydration error.%s",
            tagDisplayName,
            ancestorTag,
            parentInfo,
            ancestorDescription
          )) : console.error(
            "In HTML, %s cannot be a descendant of <%s>.\nThis will cause a hydration error.%s",
            tagDisplayName,
            ancestorTag,
            ancestorDescription
          );
          ancestorInfo && (childTag = ancestorInfo.return, null === ancestor || null === childTag || ancestor === childTag && childTag._debugOwner === ancestorInfo._debugOwner || runWithFiberInDEV(ancestor, function() {
            console.error(
              "<%s> cannot contain a nested %s.\nSee this log for the ancestor stack trace.",
              ancestorTag,
              tagDisplayName
            );
          }));
          return false;
        }
        function validateTextNesting(childText, parentTag, implicitRootScope) {
          if (implicitRootScope || isTagValidWithParent("#text", parentTag, false))
            return true;
          implicitRootScope = "#text|" + parentTag;
          if (didWarn[implicitRootScope]) return false;
          didWarn[implicitRootScope] = true;
          var ancestor = (implicitRootScope = current) ? findAncestor(implicitRootScope, parentTag) : null;
          implicitRootScope = null !== implicitRootScope && null !== ancestor ? describeAncestors(
            ancestor,
            implicitRootScope,
            6 !== implicitRootScope.tag ? { children: null } : null
          ) : "";
          /\S/.test(childText) ? console.error(
            "In HTML, text nodes cannot be a child of <%s>.\nThis will cause a hydration error.%s",
            parentTag,
            implicitRootScope
          ) : console.error(
            "In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.\nThis will cause a hydration error.%s",
            parentTag,
            implicitRootScope
          );
          return false;
        }
        function setTextContent(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && 3 === firstChild.nodeType) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        }
        function camelize(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }
        function setValueForStyle(style2, styleName, value) {
          var isCustomProperty = 0 === styleName.indexOf("--");
          isCustomProperty || (-1 < styleName.indexOf("-") ? warnedStyleNames.hasOwnProperty(styleName) && warnedStyleNames[styleName] || (warnedStyleNames[styleName] = true, console.error(
            "Unsupported style property %s. Did you mean %s?",
            styleName,
            camelize(styleName.replace(msPattern, "ms-"))
          )) : badVendoredStyleNamePattern.test(styleName) ? warnedStyleNames.hasOwnProperty(styleName) && warnedStyleNames[styleName] || (warnedStyleNames[styleName] = true, console.error(
            "Unsupported vendor-prefixed style property %s. Did you mean %s?",
            styleName,
            styleName.charAt(0).toUpperCase() + styleName.slice(1)
          )) : !badStyleValueWithSemicolonPattern.test(value) || warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = true, console.error(
            `Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`,
            styleName,
            value.replace(badStyleValueWithSemicolonPattern, "")
          )), "number" === typeof value && (isNaN(value) ? warnedForNaNValue || (warnedForNaNValue = true, console.error(
            "`NaN` is an invalid value for the `%s` css style property.",
            styleName
          )) : isFinite(value) || warnedForInfinityValue || (warnedForInfinityValue = true, console.error(
            "`Infinity` is an invalid value for the `%s` css style property.",
            styleName
          ))));
          null == value || "boolean" === typeof value || "" === value ? isCustomProperty ? style2.setProperty(styleName, "") : "float" === styleName ? style2.cssFloat = "" : style2[styleName] = "" : isCustomProperty ? style2.setProperty(styleName, value) : "number" !== typeof value || 0 === value || unitlessNumbers.has(styleName) ? "float" === styleName ? style2.cssFloat = value : (checkCSSPropertyStringCoercion(value, styleName), style2[styleName] = ("" + value).trim()) : style2[styleName] = value + "px";
        }
        function setValueForStyles(node, styles, prevStyles) {
          if (null != styles && "object" !== typeof styles)
            throw Error(
              "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
            );
          styles && Object.freeze(styles);
          node = node.style;
          if (null != prevStyles) {
            if (styles) {
              var expandedUpdates = {};
              if (prevStyles) {
                for (var key in prevStyles)
                  if (prevStyles.hasOwnProperty(key) && !styles.hasOwnProperty(key))
                    for (var longhands = shorthandToLonghand[key] || [key], i = 0; i < longhands.length; i++)
                      expandedUpdates[longhands[i]] = key;
              }
              for (var _key in styles)
                if (styles.hasOwnProperty(_key) && (!prevStyles || prevStyles[_key] !== styles[_key]))
                  for (key = shorthandToLonghand[_key] || [_key], longhands = 0; longhands < key.length; longhands++)
                    expandedUpdates[key[longhands]] = _key;
              _key = {};
              for (var key$jscomp$0 in styles)
                for (key = shorthandToLonghand[key$jscomp$0] || [key$jscomp$0], longhands = 0; longhands < key.length; longhands++)
                  _key[key[longhands]] = key$jscomp$0;
              key$jscomp$0 = {};
              for (var _key2 in expandedUpdates)
                if (key = expandedUpdates[_key2], (longhands = _key[_key2]) && key !== longhands && (i = key + "," + longhands, !key$jscomp$0[i])) {
                  key$jscomp$0[i] = true;
                  i = console;
                  var value = styles[key];
                  i.error.call(
                    i,
                    "%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",
                    null == value || "boolean" === typeof value || "" === value ? "Removing" : "Updating",
                    key,
                    longhands
                  );
                }
            }
            for (var styleName in prevStyles)
              !prevStyles.hasOwnProperty(styleName) || null != styles && styles.hasOwnProperty(styleName) || (0 === styleName.indexOf("--") ? node.setProperty(styleName, "") : "float" === styleName ? node.cssFloat = "" : node[styleName] = "");
            for (var _styleName in styles)
              _key2 = styles[_styleName], styles.hasOwnProperty(_styleName) && prevStyles[_styleName] !== _key2 && setValueForStyle(node, _styleName, _key2);
          } else
            for (expandedUpdates in styles)
              styles.hasOwnProperty(expandedUpdates) && setValueForStyle(node, expandedUpdates, styles[expandedUpdates]);
        }
        function isCustomElement(tagName) {
          if (-1 === tagName.indexOf("-")) return false;
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        function getAttributeAlias(name) {
          return aliases.get(name) || name;
        }
        function validateProperty$1(tagName, name) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
            return true;
          if (rARIACamel$1.test(name)) {
            tagName = "aria-" + name.slice(4).toLowerCase();
            tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
            if (null == tagName)
              return console.error(
                "Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",
                name
              ), warnedProperties$1[name] = true;
            if (name !== tagName)
              return console.error(
                "Invalid ARIA attribute `%s`. Did you mean `%s`?",
                name,
                tagName
              ), warnedProperties$1[name] = true;
          }
          if (rARIA$1.test(name)) {
            tagName = name.toLowerCase();
            tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
            if (null == tagName) return warnedProperties$1[name] = true, false;
            name !== tagName && (console.error(
              "Unknown ARIA attribute `%s`. Did you mean `%s`?",
              name,
              tagName
            ), warnedProperties$1[name] = true);
          }
          return true;
        }
        function validateProperties$2(type, props) {
          var invalidProps = [], key;
          for (key in props)
            validateProperty$1(type, key) || invalidProps.push(key);
          props = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          1 === invalidProps.length ? console.error(
            "Invalid aria prop %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",
            props,
            type
          ) : 1 < invalidProps.length && console.error(
            "Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",
            props,
            type
          );
        }
        function validateProperty(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
            return true;
          var lowerCasedName = name.toLowerCase();
          if ("onfocusin" === lowerCasedName || "onfocusout" === lowerCasedName)
            return console.error(
              "React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."
            ), warnedProperties[name] = true;
          if ("function" === typeof value && ("form" === tagName && "action" === name || "input" === tagName && "formAction" === name || "button" === tagName && "formAction" === name))
            return true;
          if (null != eventRegistry) {
            tagName = eventRegistry.possibleRegistrationNames;
            if (eventRegistry.registrationNameDependencies.hasOwnProperty(name))
              return true;
            eventRegistry = tagName.hasOwnProperty(lowerCasedName) ? tagName[lowerCasedName] : null;
            if (null != eventRegistry)
              return console.error(
                "Invalid event handler property `%s`. Did you mean `%s`?",
                name,
                eventRegistry
              ), warnedProperties[name] = true;
            if (EVENT_NAME_REGEX.test(name))
              return console.error(
                "Unknown event handler property `%s`. It will be ignored.",
                name
              ), warnedProperties[name] = true;
          } else if (EVENT_NAME_REGEX.test(name))
            return INVALID_EVENT_NAME_REGEX.test(name) && console.error(
              "Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",
              name
            ), warnedProperties[name] = true;
          if (rARIA.test(name) || rARIACamel.test(name)) return true;
          if ("innerhtml" === lowerCasedName)
            return console.error(
              "Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."
            ), warnedProperties[name] = true;
          if ("aria" === lowerCasedName)
            return console.error(
              "The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."
            ), warnedProperties[name] = true;
          if ("is" === lowerCasedName && null !== value && void 0 !== value && "string" !== typeof value)
            return console.error(
              "Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",
              typeof value
            ), warnedProperties[name] = true;
          if ("number" === typeof value && isNaN(value))
            return console.error(
              "Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",
              name
            ), warnedProperties[name] = true;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            if (lowerCasedName = possibleStandardNames[lowerCasedName], lowerCasedName !== name)
              return console.error(
                "Invalid DOM property `%s`. Did you mean `%s`?",
                name,
                lowerCasedName
              ), warnedProperties[name] = true;
          } else if (name !== lowerCasedName)
            return console.error(
              "React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",
              name,
              lowerCasedName
            ), warnedProperties[name] = true;
          switch (name) {
            case "dangerouslySetInnerHTML":
            case "children":
            case "style":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "ref":
              return true;
            case "innerText":
            case "textContent":
              return true;
          }
          switch (typeof value) {
            case "boolean":
              switch (name) {
                case "autoFocus":
                case "checked":
                case "multiple":
                case "muted":
                case "selected":
                case "contentEditable":
                case "spellCheck":
                case "draggable":
                case "value":
                case "autoReverse":
                case "externalResourcesRequired":
                case "focusable":
                case "preserveAlpha":
                case "allowFullScreen":
                case "async":
                case "autoPlay":
                case "controls":
                case "default":
                case "defer":
                case "disabled":
                case "disablePictureInPicture":
                case "disableRemotePlayback":
                case "formNoValidate":
                case "hidden":
                case "loop":
                case "noModule":
                case "noValidate":
                case "open":
                case "playsInline":
                case "readOnly":
                case "required":
                case "reversed":
                case "scoped":
                case "seamless":
                case "itemScope":
                case "capture":
                case "download":
                case "inert":
                  return true;
                default:
                  lowerCasedName = name.toLowerCase().slice(0, 5);
                  if ("data-" === lowerCasedName || "aria-" === lowerCasedName)
                    return true;
                  value ? console.error(
                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',
                    value,
                    name,
                    name,
                    value,
                    name
                  ) : console.error(
                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',
                    value,
                    name,
                    name,
                    value,
                    name,
                    name,
                    name
                  );
                  return warnedProperties[name] = true;
              }
            case "function":
            case "symbol":
              return warnedProperties[name] = true, false;
            case "string":
              if ("false" === value || "true" === value) {
                switch (name) {
                  case "checked":
                  case "selected":
                  case "multiple":
                  case "muted":
                  case "allowFullScreen":
                  case "async":
                  case "autoPlay":
                  case "controls":
                  case "default":
                  case "defer":
                  case "disabled":
                  case "disablePictureInPicture":
                  case "disableRemotePlayback":
                  case "formNoValidate":
                  case "hidden":
                  case "loop":
                  case "noModule":
                  case "noValidate":
                  case "open":
                  case "playsInline":
                  case "readOnly":
                  case "required":
                  case "reversed":
                  case "scoped":
                  case "seamless":
                  case "itemScope":
                  case "inert":
                    break;
                  default:
                    return true;
                }
                console.error(
                  "Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",
                  value,
                  name,
                  "false" === value ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".',
                  name,
                  value
                );
                warnedProperties[name] = true;
              }
          }
          return true;
        }
        function warnUnknownProperties(type, props, eventRegistry) {
          var unknownProps = [], key;
          for (key in props)
            validateProperty(type, key, props[key], eventRegistry) || unknownProps.push(key);
          props = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          1 === unknownProps.length ? console.error(
            "Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://react.dev/link/attribute-behavior ",
            props,
            type
          ) : 1 < unknownProps.length && console.error(
            "Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ",
            props,
            type
          );
        }
        function sanitizeURL(url) {
          return isJavaScriptProtocol.test("" + url) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : url;
        }
        function noop$1() {
        }
        function getEventTarget(nativeEvent) {
          nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
          nativeEvent.correspondingUseElement && (nativeEvent = nativeEvent.correspondingUseElement);
          return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
        }
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (internalInstance && (target = internalInstance.stateNode)) {
            var props = target[internalPropsKey] || null;
            a: switch (target = internalInstance.stateNode, internalInstance.type) {
              case "input":
                updateInput(
                  target,
                  props.value,
                  props.defaultValue,
                  props.defaultValue,
                  props.checked,
                  props.defaultChecked,
                  props.type,
                  props.name
                );
                internalInstance = props.name;
                if ("radio" === props.type && null != internalInstance) {
                  for (props = target; props.parentNode; ) props = props.parentNode;
                  checkAttributeStringCoercion(internalInstance, "name");
                  props = props.querySelectorAll(
                    'input[name="' + escapeSelectorAttributeValueInsideDoubleQuotes(
                      "" + internalInstance
                    ) + '"][type="radio"]'
                  );
                  for (internalInstance = 0; internalInstance < props.length; internalInstance++) {
                    var otherNode = props[internalInstance];
                    if (otherNode !== target && otherNode.form === target.form) {
                      var otherProps = otherNode[internalPropsKey] || null;
                      if (!otherProps)
                        throw Error(
                          "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."
                        );
                      updateInput(
                        otherNode,
                        otherProps.value,
                        otherProps.defaultValue,
                        otherProps.defaultValue,
                        otherProps.checked,
                        otherProps.defaultChecked,
                        otherProps.type,
                        otherProps.name
                      );
                    }
                  }
                  for (internalInstance = 0; internalInstance < props.length; internalInstance++)
                    otherNode = props[internalInstance], otherNode.form === target.form && updateValueIfChanged(otherNode);
                }
                break a;
              case "textarea":
                updateTextarea(target, props.value, props.defaultValue);
                break a;
              case "select":
                internalInstance = props.value, null != internalInstance && updateOptions(target, !!props.multiple, internalInstance, false);
            }
          }
        }
        function batchedUpdates$1(fn, a, b) {
          if (isInsideEventHandler) return fn(a, b);
          isInsideEventHandler = true;
          try {
            var JSCompiler_inline_result = fn(a);
            return JSCompiler_inline_result;
          } finally {
            if (isInsideEventHandler = false, null !== restoreTarget || null !== restoreQueue) {
              if (flushSyncWork$1(), restoreTarget && (a = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(a), fn))
                for (a = 0; a < fn.length; a++) restoreStateOfTarget(fn[a]);
            }
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (null === stateNode) return null;
          var props = stateNode[internalPropsKey] || null;
          if (null === props) return null;
          stateNode = props[registrationName];
          a: switch (registrationName) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
              inst = !props;
              break a;
            default:
              inst = false;
          }
          if (inst) return null;
          if (stateNode && "function" !== typeof stateNode)
            throw Error(
              "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof stateNode + "` type."
            );
          return stateNode;
        }
        function getData() {
          if (fallbackText) return fallbackText;
          var start, startValue = startText, startLength = startValue.length, end, endValue = "value" in root2 ? root2.value : root2.textContent, endLength = endValue.length;
          for (start = 0; start < startLength && startValue[start] === endValue[start]; start++) ;
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++) ;
          return fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0);
        }
        function getEventCharCode(nativeEvent) {
          var keyCode = nativeEvent.keyCode;
          "charCode" in nativeEvent ? (nativeEvent = nativeEvent.charCode, 0 === nativeEvent && 13 === keyCode && (nativeEvent = 13)) : nativeEvent = keyCode;
          10 === nativeEvent && (nativeEvent = 13);
          return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var propName in Interface)
              Interface.hasOwnProperty(propName) && (reactName = Interface[propName], this[propName] = reactName ? reactName(nativeEvent) : nativeEvent[propName]);
            this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
            },
            persist: function() {
            },
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        function modifierStateGetter(keyArg) {
          var nativeEvent = this.nativeEvent;
          return nativeEvent.getModifierState ? nativeEvent.getModifierState(keyArg) : (keyArg = modifierKeyToProp[keyArg]) ? !!nativeEvent[keyArg] : false;
        }
        function getEventModifierState() {
          return modifierStateGetter;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          nativeEvent = nativeEvent.detail;
          return "object" === typeof nativeEvent && "data" in nativeEvent ? nativeEvent.data : null;
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              if (nativeEvent.which !== SPACEBAR_CODE) return null;
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              return domEventName = nativeEvent.data, domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing)
            return "compositionend" === domEventName || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent) ? (domEventName = getData(), fallbackText = startText = root2 = null, isComposing = false, domEventName) : null;
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) || nativeEvent.ctrlKey && nativeEvent.altKey) {
                if (nativeEvent.char && 1 < nativeEvent.char.length)
                  return nativeEvent.char;
                if (nativeEvent.which)
                  return String.fromCharCode(nativeEvent.which);
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && "ko" !== nativeEvent.locale ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return "input" === nodeName ? !!supportedInputTypes[elem.type] : "textarea" === nodeName ? true : false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) return false;
          eventNameSuffix = "on" + eventNameSuffix;
          var isSupported = eventNameSuffix in document;
          isSupported || (isSupported = document.createElement("div"), isSupported.setAttribute(eventNameSuffix, "return;"), isSupported = "function" === typeof isSupported[eventNameSuffix]);
          return isSupported;
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
          inst = accumulateTwoPhaseListeners(inst, "onChange");
          0 < inst.length && (nativeEvent = new SyntheticEvent(
            "onChange",
            "change",
            null,
            nativeEvent,
            target
          ), dispatchQueue.push({ event: nativeEvent, listeners: inst }));
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) return targetInst;
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if ("change" === domEventName) return targetInst;
        }
        function stopWatchingForValueChange() {
          activeElement$1 && (activeElement$1.detachEvent("onpropertychange", handlePropertyChange), activeElementInst$1 = activeElement$1 = null);
        }
        function handlePropertyChange(nativeEvent) {
          if ("value" === nativeEvent.propertyName && getInstIfValueChanged(activeElementInst$1)) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(
              dispatchQueue,
              activeElementInst$1,
              nativeEvent,
              getEventTarget(nativeEvent)
            );
            batchedUpdates$1(runEventInBatch, dispatchQueue);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          "focusin" === domEventName ? (stopWatchingForValueChange(), activeElement$1 = target, activeElementInst$1 = targetInst, activeElement$1.attachEvent("onpropertychange", handlePropertyChange)) : "focusout" === domEventName && stopWatchingForValueChange();
        }
        function getTargetInstForInputEventPolyfill(domEventName) {
          if ("selectionchange" === domEventName || "keyup" === domEventName || "keydown" === domEventName)
            return getInstIfValueChanged(activeElementInst$1);
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if ("click" === domEventName) return getInstIfValueChanged(targetInst);
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if ("input" === domEventName || "change" === domEventName)
            return getInstIfValueChanged(targetInst);
        }
        function is(x, y) {
          return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
        }
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) return true;
          if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB)
            return false;
          var keysA = Object.keys(objA), keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) return false;
          for (keysB = 0; keysB < keysA.length; keysB++) {
            var currentKey = keysA[keysB];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey]))
              return false;
          }
          return true;
        }
        function getLeafNode(node) {
          for (; node && node.firstChild; ) node = node.firstChild;
          return node;
        }
        function getNodeForCharacterOffset(root3, offset) {
          var node = getLeafNode(root3);
          root3 = 0;
          for (var nodeEnd; node; ) {
            if (3 === node.nodeType) {
              nodeEnd = root3 + node.textContent.length;
              if (root3 <= offset && nodeEnd >= offset)
                return { node, offset: offset - root3 };
              root3 = nodeEnd;
            }
            a: {
              for (; node; ) {
                if (node.nextSibling) {
                  node = node.nextSibling;
                  break a;
                }
                node = node.parentNode;
              }
              node = void 0;
            }
            node = getLeafNode(node);
          }
        }
        function containsNode(outerNode, innerNode) {
          return outerNode && innerNode ? outerNode === innerNode ? true : outerNode && 3 === outerNode.nodeType ? false : innerNode && 3 === innerNode.nodeType ? containsNode(outerNode, innerNode.parentNode) : "contains" in outerNode ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : false : false;
        }
        function getActiveElementDeep(containerInfo) {
          containerInfo = null != containerInfo && null != containerInfo.ownerDocument && null != containerInfo.ownerDocument.defaultView ? containerInfo.ownerDocument.defaultView : window;
          for (var element = getActiveElement(containerInfo.document); element instanceof containerInfo.HTMLIFrameElement; ) {
            try {
              var JSCompiler_inline_result = "string" === typeof element.contentWindow.location.href;
            } catch (err) {
              JSCompiler_inline_result = false;
            }
            if (JSCompiler_inline_result) containerInfo = element.contentWindow;
            else break;
            element = getActiveElement(containerInfo.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && ("input" === nodeName && ("text" === elem.type || "search" === elem.type || "tel" === elem.type || "url" === elem.type || "password" === elem.type) || "textarea" === nodeName || "true" === elem.contentEditable);
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : 9 === nativeEventTarget.nodeType ? nativeEventTarget : nativeEventTarget.ownerDocument;
          mouseDown || null == activeElement || activeElement !== getActiveElement(doc) || (doc = activeElement, "selectionStart" in doc && hasSelectionCapabilities(doc) ? doc = { start: doc.selectionStart, end: doc.selectionEnd } : (doc = (doc.ownerDocument && doc.ownerDocument.defaultView || window).getSelection(), doc = {
            anchorNode: doc.anchorNode,
            anchorOffset: doc.anchorOffset,
            focusNode: doc.focusNode,
            focusOffset: doc.focusOffset
          }), lastSelection && shallowEqual(lastSelection, doc) || (lastSelection = doc, doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect"), 0 < doc.length && (nativeEvent = new SyntheticEvent(
            "onSelect",
            "select",
            null,
            nativeEvent,
            nativeEventTarget
          ), dispatchQueue.push({ event: nativeEvent, listeners: doc }), nativeEvent.target = activeElement)));
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes = {};
          prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes["Webkit" + styleProp] = "webkit" + eventName;
          prefixes["Moz" + styleProp] = "moz" + eventName;
          return prefixes;
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
          if (!vendorPrefixes[eventName]) return eventName;
          var prefixMap = vendorPrefixes[eventName], styleProp;
          for (styleProp in prefixMap)
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
              return prefixedEventNames[eventName] = prefixMap[styleProp];
          return eventName;
        }
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function getArrayKind(array) {
          for (var kind = EMPTY_ARRAY, i = 0; i < array.length; i++) {
            var value = array[i];
            if ("object" === typeof value && null !== value)
              if (isArrayImpl(value) && 2 === value.length && "string" === typeof value[0]) {
                if (kind !== EMPTY_ARRAY && kind !== ENTRIES_ARRAY)
                  return COMPLEX_ARRAY;
                kind = ENTRIES_ARRAY;
              } else return COMPLEX_ARRAY;
            else {
              if ("function" === typeof value || "string" === typeof value && 50 < value.length || kind !== EMPTY_ARRAY && kind !== PRIMITIVE_ARRAY)
                return COMPLEX_ARRAY;
              kind = PRIMITIVE_ARRAY;
            }
          }
          return kind;
        }
        function addObjectToProperties(object, properties, indent, prefix2) {
          for (var key in object)
            hasOwnProperty.call(object, key) && "_" !== key[0] && addValueToProperties(key, object[key], properties, indent, prefix2);
        }
        function addValueToProperties(propertyName, value, properties, indent, prefix2) {
          switch (typeof value) {
            case "object":
              if (null === value) {
                value = "null";
                break;
              } else {
                if (value.$$typeof === REACT_ELEMENT_TYPE) {
                  var typeName2 = getComponentNameFromType(value.type) || "\u2026", key = value.key;
                  value = value.props;
                  var propsKeys = Object.keys(value), propsLength = propsKeys.length;
                  if (null == key && 0 === propsLength) {
                    value = "<" + typeName2 + " />";
                    break;
                  }
                  if (3 > indent || 1 === propsLength && "children" === propsKeys[0] && null == key) {
                    value = "<" + typeName2 + " \u2026 />";
                    break;
                  }
                  properties.push([
                    prefix2 + "\xA0\xA0".repeat(indent) + propertyName,
                    "<" + typeName2
                  ]);
                  null !== key && addValueToProperties(
                    "key",
                    key,
                    properties,
                    indent + 1,
                    prefix2
                  );
                  propertyName = false;
                  for (var propKey in value)
                    "children" === propKey ? null != value.children && (!isArrayImpl(value.children) || 0 < value.children.length) && (propertyName = true) : hasOwnProperty.call(value, propKey) && "_" !== propKey[0] && addValueToProperties(
                      propKey,
                      value[propKey],
                      properties,
                      indent + 1,
                      prefix2
                    );
                  properties.push([
                    "",
                    propertyName ? ">\u2026</" + typeName2 + ">" : "/>"
                  ]);
                  return;
                }
                typeName2 = Object.prototype.toString.call(value);
                typeName2 = typeName2.slice(8, typeName2.length - 1);
                if ("Array" === typeName2) {
                  if (propKey = getArrayKind(value), propKey === PRIMITIVE_ARRAY || propKey === EMPTY_ARRAY) {
                    value = JSON.stringify(value);
                    break;
                  } else if (propKey === ENTRIES_ARRAY) {
                    properties.push([
                      prefix2 + "\xA0\xA0".repeat(indent) + propertyName,
                      ""
                    ]);
                    for (propertyName = 0; propertyName < value.length; propertyName++)
                      typeName2 = value[propertyName], addValueToProperties(
                        typeName2[0],
                        typeName2[1],
                        properties,
                        indent + 1,
                        prefix2
                      );
                    return;
                  }
                }
                if ("Promise" === typeName2) {
                  if ("fulfilled" === value.status) {
                    if (typeName2 = properties.length, addValueToProperties(
                      propertyName,
                      value.value,
                      properties,
                      indent,
                      prefix2
                    ), properties.length > typeName2) {
                      properties = properties[typeName2];
                      properties[1] = "Promise<" + (properties[1] || "Object") + ">";
                      return;
                    }
                  } else if ("rejected" === value.status && (typeName2 = properties.length, addValueToProperties(
                    propertyName,
                    value.reason,
                    properties,
                    indent,
                    prefix2
                  ), properties.length > typeName2)) {
                    properties = properties[typeName2];
                    properties[1] = "Rejected Promise<" + properties[1] + ">";
                    return;
                  }
                  properties.push([
                    "\xA0\xA0".repeat(indent) + propertyName,
                    "Promise"
                  ]);
                  return;
                }
                "Object" === typeName2 && (propKey = Object.getPrototypeOf(value)) && "function" === typeof propKey.constructor && (typeName2 = propKey.constructor.name);
                properties.push([
                  prefix2 + "\xA0\xA0".repeat(indent) + propertyName,
                  "Object" === typeName2 ? 3 > indent ? "" : "\u2026" : typeName2
                ]);
                3 > indent && addObjectToProperties(value, properties, indent + 1, prefix2);
                return;
              }
            case "function":
              value = "" === value.name ? "() => {}" : value.name + "() {}";
              break;
            case "string":
              value = value === OMITTED_PROP_ERROR ? "\u2026" : JSON.stringify(value);
              break;
            case "undefined":
              value = "undefined";
              break;
            case "boolean":
              value = value ? "true" : "false";
              break;
            default:
              value = String(value);
          }
          properties.push([
            prefix2 + "\xA0\xA0".repeat(indent) + propertyName,
            value
          ]);
        }
        function addObjectDiffToProperties(prev, next, properties, indent) {
          var isDeeplyEqual = true;
          for (key in prev)
            key in next || (properties.push([
              REMOVED + "\xA0\xA0".repeat(indent) + key,
              "\u2026"
            ]), isDeeplyEqual = false);
          for (var _key in next)
            if (_key in prev) {
              var key = prev[_key];
              var nextValue = next[_key];
              if (key !== nextValue) {
                if (0 === indent && "children" === _key)
                  isDeeplyEqual = "\xA0\xA0".repeat(indent) + _key, properties.push(
                    [REMOVED + isDeeplyEqual, "\u2026"],
                    [ADDED + isDeeplyEqual, "\u2026"]
                  );
                else {
                  if (!(3 <= indent)) {
                    if ("object" === typeof key && "object" === typeof nextValue && null !== key && null !== nextValue && key.$$typeof === nextValue.$$typeof)
                      if (nextValue.$$typeof === REACT_ELEMENT_TYPE) {
                        if (key.type === nextValue.type && key.key === nextValue.key) {
                          key = getComponentNameFromType(nextValue.type) || "\u2026";
                          isDeeplyEqual = "\xA0\xA0".repeat(indent) + _key;
                          key = "<" + key + " \u2026 />";
                          properties.push(
                            [REMOVED + isDeeplyEqual, key],
                            [ADDED + isDeeplyEqual, key]
                          );
                          isDeeplyEqual = false;
                          continue;
                        }
                      } else {
                        var prevKind = Object.prototype.toString.call(key), nextKind = Object.prototype.toString.call(nextValue);
                        if (prevKind === nextKind && ("[object Object]" === nextKind || "[object Array]" === nextKind)) {
                          prevKind = [
                            UNCHANGED + "\xA0\xA0".repeat(indent) + _key,
                            "[object Array]" === nextKind ? "Array" : ""
                          ];
                          properties.push(prevKind);
                          nextKind = properties.length;
                          addObjectDiffToProperties(
                            key,
                            nextValue,
                            properties,
                            indent + 1
                          ) ? nextKind === properties.length && (prevKind[1] = "Referentially unequal but deeply equal objects. Consider memoization.") : isDeeplyEqual = false;
                          continue;
                        }
                      }
                    else if ("function" === typeof key && "function" === typeof nextValue && key.name === nextValue.name && key.length === nextValue.length && (prevKind = Function.prototype.toString.call(key), nextKind = Function.prototype.toString.call(nextValue), prevKind === nextKind)) {
                      key = "" === nextValue.name ? "() => {}" : nextValue.name + "() {}";
                      properties.push([
                        UNCHANGED + "\xA0\xA0".repeat(indent) + _key,
                        key + " Referentially unequal function closure. Consider memoization."
                      ]);
                      continue;
                    }
                  }
                  addValueToProperties(_key, key, properties, indent, REMOVED);
                  addValueToProperties(_key, nextValue, properties, indent, ADDED);
                }
                isDeeplyEqual = false;
              }
            } else
              properties.push([
                ADDED + "\xA0\xA0".repeat(indent) + _key,
                "\u2026"
              ]), isDeeplyEqual = false;
          return isDeeplyEqual;
        }
        function setCurrentTrackFromLanes(lanes) {
          currentTrack = lanes & 63 ? "Blocking" : lanes & 64 ? "Gesture" : lanes & 4194176 ? "Transition" : lanes & 62914560 ? "Suspense" : lanes & 2080374784 ? "Idle" : "Other";
        }
        function logComponentTrigger(fiber, startTime, endTime, trigger) {
          supportsUserTiming && (reusableComponentOptions.start = startTime, reusableComponentOptions.end = endTime, reusableComponentDevToolDetails.color = "warning", reusableComponentDevToolDetails.tooltipText = trigger, reusableComponentDevToolDetails.properties = null, (fiber = fiber._debugTask) ? fiber.run(
            performance.measure.bind(
              performance,
              trigger,
              reusableComponentOptions
            )
          ) : performance.measure(trigger, reusableComponentOptions));
        }
        function logComponentReappeared(fiber, startTime, endTime) {
          logComponentTrigger(fiber, startTime, endTime, "Reconnect");
        }
        function logComponentRender(fiber, startTime, endTime, wasHydrated, committedLanes) {
          var name = getComponentNameFromFiber(fiber);
          if (null !== name && supportsUserTiming) {
            var alternate = fiber.alternate, selfTime = fiber.actualDuration;
            if (null === alternate || alternate.child !== fiber.child)
              for (var child = fiber.child; null !== child; child = child.sibling)
                selfTime -= child.actualDuration;
            wasHydrated = 0.5 > selfTime ? wasHydrated ? "tertiary-light" : "primary-light" : 10 > selfTime ? wasHydrated ? "tertiary" : "primary" : 100 > selfTime ? wasHydrated ? "tertiary-dark" : "primary-dark" : "error";
            var props = fiber.memoizedProps;
            selfTime = fiber._debugTask;
            null !== props && null !== alternate && alternate.memoizedProps !== props ? (child = [resuableChangedPropsEntry], props = addObjectDiffToProperties(
              alternate.memoizedProps,
              props,
              child,
              0
            ), 1 < child.length && (props && !alreadyWarnedForDeepEquality && 0 === (alternate.lanes & committedLanes) && 100 < fiber.actualDuration ? (alreadyWarnedForDeepEquality = true, child[0] = reusableDeeplyEqualPropsEntry, reusableComponentDevToolDetails.color = "warning", reusableComponentDevToolDetails.tooltipText = DEEP_EQUALITY_WARNING) : (reusableComponentDevToolDetails.color = wasHydrated, reusableComponentDevToolDetails.tooltipText = name), reusableComponentDevToolDetails.properties = child, reusableComponentOptions.start = startTime, reusableComponentOptions.end = endTime, null != selfTime ? selfTime.run(
              performance.measure.bind(
                performance,
                "\u200B" + name,
                reusableComponentOptions
              )
            ) : performance.measure(
              "\u200B" + name,
              reusableComponentOptions
            ))) : null != selfTime ? selfTime.run(
              console.timeStamp.bind(
                console,
                name,
                startTime,
                endTime,
                COMPONENTS_TRACK,
                void 0,
                wasHydrated
              )
            ) : console.timeStamp(
              name,
              startTime,
              endTime,
              COMPONENTS_TRACK,
              void 0,
              wasHydrated
            );
          }
        }
        function logComponentErrored(fiber, startTime, endTime, errors) {
          if (supportsUserTiming) {
            var name = getComponentNameFromFiber(fiber);
            if (null !== name) {
              for (var debugTask = null, properties = [], i = 0; i < errors.length; i++) {
                var capturedValue = errors[i];
                null == debugTask && null !== capturedValue.source && (debugTask = capturedValue.source._debugTask);
                capturedValue = capturedValue.value;
                properties.push([
                  "Error",
                  "object" === typeof capturedValue && null !== capturedValue && "string" === typeof capturedValue.message ? String(capturedValue.message) : String(capturedValue)
                ]);
              }
              null !== fiber.key && addValueToProperties("key", fiber.key, properties, 0, "");
              null !== fiber.memoizedProps && addObjectToProperties(fiber.memoizedProps, properties, 0, "");
              null == debugTask && (debugTask = fiber._debugTask);
              fiber = {
                start: startTime,
                end: endTime,
                detail: {
                  devtools: {
                    color: "error",
                    track: COMPONENTS_TRACK,
                    tooltipText: 13 === fiber.tag ? "Hydration failed" : "Error boundary caught an error",
                    properties
                  }
                }
              };
              debugTask ? debugTask.run(
                performance.measure.bind(performance, "\u200B" + name, fiber)
              ) : performance.measure("\u200B" + name, fiber);
            }
          }
        }
        function logComponentEffect(fiber, startTime, endTime, selfTime, errors) {
          if (null !== errors) {
            if (supportsUserTiming) {
              var name = getComponentNameFromFiber(fiber);
              if (null !== name) {
                selfTime = [];
                for (var i = 0; i < errors.length; i++) {
                  var error = errors[i].value;
                  selfTime.push([
                    "Error",
                    "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error)
                  ]);
                }
                null !== fiber.key && addValueToProperties("key", fiber.key, selfTime, 0, "");
                null !== fiber.memoizedProps && addObjectToProperties(fiber.memoizedProps, selfTime, 0, "");
                startTime = {
                  start: startTime,
                  end: endTime,
                  detail: {
                    devtools: {
                      color: "error",
                      track: COMPONENTS_TRACK,
                      tooltipText: "A lifecycle or effect errored",
                      properties: selfTime
                    }
                  }
                };
                (fiber = fiber._debugTask) ? fiber.run(
                  performance.measure.bind(
                    performance,
                    "\u200B" + name,
                    startTime
                  )
                ) : performance.measure("\u200B" + name, startTime);
              }
            }
          } else
            name = getComponentNameFromFiber(fiber), null !== name && supportsUserTiming && (errors = 1 > selfTime ? "secondary-light" : 100 > selfTime ? "secondary" : 500 > selfTime ? "secondary-dark" : "error", (fiber = fiber._debugTask) ? fiber.run(
              console.timeStamp.bind(
                console,
                name,
                startTime,
                endTime,
                COMPONENTS_TRACK,
                void 0,
                errors
              )
            ) : console.timeStamp(
              name,
              startTime,
              endTime,
              COMPONENTS_TRACK,
              void 0,
              errors
            ));
        }
        function logRenderPhase(startTime, endTime, lanes, debugTask) {
          if (supportsUserTiming && !(endTime <= startTime)) {
            var color = (lanes & 738197653) === lanes ? "tertiary-dark" : "primary-dark";
            lanes = (lanes & 536870912) === lanes ? "Prepared" : (lanes & 201326741) === lanes ? "Hydrated" : "Render";
            debugTask ? debugTask.run(
              console.timeStamp.bind(
                console,
                lanes,
                startTime,
                endTime,
                currentTrack,
                LANES_TRACK_GROUP,
                color
              )
            ) : console.timeStamp(
              lanes,
              startTime,
              endTime,
              currentTrack,
              LANES_TRACK_GROUP,
              color
            );
          }
        }
        function logSuspendedRenderPhase(startTime, endTime, lanes, debugTask) {
          !supportsUserTiming || endTime <= startTime || (lanes = (lanes & 738197653) === lanes ? "tertiary-dark" : "primary-dark", debugTask ? debugTask.run(
            console.timeStamp.bind(
              console,
              "Prewarm",
              startTime,
              endTime,
              currentTrack,
              LANES_TRACK_GROUP,
              lanes
            )
          ) : console.timeStamp(
            "Prewarm",
            startTime,
            endTime,
            currentTrack,
            LANES_TRACK_GROUP,
            lanes
          ));
        }
        function logSuspendedWithDelayPhase(startTime, endTime, lanes, debugTask) {
          !supportsUserTiming || endTime <= startTime || (lanes = (lanes & 738197653) === lanes ? "tertiary-dark" : "primary-dark", debugTask ? debugTask.run(
            console.timeStamp.bind(
              console,
              "Suspended",
              startTime,
              endTime,
              currentTrack,
              LANES_TRACK_GROUP,
              lanes
            )
          ) : console.timeStamp(
            "Suspended",
            startTime,
            endTime,
            currentTrack,
            LANES_TRACK_GROUP,
            lanes
          ));
        }
        function logRecoveredRenderPhase(startTime, endTime, lanes, recoverableErrors, hydrationFailed, debugTask) {
          if (supportsUserTiming && !(endTime <= startTime)) {
            lanes = [];
            for (var i = 0; i < recoverableErrors.length; i++) {
              var error = recoverableErrors[i].value;
              lanes.push([
                "Recoverable Error",
                "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error)
              ]);
            }
            startTime = {
              start: startTime,
              end: endTime,
              detail: {
                devtools: {
                  color: "primary-dark",
                  track: currentTrack,
                  trackGroup: LANES_TRACK_GROUP,
                  tooltipText: hydrationFailed ? "Hydration Failed" : "Recovered after Error",
                  properties: lanes
                }
              }
            };
            debugTask ? debugTask.run(
              performance.measure.bind(performance, "Recovered", startTime)
            ) : performance.measure("Recovered", startTime);
          }
        }
        function logErroredRenderPhase(startTime, endTime, lanes, debugTask) {
          !supportsUserTiming || endTime <= startTime || (debugTask ? debugTask.run(
            console.timeStamp.bind(
              console,
              "Errored",
              startTime,
              endTime,
              currentTrack,
              LANES_TRACK_GROUP,
              "error"
            )
          ) : console.timeStamp(
            "Errored",
            startTime,
            endTime,
            currentTrack,
            LANES_TRACK_GROUP,
            "error"
          ));
        }
        function logSuspendedCommitPhase(startTime, endTime, reason, debugTask) {
          !supportsUserTiming || endTime <= startTime || (debugTask ? debugTask.run(
            console.timeStamp.bind(
              console,
              reason,
              startTime,
              endTime,
              currentTrack,
              LANES_TRACK_GROUP,
              "secondary-light"
            )
          ) : console.timeStamp(
            reason,
            startTime,
            endTime,
            currentTrack,
            LANES_TRACK_GROUP,
            "secondary-light"
          ));
        }
        function logCommitErrored(startTime, endTime, errors, passive, debugTask) {
          if (supportsUserTiming && !(endTime <= startTime)) {
            for (var properties = [], i = 0; i < errors.length; i++) {
              var error = errors[i].value;
              properties.push([
                "Error",
                "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error)
              ]);
            }
            startTime = {
              start: startTime,
              end: endTime,
              detail: {
                devtools: {
                  color: "error",
                  track: currentTrack,
                  trackGroup: LANES_TRACK_GROUP,
                  tooltipText: passive ? "Remaining Effects Errored" : "Commit Errored",
                  properties
                }
              }
            };
            debugTask ? debugTask.run(
              performance.measure.bind(performance, "Errored", startTime)
            ) : performance.measure("Errored", startTime);
          }
        }
        function logAnimatingPhase(startTime, endTime, debugTask) {
          !supportsUserTiming || endTime <= startTime || (debugTask ? debugTask.run(
            console.timeStamp.bind(
              console,
              "Animating",
              startTime,
              endTime,
              currentTrack,
              LANES_TRACK_GROUP,
              "secondary-dark"
            )
          ) : console.timeStamp(
            "Animating",
            startTime,
            endTime,
            currentTrack,
            LANES_TRACK_GROUP,
            "secondary-dark"
          ));
        }
        function finishQueueingConcurrentUpdates() {
          for (var endIndex = concurrentQueuesIndex, i = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0; i < endIndex; ) {
            var fiber = concurrentQueues[i];
            concurrentQueues[i++] = null;
            var queue = concurrentQueues[i];
            concurrentQueues[i++] = null;
            var update = concurrentQueues[i];
            concurrentQueues[i++] = null;
            var lane = concurrentQueues[i];
            concurrentQueues[i++] = null;
            if (null !== queue && null !== update) {
              var pending = queue.pending;
              null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
              queue.pending = update;
            }
            0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
          }
        }
        function enqueueUpdate$1(fiber, queue, update, lane) {
          concurrentQueues[concurrentQueuesIndex++] = fiber;
          concurrentQueues[concurrentQueuesIndex++] = queue;
          concurrentQueues[concurrentQueuesIndex++] = update;
          concurrentQueues[concurrentQueuesIndex++] = lane;
          concurrentlyUpdatedLanes |= lane;
          fiber.lanes |= lane;
          fiber = fiber.alternate;
          null !== fiber && (fiber.lanes |= lane);
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          enqueueUpdate$1(fiber, queue, update, lane);
          return getRootForUpdatedFiber(fiber);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          enqueueUpdate$1(fiber, null, null, lane);
          return getRootForUpdatedFiber(fiber);
        }
        function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
          sourceFiber.lanes |= lane;
          var alternate = sourceFiber.alternate;
          null !== alternate && (alternate.lanes |= lane);
          for (var isHidden = false, parent = sourceFiber.return; null !== parent; )
            parent.childLanes |= lane, alternate = parent.alternate, null !== alternate && (alternate.childLanes |= lane), 22 === parent.tag && (sourceFiber = parent.stateNode, null === sourceFiber || sourceFiber._visibility & OffscreenVisible || (isHidden = true)), sourceFiber = parent, parent = parent.return;
          return 3 === sourceFiber.tag ? (parent = sourceFiber.stateNode, isHidden && null !== update && (isHidden = 31 - clz32(lane), sourceFiber = parent.hiddenUpdates, alternate = sourceFiber[isHidden], null === alternate ? sourceFiber[isHidden] = [update] : alternate.push(update), update.lane = lane | 536870912), parent) : null;
        }
        function getRootForUpdatedFiber(sourceFiber) {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT)
            throw nestedPassiveUpdateCount = nestedUpdateCount = 0, rootWithPassiveNestedUpdates = rootWithNestedUpdates = null, Error(
              "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."
            );
          nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT && (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, console.error(
            "Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."
          ));
          null === sourceFiber.alternate && 0 !== (sourceFiber.flags & 4098) && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          for (var node = sourceFiber, parent = node.return; null !== parent; )
            null === node.alternate && 0 !== (node.flags & 4098) && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber), node = parent, parent = node.return;
          return 3 === node.tag ? node.stateNode : null;
        }
        function resolveFunctionForHotReloading(type) {
          if (null === resolveFamily) return type;
          var family = resolveFamily(type);
          return void 0 === family ? type : family.current;
        }
        function resolveForwardRefForHotReloading(type) {
          if (null === resolveFamily) return type;
          var family = resolveFamily(type);
          return void 0 === family ? null !== type && void 0 !== type && "function" === typeof type.render && (family = resolveFunctionForHotReloading(type.render), type.render !== family) ? (family = { $$typeof: REACT_FORWARD_REF_TYPE, render: family }, void 0 !== type.displayName && (family.displayName = type.displayName), family) : type : family.current;
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          if (null === resolveFamily) return false;
          var prevType = fiber.elementType;
          element = element.type;
          var needsCompareFamilies = false, $$typeofNextType = "object" === typeof element && null !== element ? element.$$typeof : null;
          switch (fiber.tag) {
            case 1:
              "function" === typeof element && (needsCompareFamilies = true);
              break;
            case 0:
              "function" === typeof element ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
              break;
            case 11:
              $$typeofNextType === REACT_FORWARD_REF_TYPE ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
              break;
            case 14:
            case 15:
              $$typeofNextType === REACT_MEMO_TYPE ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
              break;
            default:
              return false;
          }
          return needsCompareFamilies && (fiber = resolveFamily(prevType), void 0 !== fiber && fiber === resolveFamily(element)) ? true : false;
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          null !== resolveFamily && "function" === typeof WeakSet && (null === failedBoundaries && (failedBoundaries = /* @__PURE__ */ new WeakSet()), failedBoundaries.add(fiber));
        }
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          do {
            var _fiber = fiber, alternate = _fiber.alternate, child = _fiber.child, sibling = _fiber.sibling, tag = _fiber.tag;
            _fiber = _fiber.type;
            var candidateType = null;
            switch (tag) {
              case 0:
              case 15:
              case 1:
                candidateType = _fiber;
                break;
              case 11:
                candidateType = _fiber.render;
            }
            if (null === resolveFamily)
              throw Error("Expected resolveFamily to be set during hot reload.");
            var needsRender = false;
            _fiber = false;
            null !== candidateType && (candidateType = resolveFamily(candidateType), void 0 !== candidateType && (staleFamilies.has(candidateType) ? _fiber = true : updatedFamilies.has(candidateType) && (1 === tag ? _fiber = true : needsRender = true)));
            null !== failedBoundaries && (failedBoundaries.has(fiber) || null !== alternate && failedBoundaries.has(alternate)) && (_fiber = true);
            _fiber && (fiber._debugNeedsRemount = true);
            if (_fiber || needsRender)
              alternate = enqueueConcurrentRenderForLane(fiber, 2), null !== alternate && scheduleUpdateOnFiber(alternate, fiber, 2);
            null === child || _fiber || scheduleFibersWithFamiliesRecursively(
              child,
              updatedFamilies,
              staleFamilies
            );
            if (null === sibling) break;
            fiber = sibling;
          } while (1);
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
          this.index = 0;
          this.refCleanup = this.ref = null;
          this.pendingProps = pendingProps;
          this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
          this.mode = mode;
          this.subtreeFlags = this.flags = 0;
          this.deletions = null;
          this.childLanes = this.lanes = 0;
          this.alternate = null;
          this.actualDuration = -0;
          this.actualStartTime = -1.1;
          this.treeBaseDuration = this.selfBaseDuration = -0;
          this._debugTask = this._debugStack = this._debugOwner = this._debugInfo = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;
          hasBadMapPolyfill || "function" !== typeof Object.preventExtensions || Object.preventExtensions(this);
        }
        function shouldConstruct(Component) {
          Component = Component.prototype;
          return !(!Component || !Component.isReactComponent);
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          null === workInProgress2 ? (workInProgress2 = createFiber(
            current2.tag,
            pendingProps,
            current2.key,
            current2.mode
          ), workInProgress2.elementType = current2.elementType, workInProgress2.type = current2.type, workInProgress2.stateNode = current2.stateNode, workInProgress2._debugOwner = current2._debugOwner, workInProgress2._debugStack = current2._debugStack, workInProgress2._debugTask = current2._debugTask, workInProgress2._debugHookTypes = current2._debugHookTypes, workInProgress2.alternate = current2, current2.alternate = workInProgress2) : (workInProgress2.pendingProps = pendingProps, workInProgress2.type = current2.type, workInProgress2.flags = 0, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null, workInProgress2.actualDuration = -0, workInProgress2.actualStartTime = -1.1);
          workInProgress2.flags = current2.flags & 65011712;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          pendingProps = current2.dependencies;
          workInProgress2.dependencies = null === pendingProps ? null : {
            lanes: pendingProps.lanes,
            firstContext: pendingProps.firstContext,
            _debugThenableState: pendingProps._debugThenableState
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          workInProgress2.refCleanup = current2.refCleanup;
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          workInProgress2._debugInfo = current2._debugInfo;
          workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
          switch (workInProgress2.tag) {
            case 0:
            case 15:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case 1:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case 11:
              workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= 65011714;
          var current2 = workInProgress2.alternate;
          null === current2 ? (workInProgress2.childLanes = 0, workInProgress2.lanes = renderLanes2, workInProgress2.child = null, workInProgress2.subtreeFlags = 0, workInProgress2.memoizedProps = null, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.dependencies = null, workInProgress2.stateNode = null, workInProgress2.selfBaseDuration = 0, workInProgress2.treeBaseDuration = 0) : (workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue, workInProgress2.type = current2.type, renderLanes2 = current2.dependencies, workInProgress2.dependencies = null === renderLanes2 ? null : {
            lanes: renderLanes2.lanes,
            firstContext: renderLanes2.firstContext,
            _debugThenableState: renderLanes2._debugThenableState
          }, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration);
          return workInProgress2;
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = 0, resolvedType = type;
          if ("function" === typeof type)
            shouldConstruct(type) && (fiberTag = 1), resolvedType = resolveFunctionForHotReloading(resolvedType);
          else if ("string" === typeof type)
            fiberTag = getHostContext(), fiberTag = isHostHoistableType(type, pendingProps, fiberTag) ? 26 : "html" === type || "head" === type || "body" === type ? 27 : 5;
          else
            a: switch (type) {
              case REACT_ACTIVITY_TYPE:
                return key = createFiber(31, pendingProps, key, mode), key.elementType = REACT_ACTIVITY_TYPE, key.lanes = lanes, key;
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(
                  pendingProps.children,
                  mode,
                  lanes,
                  key
                );
              case REACT_STRICT_MODE_TYPE:
                fiberTag = 8;
                mode |= StrictLegacyMode;
                mode |= StrictEffectsMode;
                break;
              case REACT_PROFILER_TYPE:
                return type = pendingProps, owner = mode, "string" !== typeof type.id && console.error(
                  'Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',
                  typeof type.id
                ), key = createFiber(12, type, key, owner | ProfileMode), key.elementType = REACT_PROFILER_TYPE, key.lanes = lanes, key.stateNode = { effectDuration: 0, passiveEffectDuration: 0 }, key;
              case REACT_SUSPENSE_TYPE:
                return key = createFiber(13, pendingProps, key, mode), key.elementType = REACT_SUSPENSE_TYPE, key.lanes = lanes, key;
              case REACT_SUSPENSE_LIST_TYPE:
                return key = createFiber(19, pendingProps, key, mode), key.elementType = REACT_SUSPENSE_LIST_TYPE, key.lanes = lanes, key;
              default:
                if ("object" === typeof type && null !== type)
                  switch (type.$$typeof) {
                    case REACT_CONTEXT_TYPE:
                      fiberTag = 10;
                      break a;
                    case REACT_CONSUMER_TYPE:
                      fiberTag = 9;
                      break a;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = 11;
                      resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      break a;
                    case REACT_MEMO_TYPE:
                      fiberTag = 14;
                      break a;
                    case REACT_LAZY_TYPE:
                      fiberTag = 16;
                      resolvedType = null;
                      break a;
                  }
                resolvedType = "";
                if (void 0 === type || "object" === typeof type && null !== type && 0 === Object.keys(type).length)
                  resolvedType += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                null === type ? pendingProps = "null" : isArrayImpl(type) ? pendingProps = "array" : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE ? (pendingProps = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", resolvedType = " Did you accidentally export a JSX literal instead of a component?") : pendingProps = typeof type;
                (fiberTag = owner ? getComponentNameFromOwner(owner) : null) && (resolvedType += "\n\nCheck the render method of `" + fiberTag + "`.");
                fiberTag = 29;
                pendingProps = Error(
                  "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (pendingProps + "." + resolvedType)
                );
                resolvedType = null;
            }
          key = createFiber(fiberTag, pendingProps, key, mode);
          key.elementType = type;
          key.type = resolvedType;
          key.lanes = lanes;
          key._debugOwner = owner;
          return key;
        }
        function createFiberFromElement(element, mode, lanes) {
          mode = createFiberFromTypeAndProps(
            element.type,
            element.key,
            element.props,
            element._owner,
            mode,
            lanes
          );
          mode._debugOwner = element._owner;
          mode._debugStack = element._debugStack;
          mode._debugTask = element._debugTask;
          return mode;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          elements = createFiber(7, elements, key, mode);
          elements.lanes = lanes;
          return elements;
        }
        function createFiberFromText(content, mode, lanes) {
          content = createFiber(6, content, null, mode);
          content.lanes = lanes;
          return content;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(18, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          mode = createFiber(
            4,
            null !== portal.children ? portal.children : [],
            portal.key,
            mode
          );
          mode.lanes = lanes;
          mode.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return mode;
        }
        function createCapturedValueAtFiber(value, source) {
          if ("object" === typeof value && null !== value) {
            var existing = CapturedStacks.get(value);
            if (void 0 !== existing) return existing;
            source = {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
            CapturedStacks.set(value, source);
            return source;
          }
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          workInProgress2 = treeContextOverflow;
          var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
          baseIdWithLeadingBit &= ~(1 << baseLength);
          index += 1;
          var length = 32 - clz32(totalChildren) + baseLength;
          if (30 < length) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            length = (baseIdWithLeadingBit & (1 << numberOfOverflowBits) - 1).toString(32);
            baseIdWithLeadingBit >>= numberOfOverflowBits;
            baseLength -= numberOfOverflowBits;
            treeContextId = 1 << 32 - clz32(totalChildren) + baseLength | index << baseLength | baseIdWithLeadingBit;
            treeContextOverflow = length + workInProgress2;
          } else
            treeContextId = 1 << length | index << baseLength | baseIdWithLeadingBit, treeContextOverflow = workInProgress2;
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          null !== workInProgress2.return && (pushTreeFork(workInProgress2, 1), pushTreeId(workInProgress2, 1, 0));
        }
        function popTreeContext(workInProgress2) {
          for (; workInProgress2 === treeForkProvider; )
            treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
          for (; workInProgress2 === treeContextProvider; )
            treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          return null !== treeContextProvider ? { id: treeContextId, overflow: treeContextOverflow } : null;
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          isHydrating || console.error(
            "Expected to be hydrating. This is a bug in React. Please file an issue."
          );
        }
        function buildHydrationDiffNode(fiber, distanceFromLeaf) {
          if (null === fiber.return) {
            if (null === hydrationDiffRootDEV)
              hydrationDiffRootDEV = {
                fiber,
                children: [],
                serverProps: void 0,
                serverTail: [],
                distanceFromLeaf
              };
            else {
              if (hydrationDiffRootDEV.fiber !== fiber)
                throw Error(
                  "Saw multiple hydration diff roots in a pass. This is a bug in React."
                );
              hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf && (hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf);
            }
            return hydrationDiffRootDEV;
          }
          var siblings = buildHydrationDiffNode(
            fiber.return,
            distanceFromLeaf + 1
          ).children;
          if (0 < siblings.length && siblings[siblings.length - 1].fiber === fiber)
            return siblings = siblings[siblings.length - 1], siblings.distanceFromLeaf > distanceFromLeaf && (siblings.distanceFromLeaf = distanceFromLeaf), siblings;
          distanceFromLeaf = {
            fiber,
            children: [],
            serverProps: void 0,
            serverTail: [],
            distanceFromLeaf
          };
          siblings.push(distanceFromLeaf);
          return distanceFromLeaf;
        }
        function warnIfHydrating() {
          isHydrating && console.error(
            "We should not be hydrating here. This is a bug in React. Please file a bug."
          );
        }
        function warnNonHydratedInstance(fiber, rejectedCandidate) {
          didSuspendOrErrorDEV || (fiber = buildHydrationDiffNode(fiber, 0), fiber.serverProps = null, null !== rejectedCandidate && (rejectedCandidate = describeHydratableInstanceForDevWarnings(rejectedCandidate), fiber.serverTail.push(rejectedCandidate)));
        }
        function throwOnHydrationMismatch(fiber) {
          var fromText = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : false, diff = "", diffRoot = hydrationDiffRootDEV;
          null !== diffRoot && (hydrationDiffRootDEV = null, diff = describeDiff(diffRoot));
          queueHydrationError(
            createCapturedValueAtFiber(
              Error(
                "Hydration failed because the server rendered " + (fromText ? "text" : "HTML") + " didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\nhttps://react.dev/link/hydration-mismatch" + diff
              ),
              fiber
            )
          );
          throw HydrationMismatchException;
        }
        function prepareToHydrateHostInstance(fiber) {
          var didHydrate = fiber.stateNode;
          var type = fiber.type, props = fiber.memoizedProps;
          didHydrate[internalInstanceKey] = fiber;
          didHydrate[internalPropsKey] = props;
          validatePropertiesInDevelopment(type, props);
          switch (type) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", didHydrate);
              listenToNonDelegatedEvent("close", didHydrate);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", didHydrate);
              break;
            case "video":
            case "audio":
              for (type = 0; type < mediaEventTypes.length; type++)
                listenToNonDelegatedEvent(mediaEventTypes[type], didHydrate);
              break;
            case "source":
              listenToNonDelegatedEvent("error", didHydrate);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", didHydrate);
              listenToNonDelegatedEvent("load", didHydrate);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", didHydrate);
              break;
            case "input":
              checkControlledValueProps("input", props);
              listenToNonDelegatedEvent("invalid", didHydrate);
              validateInputProps(didHydrate, props);
              initInput(
                didHydrate,
                props.value,
                props.defaultValue,
                props.checked,
                props.defaultChecked,
                props.type,
                props.name,
                true
              );
              break;
            case "option":
              validateOptionProps(didHydrate, props);
              break;
            case "select":
              checkControlledValueProps("select", props);
              listenToNonDelegatedEvent("invalid", didHydrate);
              validateSelectProps(didHydrate, props);
              break;
            case "textarea":
              checkControlledValueProps("textarea", props), listenToNonDelegatedEvent("invalid", didHydrate), validateTextareaProps(didHydrate, props), initTextarea(
                didHydrate,
                props.value,
                props.defaultValue,
                props.children
              );
          }
          type = props.children;
          "string" !== typeof type && "number" !== typeof type && "bigint" !== typeof type || didHydrate.textContent === "" + type || true === props.suppressHydrationWarning || checkForUnmatchedText(didHydrate.textContent, type) ? (null != props.popover && (listenToNonDelegatedEvent("beforetoggle", didHydrate), listenToNonDelegatedEvent("toggle", didHydrate)), null != props.onScroll && listenToNonDelegatedEvent("scroll", didHydrate), null != props.onScrollEnd && listenToNonDelegatedEvent("scrollend", didHydrate), null != props.onClick && (didHydrate.onclick = noop$1), didHydrate = true) : didHydrate = false;
          didHydrate || throwOnHydrationMismatch(fiber, true);
        }
        function popToNextHostParent(fiber) {
          for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
            switch (hydrationParentFiber.tag) {
              case 5:
              case 31:
              case 13:
                rootOrSingletonContext = false;
                return;
              case 27:
              case 3:
                rootOrSingletonContext = true;
                return;
              default:
                hydrationParentFiber = hydrationParentFiber.return;
            }
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) return false;
          if (!isHydrating)
            return popToNextHostParent(fiber), isHydrating = true, false;
          var tag = fiber.tag, JSCompiler_temp;
          if (JSCompiler_temp = 3 !== tag && 27 !== tag) {
            if (JSCompiler_temp = 5 === tag)
              JSCompiler_temp = fiber.type, JSCompiler_temp = !("form" !== JSCompiler_temp && "button" !== JSCompiler_temp) || shouldSetTextContent(fiber.type, fiber.memoizedProps);
            JSCompiler_temp = !JSCompiler_temp;
          }
          if (JSCompiler_temp && nextHydratableInstance) {
            for (JSCompiler_temp = nextHydratableInstance; JSCompiler_temp; ) {
              var diffNode = buildHydrationDiffNode(fiber, 0), description = describeHydratableInstanceForDevWarnings(JSCompiler_temp);
              diffNode.serverTail.push(description);
              JSCompiler_temp = "Suspense" === description.type ? getNextHydratableInstanceAfterHydrationBoundary(JSCompiler_temp) : getNextHydratable(JSCompiler_temp.nextSibling);
            }
            throwOnHydrationMismatch(fiber);
          }
          popToNextHostParent(fiber);
          if (13 === tag) {
            fiber = fiber.memoizedState;
            fiber = null !== fiber ? fiber.dehydrated : null;
            if (!fiber)
              throw Error(
                "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
              );
            nextHydratableInstance = getNextHydratableInstanceAfterHydrationBoundary(fiber);
          } else if (31 === tag) {
            fiber = fiber.memoizedState;
            fiber = null !== fiber ? fiber.dehydrated : null;
            if (!fiber)
              throw Error(
                "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
              );
            nextHydratableInstance = getNextHydratableInstanceAfterHydrationBoundary(fiber);
          } else
            27 === tag ? (tag = nextHydratableInstance, isSingletonScope(fiber.type) ? (fiber = previousHydratableOnEnteringScopedSingleton, previousHydratableOnEnteringScopedSingleton = null, nextHydratableInstance = fiber) : nextHydratableInstance = tag) : nextHydratableInstance = hydrationParentFiber ? getNextHydratable(fiber.stateNode.nextSibling) : null;
          return true;
        }
        function resetHydrationState() {
          nextHydratableInstance = hydrationParentFiber = null;
          didSuspendOrErrorDEV = isHydrating = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          var queuedErrors = hydrationErrors;
          null !== queuedErrors && (null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = queuedErrors : workInProgressRootRecoverableErrors.push.apply(
            workInProgressRootRecoverableErrors,
            queuedErrors
          ), hydrationErrors = null);
          return queuedErrors;
        }
        function queueHydrationError(error) {
          null === hydrationErrors ? hydrationErrors = [error] : hydrationErrors.push(error);
        }
        function emitPendingHydrationWarnings() {
          var diffRoot = hydrationDiffRootDEV;
          if (null !== diffRoot) {
            hydrationDiffRootDEV = null;
            for (var diff = describeDiff(diffRoot); 0 < diffRoot.children.length; )
              diffRoot = diffRoot.children[0];
            runWithFiberInDEV(diffRoot.fiber, function() {
              console.error(
                "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\n%s%s",
                "https://react.dev/link/hydration-mismatch",
                diff
              );
            });
          }
        }
        function resetContextDependencies() {
          lastContextDependency = currentlyRenderingFiber$1 = null;
          isDisallowedContextReadInDEV = false;
        }
        function pushProvider(providerFiber, context, nextValue) {
          push(valueCursor, context._currentValue, providerFiber);
          context._currentValue = nextValue;
          push(rendererCursorDEV, context._currentRenderer, providerFiber);
          void 0 !== context._currentRenderer && null !== context._currentRenderer && context._currentRenderer !== rendererSigil && console.error(
            "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
          );
          context._currentRenderer = rendererSigil;
        }
        function popProvider(context, providerFiber) {
          context._currentValue = valueCursor.current;
          var currentRenderer = rendererCursorDEV.current;
          pop(rendererCursorDEV, providerFiber);
          context._currentRenderer = currentRenderer;
          pop(valueCursor, providerFiber);
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          for (; null !== parent; ) {
            var alternate = parent.alternate;
            (parent.childLanes & renderLanes2) !== renderLanes2 ? (parent.childLanes |= renderLanes2, null !== alternate && (alternate.childLanes |= renderLanes2)) : null !== alternate && (alternate.childLanes & renderLanes2) !== renderLanes2 && (alternate.childLanes |= renderLanes2);
            if (parent === propagationRoot) break;
            parent = parent.return;
          }
          parent !== propagationRoot && console.error(
            "Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue."
          );
        }
        function propagateContextChanges(workInProgress2, contexts, renderLanes2, forcePropagateEntireTree) {
          var fiber = workInProgress2.child;
          null !== fiber && (fiber.return = workInProgress2);
          for (; null !== fiber; ) {
            var list = fiber.dependencies;
            if (null !== list) {
              var nextFiber = fiber.child;
              list = list.firstContext;
              a: for (; null !== list; ) {
                var dependency = list;
                list = fiber;
                for (var i = 0; i < contexts.length; i++)
                  if (dependency.context === contexts[i]) {
                    list.lanes |= renderLanes2;
                    dependency = list.alternate;
                    null !== dependency && (dependency.lanes |= renderLanes2);
                    scheduleContextWorkOnParentPath(
                      list.return,
                      renderLanes2,
                      workInProgress2
                    );
                    forcePropagateEntireTree || (nextFiber = null);
                    break a;
                  }
                list = dependency.next;
              }
            } else if (18 === fiber.tag) {
              nextFiber = fiber.return;
              if (null === nextFiber)
                throw Error(
                  "We just came from a parent so we must have had a parent. This is a bug in React."
                );
              nextFiber.lanes |= renderLanes2;
              list = nextFiber.alternate;
              null !== list && (list.lanes |= renderLanes2);
              scheduleContextWorkOnParentPath(
                nextFiber,
                renderLanes2,
                workInProgress2
              );
              nextFiber = null;
            } else nextFiber = fiber.child;
            if (null !== nextFiber) nextFiber.return = fiber;
            else
              for (nextFiber = fiber; null !== nextFiber; ) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                fiber = nextFiber.sibling;
                if (null !== fiber) {
                  fiber.return = nextFiber.return;
                  nextFiber = fiber;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            fiber = nextFiber;
          }
        }
        function propagateParentContextChanges(current2, workInProgress2, renderLanes2, forcePropagateEntireTree) {
          current2 = null;
          for (var parent = workInProgress2, isInsidePropagationBailout = false; null !== parent; ) {
            if (!isInsidePropagationBailout) {
              if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = true;
              else if (0 !== (parent.flags & 262144)) break;
            }
            if (10 === parent.tag) {
              var currentParent = parent.alternate;
              if (null === currentParent)
                throw Error("Should have a current fiber. This is a bug in React.");
              currentParent = currentParent.memoizedProps;
              if (null !== currentParent) {
                var context = parent.type;
                objectIs(parent.pendingProps.value, currentParent.value) || (null !== current2 ? current2.push(context) : current2 = [context]);
              }
            } else if (parent === hostTransitionProviderCursor.current) {
              currentParent = parent.alternate;
              if (null === currentParent)
                throw Error("Should have a current fiber. This is a bug in React.");
              currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (null !== current2 ? current2.push(HostTransitionContext) : current2 = [HostTransitionContext]);
            }
            parent = parent.return;
          }
          null !== current2 && propagateContextChanges(
            workInProgress2,
            current2,
            renderLanes2,
            forcePropagateEntireTree
          );
          workInProgress2.flags |= 262144;
        }
        function checkIfContextChanged(currentDependencies) {
          for (currentDependencies = currentDependencies.firstContext; null !== currentDependencies; ) {
            if (!objectIs(
              currentDependencies.context._currentValue,
              currentDependencies.memoizedValue
            ))
              return true;
            currentDependencies = currentDependencies.next;
          }
          return false;
        }
        function prepareToReadContext(workInProgress2) {
          currentlyRenderingFiber$1 = workInProgress2;
          lastContextDependency = null;
          workInProgress2 = workInProgress2.dependencies;
          null !== workInProgress2 && (workInProgress2.firstContext = null);
        }
        function readContext(context) {
          isDisallowedContextReadInDEV && console.error(
            "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
          );
          return readContextForConsumer(currentlyRenderingFiber$1, context);
        }
        function readContextDuringReconciliation(consumer, context) {
          null === currentlyRenderingFiber$1 && prepareToReadContext(consumer);
          return readContextForConsumer(consumer, context);
        }
        function readContextForConsumer(consumer, context) {
          var value = context._currentValue;
          context = { context, memoizedValue: value, next: null };
          if (null === lastContextDependency) {
            if (null === consumer)
              throw Error(
                "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
              );
            lastContextDependency = context;
            consumer.dependencies = {
              lanes: 0,
              firstContext: context,
              _debugThenableState: null
            };
            consumer.flags |= 524288;
          } else lastContextDependency = lastContextDependency.next = context;
          return value;
        }
        function createCache() {
          return {
            controller: new AbortControllerLocal(),
            data: /* @__PURE__ */ new Map(),
            refCount: 0
          };
        }
        function retainCache(cache) {
          cache.controller.signal.aborted && console.warn(
            "A cache instance was retained after it was already freed. This likely indicates a bug in React."
          );
          cache.refCount++;
        }
        function releaseCache(cache) {
          cache.refCount--;
          0 > cache.refCount && console.warn(
            "A cache instance was released after it was already freed. This likely indicates a bug in React."
          );
          0 === cache.refCount && scheduleCallback$2(NormalPriority, function() {
            cache.controller.abort();
          });
        }
        function startUpdateTimerByLane(lane, method, fiber) {
          if (0 !== (lane & 127))
            0 > blockingUpdateTime && (blockingUpdateTime = now(), blockingUpdateTask = createTask(method), blockingUpdateMethodName = method, null != fiber && (blockingUpdateComponentName = getComponentNameFromFiber(fiber)), (executionContext & (RenderContext | CommitContext)) !== NoContext && (componentEffectSpawnedUpdate = true, blockingUpdateType = SPAWNED_UPDATE), lane = resolveEventTimeStamp(), method = resolveEventType(), lane !== blockingEventRepeatTime || method !== blockingEventType ? blockingEventRepeatTime = -1.1 : null !== method && (blockingUpdateType = SPAWNED_UPDATE), blockingEventTime = lane, blockingEventType = method);
          else if (0 !== (lane & 4194048) && 0 > transitionUpdateTime && (transitionUpdateTime = now(), transitionUpdateTask = createTask(method), transitionUpdateMethodName = method, null != fiber && (transitionUpdateComponentName = getComponentNameFromFiber(fiber)), 0 > transitionStartTime)) {
            lane = resolveEventTimeStamp();
            method = resolveEventType();
            if (lane !== transitionEventRepeatTime || method !== transitionEventType)
              transitionEventRepeatTime = -1.1;
            transitionEventTime = lane;
            transitionEventType = method;
          }
        }
        function startHostActionTimer(fiber) {
          if (0 > blockingUpdateTime) {
            blockingUpdateTime = now();
            blockingUpdateTask = null != fiber._debugTask ? fiber._debugTask : null;
            (executionContext & (RenderContext | CommitContext)) !== NoContext && (blockingUpdateType = SPAWNED_UPDATE);
            var newEventTime = resolveEventTimeStamp(), newEventType = resolveEventType();
            newEventTime !== blockingEventRepeatTime || newEventType !== blockingEventType ? blockingEventRepeatTime = -1.1 : null !== newEventType && (blockingUpdateType = SPAWNED_UPDATE);
            blockingEventTime = newEventTime;
            blockingEventType = newEventType;
          }
          if (0 > transitionUpdateTime && (transitionUpdateTime = now(), transitionUpdateTask = null != fiber._debugTask ? fiber._debugTask : null, 0 > transitionStartTime)) {
            fiber = resolveEventTimeStamp();
            newEventTime = resolveEventType();
            if (fiber !== transitionEventRepeatTime || newEventTime !== transitionEventType)
              transitionEventRepeatTime = -1.1;
            transitionEventTime = fiber;
            transitionEventType = newEventTime;
          }
        }
        function pushNestedEffectDurations() {
          var prevEffectDuration = profilerEffectDuration;
          profilerEffectDuration = 0;
          return prevEffectDuration;
        }
        function popNestedEffectDurations(prevEffectDuration) {
          var elapsedTime = profilerEffectDuration;
          profilerEffectDuration = prevEffectDuration;
          return elapsedTime;
        }
        function bubbleNestedEffectDurations(prevEffectDuration) {
          var elapsedTime = profilerEffectDuration;
          profilerEffectDuration += prevEffectDuration;
          return elapsedTime;
        }
        function resetComponentEffectTimers() {
          componentEffectEndTime = componentEffectStartTime = -1.1;
        }
        function pushComponentEffectStart() {
          var prevEffectStart = componentEffectStartTime;
          componentEffectStartTime = -1.1;
          return prevEffectStart;
        }
        function popComponentEffectStart(prevEffectStart) {
          0 <= prevEffectStart && (componentEffectStartTime = prevEffectStart);
        }
        function pushComponentEffectDuration() {
          var prevEffectDuration = componentEffectDuration;
          componentEffectDuration = -0;
          return prevEffectDuration;
        }
        function popComponentEffectDuration(prevEffectDuration) {
          0 <= prevEffectDuration && (componentEffectDuration = prevEffectDuration);
        }
        function pushComponentEffectErrors() {
          var prevErrors = componentEffectErrors;
          componentEffectErrors = null;
          return prevErrors;
        }
        function pushComponentEffectDidSpawnUpdate() {
          var prev = componentEffectSpawnedUpdate;
          componentEffectSpawnedUpdate = false;
          return prev;
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now();
          0 > fiber.actualStartTime && (fiber.actualStartTime = profilerStartTime);
        }
        function stopProfilerTimerIfRunningAndRecordDuration(fiber) {
          if (0 <= profilerStartTime) {
            var elapsedTime = now() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
          }
        }
        function stopProfilerTimerIfRunningAndRecordIncompleteDuration(fiber) {
          if (0 <= profilerStartTime) {
            var elapsedTime = now() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            profilerStartTime = -1;
          }
        }
        function recordEffectDuration() {
          if (0 <= profilerStartTime) {
            var endTime = now(), elapsedTime = endTime - profilerStartTime;
            profilerStartTime = -1;
            profilerEffectDuration += elapsedTime;
            componentEffectDuration += elapsedTime;
            componentEffectEndTime = endTime;
          }
        }
        function recordEffectError(errorInfo) {
          null === componentEffectErrors && (componentEffectErrors = []);
          componentEffectErrors.push(errorInfo);
          null === commitErrors && (commitErrors = []);
          commitErrors.push(errorInfo);
        }
        function startEffectTimer() {
          profilerStartTime = now();
          0 > componentEffectStartTime && (componentEffectStartTime = profilerStartTime);
        }
        function transferActualDuration(fiber) {
          for (var child = fiber.child; child; )
            fiber.actualDuration += child.actualDuration, child = child.sibling;
        }
        function entangleAsyncAction(transition, thenable) {
          if (null === currentEntangledListeners) {
            var entangledListeners = currentEntangledListeners = [];
            currentEntangledPendingCount = 0;
            currentEntangledLane = requestTransitionLane();
            currentEntangledActionThenable = {
              status: "pending",
              value: void 0,
              then: function(resolve) {
                entangledListeners.push(resolve);
              }
            };
          }
          currentEntangledPendingCount++;
          thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
          return thenable;
        }
        function pingEngtangledActionScope() {
          if (0 === --currentEntangledPendingCount && (-1 < transitionUpdateTime || (transitionStartTime = -1.1), null !== currentEntangledListeners)) {
            null !== currentEntangledActionThenable && (currentEntangledActionThenable.status = "fulfilled");
            var listeners = currentEntangledListeners;
            currentEntangledListeners = null;
            currentEntangledLane = 0;
            currentEntangledActionThenable = null;
            for (var i = 0; i < listeners.length; i++) (0, listeners[i])();
          }
        }
        function chainThenableValue(thenable, result) {
          var listeners = [], thenableWithOverride = {
            status: "pending",
            value: null,
            reason: null,
            then: function(resolve) {
              listeners.push(resolve);
            }
          };
          thenable.then(
            function() {
              thenableWithOverride.status = "fulfilled";
              thenableWithOverride.value = result;
              for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);
            },
            function(error) {
              thenableWithOverride.status = "rejected";
              thenableWithOverride.reason = error;
              for (error = 0; error < listeners.length; error++)
                (0, listeners[error])(void 0);
            }
          );
          return thenableWithOverride;
        }
        function peekCacheFromPool() {
          var cacheResumedFromPreviousRender = resumedCache.current;
          return null !== cacheResumedFromPreviousRender ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
        }
        function pushTransition(offscreenWorkInProgress, prevCachePool) {
          null === prevCachePool ? push(resumedCache, resumedCache.current, offscreenWorkInProgress) : push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);
        }
        function getSuspendedCache() {
          var cacheFromPool = peekCacheFromPool();
          return null === cacheFromPool ? null : { parent: CacheContext._currentValue, pool: cacheFromPool };
        }
        function createThenableState() {
          return { didWarnAboutUncachedPromise: false, thenables: [] };
        }
        function isThenableResolved(thenable) {
          thenable = thenable.status;
          return "fulfilled" === thenable || "rejected" === thenable;
        }
        function trackUsedThenable(thenableState2, thenable, index) {
          null !== ReactSharedInternals.actQueue && (ReactSharedInternals.didUsePromise = true);
          var trackedThenables = thenableState2.thenables;
          index = trackedThenables[index];
          void 0 === index ? trackedThenables.push(thenable) : index !== thenable && (thenableState2.didWarnAboutUncachedPromise || (thenableState2.didWarnAboutUncachedPromise = true, console.error(
            "A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework."
          )), thenable.then(noop$1, noop$1), thenable = index);
          if (void 0 === thenable._debugInfo) {
            thenableState2 = performance.now();
            trackedThenables = thenable.displayName;
            var ioInfo = {
              name: "string" === typeof trackedThenables ? trackedThenables : "Promise",
              start: thenableState2,
              end: thenableState2,
              value: thenable
            };
            thenable._debugInfo = [{ awaited: ioInfo }];
            "fulfilled" !== thenable.status && "rejected" !== thenable.status && (thenableState2 = function() {
              ioInfo.end = performance.now();
            }, thenable.then(thenableState2, thenableState2));
          }
          switch (thenable.status) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
            default:
              if ("string" === typeof thenable.status)
                thenable.then(noop$1, noop$1);
              else {
                thenableState2 = workInProgressRoot;
                if (null !== thenableState2 && 100 < thenableState2.shellSuspendCounter)
                  throw Error(
                    "An unknown Component is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
                  );
                thenableState2 = thenable;
                thenableState2.status = "pending";
                thenableState2.then(
                  function(fulfilledValue) {
                    if ("pending" === thenable.status) {
                      var fulfilledThenable = thenable;
                      fulfilledThenable.status = "fulfilled";
                      fulfilledThenable.value = fulfilledValue;
                    }
                  },
                  function(error) {
                    if ("pending" === thenable.status) {
                      var rejectedThenable = thenable;
                      rejectedThenable.status = "rejected";
                      rejectedThenable.reason = error;
                    }
                  }
                );
              }
              switch (thenable.status) {
                case "fulfilled":
                  return thenable.value;
                case "rejected":
                  throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
              }
              suspendedThenable = thenable;
              needsToResetSuspendedThenableDEV = true;
              throw SuspenseException;
          }
        }
        function resolveLazy(lazyType) {
          try {
            return callLazyInitInDEV(lazyType);
          } catch (x) {
            if (null !== x && "object" === typeof x && "function" === typeof x.then)
              throw suspendedThenable = x, needsToResetSuspendedThenableDEV = true, SuspenseException;
            throw x;
          }
        }
        function getSuspendedThenable() {
          if (null === suspendedThenable)
            throw Error(
              "Expected a suspended thenable. This is a bug in React. Please file an issue."
            );
          var thenable = suspendedThenable;
          suspendedThenable = null;
          needsToResetSuspendedThenableDEV = false;
          return thenable;
        }
        function checkIfUseWrappedInAsyncCatch(rejectedReason) {
          if (rejectedReason === SuspenseException || rejectedReason === SuspenseActionException)
            throw Error(
              "Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
            );
        }
        function pushDebugInfo(debugInfo) {
          var previousDebugInfo = currentDebugInfo;
          null != debugInfo && (currentDebugInfo = null === previousDebugInfo ? debugInfo : previousDebugInfo.concat(debugInfo));
          return previousDebugInfo;
        }
        function getCurrentDebugTask() {
          var debugInfo = currentDebugInfo;
          if (null != debugInfo) {
            for (var i = debugInfo.length - 1; 0 <= i; i--)
              if (null != debugInfo[i].name) {
                var debugTask = debugInfo[i].debugTask;
                if (null != debugTask) return debugTask;
              }
          }
          return null;
        }
        function validateFragmentProps(element, fiber, returnFiber) {
          for (var keys = Object.keys(element.props), i = 0; i < keys.length; i++) {
            var key = keys[i];
            if ("children" !== key && "key" !== key) {
              null === fiber && (fiber = createFiberFromElement(element, returnFiber.mode, 0), fiber._debugInfo = currentDebugInfo, fiber.return = returnFiber);
              runWithFiberInDEV(
                fiber,
                function(erroredKey) {
                  console.error(
                    "Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",
                    erroredKey
                  );
                },
                key
              );
              break;
            }
          }
        }
        function unwrapThenable(thenable) {
          var index = thenableIndexCounter$1;
          thenableIndexCounter$1 += 1;
          null === thenableState$1 && (thenableState$1 = createThenableState());
          return trackUsedThenable(thenableState$1, thenable, index);
        }
        function coerceRef(workInProgress2, element) {
          element = element.props.ref;
          workInProgress2.ref = void 0 !== element ? element : null;
        }
        function throwOnInvalidObjectTypeImpl(returnFiber, newChild) {
          if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
            throw Error(
              'A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.'
            );
          returnFiber = Object.prototype.toString.call(newChild);
          throw Error(
            "Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead."
          );
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var debugTask = getCurrentDebugTask();
          null !== debugTask ? debugTask.run(
            throwOnInvalidObjectTypeImpl.bind(null, returnFiber, newChild)
          ) : throwOnInvalidObjectTypeImpl(returnFiber, newChild);
        }
        function warnOnFunctionTypeImpl(returnFiber, invalidChild) {
          var parentName = getComponentNameFromFiber(returnFiber) || "Component";
          ownerHasFunctionTypeWarning[parentName] || (ownerHasFunctionTypeWarning[parentName] = true, invalidChild = invalidChild.displayName || invalidChild.name || "Component", 3 === returnFiber.tag ? console.error(
            "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  root.render(%s)",
            invalidChild,
            invalidChild,
            invalidChild
          ) : console.error(
            "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  <%s>{%s}</%s>",
            invalidChild,
            invalidChild,
            parentName,
            invalidChild,
            parentName
          ));
        }
        function warnOnFunctionType(returnFiber, invalidChild) {
          var debugTask = getCurrentDebugTask();
          null !== debugTask ? debugTask.run(
            warnOnFunctionTypeImpl.bind(null, returnFiber, invalidChild)
          ) : warnOnFunctionTypeImpl(returnFiber, invalidChild);
        }
        function warnOnSymbolTypeImpl(returnFiber, invalidChild) {
          var parentName = getComponentNameFromFiber(returnFiber) || "Component";
          ownerHasSymbolTypeWarning[parentName] || (ownerHasSymbolTypeWarning[parentName] = true, invalidChild = String(invalidChild), 3 === returnFiber.tag ? console.error(
            "Symbols are not valid as a React child.\n  root.render(%s)",
            invalidChild
          ) : console.error(
            "Symbols are not valid as a React child.\n  <%s>%s</%s>",
            parentName,
            invalidChild,
            parentName
          ));
        }
        function warnOnSymbolType(returnFiber, invalidChild) {
          var debugTask = getCurrentDebugTask();
          null !== debugTask ? debugTask.run(
            warnOnSymbolTypeImpl.bind(null, returnFiber, invalidChild)
          ) : warnOnSymbolTypeImpl(returnFiber, invalidChild);
        }
        function createChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (shouldTrackSideEffects) {
              var deletions = returnFiber.deletions;
              null === deletions ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) return null;
            for (; null !== currentFirstChild; )
              deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
            return null;
          }
          function mapRemainingChildren(currentFirstChild) {
            for (var existingChildren = /* @__PURE__ */ new Map(); null !== currentFirstChild; )
              null !== currentFirstChild.key ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            fiber = createWorkInProgress(fiber, pendingProps);
            fiber.index = 0;
            fiber.sibling = null;
            return fiber;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects)
              return newFiber.flags |= 1048576, lastPlacedIndex;
            newIndex = newFiber.alternate;
            if (null !== newIndex)
              return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 67108866, lastPlacedIndex) : newIndex;
            newFiber.flags |= 67108866;
            return lastPlacedIndex;
          }
          function placeSingleChild(newFiber) {
            shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 67108866);
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (null === current2 || 6 !== current2.tag)
              return current2 = createFiberFromText(
                textContent,
                returnFiber.mode,
                lanes
              ), current2.return = returnFiber, current2._debugOwner = returnFiber, current2._debugTask = returnFiber._debugTask, current2._debugInfo = currentDebugInfo, current2;
            current2 = useFiber(current2, textContent);
            current2.return = returnFiber;
            current2._debugInfo = currentDebugInfo;
            return current2;
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE)
              return current2 = updateFragment(
                returnFiber,
                current2,
                element.props.children,
                lanes,
                element.key
              ), validateFragmentProps(element, current2, returnFiber), current2;
            if (null !== current2 && (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type))
              return current2 = useFiber(current2, element.props), coerceRef(current2, element), current2.return = returnFiber, current2._debugOwner = element._owner, current2._debugInfo = currentDebugInfo, current2;
            current2 = createFiberFromElement(element, returnFiber.mode, lanes);
            coerceRef(current2, element);
            current2.return = returnFiber;
            current2._debugInfo = currentDebugInfo;
            return current2;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (null === current2 || 4 !== current2.tag || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation)
              return current2 = createFiberFromPortal(portal, returnFiber.mode, lanes), current2.return = returnFiber, current2._debugInfo = currentDebugInfo, current2;
            current2 = useFiber(current2, portal.children || []);
            current2.return = returnFiber;
            current2._debugInfo = currentDebugInfo;
            return current2;
          }
          function updateFragment(returnFiber, current2, fragment, lanes, key) {
            if (null === current2 || 7 !== current2.tag)
              return current2 = createFiberFromFragment(
                fragment,
                returnFiber.mode,
                lanes,
                key
              ), current2.return = returnFiber, current2._debugOwner = returnFiber, current2._debugTask = returnFiber._debugTask, current2._debugInfo = currentDebugInfo, current2;
            current2 = useFiber(current2, fragment);
            current2.return = returnFiber;
            current2._debugInfo = currentDebugInfo;
            return current2;
          }
          function createChild(returnFiber, newChild, lanes) {
            if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
              return newChild = createFiberFromText(
                "" + newChild,
                returnFiber.mode,
                lanes
              ), newChild.return = returnFiber, newChild._debugOwner = returnFiber, newChild._debugTask = returnFiber._debugTask, newChild._debugInfo = currentDebugInfo, newChild;
            if ("object" === typeof newChild && null !== newChild) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return lanes = createFiberFromElement(
                    newChild,
                    returnFiber.mode,
                    lanes
                  ), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = pushDebugInfo(newChild._debugInfo), lanes._debugInfo = currentDebugInfo, currentDebugInfo = returnFiber, lanes;
                case REACT_PORTAL_TYPE:
                  return newChild = createFiberFromPortal(
                    newChild,
                    returnFiber.mode,
                    lanes
                  ), newChild.return = returnFiber, newChild._debugInfo = currentDebugInfo, newChild;
                case REACT_LAZY_TYPE:
                  var _prevDebugInfo = pushDebugInfo(newChild._debugInfo);
                  newChild = resolveLazy(newChild);
                  returnFiber = createChild(returnFiber, newChild, lanes);
                  currentDebugInfo = _prevDebugInfo;
                  return returnFiber;
              }
              if (isArrayImpl(newChild) || getIteratorFn(newChild))
                return lanes = createFiberFromFragment(
                  newChild,
                  returnFiber.mode,
                  lanes,
                  null
                ), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugTask = returnFiber._debugTask, returnFiber = pushDebugInfo(newChild._debugInfo), lanes._debugInfo = currentDebugInfo, currentDebugInfo = returnFiber, lanes;
              if ("function" === typeof newChild.then)
                return _prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = createChild(
                  returnFiber,
                  unwrapThenable(newChild),
                  lanes
                ), currentDebugInfo = _prevDebugInfo, returnFiber;
              if (newChild.$$typeof === REACT_CONTEXT_TYPE)
                return createChild(
                  returnFiber,
                  readContextDuringReconciliation(returnFiber, newChild),
                  lanes
                );
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
            "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = null !== oldFiber ? oldFiber.key : null;
            if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
              return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            if ("object" === typeof newChild && null !== newChild) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return newChild.key === key ? (key = pushDebugInfo(newChild._debugInfo), returnFiber = updateElement(
                    returnFiber,
                    oldFiber,
                    newChild,
                    lanes
                  ), currentDebugInfo = key, returnFiber) : null;
                case REACT_PORTAL_TYPE:
                  return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
                case REACT_LAZY_TYPE:
                  return key = pushDebugInfo(newChild._debugInfo), newChild = resolveLazy(newChild), returnFiber = updateSlot(
                    returnFiber,
                    oldFiber,
                    newChild,
                    lanes
                  ), currentDebugInfo = key, returnFiber;
              }
              if (isArrayImpl(newChild) || getIteratorFn(newChild)) {
                if (null !== key) return null;
                key = pushDebugInfo(newChild._debugInfo);
                returnFiber = updateFragment(
                  returnFiber,
                  oldFiber,
                  newChild,
                  lanes,
                  null
                );
                currentDebugInfo = key;
                return returnFiber;
              }
              if ("function" === typeof newChild.then)
                return key = pushDebugInfo(newChild._debugInfo), returnFiber = updateSlot(
                  returnFiber,
                  oldFiber,
                  unwrapThenable(newChild),
                  lanes
                ), currentDebugInfo = key, returnFiber;
              if (newChild.$$typeof === REACT_CONTEXT_TYPE)
                return updateSlot(
                  returnFiber,
                  oldFiber,
                  readContextDuringReconciliation(returnFiber, newChild),
                  lanes
                );
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
            "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
              return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
            if ("object" === typeof newChild && null !== newChild) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return newIdx = existingChildren.get(
                    null === newChild.key ? newIdx : newChild.key
                  ) || null, existingChildren = pushDebugInfo(newChild._debugInfo), returnFiber = updateElement(
                    returnFiber,
                    newIdx,
                    newChild,
                    lanes
                  ), currentDebugInfo = existingChildren, returnFiber;
                case REACT_PORTAL_TYPE:
                  return existingChildren = existingChildren.get(
                    null === newChild.key ? newIdx : newChild.key
                  ) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
                case REACT_LAZY_TYPE:
                  var _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo);
                  newChild = resolveLazy(newChild);
                  returnFiber = updateFromMap(
                    existingChildren,
                    returnFiber,
                    newIdx,
                    newChild,
                    lanes
                  );
                  currentDebugInfo = _prevDebugInfo7;
                  return returnFiber;
              }
              if (isArrayImpl(newChild) || getIteratorFn(newChild))
                return newIdx = existingChildren.get(newIdx) || null, existingChildren = pushDebugInfo(newChild._debugInfo), returnFiber = updateFragment(
                  returnFiber,
                  newIdx,
                  newChild,
                  lanes,
                  null
                ), currentDebugInfo = existingChildren, returnFiber;
              if ("function" === typeof newChild.then)
                return _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo), returnFiber = updateFromMap(
                  existingChildren,
                  returnFiber,
                  newIdx,
                  unwrapThenable(newChild),
                  lanes
                ), currentDebugInfo = _prevDebugInfo7, returnFiber;
              if (newChild.$$typeof === REACT_CONTEXT_TYPE)
                return updateFromMap(
                  existingChildren,
                  returnFiber,
                  newIdx,
                  readContextDuringReconciliation(returnFiber, newChild),
                  lanes
                );
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
            "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
            return null;
          }
          function warnOnInvalidKey(returnFiber, workInProgress2, child, knownKeys) {
            if ("object" !== typeof child || null === child) return knownKeys;
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(returnFiber, workInProgress2, child);
                var key = child.key;
                if ("string" !== typeof key) break;
                if (null === knownKeys) {
                  knownKeys = /* @__PURE__ */ new Set();
                  knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                runWithFiberInDEV(workInProgress2, function() {
                  console.error(
                    "Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.",
                    key
                  );
                });
                break;
              case REACT_LAZY_TYPE:
                child = resolveLazy(child), warnOnInvalidKey(returnFiber, workInProgress2, child, knownKeys);
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            for (var knownKeys = null, resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
              oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
              var newFiber = updateSlot(
                returnFiber,
                oldFiber,
                newChildren[newIdx],
                lanes
              );
              if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
              }
              knownKeys = warnOnInvalidKey(
                returnFiber,
                newFiber,
                newChildren[newIdx],
                knownKeys
              );
              shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
              currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
              null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length)
              return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
            if (null === oldFiber) {
              for (; newIdx < newChildren.length; newIdx++)
                oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (knownKeys = warnOnInvalidKey(
                  returnFiber,
                  oldFiber,
                  newChildren[newIdx],
                  knownKeys
                ), currentFirstChild = placeChild(
                  oldFiber,
                  currentFirstChild,
                  newIdx
                ), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
              isHydrating && pushTreeFork(returnFiber, newIdx);
              return resultingFirstChild;
            }
            for (oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++)
              nextOldFiber = updateFromMap(
                oldFiber,
                returnFiber,
                newIdx,
                newChildren[newIdx],
                lanes
              ), null !== nextOldFiber && (knownKeys = warnOnInvalidKey(
                returnFiber,
                nextOldFiber,
                newChildren[newIdx],
                knownKeys
              ), shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(
                null === nextOldFiber.key ? newIdx : nextOldFiber.key
              ), currentFirstChild = placeChild(
                nextOldFiber,
                currentFirstChild,
                newIdx
              ), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
            shouldTrackSideEffects && oldFiber.forEach(function(child) {
              return deleteChild(returnFiber, child);
            });
            isHydrating && pushTreeFork(returnFiber, newIdx);
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
            if (null == newChildren)
              throw Error("An iterable object provided no iterator.");
            for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, knownKeys = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()) {
              oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
              }
              knownKeys = warnOnInvalidKey(
                returnFiber,
                newFiber,
                step.value,
                knownKeys
              );
              shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
              currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
              null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done)
              return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
            if (null === oldFiber) {
              for (; !step.done; newIdx++, step = newChildren.next())
                oldFiber = createChild(returnFiber, step.value, lanes), null !== oldFiber && (knownKeys = warnOnInvalidKey(
                  returnFiber,
                  oldFiber,
                  step.value,
                  knownKeys
                ), currentFirstChild = placeChild(
                  oldFiber,
                  currentFirstChild,
                  newIdx
                ), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
              isHydrating && pushTreeFork(returnFiber, newIdx);
              return resultingFirstChild;
            }
            for (oldFiber = mapRemainingChildren(oldFiber); !step.done; newIdx++, step = newChildren.next())
              nextOldFiber = updateFromMap(
                oldFiber,
                returnFiber,
                newIdx,
                step.value,
                lanes
              ), null !== nextOldFiber && (knownKeys = warnOnInvalidKey(
                returnFiber,
                nextOldFiber,
                step.value,
                knownKeys
              ), shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(
                null === nextOldFiber.key ? newIdx : nextOldFiber.key
              ), currentFirstChild = placeChild(
                nextOldFiber,
                currentFirstChild,
                newIdx
              ), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
            shouldTrackSideEffects && oldFiber.forEach(function(child) {
              return deleteChild(returnFiber, child);
            });
            isHydrating && pushTreeFork(returnFiber, newIdx);
            return resultingFirstChild;
          }
          function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
            "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (validateFragmentProps(newChild, null, returnFiber), newChild = newChild.props.children);
            if ("object" === typeof newChild && null !== newChild) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  var prevDebugInfo = pushDebugInfo(newChild._debugInfo);
                  a: {
                    for (var key = newChild.key; null !== currentFirstChild; ) {
                      if (currentFirstChild.key === key) {
                        key = newChild.type;
                        if (key === REACT_FRAGMENT_TYPE) {
                          if (7 === currentFirstChild.tag) {
                            deleteRemainingChildren(
                              returnFiber,
                              currentFirstChild.sibling
                            );
                            lanes = useFiber(
                              currentFirstChild,
                              newChild.props.children
                            );
                            lanes.return = returnFiber;
                            lanes._debugOwner = newChild._owner;
                            lanes._debugInfo = currentDebugInfo;
                            validateFragmentProps(newChild, lanes, returnFiber);
                            returnFiber = lanes;
                            break a;
                          }
                        } else if (currentFirstChild.elementType === key || isCompatibleFamilyForHotReloading(
                          currentFirstChild,
                          newChild
                        ) || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === currentFirstChild.type) {
                          deleteRemainingChildren(
                            returnFiber,
                            currentFirstChild.sibling
                          );
                          lanes = useFiber(currentFirstChild, newChild.props);
                          coerceRef(lanes, newChild);
                          lanes.return = returnFiber;
                          lanes._debugOwner = newChild._owner;
                          lanes._debugInfo = currentDebugInfo;
                          returnFiber = lanes;
                          break a;
                        }
                        deleteRemainingChildren(returnFiber, currentFirstChild);
                        break;
                      } else deleteChild(returnFiber, currentFirstChild);
                      currentFirstChild = currentFirstChild.sibling;
                    }
                    newChild.type === REACT_FRAGMENT_TYPE ? (lanes = createFiberFromFragment(
                      newChild.props.children,
                      returnFiber.mode,
                      lanes,
                      newChild.key
                    ), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugTask = returnFiber._debugTask, lanes._debugInfo = currentDebugInfo, validateFragmentProps(newChild, lanes, returnFiber), returnFiber = lanes) : (lanes = createFiberFromElement(
                      newChild,
                      returnFiber.mode,
                      lanes
                    ), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes._debugInfo = currentDebugInfo, returnFiber = lanes);
                  }
                  returnFiber = placeSingleChild(returnFiber);
                  currentDebugInfo = prevDebugInfo;
                  return returnFiber;
                case REACT_PORTAL_TYPE:
                  a: {
                    prevDebugInfo = newChild;
                    for (newChild = prevDebugInfo.key; null !== currentFirstChild; ) {
                      if (currentFirstChild.key === newChild)
                        if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === prevDebugInfo.containerInfo && currentFirstChild.stateNode.implementation === prevDebugInfo.implementation) {
                          deleteRemainingChildren(
                            returnFiber,
                            currentFirstChild.sibling
                          );
                          lanes = useFiber(
                            currentFirstChild,
                            prevDebugInfo.children || []
                          );
                          lanes.return = returnFiber;
                          returnFiber = lanes;
                          break a;
                        } else {
                          deleteRemainingChildren(returnFiber, currentFirstChild);
                          break;
                        }
                      else deleteChild(returnFiber, currentFirstChild);
                      currentFirstChild = currentFirstChild.sibling;
                    }
                    lanes = createFiberFromPortal(
                      prevDebugInfo,
                      returnFiber.mode,
                      lanes
                    );
                    lanes.return = returnFiber;
                    returnFiber = lanes;
                  }
                  return placeSingleChild(returnFiber);
                case REACT_LAZY_TYPE:
                  return prevDebugInfo = pushDebugInfo(newChild._debugInfo), newChild = resolveLazy(newChild), returnFiber = reconcileChildFibersImpl(
                    returnFiber,
                    currentFirstChild,
                    newChild,
                    lanes
                  ), currentDebugInfo = prevDebugInfo, returnFiber;
              }
              if (isArrayImpl(newChild))
                return prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = reconcileChildrenArray(
                  returnFiber,
                  currentFirstChild,
                  newChild,
                  lanes
                ), currentDebugInfo = prevDebugInfo, returnFiber;
              if (getIteratorFn(newChild)) {
                prevDebugInfo = pushDebugInfo(newChild._debugInfo);
                key = getIteratorFn(newChild);
                if ("function" !== typeof key)
                  throw Error(
                    "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."
                  );
                var newChildren = key.call(newChild);
                if (newChildren === newChild) {
                  if (0 !== returnFiber.tag || "[object GeneratorFunction]" !== Object.prototype.toString.call(returnFiber.type) || "[object Generator]" !== Object.prototype.toString.call(newChildren))
                    didWarnAboutGenerators || console.error(
                      "Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items."
                    ), didWarnAboutGenerators = true;
                } else
                  newChild.entries !== key || didWarnAboutMaps || (console.error(
                    "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
                  ), didWarnAboutMaps = true);
                returnFiber = reconcileChildrenIterator(
                  returnFiber,
                  currentFirstChild,
                  newChildren,
                  lanes
                );
                currentDebugInfo = prevDebugInfo;
                return returnFiber;
              }
              if ("function" === typeof newChild.then)
                return prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = reconcileChildFibersImpl(
                  returnFiber,
                  currentFirstChild,
                  unwrapThenable(newChild),
                  lanes
                ), currentDebugInfo = prevDebugInfo, returnFiber;
              if (newChild.$$typeof === REACT_CONTEXT_TYPE)
                return reconcileChildFibersImpl(
                  returnFiber,
                  currentFirstChild,
                  readContextDuringReconciliation(returnFiber, newChild),
                  lanes
                );
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
              return prevDebugInfo = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(
                returnFiber,
                currentFirstChild.sibling
              ), lanes = useFiber(currentFirstChild, prevDebugInfo), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(
                prevDebugInfo,
                returnFiber.mode,
                lanes
              ), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugTask = returnFiber._debugTask, lanes._debugInfo = currentDebugInfo, returnFiber = lanes), placeSingleChild(returnFiber);
            "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
            "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return function(returnFiber, currentFirstChild, newChild, lanes) {
            var prevDebugInfo = currentDebugInfo;
            currentDebugInfo = null;
            try {
              thenableIndexCounter$1 = 0;
              var firstChildFiber = reconcileChildFibersImpl(
                returnFiber,
                currentFirstChild,
                newChild,
                lanes
              );
              thenableState$1 = null;
              return firstChildFiber;
            } catch (x) {
              if (x === SuspenseException || x === SuspenseActionException) throw x;
              var fiber = createFiber(29, x, null, returnFiber.mode);
              fiber.lanes = lanes;
              fiber.return = returnFiber;
              var debugInfo = fiber._debugInfo = currentDebugInfo;
              fiber._debugOwner = returnFiber._debugOwner;
              fiber._debugTask = returnFiber._debugTask;
              if (null != debugInfo) {
                for (var i = debugInfo.length - 1; 0 <= i; i--)
                  if ("string" === typeof debugInfo[i].stack) {
                    fiber._debugOwner = debugInfo[i];
                    fiber._debugTask = debugInfo[i].debugTask;
                    break;
                  }
              }
              return fiber;
            } finally {
              currentDebugInfo = prevDebugInfo;
            }
          };
        }
        function validateSuspenseListNestedChild(childSlot, index) {
          var isAnArray = isArrayImpl(childSlot);
          childSlot = !isAnArray && "function" === typeof getIteratorFn(childSlot);
          return isAnArray || childSlot ? (isAnArray = isAnArray ? "array" : "iterable", console.error(
            "A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",
            isAnArray,
            index,
            isAnArray
          ), false) : true;
        }
        function initializeUpdateQueue(fiber) {
          fiber.updateQueue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: { pending: null, lanes: 0, hiddenCallbacks: null },
            callbacks: null
          };
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          current2 = current2.updateQueue;
          workInProgress2.updateQueue === current2 && (workInProgress2.updateQueue = {
            baseState: current2.baseState,
            firstBaseUpdate: current2.firstBaseUpdate,
            lastBaseUpdate: current2.lastBaseUpdate,
            shared: current2.shared,
            callbacks: null
          });
        }
        function createUpdate(lane) {
          return {
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (null === updateQueue) return null;
          updateQueue = updateQueue.shared;
          if (currentlyProcessingQueue === updateQueue && !didWarnUpdateInsideUpdate) {
            var componentName2 = getComponentNameFromFiber(fiber);
            console.error(
              "An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\n\nPlease update the following component: %s",
              componentName2
            );
            didWarnUpdateInsideUpdate = true;
          }
          if ((executionContext & RenderContext) !== NoContext)
            return componentName2 = updateQueue.pending, null === componentName2 ? update.next = update : (update.next = componentName2.next, componentName2.next = update), updateQueue.pending = update, update = getRootForUpdatedFiber(fiber), markUpdateLaneFromFiberToRoot(fiber, null, lane), update;
          enqueueUpdate$1(fiber, updateQueue, update, lane);
          return getRootForUpdatedFiber(fiber);
        }
        function entangleTransitions(root3, fiber, lane) {
          fiber = fiber.updateQueue;
          if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194048))) {
            var queueLanes = fiber.lanes;
            queueLanes &= root3.pendingLanes;
            lane |= queueLanes;
            fiber.lanes = lane;
            markRootEntangled(root3, lane);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue, current2 = workInProgress2.alternate;
          if (null !== current2 && (current2 = current2.updateQueue, queue === current2)) {
            var newFirst = null, newLast = null;
            queue = queue.firstBaseUpdate;
            if (null !== queue) {
              do {
                var clone = {
                  lane: queue.lane,
                  tag: queue.tag,
                  payload: queue.payload,
                  callback: null,
                  next: null
                };
                null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
                queue = queue.next;
              } while (null !== queue);
              null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
            } else newFirst = newLast = capturedUpdate;
            queue = {
              baseState: current2.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: current2.shared,
              callbacks: current2.callbacks
            };
            workInProgress2.updateQueue = queue;
            return;
          }
          workInProgress2 = queue.lastBaseUpdate;
          null === workInProgress2 ? queue.firstBaseUpdate = capturedUpdate : workInProgress2.next = capturedUpdate;
          queue.lastBaseUpdate = capturedUpdate;
        }
        function suspendIfUpdateReadFromEntangledAsyncAction() {
          if (didReadFromEntangledAsyncAction) {
            var entangledActionThenable = currentEntangledActionThenable;
            if (null !== entangledActionThenable) throw entangledActionThenable;
          }
        }
        function processUpdateQueue(workInProgress2, props, instance$jscomp$0, renderLanes2) {
          didReadFromEntangledAsyncAction = false;
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          currentlyProcessingQueue = queue.shared;
          var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
          if (null !== pendingQueue) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            null !== current2 && (current2 = current2.updateQueue, pendingQueue = current2.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current2.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current2.lastBaseUpdate = lastPendingUpdate));
          }
          if (null !== firstBaseUpdate) {
            var newState = queue.baseState;
            lastBaseUpdate = 0;
            current2 = firstPendingUpdate = lastPendingUpdate = null;
            pendingQueue = firstBaseUpdate;
            do {
              var updateLane = pendingQueue.lane & -536870913, isHiddenUpdate = updateLane !== pendingQueue.lane;
              if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes2 & updateLane) === updateLane) {
                0 !== updateLane && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = true);
                null !== current2 && (current2 = current2.next = {
                  lane: 0,
                  tag: pendingQueue.tag,
                  payload: pendingQueue.payload,
                  callback: null,
                  next: null
                });
                a: {
                  updateLane = workInProgress2;
                  var partialState = pendingQueue;
                  var nextProps = props, instance = instance$jscomp$0;
                  switch (partialState.tag) {
                    case ReplaceState:
                      partialState = partialState.payload;
                      if ("function" === typeof partialState) {
                        isDisallowedContextReadInDEV = true;
                        var nextState = partialState.call(
                          instance,
                          newState,
                          nextProps
                        );
                        if (updateLane.mode & StrictLegacyMode) {
                          setIsStrictModeForDevtools(true);
                          try {
                            partialState.call(instance, newState, nextProps);
                          } finally {
                            setIsStrictModeForDevtools(false);
                          }
                        }
                        isDisallowedContextReadInDEV = false;
                        newState = nextState;
                        break a;
                      }
                      newState = partialState;
                      break a;
                    case CaptureUpdate:
                      updateLane.flags = updateLane.flags & -65537 | 128;
                    case UpdateState:
                      nextState = partialState.payload;
                      if ("function" === typeof nextState) {
                        isDisallowedContextReadInDEV = true;
                        partialState = nextState.call(
                          instance,
                          newState,
                          nextProps
                        );
                        if (updateLane.mode & StrictLegacyMode) {
                          setIsStrictModeForDevtools(true);
                          try {
                            nextState.call(instance, newState, nextProps);
                          } finally {
                            setIsStrictModeForDevtools(false);
                          }
                        }
                        isDisallowedContextReadInDEV = false;
                      } else partialState = nextState;
                      if (null === partialState || void 0 === partialState) break a;
                      newState = assign({}, newState, partialState);
                      break a;
                    case ForceUpdate:
                      hasForceUpdate = true;
                  }
                }
                updateLane = pendingQueue.callback;
                null !== updateLane && (workInProgress2.flags |= 64, isHiddenUpdate && (workInProgress2.flags |= 8192), isHiddenUpdate = queue.callbacks, null === isHiddenUpdate ? queue.callbacks = [updateLane] : isHiddenUpdate.push(updateLane));
              } else
                isHiddenUpdate = {
                  lane: updateLane,
                  tag: pendingQueue.tag,
                  payload: pendingQueue.payload,
                  callback: pendingQueue.callback,
                  next: null
                }, null === current2 ? (firstPendingUpdate = current2 = isHiddenUpdate, lastPendingUpdate = newState) : current2 = current2.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
              pendingQueue = pendingQueue.next;
              if (null === pendingQueue)
                if (pendingQueue = queue.shared.pending, null === pendingQueue)
                  break;
                else
                  isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
            } while (1);
            null === current2 && (lastPendingUpdate = newState);
            queue.baseState = lastPendingUpdate;
            queue.firstBaseUpdate = firstPendingUpdate;
            queue.lastBaseUpdate = current2;
            null === firstBaseUpdate && (queue.shared.lanes = 0);
            workInProgressRootSkippedLanes |= lastBaseUpdate;
            workInProgress2.lanes = lastBaseUpdate;
            workInProgress2.memoizedState = newState;
          }
          currentlyProcessingQueue = null;
        }
        function callCallback(callback, context) {
          if ("function" !== typeof callback)
            throw Error(
              "Invalid argument passed as callback. Expected a function. Instead received: " + callback
            );
          callback.call(context);
        }
        function commitHiddenCallbacks(updateQueue, context) {
          var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;
          if (null !== hiddenCallbacks)
            for (updateQueue.shared.hiddenCallbacks = null, updateQueue = 0; updateQueue < hiddenCallbacks.length; updateQueue++)
              callCallback(hiddenCallbacks[updateQueue], context);
        }
        function commitCallbacks(updateQueue, context) {
          var callbacks = updateQueue.callbacks;
          if (null !== callbacks)
            for (updateQueue.callbacks = null, updateQueue = 0; updateQueue < callbacks.length; updateQueue++)
              callCallback(callbacks[updateQueue], context);
        }
        function pushHiddenContext(fiber, context) {
          var prevEntangledRenderLanes = entangledRenderLanes;
          push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);
          push(currentTreeHiddenStackCursor, context, fiber);
          entangledRenderLanes = prevEntangledRenderLanes | context.baseLanes;
        }
        function reuseHiddenContextOnStack(fiber) {
          push(prevEntangledRenderLanesCursor, entangledRenderLanes, fiber);
          push(
            currentTreeHiddenStackCursor,
            currentTreeHiddenStackCursor.current,
            fiber
          );
        }
        function popHiddenContext(fiber) {
          entangledRenderLanes = prevEntangledRenderLanesCursor.current;
          pop(currentTreeHiddenStackCursor, fiber);
          pop(prevEntangledRenderLanesCursor, fiber);
        }
        function pushPrimaryTreeSuspenseHandler(handler) {
          var current2 = handler.alternate;
          push(
            suspenseStackCursor,
            suspenseStackCursor.current & SubtreeSuspenseContextMask,
            handler
          );
          push(suspenseHandlerStackCursor, handler, handler);
          null === shellBoundary && (null === current2 || null !== currentTreeHiddenStackCursor.current ? shellBoundary = handler : null !== current2.memoizedState && (shellBoundary = handler));
        }
        function pushDehydratedActivitySuspenseHandler(fiber) {
          push(suspenseStackCursor, suspenseStackCursor.current, fiber);
          push(suspenseHandlerStackCursor, fiber, fiber);
          null === shellBoundary && (shellBoundary = fiber);
        }
        function pushOffscreenSuspenseHandler(fiber) {
          22 === fiber.tag ? (push(suspenseStackCursor, suspenseStackCursor.current, fiber), push(suspenseHandlerStackCursor, fiber, fiber), null === shellBoundary && (shellBoundary = fiber)) : reuseSuspenseHandlerOnStack(fiber);
        }
        function reuseSuspenseHandlerOnStack(fiber) {
          push(suspenseStackCursor, suspenseStackCursor.current, fiber);
          push(
            suspenseHandlerStackCursor,
            suspenseHandlerStackCursor.current,
            fiber
          );
        }
        function popSuspenseHandler(fiber) {
          pop(suspenseHandlerStackCursor, fiber);
          shellBoundary === fiber && (shellBoundary = null);
          pop(suspenseStackCursor, fiber);
        }
        function findFirstSuspended(row) {
          for (var node = row; null !== node; ) {
            if (13 === node.tag) {
              var state = node.memoizedState;
              if (null !== state && (state = state.dehydrated, null === state || isSuspenseInstancePending(state) || isSuspenseInstanceFallback(state)))
                return node;
            } else if (19 === node.tag && ("forwards" === node.memoizedProps.revealOrder || "backwards" === node.memoizedProps.revealOrder || "unstable_legacy-backwards" === node.memoizedProps.revealOrder || "together" === node.memoizedProps.revealOrder)) {
              if (0 !== (node.flags & 128)) return node;
            } else if (null !== node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) break;
            for (; null === node.sibling; ) {
              if (null === node.return || node.return === row) return null;
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function mountHookTypesDev() {
          var hookName = currentHookNameInDev;
          null === hookTypesDev ? hookTypesDev = [hookName] : hookTypesDev.push(hookName);
        }
        function updateHookTypesDev() {
          var hookName = currentHookNameInDev;
          if (null !== hookTypesDev && (hookTypesUpdateIndexDev++, hookTypesDev[hookTypesUpdateIndexDev] !== hookName)) {
            var componentName2 = getComponentNameFromFiber(currentlyRenderingFiber);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName2) && (didWarnAboutMismatchedHooksForComponent.add(componentName2), null !== hookTypesDev)) {
              for (var table = "", i = 0; i <= hookTypesUpdateIndexDev; i++) {
                var oldHookName = hookTypesDev[i], newHookName = i === hookTypesUpdateIndexDev ? hookName : oldHookName;
                for (oldHookName = i + 1 + ". " + oldHookName; 30 > oldHookName.length; )
                  oldHookName += " ";
                oldHookName += newHookName + "\n";
                table += oldHookName;
              }
              console.error(
                "React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                componentName2,
                table
              );
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          void 0 === deps || null === deps || isArrayImpl(deps) || console.error(
            "%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",
            currentHookNameInDev,
            typeof deps
          );
        }
        function warnOnUseFormStateInDev() {
          var componentName2 = getComponentNameFromFiber(currentlyRenderingFiber);
          didWarnAboutUseFormState.has(componentName2) || (didWarnAboutUseFormState.add(componentName2), console.error(
            "ReactDOM.useFormState has been renamed to React.useActionState. Please update %s to use React.useActionState.",
            componentName2
          ));
        }
        function throwInvalidHookError() {
          throw Error(
            "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
          );
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (ignorePreviousDependencies) return false;
          if (null === prevDeps)
            return console.error(
              "%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",
              currentHookNameInDev
            ), false;
          nextDeps.length !== prevDeps.length && console.error(
            "The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",
            currentHookNameInDev,
            "[" + prevDeps.join(", ") + "]",
            "[" + nextDeps.join(", ") + "]"
          );
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
            if (!objectIs(nextDeps[i], prevDeps[i])) return false;
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber = workInProgress2;
          hookTypesDev = null !== current2 ? current2._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = null !== current2 && current2.type !== workInProgress2.type;
          if ("[object AsyncFunction]" === Object.prototype.toString.call(Component) || "[object AsyncGeneratorFunction]" === Object.prototype.toString.call(Component))
            nextRenderLanes = getComponentNameFromFiber(currentlyRenderingFiber), didWarnAboutAsyncClientComponent.has(nextRenderLanes) || (didWarnAboutAsyncClientComponent.add(nextRenderLanes), console.error(
              "%s is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.",
              null === nextRenderLanes ? "An unknown Component" : "<" + nextRenderLanes + ">"
            ));
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = 0;
          ReactSharedInternals.H = null !== current2 && null !== current2.memoizedState ? HooksDispatcherOnUpdateInDEV : null !== hookTypesDev ? HooksDispatcherOnMountWithHookTypesInDEV : HooksDispatcherOnMountInDEV;
          shouldDoubleInvokeUserFnsInHooksDEV = nextRenderLanes = (workInProgress2.mode & StrictLegacyMode) !== NoMode;
          var children = callComponentInDEV(Component, props, secondArg);
          shouldDoubleInvokeUserFnsInHooksDEV = false;
          didScheduleRenderPhaseUpdateDuringThisPass && (children = renderWithHooksAgain(
            workInProgress2,
            Component,
            props,
            secondArg
          ));
          if (nextRenderLanes) {
            setIsStrictModeForDevtools(true);
            try {
              children = renderWithHooksAgain(
                workInProgress2,
                Component,
                props,
                secondArg
              );
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          finishRenderingHooks(current2, workInProgress2);
          return children;
        }
        function finishRenderingHooks(current2, workInProgress2) {
          workInProgress2._debugHookTypes = hookTypesDev;
          null === workInProgress2.dependencies ? null !== thenableState && (workInProgress2.dependencies = {
            lanes: 0,
            firstContext: null,
            _debugThenableState: thenableState
          }) : workInProgress2.dependencies._debugThenableState = thenableState;
          ReactSharedInternals.H = ContextOnlyDispatcher;
          var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
          renderLanes = 0;
          hookTypesDev = currentHookNameInDev = workInProgressHook = currentHook = currentlyRenderingFiber = null;
          hookTypesUpdateIndexDev = -1;
          null !== current2 && (current2.flags & 65011712) !== (workInProgress2.flags & 65011712) && console.error(
            "Internal React error: Expected static flag was missing. Please notify the React team."
          );
          didScheduleRenderPhaseUpdate = false;
          thenableIndexCounter = 0;
          thenableState = null;
          if (didRenderTooFewHooks)
            throw Error(
              "Rendered fewer hooks than expected. This may be caused by an accidental early return statement."
            );
          null === current2 || didReceiveUpdate || (current2 = current2.dependencies, null !== current2 && checkIfContextChanged(current2) && (didReceiveUpdate = true));
          needsToResetSuspendedThenableDEV ? (needsToResetSuspendedThenableDEV = false, current2 = true) : current2 = false;
          current2 && (workInProgress2 = getComponentNameFromFiber(workInProgress2) || "Unknown", didWarnAboutUseWrappedInTryCatch.has(workInProgress2) || didWarnAboutAsyncClientComponent.has(workInProgress2) || (didWarnAboutUseWrappedInTryCatch.add(workInProgress2), console.error(
            "`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary."
          )));
        }
        function renderWithHooksAgain(workInProgress2, Component, props, secondArg) {
          currentlyRenderingFiber = workInProgress2;
          var numberOfReRenders = 0;
          do {
            didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);
            thenableIndexCounter = 0;
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            if (numberOfReRenders >= RE_RENDER_LIMIT)
              throw Error(
                "Too many re-renders. React limits the number of renders to prevent an infinite loop."
              );
            numberOfReRenders += 1;
            ignorePreviousDependencies = false;
            workInProgressHook = currentHook = null;
            if (null != workInProgress2.updateQueue) {
              var children = workInProgress2.updateQueue;
              children.lastEffect = null;
              children.events = null;
              children.stores = null;
              null != children.memoCache && (children.memoCache.index = 0);
            }
            hookTypesUpdateIndexDev = -1;
            ReactSharedInternals.H = HooksDispatcherOnRerenderInDEV;
            children = callComponentInDEV(Component, props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
          return children;
        }
        function TransitionAwareHostComponent() {
          var dispatcher = ReactSharedInternals.H, maybeThenable = dispatcher.useState()[0];
          maybeThenable = "function" === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable;
          dispatcher = dispatcher.useState()[0];
          (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber.flags |= 1024);
          return maybeThenable;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = 0 !== localIdCounter;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.flags = (workInProgress2.mode & StrictEffectsMode) !== NoMode ? workInProgress2.flags & -402655237 : workInProgress2.flags & -2053;
          current2.lanes &= ~lanes;
        }
        function resetHooksOnUnwind(workInProgress2) {
          if (didScheduleRenderPhaseUpdate) {
            for (workInProgress2 = workInProgress2.memoizedState; null !== workInProgress2; ) {
              var queue = workInProgress2.queue;
              null !== queue && (queue.pending = null);
              workInProgress2 = workInProgress2.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = 0;
          hookTypesDev = workInProgressHook = currentHook = currentlyRenderingFiber = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          thenableIndexCounter = localIdCounter = 0;
          thenableState = null;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          null === workInProgressHook ? currentlyRenderingFiber.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          if (null === currentHook) {
            var nextCurrentHook = currentlyRenderingFiber.alternate;
            nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
          } else nextCurrentHook = currentHook.next;
          var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber.memoizedState : workInProgressHook.next;
          if (null !== nextWorkInProgressHook)
            workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
          else {
            if (null === nextCurrentHook) {
              if (null === currentlyRenderingFiber.alternate)
                throw Error(
                  "Update hook called on initial render. This is likely a bug in React. Please file an issue."
                );
              throw Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            nextCurrentHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            null === workInProgressHook ? currentlyRenderingFiber.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return { lastEffect: null, events: null, stores: null, memoCache: null };
        }
        function useThenable(thenable) {
          var index = thenableIndexCounter;
          thenableIndexCounter += 1;
          null === thenableState && (thenableState = createThenableState());
          thenable = trackUsedThenable(thenableState, thenable, index);
          index = currentlyRenderingFiber;
          null === (null === workInProgressHook ? index.memoizedState : workInProgressHook.next) && (index = index.alternate, ReactSharedInternals.H = null !== index && null !== index.memoizedState ? HooksDispatcherOnUpdateInDEV : HooksDispatcherOnMountInDEV);
          return thenable;
        }
        function use(usable) {
          if (null !== usable && "object" === typeof usable) {
            if ("function" === typeof usable.then) return useThenable(usable);
            if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
          }
          throw Error("An unsupported type was passed to use(): " + String(usable));
        }
        function useMemoCache(size) {
          var memoCache = null, updateQueue = currentlyRenderingFiber.updateQueue;
          null !== updateQueue && (memoCache = updateQueue.memoCache);
          if (null == memoCache) {
            var current2 = currentlyRenderingFiber.alternate;
            null !== current2 && (current2 = current2.updateQueue, null !== current2 && (current2 = current2.memoCache, null != current2 && (memoCache = {
              data: current2.data.map(function(array) {
                return array.slice();
              }),
              index: 0
            })));
          }
          null == memoCache && (memoCache = { data: [], index: 0 });
          null === updateQueue && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = updateQueue);
          updateQueue.memoCache = memoCache;
          updateQueue = memoCache.data[memoCache.index];
          if (void 0 === updateQueue || ignorePreviousDependencies)
            for (updateQueue = memoCache.data[memoCache.index] = Array(size), current2 = 0; current2 < size; current2++)
              updateQueue[current2] = REACT_MEMO_CACHE_SENTINEL;
          else
            updateQueue.length !== size && console.error(
              "Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.",
              updateQueue.length,
              size
            );
          memoCache.index++;
          return updateQueue;
        }
        function basicStateReducer(state, action) {
          return "function" === typeof action ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          if (void 0 !== init) {
            var initialState = init(initialArg);
            if (shouldDoubleInvokeUserFnsInHooksDEV) {
              setIsStrictModeForDevtools(true);
              try {
                init(initialArg);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          } else initialState = initialArg;
          hook.memoizedState = hook.baseState = initialState;
          reducer = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = reducer;
          reducer = reducer.dispatch = dispatchReducerAction.bind(
            null,
            currentlyRenderingFiber,
            reducer
          );
          return [hook.memoizedState, reducer];
        }
        function updateReducer(reducer) {
          var hook = updateWorkInProgressHook();
          return updateReducerImpl(hook, currentHook, reducer);
        }
        function updateReducerImpl(hook, current2, reducer) {
          var queue = hook.queue;
          if (null === queue)
            throw Error(
              "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
            );
          queue.lastRenderedReducer = reducer;
          var baseQueue = hook.baseQueue, pendingQueue = queue.pending;
          if (null !== pendingQueue) {
            if (null !== baseQueue) {
              var baseFirst = baseQueue.next;
              baseQueue.next = pendingQueue.next;
              pendingQueue.next = baseFirst;
            }
            current2.baseQueue !== baseQueue && console.error(
              "Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."
            );
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          pendingQueue = hook.baseState;
          if (null === baseQueue) hook.memoizedState = pendingQueue;
          else {
            current2 = baseQueue.next;
            var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = current2, didReadFromEntangledAsyncAction2 = false;
            do {
              var updateLane = update.lane & -536870913;
              if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
                var revertLane = update.revertLane;
                if (0 === revertLane)
                  null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
                    lane: 0,
                    revertLane: 0,
                    gesture: null,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction2 = true);
                else if ((renderLanes & revertLane) === revertLane) {
                  update = update.next;
                  revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction2 = true);
                  continue;
                } else
                  updateLane = {
                    lane: 0,
                    revertLane: update.revertLane,
                    gesture: null,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
                updateLane = update.action;
                shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
                pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
              } else
                revertLane = {
                  lane: updateLane,
                  revertLane: update.revertLane,
                  gesture: update.gesture,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
              update = update.next;
            } while (null !== update && update !== current2);
            null === newBaseQueueLast ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
            if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = true, didReadFromEntangledAsyncAction2 && (reducer = currentEntangledActionThenable, null !== reducer)))
              throw reducer;
            hook.memoizedState = pendingQueue;
            hook.baseState = baseFirst;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = pendingQueue;
          }
          null === baseQueue && (queue.lanes = 0);
          return [hook.memoizedState, queue.dispatch];
        }
        function rerenderReducer(reducer) {
          var hook = updateWorkInProgressHook(), queue = hook.queue;
          if (null === queue)
            throw Error(
              "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
            );
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
          if (null !== lastRenderPhaseUpdate) {
            queue.pending = null;
            var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            do
              newState = reducer(newState, update.action), update = update.next;
            while (update !== lastRenderPhaseUpdate);
            objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
            hook.memoizedState = newState;
            null === hook.baseQueue && (hook.baseState = newState);
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber, hook = mountWorkInProgressHook();
          if (isHydrating) {
            if (void 0 === getServerSnapshot)
              throw Error(
                "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
              );
            var nextSnapshot = getServerSnapshot();
            didWarnUncachedGetSnapshot || nextSnapshot === getServerSnapshot() || (console.error(
              "The result of getServerSnapshot should be cached to avoid an infinite loop"
            ), didWarnUncachedGetSnapshot = true);
          } else {
            nextSnapshot = getSnapshot();
            didWarnUncachedGetSnapshot || (getServerSnapshot = getSnapshot(), objectIs(nextSnapshot, getServerSnapshot) || (console.error(
              "The result of getSnapshot should be cached to avoid an infinite loop"
            ), didWarnUncachedGetSnapshot = true));
            if (null === workInProgressRoot)
              throw Error(
                "Expected a work-in-progress root. This is a bug in React. Please file an issue."
              );
            0 !== (workInProgressRootRenderLanes & 127) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
          hook.memoizedState = nextSnapshot;
          getServerSnapshot = { value: nextSnapshot, getSnapshot };
          hook.queue = getServerSnapshot;
          mountEffect(
            subscribeToStore.bind(null, fiber, getServerSnapshot, subscribe),
            [subscribe]
          );
          fiber.flags |= 2048;
          pushSimpleEffect(
            HasEffect | Passive,
            { destroy: void 0 },
            updateStoreInstance.bind(
              null,
              fiber,
              getServerSnapshot,
              nextSnapshot,
              getSnapshot
            ),
            null
          );
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber, hook = updateWorkInProgressHook(), isHydrating$jscomp$0 = isHydrating;
          if (isHydrating$jscomp$0) {
            if (void 0 === getServerSnapshot)
              throw Error(
                "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
              );
            getServerSnapshot = getServerSnapshot();
          } else if (getServerSnapshot = getSnapshot(), !didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            objectIs(getServerSnapshot, cachedSnapshot) || (console.error(
              "The result of getSnapshot should be cached to avoid an infinite loop"
            ), didWarnUncachedGetSnapshot = true);
          }
          if (cachedSnapshot = !objectIs(
            (currentHook || hook).memoizedState,
            getServerSnapshot
          ))
            hook.memoizedState = getServerSnapshot, didReceiveUpdate = true;
          hook = hook.queue;
          var create = subscribeToStore.bind(null, fiber, hook, subscribe);
          updateEffectImpl(2048, Passive, create, [subscribe]);
          if (hook.getSnapshot !== getSnapshot || cachedSnapshot || null !== workInProgressHook && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= 2048;
            pushSimpleEffect(
              HasEffect | Passive,
              { destroy: void 0 },
              updateStoreInstance.bind(
                null,
                fiber,
                hook,
                getServerSnapshot,
                getSnapshot
              ),
              null
            );
            if (null === workInProgressRoot)
              throw Error(
                "Expected a work-in-progress root. This is a bug in React. Please file an issue."
              );
            isHydrating$jscomp$0 || 0 !== (renderLanes & 127) || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
          }
          return getServerSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= 16384;
          fiber = { getSnapshot, value: renderedSnapshot };
          getSnapshot = currentlyRenderingFiber.updateQueue;
          null === getSnapshot ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
        }
        function subscribeToStore(fiber, inst, subscribe) {
          return subscribe(function() {
            checkIfSnapshotChanged(inst) && (startUpdateTimerByLane(2, "updateSyncExternalStore()", fiber), forceStoreRerender(fiber));
          });
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          inst = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(inst, nextValue);
          } catch (error) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root3 = enqueueConcurrentRenderForLane(fiber, 2);
          null !== root3 && scheduleUpdateOnFiber(root3, fiber, 2);
        }
        function mountStateImpl(initialState) {
          var hook = mountWorkInProgressHook();
          if ("function" === typeof initialState) {
            var initialStateInitializer = initialState;
            initialState = initialStateInitializer();
            if (shouldDoubleInvokeUserFnsInHooksDEV) {
              setIsStrictModeForDevtools(true);
              try {
                initialStateInitializer();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          hook.memoizedState = hook.baseState = initialState;
          hook.queue = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          return hook;
        }
        function mountState(initialState) {
          initialState = mountStateImpl(initialState);
          var queue = initialState.queue, dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
          queue.dispatch = dispatch;
          return [initialState.memoizedState, dispatch];
        }
        function mountOptimistic(passthrough) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = hook.baseState = passthrough;
          var queue = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: null,
            lastRenderedState: null
          };
          hook.queue = queue;
          hook = dispatchOptimisticSetState.bind(
            null,
            currentlyRenderingFiber,
            true,
            queue
          );
          queue.dispatch = hook;
          return [passthrough, hook];
        }
        function updateOptimistic(passthrough, reducer) {
          var hook = updateWorkInProgressHook();
          return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
        }
        function updateOptimisticImpl(hook, current2, passthrough, reducer) {
          hook.baseState = passthrough;
          return updateReducerImpl(
            hook,
            currentHook,
            "function" === typeof reducer ? reducer : basicStateReducer
          );
        }
        function rerenderOptimistic(passthrough, reducer) {
          var hook = updateWorkInProgressHook();
          if (null !== currentHook)
            return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
          hook.baseState = passthrough;
          return [passthrough, hook.queue.dispatch];
        }
        function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
          if (isRenderPhaseUpdate(fiber))
            throw Error("Cannot update form state while rendering.");
          fiber = actionQueue.action;
          if (null !== fiber) {
            var actionNode = {
              payload,
              action: fiber,
              next: null,
              isTransition: true,
              status: "pending",
              value: null,
              reason: null,
              listeners: [],
              then: function(listener) {
                actionNode.listeners.push(listener);
              }
            };
            null !== ReactSharedInternals.T ? setPendingState(true) : actionNode.isTransition = false;
            setState(actionNode);
            setPendingState = actionQueue.pending;
            null === setPendingState ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
          }
        }
        function runActionStateAction(actionQueue, node) {
          var action = node.action, payload = node.payload, prevState = actionQueue.state;
          if (node.isTransition) {
            var prevTransition = ReactSharedInternals.T, currentTransition = {};
            currentTransition._updatedFibers = /* @__PURE__ */ new Set();
            ReactSharedInternals.T = currentTransition;
            try {
              var returnValue = action(prevState, payload), onStartTransitionFinish = ReactSharedInternals.S;
              null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
              handleActionReturnValue(actionQueue, node, returnValue);
            } catch (error) {
              onActionError(actionQueue, node, error);
            } finally {
              null !== prevTransition && null !== currentTransition.types && (null !== prevTransition.types && prevTransition.types !== currentTransition.types && console.error(
                "We expected inner Transitions to have transferred the outer types set and that you cannot add to the outer Transition while inside the inner.This is a bug in React."
              ), prevTransition.types = currentTransition.types), ReactSharedInternals.T = prevTransition, null === prevTransition && currentTransition._updatedFibers && (actionQueue = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < actionQueue && console.warn(
                "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
              ));
            }
          } else
            try {
              currentTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node, currentTransition);
            } catch (error$4) {
              onActionError(actionQueue, node, error$4);
            }
        }
        function handleActionReturnValue(actionQueue, node, returnValue) {
          null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then ? (ReactSharedInternals.asyncTransitions++, returnValue.then(releaseAsyncTransition, releaseAsyncTransition), returnValue.then(
            function(nextState) {
              onActionSuccess(actionQueue, node, nextState);
            },
            function(error) {
              return onActionError(actionQueue, node, error);
            }
          ), node.isTransition || console.error(
            "An async function with useActionState was called outside of a transition. This is likely not what you intended (for example, isPending will not update correctly). Either call the returned function inside startTransition, or pass it to an `action` or `formAction` prop."
          )) : onActionSuccess(actionQueue, node, returnValue);
        }
        function onActionSuccess(actionQueue, actionNode, nextState) {
          actionNode.status = "fulfilled";
          actionNode.value = nextState;
          notifyActionListeners(actionNode);
          actionQueue.state = nextState;
          actionNode = actionQueue.pending;
          null !== actionNode && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
        }
        function onActionError(actionQueue, actionNode, error) {
          var last = actionQueue.pending;
          actionQueue.pending = null;
          if (null !== last) {
            last = last.next;
            do
              actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next;
            while (actionNode !== last);
          }
          actionQueue.action = null;
        }
        function notifyActionListeners(actionNode) {
          actionNode = actionNode.listeners;
          for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();
        }
        function actionStateReducer(oldState, newState) {
          return newState;
        }
        function mountActionState(action, initialStateProp) {
          if (isHydrating) {
            var ssrFormState = workInProgressRoot.formState;
            if (null !== ssrFormState) {
              a: {
                var isMatching = currentlyRenderingFiber;
                if (isHydrating) {
                  if (nextHydratableInstance) {
                    b: {
                      var markerInstance = nextHydratableInstance;
                      for (var inRootOrSingleton = rootOrSingletonContext; 8 !== markerInstance.nodeType; ) {
                        if (!inRootOrSingleton) {
                          markerInstance = null;
                          break b;
                        }
                        markerInstance = getNextHydratable(
                          markerInstance.nextSibling
                        );
                        if (null === markerInstance) {
                          markerInstance = null;
                          break b;
                        }
                      }
                      inRootOrSingleton = markerInstance.data;
                      markerInstance = inRootOrSingleton === FORM_STATE_IS_MATCHING || inRootOrSingleton === FORM_STATE_IS_NOT_MATCHING ? markerInstance : null;
                    }
                    if (markerInstance) {
                      nextHydratableInstance = getNextHydratable(
                        markerInstance.nextSibling
                      );
                      isMatching = markerInstance.data === FORM_STATE_IS_MATCHING;
                      break a;
                    }
                  }
                  throwOnHydrationMismatch(isMatching);
                }
                isMatching = false;
              }
              isMatching && (initialStateProp = ssrFormState[0]);
            }
          }
          ssrFormState = mountWorkInProgressHook();
          ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
          isMatching = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: actionStateReducer,
            lastRenderedState: initialStateProp
          };
          ssrFormState.queue = isMatching;
          ssrFormState = dispatchSetState.bind(
            null,
            currentlyRenderingFiber,
            isMatching
          );
          isMatching.dispatch = ssrFormState;
          isMatching = mountStateImpl(false);
          inRootOrSingleton = dispatchOptimisticSetState.bind(
            null,
            currentlyRenderingFiber,
            false,
            isMatching.queue
          );
          isMatching = mountWorkInProgressHook();
          markerInstance = {
            state: initialStateProp,
            dispatch: null,
            action,
            pending: null
          };
          isMatching.queue = markerInstance;
          ssrFormState = dispatchActionState.bind(
            null,
            currentlyRenderingFiber,
            markerInstance,
            inRootOrSingleton,
            ssrFormState
          );
          markerInstance.dispatch = ssrFormState;
          isMatching.memoizedState = action;
          return [initialStateProp, ssrFormState, false];
        }
        function updateActionState(action) {
          var stateHook = updateWorkInProgressHook();
          return updateActionStateImpl(stateHook, currentHook, action);
        }
        function updateActionStateImpl(stateHook, currentStateHook, action) {
          currentStateHook = updateReducerImpl(
            stateHook,
            currentStateHook,
            actionStateReducer
          )[0];
          stateHook = updateReducer(basicStateReducer)[0];
          if ("object" === typeof currentStateHook && null !== currentStateHook && "function" === typeof currentStateHook.then)
            try {
              var state = useThenable(currentStateHook);
            } catch (x) {
              if (x === SuspenseException) throw SuspenseActionException;
              throw x;
            }
          else state = currentStateHook;
          currentStateHook = updateWorkInProgressHook();
          var actionQueue = currentStateHook.queue, dispatch = actionQueue.dispatch;
          action !== currentStateHook.memoizedState && (currentlyRenderingFiber.flags |= 2048, pushSimpleEffect(
            HasEffect | Passive,
            { destroy: void 0 },
            actionStateActionEffect.bind(null, actionQueue, action),
            null
          ));
          return [state, dispatch, stateHook];
        }
        function actionStateActionEffect(actionQueue, action) {
          actionQueue.action = action;
        }
        function rerenderActionState(action) {
          var stateHook = updateWorkInProgressHook(), currentStateHook = currentHook;
          if (null !== currentStateHook)
            return updateActionStateImpl(stateHook, currentStateHook, action);
          updateWorkInProgressHook();
          stateHook = stateHook.memoizedState;
          currentStateHook = updateWorkInProgressHook();
          var dispatch = currentStateHook.queue.dispatch;
          currentStateHook.memoizedState = action;
          return [stateHook, dispatch, false];
        }
        function pushSimpleEffect(tag, inst, create, deps) {
          tag = { tag, create, deps, inst, next: null };
          inst = currentlyRenderingFiber.updateQueue;
          null === inst && (inst = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = inst);
          create = inst.lastEffect;
          null === create ? inst.lastEffect = tag.next = tag : (deps = create.next, create.next = tag, tag.next = deps, inst.lastEffect = tag);
          return tag;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          initialValue = { current: initialValue };
          return hook.memoizedState = initialValue;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          currentlyRenderingFiber.flags |= fiberFlags;
          hook.memoizedState = pushSimpleEffect(
            HasEffect | hookFlags,
            { destroy: void 0 },
            create,
            void 0 === deps ? null : deps
          );
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          deps = void 0 === deps ? null : deps;
          var inst = hook.memoizedState.inst;
          null !== currentHook && null !== deps && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushSimpleEffect(hookFlags, inst, create, deps) : (currentlyRenderingFiber.flags |= fiberFlags, hook.memoizedState = pushSimpleEffect(
            HasEffect | hookFlags,
            inst,
            create,
            deps
          ));
        }
        function mountEffect(create, deps) {
          (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode ? mountEffectImpl(276826112, Passive, create, deps) : mountEffectImpl(8390656, Passive, create, deps);
        }
        function useEffectEventImpl(payload) {
          currentlyRenderingFiber.flags |= 4;
          var componentUpdateQueue = currentlyRenderingFiber.updateQueue;
          if (null === componentUpdateQueue)
            componentUpdateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = componentUpdateQueue, componentUpdateQueue.events = [payload];
          else {
            var events = componentUpdateQueue.events;
            null === events ? componentUpdateQueue.events = [payload] : events.push(payload);
          }
        }
        function mountEvent(callback) {
          var hook = mountWorkInProgressHook(), ref = { impl: callback };
          hook.memoizedState = ref;
          return function() {
            if ((executionContext & RenderContext) !== NoContext)
              throw Error(
                "A function wrapped in useEffectEvent can't be called during rendering."
              );
            return ref.impl.apply(void 0, arguments);
          };
        }
        function updateEvent(callback) {
          var ref = updateWorkInProgressHook().memoizedState;
          useEffectEventImpl({ ref, nextImpl: callback });
          return function() {
            if ((executionContext & RenderContext) !== NoContext)
              throw Error(
                "A function wrapped in useEffectEvent can't be called during rendering."
              );
            return ref.impl.apply(void 0, arguments);
          };
        }
        function mountLayoutEffect(create, deps) {
          var fiberFlags = 4194308;
          (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= 134217728);
          return mountEffectImpl(fiberFlags, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if ("function" === typeof ref) {
            create = create();
            var refCleanup = ref(create);
            return function() {
              "function" === typeof refCleanup ? refCleanup() : ref(null);
            };
          }
          if (null !== ref && void 0 !== ref)
            return ref.hasOwnProperty("current") || console.error(
              "Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.",
              "an object with keys {" + Object.keys(ref).join(", ") + "}"
            ), create = create(), ref.current = create, function() {
              ref.current = null;
            };
        }
        function mountImperativeHandle(ref, create, deps) {
          "function" !== typeof create && console.error(
            "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
            null !== create ? typeof create : "null"
          );
          deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
          var fiberFlags = 4194308;
          (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= 134217728);
          mountEffectImpl(
            fiberFlags,
            Layout,
            imperativeHandleEffect.bind(null, create, ref),
            deps
          );
        }
        function updateImperativeHandle(ref, create, deps) {
          "function" !== typeof create && console.error(
            "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
            null !== create ? typeof create : "null"
          );
          deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
          updateEffectImpl(
            4,
            Layout,
            imperativeHandleEffect.bind(null, create, ref),
            deps
          );
        }
        function mountCallback(callback, deps) {
          mountWorkInProgressHook().memoizedState = [
            callback,
            void 0 === deps ? null : deps
          ];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          deps = void 0 === deps ? null : deps;
          var prevState = hook.memoizedState;
          if (null !== deps && areHookInputsEqual(deps, prevState[1]))
            return prevState[0];
          hook.memoizedState = [callback, deps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          deps = void 0 === deps ? null : deps;
          var nextValue = nextCreate();
          if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(true);
            try {
              nextCreate();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          hook.memoizedState = [nextValue, deps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          deps = void 0 === deps ? null : deps;
          var prevState = hook.memoizedState;
          if (null !== deps && areHookInputsEqual(deps, prevState[1]))
            return prevState[0];
          prevState = nextCreate();
          if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(true);
            try {
              nextCreate();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          hook.memoizedState = [prevState, deps];
          return prevState;
        }
        function mountDeferredValue(value, initialValue) {
          var hook = mountWorkInProgressHook();
          return mountDeferredValueImpl(hook, value, initialValue);
        }
        function updateDeferredValue(value, initialValue) {
          var hook = updateWorkInProgressHook();
          return updateDeferredValueImpl(
            hook,
            currentHook.memoizedState,
            value,
            initialValue
          );
        }
        function rerenderDeferredValue(value, initialValue) {
          var hook = updateWorkInProgressHook();
          return null === currentHook ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(
            hook,
            currentHook.memoizedState,
            value,
            initialValue
          );
        }
        function mountDeferredValueImpl(hook, value, initialValue) {
          if (void 0 === initialValue || 0 !== (renderLanes & 1073741824) && 0 === (workInProgressRootRenderLanes & 261930))
            return hook.memoizedState = value;
          hook.memoizedState = initialValue;
          hook = requestDeferredLane();
          currentlyRenderingFiber.lanes |= hook;
          workInProgressRootSkippedLanes |= hook;
          return initialValue;
        }
        function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
          if (objectIs(value, prevValue)) return value;
          if (null !== currentTreeHiddenStackCursor.current)
            return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = true), hook;
          if (0 === (renderLanes & 42) || 0 !== (renderLanes & 1073741824) && 0 === (workInProgressRootRenderLanes & 261930))
            return didReceiveUpdate = true, hook.memoizedState = value;
          hook = requestDeferredLane();
          currentlyRenderingFiber.lanes |= hook;
          workInProgressRootSkippedLanes |= hook;
          return prevValue;
        }
        function releaseAsyncTransition() {
          ReactSharedInternals.asyncTransitions--;
        }
        function startTransition(fiber, queue, pendingState, finishedState, callback) {
          var previousPriority = ReactDOMSharedInternals.p;
          ReactDOMSharedInternals.p = 0 !== previousPriority && previousPriority < ContinuousEventPriority ? previousPriority : ContinuousEventPriority;
          var prevTransition = ReactSharedInternals.T, currentTransition = {};
          currentTransition._updatedFibers = /* @__PURE__ */ new Set();
          ReactSharedInternals.T = currentTransition;
          dispatchOptimisticSetState(fiber, false, queue, pendingState);
          try {
            var returnValue = callback(), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            if (null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then) {
              ReactSharedInternals.asyncTransitions++;
              returnValue.then(releaseAsyncTransition, releaseAsyncTransition);
              var thenableForFinishedState = chainThenableValue(
                returnValue,
                finishedState
              );
              dispatchSetStateInternal(
                fiber,
                queue,
                thenableForFinishedState,
                requestUpdateLane(fiber)
              );
            } else
              dispatchSetStateInternal(
                fiber,
                queue,
                finishedState,
                requestUpdateLane(fiber)
              );
          } catch (error) {
            dispatchSetStateInternal(
              fiber,
              queue,
              { then: function() {
              }, status: "rejected", reason: error },
              requestUpdateLane(fiber)
            );
          } finally {
            ReactDOMSharedInternals.p = previousPriority, null !== prevTransition && null !== currentTransition.types && (null !== prevTransition.types && prevTransition.types !== currentTransition.types && console.error(
              "We expected inner Transitions to have transferred the outer types set and that you cannot add to the outer Transition while inside the inner.This is a bug in React."
            ), prevTransition.types = currentTransition.types), ReactSharedInternals.T = prevTransition, null === prevTransition && currentTransition._updatedFibers && (fiber = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < fiber && console.warn(
              "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
            ));
          }
        }
        function startHostTransition(formFiber, pendingState, action, formData) {
          if (5 !== formFiber.tag)
            throw Error(
              "Expected the form instance to be a HostComponent. This is a bug in React."
            );
          var queue = ensureFormComponentIsStateful(formFiber).queue;
          startHostActionTimer(formFiber);
          startTransition(
            formFiber,
            queue,
            pendingState,
            NotPendingTransition,
            null === action ? noop : function() {
              requestFormReset$1(formFiber);
              return action(formData);
            }
          );
        }
        function ensureFormComponentIsStateful(formFiber) {
          var existingStateHook = formFiber.memoizedState;
          if (null !== existingStateHook) return existingStateHook;
          existingStateHook = {
            memoizedState: NotPendingTransition,
            baseState: NotPendingTransition,
            baseQueue: null,
            queue: {
              pending: null,
              lanes: 0,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: NotPendingTransition
            },
            next: null
          };
          var initialResetState = {};
          existingStateHook.next = {
            memoizedState: initialResetState,
            baseState: initialResetState,
            baseQueue: null,
            queue: {
              pending: null,
              lanes: 0,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialResetState
            },
            next: null
          };
          formFiber.memoizedState = existingStateHook;
          formFiber = formFiber.alternate;
          null !== formFiber && (formFiber.memoizedState = existingStateHook);
          return existingStateHook;
        }
        function requestFormReset$1(formFiber) {
          null === ReactSharedInternals.T && console.error(
            "requestFormReset was called outside a transition or action. To fix, move to an action, or wrap with startTransition."
          );
          var stateHook = ensureFormComponentIsStateful(formFiber);
          null === stateHook.next && (stateHook = formFiber.alternate.memoizedState);
          dispatchSetStateInternal(
            formFiber,
            stateHook.next.queue,
            {},
            requestUpdateLane(formFiber)
          );
        }
        function mountTransition() {
          var stateHook = mountStateImpl(false);
          stateHook = startTransition.bind(
            null,
            currentlyRenderingFiber,
            stateHook.queue,
            true,
            false
          );
          mountWorkInProgressHook().memoizedState = stateHook;
          return [false, stateHook];
        }
        function updateTransition() {
          var booleanOrThenable = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
          return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
          ];
        }
        function rerenderTransition() {
          var booleanOrThenable = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
          return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
          ];
        }
        function useHostTransitionStatus() {
          return readContext(HostTransitionContext);
        }
        function mountId() {
          var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix;
          if (isHydrating) {
            var treeId = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            treeId = (idWithLeadingBit & ~(1 << 32 - clz32(idWithLeadingBit) - 1)).toString(32) + treeId;
            identifierPrefix = "_" + identifierPrefix + "R_" + treeId;
            treeId = localIdCounter++;
            0 < treeId && (identifierPrefix += "H" + treeId.toString(32));
            identifierPrefix += "_";
          } else
            treeId = globalClientIdCounter++, identifierPrefix = "_" + identifierPrefix + "r_" + treeId.toString(32) + "_";
          return hook.memoizedState = identifierPrefix;
        }
        function mountRefresh() {
          return mountWorkInProgressHook().memoizedState = refreshCache.bind(
            null,
            currentlyRenderingFiber
          );
        }
        function refreshCache(fiber, seedKey) {
          for (var provider = fiber.return; null !== provider; ) {
            switch (provider.tag) {
              case 24:
              case 3:
                var lane = requestUpdateLane(provider), refreshUpdate = createUpdate(lane), root3 = enqueueUpdate(provider, refreshUpdate, lane);
                null !== root3 && (startUpdateTimerByLane(lane, "refresh()", fiber), scheduleUpdateOnFiber(root3, provider, lane), entangleTransitions(root3, provider, lane));
                fiber = createCache();
                null !== seedKey && void 0 !== seedKey && null !== root3 && console.error(
                  "The seed argument is not enabled outside experimental channels."
                );
                refreshUpdate.payload = { cache: fiber };
                return;
            }
            provider = provider.return;
          }
        }
        function dispatchReducerAction(fiber, queue, action) {
          var args = arguments;
          "function" === typeof args[3] && console.error(
            "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
          );
          args = requestUpdateLane(fiber);
          var update = {
            lane: args,
            revertLane: 0,
            gesture: null,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, update) : (update = enqueueConcurrentHookUpdate(fiber, queue, update, args), null !== update && (startUpdateTimerByLane(args, "dispatch()", fiber), scheduleUpdateOnFiber(update, fiber, args), entangleTransitionUpdate(update, queue, args)));
        }
        function dispatchSetState(fiber, queue, action) {
          var args = arguments;
          "function" === typeof args[3] && console.error(
            "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
          );
          args = requestUpdateLane(fiber);
          dispatchSetStateInternal(fiber, queue, action, args) && startUpdateTimerByLane(args, "setState()", fiber);
        }
        function dispatchSetStateInternal(fiber, queue, action, lane) {
          var update = {
            lane,
            revertLane: 0,
            gesture: null,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
          else {
            var alternate = fiber.alternate;
            if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) {
              var prevDispatcher = ReactSharedInternals.H;
              ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
                update.hasEagerState = true;
                update.eagerState = eagerState;
                if (objectIs(eagerState, currentState))
                  return enqueueUpdate$1(fiber, queue, update, 0), null === workInProgressRoot && finishQueueingConcurrentUpdates(), false;
              } catch (error) {
              } finally {
                ReactSharedInternals.H = prevDispatcher;
              }
            }
            action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (null !== action)
              return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), true;
          }
          return false;
        }
        function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
          null === ReactSharedInternals.T && 0 === currentEntangledLane && console.error(
            "An optimistic state update occurred outside a transition or action. To fix, move the update to an action, or wrap with startTransition."
          );
          action = {
            lane: 2,
            revertLane: requestTransitionLane(),
            gesture: null,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            if (throwIfDuringRender)
              throw Error("Cannot update optimistic state while rendering.");
            console.error("Cannot call startTransition while rendering.");
          } else
            throwIfDuringRender = enqueueConcurrentHookUpdate(
              fiber,
              queue,
              action,
              2
            ), null !== throwIfDuringRender && (startUpdateTimerByLane(2, "setOptimistic()", fiber), scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2));
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber || null !== alternate && alternate === currentlyRenderingFiber;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
          queue.pending = update;
        }
        function entangleTransitionUpdate(root3, queue, lane) {
          if (0 !== (lane & 4194048)) {
            var queueLanes = queue.lanes;
            queueLanes &= root3.pendingLanes;
            lane |= queueLanes;
            queue.lanes = lane;
            markRootEntangled(root3, lane);
          }
        }
        function warnOnInvalidCallback(callback) {
          if (null !== callback && "function" !== typeof callback) {
            var key = String(callback);
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), console.error(
              "Expected the last optional `callback` argument to be a function. Instead received: %s.",
              callback
            ));
          }
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState, partialState = getDerivedStateFromProps(nextProps, prevState);
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          void 0 === partialState && (ctor = getComponentNameFromType(ctor) || "Component", didWarnAboutUndefinedDerivedState.has(ctor) || (didWarnAboutUndefinedDerivedState.add(ctor), console.error(
            "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",
            ctor
          )));
          prevState = null === partialState || void 0 === partialState ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = prevState;
          0 === workInProgress2.lanes && (workInProgress2.updateQueue.baseState = prevState);
        }
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if ("function" === typeof instance.shouldComponentUpdate) {
            oldProps = instance.shouldComponentUpdate(
              newProps,
              newState,
              nextContext
            );
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                oldProps = instance.shouldComponentUpdate(
                  newProps,
                  newState,
                  nextContext
                );
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            void 0 === oldProps && console.error(
              "%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",
              getComponentNameFromType(ctor) || "Component"
            );
            return oldProps;
          }
          return ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
          "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          instance.state !== oldState && (workInProgress2 = getComponentNameFromFiber(workInProgress2) || "Component", didWarnAboutStateAssignmentForComponent.has(workInProgress2) || (didWarnAboutStateAssignmentForComponent.add(workInProgress2), console.error(
            "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
            workInProgress2
          )), classComponentUpdater.enqueueReplaceState(
            instance,
            instance.state,
            null
          ));
        }
        function resolveClassComponentProps(Component, baseProps) {
          var newProps = baseProps;
          if ("ref" in baseProps) {
            newProps = {};
            for (var propName in baseProps)
              "ref" !== propName && (newProps[propName] = baseProps[propName]);
          }
          if (Component = Component.defaultProps) {
            newProps === baseProps && (newProps = assign({}, newProps));
            for (var _propName in Component)
              void 0 === newProps[_propName] && (newProps[_propName] = Component[_propName]);
          }
          return newProps;
        }
        function defaultOnUncaughtError(error) {
          reportGlobalError(error);
          console.warn(
            "%s\n\n%s\n",
            componentName ? "An error occurred in the <" + componentName + "> component." : "An error occurred in one of your React components.",
            "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://react.dev/link/error-boundaries to learn more about error boundaries."
          );
        }
        function defaultOnCaughtError(error) {
          var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component." : "The above error occurred in one of your React components.", recreateMessage = "React will try to recreate this component tree from scratch using the error boundary you provided, " + ((errorBoundaryName || "Anonymous") + ".");
          if ("object" === typeof error && null !== error && "string" === typeof error.environmentName) {
            var JSCompiler_inline_result = error.environmentName;
            error = [
              "%o\n\n%s\n\n%s\n",
              error,
              componentNameMessage,
              recreateMessage
            ].slice(0);
            "string" === typeof error[0] ? error.splice(
              0,
              1,
              badgeFormat + " " + error[0],
              badgeStyle,
              pad + JSCompiler_inline_result + pad,
              resetStyle
            ) : error.splice(
              0,
              0,
              badgeFormat,
              badgeStyle,
              pad + JSCompiler_inline_result + pad,
              resetStyle
            );
            error.unshift(console);
            JSCompiler_inline_result = bind.apply(console.error, error);
            JSCompiler_inline_result();
          } else
            console.error(
              "%o\n\n%s\n\n%s\n",
              error,
              componentNameMessage,
              recreateMessage
            );
        }
        function defaultOnRecoverableError(error) {
          reportGlobalError(error);
        }
        function logUncaughtError(root3, errorInfo) {
          try {
            componentName = errorInfo.source ? getComponentNameFromFiber(errorInfo.source) : null;
            errorBoundaryName = null;
            var error = errorInfo.value;
            if (null !== ReactSharedInternals.actQueue)
              ReactSharedInternals.thrownErrors.push(error);
            else {
              var onUncaughtError = root3.onUncaughtError;
              onUncaughtError(error, { componentStack: errorInfo.stack });
            }
          } catch (e$5) {
            setTimeout(function() {
              throw e$5;
            });
          }
        }
        function logCaughtError(root3, boundary, errorInfo) {
          try {
            componentName = errorInfo.source ? getComponentNameFromFiber(errorInfo.source) : null;
            errorBoundaryName = getComponentNameFromFiber(boundary);
            var onCaughtError = root3.onCaughtError;
            onCaughtError(errorInfo.value, {
              componentStack: errorInfo.stack,
              errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
            });
          } catch (e$6) {
            setTimeout(function() {
              throw e$6;
            });
          }
        }
        function createRootErrorUpdate(root3, errorInfo, lane) {
          lane = createUpdate(lane);
          lane.tag = CaptureUpdate;
          lane.payload = { element: null };
          lane.callback = function() {
            runWithFiberInDEV(errorInfo.source, logUncaughtError, root3, errorInfo);
          };
          return lane;
        }
        function createClassErrorUpdate(lane) {
          lane = createUpdate(lane);
          lane.tag = CaptureUpdate;
          return lane;
        }
        function initializeClassErrorUpdate(update, root3, fiber, errorInfo) {
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if ("function" === typeof getDerivedStateFromError) {
            var error = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error);
            };
            update.callback = function() {
              markFailedErrorBoundaryForHotReloading(fiber);
              runWithFiberInDEV(
                errorInfo.source,
                logCaughtError,
                root3,
                fiber,
                errorInfo
              );
            };
          }
          var inst = fiber.stateNode;
          null !== inst && "function" === typeof inst.componentDidCatch && (update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
            runWithFiberInDEV(
              errorInfo.source,
              logCaughtError,
              root3,
              fiber,
              errorInfo
            );
            "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
            callComponentDidCatchInDEV(this, errorInfo);
            "function" === typeof getDerivedStateFromError || 0 === (fiber.lanes & 2) && console.error(
              "%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",
              getComponentNameFromFiber(fiber) || "Unknown"
            );
          });
        }
        function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= 32768;
          isDevToolsPresent && restorePendingUpdaters(root3, rootRenderLanes);
          if (null !== value && "object" === typeof value && "function" === typeof value.then) {
            returnFiber = sourceFiber.alternate;
            null !== returnFiber && propagateParentContextChanges(
              returnFiber,
              sourceFiber,
              rootRenderLanes,
              true
            );
            isHydrating && (didSuspendOrErrorDEV = true);
            sourceFiber = suspenseHandlerStackCursor.current;
            if (null !== sourceFiber) {
              switch (sourceFiber.tag) {
                case 31:
                case 13:
                  return null === shellBoundary ? renderDidSuspendDelayIfPossible() : null === sourceFiber.alternate && workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootSuspended), sourceFiber.flags &= -257, sourceFiber.flags |= 65536, sourceFiber.lanes = rootRenderLanes, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? sourceFiber.updateQueue = /* @__PURE__ */ new Set([value]) : returnFiber.add(value), attachPingListener(root3, value, rootRenderLanes)), false;
                case 22:
                  return sourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? (returnFiber = {
                    transitions: null,
                    markerInstances: null,
                    retryQueue: /* @__PURE__ */ new Set([value])
                  }, sourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, null === sourceFiber ? returnFiber.retryQueue = /* @__PURE__ */ new Set([value]) : sourceFiber.add(value)), attachPingListener(root3, value, rootRenderLanes)), false;
              }
              throw Error(
                "Unexpected Suspense handler tag (" + sourceFiber.tag + "). This is a bug in React."
              );
            }
            attachPingListener(root3, value, rootRenderLanes);
            renderDidSuspendDelayIfPossible();
            return false;
          }
          if (isHydrating)
            return didSuspendOrErrorDEV = true, returnFiber = suspenseHandlerStackCursor.current, null !== returnFiber ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256), returnFiber.flags |= 65536, returnFiber.lanes = rootRenderLanes, value !== HydrationMismatchException && queueHydrationError(
              createCapturedValueAtFiber(
                Error(
                  "There was an error while hydrating but React was able to recover by instead client rendering from the nearest Suspense boundary.",
                  { cause: value }
                ),
                sourceFiber
              )
            )) : (value !== HydrationMismatchException && queueHydrationError(
              createCapturedValueAtFiber(
                Error(
                  "There was an error while hydrating but React was able to recover by instead client rendering the entire root.",
                  { cause: value }
                ),
                sourceFiber
              )
            ), root3 = root3.current.alternate, root3.flags |= 65536, rootRenderLanes &= -rootRenderLanes, root3.lanes |= rootRenderLanes, value = createCapturedValueAtFiber(value, sourceFiber), rootRenderLanes = createRootErrorUpdate(
              root3.stateNode,
              value,
              rootRenderLanes
            ), enqueueCapturedUpdate(root3, rootRenderLanes), workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored)), false;
          var error = createCapturedValueAtFiber(
            Error(
              "There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.",
              { cause: value }
            ),
            sourceFiber
          );
          null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [error] : workInProgressRootConcurrentErrors.push(error);
          workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored);
          if (null === returnFiber) return true;
          value = createCapturedValueAtFiber(value, sourceFiber);
          sourceFiber = returnFiber;
          do {
            switch (sourceFiber.tag) {
              case 3:
                return sourceFiber.flags |= 65536, root3 = rootRenderLanes & -rootRenderLanes, sourceFiber.lanes |= root3, root3 = createRootErrorUpdate(
                  sourceFiber.stateNode,
                  value,
                  root3
                ), enqueueCapturedUpdate(sourceFiber, root3), false;
              case 1:
                if (returnFiber = sourceFiber.type, error = sourceFiber.stateNode, 0 === (sourceFiber.flags & 128) && ("function" === typeof returnFiber.getDerivedStateFromError || null !== error && "function" === typeof error.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(error))))
                  return sourceFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, sourceFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(
                    rootRenderLanes,
                    root3,
                    sourceFiber,
                    value
                  ), enqueueCapturedUpdate(sourceFiber, rootRenderLanes), false;
            }
            sourceFiber = sourceFiber.return;
          } while (null !== sourceFiber);
          return false;
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = null === current2 ? mountChildFibers(workInProgress2, null, nextChildren, renderLanes2) : reconcileChildFibers(
            workInProgress2,
            current2.child,
            nextChildren,
            renderLanes2
          );
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          Component = Component.render;
          var ref = workInProgress2.ref;
          if ("ref" in nextProps) {
            var propsWithoutRef = {};
            for (var key in nextProps)
              "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
          } else propsWithoutRef = nextProps;
          prepareToReadContext(workInProgress2);
          nextProps = renderWithHooks(
            current2,
            workInProgress2,
            Component,
            propsWithoutRef,
            ref,
            renderLanes2
          );
          key = checkDidRenderIdHook();
          if (null !== current2 && !didReceiveUpdate)
            return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          isHydrating && key && pushMaterializedTreeId(workInProgress2);
          workInProgress2.flags |= 1;
          reconcileChildren(current2, workInProgress2, nextProps, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (null === current2) {
            var type = Component.type;
            if ("function" === typeof type && !shouldConstruct(type) && void 0 === type.defaultProps && null === Component.compare)
              return Component = resolveFunctionForHotReloading(type), workInProgress2.tag = 15, workInProgress2.type = Component, validateFunctionComponentInDev(workInProgress2, type), updateSimpleMemoComponent(
                current2,
                workInProgress2,
                Component,
                nextProps,
                renderLanes2
              );
            current2 = createFiberFromTypeAndProps(
              Component.type,
              null,
              nextProps,
              workInProgress2,
              workInProgress2.mode,
              renderLanes2
            );
            current2.ref = workInProgress2.ref;
            current2.return = workInProgress2;
            return workInProgress2.child = current2;
          }
          type = current2.child;
          if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
            var prevProps = type.memoizedProps;
            Component = Component.compare;
            Component = null !== Component ? Component : shallowEqual;
            if (Component(prevProps, nextProps) && current2.ref === workInProgress2.ref)
              return bailoutOnAlreadyFinishedWork(
                current2,
                workInProgress2,
                renderLanes2
              );
          }
          workInProgress2.flags |= 1;
          current2 = createWorkInProgress(type, nextProps);
          current2.ref = workInProgress2.ref;
          current2.return = workInProgress2;
          return workInProgress2.child = current2;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (null !== current2) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type)
              if (didReceiveUpdate = false, workInProgress2.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current2, renderLanes2))
                0 !== (current2.flags & 131072) && (didReceiveUpdate = true);
              else
                return workInProgress2.lanes = current2.lanes, bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          return updateFunctionComponent(
            current2,
            workInProgress2,
            Component,
            nextProps,
            renderLanes2
          );
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2, nextProps) {
          var nextChildren = nextProps.children, prevState = null !== current2 ? current2.memoizedState : null;
          null === current2 && null === workInProgress2.stateNode && (workInProgress2.stateNode = {
            _visibility: OffscreenVisible,
            _pendingMarkers: null,
            _retryCache: null,
            _transitions: null
          });
          if ("hidden" === nextProps.mode) {
            if (0 !== (workInProgress2.flags & 128)) {
              prevState = null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2;
              if (null !== current2) {
                nextProps = workInProgress2.child = current2.child;
                for (nextChildren = 0; null !== nextProps; )
                  nextChildren = nextChildren | nextProps.lanes | nextProps.childLanes, nextProps = nextProps.sibling;
                nextProps = nextChildren & ~prevState;
              } else nextProps = 0, workInProgress2.child = null;
              return deferHiddenOffscreenComponent(
                current2,
                workInProgress2,
                prevState,
                renderLanes2,
                nextProps
              );
            }
            if (0 !== (renderLanes2 & 536870912))
              workInProgress2.memoizedState = { baseLanes: 0, cachePool: null }, null !== current2 && pushTransition(
                workInProgress2,
                null !== prevState ? prevState.cachePool : null
              ), null !== prevState ? pushHiddenContext(workInProgress2, prevState) : reuseHiddenContextOnStack(workInProgress2), pushOffscreenSuspenseHandler(workInProgress2);
            else
              return nextProps = workInProgress2.lanes = 536870912, deferHiddenOffscreenComponent(
                current2,
                workInProgress2,
                null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2,
                renderLanes2,
                nextProps
              );
          } else
            null !== prevState ? (pushTransition(workInProgress2, prevState.cachePool), pushHiddenContext(workInProgress2, prevState), reuseSuspenseHandlerOnStack(workInProgress2), workInProgress2.memoizedState = null) : (null !== current2 && pushTransition(workInProgress2, null), reuseHiddenContextOnStack(workInProgress2), reuseSuspenseHandlerOnStack(workInProgress2));
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function bailoutOffscreenComponent(current2, workInProgress2) {
          null !== current2 && 22 === current2.tag || null !== workInProgress2.stateNode || (workInProgress2.stateNode = {
            _visibility: OffscreenVisible,
            _pendingMarkers: null,
            _retryCache: null,
            _transitions: null
          });
          return workInProgress2.sibling;
        }
        function deferHiddenOffscreenComponent(current2, workInProgress2, nextBaseLanes, renderLanes2, remainingChildLanes) {
          var JSCompiler_inline_result = peekCacheFromPool();
          JSCompiler_inline_result = null === JSCompiler_inline_result ? null : {
            parent: CacheContext._currentValue,
            pool: JSCompiler_inline_result
          };
          workInProgress2.memoizedState = {
            baseLanes: nextBaseLanes,
            cachePool: JSCompiler_inline_result
          };
          null !== current2 && pushTransition(workInProgress2, null);
          reuseHiddenContextOnStack(workInProgress2);
          pushOffscreenSuspenseHandler(workInProgress2);
          null !== current2 && propagateParentContextChanges(current2, workInProgress2, renderLanes2, true);
          workInProgress2.childLanes = remainingChildLanes;
          return null;
        }
        function mountActivityChildren(workInProgress2, nextProps) {
          var hiddenProp = nextProps.hidden;
          void 0 !== hiddenProp && console.error(
            `<Activity> doesn't accept a hidden prop. Use mode="hidden" instead.
- <Activity %s>
+ <Activity %s>`,
            true === hiddenProp ? "hidden" : false === hiddenProp ? "hidden={false}" : "hidden={...}",
            hiddenProp ? 'mode="hidden"' : 'mode="visible"'
          );
          nextProps = mountWorkInProgressOffscreenFiber(
            { mode: nextProps.mode, children: nextProps.children },
            workInProgress2.mode
          );
          nextProps.ref = workInProgress2.ref;
          workInProgress2.child = nextProps;
          nextProps.return = workInProgress2;
          return nextProps;
        }
        function retryActivityComponentWithoutHydrating(current2, workInProgress2, renderLanes2) {
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          current2 = mountActivityChildren(
            workInProgress2,
            workInProgress2.pendingProps
          );
          current2.flags |= 2;
          popSuspenseHandler(workInProgress2);
          workInProgress2.memoizedState = null;
          return current2;
        }
        function updateActivityComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps, didSuspend = 0 !== (workInProgress2.flags & 128);
          workInProgress2.flags &= -129;
          if (null === current2) {
            if (isHydrating) {
              if ("hidden" === nextProps.mode)
                return current2 = mountActivityChildren(workInProgress2, nextProps), workInProgress2.lanes = 536870912, bailoutOffscreenComponent(null, current2);
              pushDehydratedActivitySuspenseHandler(workInProgress2);
              (current2 = nextHydratableInstance) ? (renderLanes2 = canHydrateHydrationBoundary(
                current2,
                rootOrSingletonContext
              ), renderLanes2 = null !== renderLanes2 && renderLanes2.data === ACTIVITY_START_DATA ? renderLanes2 : null, null !== renderLanes2 && (nextProps = {
                dehydrated: renderLanes2,
                treeContext: getSuspendedTreeContext(),
                retryLane: 536870912,
                hydrationErrors: null
              }, workInProgress2.memoizedState = nextProps, nextProps = createFiberFromDehydratedFragment(renderLanes2), nextProps.return = workInProgress2, workInProgress2.child = nextProps, hydrationParentFiber = workInProgress2, nextHydratableInstance = null)) : renderLanes2 = null;
              if (null === renderLanes2)
                throw warnNonHydratedInstance(workInProgress2, current2), throwOnHydrationMismatch(workInProgress2);
              workInProgress2.lanes = 536870912;
              return null;
            }
            return mountActivityChildren(workInProgress2, nextProps);
          }
          var prevState = current2.memoizedState;
          if (null !== prevState) {
            var activityInstance = prevState.dehydrated;
            pushDehydratedActivitySuspenseHandler(workInProgress2);
            if (didSuspend)
              if (workInProgress2.flags & 256)
                workInProgress2.flags &= -257, workInProgress2 = retryActivityComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2
                );
              else if (null !== workInProgress2.memoizedState)
                workInProgress2.child = current2.child, workInProgress2.flags |= 128, workInProgress2 = null;
              else
                throw Error(
                  "Client rendering an Activity suspended it again. This is a bug in React."
                );
            else if (warnIfHydrating(), 0 !== (renderLanes2 & 536870912) && markRenderDerivedCause(workInProgress2), didReceiveUpdate || propagateParentContextChanges(
              current2,
              workInProgress2,
              renderLanes2,
              false
            ), didSuspend = 0 !== (renderLanes2 & current2.childLanes), didReceiveUpdate || didSuspend) {
              nextProps = workInProgressRoot;
              if (null !== nextProps && (activityInstance = getBumpedLaneForHydration(
                nextProps,
                renderLanes2
              ), 0 !== activityInstance && activityInstance !== prevState.retryLane))
                throw prevState.retryLane = activityInstance, enqueueConcurrentRenderForLane(current2, activityInstance), scheduleUpdateOnFiber(nextProps, current2, activityInstance), SelectiveHydrationException;
              renderDidSuspendDelayIfPossible();
              workInProgress2 = retryActivityComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2
              );
            } else
              current2 = prevState.treeContext, nextHydratableInstance = getNextHydratable(
                activityInstance.nextSibling
              ), hydrationParentFiber = workInProgress2, isHydrating = true, hydrationErrors = null, didSuspendOrErrorDEV = false, hydrationDiffRootDEV = null, rootOrSingletonContext = false, null !== current2 && restoreSuspendedTreeContext(workInProgress2, current2), workInProgress2 = mountActivityChildren(workInProgress2, nextProps), workInProgress2.flags |= 4096;
            return workInProgress2;
          }
          prevState = current2.child;
          nextProps = { mode: nextProps.mode, children: nextProps.children };
          0 !== (renderLanes2 & 536870912) && 0 !== (renderLanes2 & current2.lanes) && markRenderDerivedCause(workInProgress2);
          current2 = createWorkInProgress(prevState, nextProps);
          current2.ref = workInProgress2.ref;
          workInProgress2.child = current2;
          current2.return = workInProgress2;
          return current2;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (null === ref)
            null !== current2 && null !== current2.ref && (workInProgress2.flags |= 4194816);
          else {
            if ("function" !== typeof ref && "object" !== typeof ref)
              throw Error(
                "Expected ref to be a function, an object returned by React.createRef(), or undefined/null."
              );
            if (null === current2 || current2.ref !== ref)
              workInProgress2.flags |= 4194816;
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (Component.prototype && "function" === typeof Component.prototype.render) {
            var componentName2 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutBadClass[componentName2] || (console.error(
              "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",
              componentName2,
              componentName2
            ), didWarnAboutBadClass[componentName2] = true);
          }
          workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(
            workInProgress2,
            null
          );
          null === current2 && (validateFunctionComponentInDev(workInProgress2, workInProgress2.type), Component.contextTypes && (componentName2 = getComponentNameFromType(Component) || "Unknown", didWarnAboutContextTypes[componentName2] || (didWarnAboutContextTypes[componentName2] = true, console.error(
            "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead. (https://react.dev/link/legacy-context)",
            componentName2
          ))));
          prepareToReadContext(workInProgress2);
          Component = renderWithHooks(
            current2,
            workInProgress2,
            Component,
            nextProps,
            void 0,
            renderLanes2
          );
          nextProps = checkDidRenderIdHook();
          if (null !== current2 && !didReceiveUpdate)
            return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          isHydrating && nextProps && pushMaterializedTreeId(workInProgress2);
          workInProgress2.flags |= 1;
          reconcileChildren(current2, workInProgress2, Component, renderLanes2);
          return workInProgress2.child;
        }
        function replayFunctionComponent(current2, workInProgress2, nextProps, Component, secondArg, renderLanes2) {
          prepareToReadContext(workInProgress2);
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = null !== current2 && current2.type !== workInProgress2.type;
          workInProgress2.updateQueue = null;
          nextProps = renderWithHooksAgain(
            workInProgress2,
            Component,
            nextProps,
            secondArg
          );
          finishRenderingHooks(current2, workInProgress2);
          Component = checkDidRenderIdHook();
          if (null !== current2 && !didReceiveUpdate)
            return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          isHydrating && Component && pushMaterializedTreeId(workInProgress2);
          workInProgress2.flags |= 1;
          reconcileChildren(current2, workInProgress2, nextProps, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          switch (shouldErrorImpl(workInProgress2)) {
            case false:
              var _instance = workInProgress2.stateNode, state = new workInProgress2.type(
                workInProgress2.memoizedProps,
                _instance.context
              ).state;
              _instance.updater.enqueueSetState(_instance, state, null);
              break;
            case true:
              workInProgress2.flags |= 128;
              workInProgress2.flags |= 65536;
              _instance = Error("Simulated error coming from DevTools");
              var lane = renderLanes2 & -renderLanes2;
              workInProgress2.lanes |= lane;
              state = workInProgressRoot;
              if (null === state)
                throw Error(
                  "Expected a work-in-progress root. This is a bug in React. Please file an issue."
                );
              lane = createClassErrorUpdate(lane);
              initializeClassErrorUpdate(
                lane,
                state,
                workInProgress2,
                createCapturedValueAtFiber(_instance, workInProgress2)
              );
              enqueueCapturedUpdate(workInProgress2, lane);
          }
          prepareToReadContext(workInProgress2);
          if (null === workInProgress2.stateNode) {
            state = emptyContextObject;
            _instance = Component.contextType;
            "contextType" in Component && null !== _instance && (void 0 === _instance || _instance.$$typeof !== REACT_CONTEXT_TYPE) && !didWarnAboutInvalidateContextType.has(Component) && (didWarnAboutInvalidateContextType.add(Component), lane = void 0 === _instance ? " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : "object" !== typeof _instance ? " However, it is set to a " + typeof _instance + "." : _instance.$$typeof === REACT_CONSUMER_TYPE ? " Did you accidentally pass the Context.Consumer instead?" : " However, it is set to an object with keys {" + Object.keys(_instance).join(", ") + "}.", console.error(
              "%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",
              getComponentNameFromType(Component) || "Component",
              lane
            ));
            "object" === typeof _instance && null !== _instance && (state = readContext(_instance));
            _instance = new Component(nextProps, state);
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                _instance = new Component(nextProps, state);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            state = workInProgress2.memoizedState = null !== _instance.state && void 0 !== _instance.state ? _instance.state : null;
            _instance.updater = classComponentUpdater;
            workInProgress2.stateNode = _instance;
            _instance._reactInternals = workInProgress2;
            _instance._reactInternalInstance = fakeInternalInstance;
            "function" === typeof Component.getDerivedStateFromProps && null === state && (state = getComponentNameFromType(Component) || "Component", didWarnAboutUninitializedState.has(state) || (didWarnAboutUninitializedState.add(state), console.error(
              "`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
              state,
              null === _instance.state ? "null" : "undefined",
              state
            )));
            if ("function" === typeof Component.getDerivedStateFromProps || "function" === typeof _instance.getSnapshotBeforeUpdate) {
              var foundWillUpdateName = lane = state = null;
              "function" === typeof _instance.componentWillMount && true !== _instance.componentWillMount.__suppressDeprecationWarning ? state = "componentWillMount" : "function" === typeof _instance.UNSAFE_componentWillMount && (state = "UNSAFE_componentWillMount");
              "function" === typeof _instance.componentWillReceiveProps && true !== _instance.componentWillReceiveProps.__suppressDeprecationWarning ? lane = "componentWillReceiveProps" : "function" === typeof _instance.UNSAFE_componentWillReceiveProps && (lane = "UNSAFE_componentWillReceiveProps");
              "function" === typeof _instance.componentWillUpdate && true !== _instance.componentWillUpdate.__suppressDeprecationWarning ? foundWillUpdateName = "componentWillUpdate" : "function" === typeof _instance.UNSAFE_componentWillUpdate && (foundWillUpdateName = "UNSAFE_componentWillUpdate");
              if (null !== state || null !== lane || null !== foundWillUpdateName) {
                _instance = getComponentNameFromType(Component) || "Component";
                var newApiName = "function" === typeof Component.getDerivedStateFromProps ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                didWarnAboutLegacyLifecyclesAndDerivedState.has(_instance) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_instance), console.error(
                  "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://react.dev/link/unsafe-component-lifecycles",
                  _instance,
                  newApiName,
                  null !== state ? "\n  " + state : "",
                  null !== lane ? "\n  " + lane : "",
                  null !== foundWillUpdateName ? "\n  " + foundWillUpdateName : ""
                ));
              }
            }
            _instance = workInProgress2.stateNode;
            state = getComponentNameFromType(Component) || "Component";
            _instance.render || (Component.prototype && "function" === typeof Component.prototype.render ? console.error(
              "No `render` method found on the %s instance: did you accidentally return an object from the constructor?",
              state
            ) : console.error(
              "No `render` method found on the %s instance: you may have forgotten to define `render`.",
              state
            ));
            !_instance.getInitialState || _instance.getInitialState.isReactClassApproved || _instance.state || console.error(
              "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",
              state
            );
            _instance.getDefaultProps && !_instance.getDefaultProps.isReactClassApproved && console.error(
              "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",
              state
            );
            _instance.contextType && console.error(
              "contextType was defined as an instance property on %s. Use a static property to define contextType instead.",
              state
            );
            Component.childContextTypes && !didWarnAboutChildContextTypes.has(Component) && (didWarnAboutChildContextTypes.add(Component), console.error(
              "%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead. (https://react.dev/link/legacy-context)",
              state
            ));
            Component.contextTypes && !didWarnAboutContextTypes$1.has(Component) && (didWarnAboutContextTypes$1.add(Component), console.error(
              "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)",
              state
            ));
            "function" === typeof _instance.componentShouldUpdate && console.error(
              "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",
              state
            );
            Component.prototype && Component.prototype.isPureReactComponent && "undefined" !== typeof _instance.shouldComponentUpdate && console.error(
              "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",
              getComponentNameFromType(Component) || "A pure component"
            );
            "function" === typeof _instance.componentDidUnmount && console.error(
              "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",
              state
            );
            "function" === typeof _instance.componentDidReceiveProps && console.error(
              "%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",
              state
            );
            "function" === typeof _instance.componentWillRecieveProps && console.error(
              "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
              state
            );
            "function" === typeof _instance.UNSAFE_componentWillRecieveProps && console.error(
              "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",
              state
            );
            lane = _instance.props !== nextProps;
            void 0 !== _instance.props && lane && console.error(
              "When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",
              state
            );
            _instance.defaultProps && console.error(
              "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",
              state,
              state
            );
            "function" !== typeof _instance.getSnapshotBeforeUpdate || "function" === typeof _instance.componentDidUpdate || didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(Component) || (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(Component), console.error(
              "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",
              getComponentNameFromType(Component)
            ));
            "function" === typeof _instance.getDerivedStateFromProps && console.error(
              "%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
              state
            );
            "function" === typeof _instance.getDerivedStateFromError && console.error(
              "%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
              state
            );
            "function" === typeof Component.getSnapshotBeforeUpdate && console.error(
              "%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",
              state
            );
            (lane = _instance.state) && ("object" !== typeof lane || isArrayImpl(lane)) && console.error("%s.state: must be set to an object or null", state);
            "function" === typeof _instance.getChildContext && "object" !== typeof Component.childContextTypes && console.error(
              "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",
              state
            );
            _instance = workInProgress2.stateNode;
            _instance.props = nextProps;
            _instance.state = workInProgress2.memoizedState;
            _instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            state = Component.contextType;
            _instance.context = "object" === typeof state && null !== state ? readContext(state) : emptyContextObject;
            _instance.state === nextProps && (state = getComponentNameFromType(Component) || "Component", didWarnAboutDirectlyAssigningPropsToState.has(state) || (didWarnAboutDirectlyAssigningPropsToState.add(state), console.error(
              "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",
              state
            )));
            workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(
              workInProgress2,
              _instance
            );
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(
              workInProgress2,
              _instance
            );
            _instance.state = workInProgress2.memoizedState;
            state = Component.getDerivedStateFromProps;
            "function" === typeof state && (applyDerivedStateFromProps(
              workInProgress2,
              Component,
              state,
              nextProps
            ), _instance.state = workInProgress2.memoizedState);
            "function" === typeof Component.getDerivedStateFromProps || "function" === typeof _instance.getSnapshotBeforeUpdate || "function" !== typeof _instance.UNSAFE_componentWillMount && "function" !== typeof _instance.componentWillMount || (state = _instance.state, "function" === typeof _instance.componentWillMount && _instance.componentWillMount(), "function" === typeof _instance.UNSAFE_componentWillMount && _instance.UNSAFE_componentWillMount(), state !== _instance.state && (console.error(
              "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
              getComponentNameFromFiber(workInProgress2) || "Component"
            ), classComponentUpdater.enqueueReplaceState(
              _instance,
              _instance.state,
              null
            )), processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction(), _instance.state = workInProgress2.memoizedState);
            "function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308);
            (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728);
            _instance = true;
          } else if (null === current2) {
            _instance = workInProgress2.stateNode;
            var unresolvedOldProps = workInProgress2.memoizedProps;
            lane = resolveClassComponentProps(Component, unresolvedOldProps);
            _instance.props = lane;
            var oldContext = _instance.context;
            foundWillUpdateName = Component.contextType;
            state = emptyContextObject;
            "object" === typeof foundWillUpdateName && null !== foundWillUpdateName && (state = readContext(foundWillUpdateName));
            newApiName = Component.getDerivedStateFromProps;
            foundWillUpdateName = "function" === typeof newApiName || "function" === typeof _instance.getSnapshotBeforeUpdate;
            unresolvedOldProps = workInProgress2.pendingProps !== unresolvedOldProps;
            foundWillUpdateName || "function" !== typeof _instance.UNSAFE_componentWillReceiveProps && "function" !== typeof _instance.componentWillReceiveProps || (unresolvedOldProps || oldContext !== state) && callComponentWillReceiveProps(
              workInProgress2,
              _instance,
              nextProps,
              state
            );
            hasForceUpdate = false;
            var oldState = workInProgress2.memoizedState;
            _instance.state = oldState;
            processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2);
            suspendIfUpdateReadFromEntangledAsyncAction();
            oldContext = workInProgress2.memoizedState;
            unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? ("function" === typeof newApiName && (applyDerivedStateFromProps(
              workInProgress2,
              Component,
              newApiName,
              nextProps
            ), oldContext = workInProgress2.memoizedState), (lane = hasForceUpdate || checkShouldComponentUpdate(
              workInProgress2,
              Component,
              lane,
              nextProps,
              oldState,
              oldContext,
              state
            )) ? (foundWillUpdateName || "function" !== typeof _instance.UNSAFE_componentWillMount && "function" !== typeof _instance.componentWillMount || ("function" === typeof _instance.componentWillMount && _instance.componentWillMount(), "function" === typeof _instance.UNSAFE_componentWillMount && _instance.UNSAFE_componentWillMount()), "function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308), (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728)) : ("function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308), (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = oldContext), _instance.props = nextProps, _instance.state = oldContext, _instance.context = state, _instance = lane) : ("function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308), (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728), _instance = false);
          } else {
            _instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            state = workInProgress2.memoizedProps;
            foundWillUpdateName = resolveClassComponentProps(Component, state);
            _instance.props = foundWillUpdateName;
            newApiName = workInProgress2.pendingProps;
            oldState = _instance.context;
            oldContext = Component.contextType;
            lane = emptyContextObject;
            "object" === typeof oldContext && null !== oldContext && (lane = readContext(oldContext));
            unresolvedOldProps = Component.getDerivedStateFromProps;
            (oldContext = "function" === typeof unresolvedOldProps || "function" === typeof _instance.getSnapshotBeforeUpdate) || "function" !== typeof _instance.UNSAFE_componentWillReceiveProps && "function" !== typeof _instance.componentWillReceiveProps || (state !== newApiName || oldState !== lane) && callComponentWillReceiveProps(
              workInProgress2,
              _instance,
              nextProps,
              lane
            );
            hasForceUpdate = false;
            oldState = workInProgress2.memoizedState;
            _instance.state = oldState;
            processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2);
            suspendIfUpdateReadFromEntangledAsyncAction();
            var newState = workInProgress2.memoizedState;
            state !== newApiName || oldState !== newState || hasForceUpdate || null !== current2 && null !== current2.dependencies && checkIfContextChanged(current2.dependencies) ? ("function" === typeof unresolvedOldProps && (applyDerivedStateFromProps(
              workInProgress2,
              Component,
              unresolvedOldProps,
              nextProps
            ), newState = workInProgress2.memoizedState), (foundWillUpdateName = hasForceUpdate || checkShouldComponentUpdate(
              workInProgress2,
              Component,
              foundWillUpdateName,
              nextProps,
              oldState,
              newState,
              lane
            ) || null !== current2 && null !== current2.dependencies && checkIfContextChanged(current2.dependencies)) ? (oldContext || "function" !== typeof _instance.UNSAFE_componentWillUpdate && "function" !== typeof _instance.componentWillUpdate || ("function" === typeof _instance.componentWillUpdate && _instance.componentWillUpdate(nextProps, newState, lane), "function" === typeof _instance.UNSAFE_componentWillUpdate && _instance.UNSAFE_componentWillUpdate(
              nextProps,
              newState,
              lane
            )), "function" === typeof _instance.componentDidUpdate && (workInProgress2.flags |= 4), "function" === typeof _instance.getSnapshotBeforeUpdate && (workInProgress2.flags |= 1024)) : ("function" !== typeof _instance.componentDidUpdate || state === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof _instance.getSnapshotBeforeUpdate || state === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 1024), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = newState), _instance.props = nextProps, _instance.state = newState, _instance.context = lane, _instance = foundWillUpdateName) : ("function" !== typeof _instance.componentDidUpdate || state === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof _instance.getSnapshotBeforeUpdate || state === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 1024), _instance = false);
          }
          lane = _instance;
          markRef(current2, workInProgress2);
          state = 0 !== (workInProgress2.flags & 128);
          if (lane || state) {
            lane = workInProgress2.stateNode;
            setCurrentFiber(workInProgress2);
            if (state && "function" !== typeof Component.getDerivedStateFromError)
              Component = null, profilerStartTime = -1;
            else if (Component = callRenderInDEV(lane), workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                callRenderInDEV(lane);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            workInProgress2.flags |= 1;
            null !== current2 && state ? (workInProgress2.child = reconcileChildFibers(
              workInProgress2,
              current2.child,
              null,
              renderLanes2
            ), workInProgress2.child = reconcileChildFibers(
              workInProgress2,
              null,
              Component,
              renderLanes2
            )) : reconcileChildren(current2, workInProgress2, Component, renderLanes2);
            workInProgress2.memoizedState = lane.state;
            current2 = workInProgress2.child;
          } else
            current2 = bailoutOnAlreadyFinishedWork(
              current2,
              workInProgress2,
              renderLanes2
            );
          renderLanes2 = workInProgress2.stateNode;
          _instance && renderLanes2.props !== nextProps && (didWarnAboutReassigningProps || console.error(
            "It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",
            getComponentNameFromFiber(workInProgress2) || "a component"
          ), didWarnAboutReassigningProps = true);
          return current2;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2) {
          resetHydrationState();
          workInProgress2.flags |= 256;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          Component && Component.childContextTypes && console.error(
            "childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...",
            Component.displayName || Component.name || "Component"
          );
          "function" === typeof Component.getDerivedStateFromProps && (workInProgress2 = getComponentNameFromType(Component) || "Unknown", didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress2] || (console.error(
            "%s: Function components do not support getDerivedStateFromProps.",
            workInProgress2
          ), didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress2] = true));
          "object" === typeof Component.contextType && null !== Component.contextType && (Component = getComponentNameFromType(Component) || "Unknown", didWarnAboutContextTypeOnFunctionComponent[Component] || (console.error(
            "%s: Function components do not support contextType.",
            Component
          ), didWarnAboutContextTypeOnFunctionComponent[Component] = true));
        }
        function mountSuspenseOffscreenState(renderLanes2) {
          return { baseLanes: renderLanes2, cachePool: getSuspendedCache() };
        }
        function getRemainingWorkInPrimaryTree(current2, primaryTreeDidDefer, renderLanes2) {
          current2 = null !== current2 ? current2.childLanes & ~renderLanes2 : 0;
          primaryTreeDidDefer && (current2 |= workInProgressDeferredLane);
          return current2;
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var JSCompiler_object_inline_digest_2724;
          var JSCompiler_object_inline_stack_2725 = workInProgress2.pendingProps;
          shouldSuspendImpl(workInProgress2) && (workInProgress2.flags |= 128);
          var JSCompiler_object_inline_message_2723 = false;
          var didSuspend = 0 !== (workInProgress2.flags & 128);
          (JSCompiler_object_inline_digest_2724 = didSuspend) || (JSCompiler_object_inline_digest_2724 = null !== current2 && null === current2.memoizedState ? false : 0 !== (suspenseStackCursor.current & ForceSuspenseFallback));
          JSCompiler_object_inline_digest_2724 && (JSCompiler_object_inline_message_2723 = true, workInProgress2.flags &= -129);
          JSCompiler_object_inline_digest_2724 = 0 !== (workInProgress2.flags & 32);
          workInProgress2.flags &= -33;
          if (null === current2) {
            if (isHydrating) {
              JSCompiler_object_inline_message_2723 ? pushPrimaryTreeSuspenseHandler(workInProgress2) : reuseSuspenseHandlerOnStack(workInProgress2);
              (current2 = nextHydratableInstance) ? (renderLanes2 = canHydrateHydrationBoundary(
                current2,
                rootOrSingletonContext
              ), renderLanes2 = null !== renderLanes2 && renderLanes2.data !== ACTIVITY_START_DATA ? renderLanes2 : null, null !== renderLanes2 && (JSCompiler_object_inline_digest_2724 = {
                dehydrated: renderLanes2,
                treeContext: getSuspendedTreeContext(),
                retryLane: 536870912,
                hydrationErrors: null
              }, workInProgress2.memoizedState = JSCompiler_object_inline_digest_2724, JSCompiler_object_inline_digest_2724 = createFiberFromDehydratedFragment(renderLanes2), JSCompiler_object_inline_digest_2724.return = workInProgress2, workInProgress2.child = JSCompiler_object_inline_digest_2724, hydrationParentFiber = workInProgress2, nextHydratableInstance = null)) : renderLanes2 = null;
              if (null === renderLanes2)
                throw warnNonHydratedInstance(workInProgress2, current2), throwOnHydrationMismatch(workInProgress2);
              isSuspenseInstanceFallback(renderLanes2) ? workInProgress2.lanes = 32 : workInProgress2.lanes = 536870912;
              return null;
            }
            var nextPrimaryChildren = JSCompiler_object_inline_stack_2725.children;
            JSCompiler_object_inline_stack_2725 = JSCompiler_object_inline_stack_2725.fallback;
            if (JSCompiler_object_inline_message_2723) {
              reuseSuspenseHandlerOnStack(workInProgress2);
              var mode = workInProgress2.mode;
              nextPrimaryChildren = mountWorkInProgressOffscreenFiber(
                { mode: "hidden", children: nextPrimaryChildren },
                mode
              );
              JSCompiler_object_inline_stack_2725 = createFiberFromFragment(
                JSCompiler_object_inline_stack_2725,
                mode,
                renderLanes2,
                null
              );
              nextPrimaryChildren.return = workInProgress2;
              JSCompiler_object_inline_stack_2725.return = workInProgress2;
              nextPrimaryChildren.sibling = JSCompiler_object_inline_stack_2725;
              workInProgress2.child = nextPrimaryChildren;
              JSCompiler_object_inline_stack_2725 = workInProgress2.child;
              JSCompiler_object_inline_stack_2725.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              JSCompiler_object_inline_stack_2725.childLanes = getRemainingWorkInPrimaryTree(
                current2,
                JSCompiler_object_inline_digest_2724,
                renderLanes2
              );
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return bailoutOffscreenComponent(
                null,
                JSCompiler_object_inline_stack_2725
              );
            }
            pushPrimaryTreeSuspenseHandler(workInProgress2);
            return mountSuspensePrimaryChildren(
              workInProgress2,
              nextPrimaryChildren
            );
          }
          var prevState = current2.memoizedState;
          if (null !== prevState) {
            var JSCompiler_object_inline_componentStack_2726 = prevState.dehydrated;
            if (null !== JSCompiler_object_inline_componentStack_2726) {
              if (didSuspend)
                workInProgress2.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags &= -257, workInProgress2 = retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2
                )) : null !== workInProgress2.memoizedState ? (reuseSuspenseHandlerOnStack(workInProgress2), workInProgress2.child = current2.child, workInProgress2.flags |= 128, workInProgress2 = null) : (reuseSuspenseHandlerOnStack(workInProgress2), nextPrimaryChildren = JSCompiler_object_inline_stack_2725.fallback, mode = workInProgress2.mode, JSCompiler_object_inline_stack_2725 = mountWorkInProgressOffscreenFiber(
                  {
                    mode: "visible",
                    children: JSCompiler_object_inline_stack_2725.children
                  },
                  mode
                ), nextPrimaryChildren = createFiberFromFragment(
                  nextPrimaryChildren,
                  mode,
                  renderLanes2,
                  null
                ), nextPrimaryChildren.flags |= 2, JSCompiler_object_inline_stack_2725.return = workInProgress2, nextPrimaryChildren.return = workInProgress2, JSCompiler_object_inline_stack_2725.sibling = nextPrimaryChildren, workInProgress2.child = JSCompiler_object_inline_stack_2725, reconcileChildFibers(
                  workInProgress2,
                  current2.child,
                  null,
                  renderLanes2
                ), JSCompiler_object_inline_stack_2725 = workInProgress2.child, JSCompiler_object_inline_stack_2725.memoizedState = mountSuspenseOffscreenState(renderLanes2), JSCompiler_object_inline_stack_2725.childLanes = getRemainingWorkInPrimaryTree(
                  current2,
                  JSCompiler_object_inline_digest_2724,
                  renderLanes2
                ), workInProgress2.memoizedState = SUSPENDED_MARKER, workInProgress2 = bailoutOffscreenComponent(
                  null,
                  JSCompiler_object_inline_stack_2725
                ));
              else if (pushPrimaryTreeSuspenseHandler(workInProgress2), warnIfHydrating(), 0 !== (renderLanes2 & 536870912) && markRenderDerivedCause(workInProgress2), isSuspenseInstanceFallback(
                JSCompiler_object_inline_componentStack_2726
              )) {
                JSCompiler_object_inline_digest_2724 = JSCompiler_object_inline_componentStack_2726.nextSibling && JSCompiler_object_inline_componentStack_2726.nextSibling.dataset;
                if (JSCompiler_object_inline_digest_2724) {
                  nextPrimaryChildren = JSCompiler_object_inline_digest_2724.dgst;
                  var message = JSCompiler_object_inline_digest_2724.msg;
                  mode = JSCompiler_object_inline_digest_2724.stck;
                  var componentStack = JSCompiler_object_inline_digest_2724.cstck;
                }
                JSCompiler_object_inline_message_2723 = message;
                JSCompiler_object_inline_digest_2724 = nextPrimaryChildren;
                JSCompiler_object_inline_stack_2725 = mode;
                JSCompiler_object_inline_componentStack_2726 = componentStack;
                nextPrimaryChildren = JSCompiler_object_inline_message_2723;
                mode = JSCompiler_object_inline_componentStack_2726;
                nextPrimaryChildren = nextPrimaryChildren ? Error(nextPrimaryChildren) : Error(
                  "The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."
                );
                nextPrimaryChildren.stack = JSCompiler_object_inline_stack_2725 || "";
                nextPrimaryChildren.digest = JSCompiler_object_inline_digest_2724;
                JSCompiler_object_inline_digest_2724 = void 0 === mode ? null : mode;
                JSCompiler_object_inline_stack_2725 = {
                  value: nextPrimaryChildren,
                  source: null,
                  stack: JSCompiler_object_inline_digest_2724
                };
                "string" === typeof JSCompiler_object_inline_digest_2724 && CapturedStacks.set(
                  nextPrimaryChildren,
                  JSCompiler_object_inline_stack_2725
                );
                queueHydrationError(JSCompiler_object_inline_stack_2725);
                workInProgress2 = retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2
                );
              } else if (didReceiveUpdate || propagateParentContextChanges(
                current2,
                workInProgress2,
                renderLanes2,
                false
              ), JSCompiler_object_inline_digest_2724 = 0 !== (renderLanes2 & current2.childLanes), didReceiveUpdate || JSCompiler_object_inline_digest_2724) {
                JSCompiler_object_inline_digest_2724 = workInProgressRoot;
                if (null !== JSCompiler_object_inline_digest_2724 && (JSCompiler_object_inline_stack_2725 = getBumpedLaneForHydration(
                  JSCompiler_object_inline_digest_2724,
                  renderLanes2
                ), 0 !== JSCompiler_object_inline_stack_2725 && JSCompiler_object_inline_stack_2725 !== prevState.retryLane))
                  throw prevState.retryLane = JSCompiler_object_inline_stack_2725, enqueueConcurrentRenderForLane(
                    current2,
                    JSCompiler_object_inline_stack_2725
                  ), scheduleUpdateOnFiber(
                    JSCompiler_object_inline_digest_2724,
                    current2,
                    JSCompiler_object_inline_stack_2725
                  ), SelectiveHydrationException;
                isSuspenseInstancePending(
                  JSCompiler_object_inline_componentStack_2726
                ) || renderDidSuspendDelayIfPossible();
                workInProgress2 = retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2
                );
              } else
                isSuspenseInstancePending(
                  JSCompiler_object_inline_componentStack_2726
                ) ? (workInProgress2.flags |= 192, workInProgress2.child = current2.child, workInProgress2 = null) : (current2 = prevState.treeContext, nextHydratableInstance = getNextHydratable(
                  JSCompiler_object_inline_componentStack_2726.nextSibling
                ), hydrationParentFiber = workInProgress2, isHydrating = true, hydrationErrors = null, didSuspendOrErrorDEV = false, hydrationDiffRootDEV = null, rootOrSingletonContext = false, null !== current2 && restoreSuspendedTreeContext(workInProgress2, current2), workInProgress2 = mountSuspensePrimaryChildren(
                  workInProgress2,
                  JSCompiler_object_inline_stack_2725.children
                ), workInProgress2.flags |= 4096);
              return workInProgress2;
            }
          }
          if (JSCompiler_object_inline_message_2723)
            return reuseSuspenseHandlerOnStack(workInProgress2), nextPrimaryChildren = JSCompiler_object_inline_stack_2725.fallback, mode = workInProgress2.mode, componentStack = current2.child, JSCompiler_object_inline_componentStack_2726 = componentStack.sibling, JSCompiler_object_inline_stack_2725 = createWorkInProgress(
              componentStack,
              {
                mode: "hidden",
                children: JSCompiler_object_inline_stack_2725.children
              }
            ), JSCompiler_object_inline_stack_2725.subtreeFlags = componentStack.subtreeFlags & 65011712, null !== JSCompiler_object_inline_componentStack_2726 ? nextPrimaryChildren = createWorkInProgress(
              JSCompiler_object_inline_componentStack_2726,
              nextPrimaryChildren
            ) : (nextPrimaryChildren = createFiberFromFragment(
              nextPrimaryChildren,
              mode,
              renderLanes2,
              null
            ), nextPrimaryChildren.flags |= 2), nextPrimaryChildren.return = workInProgress2, JSCompiler_object_inline_stack_2725.return = workInProgress2, JSCompiler_object_inline_stack_2725.sibling = nextPrimaryChildren, workInProgress2.child = JSCompiler_object_inline_stack_2725, bailoutOffscreenComponent(null, JSCompiler_object_inline_stack_2725), JSCompiler_object_inline_stack_2725 = workInProgress2.child, nextPrimaryChildren = current2.child.memoizedState, null === nextPrimaryChildren ? nextPrimaryChildren = mountSuspenseOffscreenState(renderLanes2) : (mode = nextPrimaryChildren.cachePool, null !== mode ? (componentStack = CacheContext._currentValue, mode = mode.parent !== componentStack ? { parent: componentStack, pool: componentStack } : mode) : mode = getSuspendedCache(), nextPrimaryChildren = {
              baseLanes: nextPrimaryChildren.baseLanes | renderLanes2,
              cachePool: mode
            }), JSCompiler_object_inline_stack_2725.memoizedState = nextPrimaryChildren, JSCompiler_object_inline_stack_2725.childLanes = getRemainingWorkInPrimaryTree(
              current2,
              JSCompiler_object_inline_digest_2724,
              renderLanes2
            ), workInProgress2.memoizedState = SUSPENDED_MARKER, bailoutOffscreenComponent(
              current2.child,
              JSCompiler_object_inline_stack_2725
            );
          null !== prevState && (renderLanes2 & 62914560) === renderLanes2 && 0 !== (renderLanes2 & current2.lanes) && markRenderDerivedCause(workInProgress2);
          pushPrimaryTreeSuspenseHandler(workInProgress2);
          renderLanes2 = current2.child;
          current2 = renderLanes2.sibling;
          renderLanes2 = createWorkInProgress(renderLanes2, {
            mode: "visible",
            children: JSCompiler_object_inline_stack_2725.children
          });
          renderLanes2.return = workInProgress2;
          renderLanes2.sibling = null;
          null !== current2 && (JSCompiler_object_inline_digest_2724 = workInProgress2.deletions, null === JSCompiler_object_inline_digest_2724 ? (workInProgress2.deletions = [current2], workInProgress2.flags |= 16) : JSCompiler_object_inline_digest_2724.push(current2));
          workInProgress2.child = renderLanes2;
          workInProgress2.memoizedState = null;
          return renderLanes2;
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren) {
          primaryChildren = mountWorkInProgressOffscreenFiber(
            { mode: "visible", children: primaryChildren },
            workInProgress2.mode
          );
          primaryChildren.return = workInProgress2;
          return workInProgress2.child = primaryChildren;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
          offscreenProps = createFiber(22, offscreenProps, null, mode);
          offscreenProps.lanes = 0;
          return offscreenProps;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2) {
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          current2 = mountSuspensePrimaryChildren(
            workInProgress2,
            workInProgress2.pendingProps.children
          );
          current2.flags |= 2;
          workInProgress2.memoizedState = null;
          return current2;
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes |= renderLanes2;
          var alternate = fiber.alternate;
          null !== alternate && (alternate.lanes |= renderLanes2);
          scheduleContextWorkOnParentPath(
            fiber.return,
            renderLanes2,
            propagationRoot
          );
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, treeForkCount2) {
          var renderState = workInProgress2.memoizedState;
          null === renderState ? workInProgress2.memoizedState = {
            isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail,
            tailMode,
            treeForkCount: treeForkCount2
          } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode, renderState.treeForkCount = treeForkCount2);
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail, newChildren = nextProps.children, suspenseContext = suspenseStackCursor.current;
          (nextProps = 0 !== (suspenseContext & ForceSuspenseFallback)) ? (suspenseContext = suspenseContext & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress2.flags |= 128) : suspenseContext &= SubtreeSuspenseContextMask;
          push(suspenseStackCursor, suspenseContext, workInProgress2);
          suspenseContext = null == revealOrder ? "null" : revealOrder;
          if ("forwards" !== revealOrder && "unstable_legacy-backwards" !== revealOrder && "together" !== revealOrder && "independent" !== revealOrder && !didWarnAboutRevealOrder[suspenseContext])
            if (didWarnAboutRevealOrder[suspenseContext] = true, null == revealOrder)
              console.error(
                'The default for the <SuspenseList revealOrder="..."> prop is changing. To be future compatible you must explictly specify either "independent" (the current default), "together", "forwards" or "legacy_unstable-backwards".'
              );
            else if ("backwards" === revealOrder)
              console.error(
                'The rendering order of <SuspenseList revealOrder="backwards"> is changing. To be future compatible you must specify revealOrder="legacy_unstable-backwards" instead.'
              );
            else if ("string" === typeof revealOrder)
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards":
                case "independent":
                  console.error(
                    '"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',
                    revealOrder,
                    revealOrder.toLowerCase()
                  );
                  break;
                case "forward":
                case "backward":
                  console.error(
                    '"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',
                    revealOrder,
                    revealOrder.toLowerCase()
                  );
                  break;
                default:
                  console.error(
                    '"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "independent", "together", "forwards" or "backwards"?',
                    revealOrder
                  );
              }
            else
              console.error(
                '%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "independent", "together", "forwards" or "backwards"?',
                revealOrder
              );
          suspenseContext = null == tailMode ? "null" : tailMode;
          if (!didWarnAboutTailOptions[suspenseContext])
            if (null == tailMode) {
              if ("forwards" === revealOrder || "backwards" === revealOrder || "unstable_legacy-backwards" === revealOrder)
                didWarnAboutTailOptions[suspenseContext] = true, console.error(
                  'The default for the <SuspenseList tail="..."> prop is changing. To be future compatible you must explictly specify either "visible" (the current default), "collapsed" or "hidden".'
                );
            } else
              "visible" !== tailMode && "collapsed" !== tailMode && "hidden" !== tailMode ? (didWarnAboutTailOptions[suspenseContext] = true, console.error(
                '"%s" is not a supported value for tail on <SuspenseList />. Did you mean "visible", "collapsed" or "hidden"?',
                tailMode
              )) : "forwards" !== revealOrder && "backwards" !== revealOrder && "unstable_legacy-backwards" !== revealOrder && (didWarnAboutTailOptions[suspenseContext] = true, console.error(
                '<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',
                tailMode
              ));
          a: if (("forwards" === revealOrder || "backwards" === revealOrder || "unstable_legacy-backwards" === revealOrder) && void 0 !== newChildren && null !== newChildren && false !== newChildren)
            if (isArrayImpl(newChildren))
              for (suspenseContext = 0; suspenseContext < newChildren.length; suspenseContext++) {
                if (!validateSuspenseListNestedChild(
                  newChildren[suspenseContext],
                  suspenseContext
                ))
                  break a;
              }
            else if (suspenseContext = getIteratorFn(newChildren), "function" === typeof suspenseContext) {
              if (suspenseContext = suspenseContext.call(newChildren))
                for (var step = suspenseContext.next(), _i = 0; !step.done; step = suspenseContext.next()) {
                  if (!validateSuspenseListNestedChild(step.value, _i)) break a;
                  _i++;
                }
            } else
              console.error(
                'A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',
                revealOrder
              );
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          isHydrating ? (warnIfNotHydrating(), newChildren = treeForkCount) : newChildren = 0;
          if (!nextProps && null !== current2 && 0 !== (current2.flags & 128))
            a: for (current2 = workInProgress2.child; null !== current2; ) {
              if (13 === current2.tag)
                null !== current2.memoizedState && scheduleSuspenseWorkOnFiber(current2, renderLanes2, workInProgress2);
              else if (19 === current2.tag)
                scheduleSuspenseWorkOnFiber(current2, renderLanes2, workInProgress2);
              else if (null !== current2.child) {
                current2.child.return = current2;
                current2 = current2.child;
                continue;
              }
              if (current2 === workInProgress2) break a;
              for (; null === current2.sibling; ) {
                if (null === current2.return || current2.return === workInProgress2)
                  break a;
                current2 = current2.return;
              }
              current2.sibling.return = current2.return;
              current2 = current2.sibling;
            }
          switch (revealOrder) {
            case "forwards":
              renderLanes2 = workInProgress2.child;
              for (revealOrder = null; null !== renderLanes2; )
                current2 = renderLanes2.alternate, null !== current2 && null === findFirstSuspended(current2) && (revealOrder = renderLanes2), renderLanes2 = renderLanes2.sibling;
              renderLanes2 = revealOrder;
              null === renderLanes2 ? (revealOrder = workInProgress2.child, workInProgress2.child = null) : (revealOrder = renderLanes2.sibling, renderLanes2.sibling = null);
              initSuspenseListRenderState(
                workInProgress2,
                false,
                revealOrder,
                renderLanes2,
                tailMode,
                newChildren
              );
              break;
            case "backwards":
            case "unstable_legacy-backwards":
              renderLanes2 = null;
              revealOrder = workInProgress2.child;
              for (workInProgress2.child = null; null !== revealOrder; ) {
                current2 = revealOrder.alternate;
                if (null !== current2 && null === findFirstSuspended(current2)) {
                  workInProgress2.child = revealOrder;
                  break;
                }
                current2 = revealOrder.sibling;
                revealOrder.sibling = renderLanes2;
                renderLanes2 = revealOrder;
                revealOrder = current2;
              }
              initSuspenseListRenderState(
                workInProgress2,
                true,
                renderLanes2,
                null,
                tailMode,
                newChildren
              );
              break;
            case "together":
              initSuspenseListRenderState(
                workInProgress2,
                false,
                null,
                null,
                void 0,
                newChildren
              );
              break;
            default:
              workInProgress2.memoizedState = null;
          }
          return workInProgress2.child;
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          null !== current2 && (workInProgress2.dependencies = current2.dependencies);
          profilerStartTime = -1;
          workInProgressRootSkippedLanes |= workInProgress2.lanes;
          if (0 === (renderLanes2 & workInProgress2.childLanes))
            if (null !== current2) {
              if (propagateParentContextChanges(
                current2,
                workInProgress2,
                renderLanes2,
                false
              ), 0 === (renderLanes2 & workInProgress2.childLanes))
                return null;
            } else return null;
          if (null !== current2 && workInProgress2.child !== current2.child)
            throw Error("Resuming work not yet implemented.");
          if (null !== workInProgress2.child) {
            current2 = workInProgress2.child;
            renderLanes2 = createWorkInProgress(current2, current2.pendingProps);
            workInProgress2.child = renderLanes2;
            for (renderLanes2.return = workInProgress2; null !== current2.sibling; )
              current2 = current2.sibling, renderLanes2 = renderLanes2.sibling = createWorkInProgress(current2, current2.pendingProps), renderLanes2.return = workInProgress2;
            renderLanes2.sibling = null;
          }
          return workInProgress2.child;
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          if (0 !== (current2.lanes & renderLanes2)) return true;
          current2 = current2.dependencies;
          return null !== current2 && checkIfContextChanged(current2) ? true : false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case 3:
              pushHostContainer(
                workInProgress2,
                workInProgress2.stateNode.containerInfo
              );
              pushProvider(
                workInProgress2,
                CacheContext,
                current2.memoizedState.cache
              );
              resetHydrationState();
              break;
            case 27:
            case 5:
              pushHostContext(workInProgress2);
              break;
            case 4:
              pushHostContainer(
                workInProgress2,
                workInProgress2.stateNode.containerInfo
              );
              break;
            case 10:
              pushProvider(
                workInProgress2,
                workInProgress2.type,
                workInProgress2.memoizedProps.value
              );
              break;
            case 12:
              0 !== (renderLanes2 & workInProgress2.childLanes) && (workInProgress2.flags |= 4);
              workInProgress2.flags |= 2048;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = -0;
              stateNode.passiveEffectDuration = -0;
              break;
            case 31:
              if (null !== workInProgress2.memoizedState)
                return workInProgress2.flags |= 128, pushDehydratedActivitySuspenseHandler(workInProgress2), null;
              break;
            case 13:
              stateNode = workInProgress2.memoizedState;
              if (null !== stateNode) {
                if (null !== stateNode.dehydrated)
                  return pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags |= 128, null;
                if (0 !== (renderLanes2 & workInProgress2.child.childLanes))
                  return updateSuspenseComponent(
                    current2,
                    workInProgress2,
                    renderLanes2
                  );
                pushPrimaryTreeSuspenseHandler(workInProgress2);
                current2 = bailoutOnAlreadyFinishedWork(
                  current2,
                  workInProgress2,
                  renderLanes2
                );
                return null !== current2 ? current2.sibling : null;
              }
              pushPrimaryTreeSuspenseHandler(workInProgress2);
              break;
            case 19:
              var didSuspendBefore = 0 !== (current2.flags & 128);
              stateNode = 0 !== (renderLanes2 & workInProgress2.childLanes);
              stateNode || (propagateParentContextChanges(
                current2,
                workInProgress2,
                renderLanes2,
                false
              ), stateNode = 0 !== (renderLanes2 & workInProgress2.childLanes));
              if (didSuspendBefore) {
                if (stateNode)
                  return updateSuspenseListComponent(
                    current2,
                    workInProgress2,
                    renderLanes2
                  );
                workInProgress2.flags |= 128;
              }
              didSuspendBefore = workInProgress2.memoizedState;
              null !== didSuspendBefore && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
              push(
                suspenseStackCursor,
                suspenseStackCursor.current,
                workInProgress2
              );
              if (stateNode) break;
              else return null;
            case 22:
              return workInProgress2.lanes = 0, updateOffscreenComponent(
                current2,
                workInProgress2,
                renderLanes2,
                workInProgress2.pendingProps
              );
            case 24:
              pushProvider(
                workInProgress2,
                CacheContext,
                current2.memoizedState.cache
              );
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          if (workInProgress2._debugNeedsRemount && null !== current2) {
            renderLanes2 = createFiberFromTypeAndProps(
              workInProgress2.type,
              workInProgress2.key,
              workInProgress2.pendingProps,
              workInProgress2._debugOwner || null,
              workInProgress2.mode,
              workInProgress2.lanes
            );
            renderLanes2._debugStack = workInProgress2._debugStack;
            renderLanes2._debugTask = workInProgress2._debugTask;
            var returnFiber = workInProgress2.return;
            if (null === returnFiber) throw Error("Cannot swap the root fiber.");
            current2.alternate = null;
            workInProgress2.alternate = null;
            renderLanes2.index = workInProgress2.index;
            renderLanes2.sibling = workInProgress2.sibling;
            renderLanes2.return = workInProgress2.return;
            renderLanes2.ref = workInProgress2.ref;
            renderLanes2._debugInfo = workInProgress2._debugInfo;
            if (workInProgress2 === returnFiber.child)
              returnFiber.child = renderLanes2;
            else {
              var prevSibling = returnFiber.child;
              if (null === prevSibling)
                throw Error("Expected parent to have a child.");
              for (; prevSibling.sibling !== workInProgress2; )
                if (prevSibling = prevSibling.sibling, null === prevSibling)
                  throw Error("Expected to find the previous sibling.");
              prevSibling.sibling = renderLanes2;
            }
            workInProgress2 = returnFiber.deletions;
            null === workInProgress2 ? (returnFiber.deletions = [current2], returnFiber.flags |= 16) : workInProgress2.push(current2);
            renderLanes2.flags |= 2;
            return renderLanes2;
          }
          if (null !== current2)
            if (current2.memoizedProps !== workInProgress2.pendingProps || workInProgress2.type !== current2.type)
              didReceiveUpdate = true;
            else {
              if (!checkScheduledUpdateOrContext(current2, renderLanes2) && 0 === (workInProgress2.flags & 128))
                return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(
                  current2,
                  workInProgress2,
                  renderLanes2
                );
              didReceiveUpdate = 0 !== (current2.flags & 131072) ? true : false;
            }
          else {
            didReceiveUpdate = false;
            if (returnFiber = isHydrating)
              warnIfNotHydrating(), returnFiber = 0 !== (workInProgress2.flags & 1048576);
            returnFiber && (returnFiber = workInProgress2.index, warnIfNotHydrating(), pushTreeId(workInProgress2, treeForkCount, returnFiber));
          }
          workInProgress2.lanes = 0;
          switch (workInProgress2.tag) {
            case 16:
              a: if (returnFiber = workInProgress2.pendingProps, current2 = resolveLazy(workInProgress2.elementType), workInProgress2.type = current2, "function" === typeof current2)
                shouldConstruct(current2) ? (returnFiber = resolveClassComponentProps(
                  current2,
                  returnFiber
                ), workInProgress2.tag = 1, workInProgress2.type = current2 = resolveFunctionForHotReloading(current2), workInProgress2 = updateClassComponent(
                  null,
                  workInProgress2,
                  current2,
                  returnFiber,
                  renderLanes2
                )) : (workInProgress2.tag = 0, validateFunctionComponentInDev(workInProgress2, current2), workInProgress2.type = current2 = resolveFunctionForHotReloading(current2), workInProgress2 = updateFunctionComponent(
                  null,
                  workInProgress2,
                  current2,
                  returnFiber,
                  renderLanes2
                ));
              else {
                if (void 0 !== current2 && null !== current2) {
                  if (prevSibling = current2.$$typeof, prevSibling === REACT_FORWARD_REF_TYPE) {
                    workInProgress2.tag = 11;
                    workInProgress2.type = current2 = resolveForwardRefForHotReloading(current2);
                    workInProgress2 = updateForwardRef(
                      null,
                      workInProgress2,
                      current2,
                      returnFiber,
                      renderLanes2
                    );
                    break a;
                  } else if (prevSibling === REACT_MEMO_TYPE) {
                    workInProgress2.tag = 14;
                    workInProgress2 = updateMemoComponent(
                      null,
                      workInProgress2,
                      current2,
                      returnFiber,
                      renderLanes2
                    );
                    break a;
                  }
                }
                workInProgress2 = "";
                null !== current2 && "object" === typeof current2 && current2.$$typeof === REACT_LAZY_TYPE && (workInProgress2 = " Did you wrap a component in React.lazy() more than once?");
                renderLanes2 = getComponentNameFromType(current2) || current2;
                throw Error(
                  "Element type is invalid. Received a promise that resolves to: " + renderLanes2 + ". Lazy element type must resolve to a class or function." + workInProgress2
                );
              }
              return workInProgress2;
            case 0:
              return updateFunctionComponent(
                current2,
                workInProgress2,
                workInProgress2.type,
                workInProgress2.pendingProps,
                renderLanes2
              );
            case 1:
              return returnFiber = workInProgress2.type, prevSibling = resolveClassComponentProps(
                returnFiber,
                workInProgress2.pendingProps
              ), updateClassComponent(
                current2,
                workInProgress2,
                returnFiber,
                prevSibling,
                renderLanes2
              );
            case 3:
              a: {
                pushHostContainer(
                  workInProgress2,
                  workInProgress2.stateNode.containerInfo
                );
                if (null === current2)
                  throw Error(
                    "Should have a current fiber. This is a bug in React."
                  );
                returnFiber = workInProgress2.pendingProps;
                var prevState = workInProgress2.memoizedState;
                prevSibling = prevState.element;
                cloneUpdateQueue(current2, workInProgress2);
                processUpdateQueue(workInProgress2, returnFiber, null, renderLanes2);
                var nextState = workInProgress2.memoizedState;
                returnFiber = nextState.cache;
                pushProvider(workInProgress2, CacheContext, returnFiber);
                returnFiber !== prevState.cache && propagateContextChanges(
                  workInProgress2,
                  [CacheContext],
                  renderLanes2,
                  true
                );
                suspendIfUpdateReadFromEntangledAsyncAction();
                returnFiber = nextState.element;
                if (prevState.isDehydrated)
                  if (prevState = {
                    element: returnFiber,
                    isDehydrated: false,
                    cache: nextState.cache
                  }, workInProgress2.updateQueue.baseState = prevState, workInProgress2.memoizedState = prevState, workInProgress2.flags & 256) {
                    workInProgress2 = mountHostRootWithoutHydrating(
                      current2,
                      workInProgress2,
                      returnFiber,
                      renderLanes2
                    );
                    break a;
                  } else if (returnFiber !== prevSibling) {
                    prevSibling = createCapturedValueAtFiber(
                      Error(
                        "This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."
                      ),
                      workInProgress2
                    );
                    queueHydrationError(prevSibling);
                    workInProgress2 = mountHostRootWithoutHydrating(
                      current2,
                      workInProgress2,
                      returnFiber,
                      renderLanes2
                    );
                    break a;
                  } else {
                    current2 = workInProgress2.stateNode.containerInfo;
                    switch (current2.nodeType) {
                      case 9:
                        current2 = current2.body;
                        break;
                      default:
                        current2 = "HTML" === current2.nodeName ? current2.ownerDocument.body : current2;
                    }
                    nextHydratableInstance = getNextHydratable(current2.firstChild);
                    hydrationParentFiber = workInProgress2;
                    isHydrating = true;
                    hydrationErrors = null;
                    didSuspendOrErrorDEV = false;
                    hydrationDiffRootDEV = null;
                    rootOrSingletonContext = true;
                    renderLanes2 = mountChildFibers(
                      workInProgress2,
                      null,
                      returnFiber,
                      renderLanes2
                    );
                    for (workInProgress2.child = renderLanes2; renderLanes2; )
                      renderLanes2.flags = renderLanes2.flags & -3 | 4096, renderLanes2 = renderLanes2.sibling;
                  }
                else {
                  resetHydrationState();
                  if (returnFiber === prevSibling) {
                    workInProgress2 = bailoutOnAlreadyFinishedWork(
                      current2,
                      workInProgress2,
                      renderLanes2
                    );
                    break a;
                  }
                  reconcileChildren(
                    current2,
                    workInProgress2,
                    returnFiber,
                    renderLanes2
                  );
                }
                workInProgress2 = workInProgress2.child;
              }
              return workInProgress2;
            case 26:
              return markRef(current2, workInProgress2), null === current2 ? (renderLanes2 = getResource(
                workInProgress2.type,
                null,
                workInProgress2.pendingProps,
                null
              )) ? workInProgress2.memoizedState = renderLanes2 : isHydrating || (renderLanes2 = workInProgress2.type, current2 = workInProgress2.pendingProps, returnFiber = requiredContext(
                rootInstanceStackCursor.current
              ), returnFiber = getOwnerDocumentFromRootContainer(
                returnFiber
              ).createElement(renderLanes2), returnFiber[internalInstanceKey] = workInProgress2, returnFiber[internalPropsKey] = current2, setInitialProperties(returnFiber, renderLanes2, current2), markNodeAsHoistable(returnFiber), workInProgress2.stateNode = returnFiber) : workInProgress2.memoizedState = getResource(
                workInProgress2.type,
                current2.memoizedProps,
                workInProgress2.pendingProps,
                current2.memoizedState
              ), null;
            case 27:
              return pushHostContext(workInProgress2), null === current2 && isHydrating && (returnFiber = requiredContext(rootInstanceStackCursor.current), prevSibling = getHostContext(), returnFiber = workInProgress2.stateNode = resolveSingletonInstance(
                workInProgress2.type,
                workInProgress2.pendingProps,
                returnFiber,
                prevSibling,
                false
              ), didSuspendOrErrorDEV || (prevSibling = diffHydratedProperties(
                returnFiber,
                workInProgress2.type,
                workInProgress2.pendingProps,
                prevSibling
              ), null !== prevSibling && (buildHydrationDiffNode(workInProgress2, 0).serverProps = prevSibling)), hydrationParentFiber = workInProgress2, rootOrSingletonContext = true, prevSibling = nextHydratableInstance, isSingletonScope(workInProgress2.type) ? (previousHydratableOnEnteringScopedSingleton = prevSibling, nextHydratableInstance = getNextHydratable(
                returnFiber.firstChild
              )) : nextHydratableInstance = prevSibling), reconcileChildren(
                current2,
                workInProgress2,
                workInProgress2.pendingProps.children,
                renderLanes2
              ), markRef(current2, workInProgress2), null === current2 && (workInProgress2.flags |= 4194304), workInProgress2.child;
            case 5:
              return null === current2 && isHydrating && (prevState = getHostContext(), returnFiber = validateDOMNesting(
                workInProgress2.type,
                prevState.ancestorInfo
              ), prevSibling = nextHydratableInstance, (nextState = !prevSibling) || (nextState = canHydrateInstance(
                prevSibling,
                workInProgress2.type,
                workInProgress2.pendingProps,
                rootOrSingletonContext
              ), null !== nextState ? (workInProgress2.stateNode = nextState, didSuspendOrErrorDEV || (prevState = diffHydratedProperties(
                nextState,
                workInProgress2.type,
                workInProgress2.pendingProps,
                prevState
              ), null !== prevState && (buildHydrationDiffNode(workInProgress2, 0).serverProps = prevState)), hydrationParentFiber = workInProgress2, nextHydratableInstance = getNextHydratable(
                nextState.firstChild
              ), rootOrSingletonContext = false, prevState = true) : prevState = false, nextState = !prevState), nextState && (returnFiber && warnNonHydratedInstance(workInProgress2, prevSibling), throwOnHydrationMismatch(workInProgress2))), pushHostContext(workInProgress2), prevSibling = workInProgress2.type, prevState = workInProgress2.pendingProps, nextState = null !== current2 ? current2.memoizedProps : null, returnFiber = prevState.children, shouldSetTextContent(prevSibling, prevState) ? returnFiber = null : null !== nextState && shouldSetTextContent(prevSibling, nextState) && (workInProgress2.flags |= 32), null !== workInProgress2.memoizedState && (prevSibling = renderWithHooks(
                current2,
                workInProgress2,
                TransitionAwareHostComponent,
                null,
                null,
                renderLanes2
              ), HostTransitionContext._currentValue = prevSibling), markRef(current2, workInProgress2), reconcileChildren(
                current2,
                workInProgress2,
                returnFiber,
                renderLanes2
              ), workInProgress2.child;
            case 6:
              return null === current2 && isHydrating && (renderLanes2 = workInProgress2.pendingProps, current2 = getHostContext(), returnFiber = current2.ancestorInfo.current, renderLanes2 = null != returnFiber ? validateTextNesting(
                renderLanes2,
                returnFiber.tag,
                current2.ancestorInfo.implicitRootScope
              ) : true, current2 = nextHydratableInstance, (returnFiber = !current2) || (returnFiber = canHydrateTextInstance(
                current2,
                workInProgress2.pendingProps,
                rootOrSingletonContext
              ), null !== returnFiber ? (workInProgress2.stateNode = returnFiber, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, returnFiber = true) : returnFiber = false, returnFiber = !returnFiber), returnFiber && (renderLanes2 && warnNonHydratedInstance(workInProgress2, current2), throwOnHydrationMismatch(workInProgress2))), null;
            case 13:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case 4:
              return pushHostContainer(
                workInProgress2,
                workInProgress2.stateNode.containerInfo
              ), returnFiber = workInProgress2.pendingProps, null === current2 ? workInProgress2.child = reconcileChildFibers(
                workInProgress2,
                null,
                returnFiber,
                renderLanes2
              ) : reconcileChildren(
                current2,
                workInProgress2,
                returnFiber,
                renderLanes2
              ), workInProgress2.child;
            case 11:
              return updateForwardRef(
                current2,
                workInProgress2,
                workInProgress2.type,
                workInProgress2.pendingProps,
                renderLanes2
              );
            case 7:
              return reconcileChildren(
                current2,
                workInProgress2,
                workInProgress2.pendingProps,
                renderLanes2
              ), workInProgress2.child;
            case 8:
              return reconcileChildren(
                current2,
                workInProgress2,
                workInProgress2.pendingProps.children,
                renderLanes2
              ), workInProgress2.child;
            case 12:
              return workInProgress2.flags |= 4, workInProgress2.flags |= 2048, returnFiber = workInProgress2.stateNode, returnFiber.effectDuration = -0, returnFiber.passiveEffectDuration = -0, reconcileChildren(
                current2,
                workInProgress2,
                workInProgress2.pendingProps.children,
                renderLanes2
              ), workInProgress2.child;
            case 10:
              return returnFiber = workInProgress2.type, prevSibling = workInProgress2.pendingProps, prevState = prevSibling.value, "value" in prevSibling || hasWarnedAboutUsingNoValuePropOnContextProvider || (hasWarnedAboutUsingNoValuePropOnContextProvider = true, console.error(
                "The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"
              )), pushProvider(workInProgress2, returnFiber, prevState), reconcileChildren(
                current2,
                workInProgress2,
                prevSibling.children,
                renderLanes2
              ), workInProgress2.child;
            case 9:
              return prevSibling = workInProgress2.type._context, returnFiber = workInProgress2.pendingProps.children, "function" !== typeof returnFiber && console.error(
                "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."
              ), prepareToReadContext(workInProgress2), prevSibling = readContext(prevSibling), returnFiber = callComponentInDEV(
                returnFiber,
                prevSibling,
                void 0
              ), workInProgress2.flags |= 1, reconcileChildren(
                current2,
                workInProgress2,
                returnFiber,
                renderLanes2
              ), workInProgress2.child;
            case 14:
              return updateMemoComponent(
                current2,
                workInProgress2,
                workInProgress2.type,
                workInProgress2.pendingProps,
                renderLanes2
              );
            case 15:
              return updateSimpleMemoComponent(
                current2,
                workInProgress2,
                workInProgress2.type,
                workInProgress2.pendingProps,
                renderLanes2
              );
            case 19:
              return updateSuspenseListComponent(
                current2,
                workInProgress2,
                renderLanes2
              );
            case 31:
              return updateActivityComponent(current2, workInProgress2, renderLanes2);
            case 22:
              return updateOffscreenComponent(
                current2,
                workInProgress2,
                renderLanes2,
                workInProgress2.pendingProps
              );
            case 24:
              return prepareToReadContext(workInProgress2), returnFiber = readContext(CacheContext), null === current2 ? (prevSibling = peekCacheFromPool(), null === prevSibling && (prevSibling = workInProgressRoot, prevState = createCache(), prevSibling.pooledCache = prevState, retainCache(prevState), null !== prevState && (prevSibling.pooledCacheLanes |= renderLanes2), prevSibling = prevState), workInProgress2.memoizedState = {
                parent: returnFiber,
                cache: prevSibling
              }, initializeUpdateQueue(workInProgress2), pushProvider(workInProgress2, CacheContext, prevSibling)) : (0 !== (current2.lanes & renderLanes2) && (cloneUpdateQueue(current2, workInProgress2), processUpdateQueue(workInProgress2, null, null, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction()), prevSibling = current2.memoizedState, prevState = workInProgress2.memoizedState, prevSibling.parent !== returnFiber ? (prevSibling = {
                parent: returnFiber,
                cache: returnFiber
              }, workInProgress2.memoizedState = prevSibling, 0 === workInProgress2.lanes && (workInProgress2.memoizedState = workInProgress2.updateQueue.baseState = prevSibling), pushProvider(workInProgress2, CacheContext, returnFiber)) : (returnFiber = prevState.cache, pushProvider(workInProgress2, CacheContext, returnFiber), returnFiber !== prevSibling.cache && propagateContextChanges(
                workInProgress2,
                [CacheContext],
                renderLanes2,
                true
              ))), reconcileChildren(
                current2,
                workInProgress2,
                workInProgress2.pendingProps.children,
                renderLanes2
              ), workInProgress2.child;
            case 29:
              throw workInProgress2.pendingProps;
          }
          throw Error(
            "Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue."
          );
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= 4;
        }
        function preloadInstanceAndSuspendIfNeeded(workInProgress2, type, oldProps, newProps, renderLanes2) {
          if (type = (workInProgress2.mode & SuspenseyImagesMode) !== NoMode)
            type = false;
          if (type) {
            if (workInProgress2.flags |= 16777216, (renderLanes2 & 335544128) === renderLanes2)
              if (workInProgress2.stateNode.complete) workInProgress2.flags |= 8192;
              else if (shouldRemainOnPreviousScreen()) workInProgress2.flags |= 8192;
              else
                throw suspendedThenable = noopSuspenseyCommitThenable, SuspenseyCommitException;
          } else workInProgress2.flags &= -16777217;
        }
        function preloadResourceAndSuspendIfNeeded(workInProgress2, resource) {
          if ("stylesheet" !== resource.type || (resource.state.loading & Inserted) !== NotLoaded)
            workInProgress2.flags &= -16777217;
          else if (workInProgress2.flags |= 16777216, !preloadResource(resource))
            if (shouldRemainOnPreviousScreen()) workInProgress2.flags |= 8192;
            else
              throw suspendedThenable = noopSuspenseyCommitThenable, SuspenseyCommitException;
        }
        function scheduleRetryEffect(workInProgress2, retryQueue) {
          null !== retryQueue && (workInProgress2.flags |= 4);
          workInProgress2.flags & 16384 && (retryQueue = 22 !== workInProgress2.tag ? claimNextRetryLane() : 536870912, workInProgress2.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (!isHydrating)
            switch (renderState.tailMode) {
              case "hidden":
                hasRenderedATailFallback = renderState.tail;
                for (var lastTailNode = null; null !== hasRenderedATailFallback; )
                  null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
                null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
                break;
              case "collapsed":
                lastTailNode = renderState.tail;
                for (var _lastTailNode = null; null !== lastTailNode; )
                  null !== lastTailNode.alternate && (_lastTailNode = lastTailNode), lastTailNode = lastTailNode.sibling;
                null === _lastTailNode ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : _lastTailNode.sibling = null;
            }
        }
        function bubbleProperties(completedWork) {
          var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
          if (didBailout)
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              for (var _treeBaseDuration = completedWork.selfBaseDuration, _child2 = completedWork.child; null !== _child2; )
                newChildLanes |= _child2.lanes | _child2.childLanes, subtreeFlags |= _child2.subtreeFlags & 65011712, subtreeFlags |= _child2.flags & 65011712, _treeBaseDuration += _child2.treeBaseDuration, _child2 = _child2.sibling;
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else
              for (_treeBaseDuration = completedWork.child; null !== _treeBaseDuration; )
                newChildLanes |= _treeBaseDuration.lanes | _treeBaseDuration.childLanes, subtreeFlags |= _treeBaseDuration.subtreeFlags & 65011712, subtreeFlags |= _treeBaseDuration.flags & 65011712, _treeBaseDuration.return = completedWork, _treeBaseDuration = _treeBaseDuration.sibling;
          else if ((completedWork.mode & ProfileMode) !== NoMode) {
            _treeBaseDuration = completedWork.actualDuration;
            _child2 = completedWork.selfBaseDuration;
            for (var child = completedWork.child; null !== child; )
              newChildLanes |= child.lanes | child.childLanes, subtreeFlags |= child.subtreeFlags, subtreeFlags |= child.flags, _treeBaseDuration += child.actualDuration, _child2 += child.treeBaseDuration, child = child.sibling;
            completedWork.actualDuration = _treeBaseDuration;
            completedWork.treeBaseDuration = _child2;
          } else
            for (_treeBaseDuration = completedWork.child; null !== _treeBaseDuration; )
              newChildLanes |= _treeBaseDuration.lanes | _treeBaseDuration.childLanes, subtreeFlags |= _treeBaseDuration.subtreeFlags, subtreeFlags |= _treeBaseDuration.flags, _treeBaseDuration.return = completedWork, _treeBaseDuration = _treeBaseDuration.sibling;
          completedWork.subtreeFlags |= subtreeFlags;
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case 16:
            case 15:
            case 0:
            case 11:
            case 7:
            case 8:
            case 12:
            case 9:
            case 14:
              return bubbleProperties(workInProgress2), null;
            case 1:
              return bubbleProperties(workInProgress2), null;
            case 3:
              renderLanes2 = workInProgress2.stateNode;
              newProps = null;
              null !== current2 && (newProps = current2.memoizedState.cache);
              workInProgress2.memoizedState.cache !== newProps && (workInProgress2.flags |= 2048);
              popProvider(CacheContext, workInProgress2);
              popHostContainer(workInProgress2);
              renderLanes2.pendingContext && (renderLanes2.context = renderLanes2.pendingContext, renderLanes2.pendingContext = null);
              if (null === current2 || null === current2.child)
                popHydrationState(workInProgress2) ? (emitPendingHydrationWarnings(), markUpdate(workInProgress2)) : null === current2 || current2.memoizedState.isDehydrated && 0 === (workInProgress2.flags & 256) || (workInProgress2.flags |= 1024, upgradeHydrationErrorsToRecoverable());
              bubbleProperties(workInProgress2);
              return null;
            case 26:
              var type = workInProgress2.type, nextResource = workInProgress2.memoizedState;
              null === current2 ? (markUpdate(workInProgress2), null !== nextResource ? (bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(
                workInProgress2,
                nextResource
              )) : (bubbleProperties(workInProgress2), preloadInstanceAndSuspendIfNeeded(
                workInProgress2,
                type,
                null,
                newProps,
                renderLanes2
              ))) : nextResource ? nextResource !== current2.memoizedState ? (markUpdate(workInProgress2), bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(
                workInProgress2,
                nextResource
              )) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217) : (current2 = current2.memoizedProps, current2 !== newProps && markUpdate(workInProgress2), bubbleProperties(workInProgress2), preloadInstanceAndSuspendIfNeeded(
                workInProgress2,
                type,
                current2,
                newProps,
                renderLanes2
              ));
              return null;
            case 27:
              popHostContext(workInProgress2);
              renderLanes2 = requiredContext(rootInstanceStackCursor.current);
              type = workInProgress2.type;
              if (null !== current2 && null != workInProgress2.stateNode)
                current2.memoizedProps !== newProps && markUpdate(workInProgress2);
              else {
                if (!newProps) {
                  if (null === workInProgress2.stateNode)
                    throw Error(
                      "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                    );
                  bubbleProperties(workInProgress2);
                  return null;
                }
                current2 = getHostContext();
                popHydrationState(workInProgress2) ? prepareToHydrateHostInstance(workInProgress2, current2) : (current2 = resolveSingletonInstance(
                  type,
                  newProps,
                  renderLanes2,
                  current2,
                  true
                ), workInProgress2.stateNode = current2, markUpdate(workInProgress2));
              }
              bubbleProperties(workInProgress2);
              return null;
            case 5:
              popHostContext(workInProgress2);
              type = workInProgress2.type;
              if (null !== current2 && null != workInProgress2.stateNode)
                current2.memoizedProps !== newProps && markUpdate(workInProgress2);
              else {
                if (!newProps) {
                  if (null === workInProgress2.stateNode)
                    throw Error(
                      "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                    );
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var _currentHostContext = getHostContext();
                if (popHydrationState(workInProgress2))
                  prepareToHydrateHostInstance(workInProgress2, _currentHostContext);
                else {
                  nextResource = requiredContext(rootInstanceStackCursor.current);
                  validateDOMNesting(type, _currentHostContext.ancestorInfo);
                  _currentHostContext = _currentHostContext.context;
                  nextResource = getOwnerDocumentFromRootContainer(nextResource);
                  switch (_currentHostContext) {
                    case HostContextNamespaceSvg:
                      nextResource = nextResource.createElementNS(
                        SVG_NAMESPACE,
                        type
                      );
                      break;
                    case HostContextNamespaceMath:
                      nextResource = nextResource.createElementNS(
                        MATH_NAMESPACE,
                        type
                      );
                      break;
                    default:
                      switch (type) {
                        case "svg":
                          nextResource = nextResource.createElementNS(
                            SVG_NAMESPACE,
                            type
                          );
                          break;
                        case "math":
                          nextResource = nextResource.createElementNS(
                            MATH_NAMESPACE,
                            type
                          );
                          break;
                        case "script":
                          nextResource = nextResource.createElement("div");
                          nextResource.innerHTML = "<script><\/script>";
                          nextResource = nextResource.removeChild(
                            nextResource.firstChild
                          );
                          break;
                        case "select":
                          nextResource = "string" === typeof newProps.is ? nextResource.createElement("select", {
                            is: newProps.is
                          }) : nextResource.createElement("select");
                          newProps.multiple ? nextResource.multiple = true : newProps.size && (nextResource.size = newProps.size);
                          break;
                        default:
                          nextResource = "string" === typeof newProps.is ? nextResource.createElement(type, {
                            is: newProps.is
                          }) : nextResource.createElement(type), -1 === type.indexOf("-") && (type !== type.toLowerCase() && console.error(
                            "<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",
                            type
                          ), "[object HTMLUnknownElement]" !== Object.prototype.toString.call(nextResource) || hasOwnProperty.call(warnedUnknownTags, type) || (warnedUnknownTags[type] = true, console.error(
                            "The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",
                            type
                          )));
                      }
                  }
                  nextResource[internalInstanceKey] = workInProgress2;
                  nextResource[internalPropsKey] = newProps;
                  a: for (_currentHostContext = workInProgress2.child; null !== _currentHostContext; ) {
                    if (5 === _currentHostContext.tag || 6 === _currentHostContext.tag)
                      nextResource.appendChild(_currentHostContext.stateNode);
                    else if (4 !== _currentHostContext.tag && 27 !== _currentHostContext.tag && null !== _currentHostContext.child) {
                      _currentHostContext.child.return = _currentHostContext;
                      _currentHostContext = _currentHostContext.child;
                      continue;
                    }
                    if (_currentHostContext === workInProgress2) break a;
                    for (; null === _currentHostContext.sibling; ) {
                      if (null === _currentHostContext.return || _currentHostContext.return === workInProgress2)
                        break a;
                      _currentHostContext = _currentHostContext.return;
                    }
                    _currentHostContext.sibling.return = _currentHostContext.return;
                    _currentHostContext = _currentHostContext.sibling;
                  }
                  workInProgress2.stateNode = nextResource;
                  a: switch (setInitialProperties(nextResource, type, newProps), type) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      newProps = !!newProps.autoFocus;
                      break a;
                    case "img":
                      newProps = true;
                      break a;
                    default:
                      newProps = false;
                  }
                  newProps && markUpdate(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              preloadInstanceAndSuspendIfNeeded(
                workInProgress2,
                workInProgress2.type,
                null === current2 ? null : current2.memoizedProps,
                workInProgress2.pendingProps,
                renderLanes2
              );
              return null;
            case 6:
              if (current2 && null != workInProgress2.stateNode)
                current2.memoizedProps !== newProps && markUpdate(workInProgress2);
              else {
                if ("string" !== typeof newProps && null === workInProgress2.stateNode)
                  throw Error(
                    "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                  );
                current2 = requiredContext(rootInstanceStackCursor.current);
                renderLanes2 = getHostContext();
                if (popHydrationState(workInProgress2)) {
                  current2 = workInProgress2.stateNode;
                  renderLanes2 = workInProgress2.memoizedProps;
                  type = !didSuspendOrErrorDEV;
                  newProps = null;
                  nextResource = hydrationParentFiber;
                  if (null !== nextResource)
                    switch (nextResource.tag) {
                      case 3:
                        type && (type = diffHydratedTextForDevWarnings(
                          current2,
                          renderLanes2,
                          newProps
                        ), null !== type && (buildHydrationDiffNode(workInProgress2, 0).serverProps = type));
                        break;
                      case 27:
                      case 5:
                        newProps = nextResource.memoizedProps, type && (type = diffHydratedTextForDevWarnings(
                          current2,
                          renderLanes2,
                          newProps
                        ), null !== type && (buildHydrationDiffNode(
                          workInProgress2,
                          0
                        ).serverProps = type));
                    }
                  current2[internalInstanceKey] = workInProgress2;
                  current2 = current2.nodeValue === renderLanes2 || null !== newProps && true === newProps.suppressHydrationWarning || checkForUnmatchedText(current2.nodeValue, renderLanes2) ? true : false;
                  current2 || throwOnHydrationMismatch(workInProgress2, true);
                } else
                  type = renderLanes2.ancestorInfo.current, null != type && validateTextNesting(
                    newProps,
                    type.tag,
                    renderLanes2.ancestorInfo.implicitRootScope
                  ), current2 = getOwnerDocumentFromRootContainer(current2).createTextNode(
                    newProps
                  ), current2[internalInstanceKey] = workInProgress2, workInProgress2.stateNode = current2;
              }
              bubbleProperties(workInProgress2);
              return null;
            case 31:
              renderLanes2 = workInProgress2.memoizedState;
              if (null === current2 || null !== current2.memoizedState) {
                newProps = popHydrationState(workInProgress2);
                if (null !== renderLanes2) {
                  if (null === current2) {
                    if (!newProps)
                      throw Error(
                        "A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React."
                      );
                    current2 = workInProgress2.memoizedState;
                    current2 = null !== current2 ? current2.dehydrated : null;
                    if (!current2)
                      throw Error(
                        "Expected to have a hydrated activity instance. This error is likely caused by a bug in React. Please file an issue."
                      );
                    current2[internalInstanceKey] = workInProgress2;
                    bubbleProperties(workInProgress2);
                    (workInProgress2.mode & ProfileMode) !== NoMode && null !== renderLanes2 && (current2 = workInProgress2.child, null !== current2 && (workInProgress2.treeBaseDuration -= current2.treeBaseDuration));
                  } else
                    emitPendingHydrationWarnings(), resetHydrationState(), 0 === (workInProgress2.flags & 128) && (renderLanes2 = workInProgress2.memoizedState = null), workInProgress2.flags |= 4, bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode && null !== renderLanes2 && (current2 = workInProgress2.child, null !== current2 && (workInProgress2.treeBaseDuration -= current2.treeBaseDuration));
                  current2 = false;
                } else
                  renderLanes2 = upgradeHydrationErrorsToRecoverable(), null !== current2 && null !== current2.memoizedState && (current2.memoizedState.hydrationErrors = renderLanes2), current2 = true;
                if (!current2) {
                  if (workInProgress2.flags & 256)
                    return popSuspenseHandler(workInProgress2), workInProgress2;
                  popSuspenseHandler(workInProgress2);
                  return null;
                }
                if (0 !== (workInProgress2.flags & 128))
                  throw Error(
                    "Client rendering an Activity suspended it again. This is a bug in React."
                  );
              }
              bubbleProperties(workInProgress2);
              return null;
            case 13:
              newProps = workInProgress2.memoizedState;
              if (null === current2 || null !== current2.memoizedState && null !== current2.memoizedState.dehydrated) {
                type = newProps;
                nextResource = popHydrationState(workInProgress2);
                if (null !== type && null !== type.dehydrated) {
                  if (null === current2) {
                    if (!nextResource)
                      throw Error(
                        "A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React."
                      );
                    nextResource = workInProgress2.memoizedState;
                    nextResource = null !== nextResource ? nextResource.dehydrated : null;
                    if (!nextResource)
                      throw Error(
                        "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
                      );
                    nextResource[internalInstanceKey] = workInProgress2;
                    bubbleProperties(workInProgress2);
                    (workInProgress2.mode & ProfileMode) !== NoMode && null !== type && (type = workInProgress2.child, null !== type && (workInProgress2.treeBaseDuration -= type.treeBaseDuration));
                  } else
                    emitPendingHydrationWarnings(), resetHydrationState(), 0 === (workInProgress2.flags & 128) && (type = workInProgress2.memoizedState = null), workInProgress2.flags |= 4, bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode && null !== type && (type = workInProgress2.child, null !== type && (workInProgress2.treeBaseDuration -= type.treeBaseDuration));
                  type = false;
                } else
                  type = upgradeHydrationErrorsToRecoverable(), null !== current2 && null !== current2.memoizedState && (current2.memoizedState.hydrationErrors = type), type = true;
                if (!type) {
                  if (workInProgress2.flags & 256)
                    return popSuspenseHandler(workInProgress2), workInProgress2;
                  popSuspenseHandler(workInProgress2);
                  return null;
                }
              }
              popSuspenseHandler(workInProgress2);
              if (0 !== (workInProgress2.flags & 128))
                return workInProgress2.lanes = renderLanes2, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2;
              renderLanes2 = null !== newProps;
              current2 = null !== current2 && null !== current2.memoizedState;
              renderLanes2 && (newProps = workInProgress2.child, type = null, null !== newProps.alternate && null !== newProps.alternate.memoizedState && null !== newProps.alternate.memoizedState.cachePool && (type = newProps.alternate.memoizedState.cachePool.pool), nextResource = null, null !== newProps.memoizedState && null !== newProps.memoizedState.cachePool && (nextResource = newProps.memoizedState.cachePool.pool), nextResource !== type && (newProps.flags |= 2048));
              renderLanes2 !== current2 && renderLanes2 && (workInProgress2.child.flags |= 8192);
              scheduleRetryEffect(workInProgress2, workInProgress2.updateQueue);
              bubbleProperties(workInProgress2);
              (workInProgress2.mode & ProfileMode) !== NoMode && renderLanes2 && (current2 = workInProgress2.child, null !== current2 && (workInProgress2.treeBaseDuration -= current2.treeBaseDuration));
              return null;
            case 4:
              return popHostContainer(workInProgress2), null === current2 && listenToAllSupportedEvents(
                workInProgress2.stateNode.containerInfo
              ), bubbleProperties(workInProgress2), null;
            case 10:
              return popProvider(workInProgress2.type, workInProgress2), bubbleProperties(workInProgress2), null;
            case 19:
              pop(suspenseStackCursor, workInProgress2);
              newProps = workInProgress2.memoizedState;
              if (null === newProps) return bubbleProperties(workInProgress2), null;
              type = 0 !== (workInProgress2.flags & 128);
              nextResource = newProps.rendering;
              if (null === nextResource)
                if (type) cutOffTailIfNeeded(newProps, false);
                else {
                  if (workInProgressRootExitStatus !== RootInProgress || null !== current2 && 0 !== (current2.flags & 128))
                    for (current2 = workInProgress2.child; null !== current2; ) {
                      nextResource = findFirstSuspended(current2);
                      if (null !== nextResource) {
                        workInProgress2.flags |= 128;
                        cutOffTailIfNeeded(newProps, false);
                        current2 = nextResource.updateQueue;
                        workInProgress2.updateQueue = current2;
                        scheduleRetryEffect(workInProgress2, current2);
                        workInProgress2.subtreeFlags = 0;
                        current2 = renderLanes2;
                        for (renderLanes2 = workInProgress2.child; null !== renderLanes2; )
                          resetWorkInProgress(renderLanes2, current2), renderLanes2 = renderLanes2.sibling;
                        push(
                          suspenseStackCursor,
                          suspenseStackCursor.current & SubtreeSuspenseContextMask | ForceSuspenseFallback,
                          workInProgress2
                        );
                        isHydrating && pushTreeFork(workInProgress2, newProps.treeForkCount);
                        return workInProgress2.child;
                      }
                      current2 = current2.sibling;
                    }
                  null !== newProps.tail && now$1() > workInProgressRootRenderTargetTime && (workInProgress2.flags |= 128, type = true, cutOffTailIfNeeded(newProps, false), workInProgress2.lanes = 4194304);
                }
              else {
                if (!type)
                  if (current2 = findFirstSuspended(nextResource), null !== current2) {
                    if (workInProgress2.flags |= 128, type = true, current2 = current2.updateQueue, workInProgress2.updateQueue = current2, scheduleRetryEffect(workInProgress2, current2), cutOffTailIfNeeded(newProps, true), null === newProps.tail && "hidden" === newProps.tailMode && !nextResource.alternate && !isHydrating)
                      return bubbleProperties(workInProgress2), null;
                  } else
                    2 * now$1() - newProps.renderingStartTime > workInProgressRootRenderTargetTime && 536870912 !== renderLanes2 && (workInProgress2.flags |= 128, type = true, cutOffTailIfNeeded(newProps, false), workInProgress2.lanes = 4194304);
                newProps.isBackwards ? (nextResource.sibling = workInProgress2.child, workInProgress2.child = nextResource) : (current2 = newProps.last, null !== current2 ? current2.sibling = nextResource : workInProgress2.child = nextResource, newProps.last = nextResource);
              }
              if (null !== newProps.tail)
                return current2 = newProps.tail, newProps.rendering = current2, newProps.tail = current2.sibling, newProps.renderingStartTime = now$1(), current2.sibling = null, renderLanes2 = suspenseStackCursor.current, renderLanes2 = type ? renderLanes2 & SubtreeSuspenseContextMask | ForceSuspenseFallback : renderLanes2 & SubtreeSuspenseContextMask, push(suspenseStackCursor, renderLanes2, workInProgress2), isHydrating && pushTreeFork(workInProgress2, newProps.treeForkCount), current2;
              bubbleProperties(workInProgress2);
              return null;
            case 22:
            case 23:
              return popSuspenseHandler(workInProgress2), popHiddenContext(workInProgress2), newProps = null !== workInProgress2.memoizedState, null !== current2 ? null !== current2.memoizedState !== newProps && (workInProgress2.flags |= 8192) : newProps && (workInProgress2.flags |= 8192), newProps ? 0 !== (renderLanes2 & 536870912) && 0 === (workInProgress2.flags & 128) && (bubbleProperties(workInProgress2), workInProgress2.subtreeFlags & 6 && (workInProgress2.flags |= 8192)) : bubbleProperties(workInProgress2), renderLanes2 = workInProgress2.updateQueue, null !== renderLanes2 && scheduleRetryEffect(workInProgress2, renderLanes2.retryQueue), renderLanes2 = null, null !== current2 && null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (renderLanes2 = current2.memoizedState.cachePool.pool), newProps = null, null !== workInProgress2.memoizedState && null !== workInProgress2.memoizedState.cachePool && (newProps = workInProgress2.memoizedState.cachePool.pool), newProps !== renderLanes2 && (workInProgress2.flags |= 2048), null !== current2 && pop(resumedCache, workInProgress2), null;
            case 24:
              return renderLanes2 = null, null !== current2 && (renderLanes2 = current2.memoizedState.cache), workInProgress2.memoizedState.cache !== renderLanes2 && (workInProgress2.flags |= 2048), popProvider(CacheContext, workInProgress2), bubbleProperties(workInProgress2), null;
            case 25:
              return null;
            case 30:
              return null;
          }
          throw Error(
            "Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue."
          );
        }
        function unwindWork(current2, workInProgress2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case 1:
              return current2 = workInProgress2.flags, current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
            case 3:
              return popProvider(CacheContext, workInProgress2), popHostContainer(workInProgress2), current2 = workInProgress2.flags, 0 !== (current2 & 65536) && 0 === (current2 & 128) ? (workInProgress2.flags = current2 & -65537 | 128, workInProgress2) : null;
            case 26:
            case 27:
            case 5:
              return popHostContext(workInProgress2), null;
            case 31:
              if (null !== workInProgress2.memoizedState) {
                popSuspenseHandler(workInProgress2);
                if (null === workInProgress2.alternate)
                  throw Error(
                    "Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue."
                  );
                resetHydrationState();
              }
              current2 = workInProgress2.flags;
              return current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
            case 13:
              popSuspenseHandler(workInProgress2);
              current2 = workInProgress2.memoizedState;
              if (null !== current2 && null !== current2.dehydrated) {
                if (null === workInProgress2.alternate)
                  throw Error(
                    "Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue."
                  );
                resetHydrationState();
              }
              current2 = workInProgress2.flags;
              return current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
            case 19:
              return pop(suspenseStackCursor, workInProgress2), null;
            case 4:
              return popHostContainer(workInProgress2), null;
            case 10:
              return popProvider(workInProgress2.type, workInProgress2), null;
            case 22:
            case 23:
              return popSuspenseHandler(workInProgress2), popHiddenContext(workInProgress2), null !== current2 && pop(resumedCache, workInProgress2), current2 = workInProgress2.flags, current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
            case 24:
              return popProvider(CacheContext, workInProgress2), null;
            case 25:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case 3:
              popProvider(CacheContext, interruptedWork);
              popHostContainer(interruptedWork);
              break;
            case 26:
            case 27:
            case 5:
              popHostContext(interruptedWork);
              break;
            case 4:
              popHostContainer(interruptedWork);
              break;
            case 31:
              null !== interruptedWork.memoizedState && popSuspenseHandler(interruptedWork);
              break;
            case 13:
              popSuspenseHandler(interruptedWork);
              break;
            case 19:
              pop(suspenseStackCursor, interruptedWork);
              break;
            case 10:
              popProvider(interruptedWork.type, interruptedWork);
              break;
            case 22:
            case 23:
              popSuspenseHandler(interruptedWork);
              popHiddenContext(interruptedWork);
              null !== current2 && pop(resumedCache, interruptedWork);
              break;
            case 24:
              popProvider(CacheContext, interruptedWork);
          }
        }
        function shouldProfile(current2) {
          return (current2.mode & ProfileMode) !== NoMode;
        }
        function commitHookLayoutEffects(finishedWork, hookFlags) {
          shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListMount(hookFlags, finishedWork), recordEffectDuration()) : commitHookEffectListMount(hookFlags, finishedWork);
        }
        function commitHookLayoutUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {
          shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListUnmount(
            hookFlags,
            finishedWork,
            nearestMountedAncestor
          ), recordEffectDuration()) : commitHookEffectListUnmount(
            hookFlags,
            finishedWork,
            nearestMountedAncestor
          );
        }
        function commitHookEffectListMount(flags, finishedWork) {
          try {
            var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
            if (null !== lastEffect) {
              var firstEffect = lastEffect.next;
              updateQueue = firstEffect;
              do {
                if ((updateQueue.tag & flags) === flags && (lastEffect = void 0, (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = true), lastEffect = runWithFiberInDEV(
                  finishedWork,
                  callCreateInDEV,
                  updateQueue
                ), (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = false), void 0 !== lastEffect && "function" !== typeof lastEffect)) {
                  var hookName = void 0;
                  hookName = 0 !== (updateQueue.tag & Layout) ? "useLayoutEffect" : 0 !== (updateQueue.tag & Insertion) ? "useInsertionEffect" : "useEffect";
                  var addendum = void 0;
                  addendum = null === lastEffect ? " You returned null. If your effect does not require clean up, return undefined (or nothing)." : "function" === typeof lastEffect.then ? "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching" : " You returned: " + lastEffect;
                  runWithFiberInDEV(
                    finishedWork,
                    function(n, a) {
                      console.error(
                        "%s must not return anything besides a function, which is used for clean-up.%s",
                        n,
                        a
                      );
                    },
                    hookName,
                    addendum
                  );
                }
                updateQueue = updateQueue.next;
              } while (updateQueue !== firstEffect);
            }
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          try {
            var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
            if (null !== lastEffect) {
              var firstEffect = lastEffect.next;
              updateQueue = firstEffect;
              do {
                if ((updateQueue.tag & flags) === flags) {
                  var inst = updateQueue.inst, destroy = inst.destroy;
                  void 0 !== destroy && (inst.destroy = void 0, (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = true), lastEffect = finishedWork, runWithFiberInDEV(
                    lastEffect,
                    callDestroyInDEV,
                    lastEffect,
                    nearestMountedAncestor,
                    destroy
                  ), (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = false));
                }
                updateQueue = updateQueue.next;
              } while (updateQueue !== firstEffect);
            }
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function commitHookPassiveMountEffects(finishedWork, hookFlags) {
          shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListMount(hookFlags, finishedWork), recordEffectDuration()) : commitHookEffectListMount(hookFlags, finishedWork);
        }
        function commitHookPassiveUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {
          shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListUnmount(
            hookFlags,
            finishedWork,
            nearestMountedAncestor
          ), recordEffectDuration()) : commitHookEffectListUnmount(
            hookFlags,
            finishedWork,
            nearestMountedAncestor
          );
        }
        function commitClassCallbacks(finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          if (null !== updateQueue) {
            var instance = finishedWork.stateNode;
            finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (instance.props !== finishedWork.memoizedProps && console.error(
              "Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
              getComponentNameFromFiber(finishedWork) || "instance"
            ), instance.state !== finishedWork.memoizedState && console.error(
              "Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
              getComponentNameFromFiber(finishedWork) || "instance"
            ));
            try {
              runWithFiberInDEV(
                finishedWork,
                commitCallbacks,
                updateQueue,
                instance
              );
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
        }
        function callGetSnapshotBeforeUpdates(instance, prevProps, prevState) {
          return instance.getSnapshotBeforeUpdate(prevProps, prevState);
        }
        function commitClassSnapshot(finishedWork, current2) {
          var prevProps = current2.memoizedProps, prevState = current2.memoizedState;
          current2 = finishedWork.stateNode;
          finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (current2.props !== finishedWork.memoizedProps && console.error(
            "Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
            getComponentNameFromFiber(finishedWork) || "instance"
          ), current2.state !== finishedWork.memoizedState && console.error(
            "Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
            getComponentNameFromFiber(finishedWork) || "instance"
          ));
          try {
            var resolvedPrevProps = resolveClassComponentProps(
              finishedWork.type,
              prevProps
            );
            var snapshot = runWithFiberInDEV(
              finishedWork,
              callGetSnapshotBeforeUpdates,
              current2,
              resolvedPrevProps,
              prevState
            );
            prevProps = didWarnAboutUndefinedSnapshotBeforeUpdate;
            void 0 !== snapshot || prevProps.has(finishedWork.type) || (prevProps.add(finishedWork.type), runWithFiberInDEV(finishedWork, function() {
              console.error(
                "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",
                getComponentNameFromFiber(finishedWork)
              );
            }));
            current2.__reactInternalSnapshotBeforeUpdate = snapshot;
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          instance.props = resolveClassComponentProps(
            current2.type,
            current2.memoizedProps
          );
          instance.state = current2.memoizedState;
          shouldProfile(current2) ? (startEffectTimer(), runWithFiberInDEV(
            current2,
            callComponentWillUnmountInDEV,
            current2,
            nearestMountedAncestor,
            instance
          ), recordEffectDuration()) : runWithFiberInDEV(
            current2,
            callComponentWillUnmountInDEV,
            current2,
            nearestMountedAncestor,
            instance
          );
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (null !== ref) {
            switch (finishedWork.tag) {
              case 26:
              case 27:
              case 5:
                var instanceToUse = finishedWork.stateNode;
                break;
              case 30:
                instanceToUse = finishedWork.stateNode;
                break;
              default:
                instanceToUse = finishedWork.stateNode;
            }
            if ("function" === typeof ref)
              if (shouldProfile(finishedWork))
                try {
                  startEffectTimer(), finishedWork.refCleanup = ref(instanceToUse);
                } finally {
                  recordEffectDuration();
                }
              else finishedWork.refCleanup = ref(instanceToUse);
            else
              "string" === typeof ref ? console.error("String refs are no longer supported.") : ref.hasOwnProperty("current") || console.error(
                "Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",
                getComponentNameFromFiber(finishedWork)
              ), ref.current = instanceToUse;
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            runWithFiberInDEV(current2, commitAttachRef, current2);
          } catch (error) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref, refCleanup = current2.refCleanup;
          if (null !== ref)
            if ("function" === typeof refCleanup)
              try {
                if (shouldProfile(current2))
                  try {
                    startEffectTimer(), runWithFiberInDEV(current2, refCleanup);
                  } finally {
                    recordEffectDuration(current2);
                  }
                else runWithFiberInDEV(current2, refCleanup);
              } catch (error) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error);
              } finally {
                current2.refCleanup = null, current2 = current2.alternate, null != current2 && (current2.refCleanup = null);
              }
            else if ("function" === typeof ref)
              try {
                if (shouldProfile(current2))
                  try {
                    startEffectTimer(), runWithFiberInDEV(current2, ref, null);
                  } finally {
                    recordEffectDuration(current2);
                  }
                else runWithFiberInDEV(current2, ref, null);
              } catch (error$7) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error$7);
              }
            else ref.current = null;
        }
        function commitProfiler(finishedWork, current2, commitStartTime2, effectDuration) {
          var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onCommit = _finishedWork$memoize.onCommit;
          _finishedWork$memoize = _finishedWork$memoize.onRender;
          current2 = null === current2 ? "mount" : "update";
          currentUpdateIsNested && (current2 = "nested-update");
          "function" === typeof _finishedWork$memoize && _finishedWork$memoize(
            id,
            current2,
            finishedWork.actualDuration,
            finishedWork.treeBaseDuration,
            finishedWork.actualStartTime,
            commitStartTime2
          );
          "function" === typeof onCommit && onCommit(id, current2, effectDuration, commitStartTime2);
        }
        function commitProfilerPostCommitImpl(finishedWork, current2, commitStartTime2, passiveEffectDuration) {
          var _finishedWork$memoize2 = finishedWork.memoizedProps;
          finishedWork = _finishedWork$memoize2.id;
          _finishedWork$memoize2 = _finishedWork$memoize2.onPostCommit;
          current2 = null === current2 ? "mount" : "update";
          currentUpdateIsNested && (current2 = "nested-update");
          "function" === typeof _finishedWork$memoize2 && _finishedWork$memoize2(
            finishedWork,
            current2,
            passiveEffectDuration,
            commitStartTime2
          );
        }
        function commitHostMount(finishedWork) {
          var type = finishedWork.type, props = finishedWork.memoizedProps, instance = finishedWork.stateNode;
          try {
            runWithFiberInDEV(
              finishedWork,
              commitMount,
              instance,
              type,
              props,
              finishedWork
            );
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function commitHostUpdate(finishedWork, newProps, oldProps) {
          try {
            runWithFiberInDEV(
              finishedWork,
              commitUpdate,
              finishedWork.stateNode,
              finishedWork.type,
              oldProps,
              newProps,
              finishedWork
            );
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function isHostParent(fiber) {
          return 5 === fiber.tag || 3 === fiber.tag || 26 === fiber.tag || 27 === fiber.tag && isSingletonScope(fiber.type) || 4 === fiber.tag;
        }
        function getHostSibling(fiber) {
          a: for (; ; ) {
            for (; null === fiber.sibling; ) {
              if (null === fiber.return || isHostParent(fiber.return)) return null;
              fiber = fiber.return;
            }
            fiber.sibling.return = fiber.return;
            for (fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag; ) {
              if (27 === fiber.tag && isSingletonScope(fiber.type)) continue a;
              if (fiber.flags & 2) continue a;
              if (null === fiber.child || 4 === fiber.tag) continue a;
              else fiber.child.return = fiber, fiber = fiber.child;
            }
            if (!(fiber.flags & 2)) return fiber.stateNode;
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          if (5 === tag || 6 === tag)
            node = node.stateNode, before ? (warnForReactChildrenConflict(parent), (9 === parent.nodeType ? parent.body : "HTML" === parent.nodeName ? parent.ownerDocument.body : parent).insertBefore(node, before)) : (warnForReactChildrenConflict(parent), before = 9 === parent.nodeType ? parent.body : "HTML" === parent.nodeName ? parent.ownerDocument.body : parent, before.appendChild(node), parent = parent._reactRootContainer, null !== parent && void 0 !== parent || null !== before.onclick || (before.onclick = noop$1));
          else if (4 !== tag && (27 === tag && isSingletonScope(node.type) && (parent = node.stateNode, before = null), node = node.child, null !== node))
            for (insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling; null !== node; )
              insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          if (5 === tag || 6 === tag)
            node = node.stateNode, before ? parent.insertBefore(node, before) : parent.appendChild(node);
          else if (4 !== tag && (27 === tag && isSingletonScope(node.type) && (parent = node.stateNode), node = node.child, null !== node))
            for (insertOrAppendPlacementNode(node, before, parent), node = node.sibling; null !== node; )
              insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
        }
        function commitPlacement(finishedWork) {
          for (var hostParentFiber, parentFiber = finishedWork.return; null !== parentFiber; ) {
            if (isHostParent(parentFiber)) {
              hostParentFiber = parentFiber;
              break;
            }
            parentFiber = parentFiber.return;
          }
          if (null == hostParentFiber)
            throw Error(
              "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
            );
          switch (hostParentFiber.tag) {
            case 27:
              hostParentFiber = hostParentFiber.stateNode;
              parentFiber = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(
                finishedWork,
                parentFiber,
                hostParentFiber
              );
              break;
            case 5:
              parentFiber = hostParentFiber.stateNode;
              hostParentFiber.flags & 32 && (resetTextContent(parentFiber), hostParentFiber.flags &= -33);
              hostParentFiber = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(
                finishedWork,
                hostParentFiber,
                parentFiber
              );
              break;
            case 3:
            case 4:
              hostParentFiber = hostParentFiber.stateNode.containerInfo;
              parentFiber = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(
                finishedWork,
                parentFiber,
                hostParentFiber
              );
              break;
            default:
              throw Error(
                "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."
              );
          }
        }
        function commitHostSingletonAcquisition(finishedWork) {
          var singleton = finishedWork.stateNode, props = finishedWork.memoizedProps;
          try {
            runWithFiberInDEV(
              finishedWork,
              acquireSingletonInstance,
              finishedWork.type,
              props,
              singleton,
              finishedWork
            );
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function isHydratingParent(current2, finishedWork) {
          return 31 === finishedWork.tag ? (finishedWork = finishedWork.memoizedState, null !== current2.memoizedState && null === finishedWork) : 13 === finishedWork.tag ? (current2 = current2.memoizedState, finishedWork = finishedWork.memoizedState, null !== current2 && null !== current2.dehydrated && (null === finishedWork || null === finishedWork.dehydrated)) : 3 === finishedWork.tag ? current2.memoizedState.isDehydrated && 0 === (finishedWork.flags & 256) : false;
        }
        function commitBeforeMutationEffects(root3, firstChild) {
          root3 = root3.containerInfo;
          eventsEnabled = _enabled;
          root3 = getActiveElementDeep(root3);
          if (hasSelectionCapabilities(root3)) {
            if ("selectionStart" in root3)
              var JSCompiler_temp = {
                start: root3.selectionStart,
                end: root3.selectionEnd
              };
            else
              a: {
                JSCompiler_temp = (JSCompiler_temp = root3.ownerDocument) && JSCompiler_temp.defaultView || window;
                var selection = JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
                if (selection && 0 !== selection.rangeCount) {
                  JSCompiler_temp = selection.anchorNode;
                  var anchorOffset = selection.anchorOffset, focusNode = selection.focusNode;
                  selection = selection.focusOffset;
                  try {
                    JSCompiler_temp.nodeType, focusNode.nodeType;
                  } catch (e$2) {
                    JSCompiler_temp = null;
                    break a;
                  }
                  var length = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node = root3, parentNode = null;
                  b: for (; ; ) {
                    for (var next; ; ) {
                      node !== JSCompiler_temp || 0 !== anchorOffset && 3 !== node.nodeType || (start = length + anchorOffset);
                      node !== focusNode || 0 !== selection && 3 !== node.nodeType || (end = length + selection);
                      3 === node.nodeType && (length += node.nodeValue.length);
                      if (null === (next = node.firstChild)) break;
                      parentNode = node;
                      node = next;
                    }
                    for (; ; ) {
                      if (node === root3) break b;
                      parentNode === JSCompiler_temp && ++indexWithinAnchor === anchorOffset && (start = length);
                      parentNode === focusNode && ++indexWithinFocus === selection && (end = length);
                      if (null !== (next = node.nextSibling)) break;
                      node = parentNode;
                      parentNode = node.parentNode;
                    }
                    node = next;
                  }
                  JSCompiler_temp = -1 === start || -1 === end ? null : { start, end };
                } else JSCompiler_temp = null;
              }
            JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
          } else JSCompiler_temp = null;
          selectionInformation = {
            focusedElem: root3,
            selectionRange: JSCompiler_temp
          };
          _enabled = false;
          for (nextEffect = firstChild; null !== nextEffect; )
            if (firstChild = nextEffect, root3 = firstChild.child, 0 !== (firstChild.subtreeFlags & 1028) && null !== root3)
              root3.return = firstChild, nextEffect = root3;
            else
              for (; null !== nextEffect; ) {
                root3 = firstChild = nextEffect;
                JSCompiler_temp = root3.alternate;
                anchorOffset = root3.flags;
                switch (root3.tag) {
                  case 0:
                    if (0 !== (anchorOffset & 4) && (root3 = root3.updateQueue, root3 = null !== root3 ? root3.events : null, null !== root3))
                      for (JSCompiler_temp = 0; JSCompiler_temp < root3.length; JSCompiler_temp++)
                        anchorOffset = root3[JSCompiler_temp], anchorOffset.ref.impl = anchorOffset.nextImpl;
                    break;
                  case 11:
                  case 15:
                    break;
                  case 1:
                    0 !== (anchorOffset & 1024) && null !== JSCompiler_temp && commitClassSnapshot(root3, JSCompiler_temp);
                    break;
                  case 3:
                    if (0 !== (anchorOffset & 1024)) {
                      if (root3 = root3.stateNode.containerInfo, JSCompiler_temp = root3.nodeType, 9 === JSCompiler_temp)
                        clearContainerSparingly(root3);
                      else if (1 === JSCompiler_temp)
                        switch (root3.nodeName) {
                          case "HEAD":
                          case "HTML":
                          case "BODY":
                            clearContainerSparingly(root3);
                            break;
                          default:
                            root3.textContent = "";
                        }
                    }
                    break;
                  case 5:
                  case 26:
                  case 27:
                  case 6:
                  case 4:
                  case 17:
                    break;
                  default:
                    if (0 !== (anchorOffset & 1024))
                      throw Error(
                        "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
                      );
                }
                root3 = firstChild.sibling;
                if (null !== root3) {
                  root3.return = firstChild.return;
                  nextEffect = root3;
                  break;
                }
                nextEffect = firstChild.return;
              }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork) {
          var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate(), flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              flags & 4 && commitHookLayoutEffects(finishedWork, Layout | HasEffect);
              break;
            case 1:
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              if (flags & 4)
                if (finishedRoot = finishedWork.stateNode, null === current2)
                  finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (finishedRoot.props !== finishedWork.memoizedProps && console.error(
                    "Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                    getComponentNameFromFiber(finishedWork) || "instance"
                  ), finishedRoot.state !== finishedWork.memoizedState && console.error(
                    "Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                    getComponentNameFromFiber(finishedWork) || "instance"
                  )), shouldProfile(finishedWork) ? (startEffectTimer(), runWithFiberInDEV(
                    finishedWork,
                    callComponentDidMountInDEV,
                    finishedWork,
                    finishedRoot
                  ), recordEffectDuration()) : runWithFiberInDEV(
                    finishedWork,
                    callComponentDidMountInDEV,
                    finishedWork,
                    finishedRoot
                  );
                else {
                  var prevProps = resolveClassComponentProps(
                    finishedWork.type,
                    current2.memoizedProps
                  );
                  current2 = current2.memoizedState;
                  finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (finishedRoot.props !== finishedWork.memoizedProps && console.error(
                    "Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                    getComponentNameFromFiber(finishedWork) || "instance"
                  ), finishedRoot.state !== finishedWork.memoizedState && console.error(
                    "Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                    getComponentNameFromFiber(finishedWork) || "instance"
                  ));
                  shouldProfile(finishedWork) ? (startEffectTimer(), runWithFiberInDEV(
                    finishedWork,
                    callComponentDidUpdateInDEV,
                    finishedWork,
                    finishedRoot,
                    prevProps,
                    current2,
                    finishedRoot.__reactInternalSnapshotBeforeUpdate
                  ), recordEffectDuration()) : runWithFiberInDEV(
                    finishedWork,
                    callComponentDidUpdateInDEV,
                    finishedWork,
                    finishedRoot,
                    prevProps,
                    current2,
                    finishedRoot.__reactInternalSnapshotBeforeUpdate
                  );
                }
              flags & 64 && commitClassCallbacks(finishedWork);
              flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 3:
              current2 = pushNestedEffectDurations();
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              if (flags & 64 && (flags = finishedWork.updateQueue, null !== flags)) {
                prevProps = null;
                if (null !== finishedWork.child)
                  switch (finishedWork.child.tag) {
                    case 27:
                    case 5:
                      prevProps = finishedWork.child.stateNode;
                      break;
                    case 1:
                      prevProps = finishedWork.child.stateNode;
                  }
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitCallbacks,
                    flags,
                    prevProps
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
              finishedRoot.effectDuration += popNestedEffectDurations(current2);
              break;
            case 27:
              null === current2 && flags & 4 && commitHostSingletonAcquisition(finishedWork);
            case 26:
            case 5:
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              if (null === current2) {
                if (flags & 4) commitHostMount(finishedWork);
                else if (flags & 64) {
                  finishedRoot = finishedWork.type;
                  current2 = finishedWork.memoizedProps;
                  prevProps = finishedWork.stateNode;
                  try {
                    runWithFiberInDEV(
                      finishedWork,
                      commitHydratedInstance,
                      prevProps,
                      finishedRoot,
                      current2,
                      finishedWork
                    );
                  } catch (error) {
                    captureCommitPhaseError(
                      finishedWork,
                      finishedWork.return,
                      error
                    );
                  }
                }
              }
              flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 12:
              if (flags & 4) {
                flags = pushNestedEffectDurations();
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                finishedRoot = finishedWork.stateNode;
                finishedRoot.effectDuration += bubbleNestedEffectDurations(flags);
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitProfiler,
                    finishedWork,
                    current2,
                    commitStartTime,
                    finishedRoot.effectDuration
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              } else recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              break;
            case 31:
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              flags & 4 && commitActivityHydrationCallbacks(finishedRoot, finishedWork);
              break;
            case 13:
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              flags & 64 && (finishedRoot = finishedWork.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot && (flags = retryDehydratedSuspenseBoundary.bind(
                null,
                finishedWork
              ), registerSuspenseInstanceRetry(finishedRoot, flags))));
              break;
            case 22:
              flags = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
              if (!flags) {
                current2 = null !== current2 && null !== current2.memoizedState || offscreenSubtreeWasHidden;
                prevProps = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = flags;
                (offscreenSubtreeWasHidden = current2) && !prevOffscreenSubtreeWasHidden ? (recursivelyTraverseReappearLayoutEffects(
                  finishedRoot,
                  finishedWork,
                  0 !== (finishedWork.subtreeFlags & 8772)
                ), (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentReappeared(
                  finishedWork,
                  componentEffectStartTime,
                  componentEffectEndTime
                )) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                offscreenSubtreeIsHidden = prevProps;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              }
              break;
            case 30:
              break;
            default:
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          }
          (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && ((componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(
            finishedWork,
            componentEffectStartTime,
            componentEffectEndTime,
            componentEffectDuration,
            componentEffectErrors
          ), null === finishedWork.alternate && null !== finishedWork.return && null !== finishedWork.return.alternate && 0.05 < componentEffectEndTime - componentEffectStartTime && (isHydratingParent(
            finishedWork.return.alternate,
            finishedWork.return
          ) || logComponentTrigger(
            finishedWork,
            componentEffectStartTime,
            componentEffectEndTime,
            "Mount"
          )));
          popComponentEffectStart(prevEffectStart);
          popComponentEffectDuration(prevEffectDuration);
          componentEffectErrors = prevEffectErrors;
          componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
          fiber.child = null;
          fiber.deletions = null;
          fiber.sibling = null;
          5 === fiber.tag && (alternate = fiber.stateNode, null !== alternate && detachDeletedInstance(alternate));
          fiber.stateNode = null;
          fiber._debugOwner = null;
          fiber.return = null;
          fiber.dependencies = null;
          fiber.memoizedProps = null;
          fiber.memoizedState = null;
          fiber.pendingProps = null;
          fiber.stateNode = null;
          fiber.updateQueue = null;
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          for (parent = parent.child; null !== parent; )
            commitDeletionEffectsOnFiber(
              finishedRoot,
              nearestMountedAncestor,
              parent
            ), parent = parent.sibling;
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount)
            try {
              injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
            } catch (err) {
              hasLoggedError || (hasLoggedError = true, console.error(
                "React instrumentation encountered an error: %o",
                err
              ));
            }
          var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate();
          switch (deletedFiber.tag) {
            case 26:
              offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              deletedFiber.memoizedState ? deletedFiber.memoizedState.count-- : deletedFiber.stateNode && (finishedRoot = deletedFiber.stateNode, finishedRoot.parentNode.removeChild(finishedRoot));
              break;
            case 27:
              offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
              var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
              isSingletonScope(deletedFiber.type) && (hostParent = deletedFiber.stateNode, hostParentIsContainer = false);
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              runWithFiberInDEV(
                deletedFiber,
                releaseSingletonInstance,
                deletedFiber.stateNode
              );
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              break;
            case 5:
              offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
            case 6:
              prevHostParent = hostParent;
              prevHostParentIsContainer = hostParentIsContainer;
              hostParent = null;
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              if (null !== hostParent)
                if (hostParentIsContainer)
                  try {
                    runWithFiberInDEV(
                      deletedFiber,
                      removeChildFromContainer,
                      hostParent,
                      deletedFiber.stateNode
                    );
                  } catch (error) {
                    captureCommitPhaseError(
                      deletedFiber,
                      nearestMountedAncestor,
                      error
                    );
                  }
                else
                  try {
                    runWithFiberInDEV(
                      deletedFiber,
                      removeChild,
                      hostParent,
                      deletedFiber.stateNode
                    );
                  } catch (error) {
                    captureCommitPhaseError(
                      deletedFiber,
                      nearestMountedAncestor,
                      error
                    );
                  }
              break;
            case 18:
              null !== hostParent && (hostParentIsContainer ? (finishedRoot = hostParent, clearHydrationBoundary(
                9 === finishedRoot.nodeType ? finishedRoot.body : "HTML" === finishedRoot.nodeName ? finishedRoot.ownerDocument.body : finishedRoot,
                deletedFiber.stateNode
              ), retryIfBlockedOn(finishedRoot)) : clearHydrationBoundary(hostParent, deletedFiber.stateNode));
              break;
            case 4:
              prevHostParent = hostParent;
              prevHostParentIsContainer = hostParentIsContainer;
              hostParent = deletedFiber.stateNode.containerInfo;
              hostParentIsContainer = true;
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              break;
            case 0:
            case 11:
            case 14:
            case 15:
              commitHookEffectListUnmount(
                Insertion,
                deletedFiber,
                nearestMountedAncestor
              );
              offscreenSubtreeWasHidden || commitHookLayoutUnmountEffects(
                deletedFiber,
                nearestMountedAncestor,
                Layout
              );
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              break;
            case 1:
              offscreenSubtreeWasHidden || (safelyDetachRef(deletedFiber, nearestMountedAncestor), prevHostParent = deletedFiber.stateNode, "function" === typeof prevHostParent.componentWillUnmount && safelyCallComponentWillUnmount(
                deletedFiber,
                nearestMountedAncestor,
                prevHostParent
              ));
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              break;
            case 21:
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              break;
            case 22:
              offscreenSubtreeWasHidden = (prevHostParent = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState;
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              offscreenSubtreeWasHidden = prevHostParent;
              break;
            default:
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
          }
          (deletedFiber.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && (componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(
            deletedFiber,
            componentEffectStartTime,
            componentEffectEndTime,
            componentEffectDuration,
            componentEffectErrors
          );
          popComponentEffectStart(prevEffectStart);
          popComponentEffectDuration(prevEffectDuration);
          componentEffectErrors = prevEffectErrors;
          componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
        }
        function commitActivityHydrationCallbacks(finishedRoot, finishedWork) {
          if (null === finishedWork.memoizedState && (finishedRoot = finishedWork.alternate, null !== finishedRoot && (finishedRoot = finishedRoot.memoizedState, null !== finishedRoot))) {
            finishedRoot = finishedRoot.dehydrated;
            try {
              runWithFiberInDEV(
                finishedWork,
                commitHydratedActivityInstance,
                finishedRoot
              );
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          if (null === finishedWork.memoizedState && (finishedRoot = finishedWork.alternate, null !== finishedRoot && (finishedRoot = finishedRoot.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot))))
            try {
              runWithFiberInDEV(
                finishedWork,
                commitHydratedSuspenseInstance,
                finishedRoot
              );
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
        }
        function getRetryCache(finishedWork) {
          switch (finishedWork.tag) {
            case 31:
            case 13:
            case 19:
              var retryCache = finishedWork.stateNode;
              null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
              return retryCache;
            case 22:
              return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, null === retryCache && (retryCache = finishedWork._retryCache = new PossiblyWeakSet()), retryCache;
            default:
              throw Error(
                "Unexpected Suspense handler tag (" + finishedWork.tag + "). This is a bug in React."
              );
          }
        }
        function attachSuspenseRetryListeners(finishedWork, wakeables) {
          var retryCache = getRetryCache(finishedWork);
          wakeables.forEach(function(wakeable) {
            if (!retryCache.has(wakeable)) {
              retryCache.add(wakeable);
              if (isDevToolsPresent)
                if (null !== inProgressLanes && null !== inProgressRoot)
                  restorePendingUpdaters(inProgressRoot, inProgressLanes);
                else
                  throw Error(
                    "Expected finished root and lanes to be set. This is a bug in React."
                  );
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              wakeable.then(retry, retry);
            }
          });
        }
        function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
          var deletions = parentFiber.deletions;
          if (null !== deletions)
            for (var i = 0; i < deletions.length; i++) {
              var root3 = root$jscomp$0, returnFiber = parentFiber, deletedFiber = deletions[i], prevEffectStart = pushComponentEffectStart(), parent = returnFiber;
              a: for (; null !== parent; ) {
                switch (parent.tag) {
                  case 27:
                    if (isSingletonScope(parent.type)) {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break a;
                    }
                    break;
                  case 5:
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break a;
                  case 3:
                  case 4:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break a;
                }
                parent = parent.return;
              }
              if (null === hostParent)
                throw Error(
                  "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
                );
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
              (deletedFiber.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentTrigger(
                deletedFiber,
                componentEffectStartTime,
                componentEffectEndTime,
                "Unmount"
              );
              popComponentEffectStart(prevEffectStart);
              root3 = deletedFiber;
              returnFiber = root3.alternate;
              null !== returnFiber && (returnFiber.return = null);
              root3.return = null;
            }
          if (parentFiber.subtreeFlags & 13886)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
              commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
        }
        function commitMutationEffectsOnFiber(finishedWork, root3) {
          var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate(), current2 = finishedWork.alternate, flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 4 && (commitHookEffectListUnmount(
                Insertion | HasEffect,
                finishedWork,
                finishedWork.return
              ), commitHookEffectListMount(Insertion | HasEffect, finishedWork), commitHookLayoutUnmountEffects(
                finishedWork,
                finishedWork.return,
                Layout | HasEffect
              ));
              break;
            case 1:
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
              if (flags & 64 && offscreenSubtreeIsHidden && (flags = finishedWork.updateQueue, null !== flags && (current2 = flags.callbacks, null !== current2))) {
                var existingHiddenCallbacks = flags.shared.hiddenCallbacks;
                flags.shared.hiddenCallbacks = null === existingHiddenCallbacks ? current2 : existingHiddenCallbacks.concat(current2);
              }
              break;
            case 26:
              existingHiddenCallbacks = currentHoistableRoot;
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
              if (flags & 4) {
                var currentResource = null !== current2 ? current2.memoizedState : null;
                flags = finishedWork.memoizedState;
                if (null === current2)
                  if (null === flags)
                    if (null === finishedWork.stateNode) {
                      a: {
                        flags = finishedWork.type;
                        current2 = finishedWork.memoizedProps;
                        existingHiddenCallbacks = existingHiddenCallbacks.ownerDocument || existingHiddenCallbacks;
                        b: switch (flags) {
                          case "title":
                            currentResource = existingHiddenCallbacks.getElementsByTagName(
                              "title"
                            )[0];
                            if (!currentResource || currentResource[internalHoistableMarker] || currentResource[internalInstanceKey] || currentResource.namespaceURI === SVG_NAMESPACE || currentResource.hasAttribute("itemprop"))
                              currentResource = existingHiddenCallbacks.createElement(flags), existingHiddenCallbacks.head.insertBefore(
                                currentResource,
                                existingHiddenCallbacks.querySelector(
                                  "head > title"
                                )
                              );
                            setInitialProperties(currentResource, flags, current2);
                            currentResource[internalInstanceKey] = finishedWork;
                            markNodeAsHoistable(currentResource);
                            flags = currentResource;
                            break a;
                          case "link":
                            var maybeNodes = getHydratableHoistableCache(
                              "link",
                              "href",
                              existingHiddenCallbacks
                            ).get(flags + (current2.href || ""));
                            if (maybeNodes) {
                              for (var i = 0; i < maybeNodes.length; i++)
                                if (currentResource = maybeNodes[i], currentResource.getAttribute("href") === (null == current2.href || "" === current2.href ? null : current2.href) && currentResource.getAttribute("rel") === (null == current2.rel ? null : current2.rel) && currentResource.getAttribute("title") === (null == current2.title ? null : current2.title) && currentResource.getAttribute("crossorigin") === (null == current2.crossOrigin ? null : current2.crossOrigin)) {
                                  maybeNodes.splice(i, 1);
                                  break b;
                                }
                            }
                            currentResource = existingHiddenCallbacks.createElement(flags);
                            setInitialProperties(currentResource, flags, current2);
                            existingHiddenCallbacks.head.appendChild(
                              currentResource
                            );
                            break;
                          case "meta":
                            if (maybeNodes = getHydratableHoistableCache(
                              "meta",
                              "content",
                              existingHiddenCallbacks
                            ).get(flags + (current2.content || ""))) {
                              for (i = 0; i < maybeNodes.length; i++)
                                if (currentResource = maybeNodes[i], checkAttributeStringCoercion(
                                  current2.content,
                                  "content"
                                ), currentResource.getAttribute("content") === (null == current2.content ? null : "" + current2.content) && currentResource.getAttribute("name") === (null == current2.name ? null : current2.name) && currentResource.getAttribute("property") === (null == current2.property ? null : current2.property) && currentResource.getAttribute("http-equiv") === (null == current2.httpEquiv ? null : current2.httpEquiv) && currentResource.getAttribute("charset") === (null == current2.charSet ? null : current2.charSet)) {
                                  maybeNodes.splice(i, 1);
                                  break b;
                                }
                            }
                            currentResource = existingHiddenCallbacks.createElement(flags);
                            setInitialProperties(currentResource, flags, current2);
                            existingHiddenCallbacks.head.appendChild(
                              currentResource
                            );
                            break;
                          default:
                            throw Error(
                              'getNodesForType encountered a type it did not expect: "' + flags + '". This is a bug in React.'
                            );
                        }
                        currentResource[internalInstanceKey] = finishedWork;
                        markNodeAsHoistable(currentResource);
                        flags = currentResource;
                      }
                      finishedWork.stateNode = flags;
                    } else
                      mountHoistable(
                        existingHiddenCallbacks,
                        finishedWork.type,
                        finishedWork.stateNode
                      );
                  else
                    finishedWork.stateNode = acquireResource(
                      existingHiddenCallbacks,
                      flags,
                      finishedWork.memoizedProps
                    );
                else
                  currentResource !== flags ? (null === currentResource ? null !== current2.stateNode && (current2 = current2.stateNode, current2.parentNode.removeChild(current2)) : currentResource.count--, null === flags ? mountHoistable(
                    existingHiddenCallbacks,
                    finishedWork.type,
                    finishedWork.stateNode
                  ) : acquireResource(
                    existingHiddenCallbacks,
                    flags,
                    finishedWork.memoizedProps
                  )) : null === flags && null !== finishedWork.stateNode && commitHostUpdate(
                    finishedWork,
                    finishedWork.memoizedProps,
                    current2.memoizedProps
                  );
              }
              break;
            case 27:
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
              null !== current2 && flags & 4 && commitHostUpdate(
                finishedWork,
                finishedWork.memoizedProps,
                current2.memoizedProps
              );
              break;
            case 5:
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
              if (finishedWork.flags & 32) {
                existingHiddenCallbacks = finishedWork.stateNode;
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    resetTextContent,
                    existingHiddenCallbacks
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
              flags & 4 && null != finishedWork.stateNode && (existingHiddenCallbacks = finishedWork.memoizedProps, commitHostUpdate(
                finishedWork,
                existingHiddenCallbacks,
                null !== current2 ? current2.memoizedProps : existingHiddenCallbacks
              ));
              flags & 1024 && (needsFormReset = true, "form" !== finishedWork.type && console.error(
                "Unexpected host component type. Expected a form. This is a bug in React."
              ));
              break;
            case 6:
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & 4) {
                if (null === finishedWork.stateNode)
                  throw Error(
                    "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."
                  );
                flags = finishedWork.memoizedProps;
                current2 = null !== current2 ? current2.memoizedProps : flags;
                existingHiddenCallbacks = finishedWork.stateNode;
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitTextUpdate,
                    existingHiddenCallbacks,
                    current2,
                    flags
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
              break;
            case 3:
              existingHiddenCallbacks = pushNestedEffectDurations();
              tagCaches = null;
              currentResource = currentHoistableRoot;
              currentHoistableRoot = getHoistableRoot(root3.containerInfo);
              recursivelyTraverseMutationEffects(root3, finishedWork);
              currentHoistableRoot = currentResource;
              commitReconciliationEffects(finishedWork);
              if (flags & 4 && null !== current2 && current2.memoizedState.isDehydrated)
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitHydratedContainer,
                    root3.containerInfo
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              needsFormReset && (needsFormReset = false, recursivelyResetForms(finishedWork));
              root3.effectDuration += popNestedEffectDurations(
                existingHiddenCallbacks
              );
              break;
            case 4:
              flags = currentHoistableRoot;
              currentHoistableRoot = getHoistableRoot(
                finishedWork.stateNode.containerInfo
              );
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              currentHoistableRoot = flags;
              break;
            case 12:
              flags = pushNestedEffectDurations();
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              finishedWork.stateNode.effectDuration += bubbleNestedEffectDurations(flags);
              break;
            case 31:
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
              break;
            case 13:
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              finishedWork.child.flags & 8192 && null !== finishedWork.memoizedState !== (null !== current2 && null !== current2.memoizedState) && (globalMostRecentFallbackTime = now$1());
              flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
              break;
            case 22:
              existingHiddenCallbacks = null !== finishedWork.memoizedState;
              var wasHidden = null !== current2 && null !== current2.memoizedState, prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || existingHiddenCallbacks;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;
              recursivelyTraverseMutationEffects(root3, finishedWork);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
              wasHidden && !existingHiddenCallbacks && !prevOffscreenSubtreeIsHidden && !prevOffscreenSubtreeWasHidden && (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentReappeared(
                finishedWork,
                componentEffectStartTime,
                componentEffectEndTime
              );
              commitReconciliationEffects(finishedWork);
              if (flags & 8192)
                a: for (root3 = finishedWork.stateNode, root3._visibility = existingHiddenCallbacks ? root3._visibility & ~OffscreenVisible : root3._visibility | OffscreenVisible, !existingHiddenCallbacks || null === current2 || wasHidden || offscreenSubtreeIsHidden || offscreenSubtreeWasHidden || (recursivelyTraverseDisappearLayoutEffects(finishedWork), (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentTrigger(
                  finishedWork,
                  componentEffectStartTime,
                  componentEffectEndTime,
                  "Disconnect"
                )), current2 = null, root3 = finishedWork; ; ) {
                  if (5 === root3.tag || 26 === root3.tag) {
                    if (null === current2) {
                      wasHidden = current2 = root3;
                      try {
                        currentResource = wasHidden.stateNode, existingHiddenCallbacks ? runWithFiberInDEV(
                          wasHidden,
                          hideInstance,
                          currentResource
                        ) : runWithFiberInDEV(
                          wasHidden,
                          unhideInstance,
                          wasHidden.stateNode,
                          wasHidden.memoizedProps
                        );
                      } catch (error) {
                        captureCommitPhaseError(wasHidden, wasHidden.return, error);
                      }
                    }
                  } else if (6 === root3.tag) {
                    if (null === current2) {
                      wasHidden = root3;
                      try {
                        maybeNodes = wasHidden.stateNode, existingHiddenCallbacks ? runWithFiberInDEV(
                          wasHidden,
                          hideTextInstance,
                          maybeNodes
                        ) : runWithFiberInDEV(
                          wasHidden,
                          unhideTextInstance,
                          maybeNodes,
                          wasHidden.memoizedProps
                        );
                      } catch (error) {
                        captureCommitPhaseError(wasHidden, wasHidden.return, error);
                      }
                    }
                  } else if (18 === root3.tag) {
                    if (null === current2) {
                      wasHidden = root3;
                      try {
                        i = wasHidden.stateNode, existingHiddenCallbacks ? runWithFiberInDEV(
                          wasHidden,
                          hideDehydratedBoundary,
                          i
                        ) : runWithFiberInDEV(
                          wasHidden,
                          unhideDehydratedBoundary,
                          wasHidden.stateNode
                        );
                      } catch (error) {
                        captureCommitPhaseError(wasHidden, wasHidden.return, error);
                      }
                    }
                  } else if ((22 !== root3.tag && 23 !== root3.tag || null === root3.memoizedState || root3 === finishedWork) && null !== root3.child) {
                    root3.child.return = root3;
                    root3 = root3.child;
                    continue;
                  }
                  if (root3 === finishedWork) break a;
                  for (; null === root3.sibling; ) {
                    if (null === root3.return || root3.return === finishedWork)
                      break a;
                    current2 === root3 && (current2 = null);
                    root3 = root3.return;
                  }
                  current2 === root3 && (current2 = null);
                  root3.sibling.return = root3.return;
                  root3 = root3.sibling;
                }
              flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (current2 = flags.retryQueue, null !== current2 && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, current2))));
              break;
            case 19:
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
              break;
            case 30:
              break;
            case 21:
              break;
            default:
              recursivelyTraverseMutationEffects(root3, finishedWork), commitReconciliationEffects(finishedWork);
          }
          (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && ((componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(
            finishedWork,
            componentEffectStartTime,
            componentEffectEndTime,
            componentEffectDuration,
            componentEffectErrors
          ), null === finishedWork.alternate && null !== finishedWork.return && null !== finishedWork.return.alternate && 0.05 < componentEffectEndTime - componentEffectStartTime && (isHydratingParent(
            finishedWork.return.alternate,
            finishedWork.return
          ) || logComponentTrigger(
            finishedWork,
            componentEffectStartTime,
            componentEffectEndTime,
            "Mount"
          )));
          popComponentEffectStart(prevEffectStart);
          popComponentEffectDuration(prevEffectDuration);
          componentEffectErrors = prevEffectErrors;
          componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & 2) {
            try {
              runWithFiberInDEV(finishedWork, commitPlacement, finishedWork);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
            finishedWork.flags &= -3;
          }
          flags & 4096 && (finishedWork.flags &= -4097);
        }
        function recursivelyResetForms(parentFiber) {
          if (parentFiber.subtreeFlags & 1024)
            for (parentFiber = parentFiber.child; null !== parentFiber; ) {
              var fiber = parentFiber;
              recursivelyResetForms(fiber);
              5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();
              parentFiber = parentFiber.sibling;
            }
        }
        function recursivelyTraverseLayoutEffects(root3, parentFiber) {
          if (parentFiber.subtreeFlags & 8772)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
              commitLayoutEffectOnFiber(root3, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
        }
        function disappearLayoutEffects(finishedWork) {
          var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate();
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
              commitHookLayoutUnmountEffects(
                finishedWork,
                finishedWork.return,
                Layout
              );
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 1:
              safelyDetachRef(finishedWork, finishedWork.return);
              var instance = finishedWork.stateNode;
              "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(
                finishedWork,
                finishedWork.return,
                instance
              );
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 27:
              runWithFiberInDEV(
                finishedWork,
                releaseSingletonInstance,
                finishedWork.stateNode
              );
            case 26:
            case 5:
              safelyDetachRef(finishedWork, finishedWork.return);
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 22:
              null === finishedWork.memoizedState && recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 30:
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            default:
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
          }
          (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && (componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(
            finishedWork,
            componentEffectStartTime,
            componentEffectEndTime,
            componentEffectDuration,
            componentEffectErrors
          );
          popComponentEffectStart(prevEffectStart);
          popComponentEffectDuration(prevEffectDuration);
          componentEffectErrors = prevEffectErrors;
          componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
        }
        function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            disappearLayoutEffects(parentFiber), parentFiber = parentFiber.sibling;
        }
        function reappearLayoutEffects(finishedRoot, current2, finishedWork, includeWorkInProgressEffects) {
          var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate(), flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              commitHookLayoutEffects(finishedWork, Layout);
              break;
            case 1:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              current2 = finishedWork.stateNode;
              "function" === typeof current2.componentDidMount && runWithFiberInDEV(
                finishedWork,
                callComponentDidMountInDEV,
                finishedWork,
                current2
              );
              current2 = finishedWork.updateQueue;
              if (null !== current2) {
                finishedRoot = finishedWork.stateNode;
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitHiddenCallbacks,
                    current2,
                    finishedRoot
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
              includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 27:
              commitHostSingletonAcquisition(finishedWork);
            case 26:
            case 5:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              includeWorkInProgressEffects && null === current2 && flags & 4 && commitHostMount(finishedWork);
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 12:
              if (includeWorkInProgressEffects && flags & 4) {
                flags = pushNestedEffectDurations();
                recursivelyTraverseReappearLayoutEffects(
                  finishedRoot,
                  finishedWork,
                  includeWorkInProgressEffects
                );
                includeWorkInProgressEffects = finishedWork.stateNode;
                includeWorkInProgressEffects.effectDuration += bubbleNestedEffectDurations(flags);
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitProfiler,
                    finishedWork,
                    current2,
                    commitStartTime,
                    includeWorkInProgressEffects.effectDuration
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              } else
                recursivelyTraverseReappearLayoutEffects(
                  finishedRoot,
                  finishedWork,
                  includeWorkInProgressEffects
                );
              break;
            case 31:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              includeWorkInProgressEffects && flags & 4 && commitActivityHydrationCallbacks(finishedRoot, finishedWork);
              break;
            case 13:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              includeWorkInProgressEffects && flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              break;
            case 22:
              null === finishedWork.memoizedState && recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 30:
              break;
            default:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
          }
          (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && (componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(
            finishedWork,
            componentEffectStartTime,
            componentEffectEndTime,
            componentEffectDuration,
            componentEffectErrors
          );
          popComponentEffectStart(prevEffectStart);
          popComponentEffectDuration(prevEffectDuration);
          componentEffectErrors = prevEffectErrors;
          componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
        }
        function recursivelyTraverseReappearLayoutEffects(finishedRoot, parentFiber, includeWorkInProgressEffects) {
          includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            reappearLayoutEffects(
              finishedRoot,
              parentFiber.alternate,
              parentFiber,
              includeWorkInProgressEffects
            ), parentFiber = parentFiber.sibling;
        }
        function commitOffscreenPassiveMountEffects(current2, finishedWork) {
          var previousCache = null;
          null !== current2 && null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (previousCache = current2.memoizedState.cachePool.pool);
          current2 = null;
          null !== finishedWork.memoizedState && null !== finishedWork.memoizedState.cachePool && (current2 = finishedWork.memoizedState.cachePool.pool);
          current2 !== previousCache && (null != current2 && retainCache(current2), null != previousCache && releaseCache(previousCache));
        }
        function commitCachePassiveMountEffect(current2, finishedWork) {
          current2 = null;
          null !== finishedWork.alternate && (current2 = finishedWork.alternate.memoizedState.cache);
          finishedWork = finishedWork.memoizedState.cache;
          finishedWork !== current2 && (retainCache(finishedWork), null != current2 && releaseCache(current2));
        }
        function recursivelyTraversePassiveMountEffects(root3, parentFiber, committedLanes, committedTransitions, endTime) {
          if (parentFiber.subtreeFlags & 10256 || 0 !== parentFiber.actualDuration && (null === parentFiber.alternate || parentFiber.alternate.child !== parentFiber.child))
            for (parentFiber = parentFiber.child; null !== parentFiber; ) {
              var nextSibling = parentFiber.sibling;
              commitPassiveMountOnFiber(
                root3,
                parentFiber,
                committedLanes,
                committedTransitions,
                null !== nextSibling ? nextSibling.actualStartTime : endTime
              );
              parentFiber = nextSibling;
            }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions, endTime) {
          var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate(), prevDeepEquality = alreadyWarnedForDeepEquality, flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              (finishedWork.mode & ProfileMode) !== NoMode && 0 < finishedWork.actualStartTime && 0 !== (finishedWork.flags & 1) && logComponentRender(
                finishedWork,
                finishedWork.actualStartTime,
                endTime,
                inHydratedSubtree,
                committedLanes
              );
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                endTime
              );
              flags & 2048 && commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);
              break;
            case 1:
              (finishedWork.mode & ProfileMode) !== NoMode && 0 < finishedWork.actualStartTime && (0 !== (finishedWork.flags & 128) ? logComponentErrored(
                finishedWork,
                finishedWork.actualStartTime,
                endTime,
                []
              ) : 0 !== (finishedWork.flags & 1) && logComponentRender(
                finishedWork,
                finishedWork.actualStartTime,
                endTime,
                inHydratedSubtree,
                committedLanes
              ));
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                endTime
              );
              break;
            case 3:
              var prevProfilerEffectDuration = pushNestedEffectDurations(), wasInHydratedSubtree = inHydratedSubtree;
              inHydratedSubtree = null !== finishedWork.alternate && finishedWork.alternate.memoizedState.isDehydrated && 0 === (finishedWork.flags & 256);
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                endTime
              );
              inHydratedSubtree = wasInHydratedSubtree;
              flags & 2048 && (committedLanes = null, null !== finishedWork.alternate && (committedLanes = finishedWork.alternate.memoizedState.cache), committedTransitions = finishedWork.memoizedState.cache, committedTransitions !== committedLanes && (retainCache(committedTransitions), null != committedLanes && releaseCache(committedLanes)));
              finishedRoot.passiveEffectDuration += popNestedEffectDurations(
                prevProfilerEffectDuration
              );
              break;
            case 12:
              if (flags & 2048) {
                flags = pushNestedEffectDurations();
                recursivelyTraversePassiveMountEffects(
                  finishedRoot,
                  finishedWork,
                  committedLanes,
                  committedTransitions,
                  endTime
                );
                finishedRoot = finishedWork.stateNode;
                finishedRoot.passiveEffectDuration += bubbleNestedEffectDurations(flags);
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitProfilerPostCommitImpl,
                    finishedWork,
                    finishedWork.alternate,
                    commitStartTime,
                    finishedRoot.passiveEffectDuration
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              } else
                recursivelyTraversePassiveMountEffects(
                  finishedRoot,
                  finishedWork,
                  committedLanes,
                  committedTransitions,
                  endTime
                );
              break;
            case 31:
              flags = inHydratedSubtree;
              prevProfilerEffectDuration = null !== finishedWork.alternate ? finishedWork.alternate.memoizedState : null;
              wasInHydratedSubtree = finishedWork.memoizedState;
              null !== prevProfilerEffectDuration && null === wasInHydratedSubtree ? (wasInHydratedSubtree = finishedWork.deletions, null !== wasInHydratedSubtree && 0 < wasInHydratedSubtree.length && 18 === wasInHydratedSubtree[0].tag ? (inHydratedSubtree = false, prevProfilerEffectDuration = prevProfilerEffectDuration.hydrationErrors, null !== prevProfilerEffectDuration && logComponentErrored(
                finishedWork,
                finishedWork.actualStartTime,
                endTime,
                prevProfilerEffectDuration
              )) : inHydratedSubtree = true) : inHydratedSubtree = false;
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                endTime
              );
              inHydratedSubtree = flags;
              break;
            case 13:
              flags = inHydratedSubtree;
              prevProfilerEffectDuration = null !== finishedWork.alternate ? finishedWork.alternate.memoizedState : null;
              wasInHydratedSubtree = finishedWork.memoizedState;
              null === prevProfilerEffectDuration || null === prevProfilerEffectDuration.dehydrated || null !== wasInHydratedSubtree && null !== wasInHydratedSubtree.dehydrated ? inHydratedSubtree = false : (wasInHydratedSubtree = finishedWork.deletions, null !== wasInHydratedSubtree && 0 < wasInHydratedSubtree.length && 18 === wasInHydratedSubtree[0].tag ? (inHydratedSubtree = false, prevProfilerEffectDuration = prevProfilerEffectDuration.hydrationErrors, null !== prevProfilerEffectDuration && logComponentErrored(
                finishedWork,
                finishedWork.actualStartTime,
                endTime,
                prevProfilerEffectDuration
              )) : inHydratedSubtree = true);
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                endTime
              );
              inHydratedSubtree = flags;
              break;
            case 23:
              break;
            case 22:
              wasInHydratedSubtree = finishedWork.stateNode;
              prevProfilerEffectDuration = finishedWork.alternate;
              null !== finishedWork.memoizedState ? wasInHydratedSubtree._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                endTime
              ) : recursivelyTraverseAtomicPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                endTime
              ) : wasInHydratedSubtree._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                endTime
              ) : (wasInHydratedSubtree._visibility |= OffscreenPassiveEffectsConnected, recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                0 !== (finishedWork.subtreeFlags & 10256) || 0 !== finishedWork.actualDuration && (null === finishedWork.alternate || finishedWork.alternate.child !== finishedWork.child),
                endTime
              ), (finishedWork.mode & ProfileMode) === NoMode || inHydratedSubtree || (finishedRoot = finishedWork.actualStartTime, 0 <= finishedRoot && 0.05 < endTime - finishedRoot && logComponentReappeared(finishedWork, finishedRoot, endTime), 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentReappeared(
                finishedWork,
                componentEffectStartTime,
                componentEffectEndTime
              )));
              flags & 2048 && commitOffscreenPassiveMountEffects(
                prevProfilerEffectDuration,
                finishedWork
              );
              break;
            case 24:
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                endTime
              );
              flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
              break;
            default:
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                endTime
              );
          }
          if ((finishedWork.mode & ProfileMode) !== NoMode) {
            if (finishedRoot = !inHydratedSubtree && null === finishedWork.alternate && null !== finishedWork.return && null !== finishedWork.return.alternate)
              committedLanes = finishedWork.actualStartTime, 0 <= committedLanes && 0.05 < endTime - committedLanes && logComponentTrigger(
                finishedWork,
                committedLanes,
                endTime,
                "Mount"
              );
            0 <= componentEffectStartTime && 0 <= componentEffectEndTime && ((componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(
              finishedWork,
              componentEffectStartTime,
              componentEffectEndTime,
              componentEffectDuration,
              componentEffectErrors
            ), finishedRoot && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentTrigger(
              finishedWork,
              componentEffectStartTime,
              componentEffectEndTime,
              "Mount"
            ));
          }
          popComponentEffectStart(prevEffectStart);
          popComponentEffectDuration(prevEffectDuration);
          componentEffectErrors = prevEffectErrors;
          componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
          alreadyWarnedForDeepEquality = prevDeepEquality;
        }
        function recursivelyTraverseReconnectPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions, includeWorkInProgressEffects, endTime) {
          includeWorkInProgressEffects = includeWorkInProgressEffects && (0 !== (parentFiber.subtreeFlags & 10256) || 0 !== parentFiber.actualDuration && (null === parentFiber.alternate || parentFiber.alternate.child !== parentFiber.child));
          for (parentFiber = parentFiber.child; null !== parentFiber; ) {
            var nextSibling = parentFiber.sibling;
            reconnectPassiveEffects(
              finishedRoot,
              parentFiber,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects,
              null !== nextSibling ? nextSibling.actualStartTime : endTime
            );
            parentFiber = nextSibling;
          }
        }
        function reconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects, endTime) {
          var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate(), prevDeepEquality = alreadyWarnedForDeepEquality;
          includeWorkInProgressEffects && (finishedWork.mode & ProfileMode) !== NoMode && 0 < finishedWork.actualStartTime && 0 !== (finishedWork.flags & 1) && logComponentRender(
            finishedWork,
            finishedWork.actualStartTime,
            endTime,
            inHydratedSubtree,
            committedLanes
          );
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects,
                endTime
              );
              commitHookPassiveMountEffects(finishedWork, Passive);
              break;
            case 23:
              break;
            case 22:
              var _instance2 = finishedWork.stateNode;
              null !== finishedWork.memoizedState ? _instance2._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects,
                endTime
              ) : recursivelyTraverseAtomicPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                endTime
              ) : (_instance2._visibility |= OffscreenPassiveEffectsConnected, recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects,
                endTime
              ));
              includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(
                finishedWork.alternate,
                finishedWork
              );
              break;
            case 24:
              recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects,
                endTime
              );
              includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
              break;
            default:
              recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects,
                endTime
              );
          }
          (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && (componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(
            finishedWork,
            componentEffectStartTime,
            componentEffectEndTime,
            componentEffectDuration,
            componentEffectErrors
          );
          popComponentEffectStart(prevEffectStart);
          popComponentEffectDuration(prevEffectDuration);
          componentEffectErrors = prevEffectErrors;
          componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
          alreadyWarnedForDeepEquality = prevDeepEquality;
        }
        function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber, committedLanes$jscomp$0, committedTransitions$jscomp$0, endTime$jscomp$0) {
          if (parentFiber.subtreeFlags & 10256 || 0 !== parentFiber.actualDuration && (null === parentFiber.alternate || parentFiber.alternate.child !== parentFiber.child))
            for (var child = parentFiber.child; null !== child; ) {
              parentFiber = child.sibling;
              var finishedRoot = finishedRoot$jscomp$0, committedLanes = committedLanes$jscomp$0, committedTransitions = committedTransitions$jscomp$0, endTime = null !== parentFiber ? parentFiber.actualStartTime : endTime$jscomp$0, prevDeepEquality = alreadyWarnedForDeepEquality;
              (child.mode & ProfileMode) !== NoMode && 0 < child.actualStartTime && 0 !== (child.flags & 1) && logComponentRender(
                child,
                child.actualStartTime,
                endTime,
                inHydratedSubtree,
                committedLanes
              );
              var flags = child.flags;
              switch (child.tag) {
                case 22:
                  recursivelyTraverseAtomicPassiveEffects(
                    finishedRoot,
                    child,
                    committedLanes,
                    committedTransitions,
                    endTime
                  );
                  flags & 2048 && commitOffscreenPassiveMountEffects(child.alternate, child);
                  break;
                case 24:
                  recursivelyTraverseAtomicPassiveEffects(
                    finishedRoot,
                    child,
                    committedLanes,
                    committedTransitions,
                    endTime
                  );
                  flags & 2048 && commitCachePassiveMountEffect(child.alternate, child);
                  break;
                default:
                  recursivelyTraverseAtomicPassiveEffects(
                    finishedRoot,
                    child,
                    committedLanes,
                    committedTransitions,
                    endTime
                  );
              }
              alreadyWarnedForDeepEquality = prevDeepEquality;
              child = parentFiber;
            }
        }
        function recursivelyAccumulateSuspenseyCommit(parentFiber, committedLanes, suspendedState) {
          if (parentFiber.subtreeFlags & suspenseyCommitFlag)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
              accumulateSuspenseyCommitOnFiber(
                parentFiber,
                committedLanes,
                suspendedState
              ), parentFiber = parentFiber.sibling;
        }
        function accumulateSuspenseyCommitOnFiber(fiber, committedLanes, suspendedState) {
          switch (fiber.tag) {
            case 26:
              recursivelyAccumulateSuspenseyCommit(
                fiber,
                committedLanes,
                suspendedState
              );
              fiber.flags & suspenseyCommitFlag && null !== fiber.memoizedState && suspendResource(
                suspendedState,
                currentHoistableRoot,
                fiber.memoizedState,
                fiber.memoizedProps
              );
              break;
            case 5:
              recursivelyAccumulateSuspenseyCommit(
                fiber,
                committedLanes,
                suspendedState
              );
              break;
            case 3:
            case 4:
              var previousHoistableRoot = currentHoistableRoot;
              currentHoistableRoot = getHoistableRoot(
                fiber.stateNode.containerInfo
              );
              recursivelyAccumulateSuspenseyCommit(
                fiber,
                committedLanes,
                suspendedState
              );
              currentHoistableRoot = previousHoistableRoot;
              break;
            case 22:
              null === fiber.memoizedState && (previousHoistableRoot = fiber.alternate, null !== previousHoistableRoot && null !== previousHoistableRoot.memoizedState ? (previousHoistableRoot = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(
                fiber,
                committedLanes,
                suspendedState
              ), suspenseyCommitFlag = previousHoistableRoot) : recursivelyAccumulateSuspenseyCommit(
                fiber,
                committedLanes,
                suspendedState
              ));
              break;
            default:
              recursivelyAccumulateSuspenseyCommit(
                fiber,
                committedLanes,
                suspendedState
              );
          }
        }
        function detachAlternateSiblings(parentFiber) {
          var previousFiber = parentFiber.alternate;
          if (null !== previousFiber && (parentFiber = previousFiber.child, null !== parentFiber)) {
            previousFiber.child = null;
            do
              previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber;
            while (null !== parentFiber);
          }
        }
        function recursivelyTraversePassiveUnmountEffects(parentFiber) {
          var deletions = parentFiber.deletions;
          if (0 !== (parentFiber.flags & 16)) {
            if (null !== deletions)
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i], prevEffectStart = pushComponentEffectStart();
                nextEffect = childToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
                  childToDelete,
                  parentFiber
                );
                (childToDelete.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentTrigger(
                  childToDelete,
                  componentEffectStartTime,
                  componentEffectEndTime,
                  "Unmount"
                );
                popComponentEffectStart(prevEffectStart);
              }
            detachAlternateSiblings(parentFiber);
          }
          if (parentFiber.subtreeFlags & 10256)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
              commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate();
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraversePassiveUnmountEffects(finishedWork);
              finishedWork.flags & 2048 && commitHookPassiveUnmountEffects(
                finishedWork,
                finishedWork.return,
                Passive | HasEffect
              );
              break;
            case 3:
              var prevProfilerEffectDuration = pushNestedEffectDurations();
              recursivelyTraversePassiveUnmountEffects(finishedWork);
              finishedWork.stateNode.passiveEffectDuration += popNestedEffectDurations(prevProfilerEffectDuration);
              break;
            case 12:
              prevProfilerEffectDuration = pushNestedEffectDurations();
              recursivelyTraversePassiveUnmountEffects(finishedWork);
              finishedWork.stateNode.passiveEffectDuration += bubbleNestedEffectDurations(prevProfilerEffectDuration);
              break;
            case 22:
              prevProfilerEffectDuration = finishedWork.stateNode;
              null !== finishedWork.memoizedState && prevProfilerEffectDuration._visibility & OffscreenPassiveEffectsConnected && (null === finishedWork.return || 13 !== finishedWork.return.tag) ? (prevProfilerEffectDuration._visibility &= ~OffscreenPassiveEffectsConnected, recursivelyTraverseDisconnectPassiveEffects(finishedWork), (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentTrigger(
                finishedWork,
                componentEffectStartTime,
                componentEffectEndTime,
                "Disconnect"
              )) : recursivelyTraversePassiveUnmountEffects(finishedWork);
              break;
            default:
              recursivelyTraversePassiveUnmountEffects(finishedWork);
          }
          (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && (componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(
            finishedWork,
            componentEffectStartTime,
            componentEffectEndTime,
            componentEffectDuration,
            componentEffectErrors
          );
          popComponentEffectStart(prevEffectStart);
          popComponentEffectDuration(prevEffectDuration);
          componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
          componentEffectErrors = prevEffectErrors;
        }
        function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
          var deletions = parentFiber.deletions;
          if (0 !== (parentFiber.flags & 16)) {
            if (null !== deletions)
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i], prevEffectStart = pushComponentEffectStart();
                nextEffect = childToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
                  childToDelete,
                  parentFiber
                );
                (childToDelete.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && 0.05 < componentEffectEndTime - componentEffectStartTime && logComponentTrigger(
                  childToDelete,
                  componentEffectStartTime,
                  componentEffectEndTime,
                  "Unmount"
                );
                popComponentEffectStart(prevEffectStart);
              }
            detachAlternateSiblings(parentFiber);
          }
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            disconnectPassiveEffect(parentFiber), parentFiber = parentFiber.sibling;
        }
        function disconnectPassiveEffect(finishedWork) {
          var prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate();
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              commitHookPassiveUnmountEffects(
                finishedWork,
                finishedWork.return,
                Passive
              );
              recursivelyTraverseDisconnectPassiveEffects(finishedWork);
              break;
            case 22:
              var instance = finishedWork.stateNode;
              instance._visibility & OffscreenPassiveEffectsConnected && (instance._visibility &= ~OffscreenPassiveEffectsConnected, recursivelyTraverseDisconnectPassiveEffects(finishedWork));
              break;
            default:
              recursivelyTraverseDisconnectPassiveEffects(finishedWork);
          }
          (finishedWork.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && (componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(
            finishedWork,
            componentEffectStartTime,
            componentEffectEndTime,
            componentEffectDuration,
            componentEffectErrors
          );
          popComponentEffectStart(prevEffectStart);
          popComponentEffectDuration(prevEffectDuration);
          componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
          componentEffectErrors = prevEffectErrors;
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor$jscomp$0) {
          for (; null !== nextEffect; ) {
            var fiber = nextEffect, current2 = fiber, nearestMountedAncestor = nearestMountedAncestor$jscomp$0, prevEffectStart = pushComponentEffectStart(), prevEffectDuration = pushComponentEffectDuration(), prevEffectErrors = pushComponentEffectErrors(), prevEffectDidSpawnUpdate = pushComponentEffectDidSpawnUpdate();
            switch (current2.tag) {
              case 0:
              case 11:
              case 15:
                commitHookPassiveUnmountEffects(
                  current2,
                  nearestMountedAncestor,
                  Passive
                );
                break;
              case 23:
              case 22:
                null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (nearestMountedAncestor = current2.memoizedState.cachePool.pool, null != nearestMountedAncestor && retainCache(nearestMountedAncestor));
                break;
              case 24:
                releaseCache(current2.memoizedState.cache);
            }
            (current2.mode & ProfileMode) !== NoMode && 0 <= componentEffectStartTime && 0 <= componentEffectEndTime && (componentEffectSpawnedUpdate || 0.05 < componentEffectDuration) && logComponentEffect(
              current2,
              componentEffectStartTime,
              componentEffectEndTime,
              componentEffectDuration,
              componentEffectErrors
            );
            popComponentEffectStart(prevEffectStart);
            popComponentEffectDuration(prevEffectDuration);
            componentEffectSpawnedUpdate = prevEffectDidSpawnUpdate;
            componentEffectErrors = prevEffectErrors;
            current2 = fiber.child;
            if (null !== current2) current2.return = fiber, nextEffect = current2;
            else
              a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
                current2 = nextEffect;
                prevEffectStart = current2.sibling;
                prevEffectDuration = current2.return;
                detachFiberAfterEffects(current2);
                if (current2 === fiber) {
                  nextEffect = null;
                  break a;
                }
                if (null !== prevEffectStart) {
                  prevEffectStart.return = prevEffectDuration;
                  nextEffect = prevEffectStart;
                  break a;
                }
                nextEffect = prevEffectDuration;
              }
          }
        }
        function onCommitRoot() {
          commitHooks.forEach(function(commitHook) {
            return commitHook();
          });
        }
        function isConcurrentActEnvironment() {
          var isReactActEnvironmentGlobal = "undefined" !== typeof IS_REACT_ACT_ENVIRONMENT ? IS_REACT_ACT_ENVIRONMENT : void 0;
          isReactActEnvironmentGlobal || null === ReactSharedInternals.actQueue || console.error(
            "The current testing environment is not configured to support act(...)"
          );
          return isReactActEnvironmentGlobal;
        }
        function requestUpdateLane(fiber) {
          if ((executionContext & RenderContext) !== NoContext && 0 !== workInProgressRootRenderLanes)
            return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
          var transition = ReactSharedInternals.T;
          return null !== transition ? (transition._updatedFibers || (transition._updatedFibers = /* @__PURE__ */ new Set()), transition._updatedFibers.add(fiber), requestTransitionLane()) : resolveUpdatePriority();
        }
        function requestDeferredLane() {
          if (0 === workInProgressDeferredLane)
            if (0 === (workInProgressRootRenderLanes & 536870912) || isHydrating) {
              var lane = nextTransitionDeferredLane;
              nextTransitionDeferredLane <<= 1;
              0 === (nextTransitionDeferredLane & 3932160) && (nextTransitionDeferredLane = 262144);
              workInProgressDeferredLane = lane;
            } else workInProgressDeferredLane = 536870912;
          lane = suspenseHandlerStackCursor.current;
          null !== lane && (lane.flags |= 32);
          return workInProgressDeferredLane;
        }
        function scheduleUpdateOnFiber(root3, fiber, lane) {
          isRunningInsertionEffect && console.error("useInsertionEffect must not schedule updates.");
          isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = true);
          if (root3 === workInProgressRoot && (workInProgressSuspendedReason === SuspendedOnData || workInProgressSuspendedReason === SuspendedOnAction) || null !== root3.cancelPendingCommit)
            prepareFreshStack(root3, 0), markRootSuspended(
              root3,
              workInProgressRootRenderLanes,
              workInProgressDeferredLane,
              false
            );
          markRootUpdated$1(root3, lane);
          if ((executionContext & RenderContext) !== NoContext && root3 === workInProgressRoot) {
            if (isRendering)
              switch (fiber.tag) {
                case 0:
                case 11:
                case 15:
                  root3 = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  didWarnAboutUpdateInRenderForAnotherComponent.has(root3) || (didWarnAboutUpdateInRenderForAnotherComponent.add(root3), fiber = getComponentNameFromFiber(fiber) || "Unknown", console.error(
                    "Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://react.dev/link/setstate-in-render",
                    fiber,
                    root3,
                    root3
                  ));
                  break;
                case 1:
                  didWarnAboutUpdateInRender || (console.error(
                    "Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."
                  ), didWarnAboutUpdateInRender = true);
              }
          } else
            isDevToolsPresent && addFiberToLanesMap(root3, fiber, lane), warnIfUpdatesNotWrappedWithActDEV(fiber), root3 === workInProgressRoot && ((executionContext & RenderContext) === NoContext && (workInProgressRootInterleavedUpdatedLanes |= lane), workInProgressRootExitStatus === RootSuspendedWithDelay && markRootSuspended(
              root3,
              workInProgressRootRenderLanes,
              workInProgressDeferredLane,
              false
            )), ensureRootIsScheduled(root3);
        }
        function performWorkOnRoot(root3, lanes, forceSync) {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
            throw Error("Should not already be working.");
          if (0 !== workInProgressRootRenderLanes && null !== workInProgress) {
            var yieldedFiber = workInProgress, yieldEndTime = now$1();
            switch (yieldReason) {
              case SuspendedOnImmediate:
              case SuspendedOnData:
                var startTime = yieldStartTime;
                supportsUserTiming && ((yieldedFiber = yieldedFiber._debugTask) ? yieldedFiber.run(
                  console.timeStamp.bind(
                    console,
                    "Suspended",
                    startTime,
                    yieldEndTime,
                    COMPONENTS_TRACK,
                    void 0,
                    "primary-light"
                  )
                ) : console.timeStamp(
                  "Suspended",
                  startTime,
                  yieldEndTime,
                  COMPONENTS_TRACK,
                  void 0,
                  "primary-light"
                ));
                break;
              case SuspendedOnAction:
                startTime = yieldStartTime;
                supportsUserTiming && ((yieldedFiber = yieldedFiber._debugTask) ? yieldedFiber.run(
                  console.timeStamp.bind(
                    console,
                    "Action",
                    startTime,
                    yieldEndTime,
                    COMPONENTS_TRACK,
                    void 0,
                    "primary-light"
                  )
                ) : console.timeStamp(
                  "Action",
                  startTime,
                  yieldEndTime,
                  COMPONENTS_TRACK,
                  void 0,
                  "primary-light"
                ));
                break;
              default:
                supportsUserTiming && (yieldedFiber = yieldEndTime - yieldStartTime, 3 > yieldedFiber || console.timeStamp(
                  "Blocked",
                  yieldStartTime,
                  yieldEndTime,
                  COMPONENTS_TRACK,
                  void 0,
                  5 > yieldedFiber ? "primary-light" : 10 > yieldedFiber ? "primary" : 100 > yieldedFiber ? "primary-dark" : "error"
                ));
            }
          }
          startTime = (forceSync = !forceSync && 0 === (lanes & 127) && 0 === (lanes & root3.expiredLanes) || checkIfRootIsPrerendering(root3, lanes)) ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes, true);
          var renderWasConcurrent = forceSync;
          do {
            if (startTime === RootInProgress) {
              workInProgressRootIsPrerendering && !forceSync && markRootSuspended(root3, lanes, 0, false);
              lanes = workInProgressSuspendedReason;
              yieldStartTime = now();
              yieldReason = lanes;
              break;
            } else {
              yieldedFiber = now$1();
              yieldEndTime = root3.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(yieldEndTime)) {
                setCurrentTrackFromLanes(lanes);
                yieldEndTime = renderStartTime;
                startTime = yieldedFiber;
                !supportsUserTiming || startTime <= yieldEndTime || (workInProgressUpdateTask ? workInProgressUpdateTask.run(
                  console.timeStamp.bind(
                    console,
                    "Teared Render",
                    yieldEndTime,
                    startTime,
                    currentTrack,
                    LANES_TRACK_GROUP,
                    "error"
                  )
                ) : console.timeStamp(
                  "Teared Render",
                  yieldEndTime,
                  startTime,
                  currentTrack,
                  LANES_TRACK_GROUP,
                  "error"
                ));
                finalizeRender(lanes, yieldedFiber);
                startTime = renderRootSync(root3, lanes, false);
                renderWasConcurrent = false;
                continue;
              }
              if (startTime === RootErrored) {
                renderWasConcurrent = lanes;
                if (root3.errorRecoveryDisabledLanes & renderWasConcurrent)
                  var errorRetryLanes = 0;
                else
                  errorRetryLanes = root3.pendingLanes & -536870913, errorRetryLanes = 0 !== errorRetryLanes ? errorRetryLanes : errorRetryLanes & 536870912 ? 536870912 : 0;
                if (0 !== errorRetryLanes) {
                  setCurrentTrackFromLanes(lanes);
                  logErroredRenderPhase(
                    renderStartTime,
                    yieldedFiber,
                    lanes,
                    workInProgressUpdateTask
                  );
                  finalizeRender(lanes, yieldedFiber);
                  lanes = errorRetryLanes;
                  a: {
                    yieldedFiber = root3;
                    startTime = renderWasConcurrent;
                    renderWasConcurrent = workInProgressRootConcurrentErrors;
                    var wasRootDehydrated = yieldedFiber.current.memoizedState.isDehydrated;
                    wasRootDehydrated && (prepareFreshStack(yieldedFiber, errorRetryLanes).flags |= 256);
                    errorRetryLanes = renderRootSync(
                      yieldedFiber,
                      errorRetryLanes,
                      false
                    );
                    if (errorRetryLanes !== RootErrored) {
                      if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {
                        yieldedFiber.errorRecoveryDisabledLanes |= startTime;
                        workInProgressRootInterleavedUpdatedLanes |= startTime;
                        startTime = RootSuspendedWithDelay;
                        break a;
                      }
                      yieldedFiber = workInProgressRootRecoverableErrors;
                      workInProgressRootRecoverableErrors = renderWasConcurrent;
                      null !== yieldedFiber && (null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = yieldedFiber : workInProgressRootRecoverableErrors.push.apply(
                        workInProgressRootRecoverableErrors,
                        yieldedFiber
                      ));
                    }
                    startTime = errorRetryLanes;
                  }
                  renderWasConcurrent = false;
                  if (startTime !== RootErrored) continue;
                  else yieldedFiber = now$1();
                }
              }
              if (startTime === RootFatalErrored) {
                setCurrentTrackFromLanes(lanes);
                logErroredRenderPhase(
                  renderStartTime,
                  yieldedFiber,
                  lanes,
                  workInProgressUpdateTask
                );
                finalizeRender(lanes, yieldedFiber);
                prepareFreshStack(root3, 0);
                markRootSuspended(root3, lanes, 0, true);
                break;
              }
              a: {
                forceSync = root3;
                switch (startTime) {
                  case RootInProgress:
                  case RootFatalErrored:
                    throw Error("Root did not complete. This is a bug in React.");
                  case RootSuspendedWithDelay:
                    if ((lanes & 4194048) !== lanes) break;
                  case RootSuspendedAtTheShell:
                    setCurrentTrackFromLanes(lanes);
                    logSuspendedRenderPhase(
                      renderStartTime,
                      yieldedFiber,
                      lanes,
                      workInProgressUpdateTask
                    );
                    finalizeRender(lanes, yieldedFiber);
                    yieldEndTime = lanes;
                    0 !== (yieldEndTime & 127) ? blockingSuspendedTime = yieldedFiber : 0 !== (yieldEndTime & 4194048) && (transitionSuspendedTime = yieldedFiber);
                    markRootSuspended(
                      forceSync,
                      lanes,
                      workInProgressDeferredLane,
                      !workInProgressRootDidSkipSuspendedSiblings
                    );
                    break a;
                  case RootErrored:
                    workInProgressRootRecoverableErrors = null;
                    break;
                  case RootSuspended:
                  case RootCompleted:
                    break;
                  default:
                    throw Error("Unknown root exit status.");
                }
                if (null !== ReactSharedInternals.actQueue)
                  commitRoot(
                    forceSync,
                    yieldEndTime,
                    lanes,
                    workInProgressRootRecoverableErrors,
                    workInProgressTransitions,
                    workInProgressRootDidIncludeRecursiveRenderUpdate,
                    workInProgressDeferredLane,
                    workInProgressRootInterleavedUpdatedLanes,
                    workInProgressSuspendedRetryLanes,
                    startTime,
                    null,
                    null,
                    renderStartTime,
                    yieldedFiber
                  );
                else {
                  if ((lanes & 62914560) === lanes && (renderWasConcurrent = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(), 10 < renderWasConcurrent)) {
                    markRootSuspended(
                      forceSync,
                      lanes,
                      workInProgressDeferredLane,
                      !workInProgressRootDidSkipSuspendedSiblings
                    );
                    if (0 !== getNextLanes(forceSync, 0, true)) break a;
                    pendingEffectsLanes = lanes;
                    forceSync.timeoutHandle = scheduleTimeout(
                      commitRootWhenReady.bind(
                        null,
                        forceSync,
                        yieldEndTime,
                        workInProgressRootRecoverableErrors,
                        workInProgressTransitions,
                        workInProgressRootDidIncludeRecursiveRenderUpdate,
                        lanes,
                        workInProgressDeferredLane,
                        workInProgressRootInterleavedUpdatedLanes,
                        workInProgressSuspendedRetryLanes,
                        workInProgressRootDidSkipSuspendedSiblings,
                        startTime,
                        "Throttled",
                        renderStartTime,
                        yieldedFiber
                      ),
                      renderWasConcurrent
                    );
                    break a;
                  }
                  commitRootWhenReady(
                    forceSync,
                    yieldEndTime,
                    workInProgressRootRecoverableErrors,
                    workInProgressTransitions,
                    workInProgressRootDidIncludeRecursiveRenderUpdate,
                    lanes,
                    workInProgressDeferredLane,
                    workInProgressRootInterleavedUpdatedLanes,
                    workInProgressSuspendedRetryLanes,
                    workInProgressRootDidSkipSuspendedSiblings,
                    startTime,
                    null,
                    renderStartTime,
                    yieldedFiber
                  );
                }
              }
            }
            break;
          } while (1);
          ensureRootIsScheduled(root3);
        }
        function commitRootWhenReady(root3, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, exitStatus, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
          root3.timeoutHandle = noTimeout;
          var subtreeFlags = finishedWork.subtreeFlags, suspendedState = null;
          if (subtreeFlags & 8192 || 16785408 === (subtreeFlags & 16785408)) {
            if (suspendedState = {
              stylesheets: null,
              count: 0,
              imgCount: 0,
              imgBytes: 0,
              suspenseyImages: [],
              waitingForImages: true,
              waitingForViewTransition: false,
              unsuspend: noop$1
            }, accumulateSuspenseyCommitOnFiber(finishedWork, lanes, suspendedState), subtreeFlags = (lanes & 62914560) === lanes ? globalMostRecentFallbackTime - now$1() : (lanes & 4194048) === lanes ? globalMostRecentTransitionTime - now$1() : 0, subtreeFlags = waitForCommitToBeReady(suspendedState, subtreeFlags), null !== subtreeFlags) {
              pendingEffectsLanes = lanes;
              root3.cancelPendingCommit = subtreeFlags(
                commitRoot.bind(
                  null,
                  root3,
                  finishedWork,
                  lanes,
                  recoverableErrors,
                  transitions,
                  didIncludeRenderPhaseUpdate,
                  spawnedLane,
                  updatedLanes,
                  suspendedRetryLanes,
                  exitStatus,
                  suspendedState,
                  suspendedState.waitingForViewTransition ? "Waiting for the previous Animation" : 0 < suspendedState.count ? 0 < suspendedState.imgCount ? "Suspended on CSS and Images" : "Suspended on CSS" : 1 === suspendedState.imgCount ? "Suspended on an Image" : 0 < suspendedState.imgCount ? "Suspended on Images" : null,
                  completedRenderStartTime,
                  completedRenderEndTime
                )
              );
              markRootSuspended(
                root3,
                lanes,
                spawnedLane,
                !didSkipSuspendedSiblings
              );
              return;
            }
          }
          commitRoot(
            root3,
            finishedWork,
            lanes,
            recoverableErrors,
            transitions,
            didIncludeRenderPhaseUpdate,
            spawnedLane,
            updatedLanes,
            suspendedRetryLanes,
            exitStatus,
            suspendedState,
            suspendedCommitReason,
            completedRenderStartTime,
            completedRenderEndTime
          );
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          for (var node = finishedWork; ; ) {
            var tag = node.tag;
            if ((0 === tag || 11 === tag || 15 === tag) && node.flags & 16384 && (tag = node.updateQueue, null !== tag && (tag = tag.stores, null !== tag)))
              for (var i = 0; i < tag.length; i++) {
                var check = tag[i], getSnapshot = check.getSnapshot;
                check = check.value;
                try {
                  if (!objectIs(getSnapshot(), check)) return false;
                } catch (error) {
                  return false;
                }
              }
            tag = node.child;
            if (node.subtreeFlags & 16384 && null !== tag)
              tag.return = node, node = tag;
            else {
              if (node === finishedWork) break;
              for (; null === node.sibling; ) {
                if (null === node.return || node.return === finishedWork) return true;
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return true;
        }
        function markRootSuspended(root3, suspendedLanes, spawnedLane, didAttemptEntireTree) {
          suspendedLanes &= ~workInProgressRootPingedLanes;
          suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
          root3.suspendedLanes |= suspendedLanes;
          root3.pingedLanes &= ~suspendedLanes;
          didAttemptEntireTree && (root3.warmLanes |= suspendedLanes);
          didAttemptEntireTree = root3.expirationTimes;
          for (var lanes = suspendedLanes; 0 < lanes; ) {
            var index = 31 - clz32(lanes), lane = 1 << index;
            didAttemptEntireTree[index] = -1;
            lanes &= ~lane;
          }
          0 !== spawnedLane && markSpawnedDeferredLane(root3, spawnedLane, suspendedLanes);
        }
        function flushSyncWork$1() {
          return (executionContext & (RenderContext | CommitContext)) === NoContext ? (flushSyncWorkAcrossRoots_impl(0, false), false) : true;
        }
        function resetWorkInProgressStack() {
          if (null !== workInProgress) {
            if (workInProgressSuspendedReason === NotSuspended)
              var interruptedWork = workInProgress.return;
            else
              interruptedWork = workInProgress, resetContextDependencies(), resetHooksOnUnwind(interruptedWork), thenableState$1 = null, thenableIndexCounter$1 = 0, interruptedWork = workInProgress;
            for (; null !== interruptedWork; )
              unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
            workInProgress = null;
          }
        }
        function finalizeRender(lanes, finalizationTime) {
          0 !== (lanes & 127) && (blockingClampTime = finalizationTime);
          0 !== (lanes & 4194048) && (transitionClampTime = finalizationTime);
          0 !== (lanes & 62914560) && (retryClampTime = finalizationTime);
          0 !== (lanes & 2080374784) && (idleClampTime = finalizationTime);
        }
        function prepareFreshStack(root3, lanes) {
          supportsUserTiming && (console.timeStamp(
            "Blocking Track",
            3e-3,
            3e-3,
            "Blocking",
            LANES_TRACK_GROUP,
            "primary-light"
          ), console.timeStamp(
            "Transition Track",
            3e-3,
            3e-3,
            "Transition",
            LANES_TRACK_GROUP,
            "primary-light"
          ), console.timeStamp(
            "Suspense Track",
            3e-3,
            3e-3,
            "Suspense",
            LANES_TRACK_GROUP,
            "primary-light"
          ), console.timeStamp(
            "Idle Track",
            3e-3,
            3e-3,
            "Idle",
            LANES_TRACK_GROUP,
            "primary-light"
          ));
          var previousRenderStartTime = renderStartTime;
          renderStartTime = now();
          if (0 !== workInProgressRootRenderLanes && 0 < previousRenderStartTime) {
            setCurrentTrackFromLanes(workInProgressRootRenderLanes);
            if (workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootSuspendedWithDelay)
              logSuspendedRenderPhase(
                previousRenderStartTime,
                renderStartTime,
                lanes,
                workInProgressUpdateTask
              );
            else {
              var endTime = renderStartTime, debugTask = workInProgressUpdateTask;
              if (supportsUserTiming && !(endTime <= previousRenderStartTime)) {
                var color = (lanes & 738197653) === lanes ? "tertiary-dark" : "primary-dark", label = (lanes & 536870912) === lanes ? "Prewarm" : (lanes & 201326741) === lanes ? "Interrupted Hydration" : "Interrupted Render";
                debugTask ? debugTask.run(
                  console.timeStamp.bind(
                    console,
                    label,
                    previousRenderStartTime,
                    endTime,
                    currentTrack,
                    LANES_TRACK_GROUP,
                    color
                  )
                ) : console.timeStamp(
                  label,
                  previousRenderStartTime,
                  endTime,
                  currentTrack,
                  LANES_TRACK_GROUP,
                  color
                );
              }
            }
            finalizeRender(workInProgressRootRenderLanes, renderStartTime);
          }
          previousRenderStartTime = workInProgressUpdateTask;
          workInProgressUpdateTask = null;
          if (0 !== (lanes & 127)) {
            workInProgressUpdateTask = blockingUpdateTask;
            debugTask = 0 <= blockingUpdateTime && blockingUpdateTime < blockingClampTime ? blockingClampTime : blockingUpdateTime;
            endTime = 0 <= blockingEventTime && blockingEventTime < blockingClampTime ? blockingClampTime : blockingEventTime;
            color = 0 <= endTime ? endTime : 0 <= debugTask ? debugTask : renderStartTime;
            0 <= blockingSuspendedTime ? (setCurrentTrackFromLanes(2), logSuspendedWithDelayPhase(
              blockingSuspendedTime,
              color,
              lanes,
              previousRenderStartTime
            )) : 0 !== (animatingLanes & 127) && (setCurrentTrackFromLanes(2), logAnimatingPhase(blockingClampTime, color, animatingTask));
            previousRenderStartTime = debugTask;
            var eventTime = endTime, eventType = blockingEventType, eventIsRepeat = 0 < blockingEventRepeatTime, isSpawnedUpdate = blockingUpdateType === SPAWNED_UPDATE, isPingedUpdate = blockingUpdateType === PINGED_UPDATE;
            debugTask = renderStartTime;
            endTime = blockingUpdateTask;
            color = blockingUpdateMethodName;
            label = blockingUpdateComponentName;
            if (supportsUserTiming) {
              currentTrack = "Blocking";
              0 < previousRenderStartTime ? previousRenderStartTime > debugTask && (previousRenderStartTime = debugTask) : previousRenderStartTime = debugTask;
              0 < eventTime ? eventTime > previousRenderStartTime && (eventTime = previousRenderStartTime) : eventTime = previousRenderStartTime;
              if (null !== eventType && previousRenderStartTime > eventTime) {
                var color$jscomp$0 = eventIsRepeat ? "secondary-light" : "warning";
                endTime ? endTime.run(
                  console.timeStamp.bind(
                    console,
                    eventIsRepeat ? "Consecutive" : "Event: " + eventType,
                    eventTime,
                    previousRenderStartTime,
                    currentTrack,
                    LANES_TRACK_GROUP,
                    color$jscomp$0
                  )
                ) : console.timeStamp(
                  eventIsRepeat ? "Consecutive" : "Event: " + eventType,
                  eventTime,
                  previousRenderStartTime,
                  currentTrack,
                  LANES_TRACK_GROUP,
                  color$jscomp$0
                );
              }
              debugTask > previousRenderStartTime && (eventTime = isSpawnedUpdate ? "error" : (lanes & 738197653) === lanes ? "tertiary-light" : "primary-light", isSpawnedUpdate = isPingedUpdate ? "Promise Resolved" : isSpawnedUpdate ? "Cascading Update" : 5 < debugTask - previousRenderStartTime ? "Update Blocked" : "Update", isPingedUpdate = [], null != label && isPingedUpdate.push(["Component name", label]), null != color && isPingedUpdate.push(["Method name", color]), previousRenderStartTime = {
                start: previousRenderStartTime,
                end: debugTask,
                detail: {
                  devtools: {
                    properties: isPingedUpdate,
                    track: currentTrack,
                    trackGroup: LANES_TRACK_GROUP,
                    color: eventTime
                  }
                }
              }, endTime ? endTime.run(
                performance.measure.bind(
                  performance,
                  isSpawnedUpdate,
                  previousRenderStartTime
                )
              ) : performance.measure(isSpawnedUpdate, previousRenderStartTime));
            }
            blockingUpdateTime = -1.1;
            blockingUpdateType = 0;
            blockingUpdateComponentName = blockingUpdateMethodName = null;
            blockingSuspendedTime = -1.1;
            blockingEventRepeatTime = blockingEventTime;
            blockingEventTime = -1.1;
            blockingClampTime = now();
          }
          0 !== (lanes & 4194048) && (workInProgressUpdateTask = transitionUpdateTask, debugTask = 0 <= transitionStartTime && transitionStartTime < transitionClampTime ? transitionClampTime : transitionStartTime, previousRenderStartTime = 0 <= transitionUpdateTime && transitionUpdateTime < transitionClampTime ? transitionClampTime : transitionUpdateTime, endTime = 0 <= transitionEventTime && transitionEventTime < transitionClampTime ? transitionClampTime : transitionEventTime, color = 0 <= endTime ? endTime : 0 <= previousRenderStartTime ? previousRenderStartTime : renderStartTime, 0 <= transitionSuspendedTime ? (setCurrentTrackFromLanes(256), logSuspendedWithDelayPhase(
            transitionSuspendedTime,
            color,
            lanes,
            workInProgressUpdateTask
          )) : 0 !== (animatingLanes & 4194048) && (setCurrentTrackFromLanes(256), logAnimatingPhase(transitionClampTime, color, animatingTask)), isPingedUpdate = endTime, eventTime = transitionEventType, eventType = 0 < transitionEventRepeatTime, eventIsRepeat = transitionUpdateType === PINGED_UPDATE, color = renderStartTime, endTime = transitionUpdateTask, label = transitionUpdateMethodName, isSpawnedUpdate = transitionUpdateComponentName, supportsUserTiming && (currentTrack = "Transition", 0 < previousRenderStartTime ? previousRenderStartTime > color && (previousRenderStartTime = color) : previousRenderStartTime = color, 0 < debugTask ? debugTask > previousRenderStartTime && (debugTask = previousRenderStartTime) : debugTask = previousRenderStartTime, 0 < isPingedUpdate ? isPingedUpdate > debugTask && (isPingedUpdate = debugTask) : isPingedUpdate = debugTask, debugTask > isPingedUpdate && null !== eventTime && (color$jscomp$0 = eventType ? "secondary-light" : "warning", endTime ? endTime.run(
            console.timeStamp.bind(
              console,
              eventType ? "Consecutive" : "Event: " + eventTime,
              isPingedUpdate,
              debugTask,
              currentTrack,
              LANES_TRACK_GROUP,
              color$jscomp$0
            )
          ) : console.timeStamp(
            eventType ? "Consecutive" : "Event: " + eventTime,
            isPingedUpdate,
            debugTask,
            currentTrack,
            LANES_TRACK_GROUP,
            color$jscomp$0
          )), previousRenderStartTime > debugTask && (endTime ? endTime.run(
            console.timeStamp.bind(
              console,
              "Action",
              debugTask,
              previousRenderStartTime,
              currentTrack,
              LANES_TRACK_GROUP,
              "primary-dark"
            )
          ) : console.timeStamp(
            "Action",
            debugTask,
            previousRenderStartTime,
            currentTrack,
            LANES_TRACK_GROUP,
            "primary-dark"
          )), color > previousRenderStartTime && (debugTask = eventIsRepeat ? "Promise Resolved" : 5 < color - previousRenderStartTime ? "Update Blocked" : "Update", isPingedUpdate = [], null != isSpawnedUpdate && isPingedUpdate.push(["Component name", isSpawnedUpdate]), null != label && isPingedUpdate.push(["Method name", label]), previousRenderStartTime = {
            start: previousRenderStartTime,
            end: color,
            detail: {
              devtools: {
                properties: isPingedUpdate,
                track: currentTrack,
                trackGroup: LANES_TRACK_GROUP,
                color: "primary-light"
              }
            }
          }, endTime ? endTime.run(
            performance.measure.bind(
              performance,
              debugTask,
              previousRenderStartTime
            )
          ) : performance.measure(debugTask, previousRenderStartTime))), transitionUpdateTime = transitionStartTime = -1.1, transitionUpdateType = 0, transitionSuspendedTime = -1.1, transitionEventRepeatTime = transitionEventTime, transitionEventTime = -1.1, transitionClampTime = now());
          0 !== (lanes & 62914560) && 0 !== (animatingLanes & 62914560) && (setCurrentTrackFromLanes(4194304), logAnimatingPhase(retryClampTime, renderStartTime, animatingTask));
          0 !== (lanes & 2080374784) && 0 !== (animatingLanes & 2080374784) && (setCurrentTrackFromLanes(268435456), logAnimatingPhase(idleClampTime, renderStartTime, animatingTask));
          previousRenderStartTime = root3.timeoutHandle;
          previousRenderStartTime !== noTimeout && (root3.timeoutHandle = noTimeout, cancelTimeout(previousRenderStartTime));
          previousRenderStartTime = root3.cancelPendingCommit;
          null !== previousRenderStartTime && (root3.cancelPendingCommit = null, previousRenderStartTime());
          pendingEffectsLanes = 0;
          resetWorkInProgressStack();
          workInProgressRoot = root3;
          workInProgress = previousRenderStartTime = createWorkInProgress(
            root3.current,
            null
          );
          workInProgressRootRenderLanes = lanes;
          workInProgressSuspendedReason = NotSuspended;
          workInProgressThrownValue = null;
          workInProgressRootDidSkipSuspendedSiblings = false;
          workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root3, lanes);
          workInProgressRootDidAttachPingListener = false;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = 0;
          workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
          workInProgressRootDidIncludeRecursiveRenderUpdate = false;
          0 !== (lanes & 8) && (lanes |= lanes & 32);
          endTime = root3.entangledLanes;
          if (0 !== endTime)
            for (root3 = root3.entanglements, endTime &= lanes; 0 < endTime; )
              debugTask = 31 - clz32(endTime), color = 1 << debugTask, lanes |= root3[debugTask], endTime &= ~color;
          entangledRenderLanes = lanes;
          finishQueueingConcurrentUpdates();
          root3 = getCurrentTime();
          1e3 < root3 - lastResetTime && (ReactSharedInternals.recentlyCreatedOwnerStacks = 0, lastResetTime = root3);
          ReactStrictModeWarnings.discardPendingWarnings();
          return previousRenderStartTime;
        }
        function handleThrow(root3, thrownValue) {
          currentlyRenderingFiber = null;
          ReactSharedInternals.H = ContextOnlyDispatcher;
          ReactSharedInternals.getCurrentStack = null;
          isRendering = false;
          current = null;
          thrownValue === SuspenseException || thrownValue === SuspenseActionException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = SuspendedOnImmediate) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = SuspendedOnInstance) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? SuspendedOnHydration : null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then ? SuspendedOnDeprecatedThrowPromise : SuspendedOnError;
          workInProgressThrownValue = thrownValue;
          var erroredWork = workInProgress;
          null === erroredWork ? (workInProgressRootExitStatus = RootFatalErrored, logUncaughtError(
            root3,
            createCapturedValueAtFiber(thrownValue, root3.current)
          )) : erroredWork.mode & ProfileMode && stopProfilerTimerIfRunningAndRecordDuration(erroredWork);
        }
        function shouldRemainOnPreviousScreen() {
          var handler = suspenseHandlerStackCursor.current;
          return null === handler ? true : (workInProgressRootRenderLanes & 4194048) === workInProgressRootRenderLanes ? null === shellBoundary ? true : false : (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes || 0 !== (workInProgressRootRenderLanes & 536870912) ? handler === shellBoundary : false;
        }
        function pushDispatcher() {
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = ContextOnlyDispatcher;
          return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
        }
        function pushAsyncDispatcher() {
          var prevAsyncDispatcher = ReactSharedInternals.A;
          ReactSharedInternals.A = DefaultAsyncDispatcher;
          return prevAsyncDispatcher;
        }
        function markRenderDerivedCause(fiber) {
          null === workInProgressUpdateTask && (workInProgressUpdateTask = null == fiber._debugTask ? null : fiber._debugTask);
        }
        function renderDidSuspendDelayIfPossible() {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
          workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194048) !== workInProgressRootRenderLanes && null !== suspenseHandlerStackCursor.current || (workInProgressRootIsPrerendering = true);
          0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) || null === workInProgressRoot || markRootSuspended(
            workInProgressRoot,
            workInProgressRootRenderLanes,
            workInProgressDeferredLane,
            false
          );
        }
        function renderRootSync(root3, lanes, shouldYieldForPrerendering) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
          if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root3.memoizedUpdaters;
              0 < memoizedUpdaters.size && (restorePendingUpdaters(root3, workInProgressRootRenderLanes), memoizedUpdaters.clear());
              movePendingFibersToMemoized(root3, lanes);
            }
            workInProgressTransitions = null;
            prepareFreshStack(root3, lanes);
          }
          lanes = false;
          memoizedUpdaters = workInProgressRootExitStatus;
          a: do
            try {
              if (workInProgressSuspendedReason !== NotSuspended && null !== workInProgress) {
                var unitOfWork = workInProgress, thrownValue = workInProgressThrownValue;
                switch (workInProgressSuspendedReason) {
                  case SuspendedOnHydration:
                    resetWorkInProgressStack();
                    memoizedUpdaters = RootSuspendedAtTheShell;
                    break a;
                  case SuspendedOnImmediate:
                  case SuspendedOnData:
                  case SuspendedOnAction:
                  case SuspendedOnDeprecatedThrowPromise:
                    null === suspenseHandlerStackCursor.current && (lanes = true);
                    var reason = workInProgressSuspendedReason;
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root3, unitOfWork, thrownValue, reason);
                    if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
                      memoizedUpdaters = RootInProgress;
                      break a;
                    }
                    break;
                  default:
                    reason = workInProgressSuspendedReason, workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root3, unitOfWork, thrownValue, reason);
                }
              }
              workLoopSync();
              memoizedUpdaters = workInProgressRootExitStatus;
              break;
            } catch (thrownValue$8) {
              handleThrow(root3, thrownValue$8);
            }
          while (1);
          lanes && root3.shellSuspendCounter++;
          resetContextDependencies();
          executionContext = prevExecutionContext;
          ReactSharedInternals.H = prevDispatcher;
          ReactSharedInternals.A = prevAsyncDispatcher;
          null === workInProgress && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
          return memoizedUpdaters;
        }
        function workLoopSync() {
          for (; null !== workInProgress; ) performUnitOfWork(workInProgress);
        }
        function renderRootConcurrent(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
          if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root3.memoizedUpdaters;
              0 < memoizedUpdaters.size && (restorePendingUpdaters(root3, workInProgressRootRenderLanes), memoizedUpdaters.clear());
              movePendingFibersToMemoized(root3, lanes);
            }
            workInProgressTransitions = null;
            workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;
            prepareFreshStack(root3, lanes);
          } else
            workInProgressRootIsPrerendering = checkIfRootIsPrerendering(
              root3,
              lanes
            );
          a: do
            try {
              if (workInProgressSuspendedReason !== NotSuspended && null !== workInProgress)
                b: switch (lanes = workInProgress, memoizedUpdaters = workInProgressThrownValue, workInProgressSuspendedReason) {
                  case SuspendedOnError:
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(
                      root3,
                      lanes,
                      memoizedUpdaters,
                      SuspendedOnError
                    );
                    break;
                  case SuspendedOnData:
                  case SuspendedOnAction:
                    if (isThenableResolved(memoizedUpdaters)) {
                      workInProgressSuspendedReason = NotSuspended;
                      workInProgressThrownValue = null;
                      replaySuspendedUnitOfWork(lanes);
                      break;
                    }
                    lanes = function() {
                      workInProgressSuspendedReason !== SuspendedOnData && workInProgressSuspendedReason !== SuspendedOnAction || workInProgressRoot !== root3 || (workInProgressSuspendedReason = SuspendedAndReadyToContinue);
                      ensureRootIsScheduled(root3);
                    };
                    memoizedUpdaters.then(lanes, lanes);
                    break a;
                  case SuspendedOnImmediate:
                    workInProgressSuspendedReason = SuspendedAndReadyToContinue;
                    break a;
                  case SuspendedOnInstance:
                    workInProgressSuspendedReason = SuspendedOnInstanceAndReadyToContinue;
                    break a;
                  case SuspendedAndReadyToContinue:
                    isThenableResolved(memoizedUpdaters) ? (workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, throwAndUnwindWorkLoop(
                      root3,
                      lanes,
                      memoizedUpdaters,
                      SuspendedAndReadyToContinue
                    ));
                    break;
                  case SuspendedOnInstanceAndReadyToContinue:
                    var resource = null;
                    switch (workInProgress.tag) {
                      case 26:
                        resource = workInProgress.memoizedState;
                      case 5:
                      case 27:
                        var hostFiber = workInProgress;
                        if (resource ? preloadResource(resource) : hostFiber.stateNode.complete) {
                          workInProgressSuspendedReason = NotSuspended;
                          workInProgressThrownValue = null;
                          var sibling = hostFiber.sibling;
                          if (null !== sibling) workInProgress = sibling;
                          else {
                            var returnFiber = hostFiber.return;
                            null !== returnFiber ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                          }
                          break b;
                        }
                        break;
                      default:
                        console.error(
                          "Unexpected type of fiber triggered a suspensey commit. This is a bug in React."
                        );
                    }
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(
                      root3,
                      lanes,
                      memoizedUpdaters,
                      SuspendedOnInstanceAndReadyToContinue
                    );
                    break;
                  case SuspendedOnDeprecatedThrowPromise:
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(
                      root3,
                      lanes,
                      memoizedUpdaters,
                      SuspendedOnDeprecatedThrowPromise
                    );
                    break;
                  case SuspendedOnHydration:
                    resetWorkInProgressStack();
                    workInProgressRootExitStatus = RootSuspendedAtTheShell;
                    break a;
                  default:
                    throw Error(
                      "Unexpected SuspendedReason. This is a bug in React."
                    );
                }
              null !== ReactSharedInternals.actQueue ? workLoopSync() : workLoopConcurrentByScheduler();
              break;
            } catch (thrownValue$9) {
              handleThrow(root3, thrownValue$9);
            }
          while (1);
          resetContextDependencies();
          ReactSharedInternals.H = prevDispatcher;
          ReactSharedInternals.A = prevAsyncDispatcher;
          executionContext = prevExecutionContext;
          if (null !== workInProgress) return RootInProgress;
          workInProgressRoot = null;
          workInProgressRootRenderLanes = 0;
          finishQueueingConcurrentUpdates();
          return workInProgressRootExitStatus;
        }
        function workLoopConcurrentByScheduler() {
          for (; null !== workInProgress && !shouldYield(); )
            performUnitOfWork(workInProgress);
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          (unitOfWork.mode & ProfileMode) !== NoMode ? (startProfilerTimer(unitOfWork), current2 = runWithFiberInDEV(
            unitOfWork,
            beginWork,
            current2,
            unitOfWork,
            entangledRenderLanes
          ), stopProfilerTimerIfRunningAndRecordDuration(unitOfWork)) : current2 = runWithFiberInDEV(
            unitOfWork,
            beginWork,
            current2,
            unitOfWork,
            entangledRenderLanes
          );
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          null === current2 ? completeUnitOfWork(unitOfWork) : workInProgress = current2;
        }
        function replaySuspendedUnitOfWork(unitOfWork) {
          var next = runWithFiberInDEV(unitOfWork, replayBeginWork, unitOfWork);
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
        }
        function replayBeginWork(unitOfWork) {
          var current2 = unitOfWork.alternate, isProfilingMode = (unitOfWork.mode & ProfileMode) !== NoMode;
          isProfilingMode && startProfilerTimer(unitOfWork);
          switch (unitOfWork.tag) {
            case 15:
            case 0:
              current2 = replayFunctionComponent(
                current2,
                unitOfWork,
                unitOfWork.pendingProps,
                unitOfWork.type,
                void 0,
                workInProgressRootRenderLanes
              );
              break;
            case 11:
              current2 = replayFunctionComponent(
                current2,
                unitOfWork,
                unitOfWork.pendingProps,
                unitOfWork.type.render,
                unitOfWork.ref,
                workInProgressRootRenderLanes
              );
              break;
            case 5:
              resetHooksOnUnwind(unitOfWork);
            default:
              unwindInterruptedWork(current2, unitOfWork), unitOfWork = workInProgress = resetWorkInProgress(unitOfWork, entangledRenderLanes), current2 = beginWork(current2, unitOfWork, entangledRenderLanes);
          }
          isProfilingMode && stopProfilerTimerIfRunningAndRecordDuration(unitOfWork);
          return current2;
        }
        function throwAndUnwindWorkLoop(root3, unitOfWork, thrownValue, suspendedReason) {
          resetContextDependencies();
          resetHooksOnUnwind(unitOfWork);
          thenableState$1 = null;
          thenableIndexCounter$1 = 0;
          var returnFiber = unitOfWork.return;
          try {
            if (throwException(
              root3,
              returnFiber,
              unitOfWork,
              thrownValue,
              workInProgressRootRenderLanes
            )) {
              workInProgressRootExitStatus = RootFatalErrored;
              logUncaughtError(
                root3,
                createCapturedValueAtFiber(thrownValue, root3.current)
              );
              workInProgress = null;
              return;
            }
          } catch (error) {
            if (null !== returnFiber) throw workInProgress = returnFiber, error;
            workInProgressRootExitStatus = RootFatalErrored;
            logUncaughtError(
              root3,
              createCapturedValueAtFiber(thrownValue, root3.current)
            );
            workInProgress = null;
            return;
          }
          if (unitOfWork.flags & 32768) {
            if (isHydrating || suspendedReason === SuspendedOnError) root3 = true;
            else if (workInProgressRootIsPrerendering || 0 !== (workInProgressRootRenderLanes & 536870912))
              root3 = false;
            else if (workInProgressRootDidSkipSuspendedSiblings = root3 = true, suspendedReason === SuspendedOnData || suspendedReason === SuspendedOnAction || suspendedReason === SuspendedOnImmediate || suspendedReason === SuspendedOnDeprecatedThrowPromise)
              suspendedReason = suspenseHandlerStackCursor.current, null !== suspendedReason && 13 === suspendedReason.tag && (suspendedReason.flags |= 16384);
            unwindUnitOfWork(unitOfWork, root3);
          } else completeUnitOfWork(unitOfWork);
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            if (0 !== (completedWork.flags & 32768)) {
              unwindUnitOfWork(
                completedWork,
                workInProgressRootDidSkipSuspendedSiblings
              );
              return;
            }
            var current2 = completedWork.alternate;
            unitOfWork = completedWork.return;
            startProfilerTimer(completedWork);
            current2 = runWithFiberInDEV(
              completedWork,
              completeWork,
              current2,
              completedWork,
              entangledRenderLanes
            );
            (completedWork.mode & ProfileMode) !== NoMode && stopProfilerTimerIfRunningAndRecordIncompleteDuration(completedWork);
            if (null !== current2) {
              workInProgress = current2;
              return;
            }
            completedWork = completedWork.sibling;
            if (null !== completedWork) {
              workInProgress = completedWork;
              return;
            }
            workInProgress = completedWork = unitOfWork;
          } while (null !== completedWork);
          workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootCompleted);
        }
        function unwindUnitOfWork(unitOfWork, skipSiblings) {
          do {
            var next = unwindWork(unitOfWork.alternate, unitOfWork);
            if (null !== next) {
              next.flags &= 32767;
              workInProgress = next;
              return;
            }
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordIncompleteDuration(unitOfWork);
              next = unitOfWork.actualDuration;
              for (var child = unitOfWork.child; null !== child; )
                next += child.actualDuration, child = child.sibling;
              unitOfWork.actualDuration = next;
            }
            next = unitOfWork.return;
            null !== next && (next.flags |= 32768, next.subtreeFlags = 0, next.deletions = null);
            if (!skipSiblings && (unitOfWork = unitOfWork.sibling, null !== unitOfWork)) {
              workInProgress = unitOfWork;
              return;
            }
            workInProgress = unitOfWork = next;
          } while (null !== unitOfWork);
          workInProgressRootExitStatus = RootSuspendedAtTheShell;
          workInProgress = null;
        }
        function commitRoot(root3, finishedWork, lanes, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes, exitStatus, suspendedState, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
          root3.cancelPendingCommit = null;
          do
            flushPendingEffects();
          while (pendingEffectsStatus !== NO_PENDING_EFFECTS);
          ReactStrictModeWarnings.flushLegacyContextWarning();
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
            throw Error("Should not already be working.");
          setCurrentTrackFromLanes(lanes);
          exitStatus === RootErrored ? logErroredRenderPhase(
            completedRenderStartTime,
            completedRenderEndTime,
            lanes,
            workInProgressUpdateTask
          ) : null !== recoverableErrors ? logRecoveredRenderPhase(
            completedRenderStartTime,
            completedRenderEndTime,
            lanes,
            recoverableErrors,
            null !== finishedWork && null !== finishedWork.alternate && finishedWork.alternate.memoizedState.isDehydrated && 0 !== (finishedWork.flags & 256),
            workInProgressUpdateTask
          ) : logRenderPhase(
            completedRenderStartTime,
            completedRenderEndTime,
            lanes,
            workInProgressUpdateTask
          );
          if (null !== finishedWork) {
            0 === lanes && console.error(
              "finishedLanes should not be empty during a commit. This is a bug in React."
            );
            if (finishedWork === root3.current)
              throw Error(
                "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."
              );
            didIncludeRenderPhaseUpdate = finishedWork.lanes | finishedWork.childLanes;
            didIncludeRenderPhaseUpdate |= concurrentlyUpdatedLanes;
            markRootFinished(
              root3,
              lanes,
              didIncludeRenderPhaseUpdate,
              spawnedLane,
              updatedLanes,
              suspendedRetryLanes
            );
            root3 === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
            pendingFinishedWork = finishedWork;
            pendingEffectsRoot = root3;
            pendingEffectsLanes = lanes;
            pendingEffectsRemainingLanes = didIncludeRenderPhaseUpdate;
            pendingPassiveTransitions = transitions;
            pendingRecoverableErrors = recoverableErrors;
            pendingEffectsRenderEndTime = completedRenderEndTime;
            pendingSuspendedCommitReason = suspendedCommitReason;
            pendingDelayedCommitReason = IMMEDIATE_COMMIT;
            pendingSuspendedViewTransitionReason = null;
            0 !== finishedWork.actualDuration || 0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256) ? (root3.callbackNode = null, root3.callbackPriority = 0, scheduleCallback$1(NormalPriority$1, function() {
              schedulerEvent = window.event;
              pendingDelayedCommitReason === IMMEDIATE_COMMIT && (pendingDelayedCommitReason = DELAYED_PASSIVE_COMMIT);
              flushPassiveEffects();
              return null;
            })) : (root3.callbackNode = null, root3.callbackPriority = 0);
            commitErrors = null;
            commitStartTime = now();
            null !== suspendedCommitReason && logSuspendedCommitPhase(
              completedRenderEndTime,
              commitStartTime,
              suspendedCommitReason,
              workInProgressUpdateTask
            );
            recoverableErrors = 0 !== (finishedWork.flags & 13878);
            if (0 !== (finishedWork.subtreeFlags & 13878) || recoverableErrors) {
              recoverableErrors = ReactSharedInternals.T;
              ReactSharedInternals.T = null;
              transitions = ReactDOMSharedInternals.p;
              ReactDOMSharedInternals.p = DiscreteEventPriority;
              spawnedLane = executionContext;
              executionContext |= CommitContext;
              try {
                commitBeforeMutationEffects(root3, finishedWork, lanes);
              } finally {
                executionContext = spawnedLane, ReactDOMSharedInternals.p = transitions, ReactSharedInternals.T = recoverableErrors;
              }
            }
            pendingEffectsStatus = PENDING_MUTATION_PHASE;
            flushMutationEffects();
            flushLayoutEffects();
            flushSpawnedWork();
          }
        }
        function flushMutationEffects() {
          if (pendingEffectsStatus === PENDING_MUTATION_PHASE) {
            pendingEffectsStatus = NO_PENDING_EFFECTS;
            var root3 = pendingEffectsRoot, finishedWork = pendingFinishedWork, lanes = pendingEffectsLanes, rootMutationHasEffect = 0 !== (finishedWork.flags & 13878);
            if (0 !== (finishedWork.subtreeFlags & 13878) || rootMutationHasEffect) {
              rootMutationHasEffect = ReactSharedInternals.T;
              ReactSharedInternals.T = null;
              var previousPriority = ReactDOMSharedInternals.p;
              ReactDOMSharedInternals.p = DiscreteEventPriority;
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              try {
                inProgressLanes = lanes;
                inProgressRoot = root3;
                resetComponentEffectTimers();
                commitMutationEffectsOnFiber(finishedWork, root3);
                inProgressRoot = inProgressLanes = null;
                lanes = selectionInformation;
                var curFocusedElem = getActiveElementDeep(root3.containerInfo), priorFocusedElem = lanes.focusedElem, priorSelectionRange = lanes.selectionRange;
                if (curFocusedElem !== priorFocusedElem && priorFocusedElem && priorFocusedElem.ownerDocument && containsNode(
                  priorFocusedElem.ownerDocument.documentElement,
                  priorFocusedElem
                )) {
                  if (null !== priorSelectionRange && hasSelectionCapabilities(priorFocusedElem)) {
                    var start = priorSelectionRange.start, end = priorSelectionRange.end;
                    void 0 === end && (end = start);
                    if ("selectionStart" in priorFocusedElem)
                      priorFocusedElem.selectionStart = start, priorFocusedElem.selectionEnd = Math.min(
                        end,
                        priorFocusedElem.value.length
                      );
                    else {
                      var doc = priorFocusedElem.ownerDocument || document, win = doc && doc.defaultView || window;
                      if (win.getSelection) {
                        var selection = win.getSelection(), length = priorFocusedElem.textContent.length, start$jscomp$0 = Math.min(
                          priorSelectionRange.start,
                          length
                        ), end$jscomp$0 = void 0 === priorSelectionRange.end ? start$jscomp$0 : Math.min(priorSelectionRange.end, length);
                        !selection.extend && start$jscomp$0 > end$jscomp$0 && (curFocusedElem = end$jscomp$0, end$jscomp$0 = start$jscomp$0, start$jscomp$0 = curFocusedElem);
                        var startMarker = getNodeForCharacterOffset(
                          priorFocusedElem,
                          start$jscomp$0
                        ), endMarker = getNodeForCharacterOffset(
                          priorFocusedElem,
                          end$jscomp$0
                        );
                        if (startMarker && endMarker && (1 !== selection.rangeCount || selection.anchorNode !== startMarker.node || selection.anchorOffset !== startMarker.offset || selection.focusNode !== endMarker.node || selection.focusOffset !== endMarker.offset)) {
                          var range = doc.createRange();
                          range.setStart(startMarker.node, startMarker.offset);
                          selection.removeAllRanges();
                          start$jscomp$0 > end$jscomp$0 ? (selection.addRange(range), selection.extend(endMarker.node, endMarker.offset)) : (range.setEnd(endMarker.node, endMarker.offset), selection.addRange(range));
                        }
                      }
                    }
                  }
                  doc = [];
                  for (selection = priorFocusedElem; selection = selection.parentNode; )
                    1 === selection.nodeType && doc.push({
                      element: selection,
                      left: selection.scrollLeft,
                      top: selection.scrollTop
                    });
                  "function" === typeof priorFocusedElem.focus && priorFocusedElem.focus();
                  for (priorFocusedElem = 0; priorFocusedElem < doc.length; priorFocusedElem++) {
                    var info = doc[priorFocusedElem];
                    info.element.scrollLeft = info.left;
                    info.element.scrollTop = info.top;
                  }
                }
                _enabled = !!eventsEnabled;
                selectionInformation = eventsEnabled = null;
              } finally {
                executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = rootMutationHasEffect;
              }
            }
            root3.current = finishedWork;
            pendingEffectsStatus = PENDING_LAYOUT_PHASE;
          }
        }
        function flushLayoutEffects() {
          if (pendingEffectsStatus === PENDING_LAYOUT_PHASE) {
            pendingEffectsStatus = NO_PENDING_EFFECTS;
            var suspendedViewTransitionReason = pendingSuspendedViewTransitionReason;
            if (null !== suspendedViewTransitionReason) {
              commitStartTime = now();
              var startTime = commitEndTime, endTime = commitStartTime;
              !supportsUserTiming || endTime <= startTime || (animatingTask ? animatingTask.run(
                console.timeStamp.bind(
                  console,
                  suspendedViewTransitionReason,
                  startTime,
                  endTime,
                  currentTrack,
                  LANES_TRACK_GROUP,
                  "secondary-light"
                )
              ) : console.timeStamp(
                suspendedViewTransitionReason,
                startTime,
                endTime,
                currentTrack,
                LANES_TRACK_GROUP,
                "secondary-light"
              ));
            }
            suspendedViewTransitionReason = pendingEffectsRoot;
            startTime = pendingFinishedWork;
            endTime = pendingEffectsLanes;
            var rootHasLayoutEffect = 0 !== (startTime.flags & 8772);
            if (0 !== (startTime.subtreeFlags & 8772) || rootHasLayoutEffect) {
              rootHasLayoutEffect = ReactSharedInternals.T;
              ReactSharedInternals.T = null;
              var _previousPriority = ReactDOMSharedInternals.p;
              ReactDOMSharedInternals.p = DiscreteEventPriority;
              var _prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              try {
                inProgressLanes = endTime, inProgressRoot = suspendedViewTransitionReason, resetComponentEffectTimers(), commitLayoutEffectOnFiber(
                  suspendedViewTransitionReason,
                  startTime.alternate,
                  startTime
                ), inProgressRoot = inProgressLanes = null;
              } finally {
                executionContext = _prevExecutionContext, ReactDOMSharedInternals.p = _previousPriority, ReactSharedInternals.T = rootHasLayoutEffect;
              }
            }
            suspendedViewTransitionReason = pendingEffectsRenderEndTime;
            startTime = pendingSuspendedCommitReason;
            commitEndTime = now();
            suspendedViewTransitionReason = null === startTime ? suspendedViewTransitionReason : commitStartTime;
            startTime = commitEndTime;
            endTime = pendingDelayedCommitReason === ABORTED_VIEW_TRANSITION_COMMIT;
            rootHasLayoutEffect = workInProgressUpdateTask;
            null !== commitErrors ? logCommitErrored(
              suspendedViewTransitionReason,
              startTime,
              commitErrors,
              false,
              rootHasLayoutEffect
            ) : !supportsUserTiming || startTime <= suspendedViewTransitionReason || (rootHasLayoutEffect ? rootHasLayoutEffect.run(
              console.timeStamp.bind(
                console,
                endTime ? "Commit Interrupted View Transition" : "Commit",
                suspendedViewTransitionReason,
                startTime,
                currentTrack,
                LANES_TRACK_GROUP,
                endTime ? "error" : "secondary-dark"
              )
            ) : console.timeStamp(
              endTime ? "Commit Interrupted View Transition" : "Commit",
              suspendedViewTransitionReason,
              startTime,
              currentTrack,
              LANES_TRACK_GROUP,
              endTime ? "error" : "secondary-dark"
            ));
            pendingEffectsStatus = PENDING_AFTER_MUTATION_PHASE;
          }
        }
        function flushSpawnedWork() {
          if (pendingEffectsStatus === PENDING_SPAWNED_WORK || pendingEffectsStatus === PENDING_AFTER_MUTATION_PHASE) {
            if (pendingEffectsStatus === PENDING_SPAWNED_WORK) {
              var startViewTransitionStartTime = commitEndTime;
              commitEndTime = now();
              var endTime = commitEndTime, abortedViewTransition = pendingDelayedCommitReason === ABORTED_VIEW_TRANSITION_COMMIT;
              !supportsUserTiming || endTime <= startViewTransitionStartTime || (animatingTask ? animatingTask.run(
                console.timeStamp.bind(
                  console,
                  abortedViewTransition ? "Interrupted View Transition" : "Starting Animation",
                  startViewTransitionStartTime,
                  endTime,
                  currentTrack,
                  LANES_TRACK_GROUP,
                  abortedViewTransition ? "error" : "secondary-light"
                )
              ) : console.timeStamp(
                abortedViewTransition ? "Interrupted View Transition" : "Starting Animation",
                startViewTransitionStartTime,
                endTime,
                currentTrack,
                LANES_TRACK_GROUP,
                abortedViewTransition ? " error" : "secondary-light"
              ));
              pendingDelayedCommitReason !== ABORTED_VIEW_TRANSITION_COMMIT && (pendingDelayedCommitReason = ANIMATION_STARTED_COMMIT);
            }
            pendingEffectsStatus = NO_PENDING_EFFECTS;
            requestPaint();
            startViewTransitionStartTime = pendingEffectsRoot;
            var finishedWork = pendingFinishedWork;
            endTime = pendingEffectsLanes;
            abortedViewTransition = pendingRecoverableErrors;
            var rootDidHavePassiveEffects = 0 !== finishedWork.actualDuration || 0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256);
            rootDidHavePassiveEffects ? pendingEffectsStatus = PENDING_PASSIVE_PHASE : (pendingEffectsStatus = NO_PENDING_EFFECTS, pendingFinishedWork = pendingEffectsRoot = null, releaseRootPooledCache(
              startViewTransitionStartTime,
              startViewTransitionStartTime.pendingLanes
            ), nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null);
            var remainingLanes = startViewTransitionStartTime.pendingLanes;
            0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
            rootDidHavePassiveEffects || commitDoubleInvokeEffectsInDEV(startViewTransitionStartTime);
            remainingLanes = lanesToEventPriority(endTime);
            finishedWork = finishedWork.stateNode;
            if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
              try {
                var didError = 128 === (finishedWork.current.flags & 128);
                switch (remainingLanes) {
                  case DiscreteEventPriority:
                    var schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority$1;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority$1;
                }
                injectedHook.onCommitFiberRoot(
                  rendererID,
                  finishedWork,
                  schedulerPriority,
                  didError
                );
              } catch (err) {
                hasLoggedError || (hasLoggedError = true, console.error(
                  "React instrumentation encountered an error: %o",
                  err
                ));
              }
            isDevToolsPresent && startViewTransitionStartTime.memoizedUpdaters.clear();
            onCommitRoot();
            if (null !== abortedViewTransition) {
              didError = ReactSharedInternals.T;
              schedulerPriority = ReactDOMSharedInternals.p;
              ReactDOMSharedInternals.p = DiscreteEventPriority;
              ReactSharedInternals.T = null;
              try {
                var onRecoverableError = startViewTransitionStartTime.onRecoverableError;
                for (finishedWork = 0; finishedWork < abortedViewTransition.length; finishedWork++) {
                  var recoverableError = abortedViewTransition[finishedWork], errorInfo = makeErrorInfo(recoverableError.stack);
                  runWithFiberInDEV(
                    recoverableError.source,
                    onRecoverableError,
                    recoverableError.value,
                    errorInfo
                  );
                }
              } finally {
                ReactSharedInternals.T = didError, ReactDOMSharedInternals.p = schedulerPriority;
              }
            }
            0 !== (pendingEffectsLanes & 3) && flushPendingEffects();
            ensureRootIsScheduled(startViewTransitionStartTime);
            remainingLanes = startViewTransitionStartTime.pendingLanes;
            0 !== (endTime & 261930) && 0 !== (remainingLanes & 42) ? (nestedUpdateScheduled = true, startViewTransitionStartTime === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = startViewTransitionStartTime)) : nestedUpdateCount = 0;
            rootDidHavePassiveEffects || finalizeRender(endTime, commitEndTime);
            flushSyncWorkAcrossRoots_impl(0, false);
          }
        }
        function makeErrorInfo(componentStack) {
          componentStack = { componentStack };
          Object.defineProperty(componentStack, "digest", {
            get: function() {
              console.error(
                'You are accessing "digest" from the errorInfo object passed to onRecoverableError. This property is no longer provided as part of errorInfo but can be accessed as a property of the Error instance itself.'
              );
            }
          });
          return componentStack;
        }
        function releaseRootPooledCache(root3, remainingLanes) {
          0 === (root3.pooledCacheLanes &= remainingLanes) && (remainingLanes = root3.pooledCache, null != remainingLanes && (root3.pooledCache = null, releaseCache(remainingLanes)));
        }
        function flushPendingEffects() {
          flushMutationEffects();
          flushLayoutEffects();
          flushSpawnedWork();
          return flushPassiveEffects();
        }
        function flushPassiveEffects() {
          if (pendingEffectsStatus !== PENDING_PASSIVE_PHASE) return false;
          var root3 = pendingEffectsRoot, remainingLanes = pendingEffectsRemainingLanes;
          pendingEffectsRemainingLanes = 0;
          var renderPriority = lanesToEventPriority(pendingEffectsLanes), priority = 0 === DefaultEventPriority || DefaultEventPriority > renderPriority ? DefaultEventPriority : renderPriority;
          renderPriority = ReactSharedInternals.T;
          var previousPriority = ReactDOMSharedInternals.p;
          try {
            ReactDOMSharedInternals.p = priority;
            ReactSharedInternals.T = null;
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            priority = pendingEffectsRoot;
            var lanes = pendingEffectsLanes;
            pendingEffectsStatus = NO_PENDING_EFFECTS;
            pendingFinishedWork = pendingEffectsRoot = null;
            pendingEffectsLanes = 0;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
              throw Error("Cannot flush passive effects while already rendering.");
            setCurrentTrackFromLanes(lanes);
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
            var passiveEffectStartTime = 0;
            commitErrors = null;
            passiveEffectStartTime = now$1();
            if (pendingDelayedCommitReason === ANIMATION_STARTED_COMMIT)
              logAnimatingPhase(
                commitEndTime,
                passiveEffectStartTime,
                animatingTask
              );
            else {
              var startTime = commitEndTime, endTime = passiveEffectStartTime, delayedUntilPaint = pendingDelayedCommitReason === DELAYED_PASSIVE_COMMIT;
              !supportsUserTiming || endTime <= startTime || (workInProgressUpdateTask ? workInProgressUpdateTask.run(
                console.timeStamp.bind(
                  console,
                  delayedUntilPaint ? "Waiting for Paint" : "Waiting",
                  startTime,
                  endTime,
                  currentTrack,
                  LANES_TRACK_GROUP,
                  "secondary-light"
                )
              ) : console.timeStamp(
                delayedUntilPaint ? "Waiting for Paint" : "Waiting",
                startTime,
                endTime,
                currentTrack,
                LANES_TRACK_GROUP,
                "secondary-light"
              ));
            }
            startTime = executionContext;
            executionContext |= CommitContext;
            var finishedWork = priority.current;
            resetComponentEffectTimers();
            commitPassiveUnmountOnFiber(finishedWork);
            var finishedWork$jscomp$0 = priority.current;
            finishedWork = pendingEffectsRenderEndTime;
            resetComponentEffectTimers();
            commitPassiveMountOnFiber(
              priority,
              finishedWork$jscomp$0,
              lanes,
              transitions,
              finishedWork
            );
            commitDoubleInvokeEffectsInDEV(priority);
            executionContext = startTime;
            var passiveEffectsEndTime = now$1();
            finishedWork$jscomp$0 = passiveEffectStartTime;
            finishedWork = workInProgressUpdateTask;
            null !== commitErrors ? logCommitErrored(
              finishedWork$jscomp$0,
              passiveEffectsEndTime,
              commitErrors,
              true,
              finishedWork
            ) : !supportsUserTiming || passiveEffectsEndTime <= finishedWork$jscomp$0 || (finishedWork ? finishedWork.run(
              console.timeStamp.bind(
                console,
                "Remaining Effects",
                finishedWork$jscomp$0,
                passiveEffectsEndTime,
                currentTrack,
                LANES_TRACK_GROUP,
                "secondary-dark"
              )
            ) : console.timeStamp(
              "Remaining Effects",
              finishedWork$jscomp$0,
              passiveEffectsEndTime,
              currentTrack,
              LANES_TRACK_GROUP,
              "secondary-dark"
            ));
            finalizeRender(lanes, passiveEffectsEndTime);
            flushSyncWorkAcrossRoots_impl(0, false);
            didScheduleUpdateDuringPassiveEffects ? priority === rootWithPassiveNestedUpdates ? nestedPassiveUpdateCount++ : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = priority) : nestedPassiveUpdateCount = 0;
            didScheduleUpdateDuringPassiveEffects = isFlushingPassiveEffects = false;
            if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot)
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, priority);
              } catch (err) {
                hasLoggedError || (hasLoggedError = true, console.error(
                  "React instrumentation encountered an error: %o",
                  err
                ));
              }
            var stateNode = priority.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
            return true;
          } finally {
            ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = renderPriority, releaseRootPooledCache(root3, remainingLanes);
          }
        }
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
          sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
          recordEffectError(sourceFiber);
          sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
          rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
          null !== rootFiber && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
          isRunningInsertionEffect = false;
          if (3 === sourceFiber.tag)
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
          else {
            for (; null !== nearestMountedAncestor; ) {
              if (3 === nearestMountedAncestor.tag) {
                captureCommitPhaseErrorOnRoot(
                  nearestMountedAncestor,
                  sourceFiber,
                  error
                );
                return;
              }
              if (1 === nearestMountedAncestor.tag) {
                var instance = nearestMountedAncestor.stateNode;
                if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
                  sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
                  recordEffectError(sourceFiber);
                  error = createClassErrorUpdate(2);
                  instance = enqueueUpdate(nearestMountedAncestor, error, 2);
                  null !== instance && (initializeClassErrorUpdate(
                    error,
                    instance,
                    nearestMountedAncestor,
                    sourceFiber
                  ), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
                  return;
                }
              }
              nearestMountedAncestor = nearestMountedAncestor.return;
            }
            console.error(
              "Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s",
              error
            );
          }
        }
        function attachPingListener(root3, wakeable, lanes) {
          var pingCache = root3.pingCache;
          if (null === pingCache) {
            pingCache = root3.pingCache = new PossiblyWeakMap();
            var threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else
            threadIDs = pingCache.get(wakeable), void 0 === threadIDs && (threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs));
          threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = true, threadIDs.add(lanes), pingCache = pingSuspendedRoot.bind(null, root3, wakeable, lanes), isDevToolsPresent && restorePendingUpdaters(root3, lanes), wakeable.then(pingCache, pingCache));
        }
        function pingSuspendedRoot(root3, wakeable, pingedLanes) {
          var pingCache = root3.pingCache;
          null !== pingCache && pingCache.delete(wakeable);
          root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          root3.warmLanes &= ~pingedLanes;
          0 !== (pingedLanes & 127) ? 0 > blockingUpdateTime && (blockingClampTime = blockingUpdateTime = now(), blockingUpdateTask = createTask("Promise Resolved"), blockingUpdateType = PINGED_UPDATE) : 0 !== (pingedLanes & 4194048) && 0 > transitionUpdateTime && (transitionClampTime = transitionUpdateTime = now(), transitionUpdateTask = createTask("Promise Resolved"), transitionUpdateType = PINGED_UPDATE);
          isConcurrentActEnvironment() && null === ReactSharedInternals.actQueue && console.error(
            "A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act"
          );
          workInProgressRoot === root3 && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? (executionContext & RenderContext) === NoContext && prepareFreshStack(root3, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
          ensureRootIsScheduled(root3);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          0 === retryLane && (retryLane = claimNextRetryLane());
          boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          null !== boundaryFiber && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
          null !== suspenseState && (retryLane = suspenseState.retryLane);
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = 0;
          switch (boundaryFiber.tag) {
            case 31:
            case 13:
              var retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              null !== suspenseState && (retryLane = suspenseState.retryLane);
              break;
            case 19:
              retryCache = boundaryFiber.stateNode;
              break;
            case 22:
              retryCache = boundaryFiber.stateNode._retryCache;
              break;
            default:
              throw Error(
                "Pinged unknown suspense boundary type. This is probably a bug in React."
              );
          }
          null !== retryCache && retryCache.delete(wakeable);
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function recursivelyTraverseAndDoubleInvokeEffectsInDEV(root$jscomp$0, parentFiber, isInStrictMode) {
          if (0 !== (parentFiber.subtreeFlags & 67117056))
            for (parentFiber = parentFiber.child; null !== parentFiber; ) {
              var root3 = root$jscomp$0, fiber = parentFiber, isStrictModeFiber = fiber.type === REACT_STRICT_MODE_TYPE;
              isStrictModeFiber = isInStrictMode || isStrictModeFiber;
              22 !== fiber.tag ? fiber.flags & 67108864 ? isStrictModeFiber && runWithFiberInDEV(
                fiber,
                doubleInvokeEffectsOnFiber,
                root3,
                fiber
              ) : recursivelyTraverseAndDoubleInvokeEffectsInDEV(
                root3,
                fiber,
                isStrictModeFiber
              ) : null === fiber.memoizedState && (isStrictModeFiber && fiber.flags & 8192 ? runWithFiberInDEV(
                fiber,
                doubleInvokeEffectsOnFiber,
                root3,
                fiber
              ) : fiber.subtreeFlags & 67108864 && runWithFiberInDEV(
                fiber,
                recursivelyTraverseAndDoubleInvokeEffectsInDEV,
                root3,
                fiber,
                isStrictModeFiber
              ));
              parentFiber = parentFiber.sibling;
            }
        }
        function doubleInvokeEffectsOnFiber(root3, fiber) {
          setIsStrictModeForDevtools(true);
          try {
            disappearLayoutEffects(fiber), disconnectPassiveEffect(fiber), reappearLayoutEffects(root3, fiber.alternate, fiber, false), reconnectPassiveEffects(root3, fiber, 0, null, false, 0);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        function commitDoubleInvokeEffectsInDEV(root3) {
          var doubleInvokeEffects = true;
          root3.current.mode & (StrictLegacyMode | StrictEffectsMode) || (doubleInvokeEffects = false);
          recursivelyTraverseAndDoubleInvokeEffectsInDEV(
            root3,
            root3.current,
            doubleInvokeEffects
          );
        }
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          if ((executionContext & RenderContext) === NoContext) {
            var tag = fiber.tag;
            if (3 === tag || 1 === tag || 0 === tag || 11 === tag || 14 === tag || 15 === tag) {
              tag = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (null !== didWarnStateUpdateForNotYetMountedComponent) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(tag)) return;
                didWarnStateUpdateForNotYetMountedComponent.add(tag);
              } else didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([tag]);
              runWithFiberInDEV(fiber, function() {
                console.error(
                  "Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously tries to update the component. Move this work to useEffect instead."
                );
              });
            }
          }
        }
        function restorePendingUpdaters(root3, lanes) {
          isDevToolsPresent && root3.memoizedUpdaters.forEach(function(schedulingFiber) {
            addFiberToLanesMap(root3, schedulingFiber, lanes);
          });
        }
        function scheduleCallback$1(priorityLevel, callback) {
          var actQueue = ReactSharedInternals.actQueue;
          return null !== actQueue ? (actQueue.push(callback), fakeActCallbackNode$1) : scheduleCallback$3(priorityLevel, callback);
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          isConcurrentActEnvironment() && null === ReactSharedInternals.actQueue && runWithFiberInDEV(fiber, function() {
            console.error(
              "An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act",
              getComponentNameFromFiber(fiber)
            );
          });
        }
        function ensureRootIsScheduled(root3) {
          root3 !== lastScheduledRoot && null === root3.next && (null === lastScheduledRoot ? firstScheduledRoot = lastScheduledRoot = root3 : lastScheduledRoot = lastScheduledRoot.next = root3);
          mightHavePendingSyncWork = true;
          null !== ReactSharedInternals.actQueue ? didScheduleMicrotask_act || (didScheduleMicrotask_act = true, scheduleImmediateRootScheduleTask()) : didScheduleMicrotask || (didScheduleMicrotask = true, scheduleImmediateRootScheduleTask());
        }
        function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
          if (!isFlushingWork && mightHavePendingSyncWork) {
            isFlushingWork = true;
            do {
              var didPerformSomeWork = false;
              for (var root3 = firstScheduledRoot; null !== root3; ) {
                if (!onlyLegacy)
                  if (0 !== syncTransitionLanes) {
                    var pendingLanes = root3.pendingLanes;
                    if (0 === pendingLanes) var nextLanes = 0;
                    else {
                      var suspendedLanes = root3.suspendedLanes, pingedLanes = root3.pingedLanes;
                      nextLanes = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
                      nextLanes &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
                      nextLanes = nextLanes & 201326741 ? nextLanes & 201326741 | 1 : nextLanes ? nextLanes | 2 : 0;
                    }
                    0 !== nextLanes && (didPerformSomeWork = true, performSyncWorkOnRoot(root3, nextLanes));
                  } else
                    nextLanes = workInProgressRootRenderLanes, nextLanes = getNextLanes(
                      root3,
                      root3 === workInProgressRoot ? nextLanes : 0,
                      null !== root3.cancelPendingCommit || root3.timeoutHandle !== noTimeout
                    ), 0 === (nextLanes & 3) || checkIfRootIsPrerendering(root3, nextLanes) || (didPerformSomeWork = true, performSyncWorkOnRoot(root3, nextLanes));
                root3 = root3.next;
              }
            } while (didPerformSomeWork);
            isFlushingWork = false;
          }
        }
        function processRootScheduleInImmediateTask() {
          schedulerEvent = window.event;
          processRootScheduleInMicrotask();
        }
        function processRootScheduleInMicrotask() {
          mightHavePendingSyncWork = didScheduleMicrotask_act = didScheduleMicrotask = false;
          var syncTransitionLanes = 0;
          0 !== currentEventTransitionLane && shouldAttemptEagerTransition() && (syncTransitionLanes = currentEventTransitionLane);
          for (var currentTime = now$1(), prev = null, root3 = firstScheduledRoot; null !== root3; ) {
            var next = root3.next, nextLanes = scheduleTaskForRootDuringMicrotask(root3, currentTime);
            if (0 === nextLanes)
              root3.next = null, null === prev ? firstScheduledRoot = next : prev.next = next, null === next && (lastScheduledRoot = prev);
            else if (prev = root3, 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))
              mightHavePendingSyncWork = true;
            root3 = next;
          }
          pendingEffectsStatus !== NO_PENDING_EFFECTS && pendingEffectsStatus !== PENDING_PASSIVE_PHASE || flushSyncWorkAcrossRoots_impl(syncTransitionLanes, false);
          0 !== currentEventTransitionLane && (currentEventTransitionLane = 0);
        }
        function scheduleTaskForRootDuringMicrotask(root3, currentTime) {
          for (var suspendedLanes = root3.suspendedLanes, pingedLanes = root3.pingedLanes, expirationTimes = root3.expirationTimes, lanes = root3.pendingLanes & -62914561; 0 < lanes; ) {
            var index = 31 - clz32(lanes), lane = 1 << index, expirationTime = expirationTimes[index];
            if (-1 === expirationTime) {
              if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else expirationTime <= currentTime && (root3.expiredLanes |= lane);
            lanes &= ~lane;
          }
          currentTime = workInProgressRoot;
          suspendedLanes = workInProgressRootRenderLanes;
          suspendedLanes = getNextLanes(
            root3,
            root3 === currentTime ? suspendedLanes : 0,
            null !== root3.cancelPendingCommit || root3.timeoutHandle !== noTimeout
          );
          pingedLanes = root3.callbackNode;
          if (0 === suspendedLanes || root3 === currentTime && (workInProgressSuspendedReason === SuspendedOnData || workInProgressSuspendedReason === SuspendedOnAction) || null !== root3.cancelPendingCommit)
            return null !== pingedLanes && cancelCallback(pingedLanes), root3.callbackNode = null, root3.callbackPriority = 0;
          if (0 === (suspendedLanes & 3) || checkIfRootIsPrerendering(root3, suspendedLanes)) {
            currentTime = suspendedLanes & -suspendedLanes;
            if (currentTime !== root3.callbackPriority || null !== ReactSharedInternals.actQueue && pingedLanes !== fakeActCallbackNode)
              cancelCallback(pingedLanes);
            else return currentTime;
            switch (lanesToEventPriority(suspendedLanes)) {
              case DiscreteEventPriority:
              case ContinuousEventPriority:
                suspendedLanes = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                suspendedLanes = NormalPriority$1;
                break;
              case IdleEventPriority:
                suspendedLanes = IdlePriority;
                break;
              default:
                suspendedLanes = NormalPriority$1;
            }
            pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root3);
            null !== ReactSharedInternals.actQueue ? (ReactSharedInternals.actQueue.push(pingedLanes), suspendedLanes = fakeActCallbackNode) : suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
            root3.callbackPriority = currentTime;
            root3.callbackNode = suspendedLanes;
            return currentTime;
          }
          null !== pingedLanes && cancelCallback(pingedLanes);
          root3.callbackPriority = 2;
          root3.callbackNode = null;
          return 2;
        }
        function performWorkOnRootViaSchedulerTask(root3, didTimeout) {
          nestedUpdateScheduled = currentUpdateIsNested = false;
          schedulerEvent = window.event;
          if (pendingEffectsStatus !== NO_PENDING_EFFECTS && pendingEffectsStatus !== PENDING_PASSIVE_PHASE)
            return root3.callbackNode = null, root3.callbackPriority = 0, null;
          var originalCallbackNode = root3.callbackNode;
          pendingDelayedCommitReason === IMMEDIATE_COMMIT && (pendingDelayedCommitReason = DELAYED_PASSIVE_COMMIT);
          if (flushPendingEffects() && root3.callbackNode !== originalCallbackNode)
            return null;
          var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
          workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
            root3,
            root3 === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0,
            null !== root3.cancelPendingCommit || root3.timeoutHandle !== noTimeout
          );
          if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
          performWorkOnRoot(
            root3,
            workInProgressRootRenderLanes$jscomp$0,
            didTimeout
          );
          scheduleTaskForRootDuringMicrotask(root3, now$1());
          return null != root3.callbackNode && root3.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root3) : null;
        }
        function performSyncWorkOnRoot(root3, lanes) {
          if (flushPendingEffects()) return null;
          currentUpdateIsNested = nestedUpdateScheduled;
          nestedUpdateScheduled = false;
          performWorkOnRoot(root3, lanes, true);
        }
        function cancelCallback(callbackNode) {
          callbackNode !== fakeActCallbackNode && null !== callbackNode && cancelCallback$1(callbackNode);
        }
        function scheduleImmediateRootScheduleTask() {
          null !== ReactSharedInternals.actQueue && ReactSharedInternals.actQueue.push(function() {
            processRootScheduleInMicrotask();
            return null;
          });
          scheduleMicrotask(function() {
            (executionContext & (RenderContext | CommitContext)) !== NoContext ? scheduleCallback$3(
              ImmediatePriority,
              processRootScheduleInImmediateTask
            ) : processRootScheduleInMicrotask();
          });
        }
        function requestTransitionLane() {
          if (0 === currentEventTransitionLane) {
            var actionScopeLane = currentEntangledLane;
            0 === actionScopeLane && (actionScopeLane = nextTransitionUpdateLane, nextTransitionUpdateLane <<= 1, 0 === (nextTransitionUpdateLane & 261888) && (nextTransitionUpdateLane = 256));
            currentEventTransitionLane = actionScopeLane;
          }
          return currentEventTransitionLane;
        }
        function coerceFormActionProp(actionProp) {
          if (null == actionProp || "symbol" === typeof actionProp || "boolean" === typeof actionProp)
            return null;
          if ("function" === typeof actionProp) return actionProp;
          checkAttributeStringCoercion(actionProp, "action");
          return sanitizeURL("" + actionProp);
        }
        function createFormDataWithSubmitter(form, submitter) {
          var temp = submitter.ownerDocument.createElement("input");
          temp.name = submitter.name;
          temp.value = submitter.value;
          form.id && temp.setAttribute("form", form.id);
          submitter.parentNode.insertBefore(temp, submitter);
          form = new FormData(form);
          temp.parentNode.removeChild(temp);
          return form;
        }
        function extractEvents$1(dispatchQueue, domEventName, maybeTargetInst, nativeEvent, nativeEventTarget) {
          if ("submit" === domEventName && maybeTargetInst && maybeTargetInst.stateNode === nativeEventTarget) {
            var action = coerceFormActionProp(
              (nativeEventTarget[internalPropsKey] || null).action
            ), submitter = nativeEvent.submitter;
            submitter && (domEventName = (domEventName = submitter[internalPropsKey] || null) ? coerceFormActionProp(domEventName.formAction) : submitter.getAttribute("formAction"), null !== domEventName && (action = domEventName, submitter = null));
            var event = new SyntheticEvent(
              "action",
              "action",
              null,
              nativeEvent,
              nativeEventTarget
            );
            dispatchQueue.push({
              event,
              listeners: [
                {
                  instance: null,
                  listener: function() {
                    if (nativeEvent.defaultPrevented) {
                      if (0 !== currentEventTransitionLane) {
                        var formData = submitter ? createFormDataWithSubmitter(
                          nativeEventTarget,
                          submitter
                        ) : new FormData(nativeEventTarget), pendingState = {
                          pending: true,
                          data: formData,
                          method: nativeEventTarget.method,
                          action
                        };
                        Object.freeze(pendingState);
                        startHostTransition(
                          maybeTargetInst,
                          pendingState,
                          null,
                          formData
                        );
                      }
                    } else
                      "function" === typeof action && (event.preventDefault(), formData = submitter ? createFormDataWithSubmitter(
                        nativeEventTarget,
                        submitter
                      ) : new FormData(nativeEventTarget), pendingState = {
                        pending: true,
                        data: formData,
                        method: nativeEventTarget.method,
                        action
                      }, Object.freeze(pendingState), startHostTransition(
                        maybeTargetInst,
                        pendingState,
                        action,
                        formData
                      ));
                  },
                  currentTarget: nativeEventTarget
                }
              ]
            });
          }
        }
        function executeDispatch(event, listener, currentTarget) {
          event.currentTarget = currentTarget;
          try {
            listener(event);
          } catch (error) {
            reportGlobalError(error);
          }
          event.currentTarget = null;
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          eventSystemFlags = 0 !== (eventSystemFlags & 4);
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i];
            a: {
              var previousInstance = void 0, event = _dispatchQueue$i.event;
              _dispatchQueue$i = _dispatchQueue$i.listeners;
              if (eventSystemFlags)
                for (var i$jscomp$0 = _dispatchQueue$i.length - 1; 0 <= i$jscomp$0; i$jscomp$0--) {
                  var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget;
                  _dispatchListeners$i = _dispatchListeners$i.listener;
                  if (instance !== previousInstance && event.isPropagationStopped())
                    break a;
                  null !== instance ? runWithFiberInDEV(
                    instance,
                    executeDispatch,
                    event,
                    _dispatchListeners$i,
                    currentTarget
                  ) : executeDispatch(event, _dispatchListeners$i, currentTarget);
                  previousInstance = instance;
                }
              else
                for (i$jscomp$0 = 0; i$jscomp$0 < _dispatchQueue$i.length; i$jscomp$0++) {
                  _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
                  instance = _dispatchListeners$i.instance;
                  currentTarget = _dispatchListeners$i.currentTarget;
                  _dispatchListeners$i = _dispatchListeners$i.listener;
                  if (instance !== previousInstance && event.isPropagationStopped())
                    break a;
                  null !== instance ? runWithFiberInDEV(
                    instance,
                    executeDispatch,
                    event,
                    _dispatchListeners$i,
                    currentTarget
                  ) : executeDispatch(event, _dispatchListeners$i, currentTarget);
                  previousInstance = instance;
                }
            }
          }
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          nonDelegatedEvents.has(domEventName) || console.error(
            'Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.',
            domEventName
          );
          var listenerSet = targetElement[internalEventHandlersKey];
          void 0 === listenerSet && (listenerSet = targetElement[internalEventHandlersKey] = /* @__PURE__ */ new Set());
          var listenerSetKey = domEventName + "__bubble";
          listenerSet.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, 2, false), listenerSet.add(listenerSetKey));
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener && console.error(
            'Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.',
            domEventName
          );
          var eventSystemFlags = 0;
          isCapturePhaseListener && (eventSystemFlags |= 4);
          addTrappedEventListener(
            target,
            domEventName,
            eventSystemFlags,
            isCapturePhaseListener
          );
        }
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              "selectionchange" !== domEventName && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, false, rootContainerElement), listenToNativeEvent(domEventName, true, rootContainerElement));
            });
            var ownerDocument = 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
            null === ownerDocument || ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = true, listenToNativeEvent("selectionchange", false, ownerDocument));
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener) {
          switch (getEventPriority(domEventName)) {
            case DiscreteEventPriority:
              var listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            default:
              listenerWrapper = dispatchEvent;
          }
          eventSystemFlags = listenerWrapper.bind(
            null,
            domEventName,
            eventSystemFlags,
            targetContainer
          );
          listenerWrapper = void 0;
          !passiveBrowserEventsSupported || "touchstart" !== domEventName && "touchmove" !== domEventName && "wheel" !== domEventName || (listenerWrapper = true);
          isCapturePhaseListener ? void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
            capture: true,
            passive: listenerWrapper
          }) : targetContainer.addEventListener(domEventName, eventSystemFlags, true) : void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
            passive: listenerWrapper
          }) : targetContainer.addEventListener(
            domEventName,
            eventSystemFlags,
            false
          );
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst$jscomp$0, targetContainer) {
          var ancestorInst = targetInst$jscomp$0;
          if (0 === (eventSystemFlags & 1) && 0 === (eventSystemFlags & 2) && null !== targetInst$jscomp$0)
            a: for (; ; ) {
              if (null === targetInst$jscomp$0) return;
              var nodeTag = targetInst$jscomp$0.tag;
              if (3 === nodeTag || 4 === nodeTag) {
                var container = targetInst$jscomp$0.stateNode.containerInfo;
                if (container === targetContainer) break;
                if (4 === nodeTag)
                  for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {
                    var grandTag = nodeTag.tag;
                    if ((3 === grandTag || 4 === grandTag) && nodeTag.stateNode.containerInfo === targetContainer)
                      return;
                    nodeTag = nodeTag.return;
                  }
                for (; null !== container; ) {
                  nodeTag = getClosestInstanceFromNode(container);
                  if (null === nodeTag) return;
                  grandTag = nodeTag.tag;
                  if (5 === grandTag || 6 === grandTag || 26 === grandTag || 27 === grandTag) {
                    targetInst$jscomp$0 = ancestorInst = nodeTag;
                    continue a;
                  }
                  container = container.parentNode;
                }
              }
              targetInst$jscomp$0 = targetInst$jscomp$0.return;
            }
          batchedUpdates$1(function() {
            var targetInst = ancestorInst, nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
            a: {
              var reactName = topLevelEventsToReactNames.get(domEventName);
              if (void 0 !== reactName) {
                var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
                switch (domEventName) {
                  case "keypress":
                    if (0 === getEventCharCode(nativeEvent)) break a;
                  case "keydown":
                  case "keyup":
                    SyntheticEventCtor = SyntheticKeyboardEvent;
                    break;
                  case "focusin":
                    reactEventType = "focus";
                    SyntheticEventCtor = SyntheticFocusEvent;
                    break;
                  case "focusout":
                    reactEventType = "blur";
                    SyntheticEventCtor = SyntheticFocusEvent;
                    break;
                  case "beforeblur":
                  case "afterblur":
                    SyntheticEventCtor = SyntheticFocusEvent;
                    break;
                  case "click":
                    if (2 === nativeEvent.button) break a;
                  case "auxclick":
                  case "dblclick":
                  case "mousedown":
                  case "mousemove":
                  case "mouseup":
                  case "mouseout":
                  case "mouseover":
                  case "contextmenu":
                    SyntheticEventCtor = SyntheticMouseEvent;
                    break;
                  case "drag":
                  case "dragend":
                  case "dragenter":
                  case "dragexit":
                  case "dragleave":
                  case "dragover":
                  case "dragstart":
                  case "drop":
                    SyntheticEventCtor = SyntheticDragEvent;
                    break;
                  case "touchcancel":
                  case "touchend":
                  case "touchmove":
                  case "touchstart":
                    SyntheticEventCtor = SyntheticTouchEvent;
                    break;
                  case ANIMATION_END:
                  case ANIMATION_ITERATION:
                  case ANIMATION_START:
                    SyntheticEventCtor = SyntheticAnimationEvent;
                    break;
                  case TRANSITION_END:
                    SyntheticEventCtor = SyntheticTransitionEvent;
                    break;
                  case "scroll":
                  case "scrollend":
                    SyntheticEventCtor = SyntheticUIEvent;
                    break;
                  case "wheel":
                    SyntheticEventCtor = SyntheticWheelEvent;
                    break;
                  case "copy":
                  case "cut":
                  case "paste":
                    SyntheticEventCtor = SyntheticClipboardEvent;
                    break;
                  case "gotpointercapture":
                  case "lostpointercapture":
                  case "pointercancel":
                  case "pointerdown":
                  case "pointermove":
                  case "pointerout":
                  case "pointerover":
                  case "pointerup":
                    SyntheticEventCtor = SyntheticPointerEvent;
                    break;
                  case "toggle":
                  case "beforetoggle":
                    SyntheticEventCtor = SyntheticToggleEvent;
                }
                var inCapturePhase = 0 !== (eventSystemFlags & 4), accumulateTargetOnly = !inCapturePhase && ("scroll" === domEventName || "scrollend" === domEventName), reactEventName = inCapturePhase ? null !== reactName ? reactName + "Capture" : null : reactName;
                inCapturePhase = [];
                for (var instance = targetInst, lastHostComponent; null !== instance; ) {
                  var _instance2 = instance;
                  lastHostComponent = _instance2.stateNode;
                  _instance2 = _instance2.tag;
                  5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2 || null === lastHostComponent || null === reactEventName || (_instance2 = getListener(instance, reactEventName), null != _instance2 && inCapturePhase.push(
                    createDispatchListener(
                      instance,
                      _instance2,
                      lastHostComponent
                    )
                  ));
                  if (accumulateTargetOnly) break;
                  instance = instance.return;
                }
                0 < inCapturePhase.length && (reactName = new SyntheticEventCtor(
                  reactName,
                  reactEventType,
                  null,
                  nativeEvent,
                  nativeEventTarget
                ), dispatchQueue.push({
                  event: reactName,
                  listeners: inCapturePhase
                }));
              }
            }
            if (0 === (eventSystemFlags & 7)) {
              a: {
                reactName = "mouseover" === domEventName || "pointerover" === domEventName;
                SyntheticEventCtor = "mouseout" === domEventName || "pointerout" === domEventName;
                if (reactName && nativeEvent !== currentReplayingEvent && (reactEventType = nativeEvent.relatedTarget || nativeEvent.fromElement) && (getClosestInstanceFromNode(reactEventType) || reactEventType[internalContainerInstanceKey]))
                  break a;
                if (SyntheticEventCtor || reactName) {
                  reactName = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget : (reactName = nativeEventTarget.ownerDocument) ? reactName.defaultView || reactName.parentWindow : window;
                  if (SyntheticEventCtor) {
                    if (reactEventType = nativeEvent.relatedTarget || nativeEvent.toElement, SyntheticEventCtor = targetInst, reactEventType = reactEventType ? getClosestInstanceFromNode(reactEventType) : null, null !== reactEventType && (accumulateTargetOnly = getNearestMountedFiber(reactEventType), inCapturePhase = reactEventType.tag, reactEventType !== accumulateTargetOnly || 5 !== inCapturePhase && 27 !== inCapturePhase && 6 !== inCapturePhase))
                      reactEventType = null;
                  } else SyntheticEventCtor = null, reactEventType = targetInst;
                  if (SyntheticEventCtor !== reactEventType) {
                    inCapturePhase = SyntheticMouseEvent;
                    _instance2 = "onMouseLeave";
                    reactEventName = "onMouseEnter";
                    instance = "mouse";
                    if ("pointerout" === domEventName || "pointerover" === domEventName)
                      inCapturePhase = SyntheticPointerEvent, _instance2 = "onPointerLeave", reactEventName = "onPointerEnter", instance = "pointer";
                    accumulateTargetOnly = null == SyntheticEventCtor ? reactName : getNodeFromInstance(SyntheticEventCtor);
                    lastHostComponent = null == reactEventType ? reactName : getNodeFromInstance(reactEventType);
                    reactName = new inCapturePhase(
                      _instance2,
                      instance + "leave",
                      SyntheticEventCtor,
                      nativeEvent,
                      nativeEventTarget
                    );
                    reactName.target = accumulateTargetOnly;
                    reactName.relatedTarget = lastHostComponent;
                    _instance2 = null;
                    getClosestInstanceFromNode(nativeEventTarget) === targetInst && (inCapturePhase = new inCapturePhase(
                      reactEventName,
                      instance + "enter",
                      reactEventType,
                      nativeEvent,
                      nativeEventTarget
                    ), inCapturePhase.target = lastHostComponent, inCapturePhase.relatedTarget = accumulateTargetOnly, _instance2 = inCapturePhase);
                    accumulateTargetOnly = _instance2;
                    if (SyntheticEventCtor && reactEventType)
                      b: {
                        inCapturePhase = getParent;
                        reactEventName = SyntheticEventCtor;
                        instance = reactEventType;
                        lastHostComponent = 0;
                        for (_instance2 = reactEventName; _instance2; _instance2 = inCapturePhase(_instance2))
                          lastHostComponent++;
                        _instance2 = 0;
                        for (var tempB = instance; tempB; tempB = inCapturePhase(tempB))
                          _instance2++;
                        for (; 0 < lastHostComponent - _instance2; )
                          reactEventName = inCapturePhase(reactEventName), lastHostComponent--;
                        for (; 0 < _instance2 - lastHostComponent; )
                          instance = inCapturePhase(instance), _instance2--;
                        for (; lastHostComponent--; ) {
                          if (reactEventName === instance || null !== instance && reactEventName === instance.alternate) {
                            inCapturePhase = reactEventName;
                            break b;
                          }
                          reactEventName = inCapturePhase(reactEventName);
                          instance = inCapturePhase(instance);
                        }
                        inCapturePhase = null;
                      }
                    else inCapturePhase = null;
                    null !== SyntheticEventCtor && accumulateEnterLeaveListenersForEvent(
                      dispatchQueue,
                      reactName,
                      SyntheticEventCtor,
                      inCapturePhase,
                      false
                    );
                    null !== reactEventType && null !== accumulateTargetOnly && accumulateEnterLeaveListenersForEvent(
                      dispatchQueue,
                      accumulateTargetOnly,
                      reactEventType,
                      inCapturePhase,
                      true
                    );
                  }
                }
              }
              a: {
                reactName = targetInst ? getNodeFromInstance(targetInst) : window;
                SyntheticEventCtor = reactName.nodeName && reactName.nodeName.toLowerCase();
                if ("select" === SyntheticEventCtor || "input" === SyntheticEventCtor && "file" === reactName.type)
                  var getTargetInstFunc = getTargetInstForChangeEvent;
                else if (isTextInputElement(reactName))
                  if (isInputEventSupported)
                    getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                  else {
                    getTargetInstFunc = getTargetInstForInputEventPolyfill;
                    var handleEventFunc = handleEventsForInputEventPolyfill;
                  }
                else
                  SyntheticEventCtor = reactName.nodeName, !SyntheticEventCtor || "input" !== SyntheticEventCtor.toLowerCase() || "checkbox" !== reactName.type && "radio" !== reactName.type ? targetInst && isCustomElement(targetInst.elementType) && (getTargetInstFunc = getTargetInstForChangeEvent) : getTargetInstFunc = getTargetInstForClickEvent;
                if (getTargetInstFunc && (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))) {
                  createAndAccumulateChangeEvent(
                    dispatchQueue,
                    getTargetInstFunc,
                    nativeEvent,
                    nativeEventTarget
                  );
                  break a;
                }
                handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);
                "focusout" === domEventName && targetInst && "number" === reactName.type && null != targetInst.memoizedProps.value && setDefaultValue(reactName, "number", reactName.value);
              }
              handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;
              switch (domEventName) {
                case "focusin":
                  if (isTextInputElement(handleEventFunc) || "true" === handleEventFunc.contentEditable)
                    activeElement = handleEventFunc, activeElementInst = targetInst, lastSelection = null;
                  break;
                case "focusout":
                  lastSelection = activeElementInst = activeElement = null;
                  break;
                case "mousedown":
                  mouseDown = true;
                  break;
                case "contextmenu":
                case "mouseup":
                case "dragend":
                  mouseDown = false;
                  constructSelectEvent(
                    dispatchQueue,
                    nativeEvent,
                    nativeEventTarget
                  );
                  break;
                case "selectionchange":
                  if (skipSelectionChangeEvent) break;
                case "keydown":
                case "keyup":
                  constructSelectEvent(
                    dispatchQueue,
                    nativeEvent,
                    nativeEventTarget
                  );
              }
              var fallbackData;
              if (canUseCompositionEvent)
                b: {
                  switch (domEventName) {
                    case "compositionstart":
                      var eventType = "onCompositionStart";
                      break b;
                    case "compositionend":
                      eventType = "onCompositionEnd";
                      break b;
                    case "compositionupdate":
                      eventType = "onCompositionUpdate";
                      break b;
                  }
                  eventType = void 0;
                }
              else
                isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : "keydown" === domEventName && nativeEvent.keyCode === START_KEYCODE && (eventType = "onCompositionStart");
              eventType && (useFallbackCompositionData && "ko" !== nativeEvent.locale && (isComposing || "onCompositionStart" !== eventType ? "onCompositionEnd" === eventType && isComposing && (fallbackData = getData()) : (root2 = nativeEventTarget, startText = "value" in root2 ? root2.value : root2.textContent, isComposing = true)), handleEventFunc = accumulateTwoPhaseListeners(
                targetInst,
                eventType
              ), 0 < handleEventFunc.length && (eventType = new SyntheticCompositionEvent(
                eventType,
                domEventName,
                null,
                nativeEvent,
                nativeEventTarget
              ), dispatchQueue.push({
                event: eventType,
                listeners: handleEventFunc
              }), fallbackData ? eventType.data = fallbackData : (fallbackData = getDataFromCustomEvent(nativeEvent), null !== fallbackData && (eventType.data = fallbackData))));
              if (fallbackData = canUseTextInputEvent ? getNativeBeforeInputChars(domEventName, nativeEvent) : getFallbackBeforeInputChars(domEventName, nativeEvent))
                eventType = accumulateTwoPhaseListeners(
                  targetInst,
                  "onBeforeInput"
                ), 0 < eventType.length && (handleEventFunc = new SyntheticInputEvent(
                  "onBeforeInput",
                  "beforeinput",
                  null,
                  nativeEvent,
                  nativeEventTarget
                ), dispatchQueue.push({
                  event: handleEventFunc,
                  listeners: eventType
                }), handleEventFunc.data = fallbackData);
              extractEvents$1(
                dispatchQueue,
                domEventName,
                targetInst,
                nativeEvent,
                nativeEventTarget
              );
            }
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          for (var captureName = reactName + "Capture", listeners = []; null !== targetFiber; ) {
            var _instance3 = targetFiber, stateNode = _instance3.stateNode;
            _instance3 = _instance3.tag;
            5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3 || null === stateNode || (_instance3 = getListener(targetFiber, captureName), null != _instance3 && listeners.unshift(
              createDispatchListener(targetFiber, _instance3, stateNode)
            ), _instance3 = getListener(targetFiber, reactName), null != _instance3 && listeners.push(
              createDispatchListener(targetFiber, _instance3, stateNode)
            ));
            if (3 === targetFiber.tag) return listeners;
            targetFiber = targetFiber.return;
          }
          return [];
        }
        function getParent(inst) {
          if (null === inst) return null;
          do
            inst = inst.return;
          while (inst && 5 !== inst.tag && 27 !== inst.tag);
          return inst ? inst : null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          for (var registrationName = event._reactName, listeners = []; null !== target && target !== common; ) {
            var _instance4 = target, alternate = _instance4.alternate, stateNode = _instance4.stateNode;
            _instance4 = _instance4.tag;
            if (null !== alternate && alternate === common) break;
            5 !== _instance4 && 26 !== _instance4 && 27 !== _instance4 || null === stateNode || (alternate = stateNode, inCapturePhase ? (stateNode = getListener(target, registrationName), null != stateNode && listeners.unshift(
              createDispatchListener(target, stateNode, alternate)
            )) : inCapturePhase || (stateNode = getListener(target, registrationName), null != stateNode && listeners.push(
              createDispatchListener(target, stateNode, alternate)
            )));
            target = target.return;
          }
          0 !== listeners.length && dispatchQueue.push({ event, listeners });
        }
        function validatePropertiesInDevelopment(type, props) {
          validateProperties$2(type, props);
          "input" !== type && "textarea" !== type && "select" !== type || null == props || null !== props.value || didWarnValueNull || (didWarnValueNull = true, "select" === type && props.multiple ? console.error(
            "`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",
            type
          ) : console.error(
            "`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",
            type
          ));
          var eventRegistry = {
            registrationNameDependencies,
            possibleRegistrationNames
          };
          isCustomElement(type) || "string" === typeof props.is || warnUnknownProperties(type, props, eventRegistry);
          props.contentEditable && !props.suppressContentEditableWarning && null != props.children && console.error(
            "A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."
          );
        }
        function warnForPropDifference(propName, serverValue, clientValue, serverDifferences) {
          serverValue !== clientValue && (clientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizeMarkupForTextOrAttribute(serverValue) !== clientValue && (serverDifferences[propName] = serverValue));
        }
        function warnForExtraAttributes(domElement, attributeNames, serverDifferences) {
          attributeNames.forEach(function(attributeName) {
            serverDifferences[getPropNameFromAttributeName(attributeName)] = "style" === attributeName ? getStylesObjectFromElement(domElement) : domElement.getAttribute(attributeName);
          });
        }
        function warnForInvalidEventListener(registrationName, listener) {
          false === listener ? console.error(
            "Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.",
            registrationName,
            registrationName,
            registrationName
          ) : console.error(
            "Expected `%s` listener to be a function, instead got a value of `%s` type.",
            registrationName,
            typeof listener
          );
        }
        function normalizeHTML(parent, html) {
          parent = parent.namespaceURI === MATH_NAMESPACE || parent.namespaceURI === SVG_NAMESPACE ? parent.ownerDocument.createElementNS(
            parent.namespaceURI,
            parent.tagName
          ) : parent.ownerDocument.createElement(parent.tagName);
          parent.innerHTML = html;
          return parent.innerHTML;
        }
        function normalizeMarkupForTextOrAttribute(markup) {
          willCoercionThrow(markup) && (console.error(
            "The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.",
            typeName(markup)
          ), testStringCoercion(markup));
          return ("string" === typeof markup ? markup : "" + markup).replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText) {
          clientText = normalizeMarkupForTextOrAttribute(clientText);
          return normalizeMarkupForTextOrAttribute(serverText) === clientText ? true : false;
        }
        function setProp(domElement, tag, key, value, props, prevValue) {
          switch (key) {
            case "children":
              if ("string" === typeof value)
                validateTextNesting(value, tag, false), "body" === tag || "textarea" === tag && "" === value || setTextContent(domElement, value);
              else if ("number" === typeof value || "bigint" === typeof value)
                validateTextNesting("" + value, tag, false), "body" !== tag && setTextContent(domElement, "" + value);
              break;
            case "className":
              setValueForKnownAttribute(domElement, "class", value);
              break;
            case "tabIndex":
              setValueForKnownAttribute(domElement, "tabindex", value);
              break;
            case "dir":
            case "role":
            case "viewBox":
            case "width":
            case "height":
              setValueForKnownAttribute(domElement, key, value);
              break;
            case "style":
              setValueForStyles(domElement, value, prevValue);
              break;
            case "data":
              if ("object" !== tag) {
                setValueForKnownAttribute(domElement, "data", value);
                break;
              }
            case "src":
            case "href":
              if ("" === value && ("a" !== tag || "href" !== key)) {
                "src" === key ? console.error(
                  'An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                  key,
                  key
                ) : console.error(
                  'An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                  key,
                  key
                );
                domElement.removeAttribute(key);
                break;
              }
              if (null == value || "function" === typeof value || "symbol" === typeof value || "boolean" === typeof value) {
                domElement.removeAttribute(key);
                break;
              }
              checkAttributeStringCoercion(value, key);
              value = sanitizeURL("" + value);
              domElement.setAttribute(key, value);
              break;
            case "action":
            case "formAction":
              null != value && ("form" === tag ? "formAction" === key ? console.error(
                "You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>."
              ) : "function" === typeof value && (null == props.encType && null == props.method || didWarnFormActionMethod || (didWarnFormActionMethod = true, console.error(
                "Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden."
              )), null == props.target || didWarnFormActionTarget || (didWarnFormActionTarget = true, console.error(
                "Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window."
              ))) : "input" === tag || "button" === tag ? "action" === key ? console.error(
                "You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>."
              ) : "input" !== tag || "submit" === props.type || "image" === props.type || didWarnFormActionType ? "button" !== tag || null == props.type || "submit" === props.type || didWarnFormActionType ? "function" === typeof value && (null == props.name || didWarnFormActionName || (didWarnFormActionName = true, console.error(
                'Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.'
              )), null == props.formEncType && null == props.formMethod || didWarnFormActionMethod || (didWarnFormActionMethod = true, console.error(
                "Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden."
              )), null == props.formTarget || didWarnFormActionTarget || (didWarnFormActionTarget = true, console.error(
                "Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window."
              ))) : (didWarnFormActionType = true, console.error(
                'A button can only specify a formAction along with type="submit" or no type.'
              )) : (didWarnFormActionType = true, console.error(
                'An input can only specify a formAction along with type="submit" or type="image".'
              )) : "action" === key ? console.error(
                "You can only pass the action prop to <form>."
              ) : console.error(
                "You can only pass the formAction prop to <input> or <button>."
              ));
              if ("function" === typeof value) {
                domElement.setAttribute(
                  key,
                  "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
                );
                break;
              } else
                "function" === typeof prevValue && ("formAction" === key ? ("input" !== tag && setProp(domElement, tag, "name", props.name, props, null), setProp(
                  domElement,
                  tag,
                  "formEncType",
                  props.formEncType,
                  props,
                  null
                ), setProp(
                  domElement,
                  tag,
                  "formMethod",
                  props.formMethod,
                  props,
                  null
                ), setProp(
                  domElement,
                  tag,
                  "formTarget",
                  props.formTarget,
                  props,
                  null
                )) : (setProp(
                  domElement,
                  tag,
                  "encType",
                  props.encType,
                  props,
                  null
                ), setProp(domElement, tag, "method", props.method, props, null), setProp(
                  domElement,
                  tag,
                  "target",
                  props.target,
                  props,
                  null
                )));
              if (null == value || "symbol" === typeof value || "boolean" === typeof value) {
                domElement.removeAttribute(key);
                break;
              }
              checkAttributeStringCoercion(value, key);
              value = sanitizeURL("" + value);
              domElement.setAttribute(key, value);
              break;
            case "onClick":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), domElement.onclick = noop$1);
              break;
            case "onScroll":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scroll", domElement));
              break;
            case "onScrollEnd":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scrollend", domElement));
              break;
            case "dangerouslySetInnerHTML":
              if (null != value) {
                if ("object" !== typeof value || !("__html" in value))
                  throw Error(
                    "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
                  );
                key = value.__html;
                if (null != key) {
                  if (null != props.children)
                    throw Error(
                      "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                    );
                  domElement.innerHTML = key;
                }
              }
              break;
            case "multiple":
              domElement.multiple = value && "function" !== typeof value && "symbol" !== typeof value;
              break;
            case "muted":
              domElement.muted = value && "function" !== typeof value && "symbol" !== typeof value;
              break;
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "ref":
              break;
            case "autoFocus":
              break;
            case "xlinkHref":
              if (null == value || "function" === typeof value || "boolean" === typeof value || "symbol" === typeof value) {
                domElement.removeAttribute("xlink:href");
                break;
              }
              checkAttributeStringCoercion(value, key);
              key = sanitizeURL("" + value);
              domElement.setAttributeNS(xlinkNamespace, "xlink:href", key);
              break;
            case "contentEditable":
            case "spellCheck":
            case "draggable":
            case "value":
            case "autoReverse":
            case "externalResourcesRequired":
            case "focusable":
            case "preserveAlpha":
              null != value && "function" !== typeof value && "symbol" !== typeof value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, "" + value)) : domElement.removeAttribute(key);
              break;
            case "inert":
              "" !== value || didWarnForNewBooleanPropsWithEmptyValue[key] || (didWarnForNewBooleanPropsWithEmptyValue[key] = true, console.error(
                "Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",
                key
              ));
            case "allowFullScreen":
            case "async":
            case "autoPlay":
            case "controls":
            case "default":
            case "defer":
            case "disabled":
            case "disablePictureInPicture":
            case "disableRemotePlayback":
            case "formNoValidate":
            case "hidden":
            case "loop":
            case "noModule":
            case "noValidate":
            case "open":
            case "playsInline":
            case "readOnly":
            case "required":
            case "reversed":
            case "scoped":
            case "seamless":
            case "itemScope":
              value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, "") : domElement.removeAttribute(key);
              break;
            case "capture":
            case "download":
              true === value ? domElement.setAttribute(key, "") : false !== value && null != value && "function" !== typeof value && "symbol" !== typeof value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value)) : domElement.removeAttribute(key);
              break;
            case "cols":
            case "rows":
            case "size":
            case "span":
              null != value && "function" !== typeof value && "symbol" !== typeof value && !isNaN(value) && 1 <= value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value)) : domElement.removeAttribute(key);
              break;
            case "rowSpan":
            case "start":
              null == value || "function" === typeof value || "symbol" === typeof value || isNaN(value) ? domElement.removeAttribute(key) : (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value));
              break;
            case "popover":
              listenToNonDelegatedEvent("beforetoggle", domElement);
              listenToNonDelegatedEvent("toggle", domElement);
              setValueForAttribute(domElement, "popover", value);
              break;
            case "xlinkActuate":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:actuate",
                value
              );
              break;
            case "xlinkArcrole":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:arcrole",
                value
              );
              break;
            case "xlinkRole":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:role",
                value
              );
              break;
            case "xlinkShow":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:show",
                value
              );
              break;
            case "xlinkTitle":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:title",
                value
              );
              break;
            case "xlinkType":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:type",
                value
              );
              break;
            case "xmlBase":
              setValueForNamespacedAttribute(
                domElement,
                xmlNamespace,
                "xml:base",
                value
              );
              break;
            case "xmlLang":
              setValueForNamespacedAttribute(
                domElement,
                xmlNamespace,
                "xml:lang",
                value
              );
              break;
            case "xmlSpace":
              setValueForNamespacedAttribute(
                domElement,
                xmlNamespace,
                "xml:space",
                value
              );
              break;
            case "is":
              null != prevValue && console.error(
                'Cannot update the "is" prop after it has been initialized.'
              );
              setValueForAttribute(domElement, "is", value);
              break;
            case "innerText":
            case "textContent":
              break;
            case "popoverTarget":
              didWarnPopoverTargetObject || null == value || "object" !== typeof value || (didWarnPopoverTargetObject = true, console.error(
                "The `popoverTarget` prop expects the ID of an Element as a string. Received %s instead.",
                value
              ));
            default:
              !(2 < key.length) || "o" !== key[0] && "O" !== key[0] || "n" !== key[1] && "N" !== key[1] ? (key = getAttributeAlias(key), setValueForAttribute(domElement, key, value)) : registrationNameDependencies.hasOwnProperty(key) && null != value && "function" !== typeof value && warnForInvalidEventListener(key, value);
          }
        }
        function setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {
          switch (key) {
            case "style":
              setValueForStyles(domElement, value, prevValue);
              break;
            case "dangerouslySetInnerHTML":
              if (null != value) {
                if ("object" !== typeof value || !("__html" in value))
                  throw Error(
                    "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
                  );
                key = value.__html;
                if (null != key) {
                  if (null != props.children)
                    throw Error(
                      "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                    );
                  domElement.innerHTML = key;
                }
              }
              break;
            case "children":
              "string" === typeof value ? setTextContent(domElement, value) : ("number" === typeof value || "bigint" === typeof value) && setTextContent(domElement, "" + value);
              break;
            case "onScroll":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scroll", domElement));
              break;
            case "onScrollEnd":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scrollend", domElement));
              break;
            case "onClick":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), domElement.onclick = noop$1);
              break;
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "innerHTML":
            case "ref":
              break;
            case "innerText":
            case "textContent":
              break;
            default:
              if (registrationNameDependencies.hasOwnProperty(key))
                null != value && "function" !== typeof value && warnForInvalidEventListener(key, value);
              else
                a: {
                  if ("o" === key[0] && "n" === key[1] && (props = key.endsWith("Capture"), tag = key.slice(2, props ? key.length - 7 : void 0), prevValue = domElement[internalPropsKey] || null, prevValue = null != prevValue ? prevValue[key] : null, "function" === typeof prevValue && domElement.removeEventListener(tag, prevValue, props), "function" === typeof value)) {
                    "function" !== typeof prevValue && null !== prevValue && (key in domElement ? domElement[key] = null : domElement.hasAttribute(key) && domElement.removeAttribute(key));
                    domElement.addEventListener(tag, value, props);
                    break a;
                  }
                  key in domElement ? domElement[key] = value : true === value ? domElement.setAttribute(key, "") : setValueForAttribute(domElement, key, value);
                }
          }
        }
        function setInitialProperties(domElement, tag, props) {
          validatePropertiesInDevelopment(tag, props);
          switch (tag) {
            case "div":
            case "span":
            case "svg":
            case "path":
            case "a":
            case "g":
            case "p":
            case "li":
              break;
            case "img":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              var hasSrc = false, hasSrcSet = false, propKey;
              for (propKey in props)
                if (props.hasOwnProperty(propKey)) {
                  var propValue = props[propKey];
                  if (null != propValue)
                    switch (propKey) {
                      case "src":
                        hasSrc = true;
                        break;
                      case "srcSet":
                        hasSrcSet = true;
                        break;
                      case "children":
                      case "dangerouslySetInnerHTML":
                        throw Error(
                          tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                        );
                      default:
                        setProp(domElement, tag, propKey, propValue, props, null);
                    }
                }
              hasSrcSet && setProp(domElement, tag, "srcSet", props.srcSet, props, null);
              hasSrc && setProp(domElement, tag, "src", props.src, props, null);
              return;
            case "input":
              checkControlledValueProps("input", props);
              listenToNonDelegatedEvent("invalid", domElement);
              var defaultValue = propKey = propValue = hasSrcSet = null, checked = null, defaultChecked = null;
              for (hasSrc in props)
                if (props.hasOwnProperty(hasSrc)) {
                  var _propValue = props[hasSrc];
                  if (null != _propValue)
                    switch (hasSrc) {
                      case "name":
                        hasSrcSet = _propValue;
                        break;
                      case "type":
                        propValue = _propValue;
                        break;
                      case "checked":
                        checked = _propValue;
                        break;
                      case "defaultChecked":
                        defaultChecked = _propValue;
                        break;
                      case "value":
                        propKey = _propValue;
                        break;
                      case "defaultValue":
                        defaultValue = _propValue;
                        break;
                      case "children":
                      case "dangerouslySetInnerHTML":
                        if (null != _propValue)
                          throw Error(
                            tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                          );
                        break;
                      default:
                        setProp(domElement, tag, hasSrc, _propValue, props, null);
                    }
                }
              validateInputProps(domElement, props);
              initInput(
                domElement,
                propKey,
                defaultValue,
                checked,
                defaultChecked,
                propValue,
                hasSrcSet,
                false
              );
              return;
            case "select":
              checkControlledValueProps("select", props);
              listenToNonDelegatedEvent("invalid", domElement);
              hasSrc = propValue = propKey = null;
              for (hasSrcSet in props)
                if (props.hasOwnProperty(hasSrcSet) && (defaultValue = props[hasSrcSet], null != defaultValue))
                  switch (hasSrcSet) {
                    case "value":
                      propKey = defaultValue;
                      break;
                    case "defaultValue":
                      propValue = defaultValue;
                      break;
                    case "multiple":
                      hasSrc = defaultValue;
                    default:
                      setProp(
                        domElement,
                        tag,
                        hasSrcSet,
                        defaultValue,
                        props,
                        null
                      );
                  }
              validateSelectProps(domElement, props);
              tag = propKey;
              props = propValue;
              domElement.multiple = !!hasSrc;
              null != tag ? updateOptions(domElement, !!hasSrc, tag, false) : null != props && updateOptions(domElement, !!hasSrc, props, true);
              return;
            case "textarea":
              checkControlledValueProps("textarea", props);
              listenToNonDelegatedEvent("invalid", domElement);
              propKey = hasSrcSet = hasSrc = null;
              for (propValue in props)
                if (props.hasOwnProperty(propValue) && (defaultValue = props[propValue], null != defaultValue))
                  switch (propValue) {
                    case "value":
                      hasSrc = defaultValue;
                      break;
                    case "defaultValue":
                      hasSrcSet = defaultValue;
                      break;
                    case "children":
                      propKey = defaultValue;
                      break;
                    case "dangerouslySetInnerHTML":
                      if (null != defaultValue)
                        throw Error(
                          "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                        );
                      break;
                    default:
                      setProp(
                        domElement,
                        tag,
                        propValue,
                        defaultValue,
                        props,
                        null
                      );
                  }
              validateTextareaProps(domElement, props);
              initTextarea(domElement, hasSrc, hasSrcSet, propKey);
              return;
            case "option":
              validateOptionProps(domElement, props);
              for (checked in props)
                if (props.hasOwnProperty(checked) && (hasSrc = props[checked], null != hasSrc))
                  switch (checked) {
                    case "selected":
                      domElement.selected = hasSrc && "function" !== typeof hasSrc && "symbol" !== typeof hasSrc;
                      break;
                    default:
                      setProp(domElement, tag, checked, hasSrc, props, null);
                  }
              return;
            case "dialog":
              listenToNonDelegatedEvent("beforetoggle", domElement);
              listenToNonDelegatedEvent("toggle", domElement);
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)
                listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
              break;
            case "image":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "embed":
            case "source":
            case "link":
              listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
            case "area":
            case "base":
            case "br":
            case "col":
            case "hr":
            case "keygen":
            case "meta":
            case "param":
            case "track":
            case "wbr":
            case "menuitem":
              for (defaultChecked in props)
                if (props.hasOwnProperty(defaultChecked) && (hasSrc = props[defaultChecked], null != hasSrc))
                  switch (defaultChecked) {
                    case "children":
                    case "dangerouslySetInnerHTML":
                      throw Error(
                        tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                      );
                    default:
                      setProp(domElement, tag, defaultChecked, hasSrc, props, null);
                  }
              return;
            default:
              if (isCustomElement(tag)) {
                for (_propValue in props)
                  props.hasOwnProperty(_propValue) && (hasSrc = props[_propValue], void 0 !== hasSrc && setPropOnCustomElement(
                    domElement,
                    tag,
                    _propValue,
                    hasSrc,
                    props,
                    void 0
                  ));
                return;
              }
          }
          for (defaultValue in props)
            props.hasOwnProperty(defaultValue) && (hasSrc = props[defaultValue], null != hasSrc && setProp(domElement, tag, defaultValue, hasSrc, props, null));
        }
        function updateProperties(domElement, tag, lastProps, nextProps) {
          validatePropertiesInDevelopment(tag, nextProps);
          switch (tag) {
            case "div":
            case "span":
            case "svg":
            case "path":
            case "a":
            case "g":
            case "p":
            case "li":
              break;
            case "input":
              var name = null, type = null, value = null, defaultValue = null, lastDefaultValue = null, checked = null, defaultChecked = null;
              for (propKey in lastProps) {
                var lastProp = lastProps[propKey];
                if (lastProps.hasOwnProperty(propKey) && null != lastProp)
                  switch (propKey) {
                    case "checked":
                      break;
                    case "value":
                      break;
                    case "defaultValue":
                      lastDefaultValue = lastProp;
                    default:
                      nextProps.hasOwnProperty(propKey) || setProp(
                        domElement,
                        tag,
                        propKey,
                        null,
                        nextProps,
                        lastProp
                      );
                  }
              }
              for (var _propKey8 in nextProps) {
                var propKey = nextProps[_propKey8];
                lastProp = lastProps[_propKey8];
                if (nextProps.hasOwnProperty(_propKey8) && (null != propKey || null != lastProp))
                  switch (_propKey8) {
                    case "type":
                      type = propKey;
                      break;
                    case "name":
                      name = propKey;
                      break;
                    case "checked":
                      checked = propKey;
                      break;
                    case "defaultChecked":
                      defaultChecked = propKey;
                      break;
                    case "value":
                      value = propKey;
                      break;
                    case "defaultValue":
                      defaultValue = propKey;
                      break;
                    case "children":
                    case "dangerouslySetInnerHTML":
                      if (null != propKey)
                        throw Error(
                          tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                        );
                      break;
                    default:
                      propKey !== lastProp && setProp(
                        domElement,
                        tag,
                        _propKey8,
                        propKey,
                        nextProps,
                        lastProp
                      );
                  }
              }
              tag = "checkbox" === lastProps.type || "radio" === lastProps.type ? null != lastProps.checked : null != lastProps.value;
              nextProps = "checkbox" === nextProps.type || "radio" === nextProps.type ? null != nextProps.checked : null != nextProps.value;
              tag || !nextProps || didWarnUncontrolledToControlled || (console.error(
                "A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"
              ), didWarnUncontrolledToControlled = true);
              !tag || nextProps || didWarnControlledToUncontrolled || (console.error(
                "A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"
              ), didWarnControlledToUncontrolled = true);
              updateInput(
                domElement,
                value,
                defaultValue,
                lastDefaultValue,
                checked,
                defaultChecked,
                type,
                name
              );
              return;
            case "select":
              propKey = value = defaultValue = _propKey8 = null;
              for (type in lastProps)
                if (lastDefaultValue = lastProps[type], lastProps.hasOwnProperty(type) && null != lastDefaultValue)
                  switch (type) {
                    case "value":
                      break;
                    case "multiple":
                      propKey = lastDefaultValue;
                    default:
                      nextProps.hasOwnProperty(type) || setProp(
                        domElement,
                        tag,
                        type,
                        null,
                        nextProps,
                        lastDefaultValue
                      );
                  }
              for (name in nextProps)
                if (type = nextProps[name], lastDefaultValue = lastProps[name], nextProps.hasOwnProperty(name) && (null != type || null != lastDefaultValue))
                  switch (name) {
                    case "value":
                      _propKey8 = type;
                      break;
                    case "defaultValue":
                      defaultValue = type;
                      break;
                    case "multiple":
                      value = type;
                    default:
                      type !== lastDefaultValue && setProp(
                        domElement,
                        tag,
                        name,
                        type,
                        nextProps,
                        lastDefaultValue
                      );
                  }
              nextProps = defaultValue;
              tag = value;
              lastProps = propKey;
              null != _propKey8 ? updateOptions(domElement, !!tag, _propKey8, false) : !!lastProps !== !!tag && (null != nextProps ? updateOptions(domElement, !!tag, nextProps, true) : updateOptions(domElement, !!tag, tag ? [] : "", false));
              return;
            case "textarea":
              propKey = _propKey8 = null;
              for (defaultValue in lastProps)
                if (name = lastProps[defaultValue], lastProps.hasOwnProperty(defaultValue) && null != name && !nextProps.hasOwnProperty(defaultValue))
                  switch (defaultValue) {
                    case "value":
                      break;
                    case "children":
                      break;
                    default:
                      setProp(domElement, tag, defaultValue, null, nextProps, name);
                  }
              for (value in nextProps)
                if (name = nextProps[value], type = lastProps[value], nextProps.hasOwnProperty(value) && (null != name || null != type))
                  switch (value) {
                    case "value":
                      _propKey8 = name;
                      break;
                    case "defaultValue":
                      propKey = name;
                      break;
                    case "children":
                      break;
                    case "dangerouslySetInnerHTML":
                      if (null != name)
                        throw Error(
                          "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                        );
                      break;
                    default:
                      name !== type && setProp(domElement, tag, value, name, nextProps, type);
                  }
              updateTextarea(domElement, _propKey8, propKey);
              return;
            case "option":
              for (var _propKey13 in lastProps)
                if (_propKey8 = lastProps[_propKey13], lastProps.hasOwnProperty(_propKey13) && null != _propKey8 && !nextProps.hasOwnProperty(_propKey13))
                  switch (_propKey13) {
                    case "selected":
                      domElement.selected = false;
                      break;
                    default:
                      setProp(
                        domElement,
                        tag,
                        _propKey13,
                        null,
                        nextProps,
                        _propKey8
                      );
                  }
              for (lastDefaultValue in nextProps)
                if (_propKey8 = nextProps[lastDefaultValue], propKey = lastProps[lastDefaultValue], nextProps.hasOwnProperty(lastDefaultValue) && _propKey8 !== propKey && (null != _propKey8 || null != propKey))
                  switch (lastDefaultValue) {
                    case "selected":
                      domElement.selected = _propKey8 && "function" !== typeof _propKey8 && "symbol" !== typeof _propKey8;
                      break;
                    default:
                      setProp(
                        domElement,
                        tag,
                        lastDefaultValue,
                        _propKey8,
                        nextProps,
                        propKey
                      );
                  }
              return;
            case "img":
            case "link":
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "keygen":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr":
            case "menuitem":
              for (var _propKey15 in lastProps)
                _propKey8 = lastProps[_propKey15], lastProps.hasOwnProperty(_propKey15) && null != _propKey8 && !nextProps.hasOwnProperty(_propKey15) && setProp(
                  domElement,
                  tag,
                  _propKey15,
                  null,
                  nextProps,
                  _propKey8
                );
              for (checked in nextProps)
                if (_propKey8 = nextProps[checked], propKey = lastProps[checked], nextProps.hasOwnProperty(checked) && _propKey8 !== propKey && (null != _propKey8 || null != propKey))
                  switch (checked) {
                    case "children":
                    case "dangerouslySetInnerHTML":
                      if (null != _propKey8)
                        throw Error(
                          tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                        );
                      break;
                    default:
                      setProp(
                        domElement,
                        tag,
                        checked,
                        _propKey8,
                        nextProps,
                        propKey
                      );
                  }
              return;
            default:
              if (isCustomElement(tag)) {
                for (var _propKey17 in lastProps)
                  _propKey8 = lastProps[_propKey17], lastProps.hasOwnProperty(_propKey17) && void 0 !== _propKey8 && !nextProps.hasOwnProperty(_propKey17) && setPropOnCustomElement(
                    domElement,
                    tag,
                    _propKey17,
                    void 0,
                    nextProps,
                    _propKey8
                  );
                for (defaultChecked in nextProps)
                  _propKey8 = nextProps[defaultChecked], propKey = lastProps[defaultChecked], !nextProps.hasOwnProperty(defaultChecked) || _propKey8 === propKey || void 0 === _propKey8 && void 0 === propKey || setPropOnCustomElement(
                    domElement,
                    tag,
                    defaultChecked,
                    _propKey8,
                    nextProps,
                    propKey
                  );
                return;
              }
          }
          for (var _propKey19 in lastProps)
            _propKey8 = lastProps[_propKey19], lastProps.hasOwnProperty(_propKey19) && null != _propKey8 && !nextProps.hasOwnProperty(_propKey19) && setProp(domElement, tag, _propKey19, null, nextProps, _propKey8);
          for (lastProp in nextProps)
            _propKey8 = nextProps[lastProp], propKey = lastProps[lastProp], !nextProps.hasOwnProperty(lastProp) || _propKey8 === propKey || null == _propKey8 && null == propKey || setProp(domElement, tag, lastProp, _propKey8, nextProps, propKey);
        }
        function getPropNameFromAttributeName(attrName) {
          switch (attrName) {
            case "class":
              return "className";
            case "for":
              return "htmlFor";
            default:
              return attrName;
          }
        }
        function getStylesObjectFromElement(domElement) {
          var serverValueInObjectForm = {};
          domElement = domElement.style;
          for (var i = 0; i < domElement.length; i++) {
            var styleName = domElement[i];
            serverValueInObjectForm[styleName] = domElement.getPropertyValue(styleName);
          }
          return serverValueInObjectForm;
        }
        function diffHydratedStyles(domElement, value$jscomp$0, serverDifferences) {
          if (null != value$jscomp$0 && "object" !== typeof value$jscomp$0)
            console.error(
              "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
            );
          else {
            var clientValue;
            var delimiter = clientValue = "", styleName;
            for (styleName in value$jscomp$0)
              if (value$jscomp$0.hasOwnProperty(styleName)) {
                var value = value$jscomp$0[styleName];
                null != value && "boolean" !== typeof value && "" !== value && (0 === styleName.indexOf("--") ? (checkCSSPropertyStringCoercion(value, styleName), clientValue += delimiter + styleName + ":" + ("" + value).trim()) : "number" !== typeof value || 0 === value || unitlessNumbers.has(styleName) ? (checkCSSPropertyStringCoercion(value, styleName), clientValue += delimiter + styleName.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-") + ":" + ("" + value).trim()) : clientValue += delimiter + styleName.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-") + ":" + value + "px", delimiter = ";");
              }
            clientValue = clientValue || null;
            value$jscomp$0 = domElement.getAttribute("style");
            value$jscomp$0 !== clientValue && (clientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizeMarkupForTextOrAttribute(value$jscomp$0) !== clientValue && (serverDifferences.style = getStylesObjectFromElement(domElement)));
          }
        }
        function hydrateAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
          extraAttributes.delete(attributeName);
          domElement = domElement.getAttribute(attributeName);
          if (null === domElement)
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                return;
            }
          else if (null != value)
            switch (typeof value) {
              case "function":
              case "symbol":
              case "boolean":
                break;
              default:
                if (checkAttributeStringCoercion(value, propKey), domElement === "" + value)
                  return;
            }
          warnForPropDifference(propKey, domElement, value, serverDifferences);
        }
        function hydrateBooleanAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
          extraAttributes.delete(attributeName);
          domElement = domElement.getAttribute(attributeName);
          if (null === domElement) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
            }
            if (!value) return;
          } else
            switch (typeof value) {
              case "function":
              case "symbol":
                break;
              default:
                if (value) return;
            }
          warnForPropDifference(propKey, domElement, value, serverDifferences);
        }
        function hydrateBooleanishAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
          extraAttributes.delete(attributeName);
          domElement = domElement.getAttribute(attributeName);
          if (null === domElement)
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
                return;
            }
          else if (null != value)
            switch (typeof value) {
              case "function":
              case "symbol":
                break;
              default:
                if (checkAttributeStringCoercion(value, attributeName), domElement === "" + value)
                  return;
            }
          warnForPropDifference(propKey, domElement, value, serverDifferences);
        }
        function hydrateNumericAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
          extraAttributes.delete(attributeName);
          domElement = domElement.getAttribute(attributeName);
          if (null === domElement)
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                return;
              default:
                if (isNaN(value)) return;
            }
          else if (null != value)
            switch (typeof value) {
              case "function":
              case "symbol":
              case "boolean":
                break;
              default:
                if (!isNaN(value) && (checkAttributeStringCoercion(value, propKey), domElement === "" + value))
                  return;
            }
          warnForPropDifference(propKey, domElement, value, serverDifferences);
        }
        function hydrateSanitizedAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
          extraAttributes.delete(attributeName);
          domElement = domElement.getAttribute(attributeName);
          if (null === domElement)
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                return;
            }
          else if (null != value)
            switch (typeof value) {
              case "function":
              case "symbol":
              case "boolean":
                break;
              default:
                if (checkAttributeStringCoercion(value, propKey), attributeName = sanitizeURL("" + value), domElement === attributeName)
                  return;
            }
          warnForPropDifference(propKey, domElement, value, serverDifferences);
        }
        function diffHydratedProperties(domElement, tag, props, hostContext) {
          for (var serverDifferences = {}, extraAttributes = /* @__PURE__ */ new Set(), attributes = domElement.attributes, i = 0; i < attributes.length; i++)
            switch (attributes[i].name.toLowerCase()) {
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributes.add(attributes[i].name);
            }
          if (isCustomElement(tag))
            for (var propKey in props) {
              if (props.hasOwnProperty(propKey)) {
                var value = props[propKey];
                if (null != value) {
                  if (registrationNameDependencies.hasOwnProperty(propKey))
                    "function" !== typeof value && warnForInvalidEventListener(propKey, value);
                  else if (true !== props.suppressHydrationWarning)
                    switch (propKey) {
                      case "children":
                        "string" !== typeof value && "number" !== typeof value || warnForPropDifference(
                          "children",
                          domElement.textContent,
                          value,
                          serverDifferences
                        );
                        continue;
                      case "suppressContentEditableWarning":
                      case "suppressHydrationWarning":
                      case "defaultValue":
                      case "defaultChecked":
                      case "innerHTML":
                      case "ref":
                        continue;
                      case "dangerouslySetInnerHTML":
                        attributes = domElement.innerHTML;
                        value = value ? value.__html : void 0;
                        null != value && (value = normalizeHTML(domElement, value), warnForPropDifference(
                          propKey,
                          attributes,
                          value,
                          serverDifferences
                        ));
                        continue;
                      case "style":
                        extraAttributes.delete(propKey);
                        diffHydratedStyles(domElement, value, serverDifferences);
                        continue;
                      case "offsetParent":
                      case "offsetTop":
                      case "offsetLeft":
                      case "offsetWidth":
                      case "offsetHeight":
                      case "isContentEditable":
                      case "outerText":
                      case "outerHTML":
                        extraAttributes.delete(propKey.toLowerCase());
                        console.error(
                          "Assignment to read-only property will result in a no-op: `%s`",
                          propKey
                        );
                        continue;
                      case "className":
                        extraAttributes.delete("class");
                        attributes = getValueForAttributeOnCustomComponent(
                          domElement,
                          "class",
                          value
                        );
                        warnForPropDifference(
                          "className",
                          attributes,
                          value,
                          serverDifferences
                        );
                        continue;
                      default:
                        hostContext.context === HostContextNamespaceNone && "svg" !== tag && "math" !== tag ? extraAttributes.delete(propKey.toLowerCase()) : extraAttributes.delete(propKey), attributes = getValueForAttributeOnCustomComponent(
                          domElement,
                          propKey,
                          value
                        ), warnForPropDifference(
                          propKey,
                          attributes,
                          value,
                          serverDifferences
                        );
                    }
                }
              }
            }
          else
            for (value in props)
              if (props.hasOwnProperty(value) && (propKey = props[value], null != propKey)) {
                if (registrationNameDependencies.hasOwnProperty(value))
                  "function" !== typeof propKey && warnForInvalidEventListener(value, propKey);
                else if (true !== props.suppressHydrationWarning)
                  switch (value) {
                    case "children":
                      "string" !== typeof propKey && "number" !== typeof propKey || warnForPropDifference(
                        "children",
                        domElement.textContent,
                        propKey,
                        serverDifferences
                      );
                      continue;
                    case "suppressContentEditableWarning":
                    case "suppressHydrationWarning":
                    case "value":
                    case "checked":
                    case "selected":
                    case "defaultValue":
                    case "defaultChecked":
                    case "innerHTML":
                    case "ref":
                      continue;
                    case "dangerouslySetInnerHTML":
                      attributes = domElement.innerHTML;
                      propKey = propKey ? propKey.__html : void 0;
                      null != propKey && (propKey = normalizeHTML(domElement, propKey), attributes !== propKey && (serverDifferences[value] = { __html: attributes }));
                      continue;
                    case "className":
                      hydrateAttribute(
                        domElement,
                        value,
                        "class",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "tabIndex":
                      hydrateAttribute(
                        domElement,
                        value,
                        "tabindex",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "style":
                      extraAttributes.delete(value);
                      diffHydratedStyles(domElement, propKey, serverDifferences);
                      continue;
                    case "multiple":
                      extraAttributes.delete(value);
                      warnForPropDifference(
                        value,
                        domElement.multiple,
                        propKey,
                        serverDifferences
                      );
                      continue;
                    case "muted":
                      extraAttributes.delete(value);
                      warnForPropDifference(
                        value,
                        domElement.muted,
                        propKey,
                        serverDifferences
                      );
                      continue;
                    case "autoFocus":
                      extraAttributes.delete("autofocus");
                      warnForPropDifference(
                        value,
                        domElement.autofocus,
                        propKey,
                        serverDifferences
                      );
                      continue;
                    case "data":
                      if ("object" !== tag) {
                        extraAttributes.delete(value);
                        attributes = domElement.getAttribute("data");
                        warnForPropDifference(
                          value,
                          attributes,
                          propKey,
                          serverDifferences
                        );
                        continue;
                      }
                    case "src":
                    case "href":
                      if (!("" !== propKey || "a" === tag && "href" === value || "object" === tag && "data" === value)) {
                        "src" === value ? console.error(
                          'An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                          value,
                          value
                        ) : console.error(
                          'An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                          value,
                          value
                        );
                        continue;
                      }
                      hydrateSanitizedAttribute(
                        domElement,
                        value,
                        value,
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "action":
                    case "formAction":
                      attributes = domElement.getAttribute(value);
                      if ("function" === typeof propKey) {
                        extraAttributes.delete(value.toLowerCase());
                        "formAction" === value ? (extraAttributes.delete("name"), extraAttributes.delete("formenctype"), extraAttributes.delete("formmethod"), extraAttributes.delete("formtarget")) : (extraAttributes.delete("enctype"), extraAttributes.delete("method"), extraAttributes.delete("target"));
                        continue;
                      } else if (attributes === EXPECTED_FORM_ACTION_URL) {
                        extraAttributes.delete(value.toLowerCase());
                        warnForPropDifference(
                          value,
                          "function",
                          propKey,
                          serverDifferences
                        );
                        continue;
                      }
                      hydrateSanitizedAttribute(
                        domElement,
                        value,
                        value.toLowerCase(),
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkHref":
                      hydrateSanitizedAttribute(
                        domElement,
                        value,
                        "xlink:href",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "contentEditable":
                      hydrateBooleanishAttribute(
                        domElement,
                        value,
                        "contenteditable",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "spellCheck":
                      hydrateBooleanishAttribute(
                        domElement,
                        value,
                        "spellcheck",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "draggable":
                    case "autoReverse":
                    case "externalResourcesRequired":
                    case "focusable":
                    case "preserveAlpha":
                      hydrateBooleanishAttribute(
                        domElement,
                        value,
                        value,
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "allowFullScreen":
                    case "async":
                    case "autoPlay":
                    case "controls":
                    case "default":
                    case "defer":
                    case "disabled":
                    case "disablePictureInPicture":
                    case "disableRemotePlayback":
                    case "formNoValidate":
                    case "hidden":
                    case "loop":
                    case "noModule":
                    case "noValidate":
                    case "open":
                    case "playsInline":
                    case "readOnly":
                    case "required":
                    case "reversed":
                    case "scoped":
                    case "seamless":
                    case "itemScope":
                      hydrateBooleanAttribute(
                        domElement,
                        value,
                        value.toLowerCase(),
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "capture":
                    case "download":
                      a: {
                        i = domElement;
                        var attributeName = attributes = value, serverDifferences$jscomp$0 = serverDifferences;
                        extraAttributes.delete(attributeName);
                        i = i.getAttribute(attributeName);
                        if (null === i)
                          switch (typeof propKey) {
                            case "undefined":
                            case "function":
                            case "symbol":
                              break a;
                            default:
                              if (false === propKey) break a;
                          }
                        else if (null != propKey)
                          switch (typeof propKey) {
                            case "function":
                            case "symbol":
                              break;
                            case "boolean":
                              if (true === propKey && "" === i) break a;
                              break;
                            default:
                              if (checkAttributeStringCoercion(propKey, attributes), i === "" + propKey)
                                break a;
                          }
                        warnForPropDifference(
                          attributes,
                          i,
                          propKey,
                          serverDifferences$jscomp$0
                        );
                      }
                      continue;
                    case "cols":
                    case "rows":
                    case "size":
                    case "span":
                      a: {
                        i = domElement;
                        attributeName = attributes = value;
                        serverDifferences$jscomp$0 = serverDifferences;
                        extraAttributes.delete(attributeName);
                        i = i.getAttribute(attributeName);
                        if (null === i)
                          switch (typeof propKey) {
                            case "undefined":
                            case "function":
                            case "symbol":
                            case "boolean":
                              break a;
                            default:
                              if (isNaN(propKey) || 1 > propKey) break a;
                          }
                        else if (null != propKey)
                          switch (typeof propKey) {
                            case "function":
                            case "symbol":
                            case "boolean":
                              break;
                            default:
                              if (!(isNaN(propKey) || 1 > propKey) && (checkAttributeStringCoercion(propKey, attributes), i === "" + propKey))
                                break a;
                          }
                        warnForPropDifference(
                          attributes,
                          i,
                          propKey,
                          serverDifferences$jscomp$0
                        );
                      }
                      continue;
                    case "rowSpan":
                      hydrateNumericAttribute(
                        domElement,
                        value,
                        "rowspan",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "start":
                      hydrateNumericAttribute(
                        domElement,
                        value,
                        value,
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xHeight":
                      hydrateAttribute(
                        domElement,
                        value,
                        "x-height",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkActuate":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:actuate",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkArcrole":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:arcrole",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkRole":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:role",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkShow":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:show",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkTitle":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:title",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkType":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:type",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xmlBase":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xml:base",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xmlLang":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xml:lang",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xmlSpace":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xml:space",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "inert":
                      "" !== propKey || didWarnForNewBooleanPropsWithEmptyValue[value] || (didWarnForNewBooleanPropsWithEmptyValue[value] = true, console.error(
                        "Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",
                        value
                      ));
                      hydrateBooleanAttribute(
                        domElement,
                        value,
                        value,
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    default:
                      if (!(2 < value.length) || "o" !== value[0] && "O" !== value[0] || "n" !== value[1] && "N" !== value[1]) {
                        i = getAttributeAlias(value);
                        attributes = false;
                        hostContext.context === HostContextNamespaceNone && "svg" !== tag && "math" !== tag ? extraAttributes.delete(i.toLowerCase()) : (attributeName = value.toLowerCase(), attributeName = possibleStandardNames.hasOwnProperty(
                          attributeName
                        ) ? possibleStandardNames[attributeName] || null : null, null !== attributeName && attributeName !== value && (attributes = true, extraAttributes.delete(attributeName)), extraAttributes.delete(i));
                        a: if (attributeName = domElement, serverDifferences$jscomp$0 = i, i = propKey, isAttributeNameSafe(serverDifferences$jscomp$0))
                          if (attributeName.hasAttribute(serverDifferences$jscomp$0))
                            attributeName = attributeName.getAttribute(
                              serverDifferences$jscomp$0
                            ), checkAttributeStringCoercion(
                              i,
                              serverDifferences$jscomp$0
                            ), i = attributeName === "" + i ? i : attributeName;
                          else {
                            switch (typeof i) {
                              case "function":
                              case "symbol":
                                break a;
                              case "boolean":
                                if (attributeName = serverDifferences$jscomp$0.toLowerCase().slice(0, 5), "data-" !== attributeName && "aria-" !== attributeName)
                                  break a;
                            }
                            i = void 0 === i ? void 0 : null;
                          }
                        else i = void 0;
                        attributes || warnForPropDifference(
                          value,
                          i,
                          propKey,
                          serverDifferences
                        );
                      }
                  }
              }
          0 < extraAttributes.size && true !== props.suppressHydrationWarning && warnForExtraAttributes(domElement, extraAttributes, serverDifferences);
          return 0 === Object.keys(serverDifferences).length ? null : serverDifferences;
        }
        function propNamesListJoin(list, combinator) {
          switch (list.length) {
            case 0:
              return "";
            case 1:
              return list[0];
            case 2:
              return list[0] + " " + combinator + " " + list[1];
            default:
              return list.slice(0, -1).join(", ") + ", " + combinator + " " + list[list.length - 1];
          }
        }
        function isLikelyStaticResource(initiatorType) {
          switch (initiatorType) {
            case "css":
            case "script":
            case "font":
            case "img":
            case "image":
            case "input":
            case "link":
              return true;
            default:
              return false;
          }
        }
        function estimateBandwidth() {
          if ("function" === typeof performance.getEntriesByType) {
            for (var count = 0, bits = 0, resourceEntries = performance.getEntriesByType("resource"), i = 0; i < resourceEntries.length; i++) {
              var entry = resourceEntries[i], transferSize = entry.transferSize, initiatorType = entry.initiatorType, duration = entry.duration;
              if (transferSize && duration && isLikelyStaticResource(initiatorType)) {
                initiatorType = 0;
                duration = entry.responseEnd;
                for (i += 1; i < resourceEntries.length; i++) {
                  var overlapEntry = resourceEntries[i], overlapStartTime = overlapEntry.startTime;
                  if (overlapStartTime > duration) break;
                  var overlapTransferSize = overlapEntry.transferSize, overlapInitiatorType = overlapEntry.initiatorType;
                  overlapTransferSize && isLikelyStaticResource(overlapInitiatorType) && (overlapEntry = overlapEntry.responseEnd, initiatorType += overlapTransferSize * (overlapEntry < duration ? 1 : (duration - overlapStartTime) / (overlapEntry - overlapStartTime)));
                }
                --i;
                bits += 8 * (transferSize + initiatorType) / (entry.duration / 1e3);
                count++;
                if (10 < count) break;
              }
            }
            if (0 < count) return bits / count / 1e6;
          }
          return navigator.connection && (count = navigator.connection.downlink, "number" === typeof count) ? count : 5;
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function getOwnHostContext(namespaceURI) {
          switch (namespaceURI) {
            case SVG_NAMESPACE:
              return HostContextNamespaceSvg;
            case MATH_NAMESPACE:
              return HostContextNamespaceMath;
            default:
              return HostContextNamespaceNone;
          }
        }
        function getChildHostContextProd(parentNamespace, type) {
          if (parentNamespace === HostContextNamespaceNone)
            switch (type) {
              case "svg":
                return HostContextNamespaceSvg;
              case "math":
                return HostContextNamespaceMath;
              default:
                return HostContextNamespaceNone;
            }
          return parentNamespace === HostContextNamespaceSvg && "foreignObject" === type ? HostContextNamespaceNone : parentNamespace;
        }
        function shouldSetTextContent(type, props) {
          return "textarea" === type || "noscript" === type || "string" === typeof props.children || "number" === typeof props.children || "bigint" === typeof props.children || "object" === typeof props.dangerouslySetInnerHTML && null !== props.dangerouslySetInnerHTML && null != props.dangerouslySetInnerHTML.__html;
        }
        function shouldAttemptEagerTransition() {
          var event = window.event;
          if (event && "popstate" === event.type) {
            if (event === currentPopstateTransitionEvent) return false;
            currentPopstateTransitionEvent = event;
            return true;
          }
          currentPopstateTransitionEvent = null;
          return false;
        }
        function resolveEventType() {
          var event = window.event;
          return event && event !== schedulerEvent ? event.type : null;
        }
        function resolveEventTimeStamp() {
          var event = window.event;
          return event && event !== schedulerEvent ? event.timeStamp : -1.1;
        }
        function handleErrorInNextTick(error) {
          setTimeout(function() {
            throw error;
          });
        }
        function commitMount(domElement, type, newProps) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              newProps.autoFocus && domElement.focus();
              break;
            case "img":
              newProps.src ? domElement.src = newProps.src : newProps.srcSet && (domElement.srcset = newProps.srcSet);
          }
        }
        function commitHydratedInstance() {
        }
        function commitUpdate(domElement, type, oldProps, newProps) {
          updateProperties(domElement, type, oldProps, newProps);
          domElement[internalPropsKey] = newProps;
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function warnForReactChildrenConflict(container) {
          if (!container.__reactWarnedAboutChildrenConflict) {
            var props = container[internalPropsKey] || null;
            if (null !== props) {
              var fiber = getInstanceFromNode(container);
              null !== fiber && ("string" === typeof props.children || "number" === typeof props.children ? (container.__reactWarnedAboutChildrenConflict = true, runWithFiberInDEV(fiber, function() {
                console.error(
                  'Cannot use a ref on a React element as a container to `createRoot` or `createPortal` if that element also sets "children" text content using React. It should be a leaf with no children. Otherwise it\'s ambiguous which children should be used.'
                );
              })) : null != props.dangerouslySetInnerHTML && (container.__reactWarnedAboutChildrenConflict = true, runWithFiberInDEV(fiber, function() {
                console.error(
                  'Cannot use a ref on a React element as a container to `createRoot` or `createPortal` if that element also sets "dangerouslySetInnerHTML" using React. It should be a leaf with no children. Otherwise it\'s ambiguous which children should be used.'
                );
              })));
            }
          }
        }
        function isSingletonScope(type) {
          return "head" === type;
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          (9 === container.nodeType ? container.body : "HTML" === container.nodeName ? container.ownerDocument.body : container).removeChild(child);
        }
        function clearHydrationBoundary(parentInstance, hydrationInstance) {
          var node = hydrationInstance, depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && 8 === nextNode.nodeType)
              if (node = nextNode.data, node === SUSPENSE_END_DATA || node === ACTIVITY_END_DATA) {
                if (0 === depth) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(hydrationInstance);
                  return;
                }
                depth--;
              } else if (node === SUSPENSE_START_DATA || node === SUSPENSE_PENDING_START_DATA || node === SUSPENSE_QUEUED_START_DATA || node === SUSPENSE_FALLBACK_START_DATA || node === ACTIVITY_START_DATA)
                depth++;
              else if (node === PREAMBLE_CONTRIBUTION_HTML)
                releaseSingletonInstance(
                  parentInstance.ownerDocument.documentElement
                );
              else if (node === PREAMBLE_CONTRIBUTION_HEAD) {
                node = parentInstance.ownerDocument.head;
                releaseSingletonInstance(node);
                for (var node$jscomp$0 = node.firstChild; node$jscomp$0; ) {
                  var nextNode$jscomp$0 = node$jscomp$0.nextSibling, nodeName = node$jscomp$0.nodeName;
                  node$jscomp$0[internalHoistableMarker] || "SCRIPT" === nodeName || "STYLE" === nodeName || "LINK" === nodeName && "stylesheet" === node$jscomp$0.rel.toLowerCase() || node.removeChild(node$jscomp$0);
                  node$jscomp$0 = nextNode$jscomp$0;
                }
              } else
                node === PREAMBLE_CONTRIBUTION_BODY && releaseSingletonInstance(parentInstance.ownerDocument.body);
            node = nextNode;
          } while (node);
          retryIfBlockedOn(hydrationInstance);
        }
        function hideOrUnhideDehydratedBoundary(suspenseInstance, isHidden) {
          var node = suspenseInstance;
          suspenseInstance = 0;
          do {
            var nextNode = node.nextSibling;
            1 === node.nodeType ? isHidden ? (node._stashedDisplay = node.style.display, node.style.display = "none") : (node.style.display = node._stashedDisplay || "", "" === node.getAttribute("style") && node.removeAttribute("style")) : 3 === node.nodeType && (isHidden ? (node._stashedText = node.nodeValue, node.nodeValue = "") : node.nodeValue = node._stashedText || "");
            if (nextNode && 8 === nextNode.nodeType)
              if (node = nextNode.data, node === SUSPENSE_END_DATA)
                if (0 === suspenseInstance) break;
                else suspenseInstance--;
              else
                node !== SUSPENSE_START_DATA && node !== SUSPENSE_PENDING_START_DATA && node !== SUSPENSE_QUEUED_START_DATA && node !== SUSPENSE_FALLBACK_START_DATA || suspenseInstance++;
            node = nextNode;
          } while (node);
        }
        function hideDehydratedBoundary(suspenseInstance) {
          hideOrUnhideDehydratedBoundary(suspenseInstance, true);
        }
        function hideInstance(instance) {
          instance = instance.style;
          "function" === typeof instance.setProperty ? instance.setProperty("display", "none", "important") : instance.display = "none";
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideDehydratedBoundary(dehydratedInstance) {
          hideOrUnhideDehydratedBoundary(dehydratedInstance, false);
        }
        function unhideInstance(instance, props) {
          props = props[STYLE];
          props = void 0 !== props && null !== props && props.hasOwnProperty("display") ? props.display : null;
          instance.style.display = null == props || "boolean" === typeof props ? "" : ("" + props).trim();
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainerSparingly(container) {
          var nextNode = container.firstChild;
          nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);
          for (; nextNode; ) {
            var node = nextNode;
            nextNode = nextNode.nextSibling;
            switch (node.nodeName) {
              case "HTML":
              case "HEAD":
              case "BODY":
                clearContainerSparingly(node);
                detachDeletedInstance(node);
                continue;
              case "SCRIPT":
              case "STYLE":
                continue;
              case "LINK":
                if ("stylesheet" === node.rel.toLowerCase()) continue;
            }
            container.removeChild(node);
          }
        }
        function canHydrateInstance(instance, type, props, inRootOrSingleton) {
          for (; 1 === instance.nodeType; ) {
            var anyProps = props;
            if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
              if (!inRootOrSingleton && ("INPUT" !== instance.nodeName || "hidden" !== instance.type))
                break;
            } else if (!inRootOrSingleton)
              if ("input" === type && "hidden" === instance.type) {
                checkAttributeStringCoercion(anyProps.name, "name");
                var name = null == anyProps.name ? null : "" + anyProps.name;
                if ("hidden" === anyProps.type && instance.getAttribute("name") === name)
                  return instance;
              } else return instance;
            else if (!instance[internalHoistableMarker])
              switch (type) {
                case "meta":
                  if (!instance.hasAttribute("itemprop")) break;
                  return instance;
                case "link":
                  name = instance.getAttribute("rel");
                  if ("stylesheet" === name && instance.hasAttribute("data-precedence"))
                    break;
                  else if (name !== anyProps.rel || instance.getAttribute("href") !== (null == anyProps.href || "" === anyProps.href ? null : anyProps.href) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin) || instance.getAttribute("title") !== (null == anyProps.title ? null : anyProps.title))
                    break;
                  return instance;
                case "style":
                  if (instance.hasAttribute("data-precedence")) break;
                  return instance;
                case "script":
                  name = instance.getAttribute("src");
                  if ((name !== (null == anyProps.src ? null : anyProps.src) || instance.getAttribute("type") !== (null == anyProps.type ? null : anyProps.type) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin)) && name && instance.hasAttribute("async") && !instance.hasAttribute("itemprop"))
                    break;
                  return instance;
                default:
                  return instance;
              }
            instance = getNextHydratable(instance.nextSibling);
            if (null === instance) break;
          }
          return null;
        }
        function canHydrateTextInstance(instance, text, inRootOrSingleton) {
          if ("" === text) return null;
          for (; 3 !== instance.nodeType; ) {
            if ((1 !== instance.nodeType || "INPUT" !== instance.nodeName || "hidden" !== instance.type) && !inRootOrSingleton)
              return null;
            instance = getNextHydratable(instance.nextSibling);
            if (null === instance) return null;
          }
          return instance;
        }
        function canHydrateHydrationBoundary(instance, inRootOrSingleton) {
          for (; 8 !== instance.nodeType; ) {
            if ((1 !== instance.nodeType || "INPUT" !== instance.nodeName || "hidden" !== instance.type) && !inRootOrSingleton)
              return null;
            instance = getNextHydratable(instance.nextSibling);
            if (null === instance) return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA || instance.data === SUSPENSE_QUEUED_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA || instance.data === SUSPENSE_PENDING_START_DATA && instance.ownerDocument.readyState !== DOCUMENT_READY_STATE_LOADING;
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          var ownerDocument = instance.ownerDocument;
          if (instance.data === SUSPENSE_QUEUED_START_DATA)
            instance._reactRetry = callback;
          else if (instance.data !== SUSPENSE_PENDING_START_DATA || ownerDocument.readyState !== DOCUMENT_READY_STATE_LOADING)
            callback();
          else {
            var listener = function() {
              callback();
              ownerDocument.removeEventListener("DOMContentLoaded", listener);
            };
            ownerDocument.addEventListener("DOMContentLoaded", listener);
            instance._reactRetry = listener;
          }
        }
        function getNextHydratable(node) {
          for (; null != node; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (1 === nodeType || 3 === nodeType) break;
            if (8 === nodeType) {
              nodeType = node.data;
              if (nodeType === SUSPENSE_START_DATA || nodeType === SUSPENSE_FALLBACK_START_DATA || nodeType === SUSPENSE_PENDING_START_DATA || nodeType === SUSPENSE_QUEUED_START_DATA || nodeType === ACTIVITY_START_DATA || nodeType === FORM_STATE_IS_MATCHING || nodeType === FORM_STATE_IS_NOT_MATCHING)
                break;
              if (nodeType === SUSPENSE_END_DATA || nodeType === ACTIVITY_END_DATA)
                return null;
            }
          }
          return node;
        }
        function describeHydratableInstanceForDevWarnings(instance) {
          if (1 === instance.nodeType) {
            for (var JSCompiler_temp_const = instance.nodeName.toLowerCase(), serverDifferences = {}, attributes = instance.attributes, i = 0; i < attributes.length; i++) {
              var attr = attributes[i];
              serverDifferences[getPropNameFromAttributeName(attr.name)] = "style" === attr.name.toLowerCase() ? getStylesObjectFromElement(instance) : attr.value;
            }
            return { type: JSCompiler_temp_const, props: serverDifferences };
          }
          return 8 === instance.nodeType ? instance.data === ACTIVITY_START_DATA ? { type: "Activity", props: {} } : { type: "Suspense", props: {} } : instance.nodeValue;
        }
        function diffHydratedTextForDevWarnings(textInstance, text, parentProps) {
          return null === parentProps || true !== parentProps[SUPPRESS_HYDRATION_WARNING] ? (textInstance.nodeValue === text ? textInstance = null : (text = normalizeMarkupForTextOrAttribute(text), textInstance = normalizeMarkupForTextOrAttribute(textInstance.nodeValue) === text ? null : textInstance.nodeValue), textInstance) : null;
        }
        function getNextHydratableInstanceAfterHydrationBoundary(hydrationInstance) {
          hydrationInstance = hydrationInstance.nextSibling;
          for (var depth = 0; hydrationInstance; ) {
            if (8 === hydrationInstance.nodeType) {
              var data = hydrationInstance.data;
              if (data === SUSPENSE_END_DATA || data === ACTIVITY_END_DATA) {
                if (0 === depth)
                  return getNextHydratable(hydrationInstance.nextSibling);
                depth--;
              } else
                data !== SUSPENSE_START_DATA && data !== SUSPENSE_FALLBACK_START_DATA && data !== SUSPENSE_PENDING_START_DATA && data !== SUSPENSE_QUEUED_START_DATA && data !== ACTIVITY_START_DATA || depth++;
            }
            hydrationInstance = hydrationInstance.nextSibling;
          }
          return null;
        }
        function getParentHydrationBoundary(targetInstance) {
          targetInstance = targetInstance.previousSibling;
          for (var depth = 0; targetInstance; ) {
            if (8 === targetInstance.nodeType) {
              var data = targetInstance.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_QUEUED_START_DATA || data === ACTIVITY_START_DATA) {
                if (0 === depth) return targetInstance;
                depth--;
              } else
                data !== SUSPENSE_END_DATA && data !== ACTIVITY_END_DATA || depth++;
            }
            targetInstance = targetInstance.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedActivityInstance(activityInstance) {
          retryIfBlockedOn(activityInstance);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function resolveSingletonInstance(type, props, rootContainerInstance, hostContext, validateDOMNestingDev) {
          validateDOMNestingDev && validateDOMNesting(type, hostContext.ancestorInfo);
          props = getOwnerDocumentFromRootContainer(rootContainerInstance);
          switch (type) {
            case "html":
              type = props.documentElement;
              if (!type)
                throw Error(
                  "React expected an <html> element (document.documentElement) to exist in the Document but one was not found. React never removes the documentElement for any Document it renders into so the cause is likely in some other script running on this page."
                );
              return type;
            case "head":
              type = props.head;
              if (!type)
                throw Error(
                  "React expected a <head> element (document.head) to exist in the Document but one was not found. React never removes the head for any Document it renders into so the cause is likely in some other script running on this page."
                );
              return type;
            case "body":
              type = props.body;
              if (!type)
                throw Error(
                  "React expected a <body> element (document.body) to exist in the Document but one was not found. React never removes the body for any Document it renders into so the cause is likely in some other script running on this page."
                );
              return type;
            default:
              throw Error(
                "resolveSingletonInstance was called with an element type that is not supported. This is a bug in React."
              );
          }
        }
        function acquireSingletonInstance(type, props, instance, internalInstanceHandle) {
          if (!instance[internalContainerInstanceKey] && getInstanceFromNode(instance)) {
            var tagName = instance.tagName.toLowerCase();
            console.error(
              "You are mounting a new %s component when a previous one has not first unmounted. It is an error to render more than one %s component at a time and attributes and children of these components will likely fail in unpredictable ways. Please only render a single instance of <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.",
              tagName,
              tagName,
              tagName
            );
          }
          switch (type) {
            case "html":
            case "head":
            case "body":
              break;
            default:
              console.error(
                "acquireSingletonInstance was called with an element type that is not supported. This is a bug in React."
              );
          }
          for (tagName = instance.attributes; tagName.length; )
            instance.removeAttributeNode(tagName[0]);
          setInitialProperties(instance, type, props);
          instance[internalInstanceKey] = internalInstanceHandle;
          instance[internalPropsKey] = props;
        }
        function releaseSingletonInstance(instance) {
          for (var attributes = instance.attributes; attributes.length; )
            instance.removeAttributeNode(attributes[0]);
          detachDeletedInstance(instance);
        }
        function getHoistableRoot(container) {
          return "function" === typeof container.getRootNode ? container.getRootNode() : 9 === container.nodeType ? container : container.ownerDocument;
        }
        function preconnectAs(rel, href, crossOrigin) {
          var ownerDocument = globalDocument;
          if (ownerDocument && "string" === typeof href && href) {
            var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
            limitedEscapedHref = 'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
            "string" === typeof crossOrigin && (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
            preconnectsSet.has(limitedEscapedHref) || (preconnectsSet.add(limitedEscapedHref), rel = { rel, crossOrigin, href }, null === ownerDocument.querySelector(limitedEscapedHref) && (href = ownerDocument.createElement("link"), setInitialProperties(href, "link", rel), markNodeAsHoistable(href), ownerDocument.head.appendChild(href)));
          }
        }
        function getResource(type, currentProps, pendingProps, currentResource) {
          var resourceRoot = (resourceRoot = rootInstanceStackCursor.current) ? getHoistableRoot(resourceRoot) : null;
          if (!resourceRoot)
            throw Error(
              '"resourceRoot" was expected to exist. This is a bug in React.'
            );
          switch (type) {
            case "meta":
            case "title":
              return null;
            case "style":
              return "string" === typeof pendingProps.precedence && "string" === typeof pendingProps.href ? (pendingProps = getStyleKey(pendingProps.href), currentProps = getResourcesFromRoot(resourceRoot).hoistableStyles, currentResource = currentProps.get(pendingProps), currentResource || (currentResource = {
                type: "style",
                instance: null,
                count: 0,
                state: null
              }, currentProps.set(pendingProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
            case "link":
              if ("stylesheet" === pendingProps.rel && "string" === typeof pendingProps.href && "string" === typeof pendingProps.precedence) {
                type = getStyleKey(pendingProps.href);
                var _styles = getResourcesFromRoot(resourceRoot).hoistableStyles, _resource = _styles.get(type);
                if (!_resource && (resourceRoot = resourceRoot.ownerDocument || resourceRoot, _resource = {
                  type: "stylesheet",
                  instance: null,
                  count: 0,
                  state: { loading: NotLoaded, preload: null }
                }, _styles.set(type, _resource), (_styles = resourceRoot.querySelector(
                  getStylesheetSelectorFromKey(type)
                )) && !_styles._p && (_resource.instance = _styles, _resource.state.loading = Loaded | Inserted), !preloadPropsMap.has(type))) {
                  var preloadProps = {
                    rel: "preload",
                    as: "style",
                    href: pendingProps.href,
                    crossOrigin: pendingProps.crossOrigin,
                    integrity: pendingProps.integrity,
                    media: pendingProps.media,
                    hrefLang: pendingProps.hrefLang,
                    referrerPolicy: pendingProps.referrerPolicy
                  };
                  preloadPropsMap.set(type, preloadProps);
                  _styles || preloadStylesheet(
                    resourceRoot,
                    type,
                    preloadProps,
                    _resource.state
                  );
                }
                if (currentProps && null === currentResource)
                  throw pendingProps = "\n\n  - " + describeLinkForResourceErrorDEV(currentProps) + "\n  + " + describeLinkForResourceErrorDEV(pendingProps), Error(
                    "Expected <link> not to update to be updated to a stylesheet with precedence. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." + pendingProps
                  );
                return _resource;
              }
              if (currentProps && null !== currentResource)
                throw pendingProps = "\n\n  - " + describeLinkForResourceErrorDEV(currentProps) + "\n  + " + describeLinkForResourceErrorDEV(pendingProps), Error(
                  "Expected stylesheet with precedence to not be updated to a different kind of <link>. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." + pendingProps
                );
              return null;
            case "script":
              return currentProps = pendingProps.async, pendingProps = pendingProps.src, "string" === typeof pendingProps && currentProps && "function" !== typeof currentProps && "symbol" !== typeof currentProps ? (pendingProps = getScriptKey(pendingProps), currentProps = getResourcesFromRoot(resourceRoot).hoistableScripts, currentResource = currentProps.get(pendingProps), currentResource || (currentResource = {
                type: "script",
                instance: null,
                count: 0,
                state: null
              }, currentProps.set(pendingProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
            default:
              throw Error(
                'getResource encountered a type it did not expect: "' + type + '". this is a bug in React.'
              );
          }
        }
        function describeLinkForResourceErrorDEV(props) {
          var describedProps = 0, description = "<link";
          "string" === typeof props.rel ? (describedProps++, description += ' rel="' + props.rel + '"') : hasOwnProperty.call(props, "rel") && (describedProps++, description += ' rel="' + (null === props.rel ? "null" : "invalid type " + typeof props.rel) + '"');
          "string" === typeof props.href ? (describedProps++, description += ' href="' + props.href + '"') : hasOwnProperty.call(props, "href") && (describedProps++, description += ' href="' + (null === props.href ? "null" : "invalid type " + typeof props.href) + '"');
          "string" === typeof props.precedence ? (describedProps++, description += ' precedence="' + props.precedence + '"') : hasOwnProperty.call(props, "precedence") && (describedProps++, description += " precedence={" + (null === props.precedence ? "null" : "invalid type " + typeof props.precedence) + "}");
          Object.getOwnPropertyNames(props).length > describedProps && (description += " ...");
          return description + " />";
        }
        function getStyleKey(href) {
          return 'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"';
        }
        function getStylesheetSelectorFromKey(key) {
          return 'link[rel="stylesheet"][' + key + "]";
        }
        function stylesheetPropsFromRawProps(rawProps) {
          return assign({}, rawProps, {
            "data-precedence": rawProps.precedence,
            precedence: null
          });
        }
        function preloadStylesheet(ownerDocument, key, preloadProps, state) {
          ownerDocument.querySelector(
            'link[rel="preload"][as="style"][' + key + "]"
          ) ? state.loading = Loaded : (key = ownerDocument.createElement("link"), state.preload = key, key.addEventListener("load", function() {
            return state.loading |= Loaded;
          }), key.addEventListener("error", function() {
            return state.loading |= Errored;
          }), setInitialProperties(key, "link", preloadProps), markNodeAsHoistable(key), ownerDocument.head.appendChild(key));
        }
        function getScriptKey(src) {
          return '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]';
        }
        function getScriptSelectorFromKey(key) {
          return "script[async]" + key;
        }
        function acquireResource(hoistableRoot, resource, props) {
          resource.count++;
          if (null === resource.instance)
            switch (resource.type) {
              case "style":
                var instance = hoistableRoot.querySelector(
                  'style[data-href~="' + escapeSelectorAttributeValueInsideDoubleQuotes(props.href) + '"]'
                );
                if (instance)
                  return resource.instance = instance, markNodeAsHoistable(instance), instance;
                var styleProps = assign({}, props, {
                  "data-href": props.href,
                  "data-precedence": props.precedence,
                  href: null,
                  precedence: null
                });
                instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement("style");
                markNodeAsHoistable(instance);
                setInitialProperties(instance, "style", styleProps);
                insertStylesheet(instance, props.precedence, hoistableRoot);
                return resource.instance = instance;
              case "stylesheet":
                styleProps = getStyleKey(props.href);
                var _instance = hoistableRoot.querySelector(
                  getStylesheetSelectorFromKey(styleProps)
                );
                if (_instance)
                  return resource.state.loading |= Inserted, resource.instance = _instance, markNodeAsHoistable(_instance), _instance;
                instance = stylesheetPropsFromRawProps(props);
                (styleProps = preloadPropsMap.get(styleProps)) && adoptPreloadPropsForStylesheet(instance, styleProps);
                _instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement("link");
                markNodeAsHoistable(_instance);
                var linkInstance = _instance;
                linkInstance._p = new Promise(function(resolve, reject) {
                  linkInstance.onload = resolve;
                  linkInstance.onerror = reject;
                });
                setInitialProperties(_instance, "link", instance);
                resource.state.loading |= Inserted;
                insertStylesheet(_instance, props.precedence, hoistableRoot);
                return resource.instance = _instance;
              case "script":
                _instance = getScriptKey(props.src);
                if (styleProps = hoistableRoot.querySelector(
                  getScriptSelectorFromKey(_instance)
                ))
                  return resource.instance = styleProps, markNodeAsHoistable(styleProps), styleProps;
                instance = props;
                if (styleProps = preloadPropsMap.get(_instance))
                  instance = assign({}, props), adoptPreloadPropsForScript(instance, styleProps);
                hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
                styleProps = hoistableRoot.createElement("script");
                markNodeAsHoistable(styleProps);
                setInitialProperties(styleProps, "link", instance);
                hoistableRoot.head.appendChild(styleProps);
                return resource.instance = styleProps;
              case "void":
                return null;
              default:
                throw Error(
                  'acquireResource encountered a resource type it did not expect: "' + resource.type + '". this is a bug in React.'
                );
            }
          else
            "stylesheet" === resource.type && (resource.state.loading & Inserted) === NotLoaded && (instance = resource.instance, resource.state.loading |= Inserted, insertStylesheet(instance, props.precedence, hoistableRoot));
          return resource.instance;
        }
        function insertStylesheet(instance, precedence, root3) {
          for (var nodes = root3.querySelectorAll(
            'link[rel="stylesheet"][data-precedence],style[data-precedence]'
          ), last = nodes.length ? nodes[nodes.length - 1] : null, prior = last, i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (node.dataset.precedence === precedence) prior = node;
            else if (prior !== last) break;
          }
          prior ? prior.parentNode.insertBefore(instance, prior.nextSibling) : (precedence = 9 === root3.nodeType ? root3.head : root3, precedence.insertBefore(instance, precedence.firstChild));
        }
        function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
          null == stylesheetProps.crossOrigin && (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
          null == stylesheetProps.referrerPolicy && (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
          null == stylesheetProps.title && (stylesheetProps.title = preloadProps.title);
        }
        function adoptPreloadPropsForScript(scriptProps, preloadProps) {
          null == scriptProps.crossOrigin && (scriptProps.crossOrigin = preloadProps.crossOrigin);
          null == scriptProps.referrerPolicy && (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
          null == scriptProps.integrity && (scriptProps.integrity = preloadProps.integrity);
        }
        function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
          if (null === tagCaches) {
            var cache = /* @__PURE__ */ new Map();
            var caches = tagCaches = /* @__PURE__ */ new Map();
            caches.set(ownerDocument, cache);
          } else
            caches = tagCaches, cache = caches.get(ownerDocument), cache || (cache = /* @__PURE__ */ new Map(), caches.set(ownerDocument, cache));
          if (cache.has(type)) return cache;
          cache.set(type, null);
          ownerDocument = ownerDocument.getElementsByTagName(type);
          for (caches = 0; caches < ownerDocument.length; caches++) {
            var node = ownerDocument[caches];
            if (!(node[internalHoistableMarker] || node[internalInstanceKey] || "link" === type && "stylesheet" === node.getAttribute("rel")) && node.namespaceURI !== SVG_NAMESPACE) {
              var nodeKey = node.getAttribute(keyAttribute) || "";
              nodeKey = type + nodeKey;
              var existing = cache.get(nodeKey);
              existing ? existing.push(node) : cache.set(nodeKey, [node]);
            }
          }
          return cache;
        }
        function mountHoistable(hoistableRoot, type, instance) {
          hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
          hoistableRoot.head.insertBefore(
            instance,
            "title" === type ? hoistableRoot.querySelector("head > title") : null
          );
        }
        function isHostHoistableType(type, props, hostContext) {
          var outsideHostContainerContext = !hostContext.ancestorInfo.containerTagInScope;
          if (hostContext.context === HostContextNamespaceSvg || null != props.itemProp)
            return !outsideHostContainerContext || null == props.itemProp || "meta" !== type && "title" !== type && "style" !== type && "link" !== type && "script" !== type || console.error(
              "Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop. Otherwise, try moving this tag into the <head> or <body> of the Document.",
              type,
              type
            ), false;
          switch (type) {
            case "meta":
            case "title":
              return true;
            case "style":
              if ("string" !== typeof props.precedence || "string" !== typeof props.href || "" === props.href) {
                outsideHostContainerContext && console.error(
                  'Cannot render a <style> outside the main document without knowing its precedence and a unique href key. React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that does not conflict with the `href` values used in any other hoisted <style> or <link rel="stylesheet" ...> tags.  Note that hoisting <style> tags is considered an advanced feature that most will not use directly. Consider moving the <style> tag to the <head> or consider adding a `precedence="default"` and `href="some unique resource identifier"`.'
                );
                break;
              }
              return true;
            case "link":
              if ("string" !== typeof props.rel || "string" !== typeof props.href || "" === props.href || props.onLoad || props.onError) {
                if ("stylesheet" === props.rel && "string" === typeof props.precedence) {
                  type = props.href;
                  var onError = props.onError, disabled = props.disabled;
                  hostContext = [];
                  props.onLoad && hostContext.push("`onLoad`");
                  onError && hostContext.push("`onError`");
                  null != disabled && hostContext.push("`disabled`");
                  onError = propNamesListJoin(hostContext, "and");
                  onError += 1 === hostContext.length ? " prop" : " props";
                  disabled = 1 === hostContext.length ? "an " + onError : "the " + onError;
                  hostContext.length && console.error(
                    'React encountered a <link rel="stylesheet" href="%s" ... /> with a `precedence` prop that also included %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.',
                    type,
                    disabled,
                    onError
                  );
                }
                outsideHostContainerContext && ("string" !== typeof props.rel || "string" !== typeof props.href || "" === props.href ? console.error(
                  "Cannot render a <link> outside the main document without a `rel` and `href` prop. Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag"
                ) : (props.onError || props.onLoad) && console.error(
                  "Cannot render a <link> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
                ));
                break;
              }
              switch (props.rel) {
                case "stylesheet":
                  return type = props.precedence, props = props.disabled, "string" !== typeof type && outsideHostContainerContext && console.error(
                    'Cannot render a <link rel="stylesheet" /> outside the main document without knowing its precedence. Consider adding precedence="default" or moving it into the root <head> tag.'
                  ), "string" === typeof type && null == props;
                default:
                  return true;
              }
            case "script":
              type = props.async && "function" !== typeof props.async && "symbol" !== typeof props.async;
              if (!type || props.onLoad || props.onError || !props.src || "string" !== typeof props.src) {
                outsideHostContainerContext && (type ? props.onLoad || props.onError ? console.error(
                  "Cannot render a <script> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
                ) : console.error(
                  "Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop. Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or somewhere in the <body>."
                ) : console.error(
                  'Cannot render a sync or defer <script> outside the main document without knowing its order. Try adding async="" or moving it into the root <head> tag.'
                ));
                break;
              }
              return true;
            case "noscript":
            case "template":
              outsideHostContainerContext && console.error(
                "Cannot render <%s> outside the main document. Try moving it into the root <head> tag.",
                type
              );
          }
          return false;
        }
        function preloadResource(resource) {
          return "stylesheet" === resource.type && (resource.state.loading & Settled) === NotLoaded ? false : true;
        }
        function suspendResource(state, hoistableRoot, resource, props) {
          if ("stylesheet" === resource.type && ("string" !== typeof props.media || false !== matchMedia(props.media).matches) && (resource.state.loading & Inserted) === NotLoaded) {
            if (null === resource.instance) {
              var key = getStyleKey(props.href), instance = hoistableRoot.querySelector(
                getStylesheetSelectorFromKey(key)
              );
              if (instance) {
                hoistableRoot = instance._p;
                null !== hoistableRoot && "object" === typeof hoistableRoot && "function" === typeof hoistableRoot.then && (state.count++, state = onUnsuspend.bind(state), hoistableRoot.then(state, state));
                resource.state.loading |= Inserted;
                resource.instance = instance;
                markNodeAsHoistable(instance);
                return;
              }
              instance = hoistableRoot.ownerDocument || hoistableRoot;
              props = stylesheetPropsFromRawProps(props);
              (key = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(props, key);
              instance = instance.createElement("link");
              markNodeAsHoistable(instance);
              var linkInstance = instance;
              linkInstance._p = new Promise(function(resolve, reject) {
                linkInstance.onload = resolve;
                linkInstance.onerror = reject;
              });
              setInitialProperties(instance, "link", props);
              resource.instance = instance;
            }
            null === state.stylesheets && (state.stylesheets = /* @__PURE__ */ new Map());
            state.stylesheets.set(resource, hoistableRoot);
            (hoistableRoot = resource.state.preload) && (resource.state.loading & Settled) === NotLoaded && (state.count++, resource = onUnsuspend.bind(state), hoistableRoot.addEventListener("load", resource), hoistableRoot.addEventListener("error", resource));
          }
        }
        function waitForCommitToBeReady(state, timeoutOffset) {
          state.stylesheets && 0 === state.count && insertSuspendedStylesheets(state, state.stylesheets);
          return 0 < state.count || 0 < state.imgCount ? function(commit) {
            var stylesheetTimer = setTimeout(function() {
              state.stylesheets && insertSuspendedStylesheets(state, state.stylesheets);
              if (state.unsuspend) {
                var unsuspend = state.unsuspend;
                state.unsuspend = null;
                unsuspend();
              }
            }, SUSPENSEY_STYLESHEET_TIMEOUT + timeoutOffset);
            0 < state.imgBytes && 0 === estimatedBytesWithinLimit && (estimatedBytesWithinLimit = 125 * estimateBandwidth() * SUSPENSEY_IMAGE_TIME_ESTIMATE);
            var imgTimer = setTimeout(
              function() {
                state.waitingForImages = false;
                if (0 === state.count && (state.stylesheets && insertSuspendedStylesheets(state, state.stylesheets), state.unsuspend)) {
                  var unsuspend = state.unsuspend;
                  state.unsuspend = null;
                  unsuspend();
                }
              },
              (state.imgBytes > estimatedBytesWithinLimit ? 50 : SUSPENSEY_IMAGE_TIMEOUT) + timeoutOffset
            );
            state.unsuspend = commit;
            return function() {
              state.unsuspend = null;
              clearTimeout(stylesheetTimer);
              clearTimeout(imgTimer);
            };
          } : null;
        }
        function onUnsuspend() {
          this.count--;
          if (0 === this.count && (0 === this.imgCount || !this.waitingForImages)) {
            if (this.stylesheets)
              insertSuspendedStylesheets(this, this.stylesheets);
            else if (this.unsuspend) {
              var unsuspend = this.unsuspend;
              this.unsuspend = null;
              unsuspend();
            }
          }
        }
        function insertSuspendedStylesheets(state, resources) {
          state.stylesheets = null;
          null !== state.unsuspend && (state.count++, precedencesByRoot = /* @__PURE__ */ new Map(), resources.forEach(insertStylesheetIntoRoot, state), precedencesByRoot = null, onUnsuspend.call(state));
        }
        function insertStylesheetIntoRoot(root3, resource) {
          if (!(resource.state.loading & Inserted)) {
            var precedences = precedencesByRoot.get(root3);
            if (precedences) var last = precedences.get(LAST_PRECEDENCE);
            else {
              precedences = /* @__PURE__ */ new Map();
              precedencesByRoot.set(root3, precedences);
              for (var nodes = root3.querySelectorAll(
                "link[data-precedence],style[data-precedence]"
              ), i = 0; i < nodes.length; i++) {
                var node = nodes[i];
                if ("LINK" === node.nodeName || "not all" !== node.getAttribute("media"))
                  precedences.set(node.dataset.precedence, node), last = node;
              }
              last && precedences.set(LAST_PRECEDENCE, last);
            }
            nodes = resource.instance;
            node = nodes.getAttribute("data-precedence");
            i = precedences.get(node) || last;
            i === last && precedences.set(LAST_PRECEDENCE, nodes);
            precedences.set(node, nodes);
            this.count++;
            last = onUnsuspend.bind(this);
            nodes.addEventListener("load", last);
            nodes.addEventListener("error", last);
            i ? i.parentNode.insertBefore(nodes, i.nextSibling) : (root3 = 9 === root3.nodeType ? root3.head : root3, root3.insertBefore(nodes, root3.firstChild));
            resource.state.loading |= Inserted;
          }
        }
        function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, onDefaultTransitionIndicator, formState) {
          this.tag = 1;
          this.containerInfo = containerInfo;
          this.pingCache = this.current = this.pendingChildren = null;
          this.timeoutHandle = noTimeout;
          this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
          this.callbackPriority = 0;
          this.expirationTimes = createLaneMap(-1);
          this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
          this.entanglements = createLaneMap(0);
          this.hiddenUpdates = createLaneMap(null);
          this.identifierPrefix = identifierPrefix;
          this.onUncaughtError = onUncaughtError;
          this.onCaughtError = onCaughtError;
          this.onRecoverableError = onRecoverableError;
          this.pooledCache = null;
          this.pooledCacheLanes = 0;
          this.formState = formState;
          this.incompleteTransitions = /* @__PURE__ */ new Map();
          this.passiveEffectDuration = this.effectDuration = -0;
          this.memoizedUpdaters = /* @__PURE__ */ new Set();
          containerInfo = this.pendingUpdatersLaneMap = [];
          for (tag = 0; 31 > tag; tag++) containerInfo.push(/* @__PURE__ */ new Set());
          this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
        }
        function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, identifierPrefix, formState, onUncaughtError, onCaughtError, onRecoverableError, onDefaultTransitionIndicator) {
          containerInfo = new FiberRootNode(
            containerInfo,
            tag,
            hydrate,
            identifierPrefix,
            onUncaughtError,
            onCaughtError,
            onRecoverableError,
            onDefaultTransitionIndicator,
            formState
          );
          tag = ConcurrentMode;
          true === isStrictMode && (tag |= StrictLegacyMode | StrictEffectsMode);
          tag |= ProfileMode;
          isStrictMode = createFiber(3, null, null, tag);
          containerInfo.current = isStrictMode;
          isStrictMode.stateNode = containerInfo;
          tag = createCache();
          retainCache(tag);
          containerInfo.pooledCache = tag;
          retainCache(tag);
          isStrictMode.memoizedState = {
            element: initialChildren,
            isDehydrated: hydrate,
            cache: tag
          };
          initializeUpdateQueue(isStrictMode);
          return containerInfo;
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) return emptyContextObject;
          parentComponent = emptyContextObject;
          return parentComponent;
        }
        function updateContainerImpl(rootFiber, lane, element, container, parentComponent, callback) {
          if (injectedHook && "function" === typeof injectedHook.onScheduleFiberRoot)
            try {
              injectedHook.onScheduleFiberRoot(rendererID, container, element);
            } catch (err) {
              hasLoggedError || (hasLoggedError = true, console.error(
                "React instrumentation encountered an error: %o",
                err
              ));
            }
          parentComponent = getContextForSubtree(parentComponent);
          null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
          isRendering && null !== current && !didWarnAboutNestedUpdates && (didWarnAboutNestedUpdates = true, console.error(
            "Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",
            getComponentNameFromFiber(current) || "Unknown"
          ));
          container = createUpdate(lane);
          container.payload = { element };
          callback = void 0 === callback ? null : callback;
          null !== callback && ("function" !== typeof callback && console.error(
            "Expected the last optional `callback` argument to be a function. Instead received: %s.",
            callback
          ), container.callback = callback);
          element = enqueueUpdate(rootFiber, container, lane);
          null !== element && (startUpdateTimerByLane(lane, "root.render()", null), scheduleUpdateOnFiber(element, rootFiber, lane), entangleTransitions(element, rootFiber, lane));
        }
        function markRetryLaneImpl(fiber, retryLane) {
          fiber = fiber.memoizedState;
          if (null !== fiber && null !== fiber.dehydrated) {
            var a = fiber.retryLane;
            fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
        }
        function attemptContinuousHydration(fiber) {
          if (13 === fiber.tag || 31 === fiber.tag) {
            var root3 = enqueueConcurrentRenderForLane(fiber, 67108864);
            null !== root3 && scheduleUpdateOnFiber(root3, fiber, 67108864);
            markRetryLaneIfNotHydrated(fiber, 67108864);
          }
        }
        function attemptHydrationAtCurrentPriority(fiber) {
          if (13 === fiber.tag || 31 === fiber.tag) {
            var lane = requestUpdateLane(fiber);
            lane = getBumpedLaneForHydrationByLane(lane);
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            null !== root3 && scheduleUpdateOnFiber(root3, fiber, lane);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var prevTransition = ReactSharedInternals.T;
          ReactSharedInternals.T = null;
          var previousPriority = ReactDOMSharedInternals.p;
          try {
            ReactDOMSharedInternals.p = DiscreteEventPriority, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var prevTransition = ReactSharedInternals.T;
          ReactSharedInternals.T = null;
          var previousPriority = ReactDOMSharedInternals.p;
          try {
            ReactDOMSharedInternals.p = ContinuousEventPriority, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (_enabled) {
            var blockedOn = findInstanceBlockingEvent(nativeEvent);
            if (null === blockedOn)
              dispatchEventForPluginEventSystem(
                domEventName,
                eventSystemFlags,
                nativeEvent,
                return_targetInst,
                targetContainer
              ), clearIfContinuousEvent(domEventName, nativeEvent);
            else if (queueIfContinuousEvent(
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            ))
              nativeEvent.stopPropagation();
            else if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & 4 && -1 < discreteReplayableEvents.indexOf(domEventName)) {
              for (; null !== blockedOn; ) {
                var fiber = getInstanceFromNode(blockedOn);
                if (null !== fiber)
                  switch (fiber.tag) {
                    case 3:
                      fiber = fiber.stateNode;
                      if (fiber.current.memoizedState.isDehydrated) {
                        var lanes = getHighestPriorityLanes(fiber.pendingLanes);
                        if (0 !== lanes) {
                          var root3 = fiber;
                          root3.pendingLanes |= 2;
                          for (root3.entangledLanes |= 2; lanes; ) {
                            var lane = 1 << 31 - clz32(lanes);
                            root3.entanglements[1] |= lane;
                            lanes &= ~lane;
                          }
                          ensureRootIsScheduled(fiber);
                          (executionContext & (RenderContext | CommitContext)) === NoContext && (workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS, flushSyncWorkAcrossRoots_impl(0, false));
                        }
                      }
                      break;
                    case 31:
                    case 13:
                      root3 = enqueueConcurrentRenderForLane(fiber, 2), null !== root3 && scheduleUpdateOnFiber(root3, fiber, 2), flushSyncWork$1(), markRetryLaneIfNotHydrated(fiber, 2);
                  }
                fiber = findInstanceBlockingEvent(nativeEvent);
                null === fiber && dispatchEventForPluginEventSystem(
                  domEventName,
                  eventSystemFlags,
                  nativeEvent,
                  return_targetInst,
                  targetContainer
                );
                if (fiber === blockedOn) break;
                blockedOn = fiber;
              }
              null !== blockedOn && nativeEvent.stopPropagation();
            } else
              dispatchEventForPluginEventSystem(
                domEventName,
                eventSystemFlags,
                nativeEvent,
                null,
                targetContainer
              );
          }
        }
        function findInstanceBlockingEvent(nativeEvent) {
          nativeEvent = getEventTarget(nativeEvent);
          return findInstanceBlockingTarget(nativeEvent);
        }
        function findInstanceBlockingTarget(targetNode) {
          return_targetInst = null;
          targetNode = getClosestInstanceFromNode(targetNode);
          if (null !== targetNode) {
            var nearestMounted = getNearestMountedFiber(targetNode);
            if (null === nearestMounted) targetNode = null;
            else {
              var tag = nearestMounted.tag;
              if (13 === tag) {
                targetNode = getSuspenseInstanceFromFiber(nearestMounted);
                if (null !== targetNode) return targetNode;
                targetNode = null;
              } else if (31 === tag) {
                targetNode = getActivityInstanceFromFiber(nearestMounted);
                if (null !== targetNode) return targetNode;
                targetNode = null;
              } else if (3 === tag) {
                if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
                  return 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
                targetNode = null;
              } else nearestMounted !== targetNode && (targetNode = null);
            }
          }
          return_targetInst = targetNode;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "beforetoggle":
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "toggle":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message":
              switch (getCurrentPriorityLevel()) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority$1:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            default:
              return DefaultEventPriority;
          }
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout":
              queuedPointers.delete(nativeEvent.pointerId);
              break;
            case "gotpointercapture":
            case "lostpointercapture":
              queuedPointerCaptures.delete(nativeEvent.pointerId);
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (null === existingQueuedEvent || existingQueuedEvent.nativeEvent !== nativeEvent)
            return existingQueuedEvent = {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            }, null !== blockedOn && (blockedOn = getInstanceFromNode(blockedOn), null !== blockedOn && attemptContinuousHydration(blockedOn)), existingQueuedEvent;
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          blockedOn = existingQueuedEvent.targetContainers;
          null !== targetContainer && -1 === blockedOn.indexOf(targetContainer) && blockedOn.push(targetContainer);
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin":
              return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedFocus,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              ), true;
            case "dragenter":
              return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedDrag,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              ), true;
            case "mouseover":
              return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedMouse,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              ), true;
            case "pointerover":
              var pointerId = nativeEvent.pointerId;
              queuedPointers.set(
                pointerId,
                accumulateOrCreateContinuousQueuedReplayableEvent(
                  queuedPointers.get(pointerId) || null,
                  blockedOn,
                  domEventName,
                  eventSystemFlags,
                  targetContainer,
                  nativeEvent
                )
              );
              return true;
            case "gotpointercapture":
              return pointerId = nativeEvent.pointerId, queuedPointerCaptures.set(
                pointerId,
                accumulateOrCreateContinuousQueuedReplayableEvent(
                  queuedPointerCaptures.get(pointerId) || null,
                  blockedOn,
                  domEventName,
                  eventSystemFlags,
                  targetContainer,
                  nativeEvent
                )
              ), true;
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (null !== targetInst) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (null !== nearestMounted) {
              if (targetInst = nearestMounted.tag, 13 === targetInst) {
                if (targetInst = getSuspenseInstanceFromFiber(nearestMounted), null !== targetInst) {
                  queuedTarget.blockedOn = targetInst;
                  runWithPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (31 === targetInst) {
                if (targetInst = getActivityInstanceFromFiber(nearestMounted), null !== targetInst) {
                  queuedTarget.blockedOn = targetInst;
                  runWithPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (3 === targetInst && nearestMounted.stateNode.current.memoizedState.isDehydrated) {
                queuedTarget.blockedOn = 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
                return;
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (null !== queuedEvent.blockedOn) return false;
          for (var targetContainers = queuedEvent.targetContainers; 0 < targetContainers.length; ) {
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
            if (null === nextBlockedOn) {
              nextBlockedOn = queuedEvent.nativeEvent;
              var nativeEventClone = new nextBlockedOn.constructor(
                nextBlockedOn.type,
                nextBlockedOn
              ), event = nativeEventClone;
              null !== currentReplayingEvent && console.error(
                "Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."
              );
              currentReplayingEvent = event;
              nextBlockedOn.target.dispatchEvent(nativeEventClone);
              null === currentReplayingEvent && console.error(
                "Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."
              );
              currentReplayingEvent = null;
            } else
              return targetContainers = getInstanceFromNode(nextBlockedOn), null !== targetContainers && attemptContinuousHydration(targetContainers), queuedEvent.blockedOn = nextBlockedOn, false;
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          null !== queuedFocus && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null);
          null !== queuedDrag && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null);
          null !== queuedMouse && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null);
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = true, Scheduler.unstable_scheduleCallback(
            Scheduler.unstable_NormalPriority,
            replayUnblockedEvents
          )));
        }
        function scheduleReplayQueueIfNeeded(formReplayingQueue) {
          lastScheduledReplayQueue !== formReplayingQueue && (lastScheduledReplayQueue = formReplayingQueue, Scheduler.unstable_scheduleCallback(
            Scheduler.unstable_NormalPriority,
            function() {
              lastScheduledReplayQueue === formReplayingQueue && (lastScheduledReplayQueue = null);
              for (var i = 0; i < formReplayingQueue.length; i += 3) {
                var form = formReplayingQueue[i], submitterOrAction = formReplayingQueue[i + 1], formData = formReplayingQueue[i + 2];
                if ("function" !== typeof submitterOrAction)
                  if (null === findInstanceBlockingTarget(submitterOrAction || form))
                    continue;
                  else break;
                var formInst = getInstanceFromNode(form);
                null !== formInst && (formReplayingQueue.splice(i, 3), i -= 3, form = {
                  pending: true,
                  data: formData,
                  method: form.method,
                  action: submitterOrAction
                }, Object.freeze(form), startHostTransition(
                  formInst,
                  form,
                  submitterOrAction,
                  formData
                ));
              }
            }
          ));
        }
        function retryIfBlockedOn(unblocked) {
          function unblock(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
          }
          null !== queuedFocus && scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          null !== queuedMouse && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var i = 0; i < queuedExplicitHydrationTargets.length; i++) {
            var queuedTarget = queuedExplicitHydrationTargets[i];
            queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
          }
          for (; 0 < queuedExplicitHydrationTargets.length && (i = queuedExplicitHydrationTargets[0], null === i.blockedOn); )
            attemptExplicitHydrationTarget(i), null === i.blockedOn && queuedExplicitHydrationTargets.shift();
          i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
          if (null != i)
            for (queuedTarget = 0; queuedTarget < i.length; queuedTarget += 3) {
              var form = i[queuedTarget], submitterOrAction = i[queuedTarget + 1], formProps = form[internalPropsKey] || null;
              if ("function" === typeof submitterOrAction)
                formProps || scheduleReplayQueueIfNeeded(i);
              else if (formProps) {
                var action = null;
                if (submitterOrAction && submitterOrAction.hasAttribute("formAction"))
                  if (form = submitterOrAction, formProps = submitterOrAction[internalPropsKey] || null)
                    action = formProps.formAction;
                  else {
                    if (null !== findInstanceBlockingTarget(form)) continue;
                  }
                else action = formProps.action;
                "function" === typeof action ? i[queuedTarget + 1] = action : (i.splice(queuedTarget, 3), queuedTarget -= 3);
                scheduleReplayQueueIfNeeded(i);
              }
            }
        }
        function defaultOnDefaultTransitionIndicator() {
          function handleNavigate(event) {
            event.canIntercept && "react-transition" === event.info && event.intercept({
              handler: function() {
                return new Promise(function(resolve) {
                  return pendingResolve = resolve;
                });
              },
              focusReset: "manual",
              scroll: "manual"
            });
          }
          function handleNavigateComplete() {
            null !== pendingResolve && (pendingResolve(), pendingResolve = null);
            isCancelled || setTimeout(startFakeNavigation, 20);
          }
          function startFakeNavigation() {
            if (!isCancelled && !navigation.transition) {
              var currentEntry = navigation.currentEntry;
              currentEntry && null != currentEntry.url && navigation.navigate(currentEntry.url, {
                state: currentEntry.getState(),
                info: "react-transition",
                history: "replace"
              });
            }
          }
          if ("object" === typeof navigation) {
            var isCancelled = false, pendingResolve = null;
            navigation.addEventListener("navigate", handleNavigate);
            navigation.addEventListener("navigatesuccess", handleNavigateComplete);
            navigation.addEventListener("navigateerror", handleNavigateComplete);
            setTimeout(startFakeNavigation, 100);
            return function() {
              isCancelled = true;
              navigation.removeEventListener("navigate", handleNavigate);
              navigation.removeEventListener(
                "navigatesuccess",
                handleNavigateComplete
              );
              navigation.removeEventListener(
                "navigateerror",
                handleNavigateComplete
              );
              null !== pendingResolve && (pendingResolve(), pendingResolve = null);
            };
          }
        }
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function warnIfReactDOMContainerInDEV(container) {
          container[internalContainerInstanceKey] && (container._reactRootContainer ? console.error(
            "You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported."
          ) : console.error(
            "You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."
          ));
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        var Scheduler = require_scheduler(), React90 = require_react(), ReactDOM2 = require_react_dom(), assign = Object.assign, REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy");
        Symbol.for("react.scope");
        var REACT_ACTIVITY_TYPE = Symbol.for("react.activity");
        Symbol.for("react.legacy_hidden");
        Symbol.for("react.tracing_marker");
        var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
        Symbol.for("react.view_transition");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator, REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), isArrayImpl = Array.isArray, ReactSharedInternals = React90.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, ReactDOMSharedInternals = ReactDOM2.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, NotPending = Object.freeze({
          pending: false,
          data: null,
          method: null,
          action: null
        }), valueStack = [];
        var fiberStack = [];
        var index$jscomp$0 = -1, contextStackCursor = createCursor(null), contextFiberStackCursor = createCursor(null), rootInstanceStackCursor = createCursor(null), hostTransitionProviderCursor = createCursor(null), disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
        disabledLog.__reactDisabledLog = true;
        var prefix, suffix, reentry = false;
        var componentFrameCache = new ("function" === typeof WeakMap ? WeakMap : Map)();
        var current = null, isRendering = false, hasOwnProperty = Object.prototype.hasOwnProperty, scheduleCallback$3 = Scheduler.unstable_scheduleCallback, cancelCallback$1 = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now$1 = Scheduler.unstable_now, getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority$1 = Scheduler.unstable_NormalPriority, LowPriority = Scheduler.unstable_LowPriority, IdlePriority = Scheduler.unstable_IdlePriority, log$1 = Scheduler.log, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null, hasLoggedError = false, isDevToolsPresent = "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__, clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2, nextTransitionUpdateLane = 256, nextTransitionDeferredLane = 262144, nextRetryLane = 4194304, DiscreteEventPriority = 2, ContinuousEventPriority = 8, DefaultEventPriority = 32, IdleEventPriority = 268435456, randomKey = Math.random().toString(36).slice(2), internalInstanceKey = "__reactFiber$" + randomKey, internalPropsKey = "__reactProps$" + randomKey, internalContainerInstanceKey = "__reactContainer$" + randomKey, internalEventHandlersKey = "__reactEvents$" + randomKey, internalEventHandlerListenersKey = "__reactListeners$" + randomKey, internalEventHandlesSetKey = "__reactHandles$" + randomKey, internalRootNodeResourcesKey = "__reactResources$" + randomKey, internalHoistableMarker = "__reactMarker$" + randomKey, allNativeEvents = /* @__PURE__ */ new Set(), registrationNameDependencies = {}, possibleRegistrationNames = {}, hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        }, VALID_ATTRIBUTE_NAME_REGEX = RegExp(
          "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
        ), illegalAttributeNameCache = {}, validatedAttributeNameCache = {}, escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g, didWarnValueDefaultValue$1 = false, didWarnCheckedDefaultChecked = false, didWarnSelectedSetOnOption = false, didWarnInvalidChild = false, didWarnInvalidInnerHTML = false;
        var didWarnValueDefaultValue = false;
        var valuePropNames = ["value", "defaultValue"], didWarnValDefaultVal = false, needsEscaping = /["'&<>\n\t]|^\s|\s$/, specialTags = "address applet area article aside base basefont bgsound blockquote body br button caption center col colgroup dd details dir div dl dt embed fieldset figcaption figure footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html iframe img input isindex li link listing main marquee menu menuitem meta nav noembed noframes noscript object ol p param plaintext pre script section select source style summary table tbody td template textarea tfoot th thead title tr track ul wbr xmp".split(
          " "
        ), inScopeTags = "applet caption html table td th marquee object template foreignObject desc title".split(
          " "
        ), buttonScopeTags = inScopeTags.concat(["button"]), impliedEndTags = "dd dt li option optgroup p rp rt".split(" "), emptyAncestorInfoDev = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null,
          containerTagInScope: null,
          implicitRootScope: false
        }, didWarn = {}, shorthandToLonghand = {
          animation: "animationDelay animationDirection animationDuration animationFillMode animationIterationCount animationName animationPlayState animationTimingFunction".split(
            " "
          ),
          background: "backgroundAttachment backgroundClip backgroundColor backgroundImage backgroundOrigin backgroundPositionX backgroundPositionY backgroundRepeat backgroundSize".split(
            " "
          ),
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: "borderBottomColor borderBottomStyle borderBottomWidth borderImageOutset borderImageRepeat borderImageSlice borderImageSource borderImageWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderTopColor borderTopStyle borderTopWidth".split(
            " "
          ),
          borderBlockEnd: [
            "borderBlockEndColor",
            "borderBlockEndStyle",
            "borderBlockEndWidth"
          ],
          borderBlockStart: [
            "borderBlockStartColor",
            "borderBlockStartStyle",
            "borderBlockStartWidth"
          ],
          borderBottom: [
            "borderBottomColor",
            "borderBottomStyle",
            "borderBottomWidth"
          ],
          borderColor: [
            "borderBottomColor",
            "borderLeftColor",
            "borderRightColor",
            "borderTopColor"
          ],
          borderImage: [
            "borderImageOutset",
            "borderImageRepeat",
            "borderImageSlice",
            "borderImageSource",
            "borderImageWidth"
          ],
          borderInlineEnd: [
            "borderInlineEndColor",
            "borderInlineEndStyle",
            "borderInlineEndWidth"
          ],
          borderInlineStart: [
            "borderInlineStartColor",
            "borderInlineStartStyle",
            "borderInlineStartWidth"
          ],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: [
            "borderBottomLeftRadius",
            "borderBottomRightRadius",
            "borderTopLeftRadius",
            "borderTopRightRadius"
          ],
          borderRight: [
            "borderRightColor",
            "borderRightStyle",
            "borderRightWidth"
          ],
          borderStyle: [
            "borderBottomStyle",
            "borderLeftStyle",
            "borderRightStyle",
            "borderTopStyle"
          ],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: [
            "borderBottomWidth",
            "borderLeftWidth",
            "borderRightWidth",
            "borderTopWidth"
          ],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: "fontFamily fontFeatureSettings fontKerning fontLanguageOverride fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition fontWeight lineHeight".split(
            " "
          ),
          fontVariant: "fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition".split(
            " "
          ),
          gap: ["columnGap", "rowGap"],
          grid: "gridAutoColumns gridAutoFlow gridAutoRows gridTemplateAreas gridTemplateColumns gridTemplateRows".split(
            " "
          ),
          gridArea: [
            "gridColumnEnd",
            "gridColumnStart",
            "gridRowEnd",
            "gridRowStart"
          ],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: [
            "gridTemplateAreas",
            "gridTemplateColumns",
            "gridTemplateRows"
          ],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: "maskClip maskComposite maskImage maskMode maskOrigin maskPositionX maskPositionY maskRepeat maskSize".split(
            " "
          ),
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: [
            "textDecorationColor",
            "textDecorationLine",
            "textDecorationStyle"
          ],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: [
            "transitionDelay",
            "transitionDuration",
            "transitionProperty",
            "transitionTimingFunction"
          ],
          wordWrap: ["overflowWrap"]
        }, uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/, badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = false, warnedForInfinityValue = false, unitlessNumbers = new Set(
          "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
            " "
          )
        ), MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML", SVG_NAMESPACE = "http://www.w3.org/2000/svg", aliases = /* @__PURE__ */ new Map([
          ["acceptCharset", "accept-charset"],
          ["htmlFor", "for"],
          ["httpEquiv", "http-equiv"],
          ["crossOrigin", "crossorigin"],
          ["accentHeight", "accent-height"],
          ["alignmentBaseline", "alignment-baseline"],
          ["arabicForm", "arabic-form"],
          ["baselineShift", "baseline-shift"],
          ["capHeight", "cap-height"],
          ["clipPath", "clip-path"],
          ["clipRule", "clip-rule"],
          ["colorInterpolation", "color-interpolation"],
          ["colorInterpolationFilters", "color-interpolation-filters"],
          ["colorProfile", "color-profile"],
          ["colorRendering", "color-rendering"],
          ["dominantBaseline", "dominant-baseline"],
          ["enableBackground", "enable-background"],
          ["fillOpacity", "fill-opacity"],
          ["fillRule", "fill-rule"],
          ["floodColor", "flood-color"],
          ["floodOpacity", "flood-opacity"],
          ["fontFamily", "font-family"],
          ["fontSize", "font-size"],
          ["fontSizeAdjust", "font-size-adjust"],
          ["fontStretch", "font-stretch"],
          ["fontStyle", "font-style"],
          ["fontVariant", "font-variant"],
          ["fontWeight", "font-weight"],
          ["glyphName", "glyph-name"],
          ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
          ["glyphOrientationVertical", "glyph-orientation-vertical"],
          ["horizAdvX", "horiz-adv-x"],
          ["horizOriginX", "horiz-origin-x"],
          ["imageRendering", "image-rendering"],
          ["letterSpacing", "letter-spacing"],
          ["lightingColor", "lighting-color"],
          ["markerEnd", "marker-end"],
          ["markerMid", "marker-mid"],
          ["markerStart", "marker-start"],
          ["overlinePosition", "overline-position"],
          ["overlineThickness", "overline-thickness"],
          ["paintOrder", "paint-order"],
          ["panose-1", "panose-1"],
          ["pointerEvents", "pointer-events"],
          ["renderingIntent", "rendering-intent"],
          ["shapeRendering", "shape-rendering"],
          ["stopColor", "stop-color"],
          ["stopOpacity", "stop-opacity"],
          ["strikethroughPosition", "strikethrough-position"],
          ["strikethroughThickness", "strikethrough-thickness"],
          ["strokeDasharray", "stroke-dasharray"],
          ["strokeDashoffset", "stroke-dashoffset"],
          ["strokeLinecap", "stroke-linecap"],
          ["strokeLinejoin", "stroke-linejoin"],
          ["strokeMiterlimit", "stroke-miterlimit"],
          ["strokeOpacity", "stroke-opacity"],
          ["strokeWidth", "stroke-width"],
          ["textAnchor", "text-anchor"],
          ["textDecoration", "text-decoration"],
          ["textRendering", "text-rendering"],
          ["transformOrigin", "transform-origin"],
          ["underlinePosition", "underline-position"],
          ["underlineThickness", "underline-thickness"],
          ["unicodeBidi", "unicode-bidi"],
          ["unicodeRange", "unicode-range"],
          ["unitsPerEm", "units-per-em"],
          ["vAlphabetic", "v-alphabetic"],
          ["vHanging", "v-hanging"],
          ["vIdeographic", "v-ideographic"],
          ["vMathematical", "v-mathematical"],
          ["vectorEffect", "vector-effect"],
          ["vertAdvY", "vert-adv-y"],
          ["vertOriginX", "vert-origin-x"],
          ["vertOriginY", "vert-origin-y"],
          ["wordSpacing", "word-spacing"],
          ["writingMode", "writing-mode"],
          ["xmlnsXlink", "xmlns:xlink"],
          ["xHeight", "x-height"]
        ]), possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          fetchpriority: "fetchPriority",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          inert: "inert",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          popover: "popover",
          popovertarget: "popoverTarget",
          popovertargetaction: "popoverTargetAction",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          transformorigin: "transformOrigin",
          "transform-origin": "transformOrigin",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        }, ariaProperties = {
          "aria-current": 0,
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0,
          "aria-braillelabel": 0,
          "aria-brailleroledescription": 0,
          "aria-colindextext": 0,
          "aria-rowindextext": 0
        }, warnedProperties$1 = {}, rARIA$1 = RegExp(
          "^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
        ), rARIACamel$1 = RegExp(
          "^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
        ), didWarnValueNull = false, warnedProperties = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA = RegExp(
          "^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
        ), rARIACamel = RegExp(
          "^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
        ), isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i, currentReplayingEvent = null, restoreTarget = null, restoreQueue = null, isInsideEventHandler = false, canUseDOM = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), passiveBrowserEventsSupported = false;
        if (canUseDOM)
          try {
            var options$jscomp$0 = {};
            Object.defineProperty(options$jscomp$0, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options$jscomp$0, options$jscomp$0);
            window.removeEventListener("test", options$jscomp$0, options$jscomp$0);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        var root2 = null, startText = null, fallbackText = null, EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        }, SyntheticEvent = createSyntheticEvent(EventInterface), UIEventInterface = assign({}, EventInterface, { view: 0, detail: 0 }), SyntheticUIEvent = createSyntheticEvent(UIEventInterface), lastMovementX, lastMovementY, lastMouseEvent, MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            return void 0 === event.relatedTarget ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) return event.movementX;
            event !== lastMouseEvent && (lastMouseEvent && "mousemove" === event.type ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : lastMovementY = lastMovementX = 0, lastMouseEvent = event);
            return lastMovementX;
          },
          movementY: function(event) {
            return "movementY" in event ? event.movementY : lastMovementY;
          }
        }), SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface), DragEventInterface = assign({}, MouseEventInterface, { dataTransfer: 0 }), SyntheticDragEvent = createSyntheticEvent(DragEventInterface), FocusEventInterface = assign({}, UIEventInterface, { relatedTarget: 0 }), SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface), AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        }), SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface), ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        }), SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface), CompositionEventInterface = assign({}, EventInterface, { data: 0 }), SyntheticCompositionEvent = createSyntheticEvent(
          CompositionEventInterface
        ), SyntheticInputEvent = SyntheticCompositionEvent, normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        }, translateToKey = {
          8: "Backspace",
          9: "Tab",
          12: "Clear",
          13: "Enter",
          16: "Shift",
          17: "Control",
          18: "Alt",
          19: "Pause",
          20: "CapsLock",
          27: "Escape",
          32: " ",
          33: "PageUp",
          34: "PageDown",
          35: "End",
          36: "Home",
          37: "ArrowLeft",
          38: "ArrowUp",
          39: "ArrowRight",
          40: "ArrowDown",
          45: "Insert",
          46: "Delete",
          112: "F1",
          113: "F2",
          114: "F3",
          115: "F4",
          116: "F5",
          117: "F6",
          118: "F7",
          119: "F8",
          120: "F9",
          121: "F10",
          122: "F11",
          123: "F12",
          144: "NumLock",
          145: "ScrollLock",
          224: "Meta"
        }, modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        }, KeyboardEventInterface = assign({}, UIEventInterface, {
          key: function(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if ("Unidentified" !== key) return key;
            }
            return "keypress" === nativeEvent.type ? (nativeEvent = getEventCharCode(nativeEvent), 13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent)) : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
          },
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            return "keypress" === event.type ? getEventCharCode(event) : 0;
          },
          keyCode: function(event) {
            return "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
          },
          which: function(event) {
            return "keypress" === event.type ? getEventCharCode(event) : "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
          }
        }), SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface), PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        }), SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface), TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        }), SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface), TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        }), SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface), WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          deltaMode: 0
        }), SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface), ToggleEventInterface = assign({}, EventInterface, {
          newState: 0,
          oldState: 0
        }), SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface), END_KEYCODES = [9, 13, 27, 32], START_KEYCODE = 229, canUseCompositionEvent = canUseDOM && "CompositionEvent" in window, documentMode = null;
        canUseDOM && "documentMode" in document && (documentMode = document.documentMode);
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode, useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && 8 < documentMode && 11 >= documentMode), SPACEBAR_CODE = 32, SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE), hasSpaceKeypress = false, isComposing = false, supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        }, activeElement$1 = null, activeElementInst$1 = null, isInputEventSupported = false;
        canUseDOM && (isInputEventSupported = isEventSupported("input") && (!document.documentMode || 9 < document.documentMode));
        var objectIs = "function" === typeof Object.is ? Object.is : is, skipSelectionChangeEvent = canUseDOM && "documentMode" in document && 11 >= document.documentMode, activeElement = null, activeElementInst = null, lastSelection = null, mouseDown = false, vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionrun: makePrefixMap("Transition", "TransitionRun"),
          transitionstart: makePrefixMap("Transition", "TransitionStart"),
          transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        }, prefixedEventNames = {}, style = {};
        canUseDOM && (style = document.createElement("div").style, "AnimationEvent" in window || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), "TransitionEvent" in window || delete vendorPrefixes.transitionend.transition);
        var ANIMATION_END = getVendorPrefixedEventName("animationend"), ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"), ANIMATION_START = getVendorPrefixedEventName("animationstart"), TRANSITION_RUN = getVendorPrefixedEventName("transitionrun"), TRANSITION_START = getVendorPrefixedEventName("transitionstart"), TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel"), TRANSITION_END = getVendorPrefixedEventName("transitionend"), topLevelEventsToReactNames = /* @__PURE__ */ new Map(), simpleEventPluginEvents = "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
          " "
        );
        simpleEventPluginEvents.push("scrollEnd");
        var lastResetTime = 0;
        if ("object" === typeof performance && "function" === typeof performance.now) {
          var localPerformance = performance;
          var getCurrentTime = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          getCurrentTime = function() {
            return localDate.now();
          };
        }
        var reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
          if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
            var event = new window.ErrorEvent("error", {
              bubbles: true,
              cancelable: true,
              message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
              error
            });
            if (!window.dispatchEvent(event)) return;
          } else if ("object" === typeof process && "function" === typeof process.emit) {
            process.emit("uncaughtException", error);
            return;
          }
          console.error(error);
        }, OMITTED_PROP_ERROR = "This object has been omitted by React in the console log to avoid sending too much data from the server. Try logging smaller or more specific objects.", EMPTY_ARRAY = 0, COMPLEX_ARRAY = 1, PRIMITIVE_ARRAY = 2, ENTRIES_ARRAY = 3, REMOVED = "\u2013\xA0", ADDED = "+\xA0", UNCHANGED = "\u2007\xA0", supportsUserTiming = "undefined" !== typeof console && "function" === typeof console.timeStamp && "undefined" !== typeof performance && "function" === typeof performance.measure, COMPONENTS_TRACK = "Components \u269B", LANES_TRACK_GROUP = "Scheduler \u269B", currentTrack = "Blocking", alreadyWarnedForDeepEquality = false, reusableComponentDevToolDetails = {
          color: "primary",
          properties: null,
          tooltipText: "",
          track: COMPONENTS_TRACK
        }, reusableComponentOptions = {
          start: -0,
          end: -0,
          detail: { devtools: reusableComponentDevToolDetails }
        }, resuableChangedPropsEntry = ["Changed Props", ""], DEEP_EQUALITY_WARNING = "This component received deeply equal props. It might benefit from useMemo or the React Compiler in its owner.", reusableDeeplyEqualPropsEntry = ["Changed Props", DEEP_EQUALITY_WARNING], OffscreenVisible = 1, OffscreenPassiveEffectsConnected = 2, concurrentQueues = [], concurrentQueuesIndex = 0, concurrentlyUpdatedLanes = 0, emptyContextObject = {};
        Object.freeze(emptyContextObject);
        var resolveFamily = null, failedBoundaries = null, NoMode = 0, ConcurrentMode = 1, ProfileMode = 2, StrictLegacyMode = 8, StrictEffectsMode = 16, SuspenseyImagesMode = 32;
        var hasBadMapPolyfill = false;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
          /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
          /* @__PURE__ */ new Set([nonExtensibleObject]);
        } catch (e$3) {
          hasBadMapPolyfill = true;
        }
        var CapturedStacks = /* @__PURE__ */ new WeakMap(), forkStack = [], forkStackIndex = 0, treeForkProvider = null, treeForkCount = 0, idStack = [], idStackIndex = 0, treeContextProvider = null, treeContextId = 1, treeContextOverflow = "", hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = false, didSuspendOrErrorDEV = false, hydrationDiffRootDEV = null, hydrationErrors = null, rootOrSingletonContext = false, HydrationMismatchException = Error(
          "Hydration Mismatch Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
        ), valueCursor = createCursor(null);
        var rendererCursorDEV = createCursor(null);
        var rendererSigil = {};
        var currentlyRenderingFiber$1 = null, lastContextDependency = null, isDisallowedContextReadInDEV = false, AbortControllerLocal = "undefined" !== typeof AbortController ? AbortController : function() {
          var listeners = [], signal = this.signal = {
            aborted: false,
            addEventListener: function(type, listener) {
              listeners.push(listener);
            }
          };
          this.abort = function() {
            signal.aborted = true;
            listeners.forEach(function(listener) {
              return listener();
            });
          };
        }, scheduleCallback$2 = Scheduler.unstable_scheduleCallback, NormalPriority = Scheduler.unstable_NormalPriority, CacheContext = {
          $$typeof: REACT_CONTEXT_TYPE,
          Consumer: null,
          Provider: null,
          _currentValue: null,
          _currentValue2: null,
          _threadCount: 0,
          _currentRenderer: null,
          _currentRenderer2: null
        }, now = Scheduler.unstable_now, createTask = console.createTask ? console.createTask : function() {
          return null;
        }, SPAWNED_UPDATE = 1, PINGED_UPDATE = 2, renderStartTime = -0, commitStartTime = -0, commitEndTime = -0, commitErrors = null, profilerStartTime = -1.1, profilerEffectDuration = -0, componentEffectDuration = -0, componentEffectStartTime = -1.1, componentEffectEndTime = -1.1, componentEffectErrors = null, componentEffectSpawnedUpdate = false, blockingClampTime = -0, blockingUpdateTime = -1.1, blockingUpdateTask = null, blockingUpdateType = 0, blockingUpdateMethodName = null, blockingUpdateComponentName = null, blockingEventTime = -1.1, blockingEventType = null, blockingEventRepeatTime = -1.1, blockingSuspendedTime = -1.1, transitionClampTime = -0, transitionStartTime = -1.1, transitionUpdateTime = -1.1, transitionUpdateType = 0, transitionUpdateTask = null, transitionUpdateMethodName = null, transitionUpdateComponentName = null, transitionEventTime = -1.1, transitionEventType = null, transitionEventRepeatTime = -1.1, transitionSuspendedTime = -1.1, retryClampTime = -0, idleClampTime = -0, animatingLanes = 0, animatingTask = null, yieldReason = 0, yieldStartTime = -1.1, currentUpdateIsNested = false, nestedUpdateScheduled = false, currentEntangledListeners = null, currentEntangledPendingCount = 0, currentEntangledLane = 0, currentEntangledActionThenable = null, prevOnStartTransitionFinish = ReactSharedInternals.S;
        ReactSharedInternals.S = function(transition, returnValue) {
          globalMostRecentTransitionTime = now$1();
          if ("object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then) {
            if (0 > transitionStartTime && 0 > transitionUpdateTime) {
              transitionStartTime = now();
              var newEventTime = resolveEventTimeStamp(), newEventType = resolveEventType();
              if (newEventTime !== transitionEventRepeatTime || newEventType !== transitionEventType)
                transitionEventRepeatTime = -1.1;
              transitionEventTime = newEventTime;
              transitionEventType = newEventType;
            }
            entangleAsyncAction(transition, returnValue);
          }
          null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue);
        };
        var resumedCache = createCursor(null), ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function() {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function() {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        }, pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
          didWarnAboutUnsafeLifecycles.has(fiber.type) || ("function" === typeof instance.componentWillMount && true !== instance.componentWillMount.__suppressDeprecationWarning && pendingComponentWillMountWarnings.push(fiber), fiber.mode & StrictLegacyMode && "function" === typeof instance.UNSAFE_componentWillMount && pendingUNSAFE_ComponentWillMountWarnings.push(fiber), "function" === typeof instance.componentWillReceiveProps && true !== instance.componentWillReceiveProps.__suppressDeprecationWarning && pendingComponentWillReceivePropsWarnings.push(fiber), fiber.mode & StrictLegacyMode && "function" === typeof instance.UNSAFE_componentWillReceiveProps && pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber), "function" === typeof instance.componentWillUpdate && true !== instance.componentWillUpdate.__suppressDeprecationWarning && pendingComponentWillUpdateWarnings.push(fiber), fiber.mode & StrictLegacyMode && "function" === typeof instance.UNSAFE_componentWillUpdate && pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
        };
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingComponentWillMountWarnings.length && (pendingComponentWillMountWarnings.forEach(function(fiber) {
            componentWillMountUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillMountWarnings = []);
          var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingUNSAFE_ComponentWillMountWarnings.length && (pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
            UNSAFE_componentWillMountUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillMountWarnings = []);
          var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingComponentWillReceivePropsWarnings.length && (pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
            componentWillReceivePropsUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillReceivePropsWarnings = []);
          var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingUNSAFE_ComponentWillReceivePropsWarnings.length && (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(
            function(fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(
                getComponentNameFromFiber(fiber) || "Component"
              );
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            }
          ), pendingUNSAFE_ComponentWillReceivePropsWarnings = []);
          var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingComponentWillUpdateWarnings.length && (pendingComponentWillUpdateWarnings.forEach(function(fiber) {
            componentWillUpdateUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillUpdateWarnings = []);
          var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingUNSAFE_ComponentWillUpdateWarnings.length && (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
            UNSAFE_componentWillUpdateUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillUpdateWarnings = []);
          if (0 < UNSAFE_componentWillMountUniqueNames.size) {
            var sortedNames = setToSortedString(
              UNSAFE_componentWillMountUniqueNames
            );
            console.error(
              "Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",
              sortedNames
            );
          }
          0 < UNSAFE_componentWillReceivePropsUniqueNames.size && (sortedNames = setToSortedString(
            UNSAFE_componentWillReceivePropsUniqueNames
          ), console.error(
            "Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\nPlease update the following components: %s",
            sortedNames
          ));
          0 < UNSAFE_componentWillUpdateUniqueNames.size && (sortedNames = setToSortedString(
            UNSAFE_componentWillUpdateUniqueNames
          ), console.error(
            "Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",
            sortedNames
          ));
          0 < componentWillMountUniqueNames.size && (sortedNames = setToSortedString(componentWillMountUniqueNames), console.warn(
            "componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
            sortedNames
          ));
          0 < componentWillReceivePropsUniqueNames.size && (sortedNames = setToSortedString(
            componentWillReceivePropsUniqueNames
          ), console.warn(
            "componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
            sortedNames
          ));
          0 < componentWillUpdateUniqueNames.size && (sortedNames = setToSortedString(componentWillUpdateUniqueNames), console.warn(
            "componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
            sortedNames
          ));
        };
        var pendingLegacyContextWarning = /* @__PURE__ */ new Map(), didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
          var strictRoot = null;
          for (var node = fiber; null !== node; )
            node.mode & StrictLegacyMode && (strictRoot = node), node = node.return;
          null === strictRoot ? console.error(
            "Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue."
          ) : !didWarnAboutLegacyContext.has(fiber.type) && (node = pendingLegacyContextWarning.get(strictRoot), null != fiber.type.contextTypes || null != fiber.type.childContextTypes || null !== instance && "function" === typeof instance.getChildContext) && (void 0 === node && (node = [], pendingLegacyContextWarning.set(strictRoot, node)), node.push(fiber));
        };
        ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray) {
            if (0 !== fiberArray.length) {
              var firstFiber = fiberArray[0], uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              runWithFiberInDEV(firstFiber, function() {
                console.error(
                  "Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://react.dev/link/legacy-context",
                  sortedNames
                );
              });
            }
          });
        };
        ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = /* @__PURE__ */ new Map();
        };
        var callComponent = {
          react_stack_bottom_frame: function(Component, props, secondArg) {
            var wasRendering = isRendering;
            isRendering = true;
            try {
              return Component(props, secondArg);
            } finally {
              isRendering = wasRendering;
            }
          }
        }, callComponentInDEV = callComponent.react_stack_bottom_frame.bind(callComponent), callRender = {
          react_stack_bottom_frame: function(instance) {
            var wasRendering = isRendering;
            isRendering = true;
            try {
              return instance.render();
            } finally {
              isRendering = wasRendering;
            }
          }
        }, callRenderInDEV = callRender.react_stack_bottom_frame.bind(callRender), callComponentDidMount = {
          react_stack_bottom_frame: function(finishedWork, instance) {
            try {
              instance.componentDidMount();
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
        }, callComponentDidMountInDEV = callComponentDidMount.react_stack_bottom_frame.bind(
          callComponentDidMount
        ), callComponentDidUpdate = {
          react_stack_bottom_frame: function(finishedWork, instance, prevProps, prevState, snapshot) {
            try {
              instance.componentDidUpdate(prevProps, prevState, snapshot);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
        }, callComponentDidUpdateInDEV = callComponentDidUpdate.react_stack_bottom_frame.bind(
          callComponentDidUpdate
        ), callComponentDidCatch = {
          react_stack_bottom_frame: function(instance, errorInfo) {
            var stack = errorInfo.stack;
            instance.componentDidCatch(errorInfo.value, {
              componentStack: null !== stack ? stack : ""
            });
          }
        }, callComponentDidCatchInDEV = callComponentDidCatch.react_stack_bottom_frame.bind(
          callComponentDidCatch
        ), callComponentWillUnmount = {
          react_stack_bottom_frame: function(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentWillUnmount();
            } catch (error) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error);
            }
          }
        }, callComponentWillUnmountInDEV = callComponentWillUnmount.react_stack_bottom_frame.bind(
          callComponentWillUnmount
        ), callCreate = {
          react_stack_bottom_frame: function(effect) {
            var create = effect.create;
            effect = effect.inst;
            create = create();
            return effect.destroy = create;
          }
        }, callCreateInDEV = callCreate.react_stack_bottom_frame.bind(callCreate), callDestroy = {
          react_stack_bottom_frame: function(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error);
            }
          }
        }, callDestroyInDEV = callDestroy.react_stack_bottom_frame.bind(callDestroy), callLazyInit = {
          react_stack_bottom_frame: function(lazy) {
            var init = lazy._init;
            return init(lazy._payload);
          }
        }, callLazyInitInDEV = callLazyInit.react_stack_bottom_frame.bind(callLazyInit), SuspenseException = Error(
          "Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`."
        ), SuspenseyCommitException = Error(
          "Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
        ), SuspenseActionException = Error(
          "Suspense Exception: This is not a real error! It's an implementation detail of `useActionState` to interrupt the current render. You must either rethrow it immediately, or move the `useActionState` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary."
        ), noopSuspenseyCommitThenable = {
          then: function() {
            console.error(
              'Internal React error: A listener was unexpectedly attached to a "noop" thenable. This is a bug in React. Please file an issue.'
            );
          }
        }, suspendedThenable = null, needsToResetSuspendedThenableDEV = false, thenableState$1 = null, thenableIndexCounter$1 = 0, currentDebugInfo = null, didWarnAboutMaps;
        var didWarnAboutGenerators = didWarnAboutMaps = false;
        var ownerHasKeyUseWarning = {};
        var ownerHasFunctionTypeWarning = {};
        var ownerHasSymbolTypeWarning = {};
        warnForMissingKey = function(returnFiber, workInProgress2, child) {
          if (null !== child && "object" === typeof child && child._store && (!child._store.validated && null == child.key || 2 === child._store.validated)) {
            if ("object" !== typeof child._store)
              throw Error(
                "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue."
              );
            child._store.validated = 1;
            var componentName2 = getComponentNameFromFiber(returnFiber), componentKey = componentName2 || "null";
            if (!ownerHasKeyUseWarning[componentKey]) {
              ownerHasKeyUseWarning[componentKey] = true;
              child = child._owner;
              returnFiber = returnFiber._debugOwner;
              var currentComponentErrorInfo = "";
              returnFiber && "number" === typeof returnFiber.tag && (componentKey = getComponentNameFromFiber(returnFiber)) && (currentComponentErrorInfo = "\n\nCheck the render method of `" + componentKey + "`.");
              currentComponentErrorInfo || componentName2 && (currentComponentErrorInfo = "\n\nCheck the top-level render call using <" + componentName2 + ">.");
              var childOwnerAppendix = "";
              null != child && returnFiber !== child && (componentName2 = null, "number" === typeof child.tag ? componentName2 = getComponentNameFromFiber(child) : "string" === typeof child.name && (componentName2 = child.name), componentName2 && (childOwnerAppendix = " It was passed a child from " + componentName2 + "."));
              runWithFiberInDEV(workInProgress2, function() {
                console.error(
                  'Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',
                  currentComponentErrorInfo,
                  childOwnerAppendix
                );
              });
            }
          }
        };
        var reconcileChildFibers = createChildReconciler(true), mountChildFibers = createChildReconciler(false), UpdateState = 0, ReplaceState = 1, ForceUpdate = 2, CaptureUpdate = 3, hasForceUpdate = false;
        var didWarnUpdateInsideUpdate = false;
        var currentlyProcessingQueue = null;
        var didReadFromEntangledAsyncAction = false, currentTreeHiddenStackCursor = createCursor(null), prevEntangledRenderLanesCursor = createCursor(0), suspenseHandlerStackCursor = createCursor(null), shellBoundary = null, SubtreeSuspenseContextMask = 1, ForceSuspenseFallback = 2, suspenseStackCursor = createCursor(0), NoFlags = 0, HasEffect = 1, Insertion = 2, Layout = 4, Passive = 8, didWarnUncachedGetSnapshot;
        var didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        var didWarnAboutUseWrappedInTryCatch = /* @__PURE__ */ new Set();
        var didWarnAboutAsyncClientComponent = /* @__PURE__ */ new Set();
        var didWarnAboutUseFormState = /* @__PURE__ */ new Set();
        var renderLanes = 0, currentlyRenderingFiber = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = false, didScheduleRenderPhaseUpdateDuringThisPass = false, shouldDoubleInvokeUserFnsInHooksDEV = false, localIdCounter = 0, thenableIndexCounter = 0, thenableState = null, globalClientIdCounter = 0, RE_RENDER_LIMIT = 25, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = false, ContextOnlyDispatcher = {
          readContext,
          use,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          useHostTransitionStatus: throwInvalidHookError,
          useFormState: throwInvalidHookError,
          useActionState: throwInvalidHookError,
          useOptimistic: throwInvalidHookError,
          useMemoCache: throwInvalidHookError,
          useCacheRefresh: throwInvalidHookError
        };
        ContextOnlyDispatcher.useEffectEvent = throwInvalidHookError;
        var HooksDispatcherOnMountInDEV = null, HooksDispatcherOnMountWithHookTypesInDEV = null, HooksDispatcherOnUpdateInDEV = null, HooksDispatcherOnRerenderInDEV = null, InvalidNestedHooksDispatcherOnMountInDEV = null, InvalidNestedHooksDispatcherOnUpdateInDEV = null, InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        HooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          use,
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            mountEffectImpl(4, Insertion, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            mountHookTypesDev();
            return mountSyncExternalStore(
              subscribe,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            mountHookTypesDev();
            return mountId();
          },
          useFormState: function(action, initialState) {
            currentHookNameInDev = "useFormState";
            mountHookTypesDev();
            warnOnUseFormStateInDev();
            return mountActionState(action, initialState);
          },
          useActionState: function(action, initialState) {
            currentHookNameInDev = "useActionState";
            mountHookTypesDev();
            return mountActionState(action, initialState);
          },
          useOptimistic: function(passthrough) {
            currentHookNameInDev = "useOptimistic";
            mountHookTypesDev();
            return mountOptimistic(passthrough);
          },
          useHostTransitionStatus,
          useMemoCache,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            mountHookTypesDev();
            return mountRefresh();
          },
          useEffectEvent: function(callback) {
            currentHookNameInDev = "useEffectEvent";
            mountHookTypesDev();
            return mountEvent(callback);
          }
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          use,
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            mountEffectImpl(4, Insertion, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return mountSyncExternalStore(
              subscribe,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return mountId();
          },
          useActionState: function(action, initialState) {
            currentHookNameInDev = "useActionState";
            updateHookTypesDev();
            return mountActionState(action, initialState);
          },
          useFormState: function(action, initialState) {
            currentHookNameInDev = "useFormState";
            updateHookTypesDev();
            warnOnUseFormStateInDev();
            return mountActionState(action, initialState);
          },
          useOptimistic: function(passthrough) {
            currentHookNameInDev = "useOptimistic";
            updateHookTypesDev();
            return mountOptimistic(passthrough);
          },
          useHostTransitionStatus,
          useMemoCache,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return mountRefresh();
          },
          useEffectEvent: function(callback) {
            currentHookNameInDev = "useEffectEvent";
            updateHookTypesDev();
            return mountEvent(callback);
          }
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          use,
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            updateEffectImpl(2048, Passive, create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateEffectImpl(4, Insertion, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateEffectImpl(4, Layout, create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function() {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useState: function() {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(basicStateReducer);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(
              subscribe,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useFormState: function(action) {
            currentHookNameInDev = "useFormState";
            updateHookTypesDev();
            warnOnUseFormStateInDev();
            return updateActionState(action);
          },
          useActionState: function(action) {
            currentHookNameInDev = "useActionState";
            updateHookTypesDev();
            return updateActionState(action);
          },
          useOptimistic: function(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            updateHookTypesDev();
            return updateOptimistic(passthrough, reducer);
          },
          useHostTransitionStatus,
          useMemoCache,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useEffectEvent: function(callback) {
            currentHookNameInDev = "useEffectEvent";
            updateHookTypesDev();
            return updateEvent(callback);
          }
        };
        HooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          use,
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            updateEffectImpl(2048, Passive, create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateEffectImpl(4, Insertion, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateEffectImpl(4, Layout, create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function() {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useState: function() {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(basicStateReducer);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(
              subscribe,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useFormState: function(action) {
            currentHookNameInDev = "useFormState";
            updateHookTypesDev();
            warnOnUseFormStateInDev();
            return rerenderActionState(action);
          },
          useActionState: function(action) {
            currentHookNameInDev = "useActionState";
            updateHookTypesDev();
            return rerenderActionState(action);
          },
          useOptimistic: function(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            updateHookTypesDev();
            return rerenderOptimistic(passthrough, reducer);
          },
          useHostTransitionStatus,
          useMemoCache,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useEffectEvent: function(callback) {
            currentHookNameInDev = "useEffectEvent";
            updateHookTypesDev();
            return updateEvent(callback);
          }
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          use: function(usable) {
            warnInvalidHookAccess();
            return use(usable);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            mountEffectImpl(4, Insertion, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(
              subscribe,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
          },
          useFormState: function(action, initialState) {
            currentHookNameInDev = "useFormState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountActionState(action, initialState);
          },
          useActionState: function(action, initialState) {
            currentHookNameInDev = "useActionState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountActionState(action, initialState);
          },
          useOptimistic: function(passthrough) {
            currentHookNameInDev = "useOptimistic";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOptimistic(passthrough);
          },
          useMemoCache: function(size) {
            warnInvalidHookAccess();
            return useMemoCache(size);
          },
          useHostTransitionStatus,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            mountHookTypesDev();
            return mountRefresh();
          },
          useEffectEvent: function(callback) {
            currentHookNameInDev = "useEffectEvent";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEvent(callback);
          }
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          use: function(usable) {
            warnInvalidHookAccess();
            return use(usable);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            updateEffectImpl(2048, Passive, create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffectImpl(4, Insertion, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffectImpl(4, Layout, create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function() {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useState: function() {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(basicStateReducer);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(
              subscribe,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useFormState: function(action) {
            currentHookNameInDev = "useFormState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateActionState(action);
          },
          useActionState: function(action) {
            currentHookNameInDev = "useActionState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateActionState(action);
          },
          useOptimistic: function(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOptimistic(passthrough, reducer);
          },
          useMemoCache: function(size) {
            warnInvalidHookAccess();
            return useMemoCache(size);
          },
          useHostTransitionStatus,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useEffectEvent: function(callback) {
            currentHookNameInDev = "useEffectEvent";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEvent(callback);
          }
        };
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          use: function(usable) {
            warnInvalidHookAccess();
            return use(usable);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            updateEffectImpl(2048, Passive, create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffectImpl(4, Insertion, create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffectImpl(4, Layout, create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function() {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useState: function() {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(basicStateReducer);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(
              subscribe,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useFormState: function(action) {
            currentHookNameInDev = "useFormState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderActionState(action);
          },
          useActionState: function(action) {
            currentHookNameInDev = "useActionState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderActionState(action);
          },
          useOptimistic: function(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOptimistic(passthrough, reducer);
          },
          useMemoCache: function(size) {
            warnInvalidHookAccess();
            return useMemoCache(size);
          },
          useHostTransitionStatus,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useEffectEvent: function(callback) {
            currentHookNameInDev = "useEffectEvent";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEvent(callback);
          }
        };
        var fakeInternalInstance = {};
        var didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
        var didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
        var didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
        var didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
        var didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
        var didWarnAboutContextTypes$1 = /* @__PURE__ */ new Set();
        var didWarnAboutChildContextTypes = /* @__PURE__ */ new Set();
        var didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        Object.freeze(fakeInternalInstance);
        var classComponentUpdater = {
          enqueueSetState: function(inst, payload, callback) {
            inst = inst._reactInternals;
            var lane = requestUpdateLane(inst), update = createUpdate(lane);
            update.payload = payload;
            void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
            payload = enqueueUpdate(inst, update, lane);
            null !== payload && (startUpdateTimerByLane(lane, "this.setState()", inst), scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
          },
          enqueueReplaceState: function(inst, payload, callback) {
            inst = inst._reactInternals;
            var lane = requestUpdateLane(inst), update = createUpdate(lane);
            update.tag = ReplaceState;
            update.payload = payload;
            void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
            payload = enqueueUpdate(inst, update, lane);
            null !== payload && (startUpdateTimerByLane(lane, "this.replaceState()", inst), scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
          },
          enqueueForceUpdate: function(inst, callback) {
            inst = inst._reactInternals;
            var lane = requestUpdateLane(inst), update = createUpdate(lane);
            update.tag = ForceUpdate;
            void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
            callback = enqueueUpdate(inst, update, lane);
            null !== callback && (startUpdateTimerByLane(lane, "this.forceUpdate()", inst), scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
          }
        }, componentName = null, errorBoundaryName = null, SelectiveHydrationException = Error(
          "This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."
        ), didReceiveUpdate = false;
        var didWarnAboutBadClass = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutContextTypes = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutRevealOrder = {};
        var didWarnAboutTailOptions = {};
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: 0,
          hydrationErrors: null
        }, hasWarnedAboutUsingNoValuePropOnContextProvider = false, didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        var offscreenSubtreeIsHidden = false, offscreenSubtreeWasHidden = false, needsFormReset = false, PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set, nextEffect = null, inProgressLanes = null, inProgressRoot = null, hostParent = null, hostParentIsContainer = false, currentHoistableRoot = null, inHydratedSubtree = false, suspenseyCommitFlag = 8192, DefaultAsyncDispatcher = {
          getCacheForType: function(resourceType) {
            var cache = readContext(CacheContext), cacheForType = cache.data.get(resourceType);
            void 0 === cacheForType && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
            return cacheForType;
          },
          cacheSignal: function() {
            return readContext(CacheContext).controller.signal;
          },
          getOwner: function() {
            return current;
          }
        };
        if ("function" === typeof Symbol && Symbol.for) {
          var symbolFor = Symbol.for;
          symbolFor("selector.component");
          symbolFor("selector.has_pseudo_class");
          symbolFor("selector.role");
          symbolFor("selector.test_id");
          symbolFor("selector.text");
        }
        var commitHooks = [], PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map, NoContext = 0, RenderContext = 2, CommitContext = 4, RootInProgress = 0, RootFatalErrored = 1, RootErrored = 2, RootSuspended = 3, RootSuspendedWithDelay = 4, RootSuspendedAtTheShell = 6, RootCompleted = 5, executionContext = NoContext, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = 0, NotSuspended = 0, SuspendedOnError = 1, SuspendedOnData = 2, SuspendedOnImmediate = 3, SuspendedOnInstance = 4, SuspendedOnInstanceAndReadyToContinue = 5, SuspendedOnDeprecatedThrowPromise = 6, SuspendedAndReadyToContinue = 7, SuspendedOnHydration = 8, SuspendedOnAction = 9, workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, workInProgressRootDidSkipSuspendedSiblings = false, workInProgressRootIsPrerendering = false, workInProgressRootDidAttachPingListener = false, entangledRenderLanes = 0, workInProgressRootExitStatus = RootInProgress, workInProgressRootSkippedLanes = 0, workInProgressRootInterleavedUpdatedLanes = 0, workInProgressRootPingedLanes = 0, workInProgressDeferredLane = 0, workInProgressSuspendedRetryLanes = 0, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, workInProgressRootDidIncludeRecursiveRenderUpdate = false, globalMostRecentFallbackTime = 0, globalMostRecentTransitionTime = 0, FALLBACK_THROTTLE_MS = 300, workInProgressRootRenderTargetTime = Infinity, RENDER_TIMEOUT_MS = 500, workInProgressTransitions = null, workInProgressUpdateTask = null, legacyErrorBoundariesThatAlreadyFailed = null, IMMEDIATE_COMMIT = 0, ABORTED_VIEW_TRANSITION_COMMIT = 1, DELAYED_PASSIVE_COMMIT = 2, ANIMATION_STARTED_COMMIT = 3, NO_PENDING_EFFECTS = 0, PENDING_MUTATION_PHASE = 1, PENDING_LAYOUT_PHASE = 2, PENDING_AFTER_MUTATION_PHASE = 3, PENDING_SPAWNED_WORK = 4, PENDING_PASSIVE_PHASE = 5, pendingEffectsStatus = 0, pendingEffectsRoot = null, pendingFinishedWork = null, pendingEffectsLanes = 0, pendingEffectsRemainingLanes = 0, pendingEffectsRenderEndTime = -0, pendingPassiveTransitions = null, pendingRecoverableErrors = null, pendingSuspendedCommitReason = null, pendingDelayedCommitReason = IMMEDIATE_COMMIT, pendingSuspendedViewTransitionReason = null, NESTED_UPDATE_LIMIT = 50, nestedUpdateCount = 0, rootWithNestedUpdates = null, isFlushingPassiveEffects = false, didScheduleUpdateDuringPassiveEffects = false, NESTED_PASSIVE_UPDATE_LIMIT = 50, nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, isRunningInsertionEffect = false, didWarnStateUpdateForNotYetMountedComponent = null, didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        var fakeActCallbackNode$1 = {}, firstScheduledRoot = null, lastScheduledRoot = null, didScheduleMicrotask = false, didScheduleMicrotask_act = false, mightHavePendingSyncWork = false, isFlushingWork = false, currentEventTransitionLane = 0, fakeActCallbackNode = {};
        (function() {
          for (var i = 0; i < simpleEventPluginEvents.length; i++) {
            var eventName = simpleEventPluginEvents[i], domEventName = eventName.toLowerCase();
            eventName = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + eventName);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
          registerSimpleEvent(TRANSITION_START, "onTransitionStart");
          registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        })();
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
        registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
        registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
        registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        registerTwoPhaseEvent(
          "onChange",
          "change click focusin focusout input keydown keyup selectionchange".split(
            " "
          )
        );
        registerTwoPhaseEvent(
          "onSelect",
          "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
            " "
          )
        );
        registerTwoPhaseEvent("onBeforeInput", [
          "compositionend",
          "keypress",
          "textInput",
          "paste"
        ]);
        registerTwoPhaseEvent(
          "onCompositionEnd",
          "compositionend focusout keydown keypress keyup mousedown".split(" ")
        );
        registerTwoPhaseEvent(
          "onCompositionStart",
          "compositionstart focusout keydown keypress keyup mousedown".split(" ")
        );
        registerTwoPhaseEvent(
          "onCompositionUpdate",
          "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
        );
        var mediaEventTypes = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
          " "
        ), nonDelegatedEvents = new Set(
          "beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(mediaEventTypes)
        ), listeningMarker = "_reactListening" + Math.random().toString(36).slice(2), didWarnControlledToUncontrolled = false, didWarnUncontrolledToControlled = false, didWarnFormActionType = false, didWarnFormActionName = false, didWarnFormActionTarget = false, didWarnFormActionMethod = false, didWarnPopoverTargetObject = false;
        var didWarnForNewBooleanPropsWithEmptyValue = {};
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g, NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g, xlinkNamespace = "http://www.w3.org/1999/xlink", xmlNamespace = "http://www.w3.org/XML/1998/namespace", EXPECTED_FORM_ACTION_URL = "javascript:throw new Error('React form unexpectedly submitted.')", SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning", ACTIVITY_START_DATA = "&", ACTIVITY_END_DATA = "/&", SUSPENSE_START_DATA = "$", SUSPENSE_END_DATA = "/$", SUSPENSE_PENDING_START_DATA = "$?", SUSPENSE_QUEUED_START_DATA = "$~", SUSPENSE_FALLBACK_START_DATA = "$!", PREAMBLE_CONTRIBUTION_HTML = "html", PREAMBLE_CONTRIBUTION_BODY = "body", PREAMBLE_CONTRIBUTION_HEAD = "head", FORM_STATE_IS_MATCHING = "F!", FORM_STATE_IS_NOT_MATCHING = "F", DOCUMENT_READY_STATE_LOADING = "loading", STYLE = "style", HostContextNamespaceNone = 0, HostContextNamespaceSvg = 1, HostContextNamespaceMath = 2, eventsEnabled = null, selectionInformation = null, warnedUnknownTags = { dialog: true, webview: true }, currentPopstateTransitionEvent = null, schedulerEvent = void 0, scheduleTimeout = "function" === typeof setTimeout ? setTimeout : void 0, cancelTimeout = "function" === typeof clearTimeout ? clearTimeout : void 0, noTimeout = -1, localPromise = "function" === typeof Promise ? Promise : void 0, scheduleMicrotask = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof localPromise ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout, previousHydratableOnEnteringScopedSingleton = null, NotLoaded = 0, Loaded = 1, Errored = 2, Settled = 3, Inserted = 4, preloadPropsMap = /* @__PURE__ */ new Map(), preconnectsSet = /* @__PURE__ */ new Set(), previousDispatcher = ReactDOMSharedInternals.d;
        ReactDOMSharedInternals.d = {
          f: function() {
            var previousWasRendering = previousDispatcher.f(), wasRendering = flushSyncWork$1();
            return previousWasRendering || wasRendering;
          },
          r: function(form) {
            var formInst = getInstanceFromNode(form);
            null !== formInst && 5 === formInst.tag && "form" === formInst.type ? requestFormReset$1(formInst) : previousDispatcher.r(form);
          },
          D: function(href) {
            previousDispatcher.D(href);
            preconnectAs("dns-prefetch", href, null);
          },
          C: function(href, crossOrigin) {
            previousDispatcher.C(href, crossOrigin);
            preconnectAs("preconnect", href, crossOrigin);
          },
          L: function(href, as, options) {
            previousDispatcher.L(href, as, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && href && as) {
              var preloadSelector = 'link[rel="preload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"]';
              "image" === as ? options && options.imageSrcSet ? (preloadSelector += '[imagesrcset="' + escapeSelectorAttributeValueInsideDoubleQuotes(
                options.imageSrcSet
              ) + '"]', "string" === typeof options.imageSizes && (preloadSelector += '[imagesizes="' + escapeSelectorAttributeValueInsideDoubleQuotes(
                options.imageSizes
              ) + '"]')) : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]' : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]';
              var key = preloadSelector;
              switch (as) {
                case "style":
                  key = getStyleKey(href);
                  break;
                case "script":
                  key = getScriptKey(href);
              }
              preloadPropsMap.has(key) || (href = assign(
                {
                  rel: "preload",
                  href: "image" === as && options && options.imageSrcSet ? void 0 : href,
                  as
                },
                options
              ), preloadPropsMap.set(key, href), null !== ownerDocument.querySelector(preloadSelector) || "style" === as && ownerDocument.querySelector(
                getStylesheetSelectorFromKey(key)
              ) || "script" === as && ownerDocument.querySelector(getScriptSelectorFromKey(key)) || (as = ownerDocument.createElement("link"), setInitialProperties(as, "link", href), markNodeAsHoistable(as), ownerDocument.head.appendChild(as)));
            }
          },
          m: function(href, options) {
            previousDispatcher.m(href, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && href) {
              var as = options && "string" === typeof options.as ? options.as : "script", preloadSelector = 'link[rel="modulepreload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"][href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]', key = preloadSelector;
              switch (as) {
                case "audioworklet":
                case "paintworklet":
                case "serviceworker":
                case "sharedworker":
                case "worker":
                case "script":
                  key = getScriptKey(href);
              }
              if (!preloadPropsMap.has(key) && (href = assign({ rel: "modulepreload", href }, options), preloadPropsMap.set(key, href), null === ownerDocument.querySelector(preloadSelector))) {
                switch (as) {
                  case "audioworklet":
                  case "paintworklet":
                  case "serviceworker":
                  case "sharedworker":
                  case "worker":
                  case "script":
                    if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
                      return;
                }
                as = ownerDocument.createElement("link");
                setInitialProperties(as, "link", href);
                markNodeAsHoistable(as);
                ownerDocument.head.appendChild(as);
              }
            }
          },
          X: function(src, options) {
            previousDispatcher.X(src, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && src) {
              var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
              resource || (resource = ownerDocument.querySelector(
                getScriptSelectorFromKey(key)
              ), resource || (src = assign({ src, async: true }, options), (options = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
                type: "script",
                instance: resource,
                count: 1,
                state: null
              }, scripts.set(key, resource));
            }
          },
          S: function(href, precedence, options) {
            previousDispatcher.S(href, precedence, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && href) {
              var styles = getResourcesFromRoot(ownerDocument).hoistableStyles, key = getStyleKey(href);
              precedence = precedence || "default";
              var resource = styles.get(key);
              if (!resource) {
                var state = { loading: NotLoaded, preload: null };
                if (resource = ownerDocument.querySelector(
                  getStylesheetSelectorFromKey(key)
                ))
                  state.loading = Loaded | Inserted;
                else {
                  href = assign(
                    {
                      rel: "stylesheet",
                      href,
                      "data-precedence": precedence
                    },
                    options
                  );
                  (options = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(href, options);
                  var link = resource = ownerDocument.createElement("link");
                  markNodeAsHoistable(link);
                  setInitialProperties(link, "link", href);
                  link._p = new Promise(function(resolve, reject) {
                    link.onload = resolve;
                    link.onerror = reject;
                  });
                  link.addEventListener("load", function() {
                    state.loading |= Loaded;
                  });
                  link.addEventListener("error", function() {
                    state.loading |= Errored;
                  });
                  state.loading |= Inserted;
                  insertStylesheet(resource, precedence, ownerDocument);
                }
                resource = {
                  type: "stylesheet",
                  instance: resource,
                  count: 1,
                  state
                };
                styles.set(key, resource);
              }
            }
          },
          M: function(src, options) {
            previousDispatcher.M(src, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && src) {
              var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
              resource || (resource = ownerDocument.querySelector(
                getScriptSelectorFromKey(key)
              ), resource || (src = assign({ src, async: true, type: "module" }, options), (options = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
                type: "script",
                instance: resource,
                count: 1,
                state: null
              }, scripts.set(key, resource));
            }
          }
        };
        var globalDocument = "undefined" === typeof document ? null : document, tagCaches = null, SUSPENSEY_STYLESHEET_TIMEOUT = 6e4, SUSPENSEY_IMAGE_TIMEOUT = 800, SUSPENSEY_IMAGE_TIME_ESTIMATE = 500, estimatedBytesWithinLimit = 0, LAST_PRECEDENCE = null, precedencesByRoot = null, NotPendingTransition = NotPending, HostTransitionContext = {
          $$typeof: REACT_CONTEXT_TYPE,
          Provider: null,
          Consumer: null,
          _currentValue: NotPendingTransition,
          _currentValue2: NotPendingTransition,
          _threadCount: 0
        }, badgeFormat = "%c%s%c", badgeStyle = "background: #e6e6e6;background: light-dark(rgba(0,0,0,0.1), rgba(255,255,255,0.25));color: #000000;color: light-dark(#000000, #ffffff);border-radius: 2px", resetStyle = "", pad = " ", bind = Function.prototype.bind;
        var didWarnAboutNestedUpdates = false;
        var overrideHookState = null, overrideHookStateDeletePath = null, overrideHookStateRenamePath = null, overrideProps = null, overridePropsDeletePath = null, overridePropsRenamePath = null, scheduleUpdate = null, scheduleRetry = null, setErrorHandler = null, setSuspenseHandler = null;
        overrideHookState = function(fiber, id, path, value) {
          id = findHook(fiber, id);
          null !== id && (path = copyWithSetImpl(id.memoizedState, path, 0, value), id.memoizedState = path, id.baseState = path, fiber.memoizedProps = assign({}, fiber.memoizedProps), path = enqueueConcurrentRenderForLane(fiber, 2), null !== path && scheduleUpdateOnFiber(path, fiber, 2));
        };
        overrideHookStateDeletePath = function(fiber, id, path) {
          id = findHook(fiber, id);
          null !== id && (path = copyWithDeleteImpl(id.memoizedState, path, 0), id.memoizedState = path, id.baseState = path, fiber.memoizedProps = assign({}, fiber.memoizedProps), path = enqueueConcurrentRenderForLane(fiber, 2), null !== path && scheduleUpdateOnFiber(path, fiber, 2));
        };
        overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
          id = findHook(fiber, id);
          null !== id && (oldPath = copyWithRename(id.memoizedState, oldPath, newPath), id.memoizedState = oldPath, id.baseState = oldPath, fiber.memoizedProps = assign({}, fiber.memoizedProps), oldPath = enqueueConcurrentRenderForLane(fiber, 2), null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2));
        };
        overrideProps = function(fiber, path, value) {
          fiber.pendingProps = copyWithSetImpl(fiber.memoizedProps, path, 0, value);
          fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          path = enqueueConcurrentRenderForLane(fiber, 2);
          null !== path && scheduleUpdateOnFiber(path, fiber, 2);
        };
        overridePropsDeletePath = function(fiber, path) {
          fiber.pendingProps = copyWithDeleteImpl(fiber.memoizedProps, path, 0);
          fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          path = enqueueConcurrentRenderForLane(fiber, 2);
          null !== path && scheduleUpdateOnFiber(path, fiber, 2);
        };
        overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(
            fiber.memoizedProps,
            oldPath,
            newPath
          );
          fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          oldPath = enqueueConcurrentRenderForLane(fiber, 2);
          null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2);
        };
        scheduleUpdate = function(fiber) {
          var root3 = enqueueConcurrentRenderForLane(fiber, 2);
          null !== root3 && scheduleUpdateOnFiber(root3, fiber, 2);
        };
        scheduleRetry = function(fiber) {
          var lane = claimNextRetryLane(), root3 = enqueueConcurrentRenderForLane(fiber, lane);
          null !== root3 && scheduleUpdateOnFiber(root3, fiber, lane);
        };
        setErrorHandler = function(newShouldErrorImpl) {
          shouldErrorImpl = newShouldErrorImpl;
        };
        setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
        var _enabled = true, return_targetInst = null, hasScheduledReplayAttempt = false, queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers = /* @__PURE__ */ new Map(), queuedPointerCaptures = /* @__PURE__ */ new Map(), queuedExplicitHydrationTargets = [], discreteReplayableEvents = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
          " "
        ), lastScheduledReplayQueue = null;
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
          var root3 = this._internalRoot;
          if (null === root3) throw Error("Cannot update an unmounted root.");
          var args = arguments;
          "function" === typeof args[1] ? console.error(
            "does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
          ) : isValidContainer(args[1]) ? console.error(
            "You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root."
          ) : "undefined" !== typeof args[1] && console.error(
            "You passed a second argument to root.render(...) but it only accepts one argument."
          );
          args = children;
          var current2 = root3.current, lane = requestUpdateLane(current2);
          updateContainerImpl(current2, lane, args, root3, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          var args = arguments;
          "function" === typeof args[0] && console.error(
            "does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
          );
          args = this._internalRoot;
          if (null !== args) {
            this._internalRoot = null;
            var container = args.containerInfo;
            (executionContext & (RenderContext | CommitContext)) !== NoContext && console.error(
              "Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."
            );
            updateContainerImpl(args.current, 2, null, args, null, null);
            flushSyncWork$1();
            container[internalContainerInstanceKey] = null;
          }
        };
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function(target) {
          if (target) {
            var updatePriority = resolveUpdatePriority();
            target = { blockedOn: null, target, priority: updatePriority };
            for (var i = 0; i < queuedExplicitHydrationTargets.length && 0 !== updatePriority && updatePriority < queuedExplicitHydrationTargets[i].priority; i++) ;
            queuedExplicitHydrationTargets.splice(i, 0, target);
            0 === i && attemptExplicitHydrationTarget(target);
          }
        };
        (function() {
          var isomorphicReactPackageVersion = React90.version;
          if ("19.2.0" !== isomorphicReactPackageVersion)
            throw Error(
              'Incompatible React versions: The "react" and "react-dom" packages must have the exact same version. Instead got:\n  - react:      ' + (isomorphicReactPackageVersion + "\n  - react-dom:  19.2.0\nLearn more: https://react.dev/warnings/version-mismatch")
            );
        })();
        "function" === typeof Map && null != Map.prototype && "function" === typeof Map.prototype.forEach && "function" === typeof Set && null != Set.prototype && "function" === typeof Set.prototype.clear && "function" === typeof Set.prototype.forEach || console.error(
          "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://react.dev/link/react-polyfills"
        );
        ReactDOMSharedInternals.findDOMNode = function(componentOrElement) {
          var fiber = componentOrElement._reactInternals;
          if (void 0 === fiber) {
            if ("function" === typeof componentOrElement.render)
              throw Error("Unable to find node on an unmounted component.");
            componentOrElement = Object.keys(componentOrElement).join(",");
            throw Error(
              "Argument appears to not be a ReactComponent. Keys: " + componentOrElement
            );
          }
          componentOrElement = findCurrentFiberUsingSlowPath(fiber);
          componentOrElement = null !== componentOrElement ? findCurrentHostFiberImpl(componentOrElement) : null;
          componentOrElement = null === componentOrElement ? null : componentOrElement.stateNode;
          return componentOrElement;
        };
        if (!function() {
          var internals = {
            bundleType: 1,
            version: "19.2.0",
            rendererPackageName: "react-dom",
            currentDispatcherRef: ReactSharedInternals,
            reconcilerVersion: "19.2.0"
          };
          internals.overrideHookState = overrideHookState;
          internals.overrideHookStateDeletePath = overrideHookStateDeletePath;
          internals.overrideHookStateRenamePath = overrideHookStateRenamePath;
          internals.overrideProps = overrideProps;
          internals.overridePropsDeletePath = overridePropsDeletePath;
          internals.overridePropsRenamePath = overridePropsRenamePath;
          internals.scheduleUpdate = scheduleUpdate;
          internals.scheduleRetry = scheduleRetry;
          internals.setErrorHandler = setErrorHandler;
          internals.setSuspenseHandler = setSuspenseHandler;
          internals.scheduleRefresh = scheduleRefresh;
          internals.scheduleRoot = scheduleRoot;
          internals.setRefreshHandler = setRefreshHandler;
          internals.getCurrentFiber = getCurrentFiberForDevTools;
          return injectInternals(internals);
        }() && canUseDOM && window.top === window.self && (-1 < navigator.userAgent.indexOf("Chrome") && -1 === navigator.userAgent.indexOf("Edge") || -1 < navigator.userAgent.indexOf("Firefox"))) {
          var protocol = window.location.protocol;
          /^(https?|file):$/.test(protocol) && console.info(
            "%cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools" + ("file:" === protocol ? "\nYou might need to use a local HTTP server (instead of file://): https://react.dev/link/react-devtools-faq" : ""),
            "font-weight:bold"
          );
        }
        exports.createRoot = function(container, options) {
          if (!isValidContainer(container))
            throw Error("Target container is not a DOM element.");
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError;
          null !== options && void 0 !== options && (options.hydrate ? console.warn(
            "hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead."
          ) : "object" === typeof options && null !== options && options.$$typeof === REACT_ELEMENT_TYPE && console.error(
            "You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);"
          ), true === options.unstable_strictMode && (isStrictMode = true), void 0 !== options.identifierPrefix && (identifierPrefix = options.identifierPrefix), void 0 !== options.onUncaughtError && (onUncaughtError = options.onUncaughtError), void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError), void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError));
          options = createFiberRoot(
            container,
            1,
            false,
            null,
            null,
            isStrictMode,
            identifierPrefix,
            null,
            onUncaughtError,
            onCaughtError,
            onRecoverableError,
            defaultOnDefaultTransitionIndicator
          );
          container[internalContainerInstanceKey] = options.current;
          listenToAllSupportedEvents(container);
          return new ReactDOMRoot(options);
        };
        exports.hydrateRoot = function(container, initialChildren, options) {
          if (!isValidContainer(container))
            throw Error("Target container is not a DOM element.");
          warnIfReactDOMContainerInDEV(container);
          void 0 === initialChildren && console.error(
            "Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)"
          );
          var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, formState = null;
          null !== options && void 0 !== options && (true === options.unstable_strictMode && (isStrictMode = true), void 0 !== options.identifierPrefix && (identifierPrefix = options.identifierPrefix), void 0 !== options.onUncaughtError && (onUncaughtError = options.onUncaughtError), void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError), void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError), void 0 !== options.formState && (formState = options.formState));
          initialChildren = createFiberRoot(
            container,
            1,
            true,
            initialChildren,
            null != options ? options : null,
            isStrictMode,
            identifierPrefix,
            formState,
            onUncaughtError,
            onCaughtError,
            onRecoverableError,
            defaultOnDefaultTransitionIndicator
          );
          initialChildren.context = getContextForSubtree(null);
          options = initialChildren.current;
          isStrictMode = requestUpdateLane(options);
          isStrictMode = getBumpedLaneForHydrationByLane(isStrictMode);
          identifierPrefix = createUpdate(isStrictMode);
          identifierPrefix.callback = null;
          enqueueUpdate(options, identifierPrefix, isStrictMode);
          startUpdateTimerByLane(isStrictMode, "hydrateRoot()", null);
          options = isStrictMode;
          initialChildren.current.lanes = options;
          markRootUpdated$1(initialChildren, options);
          ensureRootIsScheduled(initialChildren);
          container[internalContainerInstanceKey] = initialChildren.current;
          listenToAllSupportedEvents(container);
          return new ReactDOMHydrationRoot(initialChildren);
        };
        exports.version = "19.2.0";
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_client_development();
      }
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      (function() {
        function getComponentNameFromType(type) {
          if (null == type) return null;
          if ("function" === typeof type)
            return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
          if ("string" === typeof type) return type;
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_ACTIVITY_TYPE:
              return "Activity";
          }
          if ("object" === typeof type)
            switch ("number" === typeof type.tag && console.error(
              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
            ), type.$$typeof) {
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_CONTEXT_TYPE:
                return type.displayName || "Context";
              case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
              case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
              case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                  return getComponentNameFromType(type(innerType));
                } catch (x) {
                }
            }
          return null;
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          try {
            testStringCoercion(value);
            var JSCompiler_inline_result = false;
          } catch (e) {
            JSCompiler_inline_result = true;
          }
          if (JSCompiler_inline_result) {
            JSCompiler_inline_result = console;
            var JSCompiler_temp_const = JSCompiler_inline_result.error;
            var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            JSCompiler_temp_const.call(
              JSCompiler_inline_result,
              "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
              JSCompiler_inline_result$jscomp$0
            );
            return testStringCoercion(value);
          }
        }
        function getTaskName(type) {
          if (type === REACT_FRAGMENT_TYPE) return "<>";
          if ("object" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE)
            return "<...>";
          try {
            var name = getComponentNameFromType(type);
            return name ? "<" + name + ">" : "<...>";
          } catch (x) {
            return "<...>";
          }
        }
        function getOwner() {
          var dispatcher = ReactSharedInternals.A;
          return null === dispatcher ? null : dispatcher.getOwner();
        }
        function UnknownOwner() {
          return Error("react-stack-top-frame");
        }
        function hasValidKey(config) {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return false;
          }
          return void 0 !== config.key;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          function warnAboutAccessingKey() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = true, console.error(
              "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
              displayName
            ));
          }
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function elementRefGetterWithDeprecationWarning() {
          var componentName = getComponentNameFromType(this.type);
          didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = true, console.error(
            "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
          ));
          componentName = this.props.ref;
          return void 0 !== componentName ? componentName : null;
        }
        function ReactElement(type, key, props, owner, debugStack, debugTask) {
          var refProp = props.ref;
          type = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            props,
            _owner: owner
          };
          null !== (void 0 !== refProp ? refProp : null) ? Object.defineProperty(type, "ref", {
            enumerable: false,
            get: elementRefGetterWithDeprecationWarning
          }) : Object.defineProperty(type, "ref", { enumerable: false, value: null });
          type._store = {};
          Object.defineProperty(type._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: 0
          });
          Object.defineProperty(type, "_debugInfo", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: null
          });
          Object.defineProperty(type, "_debugStack", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: debugStack
          });
          Object.defineProperty(type, "_debugTask", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: debugTask
          });
          Object.freeze && (Object.freeze(type.props), Object.freeze(type));
          return type;
        }
        function jsxDEVImpl(type, config, maybeKey, isStaticChildren, debugStack, debugTask) {
          var children = config.children;
          if (void 0 !== children)
            if (isStaticChildren)
              if (isArrayImpl(children)) {
                for (isStaticChildren = 0; isStaticChildren < children.length; isStaticChildren++)
                  validateChildKeys(children[isStaticChildren]);
                Object.freeze && Object.freeze(children);
              } else
                console.error(
                  "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead."
                );
            else validateChildKeys(children);
          if (hasOwnProperty.call(config, "key")) {
            children = getComponentNameFromType(type);
            var keys = Object.keys(config).filter(function(k) {
              return "key" !== k;
            });
            isStaticChildren = 0 < keys.length ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
            didWarnAboutKeySpread[children + isStaticChildren] || (keys = 0 < keys.length ? "{" + keys.join(": ..., ") + ": ...}" : "{}", console.error(
              'A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />',
              isStaticChildren,
              children,
              keys,
              children
            ), didWarnAboutKeySpread[children + isStaticChildren] = true);
          }
          children = null;
          void 0 !== maybeKey && (checkKeyStringCoercion(maybeKey), children = "" + maybeKey);
          hasValidKey(config) && (checkKeyStringCoercion(config.key), children = "" + config.key);
          if ("key" in config) {
            maybeKey = {};
            for (var propName in config)
              "key" !== propName && (maybeKey[propName] = config[propName]);
          } else maybeKey = config;
          children && defineKeyPropWarningGetter(
            maybeKey,
            "function" === typeof type ? type.displayName || type.name || "Unknown" : type
          );
          return ReactElement(
            type,
            children,
            maybeKey,
            getOwner(),
            debugStack,
            debugTask
          );
        }
        function validateChildKeys(node) {
          isValidElement(node) ? node._store && (node._store.validated = 1) : "object" === typeof node && null !== node && node.$$typeof === REACT_LAZY_TYPE && ("fulfilled" === node._payload.status ? isValidElement(node._payload.value) && node._payload.value._store && (node._payload.value._store.validated = 1) : node._store && (node._store.validated = 1));
        }
        function isValidElement(object) {
          return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var React90 = require_react(), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_ACTIVITY_TYPE = Symbol.for("react.activity"), REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), ReactSharedInternals = React90.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, hasOwnProperty = Object.prototype.hasOwnProperty, isArrayImpl = Array.isArray, createTask = console.createTask ? console.createTask : function() {
          return null;
        };
        React90 = {
          react_stack_bottom_frame: function(callStackForError) {
            return callStackForError();
          }
        };
        var specialPropKeyWarningShown;
        var didWarnAboutElementRef = {};
        var unknownOwnerDebugStack = React90.react_stack_bottom_frame.bind(
          React90,
          UnknownOwner
        )();
        var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
        var didWarnAboutKeySpread = {};
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.jsx = function(type, config, maybeKey) {
          var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
          return jsxDEVImpl(
            type,
            config,
            maybeKey,
            false,
            trackActualOwner ? Error("react-stack-top-frame") : unknownOwnerDebugStack,
            trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask
          );
        };
        exports.jsxs = function(type, config, maybeKey) {
          var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
          return jsxDEVImpl(
            type,
            config,
            maybeKey,
            true,
            trackActualOwner ? Error("react-stack-top-frame") : unknownOwnerDebugStack,
            trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask
          );
        };
      })();
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // index.tsx
  var import_client = __toESM(require_client(), 1);

  // App.tsx
  var import_react91 = __toESM(require_react(), 1);

  // hooks/useSiteData.ts
  var import_react3 = __toESM(require_react(), 1);

  // hooks/usePersistentState.ts
  var import_react = __toESM(require_react(), 1);
  function usePersistentState(key, defaultValue) {
    const [state, setState] = (0, import_react.useState)(() => {
      try {
        const storedValue = window.localStorage.getItem(key);
        if (storedValue) {
          const parsed = JSON.parse(storedValue);
          if (key === "siteSettings" && (parsed.seo === void 0 || parsed.socialLinks === void 0 || !parsed.standardPlan || parsed.emailTemplates === void 0)) {
            const defaultSettings = defaultValue;
            return { ...defaultSettings, ...parsed };
          }
          return parsed;
        }
        return defaultValue;
      } catch (error) {
        console.error(`Error reading localStorage key \u201C${key}\u201D:`, error);
        return defaultValue;
      }
    });
    const setPersistentState = (0, import_react.useCallback)(
      (newValue) => {
        setState((prevState) => {
          const resolvedValue = typeof newValue === "function" ? newValue(prevState) : newValue;
          try {
            window.localStorage.setItem(key, JSON.stringify(resolvedValue));
          } catch (error) {
            console.error(`Error setting localStorage key \u201C${key}\u201D:`, error);
          }
          return resolvedValue;
        });
      },
      [key]
    );
    return [state, setPersistentState];
  }

  // contexts/AuthContext.tsx
  var import_react2 = __toESM(require_react(), 1);
  var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
  var AuthContext = (0, import_react2.createContext)(void 0);
  function decodeJwt(token) {
    try {
      return JSON.parse(atob(token.split(".")[1]));
    } catch (e) {
      return null;
    }
  }
  var AuthProvider = ({ children }) => {
    const [user, setUser] = (0, import_react2.useState)(null);
    const [token, setToken] = (0, import_react2.useState)(() => localStorage.getItem("authToken"));
    (0, import_react2.useEffect)(() => {
      if (token) {
        try {
          const decodedUser = decodeJwt(token);
          setUser({ ...decodedUser.user });
        } catch (e) {
          console.error("Invalid token:", e);
          localStorage.removeItem("authToken");
          setToken(null);
          setUser(null);
        }
      }
    }, [token]);
    const login = (0, import_react2.useCallback)(async (email, password) => {
      try {
        const response = await fetch("/api/auth/login", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email, password })
        });
        if (!response.ok) {
          throw new Error("Login failed");
        }
        const { token: token2, user: loggedInUser } = await response.json();
        localStorage.setItem("authToken", token2);
        setToken(token2);
        setUser(loggedInUser);
        return loggedInUser;
      } catch (error) {
        console.error(error);
        return null;
      }
    }, []);
    const logout = (0, import_react2.useCallback)(() => {
      setUser(null);
      setToken(null);
      localStorage.removeItem("authToken");
    }, []);
    const register = (0, import_react2.useCallback)(async (name, email, password, role, phone, birthDate, address) => {
      try {
        const response = await fetch("/api/auth/register", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ name, email, password, role, phone, birthDate, address })
        });
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || "Registration failed");
        }
        const { token: token2, user: newUser } = await response.json();
        localStorage.setItem("authToken", token2);
        setToken(token2);
        setUser(newUser);
        return newUser;
      } catch (error) {
        console.error(error);
        return null;
      }
    }, []);
    const updateUser = (0, import_react2.useCallback)(async (updates) => {
      if (!user) return null;
      console.log("Simulating user update with:", updates);
      const updatedUser = { ...user, ...updates };
      setUser(updatedUser);
      return updatedUser;
    }, [user]);
    const changePassword = async (oldPassword, newPassword) => {
      console.log("Simulating password change.");
      return true;
    };
    const resetPassword = async (email) => {
      console.log(`Simulating password reset for ${email}.`);
    };
    const contextValue = (0, import_react2.useMemo)(() => ({
      user,
      token,
      login,
      logout,
      register,
      updateUser,
      changePassword,
      resetPassword,
      // Placeholder functions - these should be moved or implemented with API calls
      addAddress: () => {
      },
      updateAddress: () => {
      },
      deleteAddress: () => {
      },
      setDefaultAddress: () => {
      },
      toggleFollowStore: () => {
      }
    }), [user, token, login, logout, register, updateUser]);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AuthContext.Provider, { value: contextValue, children });
  };
  var useAuth = () => {
    const context = (0, import_react2.useContext)(AuthContext);
    if (context === void 0) {
      throw new Error("useAuth must be used within an AuthProvider");
    }
    return context;
  };

  // hooks/useSiteData.ts
  async function makeApiRequest(url, method = "GET", body) {
    const options = {
      method,
      headers: {
        "Content-Type": "application/json"
      }
    };
    const token = localStorage.getItem("authToken");
    if (token) {
      options.headers["Authorization"] = `Bearer ${token}`;
    }
    if (body) {
      options.body = JSON.stringify(body);
    }
    const response = await fetch(url, options);
    if (!response.ok) {
      try {
        const errorData = await response.json();
        throw new Error(errorData.message || `API Error on ${method} ${url}`);
      } catch (e) {
        throw new Error(`API Error: ${response.status} ${response.statusText} on ${method} ${url}`);
      }
    }
    const contentType = response.headers.get("content-type");
    if (contentType && contentType.indexOf("application/json") !== -1) {
      return response.json();
    } else {
      const text = await response.text();
      throw new Error(`Expected JSON response, but got ${contentType}. Response body: ${text}`);
    }
  }
  var defaultSiteSettings = {
    logoUrl: "",
    bannerUrl: "",
    companyName: "KMER ZONE",
    isStoriesEnabled: true,
    requiredSellerDocuments: {},
    isRentEnabled: false,
    rentAmount: 0,
    canSellersCreateCategories: false,
    commissionRate: 8,
    standardPlan: {},
    premiumPlan: {},
    superPremiumPlan: {},
    customerLoyaltyProgram: {},
    deliverySettings: {},
    maintenanceMode: { isEnabled: false, message: "", reopenDate: "" },
    seo: { metaTitle: "", metaDescription: "", ogImageUrl: "" },
    socialLinks: { facebook: { linkUrl: "#", iconUrl: "" }, twitter: { linkUrl: "#", iconUrl: "" }, instagram: { linkUrl: "#", iconUrl: "" } },
    isChatEnabled: true,
    isComparisonEnabled: true
  };
  var useSiteData = () => {
    const { user } = useAuth();
    const [data, setData] = (0, import_react3.useState)({
      allProducts: [],
      allCategories: [],
      allStores: [],
      flashSales: [],
      allOrders: [],
      allPromoCodes: [],
      allPickupPoints: [],
      allShippingPartners: [],
      payouts: [],
      siteSettings: defaultSiteSettings,
      siteContent: [],
      allAdvertisements: [],
      allPaymentMethods: [],
      siteActivityLogs: [],
      allNotifications: [],
      allTickets: [],
      allAnnouncements: [],
      allZones: [],
      allUsers: []
    });
    const [isLoading, setIsLoading] = (0, import_react3.useState)(true);
    const [error, setError] = (0, import_react3.useState)(null);
    const [recentlyViewedIds, setRecentlyViewedIds] = usePersistentState("recentlyViewed", []);
    const [dismissedAnnouncements, setDismissedAnnouncements] = usePersistentState("dismissedAnnouncements", []);
    (0, import_react3.useEffect)(() => {
      const fetchInitialData = async () => {
        try {
          setIsLoading(true);
          const initialData = await makeApiRequest("/api/all-data");
          setData((prev) => ({ ...prev, ...initialData }));
          setError(null);
        } catch (error2) {
          console.error("Failed to fetch initial site data:", error2);
          setError("Impossible de charger les donn\xE9es du site. Le serveur backend est peut-\xEAtre inaccessible ou une erreur de base de donn\xE9es est survenue. Assurez-vous que le backend est en cours d'ex\xE9cution et connect\xE9 \xE0 la base de donn\xE9es. Erreur: " + error2.message);
        } finally {
          setIsLoading(false);
        }
      };
      fetchInitialData();
    }, []);
    const setAllUsers = (updater) => {
      setData((prev) => {
        const newAllUsers = typeof updater === "function" ? updater(prev.allUsers) : updater;
        return { ...prev, allUsers: newAllUsers };
      });
    };
    const createActivityLog = (0, import_react3.useCallback)((actingUser, action, details) => {
      if (!actingUser) return;
      const newLog = {
        id: `log-${Date.now()}`,
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        user: { id: actingUser.id, name: actingUser.name, role: actingUser.role },
        action,
        details
      };
      setData((prev) => ({
        ...prev,
        siteActivityLogs: [newLog, ...prev.siteActivityLogs]
      }));
    }, []);
    const handleConfirmOrder = (0, import_react3.useCallback)(async (orderData) => {
    }, []);
    const handleAddOrUpdateProduct = (0, import_react3.useCallback)(async (product) => {
    }, []);
    const handleApproveStore = (store) => {
      setData((prev) => ({ ...prev, allStores: prev.allStores.map((s) => s.id === store.id ? { ...s, status: "active" } : s) }));
      if (user) createActivityLog(user, "Approve Store", `Approved store: ${store.name}`);
    };
    const handleRejectStore = (store) => {
      setData((prev) => ({ ...prev, allStores: prev.allStores.map((s) => s.id === store.id ? { ...s, status: "rejected" } : s) }));
      if (user) createActivityLog(user, "Reject Store", `Rejected store: ${store.name}`);
    };
    const handleToggleStoreStatus = (storeId, currentStatus) => {
      const newStatus = currentStatus === "active" ? "suspended" : "active";
      setData((prev) => ({ ...prev, allStores: prev.allStores.map((s) => s.id === storeId ? { ...s, status: newStatus } : s) }));
      if (user) createActivityLog(user, "Toggle Store Status", `Changed store ${storeId} to ${newStatus}`);
    };
    const handleWarnStore = (storeId, reason) => {
      const newWarning = { id: `warn-${Date.now()}`, date: (/* @__PURE__ */ new Date()).toISOString(), reason };
      setData((prev) => ({ ...prev, allStores: prev.allStores.map((s) => s.id === storeId ? { ...s, warnings: [...s.warnings, newWarning] } : s) }));
      if (user) createActivityLog(user, "Warn Store", `Warned store ${storeId} for: ${reason}`);
    };
    const handleUpdateDocumentStatus = (storeId, documentName, status, reason = "") => {
      setData((prev) => ({ ...prev, allStores: prev.allStores.map((s) => s.id === storeId ? { ...s, documents: s.documents.map((d) => d.name === documentName ? { ...d, status, rejectionReason: reason } : d) } : s) }));
      if (user) createActivityLog(user, "Update Document Status", `Set document ${documentName} for store ${storeId} to ${status}`);
    };
    const handleToggleStoreCertification = (storeId) => {
      setData((prev) => ({ ...prev, allStores: prev.allStores.map((s) => s.id === storeId ? { ...s, isCertified: !s.isCertified } : s) }));
      if (user) createActivityLog(user, "Toggle Certification", `Toggled certification for store ${storeId}`);
    };
    const stubs = {
      handleDismissAnnouncement: (id) => setDismissedAnnouncements((prev) => [...prev, id]),
      handleMarkNotificationAsRead: (id) => setData((prev) => ({ ...prev, allNotifications: prev.allNotifications.map((n) => n.id === id ? { ...n, isRead: true } : n) })),
      handleSetPromotion: (productId, promoPrice, startDate, endDate) => console.log("handleSetPromotion", productId, promoPrice),
      createNotification: (notif) => console.log("createNotification", notif),
      createStoreAndNotifyAdmin: (storeData, user2, allUsers, initialProductData) => {
        console.log("createStoreAndNotifyAdmin called");
        return { id: `store-${Date.now()}`, ...storeData };
      },
      handleDeleteProduct: (productId, user2) => console.log("handleDeleteProduct", productId, user2),
      handleUpdateProductStatus: (productId, status, user2) => console.log("handleUpdateProductStatus", productId, status, user2),
      handleCancelOrder: (orderId, user2) => console.log("handleCancelOrder", orderId, user2),
      handleRequestRefund: (orderId, reason, evidenceUrls, user2) => console.log("handleRequestRefund", orderId, user2),
      handleCustomerDisputeMessage: (orderId, message, user2) => console.log("handleCustomerDisputeMessage", orderId, user2),
      handleCreateTicket: (subject, message, orderId, type, attachments, user2, allUsers) => console.log("handleCreateTicket"),
      handleUserReplyToTicket: (ticketId, message, attachments, user2, allUsers) => console.log("handleUserReplyToTicket"),
      handleSellerUpdateOrderStatus: (orderId, status, user2) => console.log("handleSellerUpdateOrderStatus", orderId, status),
      handleSellerCancelOrder: (orderId, user2) => console.log("handleSellerCancelOrder", orderId),
      handleCreateOrUpdateCollection: (storeId, collection, user2) => console.log("handleCreateOrUpdateCollection", storeId),
      handleDeleteCollection: (storeId, collectionId, user2) => console.log("handleDeleteCollection", storeId, collectionId),
      handleUpdateStoreProfile: (storeId, data2, user2) => console.log("handleUpdateStoreProfile", storeId),
      handleAddProductToStory: (productId, user2) => console.log("handleAddProductToStory", productId),
      handleAddStory: (imageUrl, user2) => console.log("handleAddStory", imageUrl)
    };
    return {
      ...data,
      isLoading,
      error,
      recentlyViewedIds,
      setRecentlyViewedIds,
      dismissedAnnouncements,
      handleConfirmOrder,
      handleAddOrUpdateProduct,
      setAllUsers,
      onApproveStore: handleApproveStore,
      onRejectStore: handleRejectStore,
      onToggleStoreStatus: handleToggleStoreStatus,
      onWarnStore: handleWarnStore,
      onUpdateDocumentStatus: handleUpdateDocumentStatus,
      onToggleStoreCertification: handleToggleStoreCertification,
      handleDismissAnnouncement: stubs.handleDismissAnnouncement,
      handleMarkNotificationAsRead: stubs.handleMarkNotificationAsRead,
      handleSetPromotion: stubs.handleSetPromotion,
      createNotification: stubs.createNotification,
      createStoreAndNotifyAdmin: stubs.createStoreAndNotifyAdmin,
      handleDeleteProduct: stubs.handleDeleteProduct,
      handleUpdateProductStatus: stubs.handleUpdateProductStatus,
      handleCancelOrder: stubs.handleCancelOrder,
      handleRequestRefund: stubs.handleRequestRefund,
      handleCustomerDisputeMessage: stubs.handleCustomerDisputeMessage,
      handleCreateTicket: stubs.handleCreateTicket,
      handleUserReplyToTicket: stubs.handleUserReplyToTicket,
      handleSellerUpdateOrderStatus: stubs.handleSellerUpdateOrderStatus,
      handleSellerCancelOrder: stubs.handleSellerCancelOrder,
      handleCreateOrUpdateCollection: stubs.handleCreateOrUpdateCollection,
      handleDeleteCollection: stubs.handleDeleteCollection,
      handleUpdateStoreProfile: stubs.handleUpdateStoreProfile,
      handleAddProductToStory: stubs.handleAddProductToStory,
      handleAddStory: stubs.handleAddStory
    };
  };

  // hooks/useAppNavigation.ts
  var import_react4 = __toESM(require_react(), 1);
  var useAppNavigation = (allCategories, allStores, allOrders, allSiteContent) => {
    const [page, setPage] = (0, import_react4.useState)("home");
    const [selectedProduct, setSelectedProduct] = (0, import_react4.useState)(null);
    const [selectedCategoryId, setSelectedCategoryId] = (0, import_react4.useState)(null);
    const [selectedStore, setSelectedStore] = (0, import_react4.useState)(null);
    const [selectedOrder, setSelectedOrder] = (0, import_react4.useState)(null);
    const [searchQuery, setSearchQuery] = (0, import_react4.useState)("");
    const [infoPageContent, setInfoPageContent] = (0, import_react4.useState)(null);
    const [viewingStoriesFor, setViewingStoriesFor] = (0, import_react4.useState)(null);
    const [accountPageTab, setAccountPageTab] = (0, import_react4.useState)("dashboard");
    const [sellerDashboardTab, setSellerDashboardTab] = (0, import_react4.useState)("overview");
    const [productToEdit, setProductToEdit] = (0, import_react4.useState)(null);
    (0, import_react4.useEffect)(() => {
      window.scrollTo(0, 0);
    }, [page]);
    const navigateToHome = (0, import_react4.useCallback)(() => setPage("home"), []);
    const navigateToCart = (0, import_react4.useCallback)(() => setPage("cart"), []);
    const navigateToCheckout = (0, import_react4.useCallback)(() => setPage("checkout"), []);
    const navigateToStores = (0, import_react4.useCallback)(() => setPage("stores"), []);
    const navigateToStoresMap = (0, import_react4.useCallback)(() => setPage("stores-map"), []);
    const navigateToBecomeSeller = (0, import_react4.useCallback)(() => setPage("become-seller"), []);
    const navigateToBecomeServiceProvider = (0, import_react4.useCallback)(() => setPage("become-service-provider"), []);
    const navigateToSellerDashboard = (0, import_react4.useCallback)((tab = "overview") => {
      setSellerDashboardTab(tab);
      setPage("seller-dashboard");
    }, []);
    const navigateToSellerProfile = (0, import_react4.useCallback)(() => setPage("seller-profile"), []);
    const navigateToSuperAdminDashboard = (0, import_react4.useCallback)(() => setPage("superadmin-dashboard"), []);
    const navigateToOrderHistory = (0, import_react4.useCallback)(() => setPage("order-history"), []);
    const navigateToPromotions = (0, import_react4.useCallback)(() => setPage("promotions"), []);
    const navigateToFlashSales = (0, import_react4.useCallback)(() => setPage("flash-sales"), []);
    const navigateToWishlist = (0, import_react4.useCallback)(() => setPage("wishlist"), []);
    const navigateToDeliveryAgentDashboard = (0, import_react4.useCallback)(() => setPage("delivery-agent-dashboard"), []);
    const navigateToDepotAgentDashboard = (0, import_react4.useCallback)(() => setPage("depot-agent-dashboard"), []);
    const navigateToComparison = (0, import_react4.useCallback)(() => setPage("comparison"), []);
    const navigateToBecomePremium = (0, import_react4.useCallback)(() => setPage("become-premium"), []);
    const navigateToVisualSearch = (0, import_react4.useCallback)(() => setPage("visual-search"), []);
    const navigateToServices = (0, import_react4.useCallback)(() => setPage("services"), []);
    const navigateToProductForm = (0, import_react4.useCallback)((product) => {
      setProductToEdit(product);
      setPage("product-form");
    }, []);
    const navigateToProduct = (0, import_react4.useCallback)((product) => {
      setSelectedProduct(product);
      setPage("product");
    }, []);
    const navigateToCategory = (0, import_react4.useCallback)((categoryId) => {
      const category = allCategories.find((c) => c.id === categoryId);
      if (category) {
        setSelectedCategoryId(categoryId);
        setPage("category");
      }
    }, [allCategories]);
    const navigateToVendorPage = (0, import_react4.useCallback)((vendorName) => {
      const store = allStores.find((s) => s.name === vendorName);
      if (store) {
        setSelectedStore(store);
        setPage("vendor-page");
      }
    }, [allStores]);
    const navigateToOrderDetail = (0, import_react4.useCallback)((order) => {
      setSelectedOrder(order);
      setPage("order-detail");
    }, []);
    const navigateToAccount = (0, import_react4.useCallback)((tab = "dashboard") => {
      setAccountPageTab(tab);
      setPage("account");
    }, []);
    const handleSearch = (0, import_react4.useCallback)((query) => {
      setSearchQuery(query);
      setPage("search-results");
    }, []);
    const navigateToInfoPage = (0, import_react4.useCallback)((slug) => {
      if (slug === "sell") {
        navigateToBecomeSeller();
        return;
      }
      const content = allSiteContent.find((c) => c.slug === slug);
      if (content) {
        setInfoPageContent(content);
      } else {
        console.warn(`Info page content for slug '${slug}' not found.`);
        setInfoPageContent({
          title: "Page en construction",
          content: "<h2>Contenu bient\xF4t disponible</h2><p>Cette page est actuellement en cours de construction. Revenez bient\xF4t !</p>"
        });
      }
      setPage("info");
    }, [allSiteContent, navigateToBecomeSeller]);
    const handleNavigateFromNotification = (0, import_react4.useCallback)((link) => {
      if (!link) return;
      const { page: targetPage, params } = link;
      switch (targetPage) {
        case "order-detail":
          const order = allOrders.find((o) => o.id === params?.orderId);
          if (order) navigateToOrderDetail(order);
          break;
        case "seller-dashboard":
          navigateToSellerDashboard(params?.tab || "overview");
          break;
        default:
          setPage(targetPage);
      }
    }, [allOrders, navigateToOrderDetail, navigateToSellerDashboard]);
    const handleCloseStories = (0, import_react4.useCallback)(() => setViewingStoriesFor(null), []);
    return (0, import_react4.useMemo)(() => ({
      page,
      setPage,
      selectedProduct,
      selectedCategoryId,
      selectedStore,
      selectedOrder,
      setSelectedOrder,
      searchQuery,
      infoPageContent,
      viewingStoriesFor,
      setViewingStoriesFor,
      accountPageTab,
      sellerDashboardTab,
      productToEdit,
      navigateToHome,
      navigateToCart,
      navigateToCheckout,
      navigateToStores,
      navigateToStoresMap,
      navigateToBecomeSeller,
      navigateToBecomeServiceProvider,
      navigateToSellerDashboard,
      navigateToSellerProfile,
      navigateToSuperAdminDashboard,
      navigateToOrderHistory,
      navigateToPromotions,
      navigateToFlashSales,
      navigateToWishlist,
      navigateToDeliveryAgentDashboard,
      navigateToDepotAgentDashboard,
      navigateToComparison,
      navigateToBecomePremium,
      navigateToProduct,
      navigateToCategory,
      navigateToVendorPage,
      navigateToOrderDetail,
      navigateToAccount,
      handleSearch,
      navigateToInfoPage,
      handleNavigateFromNotification,
      handleCloseStories,
      navigateToVisualSearch,
      navigateToProductForm,
      navigateToServices
    }), [
      page,
      selectedProduct,
      selectedCategoryId,
      selectedStore,
      selectedOrder,
      searchQuery,
      infoPageContent,
      viewingStoriesFor,
      accountPageTab,
      sellerDashboardTab,
      productToEdit,
      navigateToHome,
      navigateToCart,
      navigateToCheckout,
      navigateToStores,
      navigateToStoresMap,
      navigateToBecomeSeller,
      navigateToBecomeServiceProvider,
      navigateToSellerDashboard,
      navigateToSellerProfile,
      navigateToSuperAdminDashboard,
      navigateToOrderHistory,
      navigateToPromotions,
      navigateToFlashSales,
      navigateToWishlist,
      navigateToDeliveryAgentDashboard,
      navigateToDepotAgentDashboard,
      navigateToComparison,
      navigateToBecomePremium,
      navigateToProduct,
      navigateToCategory,
      navigateToVendorPage,
      navigateToOrderDetail,
      navigateToAccount,
      handleSearch,
      navigateToInfoPage,
      handleNavigateFromNotification,
      handleCloseStories,
      navigateToVisualSearch,
      setSelectedOrder,
      setViewingStoriesFor,
      navigateToProductForm,
      navigateToServices
    ]);
  };

  // contexts/UIContext.tsx
  var import_react5 = __toESM(require_react(), 1);
  var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
  var UIContext = (0, import_react5.createContext)(null);
  var UIProvider = ({ children }) => {
    const [isModalOpen, setIsModalOpen] = (0, import_react5.useState)(false);
    const [modalProduct, setModalProduct] = (0, import_react5.useState)(null);
    const openModal = (0, import_react5.useCallback)((product) => {
      setModalProduct(product);
      setIsModalOpen(true);
    }, []);
    const closeModal = (0, import_react5.useCallback)(() => {
      setIsModalOpen(false);
      setModalProduct(null);
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(UIContext.Provider, { value: { isModalOpen, modalProduct, openModal, closeModal }, children });
  };
  var useUI = () => {
    const context = (0, import_react5.useContext)(UIContext);
    if (!context) throw new Error("useUI must be used within a UIProvider");
    return context;
  };

  // contexts/LanguageContext.tsx
  var import_react6 = __toESM(require_react(), 1);

  // translations.ts
  var translations = {
    fr: {
      app: {
        passwordResetEmailSent: "Si un compte existe pour {0}, vous y trouverez un lien pour r\xE9initialiser votre mot de passe.",
        getAndroidApp: "Obtenez l'exp\xE9rience compl\xE8te avec notre application Android !",
        download: "T\xE9l\xE9charger"
      },
      common: {
        backToHome: "Retour \xE0 l'accueil",
        save: "Sauvegarder",
        cancel: "Annuler",
        actions: "Actions",
        status: "Statut",
        price: "Prix",
        stock: "Stock",
        product: "Produit",
        date: "Date",
        total: "Total",
        customer: "Client",
        orderId: "ID Commande",
        edit: "Modifier",
        delete: "Supprimer",
        warn: "Avertir",
        approve: "Approuver",
        reject: "Rejeter",
        all: "Tout",
        days7: "7 jours",
        days30: "30 jours",
        days90: "90 jours",
        back: "Retour"
      },
      supportProblemTypes: {
        select: "-- Choisissez le type de probl\xE8me --",
        order_issue: "Probl\xE8me avec une commande",
        product_question: "Question sur un produit",
        delivery_issue: "Probl\xE8me de livraison",
        return_request: "Demande de retour/remboursement",
        payment_issue: "Probl\xE8me de paiement",
        technical_issue: "Probl\xE8me technique sur le site",
        report_seller: "Signaler un vendeur/produit",
        other: "Autre..."
      },
      orderStatus: {
        confirmed: "Confirm\xE9e",
        "ready-for-pickup": "Pr\xEAt pour enl\xE8vement",
        "picked-up": "Pris en charge",
        "at-depot": "Au d\xE9p\xF4t",
        "out-for-delivery": "En livraison",
        delivered: "Livr\xE9",
        cancelled: "Annul\xE9",
        "refund-requested": "Demande de retour",
        refunded: "Rembours\xE9",
        "return-approved": "Retour approuv\xE9",
        "return-received": "Retour re\xE7u",
        "return-rejected": "Retour refus\xE9",
        "depot-issue": "Probl\xE8me au d\xE9p\xF4t",
        "delivery-failed": "\xC9chec de livraison"
      },
      orderHistory: {
        title: "Mes Commandes",
        noOrders: "Vous n'avez pas encore pass\xE9 de commande.",
        noOrdersDescription: "Tous vos achats appara\xEEtront ici.",
        viewDetails: "Voir d\xE9tails",
        reorder: "Commander \xE0 nouveau",
        startShopping: "Commencer mes achats"
      },
      loyaltyStatus: {
        standard: "Standard",
        premium: "Premium",
        premium_plus: "Premium+"
      },
      header: {
        searchPlaceholder: "Rechercher un produit...",
        login: "Connexion",
        myAccount: "Mon Compte",
        myOrders: "Mes Commandes",
        wishlist: "Favoris",
        messages: "Messages",
        cart: "Panier",
        categories: "Cat\xE9gories",
        promotions: "Promotions",
        flashSales: "Ventes Flash",
        stores: "Boutiques",
        services: "Services",
        becomeSeller: "Devenir vendeur",
        becomePremium: "Devenir Premium",
        notifications: "Notifications",
        superadminDashboard: "Dashboard Superadmin",
        sellerDashboard: "Dashboard Vendeur",
        sellerProfile: "Profil Boutique",
        deliveryDashboard: "Dashboard Livreur",
        depotDashboard: "Dashboard D\xE9p\xF4t",
        logout: "Se d\xE9connecter",
        noNotifications: "Aucune notification.",
        visualSearch: "Recherche par image",
        followedStores: "Boutiques Suivies",
        support: "Support",
        backToHome: "Retour \xE0 l'accueil"
      },
      footer: {
        aboutUs: "\xC0 propos de nous",
        contact: "Contact",
        faq: "FAQ",
        careers: "Carri\xE8res",
        terms: "Conditions d'utilisation",
        privacy: "Politique de confidentialit\xE9",
        forSellers: "Pour les Vendeurs",
        sellOnKmerZone: "Vendre sur KMER ZONE",
        trainingCenter: "Centre de formation",
        logistics: "Logistique & Livraison",
        followUs: "Suivez-nous",
        paymentMethods: "Moyens de Paiement",
        copyright: "\xA9 {0} {1}. Tous droits r\xE9serv\xE9s.",
        quickLinks: "Liens Rapides",
        aboutKmerZone: "Le meilleur du Cameroun, \xE0 port\xE9e de main. Notre mission est de connecter les commer\xE7ants locaux aux consommateurs."
      },
      home: {
        heroTitle: "Le meilleur du Cameroun, livr\xE9 chez vous.",
        heroSubtitle: "La plus grande s\xE9lection de produits locaux et internationaux, \xE0 port\xE9e de clic.",
        startShopping: "Commencer mes achats",
        storiesTitle: "Stories des Boutiques",
        recommendedForYou: "Recommand\xE9 pour Vous",
        promotionsTitle: "Promotions du moment",
        categoriesTitle: "Parcourir par cat\xE9gorie",
        popularProducts: "Nos produits populaires",
        madeInCameroonTitle: 'Fiert\xE9 Locale: Soutenez le "Made in Cameroon"',
        madeInCameroonSubtitle: "D\xE9couvrez des produits authentiques, fabriqu\xE9s avec passion par nos artisans et producteurs locaux. Chaque achat est un soutien \xE0 notre \xE9conomie.",
        recentlyViewed: "Consult\xE9s R\xE9cemment",
        howItWorksTitle: "Simple, Rapide et Fiable",
        howItWorksStep1Title: "1. Commandez",
        howItWorksStep1Text: "Choisissez parmi des milliers de produits et ajoutez-les \xE0 votre panier.",
        howItWorksStep2Title: "2. Payez en s\xE9curit\xE9",
        howItWorksStep2Text: "Utilisez Orange Money ou MTN Mobile Money pour un paiement 100% s\xE9curis\xE9.",
        howItWorksStep3Title: "3. Suivez votre livraison",
        howItWorksStep3Text: "Suivez votre livreur en temps r\xE9el jusqu'\xE0 votre porte.",
        howItWorksStep4Title: "4. Donnez votre avis",
        howItWorksStep4Text: "Notez les produits et les vendeurs pour aider la communaut\xE9.",
        featuredStores: "Nos boutiques partenaires"
      },
      servicesPage: {
        title: "Nos Services",
        noServices: "Aucun service disponible pour le moment.",
        noServicesDescription: "Revenez bient\xF4t pour d\xE9couvrir nos offres de services !"
      },
      categories: {
        clothingShoes: "V\xEAtements et chaussures",
        accessoriesJewelry: "Accessoires & bijoux",
        beauty: "Beaut\xE9",
        furniture: "Mobilier (Meubles)",
        electronics: "\xC9lectronique",
        homeTextiles: "Textile maison",
        officeSupplies: "Fournitures de bureau",
        petProducts: "Produits pour animaux",
        hobbiesCreativity: "Loisirs & Cr\xE9ativit\xE9",
        homeGarden: "Maison & Jardin",
        consumerElectronics: "\xC9lectronique grand public",
        kidsSchool: "Produits pour enfants et scolaires",
        clothing: "V\xEAtements",
        shoes: "Chaussures",
        bags: "Sacs",
        watches: "Montres",
        glasses: "Lunettes",
        jewelry: "Bijoux",
        hairAccessories: "Accessoires cheveux",
        cosmetics: "Cosm\xE9tiques",
        perfumes: "Parfums",
        chairs: "Chaises",
        otherFurniture: "Autres meubles",
        chargersCablesBatteries: "Chargeurs, c\xE2bles, batteries",
        curtains: "Rideaux",
        otherHomeTextiles: "Autres textiles domestiques",
        stationery: "Papeterie",
        officeGoods: "Office goods",
        petAccessories: "Accessoires pour animaux",
        hobbiesCraftsGames: "Hobbies, artisanat, jeux",
        homeDecorLighting: "D\xE9coration int\xE9rieure, luminaire, objets festifs",
        phonesHeadphonesAppliances: "T\xE9l\xE9phones, casques, \xE9lectrom\xE9nagers",
        toysSchoolSupplies: "Jouets, fournitures scolaires",
        services: "Services",
        serv_education: "\xC9ducation",
        serv_diy: "Bricoleur",
        serv_beauty_health: "Beaut\xE9 et sant\xE9",
        serv_transport: "Transport",
        serv_repair_construction: "R\xE9paration et construction",
        serv_it: "Services informatiques",
        serv_business: "Services aux entreprises",
        serv_cleaning: "Nettoyage",
        serv_auto: "Services automobiles",
        serv_equipment_repair: "R\xE9paration d'\xE9quipement"
      },
      categoryPage: {
        titlePrefix: "Cat\xE9gorie : "
      },
      productForm: {
        selectSubcategory: "-- S\xE9lectionner une sous-cat\xE9gorie --"
      },
      accountPage: {
        dashboard: "Tableau de bord",
        profile: "Mon Profil",
        addresses: "Mes Adresses",
        orders: "Mes Commandes",
        followedStores: "Boutiques Suivies",
        support: "Support Client",
        notifications: "Notifications",
        security: "S\xE9curit\xE9",
        welcome: "Bienvenue, {0} !",
        loyaltyStatus: "Statut de Fid\xE9lit\xE9",
        loyaltyMember: "Vous \xEAtes un membre {0}.",
        totalOrders: "Total commandes",
        lastOrder: "Derni\xE8re commande",
        noRecentOrder: "Aucune commande r\xE9cente.",
        viewDetails: "Voir les d\xE9tails",
        followedStoresTitle: "Boutiques Suivies",
        noFollowedStores: "Vous ne suivez aucune boutique.",
        manageStores: "G\xE9rer mes boutiques",
        editProfile: "Modifier le profil",
        fullName: "Nom complet",
        phone: "T\xE9l\xE9phone principal",
        birthDate: "Date de naissance",
        gender: "Genre",
        preferNotToSay: "Pr\xE9f\xE8re ne pas r\xE9pondre",
        male: "Homme",
        female: "Femme",
        other: "Autre",
        addNewAddress: "Ajouter une nouvelle adresse",
        default: "D\xE9finir par d\xE9faut",
        addressLabelPlaceholder: "\xC9tiquette (Maison, Bureau...)",
        addressPlaceholder: "Adresse (Rue, quartier, rep\xE8re...)",
        createTicket: "Cr\xE9er un nouveau ticket",
        lastUpdate: "Derni\xE8re mise \xE0 jour",
        ticketSubject: "Sujet",
        linkToOrder: "(Optionnel) Lier \xE0 une commande",
        describeProblem: "D\xE9crivez votre probl\xE8me...",
        attachFiles: "Joindre des fichiers",
        send: "Envoyer",
        backToList: "< Retour \xE0 la liste",
        yourReply: "Votre r\xE9ponse...",
        attachment: "Pi\xE8ce jointe",
        orderUpdates: "Mises \xE0 jour de mes commandes",
        promotions: "Promotions et ventes flash",
        newsletters: "Newsletters de KMER ZONE",
        savePreferences: "Enregistrer les pr\xE9f\xE9rences",
        preferencesSaved: "Pr\xE9f\xE9rences sauvegard\xE9es !",
        changePassword: "Changer mon mot de passe",
        oldPassword: "Ancien mot de passe",
        newPassword: "Nouveau mot de passe",
        confirmNewPassword: "Confirmer le nouveau mot de passe",
        update: "Mettre \xE0 jour",
        passwordMismatch: "Les nouveaux mots de passe ne correspondent pas.",
        passwordIncorrect: "L'ancien mot de passe est incorrect.",
        passwordSuccess: "Mot de passe mis \xE0 jour avec succ\xE8s !",
        loginRequired: "Veuillez vous connecter pour voir cette page.",
        ticketSentSuccessTitle: "Succ\xE8s !",
        ticketSentSuccessMessage: "Votre ticket a \xE9t\xE9 envoy\xE9."
      },
      sitemap: {
        categories: "Cat\xE9gories",
        stores: "Boutiques",
        pages: "Pages",
        products: "Produits"
      },
      becomeSeller: {
        title: "Devenez Vendeur sur KMER ZONE",
        subtitle: "Rejoignez notre communaut\xE9 de commer\xE7ants et d\xE9veloppez votre activit\xE9 en ligne.",
        step1Title: "1. Informations sur votre boutique",
        shopNameLabel: "Nom de la boutique*",
        shopLogoLabel: "Logo de la boutique*",
        upload: "T\xE9l\xE9verser",
        step2Title: "2. Vos informations de contact",
        firstNameLabel: "Pr\xE9nom*",
        lastNameLabel: "Nom*",
        phoneLabel: "T\xE9l\xE9phone*",
        step3Title: "3. Adresse de la boutique",
        cityLabel: "Ville*",
        neighborhoodLabel: "Quartier",
        addressLabel: "Adresse physique compl\xE8te (avec rep\xE8re)*",
        gpsLabel: "Localisation GPS",
        gpsDescription: "Cliquez sur la carte pour placer un marqueur \xE0 l'emplacement exact de votre boutique.",
        findMyPosition: "Trouver ma position",
        requiredDocsTitle: "Documents Requis",
        requiredDocsDescription: "Apr\xE8s avoir soumis votre candidature, vous devrez t\xE9l\xE9verser les documents suivants depuis votre tableau de bord vendeur :",
        submitCandidacy: "Soumettre ma candidature",
        errors: {
          shopName: "Le nom de la boutique est requis.",
          firstName: "Le pr\xE9nom est requis.",
          lastName: "Le nom de famille est requis.",
          phone: "Le num\xE9ro de t\xE9l\xE9phone est requis.",
          address: "L'adresse physique est requise.",
          logo: "Un logo est requis."
        }
      },
      becomeServiceProvider: {
        title: "Devenez Prestataire de Services",
        subtitle: "Proposez vos comp\xE9tences et services \xE0 notre large audience de clients.",
        step1Title: "1. Informations sur votre activit\xE9",
        serviceCategory: "Cat\xE9gorie de service principale*",
        serviceDescription: "Description de vos services*",
        serviceDescriptionPlaceholder: "D\xE9crivez en d\xE9tail ce que vous proposez, votre exp\xE9rience, et ce qui vous rend unique.",
        step2Title: "2. Vos informations de contact",
        step3Title: "3. Zone d'intervention",
        serviceArea: "O\xF9 proposez-vous vos services ?*",
        serviceAreaPlaceholder: "Ex: Douala uniquement, \xE0 distance (en ligne), tout le Cameroun...",
        submit: "Soumettre ma candidature de prestataire"
      },
      sellerSubscription: {
        title: "F\xE9licitations et bienvenue !",
        subtitle: "Votre boutique est presque pr\xEAte. Choisissez le plan qui correspond le mieux \xE0 vos ambitions pour finaliser votre inscription.",
        standardTitle: "Vendeur Standard",
        standardDescription: "Id\xE9al pour les artisans et les petites boutiques qui d\xE9butent.",
        premiumTitle: "Vendeur Premium",
        premiumDescription: "Pour les boutiques \xE9tablies souhaitant acc\xE9l\xE9rer leur croissance.",
        superPremiumTitle: "Super Premium (Entreprise)",
        superPremiumDescription: "Con\xE7u pour les grandes entreprises et les marques reconnues.",
        standardFeatures: "Visibilit\xE9 standard|Gestion de base du catalogue ({0} produits)|Commission de {1}%|Support par email",
        premiumFeatures: "Tous les avantages Standard|Mise en avant dans les cat\xE9gories|{0} produits|Commission r\xE9duite \xE0 {1}%|Support prioritaire|Analyses avanc\xE9es",
        superPremiumFeatures: "Tous les avantages Premium|Visibilit\xE9 maximale sur l'accueil|{0} produits|Commission r\xE9duite \xE0 {1}%|Assistance d\xE9di\xE9e|Service photo inclus",
        selectPlan: "Choisir ce plan"
      },
      sellerDashboard: {
        tabs: {
          overview: "Aper\xE7u",
          products: "Produits",
          collections: "Collections",
          orders: "Commandes",
          reviews: "Avis Clients",
          promotions: "Promotions",
          flashSales: "Ventes Flash",
          analytics: "Statistiques",
          payouts: "Paiements",
          delivery: "Livraison",
          profile: "Profil Boutique",
          subscription: "Abonnement",
          documents: "Documents",
          stories: "Stories",
          chat: "Messages",
          support: "Support"
        },
        premiumFeatureTooltip: "Passez au statut Premium pour d\xE9bloquer cette fonctionnalit\xE9",
        overview: {
          title: "Aper\xE7u de la boutique : {0}",
          totalRevenue: "Revenu total (livr\xE9)",
          pendingOrders: "Commandes en attente",
          status: "Statut",
          warnings: "Avertissements R\xE9cents",
          notifications: "Notifications",
          noNotifications: "Aucune nouvelle notification."
        },
        products: {
          title: "Mes Produits ({0})",
          addProduct: "Ajouter un produit",
          addService: "Ajouter un service",
          table: {
            product: "Produit",
            price: "Prix",
            stock: "Stock",
            status: "Statut",
            actions: "Actions"
          },
          statusOptions: {
            published: "Publi\xE9",
            draft: "Brouillon",
            archived: "Archiv\xE9"
          },
          actions: {
            promote: "Mettre en promotion",
            edit: "Modifier",
            delete: "Supprimer"
          },
          noProducts: `Vous n'avez aucun produit. Cliquez sur "Ajouter un produit" pour commencer.`
        },
        collections: {
          title: "Mes Collections",
          create: "Cr\xE9er une collection",
          edit: "Modifier",
          createTitle: "Cr\xE9er une collection",
          editTitle: "Modifier une collection",
          name: "Nom de la collection",
          description: "Description (optionnel)",
          selectProducts: "S\xE9lectionner les produits",
          noCollections: "Vous n'avez aucune collection. Cr\xE9ez-en une pour regrouper vos produits !"
        },
        orders: {
          title: "Mes Commandes ({0})",
          table: {
            orderId: "ID Commande",
            customer: "Client",
            total: "Total",
            status: "Statut",
            action: "Action"
          },
          details: "D\xE9tails",
          printSlip: "Imprimer le bon de livraison",
          customerInfo: "Informations Client",
          items: "Articles",
          cancelOrder: "Annuler la commande",
          cancelConfirm: "\xCAtes-vous s\xFBr de vouloir annuler cette commande ? Cette action est irr\xE9versible.",
          disputeNotice: "Cette commande fait l'objet d'un litige. Un administrateur examine la situation.",
          markReady: "Marquer comme pr\xEAt",
          noOrders: "Aucune commande dans cette cat\xE9gorie.",
          tabs: {
            pending: "En attente",
            ready: "Pr\xEAtes",
            shipped: "Exp\xE9di\xE9es",
            completed: "Termin\xE9es",
            all: "Toutes"
          }
        },
        reviews: {
          title: "Avis des Clients",
          rating: "{0}/5 par {1}",
          yourReply: "Votre r\xE9ponse :",
          reply: "R\xE9pondre",
          send: "Envoyer"
        },
        promotions: {
          title: "Codes Promo",
          createForm: {
            code: "CODEPROMO",
            value: "Valeur (10 ou 1000)",
            type_percentage: "%",
            type_fixed: "FCFA",
            create: "Cr\xE9er le code"
          }
        },
        flashSales: {
          title: "Ventes Flash",
          endsOn: "Se termine le: {0}",
          submitProduct: "Soumettre un produit",
          chooseProduct: "Choisir un produit",
          flashPrice: "Prix Flash",
          submit: "Soumettre"
        },
        payouts: {
          title: "Historique des Paiements",
          table: {
            date: "Date",
            amount: "Montant"
          }
        },
        documents: {
          title: "Mes Documents",
          replace: "Remplacer",
          upload: "T\xE9l\xE9verser",
          rejectionReason: "Motif du rejet: {0}"
        },
        support: {
          title: "Support Vendeur",
          subject: "Sujet de votre demande",
          describe: "D\xE9crivez votre probl\xE8me...",
          linkOrder: "Lier \xE0 une commande (optionnel)",
          sendTicket: "Envoyer le ticket"
        },
        shipping: {
          title: "Param\xE8tres de Livraison",
          partnersTitle: "Transporteurs Partenaires",
          partnersDescription: "S\xE9lectionnez les transporteurs que vous souhaitez proposer \xE0 vos clients.",
          premium: "Premium",
          customRatesTitle: "Tarifs d'exp\xE9dition personnalis\xE9s",
          customRatesDescription: "Laissez vide pour utiliser les tarifs par d\xE9faut de la plateforme.",
          localRate: "Livraison locale (m\xEAme ville) (FCFA)",
          nationalRate: "Livraison nationale (autre ville) (FCFA)",
          freeShippingTitle: "Livraison gratuite",
          freeShippingDescription: "Offrez la livraison gratuite pour les commandes de votre boutique d\xE9passant un certain montant.",
          freeShippingThreshold: "Seuil de livraison gratuite (FCFA)",
          saveChanges: "Enregistrer les modifications",
          saved: "Enregistr\xE9 !"
        },
        subscription: {
          title: "G\xE9rez votre abonnement",
          subtitle: "Passez \xE0 un plan sup\xE9rieur pour d\xE9bloquer de nouvelles fonctionnalit\xE9s et booster vos ventes.",
          currentPlan: "Votre plan actuel",
          upgrade: "Mettre \xE0 niveau",
          lowerPlan: "Plan inf\xE9rieur"
        },
        upgrade: {
          title: 'D\xE9bloquez la fonctionnalit\xE9 "{0}"',
          description: "Passez au statut Premium pour acc\xE9der \xE0 des outils avanc\xE9s et booster votre visibilit\xE9.",
          button: "Je veux devenir Premium"
        },
        analytics: {
          backToDashboard: "Retour au tableau de bord",
          title: "Analyse des Ventes",
          period: "P\xE9riode :",
          totalRevenue: "Revenu Total (Livr\xE9)",
          vsPrevious: "- vs p\xE9riode pr\xE9c\xE9dente",
          deliveredOrders: "Commandes Livr\xE9es",
          itemsSold: "Articles Vendus",
          averageBasket: "Panier Moyen",
          salesEvolution: "\xC9volution des Ventes",
          top5Products: "Top 5 Produits (par revenu)",
          sold: "vendus",
          noSalesData: "Aucune donn\xE9e de vente pour cette p\xE9riode.",
          lowStockAlerts: "Alertes Stock Faible (< 5)",
          remaining: "restant(s)",
          noLowStock: "Aucun produit en stock faible."
        },
        profile: {
          change: "Changer"
        }
      },
      deliveryDashboard: {
        title: "Tableau de bord Livreur",
        agent: "Agent",
        logout: "D\xE9connexion",
        status: "Statut",
        available: "Disponible",
        unavailable: "Indisponible",
        setUnavailable: "Passer indisponible",
        setAvailable: "Passer disponible",
        activeMissions: "Missions Actives",
        scanPackage: "Scanner un Colis",
        currentMissions: "Missions en cours",
        history: "Historique",
        showMap: "Voir la carte",
        hideMap: "Cacher la carte",
        pickedUpFromSeller: "R\xE9cup\xE9r\xE9 chez le vendeur",
        delivered: "Livr\xE9",
        deliveryFailed: "\xC9chec livraison",
        scannerError: "Impossible d'activer la cam\xE9ra. Veuillez v\xE9rifier les permissions.",
        noCamera: "Aucune cam\xE9ra trouv\xE9e",
        confirmDelivery: "Confirmer la livraison",
        order: "Commande",
        recipientName: "Nom du r\xE9ceptionnaire *",
        confirm: "Confirmer",
        reportFailure: "Signaler un \xE9chec de livraison",
        reason: "Motif *",
        clientAbsent: "Client absent",
        wrongAddress: "Adresse erron\xE9e",
        packageRefused: "Colis refus\xE9",
        details: "D\xE9tails suppl\xE9mentaires *",
        confirmFailure: "Confirmer l'\xE9chec"
      },
      depotDashboard: {
        title: "Tableau de bord - D\xE9p\xF4t (Zone {0})",
        manager: "Chef de D\xE9p\xF4t",
        logout: "D\xE9connexion",
        overview: "Aper\xE7u",
        parcels: "Suivi Colis",
        inventory: "Inventaire",
        drivers: "Livreurs",
        agents: "Agents",
        sellers: "Vendeurs",
        reports: "Rapports",
        parcelsToAssign: "Colis \xE0 affecter",
        parcelsInDelivery: "Colis en livraison",
        availableAgents: "Livreurs disponibles",
        toAssign: "\xC0 Affecter ({0})",
        inDelivery: "En Livraison ({0})",
        issues: "Probl\xE8mes ({0})",
        client: "Client",
        assign: "Affecter",
        table: {
          orderId: "ID Commande",
          customer: "Client",
          location: "Emplacement",
          numItems: "# Articles",
          agent: "Livreur",
          seller: "Vendeur",
          parcels: "Colis",
          availability: "Disponibilit\xE9",
          performance: "Performance"
        },
        noParcelsInStock: "Aucun colis en stock pour le moment.",
        manageAgents: "Gestion des Agents de la Zone {0}",
        successRate: "Taux de r\xE9ussite",
        deliveriesSucceeded: "{0} / {1} livraisons r\xE9ussies",
        sellersWithParcels: "Vendeurs avec Colis au D\xE9p\xF4t",
        reportsWIP: "Section des rapports en cours de construction.",
        assignDriver: "Affecter un livreur",
        chooseAvailableDriver: "-- Choisir un livreur disponible --",
        scanAndCheckIn: "Scanner & Enregistrer un Colis",
        checkInParcel: "Enregistrer un Colis",
        storageLocation: "Emplacement de stockage (Ex: A3-S2)",
        checkIn: "Enregistrer",
        inventoryPanel: {
          totalSlots: "Emplacements Totals",
          occupiedSlots: "Emplacements Occup\xE9s",
          freeSlots: "Emplacements Libres",
          currentInventory: "Inventaire Actuel des Colis",
          freeLocations: "Emplacements Libres",
          noLayout: "La configuration de l'entrep\xF4t n'est pas d\xE9finie.",
          searchPlaceholder: "Rechercher par ID, client ou emplacement...",
          recentMovements: "Mouvements R\xE9cents de l'Inventaire",
          table: {
            action: "Action",
            details: "D\xE9tails",
            timestamp: "Horodatage",
            entry: "Entr\xE9e",
            exit: "Sortie"
          }
        },
        noData: "Aucune donn\xE9e \xE0 afficher.",
        schedule: "Planning de travail",
        saveSchedule: "Enregistrer le planning",
        scheduleSaved: "Planning enregistr\xE9 !",
        weekdays: {
          monday: "Lundi",
          tuesday: "Mardi",
          wednesday: "Mercredi",
          thursday: "Jeudi",
          friday: "Vendredi",
          saturday: "Samedi",
          sunday: "Dimanche"
        },
        shifts: {
          morning: "Matin",
          afternoon: "Apr\xE8s-midi",
          night: "Nuit",
          off: "Repos"
        },
        reportsPanel: {
          title: "Rapports de Performance du D\xE9p\xF4t",
          selectPeriod: "S\xE9lectionner une p\xE9riode :",
          parcelsCheckedIn: "Colis Enregistr\xE9s (Entr\xE9es)",
          parcelsShippedOut: "Colis Exp\xE9di\xE9s (Sorties)",
          avgProcessingTime: "Temps de Traitement Moyen",
          deliverySuccessRate: "Taux de Succ\xE8s des Livraisons",
          dailyFlow: "Flux Journalier (Entr\xE9es/Sorties)",
          topDrivers: "Top Livreurs par Livraisons R\xE9ussies",
          successfulDeliveries: "livraisons r\xE9ussies",
          hours: "heures",
          noData: "Pas assez de donn\xE9es pour g\xE9n\xE9rer un rapport pour cette p\xE9riode."
        }
      },
      notFound: {
        title: "Page not found",
        description: "Sorry, the page you are looking for does not exist or has been moved.",
        backHome: "Back to Home"
      },
      forbidden: {
        title: "Access Denied",
        description: "You do not have the necessary permissions to access this page.",
        backHome: "Back to Home"
      },
      forgotPassword: {
        title: "Forgot Password?",
        description: "Enter your email address and we'll send you a link to reset your password.",
        emailLabel: "Email address",
        sendLink: "Send Reset Link",
        checkEmailTitle: "Check your email",
        checkEmailDescription: "An email has been sent to {0} with instructions to reset your password.",
        close: "Close"
      },
      login: {
        iAmA: "I am a",
        customer: "Customer",
        seller: "Seller",
        sellerTypePrompt: "What type of seller are you?",
        physicalGoods: "Seller (Physical Goods)",
        services: "Seller (Services)",
        fullNameManager: "Full name (manager)"
      },
      superadmin: {
        tabs: {
          overview: "Overview",
          orders: "Orders",
          stores: "Stores",
          users: "Users",
          catalog: "Catalog",
          services: "Services",
          marketing: "Marketing",
          logistics: "Logistics",
          payouts: "Payouts",
          refunds: "Refunds",
          support: "Support",
          reviews: "Reviews",
          logs: "Activity Logs",
          settings: "Settings"
        },
        panelUnderConstruction: "'{0}' panel is under construction.",
        overview: {
          totalRevenue: "Total Revenue",
          totalOrders: "Total Orders",
          totalUsers: "Total Users",
          pendingStores: "Pending Stores",
          revenueLast7Days: "Revenue Last 7 Days",
          orderStatuses: "Order Status Distribution",
          recentOrders: "Recent Orders",
          newUsers: "New Users"
        },
        users: {
          title: "User Management ({0})",
          searchPlaceholder: "Search by name or email...",
          sendEmail: "Send Email ({0})",
          create: "Create User",
          table: {
            name: "Name",
            email: "Email",
            role: "Role",
            action: "Action"
          },
          form: {
            editTitle: "Edit User",
            createTitle: "Create User",
            name: "Name",
            role_customer: "Customer",
            role_seller: "Seller",
            role_delivery_agent: "Delivery Agent",
            role_depot_agent: "Depot Agent",
            role_depot_manager: "Depot Manager",
            role_superadmin: "Super Admin",
            assignedDepot: "Assigned Depot",
            noDepot: "No depot",
            deliveryZone: "Delivery Zone",
            noZone: "No zone"
          },
          status: {
            active: "Active",
            pending: "Pending",
            suspended: "Suspended",
            available: "Available",
            unavailable: "Unavailable"
          }
        },
        catalog: {
          title: "Catalog Management",
          imageUrl: "Image URL",
          addCategory: "Add Category",
          categoryName: "Category name",
          parentCategory: "Parent Category",
          mainCategory: "Main Category",
          add: "Add"
        },
        marketing: {
          tabs: {
            flashSales: "Flash Sales",
            ads: "Advertisements",
            announcements: "Announcements"
          },
          createFlashSale: "Create Flash Sale",
          addAd: "Add Advertisement",
          createAnnouncement: "Create Announcement",
          flashSaleDetail: {
            submissions: "Seller Submissions",
            approveAll: "Approve All",
            rejectAll: "Reject All",
            product: "Product",
            seller: "Seller",
            originalPrice: "Original Price",
            flashPrice: "Flash Price"
          },
          flashSaleForm: {
            title: "Create New Flash Sale",
            name: "Sale name",
            startDate: "Start date",
            endDate: "End date",
            create: "Create Sale",
            error_name: "Name is required.",
            error_startDate: "Start date is required.",
            error_endDate: "End date is required.",
            error_endDateAfterStart: "End date must be after start date.",
            error_endDatePast: "End date cannot be in the past."
          },
          adForm: {
            imageUrl: "Image URL",
            linkUrl: "Link URL",
            activate: "Activate this ad"
          },
          announcementForm: {
            title: "Announcement title",
            content: "Content",
            target_all: "All users",
            target_customers: "Customers only",
            target_sellers: "Sellers only",
            activate: "Activate this announcement"
          }
        },
        stores: {
          title: "Store Management",
          tabs: {
            pending: "Pending",
            active: "Active",
            suspended: "Suspended",
            rejected: "Rejected"
          },
          table: {
            store: "Store",
            seller: "Seller",
            documents: "Documents",
            location: "Location",
            certified: "Certified"
          },
          rejectionReason: "Reason for rejection:",
          warnReason: "Reason for warning",
          noStores: "No stores in this category.",
          warningsSuffix: "warning(s)",
          viewDocument: "View document",
          rejectionReasonText: "Rejection Reason"
        },
        orders: {
          title: "Order Management",
          searchPlaceholder: "Search by ID or customer name...",
          allStatuses: "All statuses",
          tabs: {
            all: "All Orders",
            disputes: "Return Requests"
          },
          evidence: "Evidence:",
          rejectRequest: "Reject Request",
          approveRefund: "Approve Refund",
          noDisputes: "No pending return requests."
        },
        logistics: {
          title: "Logistics Management",
          addPickupPoint: "Add Pickup Point",
          viewStaff: "View Staff",
          staffModal: {
            title: "Staff for {0} Depot",
            manager: "Manager",
            noManager: "No manager assigned.",
            staff: "Depot Agents",
            noStaff: "No agents assigned to this depot."
          },
          form: {
            name: "Pickup point name",
            city: "City",
            neighborhood: "Neighborhood",
            street: "Street/Address"
          }
        },
        payouts: {
          title: "Seller Payout Management",
          commissionInfo: "Default commission rate: {0}%. Premium plans have reduced rates.",
          balanceInfo: "Balance due is calculated on delivered orders.",
          table: {
            store: "Store",
            totalRevenue: "Total Revenue",
            commissionDue: "Commission Due",
            paidAmount: "Paid Amount",
            balanceDue: "Balance Due"
          },
          markAsPaid: "Mark as Paid",
          noPending: "No pending payouts."
        },
        support: {
          title: "Support Tickets ({0})",
          createTicket: "Cr\xE9er un ticket",
          detail: {
            back: "< Back to list",
            user: "User",
            replyPlaceholder: "Your reply...",
            reply: "Reply"
          },
          status: {
            open: "Open",
            inProgress: "In Progress",
            resolved: "Resolved"
          }
        },
        reviews: {
          title: "Review Moderation ({0} pending)",
          noPending: "No pending reviews for moderation.",
          goodJob: "Good job!",
          product: "Product:",
          by: "By",
          on: "on"
        },
        logs: {
          title: "Site Activity Logs",
          filterPlaceholder: "Filter logs...",
          performedAction: "performed action",
          details: "Details:",
          noLogs: "No logs match the filter."
        },
        emailModal: {
          title: "Send Bulk Email",
          recipients: "{0} recipient(s) selected.",
          useTemplate: "Use a template",
          customEmail: "Custom Email",
          subject: "Subject",
          body: "Message Body",
          variableInfo: "You can use {customerName} to customize the message.",
          send: "Send Email"
        },
        settings: {
          title: "General Site Settings",
          save: "Save Settings",
          sections: {
            identity: "Site Identity & Appearance",
            features: "Features",
            delivery: "Delivery Settings",
            sellerDocs: "Required Seller Documents",
            sellerPlans: "Seller Subscription Plans",
            loyalty: "Customer Loyalty Program",
            payment: "Payment Methods",
            seo: "Default SEO",
            content: "Information Pages Content",
            emails: "Email Templates",
            maintenance: "Maintenance Mode",
            footer: "Footer & Social Links"
          },
          identity: {
            logo: "Site Logo",
            banner: "Main Homepage Banner",
            upload: "Upload"
          },
          features: {
            chat: "Enable chat module between customers and sellers",
            comparison: "Enable product comparison module"
          },
          delivery: {
            intraUrban: "Base intra-urban fee (same city)",
            interUrban: "Base inter-urban fee (different cities)",
            perKg: "Additional cost per Kg",
            premiumDiscount: "Delivery discount for Premium customers (%)"
          },
          plans: {
            standard: "Standard Plan",
            premium: "Premium Plan",
            superPremium: "Super Premium Plan",
            price: "Price (XAF)",
            duration: "Duration (days)",
            limit: "Product limit",
            commission: "Commission (%)",
            photoService: "Photo service included",
            homepageFeature: "Featured on homepage"
          },
          loyalty: {
            enable: "Enable loyalty program",
            premium: "Premium Plan",
            thresholds: "Thresholds",
            ordersRequired: "Orders required",
            spendingRequired: "Spending required (XAF)",
            caution: "Deposit amount (XAF)",
            benefits: "Benefits (one per line)",
            premiumPlus: "Premium+ Plan",
            enablePremiumPlus: "Enable Premium+ plan",
            annualFee: "Annual fee (XAF)"
          },
          payment: {
            name: "Name",
            logoUrl: "Logo URL",
            add: "Add Payment Method"
          },
          seo: {
            defaultTitle: "Default Title (meta title tag)",
            defaultDesc: "Default Description (meta description tag)",
            ogImage: "Image URL for sharing (Open Graph)"
          },
          content: {
            pageTitle: "Page Title - {0}",
            content: "Content (HTML allowed)"
          },
          emails: {
            subject: "Subject",
            body: "Email Body",
            variables: "Available variables: {0}"
          },
          maintenance: {
            enable: "Enable maintenance mode",
            message: "Maintenance message"
          },
          footer: {
            companyName: "Company Name",
            iconUrl: "Icon URL"
          }
        }
      }
    }
  };

  // contexts/LanguageContext.tsx
  var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
  var LanguageContext = (0, import_react6.createContext)(void 0);
  var getNestedValue = (obj, path) => {
    return path.split(".").reduce((acc, part) => acc && acc[part], obj);
  };
  var LanguageProvider = ({ children }) => {
    const [language, setLanguage] = (0, import_react6.useState)("fr");
    const t = (0, import_react6.useCallback)((key, ...args) => {
      const translation = getNestedValue(translations[language], key) || key;
      if (args.length > 0) {
        return translation.replace(/\{(\d+)\}/g, (match, index) => {
          return typeof args[index] !== "undefined" ? String(args[index]) : match;
        });
      }
      return translation;
    }, [language]);
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(LanguageContext.Provider, { value: { language, setLanguage, t }, children });
  };
  var useLanguage = () => {
    const context = (0, import_react6.useContext)(LanguageContext);
    if (context === void 0) {
      throw new Error("useLanguage must be used within a LanguageProvider");
    }
    return context;
  };

  // components/Header.tsx
  var import_react11 = __toESM(require_react(), 1);

  // components/Icons.tsx
  var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
  var LogoIcon = ({ className, logoUrl }) => {
    const logoImage = logoUrl ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("img", { src: logoUrl, alt: "Kmer Zone Logo", className: "h-10 object-contain" }) : /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { viewBox: "0 0 36 36", className: "h-10 w-10", "aria-hidden": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { fill: "#FCD116", d: "M17.4,32.3c6.7,0,13.2-3.2,13.2-11.4c0-5.3-2.6-10.1-8.2-11.4c-2.3-0.5-5.7,1.1-7.2,2.8c-2.7,3.1-2,7.4,0.3,9.7C17.2,23.1,17.4,32.3,17.4,32.3z" }),
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { fill: "#CE1126", d: "M20.2,20.6c0-4.7-3.8-8.5-8.5-8.5s-8.5,3.8-8.5,8.5s3.8,8.5,8.5,8.5S20.2,25.3,20.2,20.6z M15.9,20.6c0-2.3-1.9-4.2-4.2-4.2s-4.2,1.9-4.2,4.2s1.9,4.2,4.2,4.2S15.9,22.9,15.9,20.6z" }),
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { fill: "#84CC16", d: "M30.4,10.1C29.3,4.9,23.4,2,18.2,3.1S8,8.4,9.1,13.6c0.6,2.8,2.7,5,5.4,5.6C21.9,20.5,28.8,16.5,30.4,10.1z" })
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: `flex items-center gap-2 ${className || ""}`, children: [
      logoImage,
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { className: "text-2xl font-bold tracking-tight text-kmer-green dark:text-gray-200", style: { fontFamily: "Poppins, sans-serif" }, children: "Kmer Zone" })
    ] });
  };
  var SearchIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" }) });
  var ShoppingCartIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" }) });
  var UserCircleIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var MenuIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M4 6h16M4 12h16M4 18h16" }) });
  var XIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 18L18 6M6 6l12 12" }) });
  var CheckIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M5 13l4 4L19 7" }) });
  var ArrowLeftIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M10 19l-7-7m0 0l7-7m-7 7h18" }) });
  var TrashIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" }) });
  var StarIcon = ({ className, filled = true, title, ...rest }) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { className, fill: filled ? "currentColor" : "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, ...rest, children: [
    title && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("title", { children: title }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z" })
  ] });
  var StarPlatinumIcon = ({ className, title, ...rest }) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { ...rest, fill: "currentColor", viewBox: "0 0 24 24", className: `text-gray-400 ${className || ""}`, children: [
    title && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("title", { children: title }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { d: "M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" })
  ] });
  var SparklesIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456zM16.898 20.562L16.5 21.75l-.398-1.188a2.25 2.25 0 00-1.423-1.423L13.5 18.75l1.188-.398a2.25 2.25 0 001.423-1.423L16.5 15.75l.398 1.188a2.25 2.25 0 001.423 1.423L19.5 18.75l-1.188.398a2.25 2.25 0 00-1.423 1.423z" }) });
  var ShoppingBagIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15.75 10.5V6a3.75 3.75 0 10-7.5 0v4.5m11.356-1.993l1.263 12c.07.658-.463 1.243-1.119 1.243H4.25a1.125 1.125 0 01-1.12-1.243l1.264-12A1.125 1.125 0 015.513 7.5h12.974c.576 0 1.059.435 1.119 1.007zM8.625 10.5a.375.375 0 11-.75 0 .375.375 0 01.75 0zm7.5 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" }) });
  var CreditCardIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M2.25 8.25h19.5M2.25 9h19.5m-16.5 5.25h6m-6 2.25h3m-3.75 3h15a2.25 2.25 0 002.25-2.25V6.75A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25v10.5A2.25 2.25 0 004.5 19.5z" }) });
  var TruckIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M8.25 18.75a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m3 0h6m-9 0H3.375a1.125 1.125 0 01-1.125-1.125V14.25m17.25 4.5a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m3 0h1.125c.621 0 1.125-.504 1.125-1.125V14.25m-17.25 4.5v-9m17.25 9v-9m-9-4.5h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5H18v-3a1.5 1.5 0 00-1.5-1.5H15v4.5zM6 6.75H3.75v8.25a1.125 1.125 0 001.125 1.125h1.125" }) });
  var ChatBubbleBottomCenterTextIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M8.625 12a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H8.25m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H12m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.76 9.76 0 01-2.555-.337A5.972 5.972 0 015.41 20.97a5.969 5.969 0 01-.474-.065 4.48 4.48 0 00.978-2.025c.09-.455.09-.934.09-1.423V12c0-4.556 4.03-8.25 9-8.25s9 3.694 9 8.25z" }) });
  var HeartIcon = ({ className, filled }) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { className, xmlns: "http://www.w3.org/2000/svg", fill: filled ? "#CE1126" : "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: filled ? "#CE1126" : "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z" }) });
  var TagIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 6h.008v.008H6V6z" })
  ] });
  var BuildingStorefrontIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M13.5 21v-7.5A.75.75 0 0114.25 12h.01a.75.75 0 01.75.75v7.5m-3.75-7.5A.75.75 0 0110.5 12h.01a.75.75 0 01.75.75v7.5m-3.75 0v-7.5A.75.75 0 017.5 12h.01a.75.75 0 01.75.75v7.5m-3.75 0A.75.75 0 013.75 12h.01a.75.75 0 01.75.75v7.5m0 0H3.75m0 0h16.5m0 0V6.75A.75.75 0 0020.25 6h-1.5a.75.75 0 00-.75.75v1.5m0 0v7.5m0-7.5h-1.5m0 0V6.75A.75.75 0 0016.5 6h-1.5a.75.75 0 00-.75.75v1.5m0 0V15m0-1.5H12m0 0V6.75A.75.75 0 0011.25 6h-1.5a.75.75 0 00-.75.75v1.5m0 0v7.5m0-7.5H6.75m0 0v7.5m0-7.5H3.75m0 0v7.5m16.5 0v-7.5A.75.75 0 0020.25 12h-1.5a.75.75 0 00-.75.75v7.5" }) });
  var BecomeSellerIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { d: "M7.17 6c-2.2 0-3.99 1.79-3.99 4v4c0 2.21 1.79 4 3.99 4h.83v-12h-.83zm2.83 12h2V6h-2v12zm4-12v12h2V6h-2zm4 3v9h2V9h-2z" }) });
  var PencilSquareIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" }) });
  var PhotoIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" }) });
  {
  }
  var CheckCircleIcon = ({ title, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: [
    title && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("title", { children: title }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" })
  ] });
  var XCircleIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var Cog8ToothIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M10.5 6h9.75M10.5 6a1.5 1.5 0 11-3 0m3 0a1.5 1.5 0 10-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-9.75 0h9.75" }) });
  var SunIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" }) });
  var MoonIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" }) });
  var ClipboardDocumentListIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9 12h3.75M9 15h3.75M9 18h3.75m3 .75H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08m-5.801 0c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75 2.25 2.25 0 00-.1-.664m-5.8 0A2.251 2.251 0 0113.5 2.25H15c1.012 0 1.867.668 2.15 1.586m-5.8 0c-.376.023-.75.05-1.124.08C9.095 4.01 8.25 4.973 8.25 6.108V8.25m0 0H4.875c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V9.375c0-.621-.504-1.125-1.125-1.125H8.25zM6.75 12h.008v.008H6.75V12zm0 3h.008v.008H6.75V15zm0 3h.008v.008H6.75V18z" }) });
  var AcademicCapIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M4.26 10.147a60.436 60.436 0 00-.491 6.347A48.627 48.627 0 0112 20.904a48.627 48.627 0 018.232-4.41 60.46 60.46 0 00-.491-6.347m-15.482 0a50.57 50.57 0 00-2.658-.813A59.905 59.905 0 0112 3.493a59.902 59.902 0 0110.399 5.84c-.896.248-1.783.52-2.658.814m-15.482 0A50.697 50.697 0 0112 13.489a50.702 50.702 0 017.74-3.342M6.75 15a.75.75 0 100-1.5.75.75 0 000 1.5z" }) });
  var ChevronDownIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M19.5 8.25l-7.5 7.5-7.5-7.5" }) });
  var ChevronLeftIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15.75 19.5L8.25 12l7.5-7.5" }) });
  var ChevronRightIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M8.25 4.5l7.5 7.5-7.5 7.5" }) });
  var CalendarDaysIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25A2.25 2.25 0 0118.75 21H5.25A2.25 2.25 0 013 18.75z" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3 12h18" })
  ] });
  var ClockIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var ExclamationTriangleIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" }) });
  var UsersIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M18 18.72a9.094 9.094 0 003.741-.479 3 3 0 00-4.682-2.72m-7.5-2.962a3.75 3.75 0 100-7.5 3.75 3.75 0 000 7.5zM10.5 18.75a9 9 0 10-18 0v.01c0 .417.05.826.15 1.226a9.097 9.097 0 003.428 5.058 9.096 9.096 0 005.37 1.476A9.095 9.095 0 0010.5 18.75z" }) });
  var UserGroupIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15 19.128a9.38 9.38 0 002.625.372 9.337 9.337 0 004.121-.952 4.125 4.125 0 00-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 018.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0111.964-4.67c.12-.14.237-.283.36-.431m-7.464 4.875A7.5 7.5 0 0112 15.75c1.652 0 3.173.69 4.262 1.824M12 12a2.25 2.25 0 100-4.5 2.25 2.25 0 000 4.5z" }) });
  var MapPinIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15 10.5a3 3 0 11-6 0 3 3 0 016 0z" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z" })
  ] });
  {
  }
  var ShieldCheckIcon = ({ title, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: [
    title && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("title", { children: title }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9 12.75L11.25 15 15 9.75m-3-7.036A11.959 11.959 0 013.598 6 11.99 11.99 0 003 9.749c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.571-.598-3.751h-.152c-3.196 0-6.1-1.248-8.25-3.286zm0 13.036h.008v.008h-.008v-.008z" })
  ] });
  var BellIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M14.857 17.082a23.848 23.848 0 005.454-1.31A8.967 8.967 0 0118 9.75V9A6 6 0 006 9v.75a8.967 8.967 0 01-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 01-5.714 0m5.714 0a3 3 0 11-5.714 0" }) });
  var CurrencyDollarIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 6v12m-3-2.818l.879.659c1.171.879 3.07.879 4.242 0 1.172-.879 1.172-2.303 0-3.182C13.536 12.219 12.768 12 12 12c-.725 0-1.45-.22-2.003-.659-1.106-.879-1.106-2.303 0-3.182s2.9-.879 4.006 0l.415.33M21 12a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var BarChartIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 013 19.875v-6.75zM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V8.625zM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V4.125z" }) });
  var BoltIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3.75 13.5l10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75z" }) });
  var ArrowRightOnRectangleIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15.75 9V5.25A2.25 2.25 0 0013.5 3h-6a2.25 2.25 0 00-2.25 2.25v13.5A2.25 2.25 0 007.5 21h6a2.25 2.25 0 002.25-2.25V15m-3-3l3 3m0 0l-3 3m3-3H9" }) });
  var ScaleIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 3v17.25m0 0c-1.472 0-2.882.265-4.185.75M12 20.25c1.472 0 2.882.265 4.185.75M18.75 4.97A48.416 48.416 0 0012 4.5c-2.291 0-4.545.16-6.75.47m13.5 0c1.01.143 2.01.317 3 .52m-3-.52l2.62 10.726c.122.499-.106 1.028-.589 1.202a5.988 5.988 0 01-2.153.24c-1.186 0-2.34-.312-3.372-.914m-10.522 0c.122.499.106 1.028.589 1.202a5.989 5.989 0 012.153.24c1.186 0 2.34-.312 3.372-.914m0 0l2.62-10.726m-2.62 10.726c-1.033-.599-2.186-.914-3.372-.914s-2.34.315-3.372.914m6.744 0c1.033-.599 2.186-.914 3.372-.914s2.34.315 3.372.914" }) });
  var ShareIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5m-13.5-9L12 3m0 0l4.5 4.5M12 3v13.5" }) });
  var DocumentTextIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" }) });
  var ChartPieIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M10.5 6a7.5 7.5 0 107.5 7.5h-7.5V6z" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M13.5 10.5H21A7.5 7.5 0 0013.5 3v7.5z" })
  ] });
  var PlusIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 4.5v15m7.5-7.5h-15" }) });
  var QrCodeIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3.75 4.5v15h15V4.5h-15Z" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M8.25 9h.75v.75h-.75V9Zm0 3.75h.75v.75h-.75v-.75Zm0 3.75h.75v.75h-.75v-.75Zm3.75-7.5h.75v.75h-.75V9Zm0 7.5h.75v.75h-.75v-.75Zm3.75-7.5h.75v.75h-.75V9Zm0 3.75h.75v.75h-.75v-.75Zm0 3.75h.75v.75h-.75v-.75Z" })
  ] });
  var ArrowPathIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0011.667 0l3.181-3.183m-4.991-2.696L7.985 5.986m11.667 0l-3.181 3.183a8.25 8.25 0 01-11.667 0l-3.181-3.183" }) });
  var FilterIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 01-.659 1.591l-5.432 5.432a2.25 2.25 0 00-.659 1.591v2.927a2.25 2.25 0 01-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 00-.659-1.591L3.659 7.409A2.25 2.25 0 013 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0112 3z" }) });
  var PaperAirplaneIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" }) });
  var BanknotesIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M2.25 18.75a60.07 60.07 0 0115.797 2.101c.727.198 1.453-.342 1.453-1.096V18.75M3.75 4.5v.75A.75.75 0 013 6h-.75m0 0v-.375c0-.621.504-1.125 1.125-1.125H20.25M2.25 6v9m18-10.5v.75c0 .414.336.75.75.75h.75m-1.5-1.5h.375c.621 0 1.125.504 1.125 1.125v9.75c0 .621-.504 1.125-1.125 1.125h-.375m1.5-1.5H21a.75.75 0 00-.75.75v.75m0 0H3.75m0 0h-.375a1.125 1.125 0 01-1.125-1.125V15m1.5 1.5v-.75A.75.75 0 003 15h-.75M15 10.5a3 3 0 11-6 0 3 3 0 016 0zm3 0h.008v.008H18V10.5zm-12 0h.008v.008H6V10.5z" }) });
  var ArchiveBoxIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M20.25 7.5l-.625 10.632a2.25 2.25 0 01-2.247 2.118H6.622a2.25 2.25 0 01-2.247-2.118L3.75 7.5M10 11.25h4M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125z" }) });
  var ArchiveBoxXMarkIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25a2.25 2.25 0 00-2.25 2.25v9.75a3.375 3.375 0 003.375 3.375h9.375a3.375 3.375 0 003.375-3.375v-1.875M16.5 13.5l-3 3m0 0l-3-3m3 3v-6m0 6h-3m3 0h3" }) });
  var MapIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9 6.75V15m0 0v2.25m0-2.25h1.5m-1.5 0h-1.5m-1.5-3L6.75 12l-1.5-2.25m4.5 6H15m0 0V6.75m0 0h1.5m-1.5 0h-1.5m1.5-3L13.25 12l1.5 2.25m-3-3l1.5-2.25m-1.5 2.25L15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var PrinterIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6.72 13.829c-.24.03-.48.062-.72.096m.72-.096a42.415 42.415 0 0110.56 0m-10.56 0L6.34 18m10.94-4.171c.24.03.48.062.72.096m-.72-.096L17.66 18m0 0l.229 2.523a1.125 1.125 0 01-1.12 1.227H7.231c-.662 0-1.18-.568-1.12-1.227L6.34 18m11.318 0h1.091A2.25 2.25 0 0021 15.75V9.456c0-1.081-.768-2.015-1.837-2.175a48.055 48.055 0 00-1.913-.247M6.34 18H5.25A2.25 2.25 0 013 15.75V9.456c0-1.081.768-2.015 1.837-2.175a48.041 48.041 0 011.913-.247m10.5 0a48.536 48.536 0 00-10.5 0m10.5 0V3.375c0-.621-.504-1.125-1.125-1.125h-8.25c-.621 0-1.125.504-1.125 1.125v3.659M18 10.5h.008v.008H18V10.5zm-3 0h.008v.008H15V10.5z" }) });
  var MegaphoneIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M10.5 6a7.5 7.5 0 100 12h-3a7.5 7.5 0 00-7.5-7.5h1.5m10.5-4.5h4.5m-4.5 0l4.5-4.5m-4.5 4.5l4.5 4.5m-13.5 0A7.5 7.5 0 016 10.5v-1.5a1.5 1.5 0 013 0v1.5a7.5 7.5 0 01-7.5 7.5h-1.5" }) });
  var OrangeMoneyLogo = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { ...props, viewBox: "0 0 64 40", xmlns: "http://www.w3.org/2000/svg", "aria-label": "Orange Money Logo", children: [
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("rect", { width: "64", height: "40", rx: "4", fill: "#FF7900" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("text", { x: "32", y: "22", fontFamily: "Helvetica, Arial, sans-serif", fontSize: "9", fontWeight: "bold", fill: "white", textAnchor: "middle", children: "ORANGE" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("text", { x: "32", y: "31", fontFamily: "Helvetica, Arial, sans-serif", fontSize: "9", fontWeight: "bold", fill: "white", textAnchor: "middle", children: "MONEY" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("rect", { x: "8", y: "8", width: "10", height: "7", rx: "2", fill: "white", fillOpacity: "0.8" })
  ] });
  var MtnMomoLogo = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { ...props, viewBox: "0 0 64 40", xmlns: "http://www.w3.org/2000/svg", "aria-label": "MTN Mobile Money Logo", children: [
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("rect", { width: "64", height: "40", rx: "4", fill: "#FFCC00" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("text", { x: "32", y: "26", fontFamily: "Helvetica, Arial, sans-serif", fontSize: "14", fontWeight: "bold", fill: "#004F9F", textAnchor: "middle", children: "MoMo" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("rect", { x: "8", y: "8", width: "10", height: "7", rx: "2", fill: "#004F9F", fillOpacity: "0.8" })
  ] });
  var VisaIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { ...props, viewBox: "0 0 64 40", xmlns: "http://www.w3.org/2000/svg", "aria-label": "Visa Logo", children: [
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("rect", { width: "64", height: "40", rx: "4", fill: "white", stroke: "#E0E0E0" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { d: "M24.7,25.8h-3.4L17.6,14h3.8l2,7.1c0.4,1.6,0.6,2.7,0.8,3.6h0.1c0.2-0.9,0.5-2.1,0.8-3.6l2-7.1h3.7L24.7,25.8z M45.1,14.2c-0.8-0.2-1.9-0.5-3.1-0.5c-3.1,0-5.4,1.7-5.4,4.2c0,2.1,1.7,3.4,3.1,4.1c1.4,0.6,1.9,1,1.9,1.6c0,0.8-0.9,1.2-2.1,1.2c-1.6,0-2.4-0.3-3.3-0.6l-0.5-0.2l-0.6,3.2c0.8,0.3,2.3,0.5,4,0.5c3.3,0,5.6-1.7,5.6-4.4c0-2.6-1.9-3.7-3.4-4.4c-1.3-0.6-1.7-1-1.7-1.5c0-0.5,0.6-1.1,2-1.1c1.3,0,2.1,0.3,2.8,0.6l0.4,0.2L45.1,14.2z M47,14h-3.1l-2.1,11.8h3.8L47,14z M14.8,14.2l-3,11.6h3.7l3-11.6H14.8z", fill: "#142688" })
  ] });
  var MastercardIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { ...props, viewBox: "0 0 64 40", xmlns: "http://www.w3.org/2000/svg", "aria-label": "Mastercard Logo", children: [
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("rect", { width: "64", height: "40", rx: "4", fill: "white", stroke: "#E0E0E0" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("circle", { cx: "26", cy: "20", r: "8", fill: "#EA001B" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("circle", { cx: "38", cy: "20", r: "8", fill: "#F79E1B" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { d: "M32,20 a8,8 0 0,1 -6,-1.41a8,8 0 0,0 0,2.82a8,8 0 0,1 6,1.41a8,8 0 0,0 6,-1.41a8,8 0 0,1 0,-2.82A8,8 0 0,0 32,20Z", fill: "#FF5F00" })
  ] });
  var PaypalIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { ...props, viewBox: "0 0 64 40", xmlns: "http://www.w3.org/2000/svg", "aria-label": "PayPal Logo", children: [
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("rect", { width: "64", height: "40", rx: "4", fill: "#003087" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { fill: "white", d: "M32.12,12.62c-2.28-.1-4.2,1.3-4.72,3.42-.64,2.58.74,4.52,2.7,5.2,2.16.76,4.48.3,5.92-1.32,1.26-1.42,1.68-3.32,1-5.12-1.02-3.1-3.6-4.5-5-4.2h.1Z" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { fill: "#009cde", d: "M29.1,19.2c-.52,2.12,1.02,4,2.94,4.54,2.14.6,4.5.1,5.9-1.52.92-1.04,1.2-2.38.74-3.6-.82-2.18-3-3.44-4.9-2.92h.22Z" })
  ] });
  var ChatBubbleLeftRightIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193l-3.72.372a3.523 3.523 0 0 1-1.04-.22l-1.044-.442a3.523 3.523 0 0 0-1.04-.22l-3.72.372c-1.133.093-1.98-.934-1.98-2.07v-4.286c0-.97.616-1.813 1.5-2.097m6.525 0V9" }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3.75 6.75c.884-.284 1.5-1.128 1.5-2.097v-4.286c0-1.136.847-2.1 1.98-2.193l3.72-.372a3.523 3.523 0 0 1 1.04.22l1.044.442a3.523 3.523 0 0 0 1.04.22l3.72-.372c1.133-.093 1.98.934 1.98 2.07v4.286c0 .97-.616 1.813-1.5 2.097m-9.525 0v.002" })
  ] });
  var BookmarkSquareIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" }) });
  var PaperclipIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M18.375 12.739l-7.693 7.693a4.5 4.5 0 01-6.364-6.364l10.94-10.94A3.375 3.375 0 0119.5 7.372l-8.625 8.625a1.875 1.875 0 01-2.652-2.652l6.815-6.815" }) });

  // contexts/CartContext.tsx
  var import_react7 = __toESM(require_react(), 1);
  var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
  var CartContext = (0, import_react7.createContext)(void 0);
  var areVariantsEqual = (v1, v2) => {
    if (!v1 && !v2) return true;
    if (!v1 || !v2) return false;
    const keys1 = Object.keys(v1);
    const keys2 = Object.keys(v2);
    if (keys1.length !== keys2.length) return false;
    return keys1.every((key) => v1[key] === v2[key]);
  };
  var CartProvider = ({ children }) => {
    const [cart, setCart] = usePersistentState("cart", []);
    const [appliedPromoCode, setAppliedPromoCode] = usePersistentState("appliedPromoCode", null);
    const { openModal } = useUI();
    const { user } = useAuth();
    const addToCart = (0, import_react7.useCallback)((product, quantity = 1, selectedVariant, options) => {
      if (user && ["superadmin", "seller", "enterprise", "delivery_agent", "depot_agent", "depot_manager"].includes(user.role)) {
        alert("Votre r\xF4le ne vous autorise pas \xE0 effectuer des achats. Pour acheter, veuillez vous connecter avec un compte client.");
        return;
      }
      let itemAdded = false;
      let addedItem = null;
      setCart((prevCart) => {
        const existingItem = prevCart.find((item) => item.id === product.id && areVariantsEqual(item.selectedVariant, selectedVariant));
        let stock = product.stock;
        let variantDetail;
        if (product.variantDetails && selectedVariant) {
          variantDetail = product.variantDetails.find((vd) => areVariantsEqual(vd.options, selectedVariant));
          stock = variantDetail?.stock ?? 0;
        }
        if (stock === 0) {
          alert("Ce produit ou cette variante est en rupture de stock.");
          return prevCart;
        }
        if (existingItem) {
          const newQuantity = existingItem.quantity + quantity;
          if (newQuantity > stock) {
            alert(`Stock insuffisant. Vous ne pouvez pas commander plus de ${stock} unit\xE9s de cette variante.`);
            return prevCart;
          }
          itemAdded = true;
          return prevCart.map((item) => {
            if (item.id === product.id && areVariantsEqual(item.selectedVariant, selectedVariant)) {
              const updatedItem = { ...item, quantity: newQuantity };
              addedItem = updatedItem;
              return updatedItem;
            }
            return item;
          });
        } else {
          if (quantity > stock) {
            alert(`Stock insuffisant. Vous ne pouvez pas commander plus de ${stock} unit\xE9s de cette variante.`);
            return prevCart;
          }
          itemAdded = true;
          const newItem = { ...product, quantity, selectedVariant };
          if (variantDetail && variantDetail.price) {
            newItem.price = variantDetail.price;
            newItem.promotionPrice = void 0;
          }
          addedItem = newItem;
          return [...prevCart, newItem];
        }
      });
      if (itemAdded && addedItem && !options?.suppressModal) {
        openModal(addedItem);
      }
    }, [user, openModal, setCart]);
    const removeFromCart = (0, import_react7.useCallback)((productId, selectedVariant) => {
      setCart((prevCart) => prevCart.filter((item) => !(item.id === productId && areVariantsEqual(item.selectedVariant, selectedVariant))));
    }, [setCart]);
    const updateQuantity = (0, import_react7.useCallback)((productId, quantity, selectedVariant) => {
      const productInCart = cart.find((item) => item.id === productId && areVariantsEqual(item.selectedVariant, selectedVariant));
      if (!productInCart) return;
      let stock = productInCart.stock;
      if (productInCart.variantDetails && selectedVariant) {
        const variantDetail = productInCart.variantDetails.find((vd) => areVariantsEqual(vd.options, selectedVariant));
        stock = variantDetail?.stock ?? 0;
      }
      if (quantity > stock) {
        alert(`Stock insuffisant. Vous ne pouvez pas commander plus de ${stock} unit\xE9s.`);
        return;
      }
      if (quantity <= 0) {
        removeFromCart(productId, selectedVariant);
      } else {
        setCart(
          (prevCart) => prevCart.map(
            (item) => item.id === productId && areVariantsEqual(item.selectedVariant, selectedVariant) ? { ...item, quantity } : item
          )
        );
      }
    }, [cart, removeFromCart, setCart]);
    const clearCart = (0, import_react7.useCallback)(() => {
      setCart([]);
      setAppliedPromoCode(null);
    }, [setCart, setAppliedPromoCode]);
    const onApplyPromoCode = (0, import_react7.useCallback)((code) => {
      setAppliedPromoCode(code);
    }, [setAppliedPromoCode]);
    const contextValue = (0, import_react7.useMemo)(() => ({
      cart,
      addToCart,
      removeFromCart,
      updateQuantity,
      clearCart,
      appliedPromoCode,
      onApplyPromoCode
    }), [cart, addToCart, removeFromCart, updateQuantity, clearCart, appliedPromoCode, onApplyPromoCode]);
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(CartContext.Provider, { value: contextValue, children });
  };
  var useCart = () => {
    const context = (0, import_react7.useContext)(CartContext);
    if (context === void 0) {
      throw new Error("useCart must be used within a CartProvider");
    }
    return context;
  };

  // contexts/ThemeContext.tsx
  var import_react8 = __toESM(require_react(), 1);
  var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
  var ThemeContext = (0, import_react8.createContext)(void 0);
  var ThemeProvider = ({ children }) => {
    const [theme, setTheme] = (0, import_react8.useState)(() => {
      if (typeof window !== "undefined" && localStorage.getItem("theme")) {
        return localStorage.getItem("theme");
      }
      if (typeof window !== "undefined" && window.matchMedia("(prefers-color-scheme: dark)").matches) {
        return "dark";
      }
      return "light";
    });
    (0, import_react8.useEffect)(() => {
      const root2 = window.document.documentElement;
      if (theme === "dark") {
        root2.classList.add("dark");
      } else {
        root2.classList.remove("dark");
      }
      localStorage.setItem("theme", theme);
    }, [theme]);
    const toggleTheme = (0, import_react8.useCallback)(() => {
      setTheme((prevTheme) => prevTheme === "light" ? "dark" : "light");
    }, []);
    const contextValue = (0, import_react8.useMemo)(() => ({ theme, toggleTheme }), [theme, toggleTheme]);
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(ThemeContext.Provider, { value: contextValue, children });
  };
  var useTheme = () => {
    const context = (0, import_react8.useContext)(ThemeContext);
    if (context === void 0) {
      throw new Error("useTheme must be used within a ThemeProvider");
    }
    return context;
  };

  // contexts/WishlistContext.tsx
  var import_react9 = __toESM(require_react(), 1);
  var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
  var WishlistContext = (0, import_react9.createContext)(void 0);
  var WishlistProvider = ({ children }) => {
    const [wishlist, setWishlist] = usePersistentState("wishlist", []);
    const toggleWishlist = (0, import_react9.useCallback)((productId) => {
      setWishlist(
        (prevWishlist) => prevWishlist.includes(productId) ? prevWishlist.filter((id) => id !== productId) : [...prevWishlist, productId]
      );
    }, [setWishlist]);
    const isWishlisted = (0, import_react9.useCallback)((productId) => {
      return wishlist.includes(productId);
    }, [wishlist]);
    const contextValue = (0, import_react9.useMemo)(() => ({
      wishlist,
      toggleWishlist,
      isWishlisted
    }), [wishlist, toggleWishlist, isWishlisted]);
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(WishlistContext.Provider, { value: contextValue, children });
  };
  var useWishlist = () => {
    const context = (0, import_react9.useContext)(WishlistContext);
    if (context === void 0) {
      throw new Error("useWishlist must be used within a WishlistProvider");
    }
    return context;
  };

  // contexts/ChatContext.tsx
  var import_react10 = __toESM(require_react(), 1);
  var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
  var ChatContext = (0, import_react10.createContext)(void 0);
  var initialChats = [];
  var initialMessages = {};
  var phoneRegex = /\b(\+?237\s*)?([6-9])([\s.-]*\d){8}\b|\b(?:\+\d{1,3}\s*)?(?:\d[\s-]*){8,}\d\b/g;
  var emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g;
  var censorText = (text, storeInfo) => {
    let censoredText = text.replace(phoneRegex, "***");
    censoredText = censoredText.replace(emailRegex, "***");
    if (storeInfo) {
      const locationKeywords = /* @__PURE__ */ new Set([
        ...storeInfo.physicalAddress.toLowerCase().split(/[\s,.-]+/),
        ...storeInfo.neighborhood ? storeInfo.neighborhood.toLowerCase().split(/[\s,.-]+/) : [],
        ...storeInfo.location.toLowerCase().split(/[\s,.-]+/)
        // city
      ]);
      const commonWords = ["rue", "de", "la", "le", "et", "au", "a", "des", "du", "en", "face", "pr\xE8s", "derri\xE8re", "devant", "carrefour", "akwa", "yaounde", "douala"];
      const significantKeywords = [...locationKeywords].filter((kw) => kw.length > 3 && !commonWords.includes(kw));
      if (significantKeywords.length > 0) {
        const regex = new RegExp(`\\b(${significantKeywords.join("|")})\\b`, "gi");
        censoredText = censoredText.replace(regex, "***");
      }
    }
    return censoredText;
  };
  var ChatProvider = ({ children }) => {
    const { user } = useAuth();
    const { t } = useLanguage();
    const [chats, setChats] = (0, import_react10.useState)(initialChats);
    const [messages, setMessages] = (0, import_react10.useState)(initialMessages);
    const [activeChatId, setActiveChatId] = (0, import_react10.useState)(null);
    const [isWidgetOpen, setIsWidgetOpen] = (0, import_react10.useState)(false);
    const [isTyping, setIsTyping] = (0, import_react10.useState)({});
    const startChat = (0, import_react10.useCallback)((seller, store, product) => {
      if (!user) {
        alert("Veuillez vous connecter pour contacter un vendeur.");
        return;
      }
      if (user.id === seller.id) {
        alert("Vous ne pouvez pas vous envoyer de message.");
        return;
      }
      const participantIds = [user.id, seller.id];
      let existingChat = chats.find(
        (c) => c.participantIds.includes(participantIds[0]) && c.participantIds.includes(participantIds[1]) && c.productContext?.id === product?.id
      );
      let isNewChat = false;
      let chatId = existingChat?.id;
      if (!existingChat) {
        isNewChat = true;
        const newChatId = `chat_${Date.now()}`;
        chatId = newChatId;
        existingChat = {
          id: newChatId,
          participantIds,
          participantNames: {
            [user.id]: user.name,
            [seller.id]: seller.name
          },
          productContext: product ? {
            id: product.id,
            name: product.name,
            imageUrl: product.imageUrls[0]
          } : void 0,
          sellerStoreInfo: {
            physicalAddress: store.physicalAddress,
            location: store.location,
            neighborhood: store.neighborhood
          },
          lastMessageTimestamp: (/* @__PURE__ */ new Date()).toISOString(),
          unreadCount: { [user.id]: 0, [seller.id]: 0 }
        };
        setChats((prev) => [...prev, existingChat]);
        setMessages((prev) => ({ ...prev, [newChatId]: [] }));
      }
      setActiveChatId(chatId);
      setIsWidgetOpen(true);
      if (isNewChat && (!messages[chatId] || messages[chatId].length === 0)) {
        const welcomeMessage = {
          id: `msg_welcome_${Date.now()}`,
          chatId,
          senderId: "assistant-id",
          text: `Bonjour ! Je suis l'assistant KMER ZONE. Comment puis-je vous aider ${product ? `concernant "${product.name}"` : ""} ? Posez votre question au vendeur ici.`,
          timestamp: (/* @__PURE__ */ new Date()).toISOString(),
          isRead: true
        };
        setMessages((prev) => ({
          ...prev,
          [chatId]: [welcomeMessage]
        }));
        setChats((prev) => prev.map((c) => c.id === chatId ? { ...c, lastMessageTimestamp: welcomeMessage.timestamp } : c));
      }
    }, [user, chats, messages]);
    const sendMessage = (0, import_react10.useCallback)((chatId, text) => {
      if (!user) return;
      const chat = chats.find((c) => c.id === chatId);
      if (!chat) return;
      const censoredVersion = censorText(text, chat.sellerStoreInfo);
      const userMessage = {
        id: `msg_${Date.now()}`,
        chatId,
        senderId: user.id,
        text,
        censoredText: censoredVersion !== text ? censoredVersion : void 0,
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        isRead: false
        // Will be marked as read by receiver
      };
      const receiverId = chat.participantIds.find((id) => id !== user.id);
      setMessages((prev) => ({
        ...prev,
        [chatId]: [...prev[chatId] || [], userMessage]
      }));
      setChats((prev) => prev.map((c) => {
        if (c.id === chatId) {
          return {
            ...c,
            lastMessageTimestamp: userMessage.timestamp,
            unreadCount: {
              ...c.unreadCount,
              [receiverId]: (c.unreadCount[receiverId] || 0) + 1
            }
          };
        }
        return c;
      }));
    }, [user, chats]);
    const handleSetActiveChat = (0, import_react10.useCallback)((chatId) => {
      setActiveChatId(chatId);
      if (chatId && user) {
        setChats((prev) => prev.map((chat) => {
          if (chat.id === chatId) {
            return { ...chat, unreadCount: { ...chat.unreadCount, [user.id]: 0 } };
          }
          return chat;
        }));
      }
    }, [user]);
    const totalUnreadCount = (0, import_react10.useMemo)(() => {
      if (!user) return 0;
      return chats.reduce((total, chat) => total + (chat.unreadCount[user.id] || 0), 0);
    }, [chats, user]);
    const contextValue = (0, import_react10.useMemo)(() => ({
      chats,
      messages,
      startChat,
      sendMessage,
      activeChatId,
      setActiveChatId: handleSetActiveChat,
      isWidgetOpen,
      setIsWidgetOpen,
      totalUnreadCount,
      isTyping
    }), [chats, messages, startChat, sendMessage, activeChatId, handleSetActiveChat, isWidgetOpen, setIsWidgetOpen, totalUnreadCount, isTyping]);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ChatContext.Provider, { value: contextValue, children });
  };
  var useChatContext = () => {
    const context = (0, import_react10.useContext)(ChatContext);
    if (context === void 0) {
      throw new Error("useChatContext must be used within a ChatProvider");
    }
    return context;
  };

  // components/Header.tsx
  var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
  var Header = (props) => {
    const { categories, onNavigateHome, onNavigateCart, onNavigateToStores, onNavigateToPromotions, onNavigateToCategory, onNavigateToBecomeSeller, onNavigateToSellerDashboard, onNavigateToSellerProfile, onOpenLogin, onLogout, onNavigateToOrderHistory, onNavigateToSuperAdminDashboard, onNavigateToFlashSales, onNavigateToWishlist, onNavigateToDeliveryAgentDashboard, onNavigateToDepotAgentDashboard, onNavigateToBecomePremium, onNavigateToAccount, onNavigateToVisualSearch, onNavigateToServices, onSearch, isChatEnabled, isPremiumProgramEnabled, logoUrl, notifications, onMarkNotificationAsRead, onNavigateFromNotification } = props;
    const [isMenuOpen, setIsMenuOpen] = (0, import_react11.useState)(false);
    const [isCategoryMenuOpen, setIsCategoryMenuOpen] = (0, import_react11.useState)(false);
    const [isServicesMenuOpen, setIsServicesMenuOpen] = (0, import_react11.useState)(false);
    const [isUserMenuOpen, setIsUserMenuOpen] = (0, import_react11.useState)(false);
    const [isNotificationsOpen, setIsNotificationsOpen] = (0, import_react11.useState)(false);
    const [searchQuery, setSearchQuery] = (0, import_react11.useState)("");
    const [mobileSearchQuery, setMobileSearchQuery] = (0, import_react11.useState)("");
    const [isSearchFocused, setIsSearchFocused] = (0, import_react11.useState)(false);
    const { language, setLanguage, t } = useLanguage();
    const { cart } = useCart();
    const { wishlist } = useWishlist();
    const { user } = useAuth();
    const { theme, toggleTheme } = useTheme();
    const { setIsWidgetOpen, totalUnreadCount } = useChatContext();
    const cartItemCount = cart.reduce((count, item) => count + item.quantity, 0);
    const wishlistItemCount = wishlist.length;
    const unreadNotificationsCount = notifications.filter((n) => !n.isRead).length;
    const categoryMenuRef = (0, import_react11.useRef)(null);
    const servicesMenuRef = (0, import_react11.useRef)(null);
    const userMenuRef = (0, import_react11.useRef)(null);
    const notificationsMenuRef = (0, import_react11.useRef)(null);
    const categoryTree = (0, import_react11.useMemo)(() => {
      const mainCategories = categories.filter((c) => !c.parentId);
      return mainCategories.map((mainCat) => ({
        ...mainCat,
        subCategories: categories.filter((c) => c.parentId === mainCat.id)
      }));
    }, [categories]);
    const serviceCategories = (0, import_react11.useMemo)(() => {
      return categories.filter((c) => c.parentId === "cat-services");
    }, [categories]);
    (0, import_react11.useEffect)(() => {
      const handleClickOutside = (event) => {
        if (categoryMenuRef.current && !categoryMenuRef.current.contains(event.target)) {
          setIsCategoryMenuOpen(false);
        }
        if (servicesMenuRef.current && !servicesMenuRef.current.contains(event.target)) {
          setIsServicesMenuOpen(false);
        }
        if (userMenuRef.current && !userMenuRef.current.contains(event.target)) {
          setIsUserMenuOpen(false);
        }
        if (notificationsMenuRef.current && !notificationsMenuRef.current.contains(event.target)) {
          setIsNotificationsOpen(false);
        }
      };
      if (isCategoryMenuOpen || isUserMenuOpen || isNotificationsOpen || isServicesMenuOpen) {
        document.addEventListener("mousedown", handleClickOutside);
      } else {
        document.removeEventListener("mousedown", handleClickOutside);
      }
      return () => {
        document.removeEventListener("mousedown", handleClickOutside);
      };
    }, [isCategoryMenuOpen, isUserMenuOpen, isNotificationsOpen, isServicesMenuOpen]);
    const handleSearchSubmit = (e, query) => {
      e.preventDefault();
      if (query.trim()) {
        onSearch(query);
        setSearchQuery("");
        setMobileSearchQuery("");
        setIsMenuOpen(false);
      }
    };
    const userMenuItems = [
      ...user?.role === "superadmin" ? [{ label: t("header.superadminDashboard"), action: onNavigateToSuperAdminDashboard, icon: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(AcademicCapIcon, { className: "h-5 w-5" }) }] : [],
      ...user?.role === "seller" || user?.role === "enterprise" ? [
        { label: t("header.sellerDashboard"), action: onNavigateToSellerDashboard, icon: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(BuildingStorefrontIcon, { className: "h-5 w-5" }) },
        { label: t("header.sellerProfile"), action: onNavigateToSellerProfile, icon: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Cog8ToothIcon, { className: "h-5 w-5" }) }
      ] : [],
      ...user?.role === "customer" ? [
        { label: t("header.myAccount"), action: () => onNavigateToAccount("profile"), icon: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(UserCircleIcon, { className: "h-5 w-5" }) },
        { label: t("header.followedStores"), action: () => onNavigateToAccount("followed-stores"), icon: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(BuildingStorefrontIcon, { className: "h-5 w-5" }) }
      ] : [],
      ...user?.role === "delivery_agent" ? [{ label: t("header.deliveryDashboard"), action: onNavigateToDeliveryAgentDashboard, icon: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(TruckIcon, { className: "h-5 w-5" }) }] : [],
      ...user?.role === "depot_agent" || user?.role === "depot_manager" ? [{ label: t("header.depotDashboard"), action: onNavigateToDepotAgentDashboard, icon: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(BuildingStorefrontIcon, { className: "h-5 w-5" }) }] : [],
      ...user && (user.role === "customer" || user.role === "seller" || user.role === "enterprise") ? [
        { label: t("header.myOrders"), action: onNavigateToOrderHistory, icon: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ClipboardDocumentListIcon, { className: "h-5 w-5" }) }
      ] : [],
      ...user ? [
        { label: t("header.support"), action: () => onNavigateToAccount("support"), icon: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ChatBubbleBottomCenterTextIcon, { className: "h-5 w-5" }) }
      ] : []
    ];
    const ActionButton = ({ onClick, icon, label, count }) => /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("button", { onClick, className: "relative flex flex-col items-center text-center text-gray-600 dark:text-gray-300 hover:text-kmer-green px-2 py-1", children: [
      icon,
      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { className: "text-xs font-medium mt-1", children: label }),
      count !== void 0 && count > 0 && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { className: "absolute -top-1 right-0 block h-5 w-5 rounded-full bg-kmer-red text-white text-xs flex items-center justify-center ring-2 ring-white dark:ring-gray-800", children: count })
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("header", { className: "bg-white dark:bg-gray-800 shadow-md sticky top-0 z-40", children: [
      /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "flex items-center", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: onNavigateHome, "aria-label": t("header.backToHome"), children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(LogoIcon, { className: "h-10", logoUrl }) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "hidden lg:flex flex-1 mx-8 justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(
            "form",
            {
              onSubmit: (e) => handleSearchSubmit(e, searchQuery),
              className: `relative w-full ${isSearchFocused ? "max-w-2xl" : "max-w-md"} transition-all duration-300 ease-in-out`,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { type: "button", onClick: onNavigateToVisualSearch, className: "absolute inset-y-0 left-0 flex items-center pl-3 text-gray-500 dark:text-gray-400 hover:text-kmer-green", title: t("header.visualSearch"), children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(PhotoIcon, { className: "h-5 w-5" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
                  "input",
                  {
                    type: "text",
                    placeholder: t("header.searchPlaceholder"),
                    value: searchQuery,
                    onChange: (e) => setSearchQuery(e.target.value),
                    onFocus: () => setIsSearchFocused(true),
                    onBlur: () => setIsSearchFocused(false),
                    className: "w-full pl-12 pr-10 py-2 rounded-full border border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-kmer-green focus:border-transparent transition-all duration-300"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { type: "submit", className: "absolute inset-y-0 right-0 flex items-center pr-3 text-gray-500 dark:text-gray-400 hover:text-kmer-green", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(SearchIcon, { className: "h-5 w-5" }) })
              ]
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "hidden lg:flex items-center space-x-2", children: [
            (!user || user.role === "customer") && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: onNavigateToBecomeSeller, className: "text-sm font-semibold text-kmer-green border-2 border-kmer-green rounded-full px-4 py-1.5 hover:bg-kmer-green/10 transition-colors", children: t("header.becomeSeller") }),
            user ? /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(import_jsx_runtime9.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "relative", ref: userMenuRef, children: [
                /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("button", { onClick: () => setIsUserMenuOpen(!isUserMenuOpen), className: "flex flex-col items-center text-center text-gray-600 dark:text-gray-300 hover:text-kmer-green px-2 py-1", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "relative", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(UserCircleIcon, { className: "h-6 w-6" }),
                    user.loyalty?.status === "premium" && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(StarIcon, { filled: true, className: "absolute -bottom-1 -right-1 w-4 h-4 text-kmer-yellow bg-white dark:bg-gray-800 rounded-full p-0.5" }),
                    user.loyalty?.status === "premium_plus" && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(StarPlatinumIcon, { className: "absolute -bottom-1 -right-1 w-4 h-4 bg-white dark:bg-gray-800 rounded-full p-0.5 text-kmer-red" })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { className: "text-xs font-medium mt-1 truncate max-w-[80px]", children: user.name })
                ] }),
                isUserMenuOpen && /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "absolute right-0 mt-2 w-56 bg-white dark:bg-gray-800 rounded-md shadow-lg py-1 ring-1 ring-black ring-opacity-5", children: [
                  userMenuItems.map((item) => /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("button", { onClick: () => {
                    item.action();
                    setIsUserMenuOpen(false);
                  }, className: "w-full text-left flex items-center gap-3 px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700", children: [
                    item.icon,
                    " ",
                    item.label
                  ] }, item.label)),
                  /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "border-t border-gray-200 dark:border-gray-700 my-1" }),
                  /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("button", { onClick: () => {
                    onLogout();
                    setIsUserMenuOpen(false);
                  }, className: "w-full text-left flex items-center gap-3 px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ArrowRightOnRectangleIcon, { className: "h-5 w-5" }),
                    " ",
                    t("header.logout")
                  ] })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "relative", ref: notificationsMenuRef, children: [
                /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ActionButton, { onClick: () => setIsNotificationsOpen((o) => !o), icon: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(BellIcon, { className: "h-6 w-6" }), label: t("header.notifications"), count: unreadNotificationsCount }),
                isNotificationsOpen && /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "absolute right-0 mt-2 w-80 bg-white dark:bg-gray-800 rounded-md shadow-lg ring-1 ring-black ring-opacity-5 max-h-96 overflow-y-auto", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "p-3 border-b dark:border-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("h3", { className: "font-semibold text-gray-800 dark:text-white", children: t("header.notifications") }) }),
                  notifications.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("p", { className: "p-4 text-sm text-gray-500", children: t("header.noNotifications") }) : notifications.map((notif) => /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(
                    "button",
                    {
                      onClick: () => {
                        onMarkNotificationAsRead(notif.id);
                        if (notif.link) onNavigateFromNotification(notif.link);
                        setIsNotificationsOpen(false);
                      },
                      className: `w-full text-left p-3 border-b dark:border-gray-700/50 last:border-b-0 hover:bg-gray-50 dark:hover:bg-gray-700/50 ${!notif.isRead ? "bg-blue-50 dark:bg-blue-900/20" : ""}`,
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("p", { className: "text-sm text-gray-700 dark:text-gray-200", children: notif.message }),
                        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("p", { className: "text-xs text-gray-400 mt-1", children: new Date(notif.timestamp).toLocaleString("fr-FR") })
                      ]
                    },
                    notif.id
                  ))
                ] })
              ] })
            ] }) : /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ActionButton, { onClick: onOpenLogin, icon: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(UserCircleIcon, { className: "h-6 w-6" }), label: t("header.login") }),
            user?.role === "customer" && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ActionButton, { onClick: onNavigateToOrderHistory, icon: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ClipboardDocumentListIcon, { className: "h-6 w-6" }), label: t("header.myOrders") }),
            user && (user.role === "customer" || user.role === "seller" || user.role === "enterprise") && /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(import_jsx_runtime9.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ActionButton, { onClick: onNavigateToWishlist, icon: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(HeartIcon, { className: "h-6 w-6" }), label: t("header.wishlist"), count: wishlistItemCount }),
              isChatEnabled && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ActionButton, { onClick: () => setIsWidgetOpen(true), icon: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ChatBubbleBottomCenterTextIcon, { className: "h-6 w-6" }), label: t("header.messages"), count: totalUnreadCount })
            ] }),
            user && user.role === "customer" && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ActionButton, { onClick: onNavigateCart, icon: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ShoppingCartIcon, { className: "h-6 w-6" }), label: t("header.cart"), count: cartItemCount }),
            user?.role === "superadmin" && isChatEnabled && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ActionButton, { onClick: () => setIsWidgetOpen(true), icon: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ChatBubbleBottomCenterTextIcon, { className: "h-6 w-6" }), label: t("header.messages"), count: totalUnreadCount }),
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: toggleTheme, className: "p-2 rounded-full text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700", children: theme === "dark" ? /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(SunIcon, { className: "h-6 w-6" }) : /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(MoonIcon, { className: "h-6 w-6" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: () => setLanguage(language === "fr" ? "en" : "fr"), className: "p-2 rounded-full text-sm font-bold text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700", children: language.toUpperCase() })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "lg:hidden flex items-center", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: () => setIsMenuOpen(!isMenuOpen), className: "p-2 rounded-md text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-white", children: isMenuOpen ? /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(XIcon, { className: "h-6 w-6" }) : /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(MenuIcon, { className: "h-6 w-6" }) }) })
        ] }),
        (!user || user.role !== "superadmin" && user.role !== "delivery_agent" && user.role !== "depot_agent") && /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("nav", { className: "hidden lg:flex items-center justify-center space-x-6 border-t border-gray-200 dark:border-gray-700 mt-3 pt-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "relative", ref: categoryMenuRef, children: [
            /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(
              "button",
              {
                onClick: () => setIsCategoryMenuOpen((o) => !o),
                className: "flex items-center text-gray-700 dark:text-gray-200 hover:text-kmer-green font-semibold",
                children: [
                  t("header.categories"),
                  /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ChevronDownIcon, { className: `w-4 h-4 ml-1 transition-transform ${isCategoryMenuOpen ? "rotate-180" : ""}` })
                ]
              }
            ),
            isCategoryMenuOpen && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "absolute left-0 mt-2 w-[840px] max-w-[calc(100vw-2rem)] bg-white dark:bg-gray-800 rounded-md shadow-xl z-50 p-6", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "flex flex-row flex-wrap gap-x-6 gap-y-4", children: categoryTree.map((mainCat) => /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "w-44", children: [
              /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
                "button",
                {
                  onClick: () => {
                    onNavigateToCategory(mainCat.id);
                    setIsCategoryMenuOpen(false);
                  },
                  className: "font-bold text-md text-gray-800 dark:text-gray-100 hover:text-kmer-green mb-2 w-full text-left",
                  children: t(mainCat.name)
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "space-y-1", children: mainCat.subCategories.map((subCat) => /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
                "button",
                {
                  onClick: () => {
                    onNavigateToCategory(subCat.id);
                    setIsCategoryMenuOpen(false);
                  },
                  className: "w-full text-left block text-sm text-gray-600 dark:text-gray-300 hover:text-kmer-green",
                  children: t(subCat.name)
                },
                subCat.id
              )) })
            ] }, mainCat.id)) }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("button", { onClick: onNavigateToPromotions, className: "text-gray-700 dark:text-gray-200 hover:text-kmer-green font-semibold flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(TagIcon, { className: "w-5 h-5 text-kmer-red" }),
            t("header.promotions")
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("button", { onClick: onNavigateToFlashSales, className: "text-gray-700 dark:text-gray-200 hover:text-kmer-green font-semibold flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(BoltIcon, { className: "w-5 h-5 text-blue-500" }),
            t("header.flashSales")
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: onNavigateToStores, className: "text-gray-700 dark:text-gray-200 hover:text-kmer-green font-semibold", children: t("header.stores") }),
          /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "relative", ref: servicesMenuRef, children: [
            /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(
              "button",
              {
                onClick: () => setIsServicesMenuOpen((o) => !o),
                className: "text-gray-700 dark:text-gray-200 hover:text-kmer-green font-semibold flex items-center gap-1",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(SparklesIcon, { className: "w-5 h-5 text-purple-500" }),
                  t("header.services"),
                  /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ChevronDownIcon, { className: `w-4 h-4 ml-1 transition-transform ${isServicesMenuOpen ? "rotate-180" : ""}` })
                ]
              }
            ),
            isServicesMenuOpen && serviceCategories.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "absolute left-0 mt-2 w-56 bg-white dark:bg-gray-800 rounded-md shadow-lg py-1 ring-1 ring-black ring-opacity-5 z-50", children: serviceCategories.map((subCat) => /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
              "button",
              {
                onClick: () => {
                  onNavigateToCategory(subCat.id);
                  setIsServicesMenuOpen(false);
                },
                className: "w-full text-left block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700",
                children: t(subCat.name)
              },
              subCat.id
            )) })
          ] }),
          isPremiumProgramEnabled && (!user || user.role === "customer") && /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("button", { onClick: user ? onNavigateToBecomePremium : onOpenLogin, className: "text-kmer-yellow hover:text-yellow-400 font-bold flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(StarIcon, { className: "w-5 h-5" }),
            t("header.becomePremium")
          ] })
        ] })
      ] }),
      isMenuOpen && /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "lg:hidden absolute top-full left-0 w-full bg-white dark:bg-gray-800 shadow-lg border-t border-gray-200 dark:border-gray-700 max-h-[calc(100vh-68px)] flex flex-col", children: [
        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "p-4 border-b border-gray-200 dark:border-gray-700 flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("form", { onSubmit: (e) => handleSearchSubmit(e, mobileSearchQuery), children: /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
            "input",
            {
              type: "text",
              placeholder: t("header.searchPlaceholder"),
              value: mobileSearchQuery,
              onChange: (e) => setMobileSearchQuery(e.target.value),
              className: "w-full pl-4 pr-10 py-2 rounded-full border border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-kmer-green"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { type: "submit", className: "absolute inset-y-0 right-0 flex items-center pr-3 text-gray-500 dark:text-gray-400", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(SearchIcon, { className: "h-5 w-5" }) })
        ] }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "flex-grow overflow-y-auto p-4", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("nav", { className: "flex flex-col space-y-4", children: [
          user?.role !== "delivery_agent" && user?.role !== "depot_agent" && /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(import_jsx_runtime9.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: () => {
              onNavigateToPromotions();
              setIsMenuOpen(false);
            }, className: "text-left font-semibold py-2", children: t("header.promotions") }),
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: () => {
              onNavigateToFlashSales();
              setIsMenuOpen(false);
            }, className: "text-left font-semibold py-2", children: t("header.flashSales") }),
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: () => {
              onNavigateToStores();
              setIsMenuOpen(false);
            }, className: "text-left font-semibold py-2", children: t("header.stores") }),
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: () => {
              onNavigateToServices();
              setIsMenuOpen(false);
            }, className: "text-left font-semibold py-2", children: t("header.services") }),
            (!user || user.role === "customer") && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: () => {
              onNavigateToBecomeSeller();
              setIsMenuOpen(false);
            }, className: "text-left text-kmer-green font-bold py-2", children: t("header.becomeSeller") }),
            /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "border-t border-gray-200 dark:border-gray-700 pt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("h3", { className: "font-bold text-gray-500 dark:text-gray-400 text-sm py-2", children: t("header.categories") }),
              /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "flex flex-col items-start", children: categoryTree.map((mainCat) => /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "w-full", children: [
                /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: () => {
                  onNavigateToCategory(mainCat.id);
                  setIsMenuOpen(false);
                }, className: "text-left block py-1.5 font-semibold", children: t(mainCat.name) }),
                /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "pl-4", children: mainCat.subCategories.map((subCat) => /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: () => {
                  onNavigateToCategory(subCat.id);
                  setIsMenuOpen(false);
                }, className: "text-left block py-1", children: t(subCat.name) }, subCat.id)) })
              ] }, mainCat.id)) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "border-t border-gray-200 dark:border-gray-700 pt-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("h3", { className: "font-bold text-gray-500 dark:text-gray-400 text-sm py-2", children: t("header.myAccount") }),
            /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "flex flex-col items-start", children: [
              user ? userMenuItems.map((item) => /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("button", { onClick: () => {
                item.action();
                setIsMenuOpen(false);
              }, className: "text-left flex items-center gap-3 py-1.5", children: [
                item.icon,
                " ",
                item.label
              ] }, item.label)) : /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: () => {
                onOpenLogin();
                setIsMenuOpen(false);
              }, className: "text-left font-semibold py-2", children: t("header.login") }),
              isPremiumProgramEnabled && (!user || user.role === "customer") && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: () => {
                (user ? onNavigateToBecomePremium : onOpenLogin)();
                setIsMenuOpen(false);
              }, className: "text-left font-bold text-kmer-yellow py-2", children: t("header.becomePremium") })
            ] })
          ] })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "p-4 border-t border-gray-200 dark:border-gray-700 flex-shrink-0 flex justify-center items-center gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: () => setLanguage(language === "fr" ? "en" : "fr"), className: "flex items-center gap-2 text-sm font-semibold text-gray-600 dark:text-gray-300 hover:text-kmer-green p-2 rounded-lg", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("span", { children: [
            "Langue: ",
            language.toUpperCase()
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { onClick: toggleTheme, className: "p-2 rounded-full text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700", children: theme === "dark" ? /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(SunIcon, { className: "h-6 w-6" }) : /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(MoonIcon, { className: "h-6 w-6" }) })
        ] }),
        user && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "p-4 border-t border-gray-200 dark:border-gray-700 flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("button", { onClick: () => {
          onLogout();
          setIsMenuOpen(false);
        }, className: "w-full bg-gray-100 dark:bg-gray-700 font-bold py-2 rounded-lg flex items-center justify-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ArrowRightOnRectangleIcon, { className: "h-5 w-5" }),
          " ",
          t("header.logout")
        ] }) })
      ] })
    ] });
  };

  // components/Footer.tsx
  var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
  var paymentIconMap = {
    pm1: OrangeMoneyLogo,
    pm2: MtnMomoLogo,
    pm3: VisaIcon,
    pm4: MastercardIcon,
    pm5: PaypalIcon
  };
  var Footer = ({ onNavigate, logoUrl, paymentMethods, socialLinks, companyName }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("footer", { className: "bg-gray-800 text-white dark:bg-gray-950", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "container mx-auto px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "flex flex-col items-start", children: [
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(LogoIcon, { className: "h-10 mb-4", logoUrl }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("p", { className: "text-gray-400", children: t("footer.aboutKmerZone") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("h3", { className: "text-lg font-bold mb-4 text-white", children: t("footer.quickLinks") }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("ul", { className: "space-y-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => onNavigate("about"), className: "text-gray-400 hover:text-white", children: t("footer.aboutUs") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => onNavigate("contact"), className: "text-gray-400 hover:text-white", children: t("footer.contact") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => onNavigate("faq"), className: "text-gray-400 hover:text-white", children: t("footer.faq") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => onNavigate("careers"), className: "text-gray-400 hover:text-white", children: t("footer.careers") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => onNavigate("terms-of-service"), className: "text-gray-400 hover:text-white", children: t("footer.terms") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => onNavigate("privacy-policy"), className: "text-gray-400 hover:text-white", children: t("footer.privacy") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => onNavigate("sitemap"), className: "text-gray-400 hover:text-white", children: "Plan du site" }) })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("h3", { className: "text-lg font-bold mb-4 text-white", children: t("footer.forSellers") }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("ul", { className: "space-y-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => onNavigate("sell"), className: "text-gray-400 hover:text-white", children: t("footer.sellOnKmerZone") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => onNavigate("training-center"), className: "text-gray-400 hover:text-white", children: t("footer.trainingCenter") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { onClick: () => onNavigate("logistics"), className: "text-gray-400 hover:text-white", children: t("footer.logistics") }) })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("h3", { className: "text-lg font-bold mb-4 text-white", children: t("footer.followUs") }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "flex space-x-4 mb-6", children: [
            socialLinks?.facebook?.iconUrl && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("a", { href: socialLinks.facebook.linkUrl, target: "_blank", rel: "noopener noreferrer", className: "text-gray-400 hover:text-white", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("img", { src: socialLinks.facebook.iconUrl, alt: "Facebook", className: "h-6 w-6" }) }),
            socialLinks?.twitter?.iconUrl && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("a", { href: socialLinks.twitter.linkUrl, target: "_blank", rel: "noopener noreferrer", className: "text-gray-400 hover:text-white", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("img", { src: socialLinks.twitter.iconUrl, alt: "Twitter", className: "h-6 w-6" }) }),
            socialLinks?.instagram?.iconUrl && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("a", { href: socialLinks.instagram.linkUrl, target: "_blank", rel: "noopener noreferrer", className: "text-gray-400 hover:text-white", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("img", { src: socialLinks.instagram.iconUrl, alt: "Instagram", className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("h3", { className: "text-lg font-bold mb-4 text-white", children: t("footer.paymentMethods") }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "flex items-center space-x-2 flex-wrap gap-y-2", children: paymentMethods.map((method) => {
            const IconComponent = paymentIconMap[method.id];
            if (method.imageUrl) {
              return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("img", { src: method.imageUrl, alt: method.name, title: method.name, className: "h-8 bg-white rounded-md p-1" }, method.id);
            }
            if (IconComponent) {
              return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(IconComponent, { className: "h-8 w-auto", title: method.name }, method.id);
            }
            return null;
          }) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "mt-12 border-t border-gray-700 dark:border-gray-800 pt-6 text-center text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("p", { children: t("footer.copyright", (/* @__PURE__ */ new Date()).getFullYear(), companyName) }) })
    ] }) });
  };
  var Footer_default = Footer;

  // components/PageRouter.tsx
  var import_react82 = __toESM(require_react(), 1);

  // components/HomePage.tsx
  var import_react14 = __toESM(require_react(), 1);

  // components/CategoryCard.tsx
  var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
  var CategoryCard = ({ category, onClick }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(
      "button",
      {
        onClick: () => onClick(category.id),
        className: "group relative block w-full aspect-square rounded-lg overflow-hidden shadow-md hover:shadow-xl transition-shadow duration-300",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
            "img",
            {
              src: category.imageUrl,
              alt: t(category.name),
              className: "w-full h-full object-cover group-hover:scale-110 transition-transform duration-300"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "absolute inset-0 bg-black bg-opacity-40 group-hover:bg-opacity-50 transition-colors duration-300 flex items-center justify-center p-2", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("h3", { className: "text-white text-lg font-bold text-center", style: { textShadow: "1px 1px 3px rgba(0,0,0,0.7)" }, children: t(category.name) }) })
        ]
      }
    );
  };
  var CategoryCard_default = CategoryCard;

  // components/ProductCard.tsx
  var import_react13 = __toESM(require_react(), 1);

  // contexts/ComparisonContext.tsx
  var import_react12 = __toESM(require_react(), 1);
  var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
  var ComparisonContext = (0, import_react12.createContext)(void 0);
  var ComparisonProvider = ({ children }) => {
    const [comparisonList, setComparisonList] = (0, import_react12.useState)([]);
    const [products, setProducts] = (0, import_react12.useState)([]);
    const toggleComparison = (0, import_react12.useCallback)((productId) => {
      setComparisonList((prevList) => {
        if (prevList.includes(productId)) {
          return prevList.filter((id) => id !== productId);
        } else {
          if (prevList.length >= 4) {
            alert("Vous ne pouvez comparer que 4 produits \xE0 la fois.");
            return prevList;
          }
          return [...prevList, productId];
        }
      });
    }, []);
    const isInComparison = (0, import_react12.useCallback)((productId) => {
      return comparisonList.includes(productId);
    }, [comparisonList]);
    const clearComparison = (0, import_react12.useCallback)(() => {
      setComparisonList([]);
    }, []);
    const contextValue = (0, import_react12.useMemo)(() => ({
      comparisonList,
      products,
      setProducts,
      toggleComparison,
      isInComparison,
      clearComparison
    }), [comparisonList, products, setProducts, toggleComparison, isInComparison, clearComparison]);
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(ComparisonContext.Provider, { value: contextValue, children });
  };
  var useComparison = () => {
    const context = (0, import_react12.useContext)(ComparisonContext);
    if (context === void 0) {
      throw new Error("useComparison must be used within a ComparisonProvider");
    }
    return context;
  };

  // components/ProductCard.tsx
  var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
  var PLACEHOLDER_IMAGE_URL = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none'%3E%3Crect width='24' height='24' fill='%23E5E7EB'/%3E%3Cpath d='M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z' stroke='%239CA3AF' stroke-width='1.5'/%3E%3C/svg%3E";
  var getActiveFlashSalePrice = (productId, flashSales) => {
    const now = /* @__PURE__ */ new Date();
    for (const sale of flashSales) {
      const startDate = new Date(sale.startDate);
      const endDate = new Date(sale.endDate);
      if (now >= startDate && now <= endDate) {
        const productInSale = sale.products.find((p) => p.productId === productId && p.status === "approved");
        if (productInSale) return productInSale.flashPrice;
      }
    }
    return null;
  };
  var isPromotionActive = (product) => {
    if (!product.promotionPrice || product.promotionPrice >= product.price) {
      return false;
    }
    const now = /* @__PURE__ */ new Date();
    const startDate = product.promotionStartDate ? /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") : null;
    const endDate = product.promotionEndDate ? /* @__PURE__ */ new Date(product.promotionEndDate + "T23:59:59") : null;
    if (!startDate && !endDate) return false;
    if (startDate && endDate) return now >= startDate && now <= endDate;
    if (startDate) return now >= startDate;
    if (endDate) return now <= endDate;
    return false;
  };
  var ProductCard = ({ product, onProductClick, onVendorClick, location, flashSales, isComparisonEnabled, isFlashSaleUpcoming, stores }) => {
    const { addToCart } = useCart();
    const { isWishlisted, toggleWishlist } = useWishlist();
    const { isInComparison, toggleComparison } = useComparison();
    const { user, toggleFollowStore } = useAuth();
    const isMyProduct = user?.role === "seller" && user.shopName === product.vendor;
    const hasVariants = product.variants && product.variants.length > 0;
    const store = (0, import_react13.useMemo)(() => stores.find((s) => s.name === product.vendor), [stores, product.vendor]);
    const isFollowingStore = user?.followedStores?.includes(store?.id || "");
    const isService = (product.type || "product") === "service";
    const handleAddToCart = (e) => {
      e.stopPropagation();
      if (hasVariants) {
        onProductClick(product);
        return;
      }
      if (isService || product.stock > 0) {
        addToCart(product, 1);
      }
    };
    const handleWishlistClick = (e) => {
      e.stopPropagation();
      toggleWishlist(product.id);
    };
    const handleCompareClick = (e) => {
      e.stopPropagation();
      toggleComparison(product.id);
    };
    const handleFollowClick = (e) => {
      e.stopPropagation();
      if (store && user) {
        toggleFollowStore(store.id);
      } else if (!user) {
        alert("Veuillez vous connecter pour suivre une boutique.");
      }
    };
    const handleVendorClick = (e) => {
      e.stopPropagation();
      onVendorClick(product.vendor);
    };
    const flashPrice = getActiveFlashSalePrice(product.id, flashSales);
    const promotionIsActive = isPromotionActive(product);
    const promotionIsDefined = !!(product.promotionPrice && product.promotionPrice < product.price && (product.promotionStartDate || product.promotionEndDate));
    const promotionIsUpcoming = promotionIsDefined && !promotionIsActive && product.promotionStartDate && /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") > /* @__PURE__ */ new Date();
    const finalPrice = flashPrice ?? (promotionIsActive ? product.promotionPrice : product.price);
    const originalPrice = flashPrice || promotionIsActive && product.promotionPrice ? product.price : null;
    const promotionPercentage = originalPrice ? Math.round((originalPrice - finalPrice) / originalPrice * 100) : 0;
    const totalStock = hasVariants ? (product.variantDetails || []).reduce((sum, v) => sum + v.stock, 0) : product.stock;
    const inComparison = isInComparison(product.id);
    const displayImage = product.imageUrls[0] || PLACEHOLDER_IMAGE_URL;
    const averageRating = (0, import_react13.useMemo)(() => {
      const approvedReviews = product.reviews.filter((r) => r.status === "approved");
      if (approvedReviews.length === 0) return 0;
      return approvedReviews.reduce((acc, r) => acc + r.rating, 0) / approvedReviews.length;
    }, [product.reviews]);
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { onClick: () => onProductClick(product), className: "bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden group transition-all duration-300 hover:shadow-2xl hover:-translate-y-1 cursor-pointer flex flex-col", children: [
      /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "relative", children: [
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("img", { className: "h-56 w-full object-cover", src: displayImage, alt: product.name }),
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "absolute inset-0 bg-black bg-opacity-20 group-hover:bg-opacity-10 transition-all duration-300" }),
        isFlashSaleUpcoming && /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "absolute top-2 left-2 bg-purple-600 text-white text-sm font-bold px-3 py-1.5 rounded-md shadow-lg flex items-center gap-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(CalendarDaysIcon, { className: "w-4 h-4" }),
          " VENTE BIENT\xD4T"
        ] }),
        flashPrice && !isFlashSaleUpcoming && /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "absolute top-2 left-2 bg-blue-600 text-white text-sm font-bold px-3 py-1.5 rounded-md shadow-lg flex items-center gap-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(BoltIcon, { className: "w-4 h-4" }),
          " VENTE FLASH"
        ] }),
        !flashPrice && !isFlashSaleUpcoming && promotionIsUpcoming && /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "absolute top-2 left-2 bg-blue-500 text-white text-xs font-bold px-3 py-1.5 rounded-md shadow-lg", children: "PROMO \xC0 VENIR" }),
        !flashPrice && !isFlashSaleUpcoming && promotionIsActive && /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "absolute top-2 left-2 bg-kmer-red text-white text-sm font-bold px-3 py-1.5 rounded-md shadow-lg", children: [
          "-",
          promotionPercentage,
          "%"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "absolute top-2 right-2 flex flex-col gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
            "button",
            {
              onClick: handleWishlistClick,
              className: "bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm rounded-full p-2 hover:bg-white dark:hover:bg-gray-700 transition-colors",
              "aria-label": "Ajouter \xE0 la liste de souhaits",
              children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(HeartIcon, { className: "h-5 w-5", filled: isWishlisted(product.id) })
            }
          ),
          user && user.role === "customer" && /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
            "button",
            {
              onClick: handleFollowClick,
              className: `bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm rounded-full p-2 hover:bg-white dark:hover:bg-gray-700 transition-colors ${isFollowingStore ? "text-kmer-green" : ""}`,
              "aria-label": "Suivre la boutique",
              children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(BookmarkSquareIcon, { className: "h-5 w-5" })
            }
          ),
          isComparisonEnabled && /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
            "button",
            {
              onClick: handleCompareClick,
              className: `bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm rounded-full p-2 hover:bg-white dark:hover:bg-gray-700 transition-colors ${inComparison ? "text-kmer-green" : ""}`,
              "aria-label": "Ajouter \xE0 la comparaison",
              children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(ScaleIcon, { className: "h-5 w-5" })
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "absolute bottom-2 right-2", children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
          "button",
          {
            onClick: handleAddToCart,
            disabled: !isService && totalStock === 0 || isMyProduct,
            className: `flex items-center justify-center h-12 w-12 text-gray-900 rounded-full shadow-md transform transition-all duration-300 hover:scale-110 bg-kmer-yellow disabled:bg-gray-400 dark:disabled:bg-gray-600 disabled:cursor-not-allowed`,
            "aria-label": isMyProduct ? "Vous ne pouvez pas acheter votre propre produit" : isService ? "R\xE9server le service" : totalStock === 0 ? "\xC9puis\xE9" : hasVariants ? "Choisir options" : "Ajouter au panier",
            title: isMyProduct ? "Vous ne pouvez pas acheter votre propre produit" : isService ? "R\xE9server le service" : hasVariants ? "Choisir les options" : "Ajouter au panier",
            children: !isService && totalStock === 0 ? /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("span", { className: "text-xs font-bold text-white", children: "\xC9PUIS\xC9" }) : isService ? /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(CalendarDaysIcon, { className: "h-5 w-5" }) : /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(ShoppingCartIcon, { className: "h-5 w-5" })
          }
        ) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "p-4 flex-grow flex flex-col", children: [
        /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "flex justify-between items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("button", { onClick: handleVendorClick, className: "text-sm text-gray-500 dark:text-gray-400 mb-1 hover:text-kmer-green hover:underline text-left truncate flex items-center gap-1.5", children: [
            /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("span", { children: product.vendor }),
            store?.isCertified && /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(ShieldCheckIcon, { className: "w-4 h-4 text-green-500", title: "Vendeur Certifi\xE9" })
          ] }),
          location && /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("span", { className: "text-xs text-gray-500 dark:text-gray-400 flex items-center gap-1 flex-shrink-0", children: [
            /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(MapPinIcon, { className: "w-3.5 h-3.5" }),
            location
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("h3", { className: "text-lg font-semibold text-gray-800 dark:text-white truncate flex-grow", children: product.name }),
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "flex items-center gap-2 mt-1 h-5", children: averageRating > 0 && /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(import_jsx_runtime13.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "flex items-center", children: [...Array(5)].map((_, i) => /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(StarIcon, { className: "w-4 h-4 text-yellow-400", filled: i < Math.round(averageRating) }, i)) }),
          /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("span", { className: "text-xs text-gray-500", children: [
            "(",
            product.reviews.filter((r) => r.status === "approved").length,
            ")"
          ] })
        ] }) }),
        promotionIsActive && product.promotionEndDate && !flashPrice && /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "flex items-center gap-1 text-xs text-yellow-600 dark:text-yellow-400 mt-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(CalendarDaysIcon, { className: "w-4 h-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("span", { children: [
            "Se termine le ",
            new Date(product.promotionEndDate).toLocaleDateString("fr-FR")
          ] })
        ] }),
        promotionIsUpcoming && product.promotionStartDate && !flashPrice && /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "flex items-center gap-1 text-xs text-blue-500 dark:text-blue-400 mt-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(CalendarDaysIcon, { className: "w-4 h-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("span", { children: [
            "Promo le ",
            new Date(product.promotionStartDate).toLocaleDateString("fr-FR")
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "mt-2", children: flashPrice || promotionIsActive ? /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "flex items-baseline gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("p", { className: `text-xl font-bold ${flashPrice ? "text-blue-600" : "text-kmer-red"}`, children: [
            finalPrice.toLocaleString("fr-CM"),
            " FCFA"
          ] }),
          originalPrice && /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400 line-through", children: [
            originalPrice.toLocaleString("fr-CM"),
            " FCFA"
          ] })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("p", { className: "text-xl font-bold text-kmer-green", children: [
          finalPrice.toLocaleString("fr-CM"),
          " FCFA"
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "mt-2 text-sm font-bold", children: isService ? /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("p", { className: "text-green-600", children: "Service Disponible" }) : totalStock > 0 ? /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("p", { className: totalStock < 5 ? "text-orange-500 font-semibold" : "text-green-600", children: [
          totalStock,
          " en stock"
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("p", { className: "text-red-500 font-semibold", children: "Rupture de stock" }) })
      ] })
    ] });
  };
  var ProductCard_default = ProductCard;

  // components/StoreCard.tsx
  var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
  var StoreCard = ({ store, onVisitStore }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(
      "button",
      {
        onClick: () => onVisitStore(store.name),
        className: "group relative flex flex-col items-center text-center bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300",
        children: [
          store.status !== "active" && /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: `absolute top-2 left-2 text-xs font-bold px-2 py-0.5 rounded-full z-10 ${store.status === "pending" ? "bg-yellow-100 text-yellow-700 dark:bg-yellow-900/50 dark:text-yellow-300" : "bg-red-100 text-red-700 dark:bg-red-900/50 dark:text-red-300"}`, children: store.status === "pending" ? "En attente" : "Suspendu" }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "w-24 h-24 mb-4 rounded-full overflow-hidden bg-gray-100 dark:bg-gray-700 flex items-center justify-center border-2 border-gray-200 dark:border-gray-600", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("img", { src: store.logoUrl, alt: `${store.name} logo`, className: "w-full h-full object-contain" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("h3", { className: "font-bold text-md text-gray-800 dark:text-white group-hover:text-kmer-green", children: store.name }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: store.category })
        ]
      }
    );
  };
  var StoreCard_default = StoreCard;

  // components/HomePage.tsx
  var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
  var StoryCarousel = ({ stores, onViewStories }) => {
    const { t } = useLanguage();
    const storesWithStories = stores.filter((store) => {
      if (!store.stories || store.stories.length === 0) return false;
      const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1e3);
      return store.stories.some((story) => new Date(story.createdAt) > twentyFourHoursAgo);
    });
    if (storesWithStories.length === 0) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "py-8", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "container mx-auto px-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("h2", { className: "text-2xl font-bold mb-4 dark:text-white", children: t("home.storiesTitle") }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "flex space-x-4 overflow-x-auto pb-4", children: storesWithStories.map((store) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "flex-shrink-0 text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("button", { onClick: () => onViewStories(store), className: "w-20 h-20 p-1 rounded-full border-2 border-kmer-red hover:border-kmer-yellow transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("img", { src: store.logoUrl, alt: store.name, className: "w-full h-full object-contain rounded-full bg-white" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("p", { className: "text-xs mt-2 font-semibold truncate w-20", children: store.name })
      ] }, store.id)) })
    ] }) });
  };
  var AdCarousel = ({ advertisements }) => {
    const [currentIndex, setCurrentIndex] = (0, import_react14.useState)(0);
    const timeoutRef = (0, import_react14.useRef)(null);
    const resetTimeout = () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
    (0, import_react14.useEffect)(() => {
      resetTimeout();
      timeoutRef.current = setTimeout(
        () => setCurrentIndex((prevIndex) => prevIndex === advertisements.length - 1 ? 0 : prevIndex + 1),
        5e3
        // Change slide every 5 seconds
      );
      return () => {
        resetTimeout();
      };
    }, [currentIndex, advertisements.length]);
    const prevSlide = () => {
      const isFirstSlide = currentIndex === 0;
      const newIndex = isFirstSlide ? advertisements.length - 1 : currentIndex - 1;
      setCurrentIndex(newIndex);
    };
    const nextSlide = () => {
      const isLastSlide = currentIndex === advertisements.length - 1;
      const newIndex = isLastSlide ? 0 : currentIndex + 1;
      setCurrentIndex(newIndex);
    };
    const goToSlide = (slideIndex) => {
      setCurrentIndex(slideIndex);
    };
    if (advertisements.length === 0) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "relative w-full h-48 sm:h-64 rounded-lg shadow-lg group", children: [
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "w-full h-full rounded-lg overflow-hidden", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
        "div",
        {
          className: "flex transition-transform ease-in-out duration-700 h-full",
          style: { transform: `translateX(-${currentIndex * 100}%)` },
          children: advertisements.map((ad) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("a", { href: ad.linkUrl, target: "_blank", rel: "noopener noreferrer", className: "flex-shrink-0 w-full h-full", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("img", { src: ad.imageUrl, alt: "Publicit\xE9", className: "w-full h-full object-cover" }) }, ad.id))
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { onClick: prevSlide, className: "hidden group-hover:block absolute top-1/2 -translate-y-1/2 left-5 text-2xl rounded-full p-2 bg-black/20 text-white cursor-pointer", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(ChevronLeftIcon, { className: "w-6 h-6" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { onClick: nextSlide, className: "hidden group-hover:block absolute top-1/2 -translate-y-1/2 right-5 text-2xl rounded-full p-2 bg-black/20 text-white cursor-pointer", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(ChevronRightIcon, { className: "w-6 h-6" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "absolute bottom-5 left-1/2 -translate-x-1/2 flex justify-center py-2 space-x-2", children: advertisements.map((_, slideIndex) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
        "div",
        {
          onClick: () => goToSlide(slideIndex),
          className: `w-3 h-3 rounded-full cursor-pointer transition-colors ${currentIndex === slideIndex ? "bg-white" : "bg-white/50"}`
        },
        slideIndex
      )) })
    ] });
  };
  var RecommendedForYou = ({ userOrders, wishlist, recentlyViewedIds, products, categories, onProductClick, onVendorClick, stores, flashSales, isComparisonEnabled }) => {
    const { user } = useAuth();
    const { t } = useLanguage();
    const recommendedProducts = (0, import_react14.useMemo)(() => {
      if (!user) return [];
      const interactedProductIds = /* @__PURE__ */ new Set([
        ...recentlyViewedIds,
        ...wishlist,
        ...userOrders.flatMap((o) => o.items.map((i) => i.id))
      ]);
      if (interactedProductIds.size === 0) return [];
      const categoryCounts = {};
      interactedProductIds.forEach((id) => {
        const product = products.find((p) => p.id === id);
        if (product) {
          categoryCounts[product.categoryId] = (categoryCounts[product.categoryId] || 0) + 1;
        }
      });
      const sortedCategories = Object.entries(categoryCounts).sort((a, b) => b[1] - a[1]);
      if (sortedCategories.length === 0) return [];
      const topCategoryId = sortedCategories[0][0];
      return products.filter((p) => p.categoryId === topCategoryId && !interactedProductIds.has(p.id)).slice(0, 4);
    }, [user, userOrders, wishlist, recentlyViewedIds, products]);
    if (recommendedProducts.length === 0) return null;
    const findStoreLocation = (vendorName) => stores.find((s) => s.name === vendorName)?.location;
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("section", { className: "py-16 bg-white dark:bg-gray-800/30", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "container mx-auto px-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "flex justify-center items-center gap-4 mb-10", children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(StarIcon, { className: "w-8 h-8 text-kmer-yellow" }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("h2", { className: "text-3xl font-bold text-center dark:text-white", children: t("home.recommendedForYou") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8", children: recommendedProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
        ProductCard_default,
        {
          product,
          onProductClick,
          onVendorClick,
          location: findStoreLocation(product.vendor),
          flashSales,
          isComparisonEnabled,
          stores
        },
        product.id
      )) })
    ] }) });
  };
  var HomePage = (props) => {
    const { categories, products, stores, flashSales, advertisements, siteSettings, onProductClick, onCategoryClick, onVendorClick, onVisitStore, onViewStories, isComparisonEnabled, isStoriesEnabled, recentlyViewedIds, userOrders, wishlist } = props;
    const { t } = useLanguage();
    const popularProductsRef = import_react14.default.useRef(null);
    const findStoreLocation = (vendorName) => stores.find((s) => s.name === vendorName)?.location;
    const mainCategories = categories.filter((c) => !c.parentId);
    const madeInCameroonCategoryId = "cat-main-3";
    const madeInCameroonProducts = products.filter((p) => {
      const category = categories.find((c) => c.id === p.categoryId);
      return category?.parentId === madeInCameroonCategoryId || p.categoryId === madeInCameroonCategoryId;
    }).slice(0, 4);
    const recentlyViewedProducts = (0, import_react14.useMemo)(() => {
      if (!recentlyViewedIds || recentlyViewedIds.length === 0) return [];
      const productMap = new Map(products.map((p) => [p.id, p]));
      return recentlyViewedIds.map((id) => productMap.get(id)).filter((p) => !!p);
    }, [recentlyViewedIds, products]);
    const sortedStores = (0, import_react14.useMemo)(() => {
      return [...stores].filter((s) => s.status === "active").sort((a, b) => {
        if (a.premiumStatus === "premium" && b.premiumStatus !== "premium") return -1;
        if (a.premiumStatus !== "premium" && b.premiumStatus === "premium") return 1;
        return 0;
      });
    }, [stores]);
    const handleScrollToProducts = () => {
      popularProductsRef.current?.scrollIntoView({ behavior: "smooth" });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)(import_jsx_runtime15.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("section", { className: "relative bg-gradient-to-br from-kmer-green to-green-900 text-white h-[60vh] flex items-center justify-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "absolute inset-0", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("img", { src: siteSettings.bannerUrl || "https://picsum.photos/seed/market/1600/900", alt: "March\xE9 camerounais", className: "w-full h-full object-cover opacity-20" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "relative z-10 text-center p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("h1", { className: "text-4xl md:text-6xl font-bold mb-4", style: { textShadow: "2px 2px 4px rgba(0,0,0,0.5)" }, children: t("home.heroTitle") }),
          /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("p", { className: "text-lg md:text-xl mb-8 max-w-2xl mx-auto", children: t("home.heroSubtitle") }),
          /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("button", { onClick: handleScrollToProducts, className: "bg-kmer-yellow text-gray-900 font-bold py-3 px-8 rounded-full text-lg hover:bg-yellow-300 transition-transform transform hover:scale-105", children: t("home.startShopping") })
        ] })
      ] }),
      advertisements.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("section", { className: "py-8 bg-gray-100 dark:bg-gray-800/50", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "container mx-auto px-6", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(AdCarousel, { advertisements }) }) }),
      isStoriesEnabled && /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(StoryCarousel, { stores, onViewStories }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(RecommendedForYou, { ...props }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("section", { className: "py-16 bg-white dark:bg-gray-800/30", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "container mx-auto px-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "flex justify-center items-center gap-4 mb-10", children: [
          /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(TagIcon, { className: "w-8 h-8 text-kmer-red" }),
          /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("h2", { className: "text-3xl font-bold text-center dark:text-white", children: t("home.promotionsTitle") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8", children: products.filter((p) => p.promotionPrice).slice(0, 4).map((product) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: findStoreLocation(product.vendor), flashSales, isComparisonEnabled, stores }, product.id)) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("section", { className: "py-16 bg-gray-50 dark:bg-gray-900", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "container mx-auto px-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("h2", { className: "text-3xl font-bold text-center mb-10 dark:text-white", children: t("home.categoriesTitle") }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-8", children: mainCategories.map((cat) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(CategoryCard_default, { category: cat, onClick: onCategoryClick }, cat.id)) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("section", { ref: popularProductsRef, className: "py-16 bg-white dark:bg-gray-800/30", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "container mx-auto px-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("h2", { className: "text-3xl font-bold text-center mb-10 dark:text-white", children: t("home.popularProducts") }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8", children: products.slice(0, 4).map((product) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: findStoreLocation(product.vendor), flashSales, isComparisonEnabled, stores }, product.id)) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("section", { className: "py-16 bg-kmer-green/10 dark:bg-kmer-green/20", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "container mx-auto px-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "flex justify-center items-center gap-4 mb-10", children: [
          /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(SparklesIcon, { className: "w-10 h-10 text-kmer-green" }),
          /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("h2", { className: "text-3xl font-bold text-center dark:text-white", children: t("home.madeInCameroonTitle") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("p", { className: "text-center text-gray-600 dark:text-gray-300 mb-12 max-w-3xl mx-auto", children: t("home.madeInCameroonSubtitle") }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8", children: madeInCameroonProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: findStoreLocation(product.vendor), flashSales, isComparisonEnabled, stores }, product.id)) })
      ] }) }),
      recentlyViewedProducts.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("section", { className: "py-16 bg-white dark:bg-gray-800/30", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "container mx-auto px-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("h2", { className: "text-3xl font-bold text-center mb-10 dark:text-white", children: t("home.recentlyViewed") }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8", children: recentlyViewedProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
          ProductCard_default,
          {
            product,
            onProductClick,
            onVendorClick,
            location: findStoreLocation(product.vendor),
            flashSales,
            isComparisonEnabled,
            stores
          },
          product.id
        )) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("section", { className: "py-20 bg-white dark:bg-gray-800/30", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "container mx-auto px-6 text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("h2", { className: "text-3xl font-bold mb-12 dark:text-white", children: t("home.howItWorksTitle") }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "grid md:grid-cols-4 gap-10", children: [
          /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "flex flex-col items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "bg-kmer-yellow/20 p-5 rounded-full mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(ShoppingBagIcon, { className: "h-12 w-12 text-kmer-yellow" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("h3", { className: "text-xl font-semibold mb-2 dark:text-gray-200", children: t("home.howItWorksStep1Title") }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: t("home.howItWorksStep1Text") })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "flex flex-col items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "bg-kmer-red/20 p-5 rounded-full mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(CreditCardIcon, { className: "h-12 w-12 text-kmer-red" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("h3", { className: "text-xl font-semibold mb-2 dark:text-gray-200", children: t("home.howItWorksStep2Title") }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: t("home.howItWorksStep2Text") })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "flex flex-col items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "bg-kmer-green/20 p-5 rounded-full mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(TruckIcon, { className: "h-12 w-12 text-kmer-green" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("h3", { className: "text-xl font-semibold mb-2 dark:text-gray-200", children: t("home.howItWorksStep3Title") }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: t("home.howItWorksStep3Text") })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "flex flex-col items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "bg-blue-500/20 p-5 rounded-full mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(ChatBubbleBottomCenterTextIcon, { className: "h-12 w-12 text-blue-500" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("h3", { className: "text-xl font-semibold mb-2 dark:text-gray-200", children: t("home.howItWorksStep4Title") }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: t("home.howItWorksStep4Text") })
          ] })
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("section", { className: "py-16 bg-gray-50 dark:bg-gray-900", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "container mx-auto px-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("h2", { className: "text-3xl font-bold text-center mb-10 dark:text-white", children: t("home.featuredStores") }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-8", children: sortedStores.map((store) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(StoreCard_default, { store, onVisitStore }, store.id)) })
      ] }) })
    ] });
  };
  var HomePage_default = HomePage;

  // components/ProductDetail.tsx
  var import_react15 = __toESM(require_react(), 1);

  // components/RecommendedProducts.tsx
  var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
  var RecommendedProducts = ({ currentProduct, allProducts, stores, flashSales, onProductClick, onVendorClick, isComparisonEnabled }) => {
    const recommended = allProducts.filter((p) => p.categoryId === currentProduct.categoryId && p.id !== currentProduct.id).slice(0, 4);
    if (recommended.length === 0) return null;
    const findStoreLocation = (vendorName) => stores.find((s) => s.name === vendorName)?.location;
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "bg-gray-50 dark:bg-gray-900/50 py-16", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "container mx-auto px-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("h2", { className: "text-3xl font-bold text-center mb-10 dark:text-white", children: "Produits similaires" }),
      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8", children: recommended.map((product) => /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
        ProductCard_default,
        {
          product,
          onProductClick,
          onVendorClick,
          location: findStoreLocation(product.vendor),
          flashSales,
          isComparisonEnabled,
          stores
        },
        product.id
      )) })
    ] }) });
  };
  var RecommendedProducts_default = RecommendedProducts;

  // components/AutoComparison.tsx
  var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
  var AutoComparison = ({ currentProduct, otherOffers, stores, onProductClick }) => {
    const allItems = [currentProduct, ...otherOffers];
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "mt-16 bg-gray-100 dark:bg-gray-800/50 p-6 rounded-lg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("h2", { className: "text-2xl font-bold mb-4", children: "Comparer les offres" }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6", children: "Ce produit est disponible chez plusieurs vendeurs. Comparez les options ci-dessous." }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: allItems.map((product) => {
        const store = stores.find((s) => s.name === product.vendor);
        return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("button", { onClick: () => onProductClick(product), className: "p-4 border dark:border-gray-700 rounded-lg text-left hover:bg-white dark:hover:bg-gray-700 transition-colors", children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("p", { className: "font-bold", children: product.vendor }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("p", { className: "text-lg text-kmer-green font-semibold", children: [
            product.price.toLocaleString("fr-CM"),
            " FCFA"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("p", { className: "text-sm", children: [
            "Vendu depuis: ",
            store?.location
          ] })
        ] }, product.id);
      }) })
    ] });
  };
  var AutoComparison_default = AutoComparison;

  // components/ProductDetail.tsx
  var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
  var getActiveFlashSalePrice2 = (productId, flashSales) => {
    const now = /* @__PURE__ */ new Date();
    for (const sale of flashSales) {
      const startDate = new Date(sale.startDate);
      const endDate = new Date(sale.endDate);
      if (now >= startDate && now <= endDate) {
        const productInSale = sale.products.find((p) => p.productId === productId && p.status === "approved");
        if (productInSale) return productInSale.flashPrice;
      }
    }
    return null;
  };
  var isPromotionActive2 = (product) => {
    if (!product.promotionPrice || product.promotionPrice >= product.price) {
      return false;
    }
    const now = /* @__PURE__ */ new Date();
    const startDate = product.promotionStartDate ? /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") : null;
    const endDate = product.promotionEndDate ? /* @__PURE__ */ new Date(product.promotionEndDate + "T23:59:59") : null;
    if (!startDate && !endDate) {
      return false;
    }
    if (startDate && endDate) {
      return now >= startDate && now <= endDate;
    }
    if (startDate) {
      return now >= startDate;
    }
    if (endDate) {
      return now <= endDate;
    }
    return false;
  };
  var Rating = ({ rating, setRating }) => /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "flex items-center", children: [...Array(5)].map((_, i) => /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
    "button",
    {
      type: "button",
      onClick: setRating ? () => setRating(i + 1) : void 0,
      className: setRating ? "cursor-pointer" : "",
      disabled: !setRating,
      children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        StarIcon,
        {
          className: `w-5 h-5 ${i < rating ? "text-kmer-yellow" : "text-gray-300 dark:text-gray-500"}`,
          filled: i < rating
        }
      )
    },
    i
  )) });
  var ReviewForm = ({ productId, onAddReview, onOpenLogin }) => {
    const { user } = useAuth();
    const [rating, setRating] = (0, import_react15.useState)(0);
    const [comment, setComment] = (0, import_react15.useState)("");
    const [submitted, setSubmitted] = (0, import_react15.useState)(false);
    const handleSubmit = (e) => {
      e.preventDefault();
      if (!rating || !comment || !user) {
        alert("Veuillez donner une note et un commentaire.");
        return;
      }
      const newReview = {
        author: user.name,
        rating,
        comment,
        date: (/* @__PURE__ */ new Date()).toISOString().split("T")[0],
        status: "pending"
      };
      onAddReview(productId, newReview);
      setRating(0);
      setComment("");
      setSubmitted(true);
    };
    if (!user) {
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "mt-8 text-center text-gray-600 dark:text-gray-300 bg-gray-100 dark:bg-gray-800 p-4 rounded-lg", children: [
        "Vous devez \xEAtre ",
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("button", { onClick: onOpenLogin, className: "text-kmer-green font-bold underline", children: "connect\xE9" }),
        " pour laisser un avis."
      ] });
    }
    if (submitted) {
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "mt-8 text-center text-green-700 dark:text-green-300 bg-green-50 dark:bg-green-900/50 p-6 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h3", { className: "font-bold text-lg", children: "Merci pour votre avis !" }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { children: "Il a \xE9t\xE9 soumis et est en attente de mod\xE9ration avant d'\xEAtre publi\xE9." })
      ] });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("form", { onSubmit: handleSubmit, className: "mt-8 bg-gray-50 dark:bg-gray-800 p-6 rounded-lg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h3", { className: "font-bold text-lg mb-4", children: "Laissez votre avis" }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("label", { className: "block font-medium mb-1", children: "Votre note" }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Rating, { rating, setRating })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("label", { htmlFor: "comment", className: "block font-medium mb-1", children: "Votre commentaire" }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          "textarea",
          {
            id: "comment",
            rows: 4,
            value: comment,
            onChange: (e) => setComment(e.target.value),
            className: "w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600",
            placeholder: "D\xE9crivez votre exp\xE9rience avec ce produit...",
            required: true
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("button", { type: "submit", className: "bg-kmer-green text-white font-bold py-2 px-6 rounded-lg hover:bg-green-700 transition-colors", children: "Soumettre l'avis" })
    ] });
  };
  var ProductCharacteristics = ({ product }) => {
    const characteristics = [
      // Generic
      { label: "Marque", value: product.brand },
      { label: "Genre", value: product.gender },
      { label: "Mat\xE9riau", value: product.material },
      { label: "Poids", value: product.weight },
      { label: "Dimensions", value: product.dimensions },
      // Electronics
      { label: "Mod\xE8le", value: product.modelNumber },
      { label: "Couleur", value: product.color },
      { label: "Garantie", value: product.warranty },
      // Books
      { label: "Auteur", value: product.author },
      { label: "\xC9diteur", value: product.publisher },
      { label: "Ann\xE9e", value: product.publicationYear },
      { label: "ISBN", value: product.isbn },
      // Others
      { label: "N\xB0 de s\xE9rie", value: product.serialNumber },
      { label: "Date de production", value: product.productionDate ? new Date(product.productionDate).toLocaleDateString("fr-FR") : void 0 },
      { label: "Date d'expiration", value: product.expirationDate ? new Date(product.expirationDate).toLocaleDateString("fr-FR") : void 0 }
    ].filter((c) => c.value);
    if (characteristics.length === 0) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "mt-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h3", { className: "text-lg font-semibold border-b pb-2 mb-3 dark:border-gray-700", children: "Caract\xE9ristiques" }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "text-sm space-y-2", children: characteristics.map((char) => /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex", children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { className: "w-1/3 text-gray-500 dark:text-gray-400", children: char.label }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { className: "w-2/3 font-medium text-gray-800 dark:text-gray-200", children: char.value })
      ] }, char.label)) })
    ] });
  };
  var ProductDetail = ({ product, allProducts, allUsers, stores, flashSales, onBack, onAddReview, onVendorClick, onProductClick, onOpenLogin, isChatEnabled, isComparisonEnabled, onProductView }) => {
    const [quantity, setQuantity] = (0, import_react15.useState)(1);
    const [selectedVariants, setSelectedVariants] = (0, import_react15.useState)({});
    const [mainImage, setMainImage] = (0, import_react15.useState)(product.imageUrls[0]);
    const [otherOffers, setOtherOffers] = (0, import_react15.useState)([]);
    const [toastMessage, setToastMessage] = (0, import_react15.useState)(null);
    const { addToCart } = useCart();
    const { user } = useAuth();
    const { startChat } = useChatContext();
    const { isWishlisted, toggleWishlist } = useWishlist();
    const { isInComparison, toggleComparison } = useComparison();
    const isMyProduct = user?.role === "seller" && user.shopName === product.vendor;
    const vendorStore = stores.find((s) => s.name === product.vendor);
    const sellerUser = allUsers.find((u) => u.role === "seller" && u.shopName === product.vendor);
    const inComparison = isInComparison(product.id);
    const approvedReviews = product.reviews.filter((r) => r.status === "approved");
    (0, import_react15.useEffect)(() => {
      onProductView(product.id);
    }, [product.id, onProductView]);
    (0, import_react15.useEffect)(() => {
      const offers = allProducts.filter((p) => p.name === product.name && p.id !== product.id);
      setOtherOffers(offers);
      setMainImage(product.imageUrls[0]);
      setQuantity(1);
      setSelectedVariants({});
      window.scrollTo(0, 0);
    }, [product, allProducts]);
    const handleAddToCart = () => {
      addToCart(product, quantity);
    };
    const handleContactSeller = () => {
      if (sellerUser && vendorStore) {
        startChat(sellerUser, vendorStore, product);
      } else {
        alert("Impossible de trouver les informations du vendeur.");
      }
    };
    const handleShare = async () => {
      const productUrl = `${window.location.origin}${window.location.pathname}?page=product&id=${product.id}`;
      const shareData = {
        title: product.name,
        text: `D\xE9couvrez ${product.name} sur KMER ZONE !`,
        url: productUrl
      };
      if (navigator.share) {
        try {
          await navigator.share(shareData);
        } catch (err) {
          console.error("Share failed:", err);
        }
      } else if (navigator.clipboard) {
        try {
          await navigator.clipboard.writeText(productUrl);
          setToastMessage("Lien copi\xE9 dans le presse-papiers !");
          setTimeout(() => setToastMessage(null), 3e3);
        } catch (err) {
          console.error("Failed to copy: ", err);
          setToastMessage("La copie du lien a \xE9chou\xE9.");
          setTimeout(() => setToastMessage(null), 3e3);
        }
      } else {
        setToastMessage("Le partage ou la copie n'est pas support\xE9 sur votre navigateur.");
        setTimeout(() => setToastMessage(null), 3e3);
      }
    };
    const handleVariantSelect = (variantName, option) => {
      setSelectedVariants((prev) => ({ ...prev, [variantName]: option }));
    };
    const flashPrice = getActiveFlashSalePrice2(product.id, flashSales);
    const promotionIsActive = isPromotionActive2(product);
    let finalPrice = product.price;
    let priceToDisplay;
    if (flashPrice !== null) {
      priceToDisplay = /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("p", { className: "text-3xl font-bold text-blue-600", children: [
        flashPrice.toLocaleString("fr-CM"),
        " FCFA"
      ] });
      finalPrice = flashPrice;
    } else if (promotionIsActive) {
      priceToDisplay = /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("p", { className: "text-3xl font-bold text-kmer-red", children: [
        product.promotionPrice?.toLocaleString("fr-CM"),
        " FCFA"
      ] });
      finalPrice = product.promotionPrice;
    } else {
      priceToDisplay = /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("p", { className: "text-3xl font-bold text-kmer-green", children: [
        product.price.toLocaleString("fr-CM"),
        " FCFA"
      ] });
    }
    const percentageOff = flashPrice ? Math.round((product.price - flashPrice) / product.price * 100) : promotionIsActive ? Math.round((product.price - product.promotionPrice) / product.price * 100) : 0;
    const promotionIsDefined = !!(product.promotionPrice && product.promotionPrice < product.price && (product.promotionStartDate || product.promotionEndDate));
    const promotionIsUpcoming = promotionIsDefined && !promotionIsActive && product.promotionStartDate && /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") > /* @__PURE__ */ new Date();
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_jsx_runtime18.Fragment, { children: [
      toastMessage && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "fixed bottom-20 left-1/2 -translate-x-1/2 bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg z-50 animate-in fade-in-0 slide-in-from-bottom-5", children: toastMessage }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "container mx-auto px-6 py-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
          "Retour"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "grid md:grid-cols-2 gap-12", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "mb-4 relative", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("img", { src: mainImage, alt: product.name, className: "w-full h-auto max-h-[500px] object-cover rounded-lg shadow-lg" }),
              flashPrice && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "absolute top-3 left-3 bg-blue-600 text-white text-sm font-bold px-3 py-1.5 rounded-md shadow-lg flex items-center gap-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(BoltIcon, { className: "w-4 h-4" }),
                " VENTE FLASH"
              ] }),
              !flashPrice && promotionIsUpcoming && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "absolute top-3 left-3 bg-blue-500 text-white text-xs font-bold px-3 py-1.5 rounded-md shadow-lg", children: "PROMO \xC0 VENIR" }),
              !flashPrice && promotionIsActive && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "absolute top-3 left-3 bg-kmer-red text-white text-sm font-bold px-3 py-1.5 rounded-md shadow-lg", children: [
                "-",
                percentageOff,
                "%"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "flex space-x-2", children: product.imageUrls.map((url, index) => /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("img", { src: url, alt: `${product.name} thumbnail ${index + 1}`, onClick: () => setMainImage(url), className: `w-20 h-20 object-cover rounded-md cursor-pointer border-2 ${mainImage === url ? "border-kmer-green" : "border-transparent"}` }, index)) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("button", { onClick: () => onVendorClick(product.vendor), className: "text-gray-500 dark:text-gray-400 hover:text-kmer-green hover:underline", children: product.vendor }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h1", { className: "text-4xl font-bold mt-2 text-gray-800 dark:text-white", children: product.name }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center mt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Rating, { rating: approvedReviews.reduce((acc, r) => acc + r.rating, 0) / approvedReviews.length }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("span", { className: "ml-2 text-gray-600 dark:text-gray-300 text-sm", children: [
                "(",
                approvedReviews.length,
                " avis)"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "my-6", children: [
              priceToDisplay,
              (flashPrice || promotionIsActive) && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("p", { className: "text-gray-500 dark:text-gray-400 line-through", children: [
                "Prix original : ",
                product.price.toLocaleString("fr-CM"),
                " FCFA"
              ] }),
              promotionIsActive && product.promotionEndDate && !flashPrice && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center gap-1 text-sm text-yellow-600 dark:text-yellow-400 mt-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CalendarDaysIcon, { className: "w-4 h-4" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("span", { children: [
                  "L'offre se termine le ",
                  new Date(product.promotionEndDate).toLocaleDateString("fr-FR")
                ] })
              ] }),
              promotionIsUpcoming && product.promotionStartDate && !flashPrice && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center gap-1 text-sm text-blue-500 dark:text-blue-400 mt-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CalendarDaysIcon, { className: "w-4 h-4" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("span", { children: [
                  "Promotion disponible le ",
                  new Date(product.promotionStartDate).toLocaleDateString("fr-FR")
                ] })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { className: "text-gray-600 dark:text-gray-300", children: product.description }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ProductCharacteristics, { product }),
            vendorStore && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "mt-6 p-3 bg-gray-100 dark:bg-gray-800 rounded-lg flex items-center gap-2 text-sm text-gray-600 dark:text-gray-300", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(MapPinIcon, { className: "w-5 h-5 text-kmer-green flex-shrink-0" }),
              "Vendu et exp\xE9di\xE9 depuis ",
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("strong", { children: vendorStore.location })
            ] }),
            product.variants && product.variants.map((variant) => /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "mt-6", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h3", { className: "font-semibold text-gray-700 dark:text-gray-300", children: variant.name }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "flex flex-wrap gap-2 mt-2", children: variant.options.map((option) => /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("button", { onClick: () => handleVariantSelect(variant.name, option), className: `px-4 py-2 border rounded-md text-sm font-medium ${selectedVariants[variant.name] === option ? "border-kmer-green bg-kmer-green/10 text-kmer-green" : "border-gray-300 dark:border-gray-600"}`, children: option }, option)) })
            ] }, variant.name)),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "mt-8 flex flex-col sm:flex-row gap-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
                "button",
                {
                  onClick: handleAddToCart,
                  disabled: product.stock === 0 || isMyProduct,
                  className: "w-full flex-grow bg-kmer-green text-white font-bold py-3 px-6 rounded-lg flex items-center justify-center gap-3 hover:bg-green-700 transition-colors disabled:bg-gray-400 dark:disabled:bg-gray-600 disabled:cursor-not-allowed",
                  title: isMyProduct ? "Vous ne pouvez pas acheter votre propre produit" : "",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ShoppingCartIcon, { className: "w-6 h-6" }),
                    product.stock === 0 ? "Rupture de stock" : "Ajouter au panier"
                  ]
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("button", { onClick: () => toggleWishlist(product.id), className: "p-3 border-2 rounded-lg hover:border-kmer-red transition-colors", "aria-label": "Ajouter \xE0 la liste de souhaits", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(HeartIcon, { className: "w-6 h-6", filled: isWishlisted(product.id) }) }),
              isComparisonEnabled && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("button", { onClick: () => toggleComparison(product.id), className: `p-3 border-2 rounded-lg hover:border-kmer-green transition-colors ${inComparison ? "border-kmer-green text-kmer-green" : ""}`, "aria-label": "Ajouter \xE0 la comparaison", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ScaleIcon, { className: "w-6 h-6" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("button", { onClick: handleShare, className: "p-3 border-2 rounded-lg hover:border-blue-500 transition-colors", "aria-label": "Partager", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ShareIcon, { className: "w-6 h-6" }) })
            ] }),
            isChatEnabled && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
              "button",
              {
                onClick: handleContactSeller,
                disabled: isMyProduct,
                className: "mt-4 w-full bg-blue-500 text-white font-bold py-3 px-6 rounded-lg flex items-center justify-center gap-3 hover:bg-blue-600 transition-colors disabled:bg-gray-400 dark:disabled:bg-gray-600 disabled:cursor-not-allowed",
                title: isMyProduct ? "Vous ne pouvez pas contacter votre propre boutique" : "",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ChatBubbleBottomCenterTextIcon, { className: "w-6 h-6" }),
                  "Contacter le vendeur"
                ]
              }
            )
          ] })
        ] }),
        otherOffers.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(AutoComparison_default, { currentProduct: product, otherOffers, stores, onProductClick }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "mt-16", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("h2", { className: "text-2xl font-bold mb-6 border-b pb-4 dark:border-gray-700", children: [
            "Avis des clients (",
            approvedReviews.length,
            ")"
          ] }),
          approvedReviews.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "space-y-6", children: approvedReviews.map((review, index) => /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "border-b pb-6 last:border-b-0 dark:border-gray-700", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center mb-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Rating, { rating: review.rating }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { className: "ml-4 font-bold text-gray-800 dark:text-white", children: review.author })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { className: "text-gray-500 dark:text-gray-400 text-sm mb-2", children: new Date(review.date).toLocaleDateString("fr-FR") }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("p", { className: "text-gray-600 dark:text-gray-300 italic", children: [
              '"',
              review.comment,
              '"'
            ] }),
            review.sellerReply && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "mt-4 ml-8 p-4 bg-gray-100 dark:bg-gray-700/50 rounded-lg border-l-4 border-kmer-green", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { className: "font-bold text-sm text-gray-800 dark:text-gray-200", children: "R\xE9ponse du vendeur" }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("p", { className: "text-gray-600 dark:text-gray-300 italic", children: [
                '"',
                review.sellerReply.text,
                '"'
              ] })
            ] })
          ] }, index)) }) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { className: "text-gray-500 dark:text-gray-400", children: "Aucun avis pour ce produit pour le moment." }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ReviewForm, { productId: product.id, onAddReview, onOpenLogin })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        RecommendedProducts_default,
        {
          currentProduct: product,
          allProducts,
          stores,
          flashSales,
          onProductClick,
          onVendorClick,
          isComparisonEnabled
        }
      )
    ] });
  };
  var ProductDetail_default = ProductDetail;

  // components/CartView.tsx
  var import_react16 = __toESM(require_react(), 1);
  var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
  var PLACEHOLDER_IMAGE_URL2 = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none'%3E%3Crect width='24' height='24' fill='%23E5E7EB'/%3E%3Cpath d='M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z' stroke='%239CA3AF' stroke-width='1.5'/%3E%3C/svg%3E";
  var getActiveFlashSalePrice3 = (productId, flashSales) => {
    const now = /* @__PURE__ */ new Date();
    for (const sale of flashSales) {
      const startDate = new Date(sale.startDate);
      const endDate = new Date(sale.endDate);
      if (now >= startDate && now <= endDate) {
        const productInSale = sale.products.find((p) => p.productId === productId && p.status === "approved");
        if (productInSale) return productInSale.flashPrice;
      }
    }
    return null;
  };
  var isPromotionActive3 = (product) => {
    if (!product.promotionPrice || product.promotionPrice >= product.price) {
      return false;
    }
    const now = /* @__PURE__ */ new Date();
    const startDate = product.promotionStartDate ? /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") : null;
    const endDate = product.promotionEndDate ? /* @__PURE__ */ new Date(product.promotionEndDate + "T23:59:59") : null;
    if (!startDate && !endDate) {
      return false;
    }
    if (startDate && endDate) {
      return now >= startDate && now <= endDate;
    }
    if (startDate) {
      return now >= startDate;
    }
    if (endDate) {
      return now <= endDate;
    }
    return false;
  };
  var CartView = ({ onBack, onNavigateToCheckout, flashSales, allPromoCodes, appliedPromoCode, onApplyPromoCode }) => {
    const { cart, removeFromCart, updateQuantity } = useCart();
    const [promoCodeInput, setPromoCodeInput] = (0, import_react16.useState)("");
    const [promoError, setPromoError] = (0, import_react16.useState)("");
    const getFinalPrice4 = (item) => {
      if (item.selectedVariant) {
        const variantDetail = item.variantDetails?.find((vd) => {
          const vdKeys = Object.keys(vd.options);
          const selectedKeys = Object.keys(item.selectedVariant);
          if (vdKeys.length !== selectedKeys.length) return false;
          return vdKeys.every((key) => vd.options[key] === item.selectedVariant[key]);
        });
        if (variantDetail?.price) {
          return variantDetail.price;
        }
      }
      const flashPrice = getActiveFlashSalePrice3(item.id, flashSales);
      if (flashPrice !== null) return flashPrice;
      if (isPromotionActive3(item)) return item.promotionPrice;
      return item.price;
    };
    const handleApplyPromoCode = () => {
      setPromoError("");
      onApplyPromoCode(null);
      if (!promoCodeInput.trim()) {
        setPromoError("Veuillez entrer un code.");
        return;
      }
      const code = allPromoCodes.find((pc) => pc.code.toLowerCase() === promoCodeInput.toLowerCase());
      if (!code) {
        setPromoError("Code promo invalide.");
        return;
      }
      if (code.validUntil && new Date(code.validUntil) < /* @__PURE__ */ new Date()) {
        setPromoError("Ce code promo a expir\xE9.");
        return;
      }
      onApplyPromoCode(code);
      setPromoCodeInput("");
    };
    const subtotal = cart.reduce((sum, item) => sum + getFinalPrice4(item) * item.quantity, 0);
    const discount = appliedPromoCode ? appliedPromoCode.discountType === "percentage" ? subtotal * appliedPromoCode.discountValue / 100 : appliedPromoCode.discountValue : 0;
    const totalBeforeDelivery = subtotal - discount;
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "bg-gray-100 dark:bg-gray-900 min-h-[80vh]", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Continuer mes achats"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white mb-8", children: "Mon Panier" }),
      cart.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: "Votre panier est vide." }),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6", children: "Parcourez nos cat\xE9gories pour trouver votre bonheur !" }),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("button", { onClick: onBack, className: "bg-kmer-green text-white font-bold py-3 px-8 rounded-full hover:bg-green-700 transition-colors", children: "Commencer mes achats" })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "grid lg:grid-cols-3 gap-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "lg:col-span-2 bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 sm:p-6 space-y-4", children: cart.map((item) => /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 border-b dark:border-gray-700 pb-4 last:border-b-0", children: [
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center gap-4 flex-grow w-full", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("img", { src: item.imageUrls[0] || PLACEHOLDER_IMAGE_URL2, alt: item.name, className: "w-20 h-20 sm:w-24 sm:h-24 object-cover rounded-md flex-shrink-0" }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h3", { className: "font-semibold text-lg dark:text-white", children: item.name }),
              item.selectedVariant && /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400 font-medium", children: Object.entries(item.selectedVariant).map(([key, value]) => `${key}: ${value}`).join(" / ") }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-gray-500 dark:text-gray-400 text-sm", children: item.vendor }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("p", { className: "text-kmer-green font-bold mt-1", children: [
                getFinalPrice4(item).toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center gap-4 w-full sm:w-auto justify-end", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center border border-gray-300 dark:border-gray-600 rounded-md", children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("button", { onClick: () => updateQuantity(item.id, item.quantity - 1, item.selectedVariant), className: "px-3 py-1 text-lg font-bold dark:text-gray-200", children: "-" }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "w-12 text-center border-l border-r border-gray-300 dark:border-gray-600 py-1 dark:text-white", children: item.quantity }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("button", { onClick: () => updateQuantity(item.id, item.quantity + 1, item.selectedVariant), className: "px-3 py-1 text-lg font-bold dark:text-gray-200", children: "+" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("button", { onClick: () => removeFromCart(item.id, item.selectedVariant), className: "text-gray-500 hover:text-red-600 p-2", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TrashIcon, { className: "w-5 h-5" }) })
          ] })
        ] }, item.id + JSON.stringify(item.selectedVariant))) }),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "lg:col-span-1", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 sticky top-24", children: [
          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h2", { className: "text-xl font-bold border-b dark:border-gray-700 pb-4 mb-4 dark:text-white", children: "R\xE9sum\xE9 de la commande" }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("label", { htmlFor: "promo-code", className: "text-sm font-medium dark:text-gray-300", children: "Code Promo" }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex gap-2 mt-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                "input",
                {
                  type: "text",
                  id: "promo-code",
                  value: promoCodeInput,
                  onChange: (e) => setPromoCodeInput(e.target.value),
                  placeholder: "Entrez votre code",
                  className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 text-sm"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("button", { onClick: handleApplyPromoCode, className: "bg-gray-200 dark:bg-gray-600 font-semibold px-4 rounded-md hover:bg-gray-300 dark:hover:bg-gray-500", children: "Appliquer" })
            ] }),
            promoError && /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-red-500 text-xs mt-1", children: promoError })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "space-y-3 dark:text-gray-300 border-t dark:border-gray-700 pt-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { children: "Sous-total" }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("span", { className: "font-semibold dark:text-white", children: [
                subtotal.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] }),
            appliedPromoCode && /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex justify-between text-green-600 dark:text-green-400", children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("span", { children: [
                "R\xE9duction (",
                appliedPromoCode.code,
                ")"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("span", { className: "font-semibold", children: [
                "- ",
                discount.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { children: "Frais de livraison" }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "font-semibold dark:text-white", children: "\xC0 calculer" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "border-t dark:border-gray-700 pt-4 mt-4 flex justify-between text-lg font-bold dark:text-white", children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { children: "Total (avant livraison)" }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("span", { children: [
                totalBeforeDelivery.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("button", { onClick: onNavigateToCheckout, className: "w-full mt-6 bg-kmer-red text-white font-bold py-3 rounded-lg hover:bg-red-700 transition-colors disabled:bg-gray-400", disabled: cart.length === 0, children: "Passer au paiement" })
        ] }) })
      ] })
    ] }) });
  };
  var CartView_default = CartView;

  // components/Checkout.tsx
  var import_react17 = __toESM(require_react(), 1);
  var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
  var getActiveFlashSalePrice4 = (productId, flashSales) => {
    const now = /* @__PURE__ */ new Date();
    for (const sale of flashSales) {
      if (new Date(sale.startDate) <= now && new Date(sale.endDate) >= now) {
        const productInSale = sale.products.find((p) => p.productId === productId && p.status === "approved");
        if (productInSale) return productInSale.flashPrice;
      }
    }
    return null;
  };
  var isPromotionActive4 = (product) => {
    if (!product.promotionPrice || product.promotionPrice >= product.price) return false;
    const now = /* @__PURE__ */ new Date();
    const startDate = product.promotionStartDate ? /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") : null;
    const endDate = product.promotionEndDate ? /* @__PURE__ */ new Date(product.promotionEndDate + "T23:59:59") : null;
    if (!startDate && !endDate) return false;
    if (startDate && endDate) return now >= startDate && now <= endDate;
    if (startDate) return now >= startDate;
    if (endDate) return now <= endDate;
    return false;
  };
  var getFinalPrice = (item, flashSales) => {
    if (item.selectedVariant) {
      const variantDetail = item.variantDetails?.find((vd) => {
        if (!item.selectedVariant) return false;
        const vdKeys = Object.keys(vd.options);
        const selectedKeys = Object.keys(item.selectedVariant);
        if (vdKeys.length !== selectedKeys.length) return false;
        return vdKeys.every((key) => vd.options[key] === item.selectedVariant[key]);
      });
      if (variantDetail?.price) return variantDetail.price;
    }
    const flashPrice = getActiveFlashSalePrice4(item.id, flashSales);
    if (flashPrice !== null) return flashPrice;
    if (isPromotionActive4(item)) return item.promotionPrice;
    return item.price;
  };
  var AddressForm = ({ onSave, onCancel }) => {
    const { user } = useAuth();
    const [formData, setFormData] = (0, import_react17.useState)({
      fullName: user?.name || "",
      phone: user?.phone || "",
      address: "",
      city: "Douala",
      label: "Maison"
    });
    const handleChange = (e) => {
      setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onSave(formData);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-4 p-4 mt-4 border rounded-lg dark:border-gray-700 bg-gray-50 dark:bg-gray-700/50 animate-in", children: [
      /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("h3", { className: "font-semibold text-lg dark:text-white", children: "Ajouter une nouvelle adresse" }),
      /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "grid grid-cols-1 sm:grid-cols-2 gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("input", { name: "fullName", value: formData.fullName, onChange: handleChange, placeholder: "Nom complet", className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("input", { name: "phone", value: formData.phone, onChange: handleChange, placeholder: "T\xE9l\xE9phone", className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("input", { name: "address", value: formData.address, onChange: handleChange, placeholder: "Adresse (Rue, quartier, rep\xE8re...)", className: "sm:col-span-2 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("select", { name: "city", value: formData.city, onChange: handleChange, className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("option", { children: "Douala" }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("option", { children: "Yaound\xE9" }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("option", { children: "Bafoussam" }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("option", { children: "Limbe" }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("option", { children: "Kribi" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("input", { name: "label", value: formData.label, onChange: handleChange, placeholder: "\xC9tiquette (Maison, Bureau...)", className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex justify-end gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("button", { type: "button", onClick: onCancel, className: "bg-gray-200 dark:bg-gray-600 font-bold py-2 px-4 rounded-lg", children: "Annuler" }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("button", { type: "submit", className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg", children: "Enregistrer" })
      ] })
    ] });
  };
  var Checkout = ({ onBack, onOrderConfirm, flashSales, allPickupPoints, allStores, appliedPromoCode, siteSettings, paymentMethods }) => {
    const { user, addAddress } = useAuth();
    const { cart } = useCart();
    const [deliveryMethod, setDeliveryMethod] = (0, import_react17.useState)("home-delivery");
    const defaultAddressId = user?.addresses?.find((a) => a.isDefault)?.id;
    const [selectedAddressId, setSelectedAddressId] = (0, import_react17.useState)(defaultAddressId);
    const [selectedPickupPointId, setSelectedPickupPointId] = (0, import_react17.useState)(allPickupPoints[0]?.id);
    const [selectedPaymentMethodId, setSelectedPaymentMethodId] = (0, import_react17.useState)(paymentMethods[0]?.id);
    const [isAddingAddress, setIsAddingAddress] = (0, import_react17.useState)(false);
    const subtotal = cart.reduce((sum, item) => sum + getFinalPrice(item, flashSales) * item.quantity, 0);
    const discount = appliedPromoCode ? appliedPromoCode.discountType === "percentage" ? subtotal * appliedPromoCode.discountValue / 100 : appliedPromoCode.discountValue : 0;
    const subtotalAfterDiscount = subtotal - discount;
    const selectedAddress = user?.addresses?.find((a) => a.id === selectedAddressId);
    const deliveryFee = (0, import_react17.useMemo)(() => {
      if (deliveryMethod === "pickup" || !selectedAddress) return 0;
      const customerCity = selectedAddress.city;
      const itemsByVendor = cart.reduce((acc, item) => {
        (acc[item.vendor] = acc[item.vendor] || []).push(item);
        return acc;
      }, {});
      let totalFee = 0;
      for (const vendorName in itemsByVendor) {
        const vendorItems = itemsByVendor[vendorName];
        if (vendorItems.every((item) => (item.type || "product") === "service")) {
          continue;
        }
        const store = allStores.find((s) => s.name === vendorName);
        if (!store) continue;
        const vendorSubtotal = vendorItems.reduce((sum, item) => sum + getFinalPrice(item, flashSales) * item.quantity, 0);
        if (store.shippingSettings) {
          if (store.shippingSettings.freeShippingThreshold !== null && vendorSubtotal >= store.shippingSettings.freeShippingThreshold) {
            continue;
          }
          const isLocal = store.location === customerCity;
          const customRate = isLocal ? store.shippingSettings.customRates.local : store.shippingSettings.customRates.national;
          if (customRate !== null) {
            totalFee += customRate;
            continue;
          }
        }
        const isInterUrban = store.location !== customerCity;
        const baseFee = isInterUrban ? siteSettings.deliverySettings.interUrbanBaseFee : siteSettings.deliverySettings.intraUrbanBaseFee;
        totalFee += baseFee;
      }
      let discountPercentage = 0;
      if (siteSettings.deliverySettings.premiumDeliveryDiscountPercentage && (user?.loyalty.status === "premium" || user?.loyalty.status === "premium_plus")) {
        discountPercentage = siteSettings.deliverySettings.premiumDeliveryDiscountPercentage;
      }
      return totalFee - totalFee * discountPercentage / 100;
    }, [selectedAddress, deliveryMethod, cart, allStores, siteSettings, user, flashSales]);
    const total = subtotalAfterDiscount + deliveryFee;
    const handleSaveAddress = (address) => {
      if (user) {
        addAddress(user.id, address);
        setIsAddingAddress(false);
      }
    };
    const handleConfirmOrder = () => {
      if (!user) return;
      if (deliveryMethod === "home-delivery" && !selectedAddress) {
        alert("Veuillez s\xE9lectionner une adresse de livraison.");
        return;
      }
      if (deliveryMethod === "pickup" && !selectedPickupPointId) {
        alert("Veuillez s\xE9lectionner un point de retrait.");
        return;
      }
      let finalShippingAddress;
      if (deliveryMethod === "home-delivery") {
        if (!selectedAddress) {
          alert("Veuillez s\xE9lectionner une adresse de livraison.");
          return;
        }
        finalShippingAddress = selectedAddress;
      } else {
        const pickupPoint = allPickupPoints.find((p) => p.id === selectedPickupPointId);
        finalShippingAddress = {
          id: `pickup-${pickupPoint?.id || "unknown"}`,
          fullName: user.name,
          phone: user.phone || "N/A",
          address: pickupPoint ? `${pickupPoint.name}, ${pickupPoint.neighborhood}` : "Point de retrait",
          city: pickupPoint?.city || ""
        };
      }
      const orderData = {
        userId: user.id,
        items: cart,
        subtotal,
        deliveryFee,
        total,
        shippingAddress: finalShippingAddress,
        deliveryMethod,
        pickupPointId: deliveryMethod === "pickup" ? selectedPickupPointId : void 0,
        appliedPromoCode: appliedPromoCode || void 0
      };
      onOrderConfirm(orderData);
    };
    if (cart.length === 0) {
      return /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "text-center p-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("p", { children: "Votre panier est vide." }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("button", { onClick: onBack, className: "mt-4 bg-kmer-green text-white px-4 py-2 rounded", children: "Retourner \xE0 la boutique" })
      ] });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "bg-gray-100 dark:bg-gray-900 min-h-screen", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour au panier"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white mb-8", children: "Finaliser ma commande" }),
      /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "grid lg:grid-cols-3 gap-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "lg:col-span-2 space-y-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("h2", { className: "text-xl font-bold mb-4 dark:text-white", children: "1. M\xE9thode de livraison" }),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex gap-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("button", { onClick: () => setDeliveryMethod("home-delivery"), className: `flex-1 p-4 border-2 rounded-lg text-left ${deliveryMethod === "home-delivery" ? "border-kmer-green" : "dark:border-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(TruckIcon, { className: "w-6 h-6" }),
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { className: "font-semibold", children: "Livraison \xE0 domicile" })
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("button", { onClick: () => setDeliveryMethod("pickup"), className: `flex-1 p-4 border-2 rounded-lg text-left ${deliveryMethod === "pickup" ? "border-kmer-green" : "dark:border-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(BuildingStorefrontIcon, { className: "w-6 h-6" }),
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { className: "font-semibold", children: "Retrait en point de d\xE9p\xF4t" })
              ] }) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("h2", { className: "text-xl font-bold mb-4 dark:text-white", children: [
              "2. ",
              deliveryMethod === "home-delivery" ? "Adresse de livraison" : "Point de d\xE9p\xF4t"
            ] }),
            deliveryMethod === "home-delivery" ? /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "space-y-4", children: [
              user?.addresses?.map((addr) => /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { onClick: () => setSelectedAddressId(addr.id), className: `p-4 border-2 rounded-lg cursor-pointer flex items-start gap-4 ${selectedAddressId === addr.id ? "border-kmer-green" : "dark:border-gray-700"}`, children: [
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("input", { type: "radio", checked: selectedAddressId === addr.id, readOnly: true, className: "mt-1 h-4 w-4 text-kmer-green focus:ring-kmer-green" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "text-sm", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("p", { className: "font-bold", children: addr.label }),
                  /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("address", { className: "not-italic", children: [
                    addr.fullName,
                    ", ",
                    addr.address,
                    ", ",
                    addr.city,
                    ", ",
                    addr.phone
                  ] })
                ] })
              ] }, addr.id)),
              !isAddingAddress && /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("button", { onClick: () => setIsAddingAddress(true), className: "flex items-center gap-2 text-kmer-green font-semibold", children: [
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(PlusIcon, { className: "w-5 h-5" }),
                " Ajouter une adresse"
              ] }),
              isAddingAddress && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(AddressForm, { onSave: handleSaveAddress, onCancel: () => setIsAddingAddress(false) })
            ] }) : /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("select", { onChange: (e) => setSelectedPickupPointId(e.target.value), value: selectedPickupPointId, className: "w-full p-3 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: allPickupPoints.map((p) => /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("option", { value: p.id, children: [
              p.name,
              " - ",
              p.neighborhood,
              ", ",
              p.city
            ] }, p.id)) })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "lg:col-span-1", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 sticky top-24", children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("h2", { className: "text-xl font-bold border-b dark:border-gray-700 pb-4 mb-4 dark:text-white", children: "R\xE9sum\xE9 de la commande" }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "space-y-2 mb-4 max-h-60 overflow-y-auto", children: cart.map((item) => /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center gap-3 text-sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("img", { src: item.imageUrls[0], alt: item.name, className: "w-12 h-12 rounded-md object-cover" }),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex-grow", children: [
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("p", { className: "font-semibold line-clamp-1", children: item.name }),
              /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("p", { className: "text-xs text-gray-500", children: [
                "x ",
                item.quantity
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("p", { className: "font-semibold whitespace-nowrap", children: [
              (getFinalPrice(item, flashSales) * item.quantity).toLocaleString("fr-CM"),
              " F"
            ] })
          ] }, item.id + JSON.stringify(item.selectedVariant))) }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "space-y-3 dark:text-gray-300 border-t dark:border-gray-700 pt-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { children: "Sous-total" }),
              /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("span", { className: "font-semibold dark:text-white", children: [
                subtotal.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] }),
            appliedPromoCode && /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex justify-between text-green-600 dark:text-green-400", children: [
              /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("span", { children: [
                "R\xE9duction (",
                appliedPromoCode.code,
                ")"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("span", { className: "font-semibold", children: [
                "- ",
                discount.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { children: "Livraison" }),
              /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("span", { className: "font-semibold dark:text-white", children: [
                deliveryFee.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "border-t dark:border-gray-700 pt-4 mt-4 flex justify-between text-xl font-bold dark:text-white", children: [
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { children: "Total" }),
              /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("span", { children: [
                total.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("button", { onClick: handleConfirmOrder, className: "w-full mt-6 bg-kmer-red text-white font-bold py-3 rounded-lg hover:bg-red-700 transition-colors", children: "Confirmer la commande" })
        ] }) })
      ] })
    ] }) });
  };
  var Checkout_default = Checkout;

  // components/OrderSuccess.tsx
  var import_react18 = __toESM(require_react(), 1);
  var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
  var OrderSuccess = ({ order, onNavigateHome, onNavigateToOrders }) => {
    const qrCodeRef = (0, import_react18.useRef)(null);
    const { t } = useLanguage();
    (0, import_react18.useEffect)(() => {
      if (qrCodeRef.current && order?.trackingNumber && typeof QRCode !== "undefined") {
        QRCode.toCanvas(qrCodeRef.current, order.trackingNumber, { width: 160 }, (error) => {
          if (error) console.error(error);
        });
      }
    }, [order]);
    const handlePrint = () => {
      window.print();
    };
    if (!order) {
      return /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12 text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("h1", { className: "text-2xl font-bold", children: "Chargement de votre confirmation de commande..." }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("p", { className: "mt-4", children: 'Si cette page ne se charge pas, vous pouvez retrouver votre commande dans la section "Mes Commandes".' }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("button", { onClick: onNavigateToOrders, className: "mt-6 bg-kmer-green text-white font-bold py-3 px-6 rounded-full", children: "Voir mes commandes" })
      ] });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "container mx-auto px-4 sm:px-6 py-12 flex justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "text-center bg-white dark:bg-gray-800 p-6 sm:p-12 rounded-lg shadow-xl max-w-2xl w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "mx-auto flex items-center justify-center h-16 w-16 sm:h-20 sm:w-20 rounded-full bg-green-100 mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(CheckIcon, { className: "h-10 w-10 sm:h-12 sm:w-12 text-kmer-green" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("h1", { className: "text-2xl sm:text-3xl font-bold text-gray-800 dark:text-white mb-4", children: "Commande pass\xE9e avec succ\xE8s !" }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-8 max-w-md mx-auto", children: "Merci pour votre achat. Votre commande est confirm\xE9e et sera pr\xE9par\xE9e pour exp\xE9dition." }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "printable bg-gray-50 dark:bg-gray-900/50 border dark:border-gray-700 rounded-lg p-6 my-8 text-left space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex flex-col sm:flex-row justify-between items-start gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("h2", { className: "text-xl font-bold text-gray-800 dark:text-white", children: "R\xE9capitulatif" }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
              "Commande #",
              order.id
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("p", { className: "text-sm font-semibold text-kmer-green", children: [
              "Total: ",
              order.total.toLocaleString("fr-CM"),
              " FCFA"
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("canvas", { ref: qrCodeRef, className: "rounded-lg shadow-sm mx-auto" }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("p", { className: "text-sm font-semibold mt-2 dark:text-gray-200", children: "N\xB0 de suivi:" }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("p", { className: "font-mono text-sm bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded-md inline-block", children: order.trackingNumber })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("h3", { className: "font-semibold dark:text-white", children: "Livraison \xE0:" }),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("address", { className: "text-sm text-gray-600 dark:text-gray-300 not-italic", children: [
            order.shippingAddress.fullName,
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("br", {}),
            order.shippingAddress.address,
            ", ",
            order.shippingAddress.city,
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("br", {}),
            order.shippingAddress.phone
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex flex-col sm:flex-row gap-4 justify-center no-print", children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          "button",
          {
            onClick: onNavigateToOrders,
            className: "w-full sm:w-auto bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-800 dark:text-gray-200 font-bold py-3 px-6 rounded-full hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors",
            children: "Voir mes commandes"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          "button",
          {
            onClick: onNavigateHome,
            className: "w-full sm:w-auto bg-kmer-green text-white font-bold py-3 px-6 rounded-full hover:bg-green-700 transition-colors",
            children: "Continuer mes achats"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("button", { onClick: handlePrint, className: "mt-6 text-sm text-gray-500 dark:text-gray-400 hover:underline flex items-center justify-center gap-2 mx-auto no-print", children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(PrinterIcon, { className: "w-4 h-4" }),
        "Imprimer le re\xE7u"
      ] })
    ] }) });
  };
  var OrderSuccess_default = OrderSuccess;

  // components/StoresPage.tsx
  var import_react19 = __toESM(require_react(), 1);
  var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
  var StoresPage = ({ stores, onBack, onVisitStore, onNavigateToStoresMap }) => {
    const [filters, setFilters] = (0, import_react19.useState)({
      search: "",
      city: "",
      category: "",
      premium: false
    });
    const [isMobileFiltersOpen, setIsMobileFiltersOpen] = (0, import_react19.useState)(false);
    const availableCities = (0, import_react19.useMemo)(() => [...new Set(stores.map((s) => s.location))], [stores]);
    const storeCategories = (0, import_react19.useMemo)(() => [...new Set(stores.map((s) => s.category))], [stores]);
    const filteredStores = (0, import_react19.useMemo)(() => {
      const filtered = stores.filter((store) => {
        const searchMatch = store.name.toLowerCase().includes(filters.search.toLowerCase());
        const cityMatch = !filters.city || store.location === filters.city;
        const categoryMatch = !filters.category || store.category === filters.category;
        const premiumMatch = !filters.premium || store.premiumStatus === "premium";
        return searchMatch && cityMatch && categoryMatch && premiumMatch;
      });
      return filtered.sort((a, b) => {
        if (a.premiumStatus === "premium" && b.premiumStatus !== "premium") return -1;
        if (a.premiumStatus !== "premium" && b.premiumStatus === "premium") return 1;
        return a.name.localeCompare(b.name);
      });
    }, [stores, filters]);
    const resetFilters = () => {
      setFilters({ search: "", city: "", category: "", premium: false });
    };
    const FilterPanel = () => /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("aside", { className: "w-full lg:w-72 lg:flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "p-6 bg-white dark:bg-gray-800 rounded-lg shadow-sm space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("label", { className: "font-semibold block mb-2", children: "Rechercher par nom" }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
          "input",
          {
            type: "text",
            value: filters.search,
            onChange: (e) => setFilters((f) => ({ ...f, search: e.target.value })),
            placeholder: "Nom de la boutique...",
            className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("label", { className: "font-semibold block mb-2", children: "Filtrer par ville" }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex flex-wrap gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("button", { onClick: () => setFilters((f) => ({ ...f, city: "" })), className: `px-3 py-1 rounded-full text-sm ${!filters.city ? "bg-kmer-green text-white" : "bg-gray-200 dark:bg-gray-700"}`, children: "Toutes" }),
          availableCities.map((city) => /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("button", { onClick: () => setFilters((f) => ({ ...f, city })), className: `px-3 py-1 rounded-full text-sm ${filters.city === city ? "bg-kmer-green text-white" : "bg-gray-200 dark:bg-gray-700"}`, children: city }, city))
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("label", { className: "font-semibold block mb-2", children: "Filtrer par cat\xE9gorie" }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("select", { value: filters.category, onChange: (e) => setFilters((f) => ({ ...f, category: e.target.value })), className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "", children: "Toutes les cat\xE9gories" }),
          storeCategories.map((cat) => /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: cat, children: cat }, cat))
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("label", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("input", { type: "checkbox", checked: filters.premium, onChange: (e) => setFilters((f) => ({ ...f, premium: e.target.checked })), className: "h-4 w-4 rounded text-kmer-yellow focus:ring-kmer-yellow" }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { children: "Boutiques Premium seulement" })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("button", { onClick: resetFilters, className: "w-full flex items-center justify-center gap-2 text-sm font-semibold text-gray-600 dark:text-gray-300 hover:text-kmer-red", children: [
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(ArrowPathIcon, { className: "w-4 h-4" }),
        "Effacer les filtres"
      ] })
    ] }) });
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour \xE0 l'accueil"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "lg:flex lg:gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "lg:hidden mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("button", { onClick: () => setIsMobileFiltersOpen(true), className: "w-full flex items-center justify-center gap-2 bg-white dark:bg-gray-800 p-3 rounded-lg shadow-md font-semibold", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(FilterIcon, { className: "w-5 h-5" }),
          "Filtrer les boutiques"
        ] }) }),
        isMobileFiltersOpen && /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "fixed inset-0 bg-black/60 z-40 lg:hidden", onClick: () => setIsMobileFiltersOpen(false), children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "fixed inset-y-0 left-0 w-4/5 max-w-sm bg-gray-50 dark:bg-gray-800 shadow-xl overflow-y-auto", onClick: (e) => e.stopPropagation(), children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex justify-between items-center p-4 border-b dark:border-gray-700", children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("h2", { className: "font-bold text-lg dark:text-white", children: "Filtres" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("button", { onClick: () => setIsMobileFiltersOpen(false), children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(XIcon, { className: "w-6 h-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(FilterPanel, {})
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "hidden lg:block", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(FilterPanel, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("main", { className: "flex-grow", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex flex-col sm:flex-row justify-between items-center mb-8 gap-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: "Nos boutiques partenaires" }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("p", { className: "text-gray-500", children: [
                filteredStores.length,
                " boutique(s) trouv\xE9e(s)"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("button", { onClick: onNavigateToStoresMap, className: "flex-shrink-0 flex items-center gap-2 bg-blue-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(MapPinIcon, { className: "w-5 h-5" }),
              "Voir sur la carte"
            ] })
          ] }),
          filteredStores.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "grid grid-cols-2 md:grid-cols-3 gap-6", children: filteredStores.map((store) => /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(StoreCard_default, { store, onVisitStore }, store.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("h2", { className: "text-2xl font-semibold mb-2", children: "Aucune boutique trouv\xE9e" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("p", { className: "text-gray-600", children: "Essayez de modifier vos filtres." })
          ] })
        ] })
      ] })
    ] });
  };
  var StoresPage_default = StoresPage;

  // components/BecomeSeller.tsx
  var import_react20 = __toESM(require_react(), 1);
  var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
  var BecomeSeller = ({ onBack, onBecomeSeller, siteSettings }) => {
    const { t } = useLanguage();
    const [formData, setFormData] = (0, import_react20.useState)({
      shopName: "",
      location: "Douala",
      neighborhood: "",
      sellerFirstName: "",
      sellerLastName: "",
      sellerPhone: "",
      physicalAddress: "",
      logoUrl: "",
      latitude: void 0,
      longitude: void 0
    });
    const [logoPreview, setLogoPreview] = (0, import_react20.useState)(null);
    const [errors, setErrors] = (0, import_react20.useState)({});
    const mapContainerRef = (0, import_react20.useRef)(null);
    const mapRef = (0, import_react20.useRef)(null);
    const markerRef = (0, import_react20.useRef)(null);
    const updateMarkerAndForm = (0, import_react20.useCallback)((latlng) => {
      setFormData((prev) => ({ ...prev, latitude: latlng.lat, longitude: latlng.lng }));
      if (mapRef.current) {
        if (!markerRef.current) {
          markerRef.current = L.marker(latlng, { draggable: true }).addTo(mapRef.current);
          markerRef.current.on("dragend", (e) => updateMarkerAndForm(e.target.getLatLng()));
        } else {
          markerRef.current.setLatLng(latlng);
        }
        mapRef.current.panTo(latlng);
      }
    }, []);
    (0, import_react20.useEffect)(() => {
      if (mapContainerRef.current && !mapRef.current && typeof L !== "undefined") {
        const initialLatLng = [4.0511, 9.7679];
        mapRef.current = L.map(mapContainerRef.current).setView(initialLatLng, 13);
        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(mapRef.current);
        mapRef.current.on("click", (e) => updateMarkerAndForm(e.latlng));
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            (position) => {
              const { latitude, longitude } = position.coords;
              const userLatLng = { lat: latitude, lng: longitude };
              mapRef.current.setView(userLatLng, 15);
              updateMarkerAndForm(userLatLng);
            },
            (error) => {
              console.warn(`Geolocation error: ${error.message}`);
              updateMarkerAndForm({ lat: initialLatLng[0], lng: initialLatLng[1] });
            },
            { timeout: 1e4 }
          );
        } else {
          updateMarkerAndForm({ lat: initialLatLng[0], lng: initialLatLng[1] });
        }
        setTimeout(() => mapRef.current?.invalidateSize(), 400);
      }
    }, [updateMarkerAndForm]);
    const handleGeolocate = () => {
      if (navigator.geolocation && mapRef.current) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const { latitude, longitude } = position.coords;
            const userLatLng = { lat: latitude, lng: longitude };
            mapRef.current.setView(userLatLng, 15);
            updateMarkerAndForm(userLatLng);
          },
          (error) => {
            alert(`Erreur de g\xE9olocalisation: ${error.message}`);
          },
          { enableHighAccuracy: true }
        );
      } else {
        alert("La g\xE9olocalisation n'est pas support\xE9e par votre navigateur.");
      }
    };
    const handleChange = (e) => {
      const { name, value } = e.target;
      setFormData((prev) => ({ ...prev, [name]: value }));
      if (errors[name]) {
        setErrors((prev) => ({ ...prev, [name]: void 0 }));
      }
    };
    const handleLogoChange = (e) => {
      if (e.target.files && e.target.files[0]) {
        const file = e.target.files[0];
        const reader = new FileReader();
        reader.onloadend = () => {
          const result = reader.result;
          setLogoPreview(result);
          setFormData((prev) => ({ ...prev, logoUrl: result }));
        };
        reader.readAsDataURL(file);
      }
    };
    const validate = () => {
      const newErrors = {};
      if (!formData.shopName.trim()) newErrors.shopName = t("becomeSeller.errors.shopName");
      if (!formData.sellerFirstName.trim()) newErrors.sellerFirstName = t("becomeSeller.errors.firstName");
      if (!formData.sellerLastName.trim()) newErrors.sellerLastName = t("becomeSeller.errors.lastName");
      if (!formData.sellerPhone.trim()) newErrors.sellerPhone = t("becomeSeller.errors.phone");
      if (!formData.physicalAddress.trim()) newErrors.physicalAddress = t("becomeSeller.errors.address");
      if (!formData.logoUrl) newErrors.logoUrl = t("becomeSeller.errors.logo");
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        onBecomeSeller({
          shopName: formData.shopName,
          location: formData.location,
          neighborhood: formData.neighborhood,
          sellerFirstName: formData.sellerFirstName,
          sellerLastName: formData.sellerLastName,
          sellerPhone: formData.sellerPhone,
          physicalAddress: formData.physicalAddress,
          logoUrl: formData.logoUrl,
          latitude: formData.latitude,
          longitude: formData.longitude
        });
      }
    };
    const requiredDocuments = Object.entries(siteSettings.requiredSellerDocuments).filter(([, isRequired]) => isRequired).map(([name]) => name);
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "bg-gray-50 dark:bg-gray-900 py-12", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "container mx-auto px-4 sm:px-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        t("common.backToHome")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "max-w-4xl mx-auto bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "text-center mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(BecomeSellerIcon, { className: "w-12 h-12 mx-auto text-kmer-green" }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white mt-4", children: t("becomeSeller.title") }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mt-2", children: t("becomeSeller.subtitle") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("fieldset", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("legend", { className: "px-2 font-semibold text-lg dark:text-gray-200", children: t("becomeSeller.step1Title") }),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 pt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { htmlFor: "shopName", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.shopNameLabel") }),
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("input", { type: "text", id: "shopName", name: "shopName", value: formData.shopName, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }),
                errors.shopName && /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { className: "text-red-500 text-xs mt-1", children: errors.shopName })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.shopLogoLabel") }),
                /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "mt-1 flex items-center gap-4", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "h-20 w-20 rounded-md bg-gray-100 dark:bg-gray-700 p-1 flex items-center justify-center", children: logoPreview ? /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("img", { src: logoPreview, alt: "Logo", className: "h-full w-full object-contain rounded-md" }) : /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(PhotoIcon, { className: "w-10 h-10 text-gray-400" }) }),
                  /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("label", { htmlFor: "logo-upload", className: "cursor-pointer bg-white dark:bg-gray-700 py-2 px-3 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center gap-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(PhotoIcon, { className: "w-5 h-5" }),
                    " ",
                    t("becomeSeller.upload"),
                    /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("input", { id: "logo-upload", type: "file", className: "sr-only", onChange: handleLogoChange, accept: "image/*" })
                  ] })
                ] }),
                errors.logoUrl && /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { className: "text-red-500 text-xs mt-1", children: errors.logoUrl })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("fieldset", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("legend", { className: "px-2 font-semibold text-lg dark:text-gray-200", children: t("becomeSeller.step2Title") }),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 pt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { htmlFor: "sellerFirstName", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.firstNameLabel") }),
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("input", { type: "text", id: "sellerFirstName", name: "sellerFirstName", value: formData.sellerFirstName, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }),
                errors.sellerFirstName && /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { className: "text-red-500 text-xs mt-1", children: errors.sellerFirstName })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { htmlFor: "sellerLastName", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.lastNameLabel") }),
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("input", { type: "text", id: "sellerLastName", name: "sellerLastName", value: formData.sellerLastName, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }),
                errors.sellerLastName && /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { className: "text-red-500 text-xs mt-1", children: errors.sellerLastName })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "md:col-span-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { htmlFor: "sellerPhone", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.phoneLabel") }),
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("input", { type: "tel", id: "sellerPhone", name: "sellerPhone", value: formData.sellerPhone, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }),
                errors.sellerPhone && /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { className: "text-red-500 text-xs mt-1", children: errors.sellerPhone })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("fieldset", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("legend", { className: "px-2 font-semibold text-lg dark:text-gray-200", children: t("becomeSeller.step3Title") }),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 pt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { htmlFor: "location", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.cityLabel") }),
                /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("select", { id: "location", name: "location", value: formData.location, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("option", { children: "Douala" }),
                  /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("option", { children: "Yaound\xE9" }),
                  /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("option", { children: "Bafoussam" })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { htmlFor: "neighborhood", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.neighborhoodLabel") }),
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("input", { type: "text", id: "neighborhood", name: "neighborhood", value: formData.neighborhood, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "md:col-span-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { htmlFor: "physicalAddress", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.addressLabel") }),
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("textarea", { id: "physicalAddress", name: "physicalAddress", value: formData.physicalAddress, onChange: handleChange, rows: 2, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }),
                errors.physicalAddress && /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { className: "text-red-500 text-xs mt-1", children: errors.physicalAddress })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "md:col-span-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "flex justify-between items-center mb-1", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.gpsLabel") }),
                  /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("button", { type: "button", onClick: handleGeolocate, className: "flex items-center gap-2 text-sm font-semibold text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(MapPinIcon, { className: "w-4 h-4" }),
                    t("becomeSeller.findMyPosition")
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: t("becomeSeller.gpsDescription") }),
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { ref: mapContainerRef, className: "h-64 w-full mt-2 rounded-md z-0" })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "p-4 border-l-4 border-kmer-green bg-green-50 dark:bg-green-900/20 rounded-r-lg", children: [
            /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("h2", { className: "text-lg font-semibold flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(DocumentTextIcon, { className: "w-5 h-5" }),
              " ",
              t("becomeSeller.requiredDocsTitle")
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { className: "text-sm mt-2 text-gray-700 dark:text-gray-300", children: t("becomeSeller.requiredDocsDescription") }),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("ul", { className: "list-disc list-inside mt-2 space-y-1 text-sm text-gray-700 dark:text-gray-300", children: requiredDocuments.map((doc) => /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("li", { children: doc }, doc)) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "flex justify-end pt-4", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("button", { type: "submit", className: "bg-kmer-green text-white font-bold py-3 px-8 rounded-lg hover:bg-green-700 transition-colors text-lg", children: t("becomeSeller.submitCandidacy") }) })
        ] })
      ] })
    ] }) });
  };
  var BecomeSeller_default = BecomeSeller;

  // components/BecomeServiceProvider.tsx
  var import_react21 = __toESM(require_react(), 1);
  var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
  var BecomeServiceProvider = ({ onBack, onBecomeSeller, siteSettings, categories }) => {
    const { t } = useLanguage();
    const [formData, setFormData] = (0, import_react21.useState)({
      shopName: "",
      location: "Douala",
      sellerFirstName: "",
      sellerLastName: "",
      sellerPhone: "",
      logoUrl: "",
      serviceCategory: "",
      serviceDescription: "",
      price: "",
      duration: "",
      locationType: "flexible",
      serviceArea: "",
      availability: ""
    });
    const [logoPreview, setLogoPreview] = (0, import_react21.useState)(null);
    const [errors, setErrors] = (0, import_react21.useState)({});
    const serviceCategories = categories.filter((c) => c.parentId === "cat-services");
    const handleChange = (e) => {
      const { name, value } = e.target;
      setFormData((prev) => ({ ...prev, [name]: value }));
      if (errors[name]) {
        setErrors((prev) => ({ ...prev, [name]: "" }));
      }
    };
    const handleLogoChange = (e) => {
      if (e.target.files && e.target.files[0]) {
        const file = e.target.files[0];
        const reader = new FileReader();
        reader.onloadend = () => {
          const result = reader.result;
          setLogoPreview(result);
          setFormData((prev) => ({ ...prev, logoUrl: result }));
        };
        reader.readAsDataURL(file);
      }
    };
    const validate = () => {
      const newErrors = {};
      if (!formData.shopName.trim()) newErrors.shopName = "Le nom de l'activit\xE9 est requis.";
      if (!formData.serviceCategory) newErrors.serviceCategory = "La cat\xE9gorie de service est requise.";
      if (!formData.serviceDescription.trim()) newErrors.serviceDescription = "La description des services est requise.";
      if (!formData.price || Number(formData.price) <= 0) newErrors.price = "Un prix valide est requis.";
      if (!formData.duration.trim()) newErrors.duration = "La dur\xE9e ou base de facturation est requise.";
      if (!formData.sellerFirstName.trim()) newErrors.sellerFirstName = t("becomeSeller.errors.firstName");
      if (!formData.sellerLastName.trim()) newErrors.sellerLastName = t("becomeSeller.errors.lastName");
      if (!formData.sellerPhone.trim()) newErrors.sellerPhone = t("becomeSeller.errors.phone");
      if (!formData.logoUrl) newErrors.logoUrl = t("becomeSeller.errors.logo");
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        onBecomeSeller({
          ...formData,
          price: Number(formData.price)
        });
      }
    };
    const requiredDocuments = Object.entries(siteSettings.requiredSellerDocuments).filter(([, isRequired]) => isRequired).map(([name]) => name);
    const Field2 = ({ label, name, error, children, className }) => /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className, children: [
      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("label", { htmlFor: name, className: "block text-sm font-medium dark:text-gray-300", children: label }),
      children,
      error && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { className: "text-red-500 text-xs mt-1", children: error })
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "bg-gray-50 dark:bg-gray-900 py-12", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "container mx-auto px-4 sm:px-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        t("common.backToHome")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "max-w-4xl mx-auto bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "text-center mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(SparklesIcon, { className: "w-12 h-12 mx-auto text-purple-500" }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white mt-4", children: t("becomeServiceProvider.title") }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mt-2", children: t("becomeServiceProvider.subtitle") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("fieldset", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("legend", { className: "px-2 font-semibold text-lg dark:text-gray-200", children: t("becomeServiceProvider.step1Title") }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 pt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Field2, { label: "Nom de votre activit\xE9/service*", name: "shopName", error: errors.shopName, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { type: "text", id: "shopName", name: "shopName", value: formData.shopName, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Field2, { label: "Logo ou photo de profil*", name: "logoUrl", error: errors.logoUrl, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "mt-1 flex items-center gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "h-20 w-20 rounded-md bg-gray-100 dark:bg-gray-700 p-1 flex items-center justify-center", children: logoPreview ? /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("img", { src: logoPreview, alt: "Logo", className: "h-full w-full object-contain rounded-md" }) : /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(PhotoIcon, { className: "w-10 h-10 text-gray-400" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("label", { htmlFor: "logo-upload", className: "cursor-pointer bg-white dark:bg-gray-700 py-2 px-3 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(PhotoIcon, { className: "w-5 h-5" }),
                  " ",
                  t("becomeSeller.upload"),
                  /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { id: "logo-upload", type: "file", className: "sr-only", onChange: handleLogoChange, accept: "image/*" })
                ] })
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Field2, { label: t("becomeServiceProvider.serviceCategory"), name: "serviceCategory", error: errors.serviceCategory, className: "md:col-span-2", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("select", { id: "serviceCategory", name: "serviceCategory", value: formData.serviceCategory, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("option", { value: "", children: "-- S\xE9lectionnez une cat\xE9gorie --" }),
                serviceCategories.map((c) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("option", { value: c.id, children: t(c.name) }, c.id))
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Field2, { label: t("becomeServiceProvider.serviceDescription"), name: "serviceDescription", error: errors.serviceDescription, className: "md:col-span-2", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("textarea", { id: "serviceDescription", name: "serviceDescription", value: formData.serviceDescription, onChange: handleChange, rows: 4, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", placeholder: t("becomeServiceProvider.serviceDescriptionPlaceholder") }) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("fieldset", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("legend", { className: "px-2 font-semibold text-lg dark:text-gray-200", children: "D\xE9tails du Service" }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 pt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Field2, { label: "Prix (FCFA)*", name: "price", error: errors.price, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "relative mt-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("span", { className: "text-gray-500 sm:text-sm", children: "FCFA" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { type: "number", id: "price", name: "price", value: formData.price, onChange: handleChange, className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 pl-14" })
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Field2, { label: "Base de facturation*", name: "duration", error: errors.duration, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { type: "text", id: "duration", name: "duration", value: formData.duration, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", placeholder: "ex: par heure, par session, par projet" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Field2, { label: "Disponibilit\xE9", name: "availability", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { type: "text", id: "availability", name: "availability", value: formData.availability, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", placeholder: "ex: Lun-Ven, 9h-17h" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Field2, { label: "Type de lieu", name: "locationType", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("select", { id: "locationType", name: "locationType", value: formData.locationType, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("option", { value: "remote", children: "\xC0 distance" }),
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("option", { value: "on-site", children: "Sur site" }),
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("option", { value: "flexible", children: "Flexible" })
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Field2, { label: "Zone de service*", name: "serviceArea", error: errors.serviceArea, className: "md:col-span-2", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { type: "text", id: "serviceArea", name: "serviceArea", value: formData.serviceArea, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", placeholder: "ex: Douala uniquement, \xE0 distance (en ligne), tout le Cameroun" }) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("fieldset", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("legend", { className: "px-2 font-semibold text-lg dark:text-gray-200", children: t("becomeServiceProvider.step2Title") }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 pt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Field2, { label: t("becomeSeller.firstNameLabel"), name: "sellerFirstName", error: errors.sellerFirstName, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { type: "text", id: "sellerFirstName", name: "sellerFirstName", value: formData.sellerFirstName, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Field2, { label: t("becomeSeller.lastNameLabel"), name: "sellerLastName", error: errors.sellerLastName, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { type: "text", id: "sellerLastName", name: "sellerLastName", value: formData.sellerLastName, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Field2, { label: t("becomeSeller.phoneLabel"), name: "sellerPhone", error: errors.sellerPhone, className: "md:col-span-2", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { type: "tel", id: "sellerPhone", name: "sellerPhone", value: formData.sellerPhone, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Field2, { label: t("becomeSeller.cityLabel"), name: "location", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("select", { id: "location", name: "location", value: formData.location, onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("option", { children: "Douala" }),
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("option", { children: "Yaound\xE9" }),
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("option", { children: "Bafoussam" })
              ] }) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "p-4 border-l-4 border-kmer-green bg-green-50 dark:bg-green-900/20 rounded-r-lg", children: [
            /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("h2", { className: "text-lg font-semibold flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(DocumentTextIcon, { className: "w-5 h-5" }),
              " ",
              t("becomeSeller.requiredDocsTitle")
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { className: "text-sm mt-2 text-gray-700 dark:text-gray-300", children: t("becomeSeller.requiredDocsDescription") }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("ul", { className: "list-disc list-inside mt-2 space-y-1 text-sm text-gray-700 dark:text-gray-300", children: requiredDocuments.map((doc) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("li", { children: doc }, doc)) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "flex justify-end pt-4", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { type: "submit", className: "bg-kmer-green text-white font-bold py-3 px-8 rounded-lg hover:bg-green-700 transition-colors text-lg", children: t("becomeServiceProvider.submit") }) })
        ] })
      ] })
    ] }) });
  };
  var BecomeServiceProvider_default = BecomeServiceProvider;

  // components/CategoryPage.tsx
  var import_react24 = __toESM(require_react(), 1);

  // hooks/useProductFiltering.ts
  var import_react22 = __toESM(require_react(), 1);
  var getActiveFlashSalePrice5 = (productId, flashSales) => {
    const now = /* @__PURE__ */ new Date();
    for (const sale of flashSales) {
      const startDate = new Date(sale.startDate);
      const endDate = new Date(sale.endDate);
      if (now >= startDate && now <= endDate) {
        const productInSale = sale.products.find((p) => p.productId === productId && p.status === "approved");
        if (productInSale) return productInSale.flashPrice;
      }
    }
    return null;
  };
  var isPromotionActive5 = (product) => {
    if (!product.promotionPrice || product.promotionPrice >= product.price) {
      return false;
    }
    const now = /* @__PURE__ */ new Date();
    const startDate = product.promotionStartDate ? /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") : null;
    const endDate = product.promotionEndDate ? /* @__PURE__ */ new Date(product.promotionEndDate + "T23:59:59") : null;
    if (!startDate && !endDate) return false;
    if (startDate && endDate) return now >= startDate && now <= endDate;
    if (startDate) return now >= startDate;
    if (endDate) return now <= endDate;
    return false;
  };
  var getFinalPrice2 = (product, flashSales = []) => {
    const flashPrice = getActiveFlashSalePrice5(product.id, flashSales);
    if (flashPrice !== null) return flashPrice;
    if (isPromotionActive5(product)) return product.promotionPrice;
    return product.price;
  };
  var getAverageRating = (product) => {
    const approvedReviews = product.reviews.filter((r) => r.status === "approved");
    if (approvedReviews.length === 0) return 0;
    return approvedReviews.reduce((sum, review) => sum + review.rating, 0) / approvedReviews.length;
  };
  var initialFilters = {
    sort: "relevance",
    priceMin: void 0,
    priceMax: void 0,
    vendors: [],
    brands: [],
    minRating: 0
  };
  var useProductFiltering = (products, allStores) => {
    const [filters, setFilters] = (0, import_react22.useState)(initialFilters);
    const productIdsKey = (0, import_react22.useMemo)(() => products.map((p) => p.id).sort().join(","), [products]);
    (0, import_react22.useEffect)(() => {
      setFilters(initialFilters);
    }, [productIdsKey]);
    const resetFilters = () => setFilters(initialFilters);
    const filteredAndSortedProducts = (0, import_react22.useMemo)(() => {
      let filtered = [...products];
      if (filters.priceMin !== void 0) {
        filtered = filtered.filter((p) => getFinalPrice2(p, []) >= filters.priceMin);
      }
      if (filters.priceMax !== void 0) {
        filtered = filtered.filter((p) => getFinalPrice2(p, []) <= filters.priceMax);
      }
      if (filters.vendors.length > 0) {
        filtered = filtered.filter((p) => filters.vendors.includes(p.vendor));
      }
      if (filters.brands.length > 0) {
        filtered = filtered.filter((p) => p.brand && filters.brands.includes(p.brand));
      }
      if (filters.minRating > 0) {
        filtered = filtered.filter((p) => getAverageRating(p) >= filters.minRating);
      }
      const premiumVendors = new Set(allStores.filter((s) => s.premiumStatus === "premium").map((s) => s.name));
      const premiumSort = (a, b) => {
        const aIsPremium = premiumVendors.has(a.vendor);
        const bIsPremium = premiumVendors.has(b.vendor);
        if (aIsPremium && !bIsPremium) return -1;
        if (!aIsPremium && bIsPremium) return 1;
        return 0;
      };
      switch (filters.sort) {
        case "price-asc":
          filtered.sort((a, b) => premiumSort(a, b) || getFinalPrice2(a, []) - getFinalPrice2(b, []));
          break;
        case "price-desc":
          filtered.sort((a, b) => premiumSort(a, b) || getFinalPrice2(b, []) - getFinalPrice2(a, []));
          break;
        case "rating-desc":
          filtered.sort((a, b) => premiumSort(a, b) || getAverageRating(b) - getAverageRating(a));
          break;
        case "newest-desc":
          filtered.sort((a, b) => premiumSort(a, b) || parseInt(b.id) - parseInt(a.id));
          break;
        case "relevance":
        default:
          filtered.sort(premiumSort);
          break;
      }
      return filtered;
    }, [products, filters, allStores]);
    return {
      filteredAndSortedProducts,
      filters,
      setFilters,
      resetFilters
    };
  };

  // components/ProductFilters.tsx
  var import_react23 = __toESM(require_react(), 1);
  var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
  var getFinalPrice3 = (product) => {
    return product.promotionPrice ?? product.price;
  };
  var SortOptions = {
    "relevance": "Pertinence",
    "price-asc": "Prix : Croissant",
    "price-desc": "Prix : D\xE9croissant",
    "rating-desc": "Mieux not\xE9s",
    "newest-desc": "Plus r\xE9cents"
  };
  var ProductFilters = ({ allProducts, filters, setFilters, resetFilters }) => {
    const [isFilterOpen, setIsFilterOpen] = (0, import_react23.useState)(false);
    const [localFilters, setLocalFilters] = (0, import_react23.useState)(filters);
    (0, import_react23.useEffect)(() => {
      setLocalFilters(filters);
    }, [filters]);
    const availableVendors = (0, import_react23.useMemo)(() => {
      return [...new Set(allProducts.map((p) => p.vendor))].sort();
    }, [allProducts]);
    const availableBrands = (0, import_react23.useMemo)(() => {
      return [...new Set(allProducts.map((p) => p.brand).filter(Boolean))].sort();
    }, [allProducts]);
    const priceRange = (0, import_react23.useMemo)(() => {
      if (allProducts.length === 0) return { min: 0, max: 1e5 };
      const prices = allProducts.map(getFinalPrice3);
      return {
        min: Math.floor(Math.min(...prices) / 1e3) * 1e3,
        max: Math.ceil(Math.max(...prices) / 1e3) * 1e3
      };
    }, [allProducts]);
    const activeFilterCount = (0, import_react23.useMemo)(() => {
      const { priceMin, priceMax, vendors, brands, minRating } = filters;
      let count = 0;
      if (priceMin !== void 0 && priceMin !== priceRange.min) count++;
      if (priceMax !== void 0 && priceMax !== priceRange.max) count++;
      if (vendors.length > 0) count++;
      if (brands.length > 0) count++;
      if (minRating > 0) count++;
      return count;
    }, [filters, priceRange]);
    const handleApplyFilters = () => {
      setFilters(localFilters);
      setIsFilterOpen(false);
    };
    const handleResetAndApply = () => {
      resetFilters();
      setIsFilterOpen(false);
    };
    const handleVendorChange = (vendor) => {
      setLocalFilters((prev) => ({
        ...prev,
        vendors: prev.vendors.includes(vendor) ? prev.vendors.filter((v) => v !== vendor) : [...prev.vendors, vendor]
      }));
    };
    const handleBrandChange = (brand) => {
      setLocalFilters((prev) => ({
        ...prev,
        brands: prev.brands.includes(brand) ? prev.brands.filter((b) => b !== brand) : [...prev.brands, brand]
      }));
    };
    const filterContent = /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "p-4 space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("h3", { className: "font-semibold mb-2 dark:text-gray-200", children: "Prix (FCFA)" }),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
            "input",
            {
              type: "number",
              placeholder: `Min (${priceRange.min})`,
              value: localFilters.priceMin ?? "",
              onChange: (e) => setLocalFilters((f) => ({ ...f, priceMin: e.target.value ? parseInt(e.target.value) : void 0 })),
              className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 text-sm"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("span", { children: "-" }),
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
            "input",
            {
              type: "number",
              placeholder: `Max (${priceRange.max})`,
              value: localFilters.priceMax ?? "",
              onChange: (e) => setLocalFilters((f) => ({ ...f, priceMax: e.target.value ? parseInt(e.target.value) : void 0 })),
              className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 text-sm"
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("h3", { className: "font-semibold mb-2 dark:text-gray-200", children: "Boutiques" }),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("div", { className: "space-y-1 max-h-48 overflow-y-auto", children: availableVendors.map((vendor) => /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("label", { className: "flex items-center gap-2 text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
            "input",
            {
              type: "checkbox",
              checked: localFilters.vendors.includes(vendor),
              onChange: () => handleVendorChange(vendor),
              className: "h-4 w-4 rounded border-gray-300 text-kmer-green focus:ring-kmer-green"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("span", { className: "dark:text-gray-300", children: vendor })
        ] }, vendor)) })
      ] }),
      availableBrands.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("h3", { className: "font-semibold mb-2 dark:text-gray-200", children: "Marques" }),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("div", { className: "space-y-1 max-h-48 overflow-y-auto", children: availableBrands.map((brand) => /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("label", { className: "flex items-center gap-2 text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
            "input",
            {
              type: "checkbox",
              checked: localFilters.brands.includes(brand),
              onChange: () => handleBrandChange(brand),
              className: "h-4 w-4 rounded border-gray-300 text-kmer-green focus:ring-kmer-green"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("span", { className: "dark:text-gray-300", children: brand })
        ] }, brand)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("h3", { className: "font-semibold mb-2 dark:text-gray-200", children: "Note minimale" }),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("div", { className: "flex justify-around", children: [4, 3, 2, 1].map((rating) => /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(
          "button",
          {
            onClick: () => setLocalFilters((f) => ({ ...f, minRating: f.minRating === rating ? 0 : rating })),
            className: `flex items-center gap-1 p-2 rounded-md transition-colors ${localFilters.minRating === rating ? "bg-kmer-yellow/20 text-kmer-yellow" : "hover:bg-gray-100 dark:hover:bg-gray-700"}`,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(StarIcon, { className: "w-4 h-4 text-kmer-yellow" }),
              /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("span", { className: "text-sm font-semibold", children: [
                rating,
                "+"
              ] })
            ]
          },
          rating
        )) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "flex flex-col gap-2 pt-4 border-t dark:border-gray-600", children: [
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("button", { onClick: handleApplyFilters, className: "w-full bg-kmer-green text-white font-bold py-2 rounded-lg", children: "Appliquer" }),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("button", { onClick: handleResetAndApply, className: "w-full flex items-center justify-center gap-2 bg-gray-200 dark:bg-gray-600 font-semibold py-2 rounded-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(ArrowPathIcon, { className: "w-4 h-4" }),
          " R\xE9initialiser"
        ] })
      ] })
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(import_jsx_runtime25.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "lg:hidden mb-4 flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("button", { onClick: () => setIsFilterOpen(true), className: `relative flex items-center gap-2 font-bold p-2 rounded-md ${activeFilterCount > 0 ? "bg-kmer-green/20 text-kmer-green" : "bg-kmer-green/10 text-kmer-green"}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(FilterIcon, { className: "w-5 h-5" }),
          " Filtres",
          activeFilterCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("span", { className: "absolute -top-1 -right-1 flex h-5 w-5 items-center justify-center rounded-full bg-kmer-red text-white text-xs", children: activeFilterCount })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
          "select",
          {
            value: filters.sort,
            onChange: (e) => setFilters((f) => ({ ...f, sort: e.target.value })),
            className: "p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 text-sm font-semibold",
            children: Object.keys(SortOptions).map((key) => /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("option", { value: key, children: SortOptions[key] }, key))
          }
        )
      ] }),
      isFilterOpen && /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("div", { className: "fixed inset-0 bg-black/50 z-40 lg:hidden", onClick: () => setIsFilterOpen(false), children: /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "fixed inset-y-0 left-0 w-4/5 max-w-sm bg-white dark:bg-gray-800 shadow-xl", onClick: (e) => e.stopPropagation(), children: [
        /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "flex justify-between items-center p-4 border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("h2", { className: "font-bold text-lg dark:text-white", children: "Filtres" }),
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("button", { onClick: () => setIsFilterOpen(false), children: /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(XIcon, { className: "w-6 h-6" }) })
        ] }),
        filterContent
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("aside", { className: "hidden lg:block w-72 flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-sm sticky top-28", children: [
        /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "p-4 border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("label", { htmlFor: "sort-desktop", className: "text-sm font-medium dark:text-gray-400", children: "Trier par" }),
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
            "select",
            {
              id: "sort-desktop",
              value: filters.sort,
              onChange: (e) => setFilters((f) => ({ ...f, sort: e.target.value })),
              className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 font-semibold focus:ring-1 focus:ring-kmer-green",
              children: Object.keys(SortOptions).map((key) => /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("option", { value: key, children: SortOptions[key] }, key))
            }
          )
        ] }),
        filterContent
      ] }) })
    ] });
  };
  var ProductFilters_default = ProductFilters;

  // components/CategoryPage.tsx
  var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
  var CategoryPage = ({ categoryId, allCategories, allProducts, allStores, flashSales, onProductClick, onBack, onVendorClick, isComparisonEnabled }) => {
    const { t } = useLanguage();
    const { selectedCategory, productsInCategory } = (0, import_react24.useMemo)(() => {
      const selectedCat = allCategories.find((c) => c.id === categoryId);
      if (!selectedCat) {
        return { selectedCategory: null, productsInCategory: [] };
      }
      let categoryIdsToFilter;
      if (!selectedCat.parentId) {
        const subCategoryIds = allCategories.filter((c) => c.parentId === selectedCat.id).map((c) => c.id);
        categoryIdsToFilter = [selectedCat.id, ...subCategoryIds];
      } else {
        categoryIdsToFilter = [selectedCat.id];
      }
      const filteredProducts = allProducts.filter((p) => categoryIdsToFilter.includes(p.categoryId));
      return { selectedCategory: selectedCat, productsInCategory: filteredProducts };
    }, [allProducts, categoryId, allCategories]);
    const { filteredAndSortedProducts, filters, setFilters, resetFilters } = useProductFiltering(productsInCategory, allStores);
    const findStoreLocation = (vendorName) => allStores.find((s) => s.name === vendorName)?.location;
    if (!selectedCategory) {
      return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12 text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("p", { children: "Cat\xE9gorie non trouv\xE9e." }),
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("button", { onClick: onBack, className: "mt-4 text-kmer-green font-semibold", children: "Retour" })
      ] });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        t("header.backToHome")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "lg:flex lg:gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
          ProductFilters_default,
          {
            allProducts: productsInCategory,
            filters,
            setFilters,
            resetFilters
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("main", { className: "flex-grow", children: [
          /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "mb-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: [
              t("categoryPage.titlePrefix"),
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { className: "text-kmer-green", children: t(selectedCategory.name) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("p", { className: "text-gray-600 dark:text-gray-300", children: [
              filteredAndSortedProducts.length,
              " sur ",
              productsInCategory.length,
              " produits affich\xE9s"
            ] })
          ] }),
          filteredAndSortedProducts.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6", children: filteredAndSortedProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: findStoreLocation(product.vendor), flashSales, isComparisonEnabled, stores: allStores }, product.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md h-full flex flex-col justify-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: "Aucun produit ne correspond \xE0 vos filtres." }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: "Essayez d'\xE9largir votre recherche." })
          ] })
        ] })
      ] })
    ] });
  };
  var CategoryPage_default = CategoryPage;

  // components/SellerDashboard.tsx
  var import_react36 = __toESM(require_react(), 1);

  // components/seller/OverviewPanel.tsx
  var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
  var StatCard = ({ label, value, icon }) => /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg shadow-sm", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex items-center gap-3", children: [
    icon,
    /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("h3", { className: "text-sm font-medium text-gray-500 dark:text-gray-400", children: label }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("p", { className: "text-2xl font-bold text-gray-800 dark:text-white", children: value })
    ] })
  ] }) });
  var OverviewPanel = ({ store, sellerOrders, sellerNotifications, onNavigateToAnalytics, setActiveTab }) => {
    const { t } = useLanguage();
    const totalRevenue = sellerOrders.filter((o) => o.status === "delivered").reduce((sum, o) => sum + o.total, 0);
    const pendingOrders = sellerOrders.filter((o) => ["confirmed", "ready-for-pickup"].includes(o.status)).length;
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "p-6 space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("h2", { className: "text-2xl font-bold", children: t("sellerDashboard.overview.title", store.name) }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(StatCard, { label: t("sellerDashboard.overview.totalRevenue"), value: `${totalRevenue.toLocaleString("fr-CM")} FCFA`, icon: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ChartPieIcon, { className: "w-6 h-6 text-green-500" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(StatCard, { label: t("sellerDashboard.overview.pendingOrders"), value: pendingOrders, icon: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ShoppingBagIcon, { className: "w-6 h-6 text-yellow-500" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(StatCard, { label: t("sellerDashboard.overview.status"), value: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", { className: "capitalize", children: store.premiumStatus.replace("_", " ") }), icon: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(StarIcon, { className: "w-6 h-6 text-blue-500" }) })
      ] }),
      store.warnings && store.warnings.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "p-4 bg-red-50 dark:bg-red-900/50 border-l-4 border-red-500 rounded-r-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("h3", { className: "font-bold text-lg text-red-800 dark:text-red-200 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ExclamationTriangleIcon, { className: "w-6 h-6" }),
          " ",
          t("sellerDashboard.overview.warnings")
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("ul", { className: "list-disc list-inside mt-2 text-sm text-red-700 dark:text-red-300", children: store.warnings.map((w) => /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("li", { children: [
          "Le ",
          new Date(w.date).toLocaleDateString(),
          ": ",
          w.reason
        ] }, w.id)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "p-4 bg-blue-50 dark:bg-blue-900/50 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("h3", { className: "font-bold text-lg text-blue-800 dark:text-blue-200 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(BellIcon, { className: "w-6 h-6" }),
          " ",
          t("sellerDashboard.overview.notifications")
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("ul", { className: "mt-2 space-y-1 text-sm", children: [
          sellerNotifications.slice(0, 3).map((n) => /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("li", { className: "text-blue-700 dark:text-blue-300", children: n.message }, n.id)),
          sellerNotifications.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("p", { className: "text-gray-500", children: t("sellerDashboard.overview.noNotifications") })
        ] })
      ] })
    ] });
  };
  var OverviewPanel_default = OverviewPanel;

  // components/seller/ProductsPanel.tsx
  var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
  var ProductsPanel = ({ products, onAddProduct, onAddService, onEditProduct, onDeleteProduct, onUpdateProductStatus, onSetPromotion, onAddProductToStory }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex justify-between items-center mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("h2", { className: "text-2xl font-bold", children: t("sellerDashboard.products.title", products.length) }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("button", { onClick: onAddProduct, className: "bg-green-500 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(PlusIcon, { className: "w-5 h-5" }),
            " ",
            t("sellerDashboard.products.addProduct")
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("button", { onClick: onAddService, className: "bg-purple-500 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(SparklesIcon, { className: "w-5 h-5" }),
            " ",
            t("sellerDashboard.products.addService")
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "overflow-x-auto", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("table", { className: "w-full text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("th", { className: "p-2 text-left", children: t("sellerDashboard.products.table.product") }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("th", { className: "p-2 text-right", children: t("sellerDashboard.products.table.price") }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("th", { className: "p-2 text-center", children: t("sellerDashboard.products.table.stock") }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("th", { className: "p-2 text-center", children: t("sellerDashboard.products.table.status") }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("th", { className: "p-2 text-center", children: t("sellerDashboard.products.table.actions") })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("tbody", { children: products.map((p) => /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
            /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("td", { className: "p-2 flex items-center gap-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("img", { src: p.imageUrls[0], alt: p.name, className: "w-12 h-12 object-cover rounded-md" }),
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("span", { className: "font-semibold", children: p.name })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("td", { className: "p-2 text-right", children: [
              p.price.toLocaleString("fr-CM"),
              " FCFA"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("td", { className: "p-2 text-center", children: p.type === "service" ? "N/A" : p.stock }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("td", { className: "p-2 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("select", { value: p.status, onChange: (e) => onUpdateProductStatus(p.id, e.target.value), className: "p-1 border rounded-md text-xs dark:bg-gray-600 dark:border-gray-500", children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("option", { value: "published", children: t("sellerDashboard.products.statusOptions.published") }),
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("option", { value: "draft", children: t("sellerDashboard.products.statusOptions.draft") }),
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("option", { value: "archived", children: t("sellerDashboard.products.statusOptions.archived") })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("td", { className: "p-2", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex justify-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("button", { onClick: () => onAddProductToStory(p.id), className: "text-purple-500", title: "Ajouter \xE0 la story", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(SparklesIcon, { className: "w-5 h-5" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("button", { onClick: () => onSetPromotion(p), className: "text-yellow-500", title: t("sellerDashboard.products.actions.promote"), children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(TagIcon, { className: "w-5 h-5" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("button", { onClick: () => onEditProduct(p), className: "text-blue-500", title: t("sellerDashboard.products.actions.edit"), children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(PencilSquareIcon, { className: "w-5 h-5" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("button", { onClick: () => onDeleteProduct(p.id), className: "text-red-500", title: t("sellerDashboard.products.actions.delete"), children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(TrashIcon, { className: "w-5 h-5" }) })
            ] }) })
          ] }, p.id)) })
        ] }),
        products.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("p", { className: "text-center text-gray-500 py-8", children: t("sellerDashboard.products.noProducts") })
      ] })
    ] });
  };
  var ProductsPanel_default = ProductsPanel;

  // components/seller/OrdersPanel.tsx
  var import_react25 = __toESM(require_react(), 1);
  var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
  var OrderDetailModal = ({ order, onClose, store }) => {
    const { t } = useLanguage();
    const sellerItems = order.items.filter((item) => item.vendor === store.name);
    const handlePrint = () => {
      const printContents = document.getElementById("printable-slip")?.innerHTML;
      const originalContents = document.body.innerHTML;
      const printWindow = window.open("", "", "height=600,width=800");
      if (printWindow && printContents) {
        printWindow.document.write("<html><head><title>Bon de Livraison</title>");
        printWindow.document.write("<style>body{font-family:sans-serif;} table{width:100%; border-collapse:collapse;} td,th{border:1px solid #ddd; padding:8px;} th{background-color:#f2f2f2;}</style>");
        printWindow.document.write("</head><body>");
        printWindow.document.write(printContents);
        printWindow.document.write("</body></html>");
        printWindow.document.close();
        printWindow.focus();
        printWindow.print();
        printWindow.close();
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4 animate-in", children: /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 max-w-2xl w-full relative max-h-[90vh] flex flex-col", children: [
      /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex justify-between items-center border-b dark:border-gray-700 pb-3 mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("h3", { className: "text-xl font-bold", children: [
          t("sellerDashboard.orders.details"),
          " #",
          order.id
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("button", { onClick: onClose, className: "text-gray-400 hover:text-gray-600", children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(XIcon, { className: "w-6 h-6" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex-grow overflow-y-auto", id: "printable-slip", children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "mb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("h4", { className: "font-semibold", children: t("sellerDashboard.orders.customerInfo") }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("address", { className: "not-italic text-sm text-gray-600 dark:text-gray-300", children: [
            order.shippingAddress.fullName,
            /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("br", {}),
            order.shippingAddress.phone,
            /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("br", {}),
            order.shippingAddress.address,
            ", ",
            order.shippingAddress.city
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("h4", { className: "font-semibold", children: t("sellerDashboard.orders.items") }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "mt-2 border rounded-lg dark:border-gray-700 overflow-hidden", children: /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("table", { className: "w-full text-sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("thead", { className: "bg-gray-50 dark:bg-gray-700/50", children: /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("tr", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("th", { className: "p-2 text-left", children: "Produit" }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("th", { className: "p-2 text-center", children: "Qt\xE9" }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("th", { className: "p-2 text-right", children: "Prix" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("tbody", { children: sellerItems.map((item) => /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("tr", { className: "border-t dark:border-gray-700", children: [
              /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("td", { className: "p-2 flex items-center gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("img", { src: item.imageUrls[0], alt: item.name, className: "w-10 h-10 object-cover rounded" }),
                /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("span", { children: [
                  item.name,
                  item.type === "service" && /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("span", { className: "ml-2 text-xs bg-purple-100 text-purple-800 rounded-full px-2 py-0.5", children: "Service" })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("td", { className: "p-2 text-center", children: item.quantity }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("td", { className: "p-2 text-right font-semibold", children: [
                ((item.promotionPrice ?? item.price) * item.quantity).toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] }, item.id)) })
          ] }) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "mt-4 pt-4 border-t dark:border-gray-700 flex justify-end", children: /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("button", { onClick: handlePrint, className: "flex items-center gap-2 bg-gray-200 dark:bg-gray-600 font-semibold py-2 px-4 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(PrinterIcon, { className: "w-5 h-5" }),
        t("sellerDashboard.orders.printSlip")
      ] }) })
    ] }) });
  };
  var OrdersPanel = ({ sellerOrders, onUpdateOrderStatus, store, onSellerCancelOrder }) => {
    const { t } = useLanguage();
    const [activeTab, setActiveTab] = (0, import_react25.useState)("pending");
    const [selectedOrder, setSelectedOrder] = (0, import_react25.useState)(null);
    const ordersByStatus = (0, import_react25.useMemo)(() => ({
      pending: sellerOrders.filter((o) => o.status === "confirmed"),
      ready: sellerOrders.filter((o) => o.status === "ready-for-pickup"),
      shipped: sellerOrders.filter((o) => ["picked-up", "at-depot", "out-for-delivery"].includes(o.status)),
      completed: sellerOrders.filter((o) => ["delivered", "cancelled", "refund-requested", "refunded", "returned", "delivery-failed"].includes(o.status)),
      all: sellerOrders
    }), [sellerOrders]);
    const currentOrders = (0, import_react25.useMemo)(() => ordersByStatus[activeTab], [activeTab, ordersByStatus]);
    const TabButton3 = ({ tab, label }) => /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(
      "button",
      {
        onClick: () => setActiveTab(tab),
        className: `px-4 py-2 font-semibold flex-shrink-0 whitespace-nowrap ${activeTab === tab ? "border-b-2 border-kmer-green text-kmer-green" : "text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"}`,
        children: [
          label,
          " (",
          ordersByStatus[tab].length,
          ")"
        ]
      }
    );
    const getStatusClass = (status) => {
      switch (status) {
        case "confirmed":
          return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300";
        case "ready-for-pickup":
          return "bg-orange-100 text-orange-800 dark:bg-orange-900/50 dark:text-orange-300";
        case "picked-up":
        case "at-depot":
        case "out-for-delivery":
          return "bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300";
        case "delivered":
          return "bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300";
        case "cancelled":
        case "delivery-failed":
          return "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300";
        case "refund-requested":
          return "bg-purple-100 text-purple-800 dark:bg-purple-900/50 dark:text-purple-300";
        default:
          return "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300";
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "p-6", children: [
      selectedOrder && /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(OrderDetailModal, { order: selectedOrder, onClose: () => setSelectedOrder(null), store }),
      /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("h2", { className: "text-2xl font-bold mb-4", children: t("sellerDashboard.orders.title", sellerOrders.length) }),
      /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex border-b dark:border-gray-700 mb-4 overflow-x-auto", children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TabButton3, { tab: "pending", label: t("sellerDashboard.orders.tabs.pending") }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TabButton3, { tab: "ready", label: t("sellerDashboard.orders.tabs.ready") }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TabButton3, { tab: "shipped", label: t("sellerDashboard.orders.tabs.shipped") }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TabButton3, { tab: "completed", label: t("sellerDashboard.orders.tabs.completed") }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TabButton3, { tab: "all", label: t("sellerDashboard.orders.tabs.all") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "space-y-4", children: currentOrders.length > 0 ? currentOrders.map((order) => {
        const sellerItems = order.items.filter((item) => item.vendor === store.name);
        const sellerTotal = sellerItems.reduce((sum, item) => sum + (item.promotionPrice ?? item.price) * item.quantity, 0);
        return /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg border dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex flex-col sm:flex-row justify-between sm:items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("p", { className: "font-bold text-lg font-mono text-gray-800 dark:text-gray-200", children: order.id }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("p", { className: "text-sm text-gray-500", children: new Date(order.orderDate).toLocaleString("fr-FR") })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "text-left sm:text-right", children: [
              /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("p", { className: "font-semibold", children: [
                sellerTotal.toLocaleString("fr-CM"),
                " FCFA (",
                sellerItems.length,
                " article(s))"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: [
                t("sellerDashboard.orders.table.customer"),
                ": ",
                order.shippingAddress.fullName
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("span", { className: `px-2 py-1 rounded-full text-xs font-semibold ${getStatusClass(order.status)}`, children: t(`orderStatus.${order.status}`) }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "border-t dark:border-gray-700 mt-4 pt-4 flex flex-col sm:flex-row justify-between sm:items-center gap-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex -space-x-2", children: [
              sellerItems.slice(0, 5).map((item) => /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("img", { src: item.imageUrls[0], alt: item.name, className: "w-10 h-10 object-cover rounded-full border-2 border-white dark:border-gray-800", title: item.name }, item.id)),
              sellerItems.length > 5 && /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center text-xs font-bold", children: [
                "+",
                sellerItems.length - 5
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex gap-2 flex-wrap", children: [
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("button", { onClick: () => setSelectedOrder(order), className: "bg-gray-200 dark:bg-gray-600 font-semibold py-1 px-3 text-sm rounded-md hover:bg-gray-300 dark:hover:bg-gray-500", children: t("sellerDashboard.orders.details") }),
              order.status === "confirmed" && /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(import_jsx_runtime29.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("button", { onClick: () => onUpdateOrderStatus(order.id, "ready-for-pickup"), className: "bg-blue-500 text-white text-sm font-bold py-1 px-3 rounded-md hover:bg-blue-600", children: t("sellerDashboard.orders.markReady") }),
                /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("button", { onClick: () => {
                  if (window.confirm(t("sellerDashboard.orders.cancelConfirm"))) {
                    onSellerCancelOrder(order.id);
                  }
                }, className: "bg-red-500 text-white text-sm font-bold py-1 px-3 rounded-md hover:bg-red-600", children: t("sellerDashboard.orders.cancelOrder") })
              ] }),
              order.status === "refund-requested" && /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("p", { className: "text-sm font-bold text-purple-600 py-1 px-3", children: t("sellerDashboard.orders.disputeNotice") })
            ] })
          ] })
        ] }, order.id);
      }) : /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("p", { className: "text-center py-8 text-gray-500", children: t("sellerDashboard.orders.noOrders") }) })
    ] });
  };
  var OrdersPanel_default = OrdersPanel;

  // components/seller/ReviewsPanel.tsx
  var import_react26 = __toESM(require_react(), 1);
  var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
  var ReviewsPanel = ({ products, onReplyToReview }) => {
    const { t } = useLanguage();
    const allReviews = products.flatMap((p) => p.reviews.map((r) => ({ ...r, productId: p.id, productName: p.name })));
    const [replyingTo, setReplyingTo] = (0, import_react26.useState)(null);
    const [replyText, setReplyText] = (0, import_react26.useState)("");
    const handleReply = (productId, review) => {
      onReplyToReview(productId, { author: review.author, date: review.date }, replyText);
      setReplyingTo(null);
      setReplyText("");
    };
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("h2", { className: "text-2xl font-bold mb-4", children: t("sellerDashboard.reviews.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "space-y-4", children: allReviews.map((review) => /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "font-semibold text-kmer-green", children: review.productName }),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(StarIcon, { className: "w-4 h-4 text-yellow-400" }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { children: t("sellerDashboard.reviews.rating", review.rating, review.author) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("p", { className: "italic", children: [
          '"',
          review.comment,
          '"'
        ] }),
        review.sellerReply ? /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "mt-2 p-2 bg-green-100 dark:bg-green-900/50 rounded-md text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("strong", { children: t("sellerDashboard.reviews.yourReply") }),
          " ",
          review.sellerReply.text
        ] }) : replyingTo === `${review.productId}-${review.date}` ? /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "mt-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("textarea", { value: replyText, onChange: (e) => setReplyText(e.target.value), rows: 2, className: "w-full p-1 border rounded" }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("button", { onClick: () => handleReply(review.productId, review), className: "bg-blue-500 text-white text-xs px-2 py-1 rounded", children: t("sellerDashboard.reviews.send") })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("button", { onClick: () => setReplyingTo(`${review.productId}-${review.date}`), className: "text-sm text-blue-500 mt-2", children: t("sellerDashboard.reviews.reply") })
      ] }, `${review.productId}-${review.date}`)) })
    ] });
  };
  var ReviewsPanel_default = ReviewsPanel;

  // components/seller/PromotionsPanel.tsx
  var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
  var PromotionsPanel = ({ promoCodes, onCreatePromoCode, onDeletePromoCode }) => {
    const { t } = useLanguage();
    const handleCreate = (e) => {
      e.preventDefault();
      const formData = new FormData(e.currentTarget);
      const newCode = {
        code: formData.get("code"),
        discountType: formData.get("discountType"),
        discountValue: Number(formData.get("discountValue"))
      };
      onCreatePromoCode({ ...newCode, sellerId: "seller-1" });
      e.currentTarget.reset();
    };
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("h2", { className: "text-2xl font-bold mb-4", children: t("sellerDashboard.promotions.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("form", { onSubmit: handleCreate, className: "p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg grid grid-cols-3 gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("input", { name: "code", placeholder: t("sellerDashboard.promotions.createForm.code"), className: "p-2 border rounded", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("input", { name: "discountValue", type: "number", placeholder: t("sellerDashboard.promotions.createForm.value"), className: "p-2 border rounded", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("select", { name: "discountType", className: "p-2 border rounded", children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("option", { value: "percentage", children: t("sellerDashboard.promotions.createForm.type_percentage") }),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("option", { value: "fixed", children: t("sellerDashboard.promotions.createForm.type_fixed") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("button", { type: "submit", className: "col-span-3 bg-blue-500 text-white p-2 rounded", children: t("sellerDashboard.promotions.createForm.create") })
      ] })
    ] });
  };
  var PromotionsPanel_default = PromotionsPanel;

  // components/seller/FlashSalesPanel.tsx
  var import_react27 = __toESM(require_react(), 1);
  var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
  var FlashSalesPanel = ({ flashSales, products, onProposeForFlashSale, store }) => {
    const { t } = useLanguage();
    const [selectedProduct, setSelectedProduct] = (0, import_react27.useState)("");
    const [flashPrice, setFlashPrice] = (0, import_react27.useState)("");
    const handleSubmit = (saleId) => {
      if (selectedProduct && flashPrice && store) {
        onProposeForFlashSale(saleId, selectedProduct, Number(flashPrice), store.name);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("h2", { className: "text-2xl font-bold mb-4", children: t("sellerDashboard.flashSales.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "space-y-4", children: flashSales.map((sale) => /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "p-4 border rounded-lg dark:border-gray-700", children: [
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("h3", { className: "font-semibold", children: sale.name }),
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("p", { className: "text-sm", children: t("sellerDashboard.flashSales.endsOn", new Date(sale.endDate).toLocaleDateString()) }),
        /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "mt-2 p-2 bg-gray-100 dark:bg-gray-700/50 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("h4", { className: "font-semibold text-sm", children: t("sellerDashboard.flashSales.submitProduct") }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "grid grid-cols-3 gap-2 mt-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("select", { onChange: (e) => setSelectedProduct(e.target.value), className: "p-1 border rounded text-xs col-span-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("option", { value: "", children: t("sellerDashboard.flashSales.chooseProduct") }),
              products.map((p) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("option", { value: p.id, children: p.name }, p.id))
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("input", { type: "number", value: flashPrice, onChange: (e) => setFlashPrice(e.target.value), placeholder: t("sellerDashboard.flashSales.flashPrice"), className: "p-1 border rounded text-xs" }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("button", { onClick: () => handleSubmit(sale.id), className: "col-span-3 bg-blue-500 text-white p-1 rounded text-sm", children: t("sellerDashboard.flashSales.submit") })
          ] })
        ] })
      ] }, sale.id)) })
    ] });
  };
  var FlashSalesPanel_default = FlashSalesPanel;

  // components/seller/PayoutsPanel.tsx
  var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
  var PayoutsPanel = ({ payouts }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("h2", { className: "text-2xl font-bold mb-4", children: t("sellerDashboard.payouts.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "overflow-x-auto", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("table", { className: "w-full text-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("th", { className: "p-2 text-left", children: t("sellerDashboard.payouts.table.date") }),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("th", { className: "p-2 text-right", children: t("sellerDashboard.payouts.table.amount") })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("tbody", { children: payouts.map((payout) => /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("td", { className: "p-2", children: new Date(payout.date).toLocaleDateString() }),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("td", { className: "p-2 text-right font-semibold text-green-600", children: [
            payout.amount.toLocaleString("fr-CM"),
            " FCFA"
          ] })
        ] }, payout.date)) })
      ] }) })
    ] });
  };
  var PayoutsPanel_default = PayoutsPanel;

  // components/seller/DocumentsPanel.tsx
  var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
  var getStatusIcon = (status) => {
    switch (status) {
      case "verified":
        return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(CheckCircleIcon, { className: "w-5 h-5 text-green-500" });
      case "uploaded":
        return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(ClockIcon, { className: "w-5 h-5 text-blue-500" });
      case "rejected":
        return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(ExclamationTriangleIcon, { className: "w-5 h-5 text-red-500" });
      default:
        return null;
    }
  };
  var DocumentsPanel = ({ store, onUploadDocument }) => {
    const { t } = useLanguage();
    const handleFileUpload = (documentName, e) => {
      if (e.target.files && e.target.files[0]) {
        const reader = new FileReader();
        reader.onload = (event) => {
          onUploadDocument(store.id, documentName, event.target?.result);
        };
        reader.readAsDataURL(e.target.files[0]);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("h2", { className: "text-2xl font-bold mb-4", children: t("sellerDashboard.documents.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "space-y-4", children: store.documents.map((doc) => /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "p-4 border rounded-lg dark:border-gray-700", children: [
        /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "flex justify-between items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("p", { className: "font-semibold", children: doc.name }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("p", { className: "text-sm capitalize flex items-center gap-1", children: [
              getStatusIcon(doc.status),
              " ",
              doc.status
            ] })
          ] }),
          doc.status !== "verified" && /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("label", { className: "bg-blue-500 text-white text-sm font-bold py-1 px-3 rounded-md cursor-pointer", children: [
            doc.status === "uploaded" ? t("sellerDashboard.documents.replace") : t("sellerDashboard.documents.upload"),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("input", { type: "file", className: "hidden", onChange: (e) => handleFileUpload(doc.name, e) })
          ] })
        ] }),
        doc.rejectionReason && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("p", { className: "text-xs text-red-500 mt-1", children: t("sellerDashboard.documents.rejectionReason", doc.rejectionReason) })
      ] }, doc.name)) })
    ] });
  };
  var DocumentsPanel_default = DocumentsPanel;

  // components/seller/SupportPanel.tsx
  var import_react30 = __toESM(require_react(), 1);

  // components/account/NewTicketForm.tsx
  var import_react28 = __toESM(require_react(), 1);

  // components/account/common.tsx
  var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
  var Section = ({ title, children, className = "" }) => /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className, children: [
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("h2", { className: "text-2xl font-bold mb-6 text-gray-800 dark:text-white", children: title }),
    children
  ] });

  // components/account/NewTicketForm.tsx
  var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
  var AttachmentPreview = ({ attachments, onRemove }) => /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("div", { className: "mt-2 grid grid-cols-3 sm:grid-cols-5 gap-2", children: attachments.map((url, i) => /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { className: "relative group", children: [
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("img", { src: url, alt: `Aper\xE7u ${i}`, className: "h-20 w-full object-cover rounded-md" }),
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("button", { type: "button", onClick: () => onRemove(i), className: "absolute -top-1 -right-1 bg-red-500 text-white rounded-full p-0.5 opacity-0 group-hover:opacity-100 transition-opacity", children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(TrashIcon, { className: "w-4 h-4" }) })
  ] }, i)) });
  var NewTicketForm = ({ userOrders, onCreate, onCancel }) => {
    const { t } = useLanguage();
    const { user } = useAuth();
    const [subject, setSubject] = (0, import_react28.useState)("");
    const [message, setMessage] = (0, import_react28.useState)("");
    const [orderId, setOrderId] = (0, import_react28.useState)("");
    const [attachments, setAttachments] = (0, import_react28.useState)([]);
    const handleFileChange = (e) => {
      if (e.target.files) {
        const files = Array.from(e.target.files);
        files.forEach((file) => {
          const reader = new FileReader();
          reader.onloadend = () => setAttachments((prev) => [...prev, reader.result]);
          reader.readAsDataURL(file);
        });
      }
    };
    const removeAttachment = (index) => {
      setAttachments((prev) => prev.filter((_, i) => i !== index));
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onCreate(subject, message, orderId, "support", attachments);
    };
    const problemTypes = [
      "order_issue",
      "product_question",
      "delivery_issue",
      "return_request",
      "payment_issue",
      "technical_issue",
      "report_seller",
      "other"
    ];
    const canLinkOrders = user && ["customer", "seller", "enterprise"].includes(user.role);
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(Section, { title: t("accountPage.createTicket"), children: /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("select", { value: subject, onChange: (e) => setSubject(e.target.value), className: "w-full p-2 border rounded-md", required: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("option", { value: "", children: t("supportProblemTypes.select") }),
        problemTypes.map((type) => /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("option", { value: t(`supportProblemTypes.${type}`), children: t(`supportProblemTypes.${type}`) }, type))
      ] }),
      canLinkOrders && /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("select", { value: orderId, onChange: (e) => setOrderId(e.target.value), className: "w-full p-2 border rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("option", { value: "", children: t("accountPage.linkToOrder") }),
        userOrders.map((o) => /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("option", { value: o.id, children: o.id }, o.id))
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("textarea", { value: message, onChange: (e) => setMessage(e.target.value), placeholder: t("accountPage.describeProblem"), rows: 5, className: "w-full p-2 border rounded-md", required: true }),
      /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("label", { htmlFor: "attachments-upload-new", className: "cursor-pointer text-sm font-semibold text-blue-500 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(PaperclipIcon, { className: "w-4 h-4" }),
          " ",
          t("accountPage.attachFiles")
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("input", { id: "attachments-upload-new", type: "file", multiple: true, onChange: handleFileChange, className: "hidden" }),
        attachments.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(AttachmentPreview, { attachments, onRemove: removeAttachment })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { className: "flex gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("button", { type: "button", onClick: onCancel, className: "bg-gray-200 font-bold py-2 px-4 rounded-lg", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("button", { type: "submit", className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg", children: t("accountPage.send") })
      ] })
    ] }) });
  };

  // components/account/TicketDetailView.tsx
  var import_react29 = __toESM(require_react(), 1);
  var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
  var AttachmentPreview2 = ({ attachments, onRemove }) => /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "mt-2 grid grid-cols-3 sm:grid-cols-5 gap-2", children: attachments.map((url, i) => /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "relative group", children: [
    /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("img", { src: url, alt: `Aper\xE7u ${i}`, className: "h-20 w-full object-cover rounded-md" }),
    /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("button", { type: "button", onClick: () => onRemove(i), className: "absolute -top-1 -right-1 bg-red-500 text-white rounded-full p-0.5 opacity-0 group-hover:opacity-100 transition-opacity", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(TrashIcon, { className: "w-4 h-4" }) })
  ] }, i)) });
  var MessageAttachments = ({ urls }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "mt-2 flex flex-wrap gap-2", children: urls.map((url, i) => {
      const isImage = /\.(jpeg|jpg|gif|png|webp)$/i.test(url) || url.startsWith("data:image");
      if (isImage) {
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("a", { href: url, target: "_blank", rel: "noopener noreferrer", className: "block", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("img", { src: url, alt: `${t("accountPage.attachment")} ${i + 1}`, className: "h-24 w-auto rounded-md object-contain border dark:border-gray-600" }) }, i);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("a", { href: url, target: "_blank", rel: "noopener noreferrer", className: "text-blue-500 underline text-sm flex items-center gap-1 p-2 bg-blue-50 dark:bg-blue-900/50 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(PaperclipIcon, { className: "w-4 h-4" }),
        t("accountPage.attachment"),
        " ",
        i + 1
      ] }, i);
    }) });
  };
  var TicketDetailView = ({ ticket, onReply, onBack }) => {
    const { t } = useLanguage();
    const [reply, setReply] = (0, import_react29.useState)("");
    const [attachments, setAttachments] = (0, import_react29.useState)([]);
    const { user } = useAuth();
    const handleFileChange = (e) => {
      if (e.target.files) {
        const files = Array.from(e.target.files);
        files.forEach((file) => {
          const reader = new FileReader();
          reader.onloadend = () => setAttachments((prev) => [...prev, reader.result]);
          reader.readAsDataURL(file);
        });
      }
    };
    const removeAttachment = (index) => {
      setAttachments((prev) => prev.filter((_, i) => i !== index));
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onReply(ticket.id, reply, attachments);
      setReply("");
      setAttachments([]);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(Section, { title: ticket.subject, children: [
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("button", { onClick: onBack, className: "text-sm font-semibold text-kmer-green mb-4", children: t("accountPage.backToList") }),
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "border rounded-lg p-4 h-96 overflow-y-auto bg-gray-50 mb-4 space-y-4", children: ticket.messages.map((msg, i) => {
        const isMe = msg.authorId === user?.id;
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: `flex ${isMe ? "justify-end" : "justify-start"}`, children: /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: `p-3 rounded-lg max-w-sm ${isMe ? "bg-kmer-green text-white" : "bg-white"}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { className: "font-bold text-sm", children: msg.authorName }),
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { className: "whitespace-pre-wrap", children: msg.message }),
          msg.attachmentUrls && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(MessageAttachments, { urls: msg.attachmentUrls })
        ] }) }, i);
      }) }),
      /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("form", { onSubmit: handleSubmit, children: [
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("textarea", { value: reply, onChange: (e) => setReply(e.target.value), rows: 3, placeholder: t("accountPage.yourReply"), className: "w-full p-2 border rounded-md" }),
        /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "mt-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("label", { htmlFor: "attachments-upload-reply", className: "cursor-pointer text-sm font-semibold text-blue-500 flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(PaperclipIcon, { className: "w-4 h-4" }),
            " ",
            t("accountPage.attachFiles")
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("input", { id: "attachments-upload-reply", type: "file", multiple: true, onChange: handleFileChange, className: "hidden" }),
          attachments.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(AttachmentPreview2, { attachments, onRemove: removeAttachment })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("button", { type: "submit", className: "mt-2 bg-kmer-green text-white font-bold py-2 px-4 rounded-lg", children: t("accountPage.send") })
      ] })
    ] });
  };

  // components/seller/SupportPanel.tsx
  var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
  var SupportPanel = (props) => {
    const { t } = useLanguage();
    const { allTickets, sellerOrders, onCreateTicket, onUserReplyToTicket } = props;
    const [selectedTicket, setSelectedTicket] = (0, import_react30.useState)(null);
    const [isCreating, setIsCreating] = (0, import_react30.useState)(false);
    const [showConfirmation, setShowConfirmation] = (0, import_react30.useState)(false);
    const handleCreateTicketAndClose = (subject, message, orderId, type, attachments) => {
      onCreateTicket(subject, message, orderId, type, attachments);
      setIsCreating(false);
      setShowConfirmation(true);
      setTimeout(() => setShowConfirmation(false), 3e3);
    };
    if (isCreating) {
      return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(NewTicketForm, { userOrders: sellerOrders, onCreate: handleCreateTicketAndClose, onCancel: () => setIsCreating(false) });
    }
    if (selectedTicket) {
      return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(TicketDetailView, { ticket: selectedTicket, onReply: onUserReplyToTicket, onBack: () => setSelectedTicket(null) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(Section, { title: t("accountPage.support"), children: [
      showConfirmation && /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4 animate-in", role: "alert", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("strong", { className: "font-bold", children: t("accountPage.ticketSentSuccessTitle") }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("span", { className: "block sm:inline", children: [
          " ",
          t("accountPage.ticketSentSuccessMessage")
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("button", { onClick: () => setIsCreating(true), className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg mb-4", children: t("accountPage.createTicket") }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "space-y-2", children: [
        allTickets.map((ticket) => /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("button", { onClick: () => setSelectedTicket(ticket), className: "w-full text-left p-3 border dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700/50 flex justify-between items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("p", { className: "font-semibold", children: ticket.subject }),
              ticket.type === "service_request" && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("span", { className: "text-xs font-semibold bg-blue-100 text-blue-800 px-2 py-0.5 rounded-full", children: "Demande de Service" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("p", { className: "text-sm text-gray-500", children: ticket.userName }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("p", { className: "text-xs text-gray-500", children: [
              t("accountPage.lastUpdate"),
              ": ",
              new Date(ticket.updatedAt).toLocaleDateString()
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("span", { className: `px-2 py-1 text-xs font-semibold rounded-full ${ticket.status === "R\xE9solu" ? "bg-green-200 text-green-800" : "bg-yellow-200 text-yellow-800"}`, children: ticket.status })
        ] }, ticket.id)),
        allTickets.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "text-center py-8 text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("p", { children: "Vous n'avez aucun ticket de support." }) })
      ] })
    ] });
  };
  var SupportPanel_default = SupportPanel;

  // components/seller/CollectionsPanel.tsx
  var import_react31 = __toESM(require_react(), 1);
  var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
  var CollectionForm = ({ collection, allProducts, onSave, onCancel }) => {
    const { t } = useLanguage();
    const [name, setName] = (0, import_react31.useState)(collection?.name || "");
    const [description, setDescription] = (0, import_react31.useState)(collection?.description || "");
    const [selectedProductIds, setSelectedProductIds] = (0, import_react31.useState)(collection?.productIds || []);
    const handleToggleProduct = (productId) => {
      setSelectedProductIds(
        (prev) => prev.includes(productId) ? prev.filter((id) => id !== productId) : [...prev, productId]
      );
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onSave({
        id: collection?.id || `new-${Date.now()}`,
        name,
        description,
        productIds: selectedProductIds
      });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { className: "fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("form", { onSubmit: handleSubmit, className: "bg-white dark:bg-gray-800 rounded-lg p-6 max-w-2xl w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("h3", { className: "text-lg font-bold mb-4", children: collection ? t("sellerDashboard.collections.editTitle") : t("sellerDashboard.collections.createTitle") }),
      /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("input", { value: name, onChange: (e) => setName(e.target.value), placeholder: t("sellerDashboard.collections.name"), className: "w-full p-2 border rounded-md", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("textarea", { value: description, onChange: (e) => setDescription(e.target.value), placeholder: t("sellerDashboard.collections.description"), rows: 3, className: "w-full p-2 border rounded-md" }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("h4", { className: "font-semibold mb-2", children: t("sellerDashboard.collections.selectProducts") }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { className: "max-h-60 overflow-y-auto border p-2 rounded-md space-y-2", children: allProducts.map((p) => /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("label", { className: "flex items-center gap-2 p-1 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700/50", children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("input", { type: "checkbox", checked: selectedProductIds.includes(p.id), onChange: () => handleToggleProduct(p.id) }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("img", { src: p.imageUrls[0], alt: p.name, className: "w-8 h-8 object-cover rounded-sm" }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("span", { children: p.name })
          ] }, p.id)) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "flex justify-end gap-2 mt-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("button", { type: "button", onClick: onCancel, className: "bg-gray-200 px-4 py-2 rounded-lg", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("button", { type: "submit", className: "bg-blue-500 text-white px-4 py-2 rounded-lg", children: t("common.save") })
      ] })
    ] }) });
  };
  var CollectionsPanel = ({ store, products, onCreateOrUpdateCollection, onDeleteCollection }) => {
    const { t } = useLanguage();
    const [isFormOpen, setIsFormOpen] = (0, import_react31.useState)(false);
    const [editingCollection, setEditingCollection] = (0, import_react31.useState)(null);
    const handleSave = (collectionData) => {
      onCreateOrUpdateCollection(store.id, { ...collectionData, storeId: store.id });
      setIsFormOpen(false);
      setEditingCollection(null);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "p-6", children: [
      isFormOpen && /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
        CollectionForm,
        {
          collection: editingCollection,
          allProducts: products,
          onSave: handleSave,
          onCancel: () => {
            setIsFormOpen(false);
            setEditingCollection(null);
          }
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "flex justify-between items-center mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("h2", { className: "text-2xl font-bold", children: t("sellerDashboard.collections.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("button", { onClick: () => {
          setEditingCollection(null);
          setIsFormOpen(true);
        }, className: "bg-green-500 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(PlusIcon, { className: "w-5 h-5" }),
          " ",
          t("sellerDashboard.collections.create")
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "space-y-4", children: [
        store.collections?.map((collection) => /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { className: "p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg", children: /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "flex justify-between items-start", children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("h3", { className: "font-bold text-lg", children: collection.name }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: collection.description }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("p", { className: "text-xs mt-1", children: [
              collection.productIds.length,
              " produit(s)"
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "flex gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("button", { onClick: () => {
              setEditingCollection(collection);
              setIsFormOpen(true);
            }, className: "text-blue-500", children: /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(PencilSquareIcon, { className: "w-5 h-5" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("button", { onClick: () => onDeleteCollection(store.id, collection.id), className: "text-red-500", children: /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(TrashIcon, { className: "w-5 h-5" }) })
          ] })
        ] }) }, collection.id)),
        (!store.collections || store.collections.length === 0) && /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { className: "text-center py-8 text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { children: t("sellerDashboard.collections.noCollections") }) })
      ] })
    ] });
  };
  var CollectionsPanel_default = CollectionsPanel;

  // components/seller/ShippingPanel.tsx
  var import_react32 = __toESM(require_react(), 1);
  var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
  var ShippingPanel = ({ store, allShippingPartners, onUpdate }) => {
    const { t } = useLanguage();
    const [settings, setSettings] = (0, import_react32.useState)(
      store.shippingSettings || {
        enabledPartners: [],
        customRates: { local: null, national: null },
        freeShippingThreshold: null
      }
    );
    const [saved, setSaved] = (0, import_react32.useState)(false);
    const handlePartnerToggle = (partnerId) => {
      setSettings((prev) => ({
        ...prev,
        enabledPartners: prev.enabledPartners.includes(partnerId) ? prev.enabledPartners.filter((id) => id !== partnerId) : [...prev.enabledPartners, partnerId]
      }));
    };
    const handleRateChange = (e) => {
      const { name, value } = e.target;
      const numValue = value === "" ? null : Number(value);
      setSettings((prev) => ({
        ...prev,
        customRates: {
          ...prev.customRates,
          [name]: numValue
        }
      }));
    };
    const handleThresholdChange = (e) => {
      const { value } = e.target;
      setSettings((prev) => ({
        ...prev,
        freeShippingThreshold: value === "" ? null : Number(value)
      }));
    };
    const handleSave = () => {
      onUpdate(store.id, settings);
      setSaved(true);
      setTimeout(() => setSaved(false), 3e3);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("h2", { className: "text-2xl font-bold mb-4 flex items-center gap-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(TruckIcon, { className: "w-6 h-6" }),
        " ",
        t("sellerDashboard.shipping.title")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "space-y-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("h3", { className: "font-semibold text-lg mb-2", children: t("sellerDashboard.shipping.partnersTitle") }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("p", { className: "text-sm text-gray-500 mb-4", children: t("sellerDashboard.shipping.partnersDescription") }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "grid grid-cols-1 sm:grid-cols-2 gap-4", children: allShippingPartners.map((partner) => /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("label", { className: "flex items-center gap-3 p-3 border rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700/50", children: [
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
              "input",
              {
                type: "checkbox",
                checked: settings.enabledPartners.includes(partner.id),
                onChange: () => handlePartnerToggle(partner.id),
                className: "h-5 w-5 rounded border-gray-300 text-kmer-green focus:ring-kmer-green"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", { className: "font-medium", children: partner.name }),
            partner.isPremium && /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", { className: "text-xs font-bold bg-kmer-yellow/20 text-kmer-yellow px-2 py-0.5 rounded-full", children: t("sellerDashboard.shipping.premium") })
          ] }, partner.id)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("h3", { className: "font-semibold text-lg mb-2", children: t("sellerDashboard.shipping.customRatesTitle") }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("p", { className: "text-sm text-gray-500 mb-4", children: t("sellerDashboard.shipping.customRatesDescription") }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "grid grid-cols-1 sm:grid-cols-2 gap-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("label", { className: "block text-sm font-medium mb-1", children: t("sellerDashboard.shipping.localRate") }),
              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
                "input",
                {
                  type: "number",
                  name: "local",
                  value: settings.customRates.local ?? "",
                  onChange: handleRateChange,
                  placeholder: "Ex: 500",
                  className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("label", { className: "block text-sm font-medium mb-1", children: t("sellerDashboard.shipping.nationalRate") }),
              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
                "input",
                {
                  type: "number",
                  name: "national",
                  value: settings.customRates.national ?? "",
                  onChange: handleRateChange,
                  placeholder: "Ex: 1500",
                  className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
                }
              )
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("h3", { className: "font-semibold text-lg mb-2", children: t("sellerDashboard.shipping.freeShippingTitle") }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("p", { className: "text-sm text-gray-500 mb-4", children: t("sellerDashboard.shipping.freeShippingDescription") }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("label", { className: "block text-sm font-medium mb-1", children: t("sellerDashboard.shipping.freeShippingThreshold") }),
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
              "input",
              {
                type: "number",
                value: settings.freeShippingThreshold ?? "",
                onChange: handleThresholdChange,
                placeholder: "Ex: 25000 (laisser vide pour d\xE9sactiver)",
                className: "w-full sm:w-1/2 p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
              }
            )
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "mt-8 pt-6 border-t dark:border-gray-700 flex justify-end items-center gap-4", children: [
        saved && /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("span", { className: "text-green-600 flex items-center gap-1 text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(CheckCircleIcon, { className: "w-5 h-5" }),
          " ",
          t("sellerDashboard.shipping.saved")
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "button",
          {
            onClick: handleSave,
            className: "bg-kmer-green text-white font-bold py-2 px-6 rounded-lg hover:bg-green-700 transition-colors",
            children: t("sellerDashboard.shipping.saveChanges")
          }
        )
      ] })
    ] });
  };
  var ShippingPanel_default = ShippingPanel;

  // components/seller/SubscriptionPanel.tsx
  var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
  var PlanCard = ({ title, description, price, icon, features, onSelect, isFeatured, isCurrent, isDisabled }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: `p-8 rounded-2xl shadow-lg flex flex-col border-2 ${isCurrent ? "bg-green-50 dark:bg-green-900/20 border-kmer-green" : isFeatured ? "bg-kmer-yellow/5 dark:bg-kmer-yellow/10 border-kmer-yellow" : "bg-white dark:bg-gray-800 dark:border-gray-700"}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex items-center gap-3 mb-4", children: [
        icon,
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("h3", { className: "text-2xl font-bold", children: title })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6 flex-grow", children: description }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("p", { className: "text-4xl font-extrabold mb-6", children: price }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("ul", { className: "space-y-3 mb-8", children: features.map((feature, index) => /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("li", { className: "flex items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(CheckCircleIcon, { className: "w-5 h-5 text-green-500 flex-shrink-0 mt-0.5" }),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { children: feature })
      ] }, index)) }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "mt-auto", children: isCurrent ? /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "text-center font-bold text-kmer-green p-3 rounded-lg bg-kmer-green/10", children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(CheckCircleIcon, { className: "w-6 h-6 mx-auto mb-2" }),
        t("sellerDashboard.subscription.currentPlan")
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
        "button",
        {
          onClick: onSelect,
          disabled: isDisabled,
          className: `w-full font-bold py-3 rounded-lg transition-colors ${isDisabled ? "bg-gray-300 dark:bg-gray-700 cursor-not-allowed" : isFeatured ? "bg-kmer-yellow text-gray-900 hover:bg-yellow-300" : "bg-kmer-green text-white hover:bg-green-700"}`,
          children: isDisabled ? t("sellerDashboard.subscription.lowerPlan") : t("sellerDashboard.subscription.upgrade")
        }
      ) })
    ] });
  };
  var SubscriptionPanel = ({ store, siteSettings, onUpgrade }) => {
    const { t } = useLanguage();
    const currentStatus = store.premiumStatus;
    const plans = [
      {
        title: t("sellerSubscription.standardTitle"),
        status: "standard",
        description: t("sellerSubscription.standardDescription"),
        price: `${siteSettings.standardPlan.price.toLocaleString("fr-CM")} FCFA / ${siteSettings.standardPlan.durationDays} jrs`,
        icon: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(BuildingStorefrontIcon, { className: "w-8 h-8 text-gray-500" }),
        features: t("sellerSubscription.standardFeatures", siteSettings.standardPlan.productLimit, siteSettings.standardPlan.commissionRate).split("|"),
        onSelect: () => {
        },
        isFeatured: false
      },
      {
        title: t("sellerSubscription.premiumTitle"),
        status: "premium",
        description: t("sellerSubscription.premiumDescription"),
        price: `${siteSettings.premiumPlan.price.toLocaleString("fr-CM")} FCFA / ${siteSettings.premiumPlan.durationDays} jrs`,
        icon: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(StarIcon, { className: "w-8 h-8 text-kmer-yellow" }),
        features: t("sellerSubscription.premiumFeatures", siteSettings.premiumPlan.productLimit, siteSettings.premiumPlan.commissionRate).split("|"),
        onSelect: () => onUpgrade("premium"),
        isFeatured: true
      },
      {
        title: t("sellerSubscription.superPremiumTitle"),
        status: "super_premium",
        description: t("sellerSubscription.superPremiumDescription"),
        price: `${siteSettings.superPremiumPlan.price.toLocaleString("fr-CM")} FCFA / ${siteSettings.superPremiumPlan.durationDays} jrs`,
        icon: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(StarPlatinumIcon, { className: "w-8 h-8 text-kmer-red" }),
        features: t("sellerSubscription.superPremiumFeatures", siteSettings.superPremiumPlan.productLimit, siteSettings.superPremiumPlan.commissionRate).split("|"),
        onSelect: () => onUpgrade("super_premium"),
        isFeatured: false
      }
    ];
    const planHierarchy = {
      "standard": 0,
      "premium": 1,
      "super_premium": 2
    };
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "text-center max-w-3xl mx-auto mb-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("h2", { className: "text-3xl font-extrabold text-gray-800 dark:text-white mb-4", children: t("sellerDashboard.subscription.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("p", { className: "text-lg text-gray-600 dark:text-gray-400", children: t("sellerDashboard.subscription.subtitle") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-6xl mx-auto", children: plans.map((plan, index) => /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
        PlanCard,
        {
          title: plan.title,
          description: plan.description,
          price: plan.price,
          icon: plan.icon,
          features: plan.features,
          onSelect: plan.onSelect,
          isFeatured: plan.isFeatured,
          isCurrent: currentStatus === plan.status,
          isDisabled: plan.status !== "standard" && planHierarchy[currentStatus] >= planHierarchy[plan.status]
        },
        index
      )) })
    ] });
  };
  var SubscriptionPanel_default = SubscriptionPanel;

  // components/seller/UpgradePanel.tsx
  var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
  var UpgradePanel = ({ store, siteSettings, onRequestUpgrade, featureName }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "text-center p-8 bg-gray-50 dark:bg-gray-800/50 rounded-lg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(StarIcon, { className: "w-12 h-12 text-kmer-yellow mx-auto mb-4" }),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("h2", { className: "text-2xl font-bold mb-2", children: t("sellerDashboard.upgrade.title", featureName) }),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6", children: t("sellerDashboard.upgrade.description") }),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("button", { onClick: () => onRequestUpgrade(store.id, "premium"), className: "bg-kmer-yellow text-gray-900 font-bold py-3 px-6 rounded-lg hover:bg-yellow-300 transition-colors", children: t("sellerDashboard.upgrade.button") })
    ] });
  };
  var UpgradePanel_default = UpgradePanel;

  // components/SellerAnalyticsDashboard.tsx
  var import_react33 = __toESM(require_react(), 1);
  var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
  var getActiveFlashSalePrice6 = (productId, flashSales) => {
    const now = /* @__PURE__ */ new Date();
    for (const sale of flashSales) {
      const startDate = new Date(sale.startDate);
      const endDate = new Date(sale.endDate);
      if (now >= startDate && now <= endDate) {
        const productInSale = sale.products.find((p) => p.productId === productId && p.status === "approved");
        if (productInSale) return productInSale.flashPrice;
      }
    }
    return null;
  };
  var isPromotionActive6 = (product) => {
    if (!product.promotionPrice || product.promotionPrice >= product.price) {
      return false;
    }
    const now = /* @__PURE__ */ new Date();
    const startDate = product.promotionStartDate ? /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") : null;
    const endDate = product.promotionEndDate ? /* @__PURE__ */ new Date(product.promotionEndDate + "T23:59:59") : null;
    if (!startDate && !endDate) return false;
    if (startDate && endDate) return now >= startDate && now <= endDate;
    if (startDate) return now >= startDate;
    if (endDate) return now <= endDate;
    return false;
  };
  var StatCard2 = ({ icon, label, value, color, change }) => /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "p-4 bg-white dark:bg-gray-800/50 rounded-lg shadow-sm flex items-center gap-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { className: `p-3 rounded-full ${color}`, children: icon }),
    /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex items-baseline gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "text-2xl font-bold text-gray-800 dark:text-white", children: value }),
        change !== void 0 && change !== null && /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("span", { className: `text-sm font-semibold flex items-center ${change >= 0 ? "text-green-500" : "text-red-500"}`, children: [
          change >= 0 ? /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", className: "h-4 w-4", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: "3", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M5 15l7-7 7 7" }) }) : /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", className: "h-4 w-4", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: "3", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M19 9l-7 7-7-7" }) }),
          Math.abs(change).toFixed(1),
          "%"
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: label })
    ] })
  ] });
  var SellerAnalyticsDashboard = ({ onBack, sellerOrders, sellerProducts, flashSales }) => {
    const [timeRange, setTimeRange] = (0, import_react33.useState)("all");
    const { t } = useLanguage();
    const { analytics, comparisonAnalytics } = (0, import_react33.useMemo)(() => {
      const getFinalPrice4 = (item) => {
        const flashPrice = getActiveFlashSalePrice6(item.id, flashSales);
        if (flashPrice !== null) return flashPrice;
        if (isPromotionActive6(item)) return item.promotionPrice;
        return item.price;
      };
      const now = /* @__PURE__ */ new Date();
      const deliveredOrders = sellerOrders.filter((o) => o.status === "delivered");
      const filterOrdersByDate = (orders, range) => {
        return orders.filter((o) => {
          const orderDate = new Date(o.orderDate);
          if (timeRange === "all") return range === "current";
          const cutoffDate = /* @__PURE__ */ new Date();
          const prevCutoffDate = /* @__PURE__ */ new Date();
          let periodDays = 0;
          if (timeRange === "week") periodDays = 7;
          if (timeRange === "month") periodDays = 30;
          if (timeRange === "quarter") periodDays = 90;
          cutoffDate.setDate(now.getDate() - periodDays);
          prevCutoffDate.setDate(now.getDate() - periodDays * 2);
          if (range === "current") {
            return orderDate >= cutoffDate;
          } else {
            return orderDate >= prevCutoffDate && orderDate < cutoffDate;
          }
        });
      };
      const currentPeriodOrders = filterOrdersByDate(deliveredOrders, "current");
      const previousPeriodOrders = filterOrdersByDate(deliveredOrders, "previous");
      const calculateRevenue = (orders) => orders.reduce((sum, order) => {
        const sellerItemsTotal = order.items.reduce((itemSum, item) => itemSum + getFinalPrice4(item) * item.quantity, 0);
        return sum + sellerItemsTotal;
      }, 0);
      const totalRevenue = calculateRevenue(currentPeriodOrders);
      const previousTotalRevenue = calculateRevenue(previousPeriodOrders);
      let revenueChangePercentage = null;
      if (timeRange !== "all") {
        if (previousTotalRevenue > 0) {
          revenueChangePercentage = (totalRevenue - previousTotalRevenue) / previousTotalRevenue * 100;
        } else if (totalRevenue > 0) {
          revenueChangePercentage = 100;
        } else {
          revenueChangePercentage = 0;
        }
      }
      const totalDeliveredOrders = currentPeriodOrders.length;
      const totalItemsSold = currentPeriodOrders.flatMap((o) => o.items).reduce((sum, item) => sum + item.quantity, 0);
      const averageOrderValue = totalDeliveredOrders > 0 ? totalRevenue / totalDeliveredOrders : 0;
      const topProducts = currentPeriodOrders.flatMap((o) => o.items).reduce((acc, item) => {
        const existing = acc.find((p) => p.id === item.id);
        const revenue = getFinalPrice4(item) * item.quantity;
        if (existing) {
          existing.revenue += revenue;
          existing.quantitySold += item.quantity;
        } else {
          acc.push({ id: item.id, name: item.name, revenue, quantitySold: item.quantity });
        }
        return acc;
      }, []);
      const sortedTopProducts = topProducts.sort((a, b) => b.revenue - a.revenue).slice(0, 5);
      let salesChartData = [];
      const getOrderTotal = (order) => order.items.reduce((sum, item) => sum + getFinalPrice4(item) * item.quantity, 0);
      if (timeRange === "week") {
        const last7Days = Array.from({ length: 7 }, (_, i) => {
          const d = /* @__PURE__ */ new Date();
          d.setDate(d.getDate() - i);
          return d;
        });
        const dailySales = currentPeriodOrders.reduce((acc, order) => {
          const day = new Date(order.orderDate).toLocaleDateString("fr-CM", { day: "2-digit", month: "2-digit" });
          acc[day] = (acc[day] || 0) + getOrderTotal(order);
          return acc;
        }, {});
        salesChartData = last7Days.map((d) => {
          const label = d.toLocaleDateString("fr-CM", { day: "2-digit", month: "2-digit" });
          return { label: d.toLocaleDateString("fr-CM", { weekday: "short" }), revenue: dailySales[label] || 0 };
        }).reverse();
      } else if (timeRange === "month") {
        const last4WeeksLabels = ["-3 sem.", "-2 sem.", "-1 sem.", "Cette sem."];
        const weeklySales = currentPeriodOrders.reduce((acc, order) => {
          const weekIndex = Math.floor((now.getTime() - new Date(order.orderDate).getTime()) / (1e3 * 60 * 60 * 24 * 7));
          if (weekIndex < 4) acc[3 - weekIndex] = (acc[3 - weekIndex] || 0) + getOrderTotal(order);
          return acc;
        }, []);
        salesChartData = last4WeeksLabels.map((label, i) => ({ label, revenue: weeklySales[i] || 0 }));
      } else {
        const numMonths = timeRange === "quarter" ? 3 : 6;
        const monthLabels = Array.from({ length: numMonths }, (_, i) => {
          const d = /* @__PURE__ */ new Date();
          d.setMonth(d.getMonth() - i);
          return d;
        }).reverse();
        const monthlySales = currentPeriodOrders.reduce((acc, order) => {
          const month = new Date(order.orderDate).toLocaleString("fr-CM", { month: "short", year: "2-digit" });
          acc[month] = (acc[month] || 0) + getOrderTotal(order);
          return acc;
        }, {});
        salesChartData = monthLabels.map((d) => {
          const label = d.toLocaleString("fr-CM", { month: "short", year: "2-digit" });
          return { label, revenue: monthlySales[label] || 0 };
        });
      }
      return {
        analytics: {
          totalRevenue,
          totalOrders: totalDeliveredOrders,
          totalItemsSold,
          averageOrderValue,
          topProducts: sortedTopProducts,
          salesChartData
        },
        comparisonAnalytics: {
          revenueChangePercentage
        }
      };
    }, [sellerOrders, flashSales, timeRange]);
    const lowStockProducts = (0, import_react33.useMemo)(() => {
      return sellerProducts.filter((p) => p.stock < 5).slice(0, 5);
    }, [sellerProducts]);
    const TimeRangeButton = ({ label, value }) => {
      const isActive = timeRange === value;
      return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
        "button",
        {
          onClick: () => setTimeRange(value),
          className: `px-3 py-1.5 text-sm font-semibold rounded-md transition-colors ${isActive ? "bg-kmer-green text-white shadow" : "bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600"}`,
          children: label
        }
      );
    };
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "container mx-auto p-4 sm:p-8 bg-gray-50 dark:bg-gray-900", children: [
      onBack.toString() !== "() => {}" && /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("button", { onClick: onBack, className: "text-kmer-green font-semibold mb-6 inline-flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        t("sellerDashboard.analytics.backToDashboard")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex items-center gap-3 mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(BarChartIcon, { className: "w-8 h-8" }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("h1", { className: "text-3xl font-bold", children: t("sellerDashboard.analytics.title") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex items-center gap-2 mb-8 flex-wrap", children: [
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "font-semibold text-sm", children: t("sellerDashboard.analytics.period") }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(TimeRangeButton, { label: t("common.days7"), value: "week" }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(TimeRangeButton, { label: t("common.days30"), value: "month" }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(TimeRangeButton, { label: t("common.days90"), value: "quarter" }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(TimeRangeButton, { label: t("common.all"), value: "all" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          StatCard2,
          {
            icon: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(CurrencyDollarIcon, { className: "w-7 h-7" }),
            label: `${t("sellerDashboard.analytics.totalRevenue")}${timeRange !== "all" ? ` ${t("sellerDashboard.analytics.vsPrevious")}` : ""}`,
            value: `${analytics.totalRevenue.toLocaleString("fr-CM")} FCFA`,
            color: "bg-green-100 dark:bg-green-900/50 text-green-600 dark:text-green-300",
            change: comparisonAnalytics.revenueChangePercentage
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(StatCard2, { icon: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(ShoppingBagIcon, { className: "w-7 h-7" }), label: t("sellerDashboard.analytics.deliveredOrders"), value: analytics.totalOrders, color: "bg-blue-100 dark:bg-blue-900/50 text-blue-600 dark:text-blue-300" }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(StatCard2, { icon: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(ArchiveBoxIcon, { className: "w-7 h-7" }), label: t("sellerDashboard.analytics.itemsSold"), value: analytics.totalItemsSold, color: "bg-indigo-100 dark:bg-indigo-900/50 text-indigo-600 dark:text-indigo-300" }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(StatCard2, { icon: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(StarIcon, { className: "w-7 h-7" }), label: t("sellerDashboard.analytics.averageBasket"), value: `${analytics.averageOrderValue.toLocaleString("fr-CM", { maximumFractionDigits: 0 })} FCFA`, color: "bg-purple-100 dark:bg-purple-900/50 text-purple-600 dark:text-purple-300" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "lg:col-span-2 bg-white dark:bg-gray-800/50 rounded-lg shadow-sm p-6 h-full", children: [
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("sellerDashboard.analytics.salesEvolution") }),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { className: "flex justify-around items-end h-64 border-l border-b border-gray-200 dark:border-gray-700 pl-4 pb-4", children: analytics.salesChartData.map(({ label, revenue }) => /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex flex-col items-center h-full justify-end", title: `${revenue.toLocaleString("fr-CM")} FCFA`, children: [
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { className: "w-8 bg-kmer-green rounded-t-md hover:bg-green-700", style: { height: `${revenue / Math.max(...analytics.salesChartData.map((d) => d.revenue), 1) * 100}%` } }),
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "text-xs mt-1", children: label })
          ] }, label)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "space-y-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "bg-white dark:bg-gray-800/50 rounded-lg shadow-sm p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("sellerDashboard.analytics.top5Products") }),
            /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("ul", { className: "space-y-3", children: [
              analytics.topProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("li", { className: "flex justify-between items-center text-sm", children: [
                /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("span", { className: "font-medium dark:text-gray-200", children: product.name }),
                  /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("span", { className: "text-xs text-gray-500 dark:text-gray-400 ml-2", children: [
                    "(",
                    product.quantitySold,
                    " ",
                    t("sellerDashboard.analytics.sold"),
                    ")"
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("span", { className: "font-bold text-kmer-green", children: [
                  product.revenue.toLocaleString("fr-CM"),
                  " FCFA"
                ] })
              ] }, product.id)),
              analytics.topProducts.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: t("sellerDashboard.analytics.noSalesData") })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "bg-orange-50 dark:bg-orange-900/50 rounded-lg shadow-sm p-6 border-l-4 border-orange-400", children: [
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("h2", { className: "text-xl font-bold mb-4 text-orange-800 dark:text-orange-200", children: t("sellerDashboard.analytics.lowStockAlerts") }),
            /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("ul", { className: "space-y-2", children: [
              lowStockProducts.map((p) => /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("li", { className: "flex justify-between items-center text-sm", children: [
                /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("span", { className: "font-medium text-orange-700 dark:text-orange-300", children: p.name }),
                /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("span", { className: "font-bold text-orange-600 dark:text-orange-400", children: [
                  p.stock,
                  " ",
                  t("sellerDashboard.analytics.remaining")
                ] })
              ] }, p.id)),
              lowStockProducts.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "text-sm text-orange-700 dark:text-orange-300", children: t("sellerDashboard.analytics.noLowStock") })
            ] })
          ] })
        ] })
      ] })
    ] });
  };

  // components/seller/AnalyticsPanel.tsx
  var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
  var AnalyticsPanel = ({ sellerOrders, sellerProducts, flashSales }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
      SellerAnalyticsDashboard,
      {
        sellerOrders,
        sellerProducts,
        flashSales,
        onBack: () => {
        }
      }
    );
  };
  var AnalyticsPanel_default = AnalyticsPanel;

  // components/SellerProfile.tsx
  var import_react34 = __toESM(require_react(), 1);
  var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
  var SellerProfile = ({ store, onBack, onUpdateProfile }) => {
    const { t } = useLanguage();
    const [formData, setFormData] = (0, import_react34.useState)(store);
    const [logoPreview, setLogoPreview] = (0, import_react34.useState)(store.logoUrl);
    const [bannerPreview, setBannerPreview] = (0, import_react34.useState)(store.bannerUrl);
    const mapContainerRef = (0, import_react34.useRef)(null);
    const mapRef = (0, import_react34.useRef)(null);
    const markerRef = (0, import_react34.useRef)(null);
    (0, import_react34.useEffect)(() => {
      if (!mapContainerRef.current || mapRef.current || typeof L === "undefined") return;
      const initialLatLng = [
        formData.latitude || 4.0511,
        // Default to Douala
        formData.longitude || 9.7679
      ];
      mapRef.current = L.map(mapContainerRef.current).setView(initialLatLng, 13);
      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(mapRef.current);
      const updateMarker = (latlng) => {
        setFormData((prev) => ({ ...prev, latitude: latlng.lat, longitude: latlng.lng }));
        if (!markerRef.current) {
          markerRef.current = L.marker(latlng, { draggable: true }).addTo(mapRef.current);
          markerRef.current.on("dragend", (e) => {
            updateMarker(e.target.getLatLng());
          });
        } else {
          markerRef.current.setLatLng(latlng);
        }
        mapRef.current.panTo(latlng);
      };
      if (formData.latitude && formData.longitude) {
        updateMarker({ lat: formData.latitude, lng: formData.longitude });
      }
      mapRef.current.on("click", (e) => {
        updateMarker(e.latlng);
      });
      setTimeout(() => mapRef.current?.invalidateSize(), 100);
    }, []);
    const handleChange = (e) => {
      const { name, value } = e.target;
      setFormData((prev) => ({ ...prev, [name]: value }));
    };
    const handleImageChange = (e, field) => {
      if (e.target.files && e.target.files[0]) {
        const reader = new FileReader();
        reader.onloadend = () => {
          const result = reader.result;
          setFormData((prev) => ({ ...prev, [field]: result }));
          if (field === "logoUrl") setLogoPreview(result);
          if (field === "bannerUrl") setBannerPreview(result);
        };
        reader.readAsDataURL(e.target.files[0]);
      }
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onUpdateProfile(store.id, formData);
      alert("Profil mis \xE0 jour !");
      onBack();
    };
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        t("sellerDashboard.analytics.backToDashboard")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("form", { onSubmit: handleSubmit, className: "bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg max-w-4xl mx-auto space-y-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "flex items-center gap-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(BuildingStorefrontIcon, { className: "w-8 h-8 text-kmer-green" }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("h1", { className: "text-3xl font-bold dark:text-white", children: t("sellerDashboard.tabs.profile") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("fieldset", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("legend", { className: "px-2 font-semibold dark:text-gray-200", children: t("becomeSeller.step1Title") }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 pt-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("label", { htmlFor: "name", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.shopNameLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("input", { type: "text", id: "name", name: "name", value: formData.name || "", onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("label", { htmlFor: "category", className: "block text-sm font-medium dark:text-gray-300", children: t("header.categories") }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("input", { type: "text", id: "category", name: "category", value: formData.category || "", onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("label", { className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.shopLogoLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "mt-1 flex items-center gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("img", { src: logoPreview, alt: "Logo", className: "h-20 w-20 object-contain rounded-md bg-gray-100 dark:bg-gray-700 p-1" }),
                /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("label", { htmlFor: "logo-upload", className: "cursor-pointer bg-white dark:bg-gray-700 py-2 px-3 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(PhotoIcon, { className: "w-5 h-5" }),
                  " ",
                  t("sellerDashboard.profile.change"),
                  /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("input", { id: "logo-upload", type: "file", className: "sr-only", onChange: (e) => handleImageChange(e, "logoUrl"), accept: "image/*" })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("label", { className: "block text-sm font-medium dark:text-gray-300", children: t("Banni\xE8re") }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "mt-1 flex items-center gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "h-20 w-40 rounded-md bg-gray-100 dark:bg-gray-700 p-1 flex items-center justify-center", children: bannerPreview ? /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("img", { src: bannerPreview, alt: "Banner", className: "h-full w-full object-cover rounded-md" }) : /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(PhotoIcon, { className: "w-10 h-10 text-gray-400" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("label", { htmlFor: "banner-upload", className: "cursor-pointer bg-white dark:bg-gray-700 py-2 px-3 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(PhotoIcon, { className: "w-5 h-5" }),
                  " ",
                  t("sellerDashboard.profile.change"),
                  /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("input", { id: "banner-upload", type: "file", className: "sr-only", onChange: (e) => handleImageChange(e, "bannerUrl"), accept: "image/*" })
                ] })
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("fieldset", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("legend", { className: "px-2 font-semibold dark:text-gray-200", children: t("becomeSeller.step2Title") }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 pt-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("label", { htmlFor: "sellerFirstName", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.firstNameLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("input", { type: "text", id: "sellerFirstName", name: "sellerFirstName", value: formData.sellerFirstName || "", onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("label", { htmlFor: "sellerLastName", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.lastNameLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("input", { type: "text", id: "sellerLastName", name: "sellerLastName", value: formData.sellerLastName || "", onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "md:col-span-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("label", { htmlFor: "sellerPhone", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.phoneLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("input", { type: "tel", id: "sellerPhone", name: "sellerPhone", value: formData.sellerPhone || "", onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("fieldset", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("legend", { className: "px-2 font-semibold dark:text-gray-200", children: t("becomeSeller.step3Title") }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 pt-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("label", { htmlFor: "physicalAddress", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.addressLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("textarea", { id: "physicalAddress", name: "physicalAddress", value: formData.physicalAddress || "", onChange: handleChange, rows: 2, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("label", { htmlFor: "location", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.cityLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("select", { id: "location", name: "location", value: formData.location || "", onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
                /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("option", { children: "Douala" }),
                /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("option", { children: "Yaound\xE9" }),
                /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("option", { children: "Bafoussam" }),
                /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("option", { children: "Limbe" }),
                /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("option", { children: "Kribi" })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "md:col-span-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("label", { htmlFor: "neighborhood", className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.neighborhoodLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("input", { type: "text", id: "neighborhood", name: "neighborhood", value: formData.neighborhood || "", onChange: handleChange, className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "md:col-span-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("label", { className: "block text-sm font-medium dark:text-gray-300", children: t("becomeSeller.gpsLabel") }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: t("becomeSeller.gpsDescription") }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { ref: mapContainerRef, className: "h-64 w-full mt-2 rounded-md z-0", "aria-label": "Carte pour s\xE9lectionner l'emplacement" }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "flex gap-4 mt-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("input", { type: "number", readOnly: true, value: formData.latitude || "", placeholder: "Latitude", className: "w-full p-2 border rounded-md bg-gray-100 dark:bg-gray-700 dark:border-gray-600" }),
                /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("input", { type: "number", readOnly: true, value: formData.longitude || "", placeholder: "Longitude", className: "w-full p-2 border rounded-md bg-gray-100 dark:bg-gray-700 dark:border-gray-600" })
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "flex justify-end gap-4 pt-4 border-t dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("button", { type: "button", onClick: onBack, className: "bg-gray-200 dark:bg-gray-600 font-bold py-2 px-6 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500", children: t("common.cancel") }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("button", { type: "submit", className: "bg-kmer-green text-white font-bold py-2 px-6 rounded-lg hover:bg-green-700", children: t("common.save") })
        ] })
      ] })
    ] });
  };
  var SellerProfile_default = SellerProfile;

  // components/seller/ProfilePanel.tsx
  var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
  var ProfilePanel = ({ store, onUpdateProfile }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
      SellerProfile_default,
      {
        store,
        onUpdateProfile,
        onBack: () => {
        }
      }
    );
  };
  var ProfilePanel_default = ProfilePanel;

  // components/seller/ChatPanel.tsx
  var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
  var ChatPanel = () => {
    const { user } = useAuth();
    const { t } = useLanguage();
    const { setIsWidgetOpen } = useChatContext();
    if (!user) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "p-6 h-full flex flex-col", children: [
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("h2", { className: "text-2xl font-bold mb-4", children: t("sellerDashboard.tabs.chat") }),
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "flex-grow flex items-center justify-center text-center bg-gray-50 dark:bg-gray-800/50 rounded-lg p-8", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ChatBubbleLeftRightIcon, { className: "w-16 h-16 mx-auto text-gray-400 mb-4" }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("p", { className: "text-gray-600 dark:text-gray-300 mb-4", children: "La gestion de votre messagerie se fait via le widget de chat global." }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
          "button",
          {
            onClick: () => setIsWidgetOpen(true),
            className: "bg-kmer-green text-white font-bold py-2 px-6 rounded-lg",
            children: "Ouvrir la Messagerie"
          }
        )
      ] }) })
    ] });
  };
  var ChatPanel_default = ChatPanel;

  // components/seller/StoriesPanel.tsx
  var import_react35 = __toESM(require_react(), 1);
  var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
  var StoriesPanel = ({ store, onAddStory }) => {
    const activeStories = (0, import_react35.useMemo)(() => {
      const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1e3);
      return (store.stories || []).filter((story) => new Date(story.createdAt) > twentyFourHoursAgo);
    }, [store.stories]);
    const handleFileChange = (e) => {
      if (e.target.files && e.target.files[0]) {
        const file = e.target.files[0];
        const reader = new FileReader();
        reader.onloadend = () => {
          const result = reader.result;
          onAddStory(result);
        };
        reader.readAsDataURL(file);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("h2", { className: "text-2xl font-bold mb-4", children: "G\xE9rer les Stories" }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "mb-8", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("label", { htmlFor: "story-upload", className: "cursor-pointer", children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "w-full min-h-[150px] border-2 border-dashed rounded-lg flex flex-col items-center justify-center p-6 hover:bg-gray-50 dark:hover:bg-gray-700/50", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(PhotoIcon, { className: "w-12 h-12 text-gray-400" }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "mt-2 text-sm font-semibold text-gray-600 dark:text-gray-300", children: "Ajouter une nouvelle story" }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: "Cliquez pour t\xE9l\xE9verser une image (PNG, JPG)" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("input", { id: "story-upload", type: "file", className: "sr-only", accept: "image/png, image/jpeg", onChange: handleFileChange })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("h3", { className: "text-xl font-semibold mb-4", children: "Stories Actives (24h)" }),
        activeStories.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4", children: activeStories.map((story) => /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "relative group aspect-[9/16] rounded-lg overflow-hidden shadow-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("img", { src: story.imageUrl, alt: `Story ${story.id}`, className: "w-full h-full object-cover" }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "absolute inset-0 bg-gradient-to-t from-black/60 to-transparent" }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "absolute bottom-2 left-2 text-white text-xs flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(ClockIcon, { className: "w-3 h-3" }),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("span", { children: new Date(story.createdAt).toLocaleTimeString("fr-FR", { hour: "2-digit", minute: "2-digit" }) })
          ] })
        ] }, story.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "text-center py-12 text-gray-500 bg-gray-50 dark:bg-gray-800/50 rounded-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { children: "Vous n'avez aucune story active." }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-sm", children: "Ajoutez-en une pour engager vos clients !" })
        ] })
      ] })
    ] });
  };
  var StoriesPanel_default = StoriesPanel;

  // components/SellerDashboard.tsx
  var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
  var TabButton = ({ icon, label, isActive, onClick, count, isLocked }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(
      "button",
      {
        onClick,
        disabled: isLocked,
        className: `relative flex items-center gap-3 w-full text-left px-3 py-3 text-sm font-semibold rounded-lg transition-colors whitespace-nowrap ${isActive ? "bg-kmer-green/10 text-kmer-green" : "text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 dark:text-gray-400"} ${isLocked ? "opacity-50 cursor-not-allowed" : ""}`,
        title: isLocked ? t("sellerDashboard.premiumFeatureTooltip") : "",
        children: [
          icon,
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("span", { children: label }),
          count !== void 0 && count > 0 && /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("span", { className: "ml-auto text-xs bg-kmer-red text-white rounded-full px-1.5 py-0.5", children: count })
        ]
      }
    );
  };
  var SellerDashboard = (props) => {
    const { store, initialTab, sellerNotifications, siteSettings, onRequestUpgrade, navigation: navigation2, allTickets, user } = props;
    const [activeTab, setActiveTab] = (0, import_react36.useState)(initialTab || "overview");
    const { t } = useLanguage();
    (0, import_react36.useEffect)(() => {
      setActiveTab(initialTab);
    }, [initialTab]);
    if (!store) {
      return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "p-8 text-center", children: "Loading store information..." });
    }
    const isPremium = store.premiumStatus === "premium" || store.premiumStatus === "super_premium";
    const unreadNotifications = sellerNotifications.filter((n) => !n.isRead).length;
    const sellerTickets = allTickets.filter((t2) => t2.userId === user?.id);
    const TABS = [
      { id: "overview", label: t("sellerDashboard.tabs.overview"), icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(ChartPieIcon, { className: "w-5 h-5" }), count: unreadNotifications, isLocked: false },
      { id: "products", label: t("sellerDashboard.tabs.products"), icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(ShoppingBagIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "collections", label: t("sellerDashboard.tabs.collections"), icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(BookmarkSquareIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "orders", label: t("sellerDashboard.tabs.orders"), icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(TruckIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "reviews", label: t("sellerDashboard.tabs.reviews"), icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(StarIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "promotions", label: t("sellerDashboard.tabs.promotions"), icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(TagIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "flash-sales", label: t("sellerDashboard.tabs.flashSales"), icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(BoltIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "analytics", label: t("sellerDashboard.tabs.analytics"), icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(BarChartIcon, { className: "w-5 h-5" }), isLocked: !isPremium },
      { id: "payouts", label: t("sellerDashboard.tabs.payouts"), icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(BanknotesIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "livraison", label: t("sellerDashboard.tabs.delivery"), icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(TruckIcon, { className: "w-5 h-5" }), isLocked: !isPremium },
      { id: "profile", label: t("sellerDashboard.tabs.profile"), icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(BuildingStorefrontIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "subscription", label: t("sellerDashboard.tabs.subscription"), icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(StarPlatinumIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "documents", label: t("sellerDashboard.tabs.documents"), icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(DocumentTextIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "stories", label: t("sellerDashboard.tabs.stories"), icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(MegaphoneIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "chat", label: t("sellerDashboard.tabs.chat"), icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(ChatBubbleLeftRightIcon, { className: "w-5 h-5" }), isLocked: false },
      { id: "support", label: t("sellerDashboard.tabs.support"), icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(ChatBubbleBottomCenterTextIcon, { className: "w-5 h-5" }), isLocked: false }
    ];
    const panelProps = { ...props };
    const renderContent = () => {
      const selectedTab = TABS.find((t2) => t2.id === activeTab);
      if (selectedTab?.isLocked) {
        return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(UpgradePanel_default, { store, siteSettings, onRequestUpgrade, featureName: selectedTab.label });
      }
      switch (activeTab) {
        case "overview":
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(OverviewPanel_default, { ...panelProps, setActiveTab });
        case "products":
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(ProductsPanel_default, { ...panelProps, onAddService: () => navigation2.navigateToProductForm({ type: "service" }) });
        case "collections":
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(CollectionsPanel_default, { ...panelProps });
        case "orders":
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(OrdersPanel_default, { ...panelProps });
        case "reviews":
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(ReviewsPanel_default, { ...panelProps });
        case "promotions":
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(PromotionsPanel_default, { ...panelProps });
        case "flash-sales":
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(FlashSalesPanel_default, { ...panelProps });
        case "analytics":
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(AnalyticsPanel_default, { sellerOrders: props.sellerOrders, sellerProducts: props.products, flashSales: props.flashSales });
        case "payouts":
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(PayoutsPanel_default, { ...panelProps });
        case "livraison":
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(ShippingPanel_default, { onUpdate: (storeId, settings) => props.onUpdateStoreProfile(storeId, { shippingSettings: settings }), ...panelProps });
        case "profile":
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(ProfilePanel_default, { onUpdateProfile: props.onUpdateStoreProfile, ...panelProps });
        case "subscription":
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(SubscriptionPanel_default, { onUpgrade: (level) => props.onRequestUpgrade(store.id, level), ...panelProps });
        case "documents":
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(DocumentsPanel_default, { ...panelProps });
        case "stories":
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(StoriesPanel_default, { ...panelProps });
        case "chat":
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(ChatPanel_default, {});
        case "support":
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(SupportPanel_default, { ...panelProps, sellerOrders: props.sellerOrders, allTickets: sellerTickets, onCreateTicket: props.onCreateTicket, onUserReplyToTicket: props.onUserReplyToTicket });
        default:
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(OverviewPanel_default, { ...panelProps, setActiveTab });
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "bg-gray-100 dark:bg-gray-950 min-h-screen", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-6 flex flex-col md:flex-row gap-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("aside", { className: "md:w-1/4 lg:w-1/5 flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md space-y-2 sticky top-24", children: TABS.map((tab) => /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
        TabButton,
        {
          icon: tab.icon,
          label: tab.label,
          isActive: activeTab === tab.id,
          onClick: () => setActiveTab(tab.id),
          count: tab.id === "overview" ? unreadNotifications : void 0,
          isLocked: tab.isLocked
        },
        tab.id
      )) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("main", { className: "flex-grow", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md min-h-full", children: renderContent() }) })
    ] }) });
  };

  // components/VendorPage.tsx
  var import_react37 = __toESM(require_react(), 1);
  var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
  var VendorPage = ({ vendorName, allProducts, allStores, flashSales, onProductClick, onBack, onVendorClick, isComparisonEnabled }) => {
    const { user, toggleFollowStore } = useAuth();
    const { t } = useLanguage();
    const productsFromVendor = (0, import_react37.useMemo)(() => allProducts.filter((p) => p.vendor === vendorName), [allProducts, vendorName]);
    const { filteredAndSortedProducts, filters, setFilters, resetFilters } = useProductFiltering(productsFromVendor, allStores);
    const store = allStores.find((s) => s.name === vendorName);
    const isFollowing = user?.followedStores?.includes(store?.id || "");
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour"
      ] }),
      store?.bannerUrl && /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("div", { className: "mb-8 rounded-lg overflow-hidden shadow-lg h-48 bg-gray-200 dark:bg-gray-800", children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("img", { src: store.bannerUrl, alt: `${store.name} banner`, className: "w-full h-full object-cover" }) }),
      store?.collections && store.collections.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("section", { className: "mb-12 space-y-10", children: store.collections.map((collection) => {
        const collectionProducts = collection.productIds.map((id) => allProducts.find((p) => p.id === id)).filter((p) => !!p);
        if (collectionProducts.length === 0) return null;
        return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("h2", { className: "text-2xl font-bold mb-2 dark:text-white", children: collection.name }),
          collection.description && /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-4 max-w-3xl", children: collection.description }),
          /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("div", { className: "-mx-4 sm:-mx-6 px-4 sm:px-6", children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("div", { className: "flex overflow-x-auto space-x-6 pb-4", children: collectionProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("div", { className: "w-72 flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
            ProductCard_default,
            {
              product,
              onProductClick,
              onVendorClick,
              location: store?.location,
              flashSales,
              isComparisonEnabled,
              stores: allStores
            }
          ) }, product.id)) }) })
        ] }, collection.id);
      }) }),
      /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "lg:flex lg:gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
          ProductFilters_default,
          {
            allProducts: productsFromVendor,
            filters,
            setFilters,
            resetFilters
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("main", { className: "flex-grow", children: [
          /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "mb-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "flex items-center gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("img", { src: store?.logoUrl, alt: store?.name, className: "h-16 w-16 object-contain rounded-md bg-white p-1 shadow-sm" }),
                /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white flex items-center gap-3", children: [
                    "Boutique ",
                    /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("span", { className: "text-kmer-green", children: vendorName }),
                    store?.isCertified && /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ShieldCheckIcon, { className: "w-8 h-8 text-green-500", title: "Vendeur Certifi\xE9" })
                  ] }),
                  store && /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("p", { className: "text-gray-500 dark:text-gray-400", children: store.location })
                ] })
              ] }),
              store && user && user.role === "customer" && /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(
                "button",
                {
                  onClick: () => toggleFollowStore(store.id),
                  className: `flex items-center gap-2 px-6 py-2 rounded-lg font-bold transition-colors w-full sm:w-auto ${isFollowing ? "bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-300" : "bg-kmer-green text-white hover:bg-green-700"}`,
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(BookmarkSquareIcon, { className: `w-5 h-5 ${isFollowing ? "text-kmer-green" : "text-inherit"}` }),
                    /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("span", { children: isFollowing ? "Suivi" : "Suivre" })
                  ]
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("p", { className: "text-gray-600 dark:text-gray-300 mt-4", children: [
              filteredAndSortedProducts.length,
              " sur ",
              productsFromVendor.length,
              " produits affich\xE9s"
            ] })
          ] }),
          filteredAndSortedProducts.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6", children: filteredAndSortedProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: store?.location, flashSales, isComparisonEnabled, stores: allStores }, product.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md h-full flex flex-col justify-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: "Aucun produit ne correspond \xE0 vos filtres." }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: "Cette boutique n'a peut-\xEAtre pas de produits ou vos filtres sont trop stricts." })
          ] })
        ] })
      ] })
    ] });
  };
  var VendorPage_default = VendorPage;

  // components/ProductForm.tsx
  var import_react38 = __toESM(require_react(), 1);

  // node_modules/@google/genai/dist/web/index.mjs
  var _defaultBaseGeminiUrl = void 0;
  var _defaultBaseVertexUrl = void 0;
  function getDefaultBaseUrls() {
    return {
      geminiUrl: _defaultBaseGeminiUrl,
      vertexUrl: _defaultBaseVertexUrl
    };
  }
  function getBaseUrl(httpOptions, vertexai, vertexBaseUrlFromEnv, geminiBaseUrlFromEnv) {
    var _a, _b;
    if (!(httpOptions === null || httpOptions === void 0 ? void 0 : httpOptions.baseUrl)) {
      const defaultBaseUrls = getDefaultBaseUrls();
      if (vertexai) {
        return (_a = defaultBaseUrls.vertexUrl) !== null && _a !== void 0 ? _a : vertexBaseUrlFromEnv;
      } else {
        return (_b = defaultBaseUrls.geminiUrl) !== null && _b !== void 0 ? _b : geminiBaseUrlFromEnv;
      }
    }
    return httpOptions.baseUrl;
  }
  var BaseModule = class {
  };
  function formatMap(templateString, valueMap) {
    const regex = /\{([^}]+)\}/g;
    return templateString.replace(regex, (match, key) => {
      if (Object.prototype.hasOwnProperty.call(valueMap, key)) {
        const value = valueMap[key];
        return value !== void 0 && value !== null ? String(value) : "";
      } else {
        throw new Error(`Key '${key}' not found in valueMap.`);
      }
    });
  }
  function setValueByPath(data, keys, value) {
    for (let i = 0; i < keys.length - 1; i++) {
      const key = keys[i];
      if (key.endsWith("[]")) {
        const keyName = key.slice(0, -2);
        if (!(keyName in data)) {
          if (Array.isArray(value)) {
            data[keyName] = Array.from({ length: value.length }, () => ({}));
          } else {
            throw new Error(`Value must be a list given an array path ${key}`);
          }
        }
        if (Array.isArray(data[keyName])) {
          const arrayData = data[keyName];
          if (Array.isArray(value)) {
            for (let j = 0; j < arrayData.length; j++) {
              const entry = arrayData[j];
              setValueByPath(entry, keys.slice(i + 1), value[j]);
            }
          } else {
            for (const d of arrayData) {
              setValueByPath(d, keys.slice(i + 1), value);
            }
          }
        }
        return;
      } else if (key.endsWith("[0]")) {
        const keyName = key.slice(0, -3);
        if (!(keyName in data)) {
          data[keyName] = [{}];
        }
        const arrayData = data[keyName];
        setValueByPath(arrayData[0], keys.slice(i + 1), value);
        return;
      }
      if (!data[key] || typeof data[key] !== "object") {
        data[key] = {};
      }
      data = data[key];
    }
    const keyToSet = keys[keys.length - 1];
    const existingData = data[keyToSet];
    if (existingData !== void 0) {
      if (!value || typeof value === "object" && Object.keys(value).length === 0) {
        return;
      }
      if (value === existingData) {
        return;
      }
      if (typeof existingData === "object" && typeof value === "object" && existingData !== null && value !== null) {
        Object.assign(existingData, value);
      } else {
        throw new Error(`Cannot set value for an existing key. Key: ${keyToSet}`);
      }
    } else {
      if (keyToSet === "_self" && typeof value === "object" && value !== null && !Array.isArray(value)) {
        const valueAsRecord = value;
        Object.assign(data, valueAsRecord);
      } else {
        data[keyToSet] = value;
      }
    }
  }
  function getValueByPath(data, keys) {
    try {
      if (keys.length === 1 && keys[0] === "_self") {
        return data;
      }
      for (let i = 0; i < keys.length; i++) {
        if (typeof data !== "object" || data === null) {
          return void 0;
        }
        const key = keys[i];
        if (key.endsWith("[]")) {
          const keyName = key.slice(0, -2);
          if (keyName in data) {
            const arrayData = data[keyName];
            if (!Array.isArray(arrayData)) {
              return void 0;
            }
            return arrayData.map((d) => getValueByPath(d, keys.slice(i + 1)));
          } else {
            return void 0;
          }
        } else {
          data = data[key];
        }
      }
      return data;
    } catch (error) {
      if (error instanceof TypeError) {
        return void 0;
      }
      throw error;
    }
  }
  function tBytes$1(fromBytes) {
    if (typeof fromBytes !== "string") {
      throw new Error("fromImageBytes must be a string");
    }
    return fromBytes;
  }
  function fetchPredictOperationParametersToVertex(fromObject) {
    const toObject = {};
    const fromOperationName = getValueByPath(fromObject, [
      "operationName"
    ]);
    if (fromOperationName != null) {
      setValueByPath(toObject, ["operationName"], fromOperationName);
    }
    const fromResourceName = getValueByPath(fromObject, ["resourceName"]);
    if (fromResourceName != null) {
      setValueByPath(toObject, ["_url", "resourceName"], fromResourceName);
    }
    return toObject;
  }
  function generateVideosOperationFromMldev$1(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromMetadata = getValueByPath(fromObject, ["metadata"]);
    if (fromMetadata != null) {
      setValueByPath(toObject, ["metadata"], fromMetadata);
    }
    const fromDone = getValueByPath(fromObject, ["done"]);
    if (fromDone != null) {
      setValueByPath(toObject, ["done"], fromDone);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], fromError);
    }
    const fromResponse = getValueByPath(fromObject, [
      "response",
      "generateVideoResponse"
    ]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], generateVideosResponseFromMldev$1(fromResponse));
    }
    return toObject;
  }
  function generateVideosOperationFromVertex$1(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromMetadata = getValueByPath(fromObject, ["metadata"]);
    if (fromMetadata != null) {
      setValueByPath(toObject, ["metadata"], fromMetadata);
    }
    const fromDone = getValueByPath(fromObject, ["done"]);
    if (fromDone != null) {
      setValueByPath(toObject, ["done"], fromDone);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], fromError);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], generateVideosResponseFromVertex$1(fromResponse));
    }
    return toObject;
  }
  function generateVideosResponseFromMldev$1(fromObject) {
    const toObject = {};
    const fromGeneratedVideos = getValueByPath(fromObject, [
      "generatedSamples"
    ]);
    if (fromGeneratedVideos != null) {
      let transformedList = fromGeneratedVideos;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedVideoFromMldev$1(item);
        });
      }
      setValueByPath(toObject, ["generatedVideos"], transformedList);
    }
    const fromRaiMediaFilteredCount = getValueByPath(fromObject, [
      "raiMediaFilteredCount"
    ]);
    if (fromRaiMediaFilteredCount != null) {
      setValueByPath(toObject, ["raiMediaFilteredCount"], fromRaiMediaFilteredCount);
    }
    const fromRaiMediaFilteredReasons = getValueByPath(fromObject, [
      "raiMediaFilteredReasons"
    ]);
    if (fromRaiMediaFilteredReasons != null) {
      setValueByPath(toObject, ["raiMediaFilteredReasons"], fromRaiMediaFilteredReasons);
    }
    return toObject;
  }
  function generateVideosResponseFromVertex$1(fromObject) {
    const toObject = {};
    const fromGeneratedVideos = getValueByPath(fromObject, ["videos"]);
    if (fromGeneratedVideos != null) {
      let transformedList = fromGeneratedVideos;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedVideoFromVertex$1(item);
        });
      }
      setValueByPath(toObject, ["generatedVideos"], transformedList);
    }
    const fromRaiMediaFilteredCount = getValueByPath(fromObject, [
      "raiMediaFilteredCount"
    ]);
    if (fromRaiMediaFilteredCount != null) {
      setValueByPath(toObject, ["raiMediaFilteredCount"], fromRaiMediaFilteredCount);
    }
    const fromRaiMediaFilteredReasons = getValueByPath(fromObject, [
      "raiMediaFilteredReasons"
    ]);
    if (fromRaiMediaFilteredReasons != null) {
      setValueByPath(toObject, ["raiMediaFilteredReasons"], fromRaiMediaFilteredReasons);
    }
    return toObject;
  }
  function generatedVideoFromMldev$1(fromObject) {
    const toObject = {};
    const fromVideo = getValueByPath(fromObject, ["_self"]);
    if (fromVideo != null) {
      setValueByPath(toObject, ["video"], videoFromMldev$1(fromVideo));
    }
    return toObject;
  }
  function generatedVideoFromVertex$1(fromObject) {
    const toObject = {};
    const fromVideo = getValueByPath(fromObject, ["_self"]);
    if (fromVideo != null) {
      setValueByPath(toObject, ["video"], videoFromVertex$1(fromVideo));
    }
    return toObject;
  }
  function getOperationParametersToMldev(fromObject) {
    const toObject = {};
    const fromOperationName = getValueByPath(fromObject, [
      "operationName"
    ]);
    if (fromOperationName != null) {
      setValueByPath(toObject, ["_url", "operationName"], fromOperationName);
    }
    return toObject;
  }
  function getOperationParametersToVertex(fromObject) {
    const toObject = {};
    const fromOperationName = getValueByPath(fromObject, [
      "operationName"
    ]);
    if (fromOperationName != null) {
      setValueByPath(toObject, ["_url", "operationName"], fromOperationName);
    }
    return toObject;
  }
  function videoFromMldev$1(fromObject) {
    const toObject = {};
    const fromUri = getValueByPath(fromObject, ["video", "uri"]);
    if (fromUri != null) {
      setValueByPath(toObject, ["uri"], fromUri);
    }
    const fromVideoBytes = getValueByPath(fromObject, [
      "video",
      "encodedVideo"
    ]);
    if (fromVideoBytes != null) {
      setValueByPath(toObject, ["videoBytes"], tBytes$1(fromVideoBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["encoding"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function videoFromVertex$1(fromObject) {
    const toObject = {};
    const fromUri = getValueByPath(fromObject, ["gcsUri"]);
    if (fromUri != null) {
      setValueByPath(toObject, ["uri"], fromUri);
    }
    const fromVideoBytes = getValueByPath(fromObject, [
      "bytesBase64Encoded"
    ]);
    if (fromVideoBytes != null) {
      setValueByPath(toObject, ["videoBytes"], tBytes$1(fromVideoBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  var Outcome;
  (function(Outcome2) {
    Outcome2["OUTCOME_UNSPECIFIED"] = "OUTCOME_UNSPECIFIED";
    Outcome2["OUTCOME_OK"] = "OUTCOME_OK";
    Outcome2["OUTCOME_FAILED"] = "OUTCOME_FAILED";
    Outcome2["OUTCOME_DEADLINE_EXCEEDED"] = "OUTCOME_DEADLINE_EXCEEDED";
  })(Outcome || (Outcome = {}));
  var Language;
  (function(Language2) {
    Language2["LANGUAGE_UNSPECIFIED"] = "LANGUAGE_UNSPECIFIED";
    Language2["PYTHON"] = "PYTHON";
  })(Language || (Language = {}));
  var Type;
  (function(Type2) {
    Type2["TYPE_UNSPECIFIED"] = "TYPE_UNSPECIFIED";
    Type2["STRING"] = "STRING";
    Type2["NUMBER"] = "NUMBER";
    Type2["INTEGER"] = "INTEGER";
    Type2["BOOLEAN"] = "BOOLEAN";
    Type2["ARRAY"] = "ARRAY";
    Type2["OBJECT"] = "OBJECT";
    Type2["NULL"] = "NULL";
  })(Type || (Type = {}));
  var HarmCategory;
  (function(HarmCategory2) {
    HarmCategory2["HARM_CATEGORY_UNSPECIFIED"] = "HARM_CATEGORY_UNSPECIFIED";
    HarmCategory2["HARM_CATEGORY_HATE_SPEECH"] = "HARM_CATEGORY_HATE_SPEECH";
    HarmCategory2["HARM_CATEGORY_DANGEROUS_CONTENT"] = "HARM_CATEGORY_DANGEROUS_CONTENT";
    HarmCategory2["HARM_CATEGORY_HARASSMENT"] = "HARM_CATEGORY_HARASSMENT";
    HarmCategory2["HARM_CATEGORY_SEXUALLY_EXPLICIT"] = "HARM_CATEGORY_SEXUALLY_EXPLICIT";
    HarmCategory2["HARM_CATEGORY_CIVIC_INTEGRITY"] = "HARM_CATEGORY_CIVIC_INTEGRITY";
    HarmCategory2["HARM_CATEGORY_IMAGE_HATE"] = "HARM_CATEGORY_IMAGE_HATE";
    HarmCategory2["HARM_CATEGORY_IMAGE_DANGEROUS_CONTENT"] = "HARM_CATEGORY_IMAGE_DANGEROUS_CONTENT";
    HarmCategory2["HARM_CATEGORY_IMAGE_HARASSMENT"] = "HARM_CATEGORY_IMAGE_HARASSMENT";
    HarmCategory2["HARM_CATEGORY_IMAGE_SEXUALLY_EXPLICIT"] = "HARM_CATEGORY_IMAGE_SEXUALLY_EXPLICIT";
  })(HarmCategory || (HarmCategory = {}));
  var HarmBlockMethod;
  (function(HarmBlockMethod2) {
    HarmBlockMethod2["HARM_BLOCK_METHOD_UNSPECIFIED"] = "HARM_BLOCK_METHOD_UNSPECIFIED";
    HarmBlockMethod2["SEVERITY"] = "SEVERITY";
    HarmBlockMethod2["PROBABILITY"] = "PROBABILITY";
  })(HarmBlockMethod || (HarmBlockMethod = {}));
  var HarmBlockThreshold;
  (function(HarmBlockThreshold2) {
    HarmBlockThreshold2["HARM_BLOCK_THRESHOLD_UNSPECIFIED"] = "HARM_BLOCK_THRESHOLD_UNSPECIFIED";
    HarmBlockThreshold2["BLOCK_LOW_AND_ABOVE"] = "BLOCK_LOW_AND_ABOVE";
    HarmBlockThreshold2["BLOCK_MEDIUM_AND_ABOVE"] = "BLOCK_MEDIUM_AND_ABOVE";
    HarmBlockThreshold2["BLOCK_ONLY_HIGH"] = "BLOCK_ONLY_HIGH";
    HarmBlockThreshold2["BLOCK_NONE"] = "BLOCK_NONE";
    HarmBlockThreshold2["OFF"] = "OFF";
  })(HarmBlockThreshold || (HarmBlockThreshold = {}));
  var Mode;
  (function(Mode2) {
    Mode2["MODE_UNSPECIFIED"] = "MODE_UNSPECIFIED";
    Mode2["MODE_DYNAMIC"] = "MODE_DYNAMIC";
  })(Mode || (Mode = {}));
  var AuthType;
  (function(AuthType2) {
    AuthType2["AUTH_TYPE_UNSPECIFIED"] = "AUTH_TYPE_UNSPECIFIED";
    AuthType2["NO_AUTH"] = "NO_AUTH";
    AuthType2["API_KEY_AUTH"] = "API_KEY_AUTH";
    AuthType2["HTTP_BASIC_AUTH"] = "HTTP_BASIC_AUTH";
    AuthType2["GOOGLE_SERVICE_ACCOUNT_AUTH"] = "GOOGLE_SERVICE_ACCOUNT_AUTH";
    AuthType2["OAUTH"] = "OAUTH";
    AuthType2["OIDC_AUTH"] = "OIDC_AUTH";
  })(AuthType || (AuthType = {}));
  var ApiSpec;
  (function(ApiSpec2) {
    ApiSpec2["API_SPEC_UNSPECIFIED"] = "API_SPEC_UNSPECIFIED";
    ApiSpec2["SIMPLE_SEARCH"] = "SIMPLE_SEARCH";
    ApiSpec2["ELASTIC_SEARCH"] = "ELASTIC_SEARCH";
  })(ApiSpec || (ApiSpec = {}));
  var UrlRetrievalStatus;
  (function(UrlRetrievalStatus2) {
    UrlRetrievalStatus2["URL_RETRIEVAL_STATUS_UNSPECIFIED"] = "URL_RETRIEVAL_STATUS_UNSPECIFIED";
    UrlRetrievalStatus2["URL_RETRIEVAL_STATUS_SUCCESS"] = "URL_RETRIEVAL_STATUS_SUCCESS";
    UrlRetrievalStatus2["URL_RETRIEVAL_STATUS_ERROR"] = "URL_RETRIEVAL_STATUS_ERROR";
    UrlRetrievalStatus2["URL_RETRIEVAL_STATUS_PAYWALL"] = "URL_RETRIEVAL_STATUS_PAYWALL";
    UrlRetrievalStatus2["URL_RETRIEVAL_STATUS_UNSAFE"] = "URL_RETRIEVAL_STATUS_UNSAFE";
  })(UrlRetrievalStatus || (UrlRetrievalStatus = {}));
  var FinishReason;
  (function(FinishReason2) {
    FinishReason2["FINISH_REASON_UNSPECIFIED"] = "FINISH_REASON_UNSPECIFIED";
    FinishReason2["STOP"] = "STOP";
    FinishReason2["MAX_TOKENS"] = "MAX_TOKENS";
    FinishReason2["SAFETY"] = "SAFETY";
    FinishReason2["RECITATION"] = "RECITATION";
    FinishReason2["LANGUAGE"] = "LANGUAGE";
    FinishReason2["OTHER"] = "OTHER";
    FinishReason2["BLOCKLIST"] = "BLOCKLIST";
    FinishReason2["PROHIBITED_CONTENT"] = "PROHIBITED_CONTENT";
    FinishReason2["SPII"] = "SPII";
    FinishReason2["MALFORMED_FUNCTION_CALL"] = "MALFORMED_FUNCTION_CALL";
    FinishReason2["IMAGE_SAFETY"] = "IMAGE_SAFETY";
    FinishReason2["UNEXPECTED_TOOL_CALL"] = "UNEXPECTED_TOOL_CALL";
  })(FinishReason || (FinishReason = {}));
  var HarmProbability;
  (function(HarmProbability2) {
    HarmProbability2["HARM_PROBABILITY_UNSPECIFIED"] = "HARM_PROBABILITY_UNSPECIFIED";
    HarmProbability2["NEGLIGIBLE"] = "NEGLIGIBLE";
    HarmProbability2["LOW"] = "LOW";
    HarmProbability2["MEDIUM"] = "MEDIUM";
    HarmProbability2["HIGH"] = "HIGH";
  })(HarmProbability || (HarmProbability = {}));
  var HarmSeverity;
  (function(HarmSeverity2) {
    HarmSeverity2["HARM_SEVERITY_UNSPECIFIED"] = "HARM_SEVERITY_UNSPECIFIED";
    HarmSeverity2["HARM_SEVERITY_NEGLIGIBLE"] = "HARM_SEVERITY_NEGLIGIBLE";
    HarmSeverity2["HARM_SEVERITY_LOW"] = "HARM_SEVERITY_LOW";
    HarmSeverity2["HARM_SEVERITY_MEDIUM"] = "HARM_SEVERITY_MEDIUM";
    HarmSeverity2["HARM_SEVERITY_HIGH"] = "HARM_SEVERITY_HIGH";
  })(HarmSeverity || (HarmSeverity = {}));
  var BlockedReason;
  (function(BlockedReason2) {
    BlockedReason2["BLOCKED_REASON_UNSPECIFIED"] = "BLOCKED_REASON_UNSPECIFIED";
    BlockedReason2["SAFETY"] = "SAFETY";
    BlockedReason2["OTHER"] = "OTHER";
    BlockedReason2["BLOCKLIST"] = "BLOCKLIST";
    BlockedReason2["PROHIBITED_CONTENT"] = "PROHIBITED_CONTENT";
    BlockedReason2["IMAGE_SAFETY"] = "IMAGE_SAFETY";
  })(BlockedReason || (BlockedReason = {}));
  var TrafficType;
  (function(TrafficType2) {
    TrafficType2["TRAFFIC_TYPE_UNSPECIFIED"] = "TRAFFIC_TYPE_UNSPECIFIED";
    TrafficType2["ON_DEMAND"] = "ON_DEMAND";
    TrafficType2["PROVISIONED_THROUGHPUT"] = "PROVISIONED_THROUGHPUT";
  })(TrafficType || (TrafficType = {}));
  var Modality;
  (function(Modality2) {
    Modality2["MODALITY_UNSPECIFIED"] = "MODALITY_UNSPECIFIED";
    Modality2["TEXT"] = "TEXT";
    Modality2["IMAGE"] = "IMAGE";
    Modality2["AUDIO"] = "AUDIO";
  })(Modality || (Modality = {}));
  var MediaResolution;
  (function(MediaResolution2) {
    MediaResolution2["MEDIA_RESOLUTION_UNSPECIFIED"] = "MEDIA_RESOLUTION_UNSPECIFIED";
    MediaResolution2["MEDIA_RESOLUTION_LOW"] = "MEDIA_RESOLUTION_LOW";
    MediaResolution2["MEDIA_RESOLUTION_MEDIUM"] = "MEDIA_RESOLUTION_MEDIUM";
    MediaResolution2["MEDIA_RESOLUTION_HIGH"] = "MEDIA_RESOLUTION_HIGH";
  })(MediaResolution || (MediaResolution = {}));
  var JobState;
  (function(JobState2) {
    JobState2["JOB_STATE_UNSPECIFIED"] = "JOB_STATE_UNSPECIFIED";
    JobState2["JOB_STATE_QUEUED"] = "JOB_STATE_QUEUED";
    JobState2["JOB_STATE_PENDING"] = "JOB_STATE_PENDING";
    JobState2["JOB_STATE_RUNNING"] = "JOB_STATE_RUNNING";
    JobState2["JOB_STATE_SUCCEEDED"] = "JOB_STATE_SUCCEEDED";
    JobState2["JOB_STATE_FAILED"] = "JOB_STATE_FAILED";
    JobState2["JOB_STATE_CANCELLING"] = "JOB_STATE_CANCELLING";
    JobState2["JOB_STATE_CANCELLED"] = "JOB_STATE_CANCELLED";
    JobState2["JOB_STATE_PAUSED"] = "JOB_STATE_PAUSED";
    JobState2["JOB_STATE_EXPIRED"] = "JOB_STATE_EXPIRED";
    JobState2["JOB_STATE_UPDATING"] = "JOB_STATE_UPDATING";
    JobState2["JOB_STATE_PARTIALLY_SUCCEEDED"] = "JOB_STATE_PARTIALLY_SUCCEEDED";
  })(JobState || (JobState = {}));
  var TuningMode;
  (function(TuningMode2) {
    TuningMode2["TUNING_MODE_UNSPECIFIED"] = "TUNING_MODE_UNSPECIFIED";
    TuningMode2["TUNING_MODE_FULL"] = "TUNING_MODE_FULL";
    TuningMode2["TUNING_MODE_PEFT_ADAPTER"] = "TUNING_MODE_PEFT_ADAPTER";
  })(TuningMode || (TuningMode = {}));
  var AdapterSize;
  (function(AdapterSize2) {
    AdapterSize2["ADAPTER_SIZE_UNSPECIFIED"] = "ADAPTER_SIZE_UNSPECIFIED";
    AdapterSize2["ADAPTER_SIZE_ONE"] = "ADAPTER_SIZE_ONE";
    AdapterSize2["ADAPTER_SIZE_TWO"] = "ADAPTER_SIZE_TWO";
    AdapterSize2["ADAPTER_SIZE_FOUR"] = "ADAPTER_SIZE_FOUR";
    AdapterSize2["ADAPTER_SIZE_EIGHT"] = "ADAPTER_SIZE_EIGHT";
    AdapterSize2["ADAPTER_SIZE_SIXTEEN"] = "ADAPTER_SIZE_SIXTEEN";
    AdapterSize2["ADAPTER_SIZE_THIRTY_TWO"] = "ADAPTER_SIZE_THIRTY_TWO";
  })(AdapterSize || (AdapterSize = {}));
  var FeatureSelectionPreference;
  (function(FeatureSelectionPreference2) {
    FeatureSelectionPreference2["FEATURE_SELECTION_PREFERENCE_UNSPECIFIED"] = "FEATURE_SELECTION_PREFERENCE_UNSPECIFIED";
    FeatureSelectionPreference2["PRIORITIZE_QUALITY"] = "PRIORITIZE_QUALITY";
    FeatureSelectionPreference2["BALANCED"] = "BALANCED";
    FeatureSelectionPreference2["PRIORITIZE_COST"] = "PRIORITIZE_COST";
  })(FeatureSelectionPreference || (FeatureSelectionPreference = {}));
  var Behavior;
  (function(Behavior2) {
    Behavior2["UNSPECIFIED"] = "UNSPECIFIED";
    Behavior2["BLOCKING"] = "BLOCKING";
    Behavior2["NON_BLOCKING"] = "NON_BLOCKING";
  })(Behavior || (Behavior = {}));
  var DynamicRetrievalConfigMode;
  (function(DynamicRetrievalConfigMode2) {
    DynamicRetrievalConfigMode2["MODE_UNSPECIFIED"] = "MODE_UNSPECIFIED";
    DynamicRetrievalConfigMode2["MODE_DYNAMIC"] = "MODE_DYNAMIC";
  })(DynamicRetrievalConfigMode || (DynamicRetrievalConfigMode = {}));
  var Environment;
  (function(Environment2) {
    Environment2["ENVIRONMENT_UNSPECIFIED"] = "ENVIRONMENT_UNSPECIFIED";
    Environment2["ENVIRONMENT_BROWSER"] = "ENVIRONMENT_BROWSER";
  })(Environment || (Environment = {}));
  var FunctionCallingConfigMode;
  (function(FunctionCallingConfigMode2) {
    FunctionCallingConfigMode2["MODE_UNSPECIFIED"] = "MODE_UNSPECIFIED";
    FunctionCallingConfigMode2["AUTO"] = "AUTO";
    FunctionCallingConfigMode2["ANY"] = "ANY";
    FunctionCallingConfigMode2["NONE"] = "NONE";
    FunctionCallingConfigMode2["VALIDATED"] = "VALIDATED";
  })(FunctionCallingConfigMode || (FunctionCallingConfigMode = {}));
  var SafetyFilterLevel;
  (function(SafetyFilterLevel2) {
    SafetyFilterLevel2["BLOCK_LOW_AND_ABOVE"] = "BLOCK_LOW_AND_ABOVE";
    SafetyFilterLevel2["BLOCK_MEDIUM_AND_ABOVE"] = "BLOCK_MEDIUM_AND_ABOVE";
    SafetyFilterLevel2["BLOCK_ONLY_HIGH"] = "BLOCK_ONLY_HIGH";
    SafetyFilterLevel2["BLOCK_NONE"] = "BLOCK_NONE";
  })(SafetyFilterLevel || (SafetyFilterLevel = {}));
  var PersonGeneration;
  (function(PersonGeneration2) {
    PersonGeneration2["DONT_ALLOW"] = "DONT_ALLOW";
    PersonGeneration2["ALLOW_ADULT"] = "ALLOW_ADULT";
    PersonGeneration2["ALLOW_ALL"] = "ALLOW_ALL";
  })(PersonGeneration || (PersonGeneration = {}));
  var ImagePromptLanguage;
  (function(ImagePromptLanguage2) {
    ImagePromptLanguage2["auto"] = "auto";
    ImagePromptLanguage2["en"] = "en";
    ImagePromptLanguage2["ja"] = "ja";
    ImagePromptLanguage2["ko"] = "ko";
    ImagePromptLanguage2["hi"] = "hi";
    ImagePromptLanguage2["zh"] = "zh";
    ImagePromptLanguage2["pt"] = "pt";
    ImagePromptLanguage2["es"] = "es";
  })(ImagePromptLanguage || (ImagePromptLanguage = {}));
  var MaskReferenceMode;
  (function(MaskReferenceMode2) {
    MaskReferenceMode2["MASK_MODE_DEFAULT"] = "MASK_MODE_DEFAULT";
    MaskReferenceMode2["MASK_MODE_USER_PROVIDED"] = "MASK_MODE_USER_PROVIDED";
    MaskReferenceMode2["MASK_MODE_BACKGROUND"] = "MASK_MODE_BACKGROUND";
    MaskReferenceMode2["MASK_MODE_FOREGROUND"] = "MASK_MODE_FOREGROUND";
    MaskReferenceMode2["MASK_MODE_SEMANTIC"] = "MASK_MODE_SEMANTIC";
  })(MaskReferenceMode || (MaskReferenceMode = {}));
  var ControlReferenceType;
  (function(ControlReferenceType2) {
    ControlReferenceType2["CONTROL_TYPE_DEFAULT"] = "CONTROL_TYPE_DEFAULT";
    ControlReferenceType2["CONTROL_TYPE_CANNY"] = "CONTROL_TYPE_CANNY";
    ControlReferenceType2["CONTROL_TYPE_SCRIBBLE"] = "CONTROL_TYPE_SCRIBBLE";
    ControlReferenceType2["CONTROL_TYPE_FACE_MESH"] = "CONTROL_TYPE_FACE_MESH";
  })(ControlReferenceType || (ControlReferenceType = {}));
  var SubjectReferenceType;
  (function(SubjectReferenceType2) {
    SubjectReferenceType2["SUBJECT_TYPE_DEFAULT"] = "SUBJECT_TYPE_DEFAULT";
    SubjectReferenceType2["SUBJECT_TYPE_PERSON"] = "SUBJECT_TYPE_PERSON";
    SubjectReferenceType2["SUBJECT_TYPE_ANIMAL"] = "SUBJECT_TYPE_ANIMAL";
    SubjectReferenceType2["SUBJECT_TYPE_PRODUCT"] = "SUBJECT_TYPE_PRODUCT";
  })(SubjectReferenceType || (SubjectReferenceType = {}));
  var EditMode;
  (function(EditMode2) {
    EditMode2["EDIT_MODE_DEFAULT"] = "EDIT_MODE_DEFAULT";
    EditMode2["EDIT_MODE_INPAINT_REMOVAL"] = "EDIT_MODE_INPAINT_REMOVAL";
    EditMode2["EDIT_MODE_INPAINT_INSERTION"] = "EDIT_MODE_INPAINT_INSERTION";
    EditMode2["EDIT_MODE_OUTPAINT"] = "EDIT_MODE_OUTPAINT";
    EditMode2["EDIT_MODE_CONTROLLED_EDITING"] = "EDIT_MODE_CONTROLLED_EDITING";
    EditMode2["EDIT_MODE_STYLE"] = "EDIT_MODE_STYLE";
    EditMode2["EDIT_MODE_BGSWAP"] = "EDIT_MODE_BGSWAP";
    EditMode2["EDIT_MODE_PRODUCT_IMAGE"] = "EDIT_MODE_PRODUCT_IMAGE";
  })(EditMode || (EditMode = {}));
  var SegmentMode;
  (function(SegmentMode2) {
    SegmentMode2["FOREGROUND"] = "FOREGROUND";
    SegmentMode2["BACKGROUND"] = "BACKGROUND";
    SegmentMode2["PROMPT"] = "PROMPT";
    SegmentMode2["SEMANTIC"] = "SEMANTIC";
    SegmentMode2["INTERACTIVE"] = "INTERACTIVE";
  })(SegmentMode || (SegmentMode = {}));
  var VideoGenerationReferenceType;
  (function(VideoGenerationReferenceType2) {
    VideoGenerationReferenceType2["ASSET"] = "ASSET";
    VideoGenerationReferenceType2["STYLE"] = "STYLE";
  })(VideoGenerationReferenceType || (VideoGenerationReferenceType = {}));
  var VideoGenerationMaskMode;
  (function(VideoGenerationMaskMode2) {
    VideoGenerationMaskMode2["INSERT"] = "INSERT";
    VideoGenerationMaskMode2["REMOVE"] = "REMOVE";
    VideoGenerationMaskMode2["REMOVE_STATIC"] = "REMOVE_STATIC";
    VideoGenerationMaskMode2["OUTPAINT"] = "OUTPAINT";
  })(VideoGenerationMaskMode || (VideoGenerationMaskMode = {}));
  var VideoCompressionQuality;
  (function(VideoCompressionQuality2) {
    VideoCompressionQuality2["OPTIMIZED"] = "OPTIMIZED";
    VideoCompressionQuality2["LOSSLESS"] = "LOSSLESS";
  })(VideoCompressionQuality || (VideoCompressionQuality = {}));
  var FileState;
  (function(FileState2) {
    FileState2["STATE_UNSPECIFIED"] = "STATE_UNSPECIFIED";
    FileState2["PROCESSING"] = "PROCESSING";
    FileState2["ACTIVE"] = "ACTIVE";
    FileState2["FAILED"] = "FAILED";
  })(FileState || (FileState = {}));
  var FileSource;
  (function(FileSource2) {
    FileSource2["SOURCE_UNSPECIFIED"] = "SOURCE_UNSPECIFIED";
    FileSource2["UPLOADED"] = "UPLOADED";
    FileSource2["GENERATED"] = "GENERATED";
  })(FileSource || (FileSource = {}));
  var TurnCompleteReason;
  (function(TurnCompleteReason2) {
    TurnCompleteReason2["TURN_COMPLETE_REASON_UNSPECIFIED"] = "TURN_COMPLETE_REASON_UNSPECIFIED";
    TurnCompleteReason2["MALFORMED_FUNCTION_CALL"] = "MALFORMED_FUNCTION_CALL";
    TurnCompleteReason2["RESPONSE_REJECTED"] = "RESPONSE_REJECTED";
    TurnCompleteReason2["NEED_MORE_INPUT"] = "NEED_MORE_INPUT";
  })(TurnCompleteReason || (TurnCompleteReason = {}));
  var MediaModality;
  (function(MediaModality2) {
    MediaModality2["MODALITY_UNSPECIFIED"] = "MODALITY_UNSPECIFIED";
    MediaModality2["TEXT"] = "TEXT";
    MediaModality2["IMAGE"] = "IMAGE";
    MediaModality2["VIDEO"] = "VIDEO";
    MediaModality2["AUDIO"] = "AUDIO";
    MediaModality2["DOCUMENT"] = "DOCUMENT";
  })(MediaModality || (MediaModality = {}));
  var StartSensitivity;
  (function(StartSensitivity2) {
    StartSensitivity2["START_SENSITIVITY_UNSPECIFIED"] = "START_SENSITIVITY_UNSPECIFIED";
    StartSensitivity2["START_SENSITIVITY_HIGH"] = "START_SENSITIVITY_HIGH";
    StartSensitivity2["START_SENSITIVITY_LOW"] = "START_SENSITIVITY_LOW";
  })(StartSensitivity || (StartSensitivity = {}));
  var EndSensitivity;
  (function(EndSensitivity2) {
    EndSensitivity2["END_SENSITIVITY_UNSPECIFIED"] = "END_SENSITIVITY_UNSPECIFIED";
    EndSensitivity2["END_SENSITIVITY_HIGH"] = "END_SENSITIVITY_HIGH";
    EndSensitivity2["END_SENSITIVITY_LOW"] = "END_SENSITIVITY_LOW";
  })(EndSensitivity || (EndSensitivity = {}));
  var ActivityHandling;
  (function(ActivityHandling2) {
    ActivityHandling2["ACTIVITY_HANDLING_UNSPECIFIED"] = "ACTIVITY_HANDLING_UNSPECIFIED";
    ActivityHandling2["START_OF_ACTIVITY_INTERRUPTS"] = "START_OF_ACTIVITY_INTERRUPTS";
    ActivityHandling2["NO_INTERRUPTION"] = "NO_INTERRUPTION";
  })(ActivityHandling || (ActivityHandling = {}));
  var TurnCoverage;
  (function(TurnCoverage2) {
    TurnCoverage2["TURN_COVERAGE_UNSPECIFIED"] = "TURN_COVERAGE_UNSPECIFIED";
    TurnCoverage2["TURN_INCLUDES_ONLY_ACTIVITY"] = "TURN_INCLUDES_ONLY_ACTIVITY";
    TurnCoverage2["TURN_INCLUDES_ALL_INPUT"] = "TURN_INCLUDES_ALL_INPUT";
  })(TurnCoverage || (TurnCoverage = {}));
  var FunctionResponseScheduling;
  (function(FunctionResponseScheduling2) {
    FunctionResponseScheduling2["SCHEDULING_UNSPECIFIED"] = "SCHEDULING_UNSPECIFIED";
    FunctionResponseScheduling2["SILENT"] = "SILENT";
    FunctionResponseScheduling2["WHEN_IDLE"] = "WHEN_IDLE";
    FunctionResponseScheduling2["INTERRUPT"] = "INTERRUPT";
  })(FunctionResponseScheduling || (FunctionResponseScheduling = {}));
  var Scale;
  (function(Scale2) {
    Scale2["SCALE_UNSPECIFIED"] = "SCALE_UNSPECIFIED";
    Scale2["C_MAJOR_A_MINOR"] = "C_MAJOR_A_MINOR";
    Scale2["D_FLAT_MAJOR_B_FLAT_MINOR"] = "D_FLAT_MAJOR_B_FLAT_MINOR";
    Scale2["D_MAJOR_B_MINOR"] = "D_MAJOR_B_MINOR";
    Scale2["E_FLAT_MAJOR_C_MINOR"] = "E_FLAT_MAJOR_C_MINOR";
    Scale2["E_MAJOR_D_FLAT_MINOR"] = "E_MAJOR_D_FLAT_MINOR";
    Scale2["F_MAJOR_D_MINOR"] = "F_MAJOR_D_MINOR";
    Scale2["G_FLAT_MAJOR_E_FLAT_MINOR"] = "G_FLAT_MAJOR_E_FLAT_MINOR";
    Scale2["G_MAJOR_E_MINOR"] = "G_MAJOR_E_MINOR";
    Scale2["A_FLAT_MAJOR_F_MINOR"] = "A_FLAT_MAJOR_F_MINOR";
    Scale2["A_MAJOR_G_FLAT_MINOR"] = "A_MAJOR_G_FLAT_MINOR";
    Scale2["B_FLAT_MAJOR_G_MINOR"] = "B_FLAT_MAJOR_G_MINOR";
    Scale2["B_MAJOR_A_FLAT_MINOR"] = "B_MAJOR_A_FLAT_MINOR";
  })(Scale || (Scale = {}));
  var MusicGenerationMode;
  (function(MusicGenerationMode2) {
    MusicGenerationMode2["MUSIC_GENERATION_MODE_UNSPECIFIED"] = "MUSIC_GENERATION_MODE_UNSPECIFIED";
    MusicGenerationMode2["QUALITY"] = "QUALITY";
    MusicGenerationMode2["DIVERSITY"] = "DIVERSITY";
    MusicGenerationMode2["VOCALIZATION"] = "VOCALIZATION";
  })(MusicGenerationMode || (MusicGenerationMode = {}));
  var LiveMusicPlaybackControl;
  (function(LiveMusicPlaybackControl2) {
    LiveMusicPlaybackControl2["PLAYBACK_CONTROL_UNSPECIFIED"] = "PLAYBACK_CONTROL_UNSPECIFIED";
    LiveMusicPlaybackControl2["PLAY"] = "PLAY";
    LiveMusicPlaybackControl2["PAUSE"] = "PAUSE";
    LiveMusicPlaybackControl2["STOP"] = "STOP";
    LiveMusicPlaybackControl2["RESET_CONTEXT"] = "RESET_CONTEXT";
  })(LiveMusicPlaybackControl || (LiveMusicPlaybackControl = {}));
  var HttpResponse = class {
    constructor(response) {
      const headers = {};
      for (const pair of response.headers.entries()) {
        headers[pair[0]] = pair[1];
      }
      this.headers = headers;
      this.responseInternal = response;
    }
    json() {
      return this.responseInternal.json();
    }
  };
  var GenerateContentResponse = class {
    /**
     * Returns the concatenation of all text parts from the first candidate in the response.
     *
     * @remarks
     * If there are multiple candidates in the response, the text from the first
     * one will be returned.
     * If there are non-text parts in the response, the concatenation of all text
     * parts will be returned, and a warning will be logged.
     * If there are thought parts in the response, the concatenation of all text
     * parts excluding the thought parts will be returned.
     *
     * @example
     * ```ts
     * const response = await ai.models.generateContent({
     *   model: 'gemini-2.0-flash',
     *   contents:
     *     'Why is the sky blue?',
     * });
     *
     * console.debug(response.text);
     * ```
     */
    get text() {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {
        return void 0;
      }
      if (this.candidates && this.candidates.length > 1) {
        console.warn("there are multiple candidates in the response, returning text from the first one.");
      }
      let text = "";
      let anyTextPartText = false;
      const nonTextParts = [];
      for (const part of (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) !== null && _h !== void 0 ? _h : []) {
        for (const [fieldName, fieldValue] of Object.entries(part)) {
          if (fieldName !== "text" && fieldName !== "thought" && (fieldValue !== null || fieldValue !== void 0)) {
            nonTextParts.push(fieldName);
          }
        }
        if (typeof part.text === "string") {
          if (typeof part.thought === "boolean" && part.thought) {
            continue;
          }
          anyTextPartText = true;
          text += part.text;
        }
      }
      if (nonTextParts.length > 0) {
        console.warn(`there are non-text parts ${nonTextParts} in the response, returning concatenation of all text parts. Please refer to the non text parts for a full response from model.`);
      }
      return anyTextPartText ? text : void 0;
    }
    /**
     * Returns the concatenation of all inline data parts from the first candidate
     * in the response.
     *
     * @remarks
     * If there are multiple candidates in the response, the inline data from the
     * first one will be returned. If there are non-inline data parts in the
     * response, the concatenation of all inline data parts will be returned, and
     * a warning will be logged.
     */
    get data() {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {
        return void 0;
      }
      if (this.candidates && this.candidates.length > 1) {
        console.warn("there are multiple candidates in the response, returning data from the first one.");
      }
      let data = "";
      const nonDataParts = [];
      for (const part of (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) !== null && _h !== void 0 ? _h : []) {
        for (const [fieldName, fieldValue] of Object.entries(part)) {
          if (fieldName !== "inlineData" && (fieldValue !== null || fieldValue !== void 0)) {
            nonDataParts.push(fieldName);
          }
        }
        if (part.inlineData && typeof part.inlineData.data === "string") {
          data += atob(part.inlineData.data);
        }
      }
      if (nonDataParts.length > 0) {
        console.warn(`there are non-data parts ${nonDataParts} in the response, returning concatenation of all data parts. Please refer to the non data parts for a full response from model.`);
      }
      return data.length > 0 ? btoa(data) : void 0;
    }
    /**
     * Returns the function calls from the first candidate in the response.
     *
     * @remarks
     * If there are multiple candidates in the response, the function calls from
     * the first one will be returned.
     * If there are no function calls in the response, undefined will be returned.
     *
     * @example
     * ```ts
     * const controlLightFunctionDeclaration: FunctionDeclaration = {
     *   name: 'controlLight',
     *   parameters: {
     *   type: Type.OBJECT,
     *   description: 'Set the brightness and color temperature of a room light.',
     *   properties: {
     *     brightness: {
     *       type: Type.NUMBER,
     *       description:
     *         'Light level from 0 to 100. Zero is off and 100 is full brightness.',
     *     },
     *     colorTemperature: {
     *       type: Type.STRING,
     *       description:
     *         'Color temperature of the light fixture which can be `daylight`, `cool` or `warm`.',
     *     },
     *   },
     *   required: ['brightness', 'colorTemperature'],
     *  };
     *  const response = await ai.models.generateContent({
     *     model: 'gemini-2.0-flash',
     *     contents: 'Dim the lights so the room feels cozy and warm.',
     *     config: {
     *       tools: [{functionDeclarations: [controlLightFunctionDeclaration]}],
     *       toolConfig: {
     *         functionCallingConfig: {
     *           mode: FunctionCallingConfigMode.ANY,
     *           allowedFunctionNames: ['controlLight'],
     *         },
     *       },
     *     },
     *   });
     *  console.debug(JSON.stringify(response.functionCalls));
     * ```
     */
    get functionCalls() {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {
        return void 0;
      }
      if (this.candidates && this.candidates.length > 1) {
        console.warn("there are multiple candidates in the response, returning function calls from the first one.");
      }
      const functionCalls = (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) === null || _h === void 0 ? void 0 : _h.filter((part) => part.functionCall).map((part) => part.functionCall).filter((functionCall) => functionCall !== void 0);
      if ((functionCalls === null || functionCalls === void 0 ? void 0 : functionCalls.length) === 0) {
        return void 0;
      }
      return functionCalls;
    }
    /**
     * Returns the first executable code from the first candidate in the response.
     *
     * @remarks
     * If there are multiple candidates in the response, the executable code from
     * the first one will be returned.
     * If there are no executable code in the response, undefined will be
     * returned.
     *
     * @example
     * ```ts
     * const response = await ai.models.generateContent({
     *   model: 'gemini-2.0-flash',
     *   contents:
     *     'What is the sum of the first 50 prime numbers? Generate and run code for the calculation, and make sure you get all 50.'
     *   config: {
     *     tools: [{codeExecution: {}}],
     *   },
     * });
     *
     * console.debug(response.executableCode);
     * ```
     */
    get executableCode() {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j;
      if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {
        return void 0;
      }
      if (this.candidates && this.candidates.length > 1) {
        console.warn("there are multiple candidates in the response, returning executable code from the first one.");
      }
      const executableCode = (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) === null || _h === void 0 ? void 0 : _h.filter((part) => part.executableCode).map((part) => part.executableCode).filter((executableCode2) => executableCode2 !== void 0);
      if ((executableCode === null || executableCode === void 0 ? void 0 : executableCode.length) === 0) {
        return void 0;
      }
      return (_j = executableCode === null || executableCode === void 0 ? void 0 : executableCode[0]) === null || _j === void 0 ? void 0 : _j.code;
    }
    /**
     * Returns the first code execution result from the first candidate in the response.
     *
     * @remarks
     * If there are multiple candidates in the response, the code execution result from
     * the first one will be returned.
     * If there are no code execution result in the response, undefined will be returned.
     *
     * @example
     * ```ts
     * const response = await ai.models.generateContent({
     *   model: 'gemini-2.0-flash',
     *   contents:
     *     'What is the sum of the first 50 prime numbers? Generate and run code for the calculation, and make sure you get all 50.'
     *   config: {
     *     tools: [{codeExecution: {}}],
     *   },
     * });
     *
     * console.debug(response.codeExecutionResult);
     * ```
     */
    get codeExecutionResult() {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j;
      if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {
        return void 0;
      }
      if (this.candidates && this.candidates.length > 1) {
        console.warn("there are multiple candidates in the response, returning code execution result from the first one.");
      }
      const codeExecutionResult = (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) === null || _h === void 0 ? void 0 : _h.filter((part) => part.codeExecutionResult).map((part) => part.codeExecutionResult).filter((codeExecutionResult2) => codeExecutionResult2 !== void 0);
      if ((codeExecutionResult === null || codeExecutionResult === void 0 ? void 0 : codeExecutionResult.length) === 0) {
        return void 0;
      }
      return (_j = codeExecutionResult === null || codeExecutionResult === void 0 ? void 0 : codeExecutionResult[0]) === null || _j === void 0 ? void 0 : _j.output;
    }
  };
  var EmbedContentResponse = class {
  };
  var GenerateImagesResponse = class {
  };
  var EditImageResponse = class {
  };
  var UpscaleImageResponse = class {
  };
  var RecontextImageResponse = class {
  };
  var SegmentImageResponse = class {
  };
  var ListModelsResponse = class {
  };
  var DeleteModelResponse = class {
  };
  var CountTokensResponse = class {
  };
  var ComputeTokensResponse = class {
  };
  var GenerateVideosOperation = class _GenerateVideosOperation {
    /**
     * Instantiates an Operation of the same type as the one being called with the fields set from the API response.
     * @internal
     */
    _fromAPIResponse({ apiResponse, isVertexAI }) {
      const operation = new _GenerateVideosOperation();
      let response;
      const op = apiResponse;
      if (isVertexAI) {
        response = generateVideosOperationFromVertex$1(op);
      } else {
        response = generateVideosOperationFromMldev$1(op);
      }
      Object.assign(operation, response);
      return operation;
    }
  };
  var ListTuningJobsResponse = class {
  };
  var DeleteCachedContentResponse = class {
  };
  var ListCachedContentsResponse = class {
  };
  var ListFilesResponse = class {
  };
  var CreateFileResponse = class {
  };
  var DeleteFileResponse = class {
  };
  var ListBatchJobsResponse = class {
  };
  var LiveServerMessage = class {
    /**
     * Returns the concatenation of all text parts from the server content if present.
     *
     * @remarks
     * If there are non-text parts in the response, the concatenation of all text
     * parts will be returned, and a warning will be logged.
     */
    get text() {
      var _a, _b, _c;
      let text = "";
      let anyTextPartFound = false;
      const nonTextParts = [];
      for (const part of (_c = (_b = (_a = this.serverContent) === null || _a === void 0 ? void 0 : _a.modelTurn) === null || _b === void 0 ? void 0 : _b.parts) !== null && _c !== void 0 ? _c : []) {
        for (const [fieldName, fieldValue] of Object.entries(part)) {
          if (fieldName !== "text" && fieldName !== "thought" && fieldValue !== null) {
            nonTextParts.push(fieldName);
          }
        }
        if (typeof part.text === "string") {
          if (typeof part.thought === "boolean" && part.thought) {
            continue;
          }
          anyTextPartFound = true;
          text += part.text;
        }
      }
      if (nonTextParts.length > 0) {
        console.warn(`there are non-text parts ${nonTextParts} in the response, returning concatenation of all text parts. Please refer to the non text parts for a full response from model.`);
      }
      return anyTextPartFound ? text : void 0;
    }
    /**
     * Returns the concatenation of all inline data parts from the server content if present.
     *
     * @remarks
     * If there are non-inline data parts in the
     * response, the concatenation of all inline data parts will be returned, and
     * a warning will be logged.
     */
    get data() {
      var _a, _b, _c;
      let data = "";
      const nonDataParts = [];
      for (const part of (_c = (_b = (_a = this.serverContent) === null || _a === void 0 ? void 0 : _a.modelTurn) === null || _b === void 0 ? void 0 : _b.parts) !== null && _c !== void 0 ? _c : []) {
        for (const [fieldName, fieldValue] of Object.entries(part)) {
          if (fieldName !== "inlineData" && fieldValue !== null) {
            nonDataParts.push(fieldName);
          }
        }
        if (part.inlineData && typeof part.inlineData.data === "string") {
          data += atob(part.inlineData.data);
        }
      }
      if (nonDataParts.length > 0) {
        console.warn(`there are non-data parts ${nonDataParts} in the response, returning concatenation of all data parts. Please refer to the non data parts for a full response from model.`);
      }
      return data.length > 0 ? btoa(data) : void 0;
    }
  };
  var LiveMusicServerMessage = class {
    /**
     * Returns the first audio chunk from the server content, if present.
     *
     * @remarks
     * If there are no audio chunks in the response, undefined will be returned.
     */
    get audioChunk() {
      if (this.serverContent && this.serverContent.audioChunks && this.serverContent.audioChunks.length > 0) {
        return this.serverContent.audioChunks[0];
      }
      return void 0;
    }
  };
  function tModel(apiClient, model) {
    if (!model || typeof model !== "string") {
      throw new Error("model is required and must be a string");
    }
    if (apiClient.isVertexAI()) {
      if (model.startsWith("publishers/") || model.startsWith("projects/") || model.startsWith("models/")) {
        return model;
      } else if (model.indexOf("/") >= 0) {
        const parts = model.split("/", 2);
        return `publishers/${parts[0]}/models/${parts[1]}`;
      } else {
        return `publishers/google/models/${model}`;
      }
    } else {
      if (model.startsWith("models/") || model.startsWith("tunedModels/")) {
        return model;
      } else {
        return `models/${model}`;
      }
    }
  }
  function tCachesModel(apiClient, model) {
    const transformedModel = tModel(apiClient, model);
    if (!transformedModel) {
      return "";
    }
    if (transformedModel.startsWith("publishers/") && apiClient.isVertexAI()) {
      return `projects/${apiClient.getProject()}/locations/${apiClient.getLocation()}/${transformedModel}`;
    } else if (transformedModel.startsWith("models/") && apiClient.isVertexAI()) {
      return `projects/${apiClient.getProject()}/locations/${apiClient.getLocation()}/publishers/google/${transformedModel}`;
    } else {
      return transformedModel;
    }
  }
  function tBlobs(blobs) {
    if (Array.isArray(blobs)) {
      return blobs.map((blob) => tBlob(blob));
    } else {
      return [tBlob(blobs)];
    }
  }
  function tBlob(blob) {
    if (typeof blob === "object" && blob !== null) {
      return blob;
    }
    throw new Error(`Could not parse input as Blob. Unsupported blob type: ${typeof blob}`);
  }
  function tImageBlob(blob) {
    const transformedBlob = tBlob(blob);
    if (transformedBlob.mimeType && transformedBlob.mimeType.startsWith("image/")) {
      return transformedBlob;
    }
    throw new Error(`Unsupported mime type: ${transformedBlob.mimeType}`);
  }
  function tAudioBlob(blob) {
    const transformedBlob = tBlob(blob);
    if (transformedBlob.mimeType && transformedBlob.mimeType.startsWith("audio/")) {
      return transformedBlob;
    }
    throw new Error(`Unsupported mime type: ${transformedBlob.mimeType}`);
  }
  function tPart(origin) {
    if (origin === null || origin === void 0) {
      throw new Error("PartUnion is required");
    }
    if (typeof origin === "object") {
      return origin;
    }
    if (typeof origin === "string") {
      return { text: origin };
    }
    throw new Error(`Unsupported part type: ${typeof origin}`);
  }
  function tParts(origin) {
    if (origin === null || origin === void 0 || Array.isArray(origin) && origin.length === 0) {
      throw new Error("PartListUnion is required");
    }
    if (Array.isArray(origin)) {
      return origin.map((item) => tPart(item));
    }
    return [tPart(origin)];
  }
  function _isContent(origin) {
    return origin !== null && origin !== void 0 && typeof origin === "object" && "parts" in origin && Array.isArray(origin.parts);
  }
  function _isFunctionCallPart(origin) {
    return origin !== null && origin !== void 0 && typeof origin === "object" && "functionCall" in origin;
  }
  function _isFunctionResponsePart(origin) {
    return origin !== null && origin !== void 0 && typeof origin === "object" && "functionResponse" in origin;
  }
  function tContent(origin) {
    if (origin === null || origin === void 0) {
      throw new Error("ContentUnion is required");
    }
    if (_isContent(origin)) {
      return origin;
    }
    return {
      role: "user",
      parts: tParts(origin)
    };
  }
  function tContentsForEmbed(apiClient, origin) {
    if (!origin) {
      return [];
    }
    if (apiClient.isVertexAI() && Array.isArray(origin)) {
      return origin.flatMap((item) => {
        const content = tContent(item);
        if (content.parts && content.parts.length > 0 && content.parts[0].text !== void 0) {
          return [content.parts[0].text];
        }
        return [];
      });
    } else if (apiClient.isVertexAI()) {
      const content = tContent(origin);
      if (content.parts && content.parts.length > 0 && content.parts[0].text !== void 0) {
        return [content.parts[0].text];
      }
      return [];
    }
    if (Array.isArray(origin)) {
      return origin.map((item) => tContent(item));
    }
    return [tContent(origin)];
  }
  function tContents(origin) {
    if (origin === null || origin === void 0 || Array.isArray(origin) && origin.length === 0) {
      throw new Error("contents are required");
    }
    if (!Array.isArray(origin)) {
      if (_isFunctionCallPart(origin) || _isFunctionResponsePart(origin)) {
        throw new Error("To specify functionCall or functionResponse parts, please wrap them in a Content object, specifying the role for them");
      }
      return [tContent(origin)];
    }
    const result = [];
    const accumulatedParts = [];
    const isContentArray = _isContent(origin[0]);
    for (const item of origin) {
      const isContent = _isContent(item);
      if (isContent != isContentArray) {
        throw new Error("Mixing Content and Parts is not supported, please group the parts into a the appropriate Content objects and specify the roles for them");
      }
      if (isContent) {
        result.push(item);
      } else if (_isFunctionCallPart(item) || _isFunctionResponsePart(item)) {
        throw new Error("To specify functionCall or functionResponse parts, please wrap them, and any other parts, in Content objects as appropriate, specifying the role for them");
      } else {
        accumulatedParts.push(item);
      }
    }
    if (!isContentArray) {
      result.push({ role: "user", parts: tParts(accumulatedParts) });
    }
    return result;
  }
  function flattenTypeArrayToAnyOf(typeList, resultingSchema) {
    if (typeList.includes("null")) {
      resultingSchema["nullable"] = true;
    }
    const listWithoutNull = typeList.filter((type) => type !== "null");
    if (listWithoutNull.length === 1) {
      resultingSchema["type"] = Object.values(Type).includes(listWithoutNull[0].toUpperCase()) ? listWithoutNull[0].toUpperCase() : Type.TYPE_UNSPECIFIED;
    } else {
      resultingSchema["anyOf"] = [];
      for (const i of listWithoutNull) {
        resultingSchema["anyOf"].push({
          "type": Object.values(Type).includes(i.toUpperCase()) ? i.toUpperCase() : Type.TYPE_UNSPECIFIED
        });
      }
    }
  }
  function processJsonSchema(_jsonSchema) {
    const genAISchema = {};
    const schemaFieldNames = ["items"];
    const listSchemaFieldNames = ["anyOf"];
    const dictSchemaFieldNames = ["properties"];
    if (_jsonSchema["type"] && _jsonSchema["anyOf"]) {
      throw new Error("type and anyOf cannot be both populated.");
    }
    const incomingAnyOf = _jsonSchema["anyOf"];
    if (incomingAnyOf != null && incomingAnyOf.length == 2) {
      if (incomingAnyOf[0]["type"] === "null") {
        genAISchema["nullable"] = true;
        _jsonSchema = incomingAnyOf[1];
      } else if (incomingAnyOf[1]["type"] === "null") {
        genAISchema["nullable"] = true;
        _jsonSchema = incomingAnyOf[0];
      }
    }
    if (_jsonSchema["type"] instanceof Array) {
      flattenTypeArrayToAnyOf(_jsonSchema["type"], genAISchema);
    }
    for (const [fieldName, fieldValue] of Object.entries(_jsonSchema)) {
      if (fieldValue == null) {
        continue;
      }
      if (fieldName == "type") {
        if (fieldValue === "null") {
          throw new Error("type: null can not be the only possible type for the field.");
        }
        if (fieldValue instanceof Array) {
          continue;
        }
        genAISchema["type"] = Object.values(Type).includes(fieldValue.toUpperCase()) ? fieldValue.toUpperCase() : Type.TYPE_UNSPECIFIED;
      } else if (schemaFieldNames.includes(fieldName)) {
        genAISchema[fieldName] = processJsonSchema(fieldValue);
      } else if (listSchemaFieldNames.includes(fieldName)) {
        const listSchemaFieldValue = [];
        for (const item of fieldValue) {
          if (item["type"] == "null") {
            genAISchema["nullable"] = true;
            continue;
          }
          listSchemaFieldValue.push(processJsonSchema(item));
        }
        genAISchema[fieldName] = listSchemaFieldValue;
      } else if (dictSchemaFieldNames.includes(fieldName)) {
        const dictSchemaFieldValue = {};
        for (const [key, value] of Object.entries(fieldValue)) {
          dictSchemaFieldValue[key] = processJsonSchema(value);
        }
        genAISchema[fieldName] = dictSchemaFieldValue;
      } else {
        if (fieldName === "additionalProperties") {
          continue;
        }
        genAISchema[fieldName] = fieldValue;
      }
    }
    return genAISchema;
  }
  function tSchema(schema) {
    return processJsonSchema(schema);
  }
  function tSpeechConfig(speechConfig) {
    if (typeof speechConfig === "object") {
      return speechConfig;
    } else if (typeof speechConfig === "string") {
      return {
        voiceConfig: {
          prebuiltVoiceConfig: {
            voiceName: speechConfig
          }
        }
      };
    } else {
      throw new Error(`Unsupported speechConfig type: ${typeof speechConfig}`);
    }
  }
  function tLiveSpeechConfig(speechConfig) {
    if ("multiSpeakerVoiceConfig" in speechConfig) {
      throw new Error("multiSpeakerVoiceConfig is not supported in the live API.");
    }
    return speechConfig;
  }
  function tTool(tool) {
    if (tool.functionDeclarations) {
      for (const functionDeclaration of tool.functionDeclarations) {
        if (functionDeclaration.parameters) {
          if (!Object.keys(functionDeclaration.parameters).includes("$schema")) {
            functionDeclaration.parameters = processJsonSchema(functionDeclaration.parameters);
          } else {
            if (!functionDeclaration.parametersJsonSchema) {
              functionDeclaration.parametersJsonSchema = functionDeclaration.parameters;
              delete functionDeclaration.parameters;
            }
          }
        }
        if (functionDeclaration.response) {
          if (!Object.keys(functionDeclaration.response).includes("$schema")) {
            functionDeclaration.response = processJsonSchema(functionDeclaration.response);
          } else {
            if (!functionDeclaration.responseJsonSchema) {
              functionDeclaration.responseJsonSchema = functionDeclaration.response;
              delete functionDeclaration.response;
            }
          }
        }
      }
    }
    return tool;
  }
  function tTools(tools) {
    if (tools === void 0 || tools === null) {
      throw new Error("tools is required");
    }
    if (!Array.isArray(tools)) {
      throw new Error("tools is required and must be an array of Tools");
    }
    const result = [];
    for (const tool of tools) {
      result.push(tool);
    }
    return result;
  }
  function resourceName(client, resourceName2, resourcePrefix, splitsAfterPrefix = 1) {
    const shouldAppendPrefix = !resourceName2.startsWith(`${resourcePrefix}/`) && resourceName2.split("/").length === splitsAfterPrefix;
    if (client.isVertexAI()) {
      if (resourceName2.startsWith("projects/")) {
        return resourceName2;
      } else if (resourceName2.startsWith("locations/")) {
        return `projects/${client.getProject()}/${resourceName2}`;
      } else if (resourceName2.startsWith(`${resourcePrefix}/`)) {
        return `projects/${client.getProject()}/locations/${client.getLocation()}/${resourceName2}`;
      } else if (shouldAppendPrefix) {
        return `projects/${client.getProject()}/locations/${client.getLocation()}/${resourcePrefix}/${resourceName2}`;
      } else {
        return resourceName2;
      }
    }
    if (shouldAppendPrefix) {
      return `${resourcePrefix}/${resourceName2}`;
    }
    return resourceName2;
  }
  function tCachedContentName(apiClient, name) {
    if (typeof name !== "string") {
      throw new Error("name must be a string");
    }
    return resourceName(apiClient, name, "cachedContents");
  }
  function tTuningJobStatus(status) {
    switch (status) {
      case "STATE_UNSPECIFIED":
        return "JOB_STATE_UNSPECIFIED";
      case "CREATING":
        return "JOB_STATE_RUNNING";
      case "ACTIVE":
        return "JOB_STATE_SUCCEEDED";
      case "FAILED":
        return "JOB_STATE_FAILED";
      default:
        return status;
    }
  }
  function tBytes(fromImageBytes) {
    return tBytes$1(fromImageBytes);
  }
  function _isFile(origin) {
    return origin !== null && origin !== void 0 && typeof origin === "object" && "name" in origin;
  }
  function isGeneratedVideo(origin) {
    return origin !== null && origin !== void 0 && typeof origin === "object" && "video" in origin;
  }
  function isVideo(origin) {
    return origin !== null && origin !== void 0 && typeof origin === "object" && "uri" in origin;
  }
  function tFileName(fromName) {
    var _a;
    let name;
    if (_isFile(fromName)) {
      name = fromName.name;
    }
    if (isVideo(fromName)) {
      name = fromName.uri;
      if (name === void 0) {
        return void 0;
      }
    }
    if (isGeneratedVideo(fromName)) {
      name = (_a = fromName.video) === null || _a === void 0 ? void 0 : _a.uri;
      if (name === void 0) {
        return void 0;
      }
    }
    if (typeof fromName === "string") {
      name = fromName;
    }
    if (name === void 0) {
      throw new Error("Could not extract file name from the provided input.");
    }
    if (name.startsWith("https://")) {
      const suffix = name.split("files/")[1];
      const match = suffix.match(/[a-z0-9]+/);
      if (match === null) {
        throw new Error(`Could not extract file name from URI ${name}`);
      }
      name = match[0];
    } else if (name.startsWith("files/")) {
      name = name.split("files/")[1];
    }
    return name;
  }
  function tModelsUrl(apiClient, baseModels) {
    let res;
    if (apiClient.isVertexAI()) {
      res = baseModels ? "publishers/google/models" : "models";
    } else {
      res = baseModels ? "models" : "tunedModels";
    }
    return res;
  }
  function tExtractModels(response) {
    for (const key of ["models", "tunedModels", "publisherModels"]) {
      if (hasField(response, key)) {
        return response[key];
      }
    }
    return [];
  }
  function hasField(data, fieldName) {
    return data !== null && typeof data === "object" && fieldName in data;
  }
  function mcpToGeminiTool(mcpTool, config = {}) {
    const mcpToolSchema = mcpTool;
    const functionDeclaration = {
      name: mcpToolSchema["name"],
      description: mcpToolSchema["description"],
      parametersJsonSchema: mcpToolSchema["inputSchema"]
    };
    if (mcpToolSchema["outputSchema"]) {
      functionDeclaration["responseJsonSchema"] = mcpToolSchema["outputSchema"];
    }
    if (config.behavior) {
      functionDeclaration["behavior"] = config.behavior;
    }
    const geminiTool = {
      functionDeclarations: [
        functionDeclaration
      ]
    };
    return geminiTool;
  }
  function mcpToolsToGeminiTool(mcpTools, config = {}) {
    const functionDeclarations = [];
    const toolNames = /* @__PURE__ */ new Set();
    for (const mcpTool of mcpTools) {
      const mcpToolName = mcpTool.name;
      if (toolNames.has(mcpToolName)) {
        throw new Error(`Duplicate function name ${mcpToolName} found in MCP tools. Please ensure function names are unique.`);
      }
      toolNames.add(mcpToolName);
      const geminiTool = mcpToGeminiTool(mcpTool, config);
      if (geminiTool.functionDeclarations) {
        functionDeclarations.push(...geminiTool.functionDeclarations);
      }
    }
    return { functionDeclarations };
  }
  function tBatchJobSource(client, src) {
    let sourceObj;
    if (typeof src === "string") {
      if (client.isVertexAI()) {
        if (src.startsWith("gs://")) {
          sourceObj = { format: "jsonl", gcsUri: [src] };
        } else if (src.startsWith("bq://")) {
          sourceObj = { format: "bigquery", bigqueryUri: src };
        } else {
          throw new Error(`Unsupported string source for Vertex AI: ${src}`);
        }
      } else {
        if (src.startsWith("files/")) {
          sourceObj = { fileName: src };
        } else {
          throw new Error(`Unsupported string source for Gemini API: ${src}`);
        }
      }
    } else if (Array.isArray(src)) {
      if (client.isVertexAI()) {
        throw new Error("InlinedRequest[] is not supported in Vertex AI.");
      }
      sourceObj = { inlinedRequests: src };
    } else {
      sourceObj = src;
    }
    const vertexSourcesCount = [sourceObj.gcsUri, sourceObj.bigqueryUri].filter(Boolean).length;
    const mldevSourcesCount = [
      sourceObj.inlinedRequests,
      sourceObj.fileName
    ].filter(Boolean).length;
    if (client.isVertexAI()) {
      if (mldevSourcesCount > 0 || vertexSourcesCount !== 1) {
        throw new Error("Exactly one of `gcsUri` or `bigqueryUri` must be set for Vertex AI.");
      }
    } else {
      if (vertexSourcesCount > 0 || mldevSourcesCount !== 1) {
        throw new Error("Exactly one of `inlinedRequests`, `fileName`, must be set for Gemini API.");
      }
    }
    return sourceObj;
  }
  function tBatchJobDestination(dest) {
    if (typeof dest !== "string") {
      return dest;
    }
    const destString = dest;
    if (destString.startsWith("gs://")) {
      return {
        format: "jsonl",
        gcsUri: destString
      };
    } else if (destString.startsWith("bq://")) {
      return {
        format: "bigquery",
        bigqueryUri: destString
      };
    } else {
      throw new Error(`Unsupported destination: ${destString}`);
    }
  }
  function tRecvBatchJobDestination(dest) {
    if (typeof dest !== "object" || dest === null) {
      return {};
    }
    const obj = dest;
    const inlineResponsesVal = obj["inlinedResponses"];
    if (typeof inlineResponsesVal !== "object" || inlineResponsesVal === null) {
      return dest;
    }
    const inlineResponsesObj = inlineResponsesVal;
    const responsesArray = inlineResponsesObj["inlinedResponses"];
    if (!Array.isArray(responsesArray) || responsesArray.length === 0) {
      return dest;
    }
    let hasEmbedding = false;
    for (const responseItem of responsesArray) {
      if (typeof responseItem !== "object" || responseItem === null) {
        continue;
      }
      const responseItemObj = responseItem;
      const responseVal = responseItemObj["response"];
      if (typeof responseVal !== "object" || responseVal === null) {
        continue;
      }
      const responseObj = responseVal;
      if (responseObj["embedding"] !== void 0) {
        hasEmbedding = true;
        break;
      }
    }
    if (hasEmbedding) {
      obj["inlinedEmbedContentResponses"] = obj["inlinedResponses"];
      delete obj["inlinedResponses"];
    }
    return dest;
  }
  function tBatchJobName(apiClient, name) {
    const nameString = name;
    if (!apiClient.isVertexAI()) {
      const mldevPattern = /batches\/[^/]+$/;
      if (mldevPattern.test(nameString)) {
        return nameString.split("/").pop();
      } else {
        throw new Error(`Invalid batch job name: ${nameString}.`);
      }
    }
    const vertexPattern = /^projects\/[^/]+\/locations\/[^/]+\/batchPredictionJobs\/[^/]+$/;
    if (vertexPattern.test(nameString)) {
      return nameString.split("/").pop();
    } else if (/^\d+$/.test(nameString)) {
      return nameString;
    } else {
      throw new Error(`Invalid batch job name: ${nameString}.`);
    }
  }
  function tJobState(state) {
    const stateString = state;
    if (stateString === "BATCH_STATE_UNSPECIFIED") {
      return "JOB_STATE_UNSPECIFIED";
    } else if (stateString === "BATCH_STATE_PENDING") {
      return "JOB_STATE_PENDING";
    } else if (stateString === "BATCH_STATE_RUNNING") {
      return "JOB_STATE_RUNNING";
    } else if (stateString === "BATCH_STATE_SUCCEEDED") {
      return "JOB_STATE_SUCCEEDED";
    } else if (stateString === "BATCH_STATE_FAILED") {
      return "JOB_STATE_FAILED";
    } else if (stateString === "BATCH_STATE_CANCELLED") {
      return "JOB_STATE_CANCELLED";
    } else if (stateString === "BATCH_STATE_EXPIRED") {
      return "JOB_STATE_EXPIRED";
    } else {
      return stateString;
    }
  }
  function batchJobDestinationFromMldev(fromObject) {
    const toObject = {};
    const fromFileName = getValueByPath(fromObject, ["responsesFile"]);
    if (fromFileName != null) {
      setValueByPath(toObject, ["fileName"], fromFileName);
    }
    const fromInlinedResponses = getValueByPath(fromObject, [
      "inlinedResponses",
      "inlinedResponses"
    ]);
    if (fromInlinedResponses != null) {
      let transformedList = fromInlinedResponses;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return inlinedResponseFromMldev(item);
        });
      }
      setValueByPath(toObject, ["inlinedResponses"], transformedList);
    }
    const fromInlinedEmbedContentResponses = getValueByPath(fromObject, [
      "inlinedEmbedContentResponses",
      "inlinedResponses"
    ]);
    if (fromInlinedEmbedContentResponses != null) {
      let transformedList = fromInlinedEmbedContentResponses;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return inlinedEmbedContentResponseFromMldev(item);
        });
      }
      setValueByPath(toObject, ["inlinedEmbedContentResponses"], transformedList);
    }
    return toObject;
  }
  function batchJobDestinationFromVertex(fromObject) {
    const toObject = {};
    const fromFormat = getValueByPath(fromObject, ["predictionsFormat"]);
    if (fromFormat != null) {
      setValueByPath(toObject, ["format"], fromFormat);
    }
    const fromGcsUri = getValueByPath(fromObject, [
      "gcsDestination",
      "outputUriPrefix"
    ]);
    if (fromGcsUri != null) {
      setValueByPath(toObject, ["gcsUri"], fromGcsUri);
    }
    const fromBigqueryUri = getValueByPath(fromObject, [
      "bigqueryDestination",
      "outputUri"
    ]);
    if (fromBigqueryUri != null) {
      setValueByPath(toObject, ["bigqueryUri"], fromBigqueryUri);
    }
    return toObject;
  }
  function batchJobDestinationToVertex(fromObject) {
    const toObject = {};
    const fromFormat = getValueByPath(fromObject, ["format"]);
    if (fromFormat != null) {
      setValueByPath(toObject, ["predictionsFormat"], fromFormat);
    }
    const fromGcsUri = getValueByPath(fromObject, ["gcsUri"]);
    if (fromGcsUri != null) {
      setValueByPath(toObject, ["gcsDestination", "outputUriPrefix"], fromGcsUri);
    }
    const fromBigqueryUri = getValueByPath(fromObject, ["bigqueryUri"]);
    if (fromBigqueryUri != null) {
      setValueByPath(toObject, ["bigqueryDestination", "outputUri"], fromBigqueryUri);
    }
    if (getValueByPath(fromObject, ["fileName"]) !== void 0) {
      throw new Error("fileName parameter is not supported in Vertex AI.");
    }
    if (getValueByPath(fromObject, ["inlinedResponses"]) !== void 0) {
      throw new Error("inlinedResponses parameter is not supported in Vertex AI.");
    }
    if (getValueByPath(fromObject, ["inlinedEmbedContentResponses"]) !== void 0) {
      throw new Error("inlinedEmbedContentResponses parameter is not supported in Vertex AI.");
    }
    return toObject;
  }
  function batchJobFromMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDisplayName = getValueByPath(fromObject, [
      "metadata",
      "displayName"
    ]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromState = getValueByPath(fromObject, ["metadata", "state"]);
    if (fromState != null) {
      setValueByPath(toObject, ["state"], tJobState(fromState));
    }
    const fromCreateTime = getValueByPath(fromObject, [
      "metadata",
      "createTime"
    ]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromEndTime = getValueByPath(fromObject, [
      "metadata",
      "endTime"
    ]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, [
      "metadata",
      "updateTime"
    ]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    const fromModel = getValueByPath(fromObject, ["metadata", "model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], fromModel);
    }
    const fromDest = getValueByPath(fromObject, ["metadata", "output"]);
    if (fromDest != null) {
      setValueByPath(toObject, ["dest"], batchJobDestinationFromMldev(tRecvBatchJobDestination(fromDest)));
    }
    return toObject;
  }
  function batchJobFromVertex(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromState = getValueByPath(fromObject, ["state"]);
    if (fromState != null) {
      setValueByPath(toObject, ["state"], tJobState(fromState));
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], jobErrorFromVertex(fromError));
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], fromModel);
    }
    const fromSrc = getValueByPath(fromObject, ["inputConfig"]);
    if (fromSrc != null) {
      setValueByPath(toObject, ["src"], batchJobSourceFromVertex(fromSrc));
    }
    const fromDest = getValueByPath(fromObject, ["outputConfig"]);
    if (fromDest != null) {
      setValueByPath(toObject, ["dest"], batchJobDestinationFromVertex(tRecvBatchJobDestination(fromDest)));
    }
    return toObject;
  }
  function batchJobSourceFromVertex(fromObject) {
    const toObject = {};
    const fromFormat = getValueByPath(fromObject, ["instancesFormat"]);
    if (fromFormat != null) {
      setValueByPath(toObject, ["format"], fromFormat);
    }
    const fromGcsUri = getValueByPath(fromObject, ["gcsSource", "uris"]);
    if (fromGcsUri != null) {
      setValueByPath(toObject, ["gcsUri"], fromGcsUri);
    }
    const fromBigqueryUri = getValueByPath(fromObject, [
      "bigquerySource",
      "inputUri"
    ]);
    if (fromBigqueryUri != null) {
      setValueByPath(toObject, ["bigqueryUri"], fromBigqueryUri);
    }
    return toObject;
  }
  function batchJobSourceToMldev(apiClient, fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["format"]) !== void 0) {
      throw new Error("format parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["gcsUri"]) !== void 0) {
      throw new Error("gcsUri parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["bigqueryUri"]) !== void 0) {
      throw new Error("bigqueryUri parameter is not supported in Gemini API.");
    }
    const fromFileName = getValueByPath(fromObject, ["fileName"]);
    if (fromFileName != null) {
      setValueByPath(toObject, ["fileName"], fromFileName);
    }
    const fromInlinedRequests = getValueByPath(fromObject, [
      "inlinedRequests"
    ]);
    if (fromInlinedRequests != null) {
      let transformedList = fromInlinedRequests;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return inlinedRequestToMldev(apiClient, item);
        });
      }
      setValueByPath(toObject, ["requests", "requests"], transformedList);
    }
    return toObject;
  }
  function batchJobSourceToVertex(fromObject) {
    const toObject = {};
    const fromFormat = getValueByPath(fromObject, ["format"]);
    if (fromFormat != null) {
      setValueByPath(toObject, ["instancesFormat"], fromFormat);
    }
    const fromGcsUri = getValueByPath(fromObject, ["gcsUri"]);
    if (fromGcsUri != null) {
      setValueByPath(toObject, ["gcsSource", "uris"], fromGcsUri);
    }
    const fromBigqueryUri = getValueByPath(fromObject, ["bigqueryUri"]);
    if (fromBigqueryUri != null) {
      setValueByPath(toObject, ["bigquerySource", "inputUri"], fromBigqueryUri);
    }
    if (getValueByPath(fromObject, ["fileName"]) !== void 0) {
      throw new Error("fileName parameter is not supported in Vertex AI.");
    }
    if (getValueByPath(fromObject, ["inlinedRequests"]) !== void 0) {
      throw new Error("inlinedRequests parameter is not supported in Vertex AI.");
    }
    return toObject;
  }
  function blobFromMldev$2(fromObject) {
    const toObject = {};
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function blobToMldev$4(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function cancelBatchJobParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tBatchJobName(apiClient, fromName));
    }
    return toObject;
  }
  function cancelBatchJobParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tBatchJobName(apiClient, fromName));
    }
    return toObject;
  }
  function candidateFromMldev$1(fromObject) {
    const toObject = {};
    const fromContent = getValueByPath(fromObject, ["content"]);
    if (fromContent != null) {
      setValueByPath(toObject, ["content"], contentFromMldev$2(fromContent));
    }
    const fromCitationMetadata = getValueByPath(fromObject, [
      "citationMetadata"
    ]);
    if (fromCitationMetadata != null) {
      setValueByPath(toObject, ["citationMetadata"], citationMetadataFromMldev$1(fromCitationMetadata));
    }
    const fromTokenCount = getValueByPath(fromObject, ["tokenCount"]);
    if (fromTokenCount != null) {
      setValueByPath(toObject, ["tokenCount"], fromTokenCount);
    }
    const fromFinishReason = getValueByPath(fromObject, ["finishReason"]);
    if (fromFinishReason != null) {
      setValueByPath(toObject, ["finishReason"], fromFinishReason);
    }
    const fromUrlContextMetadata = getValueByPath(fromObject, [
      "urlContextMetadata"
    ]);
    if (fromUrlContextMetadata != null) {
      setValueByPath(toObject, ["urlContextMetadata"], urlContextMetadataFromMldev$2(fromUrlContextMetadata));
    }
    const fromAvgLogprobs = getValueByPath(fromObject, ["avgLogprobs"]);
    if (fromAvgLogprobs != null) {
      setValueByPath(toObject, ["avgLogprobs"], fromAvgLogprobs);
    }
    const fromGroundingMetadata = getValueByPath(fromObject, [
      "groundingMetadata"
    ]);
    if (fromGroundingMetadata != null) {
      setValueByPath(toObject, ["groundingMetadata"], fromGroundingMetadata);
    }
    const fromIndex = getValueByPath(fromObject, ["index"]);
    if (fromIndex != null) {
      setValueByPath(toObject, ["index"], fromIndex);
    }
    const fromLogprobsResult = getValueByPath(fromObject, [
      "logprobsResult"
    ]);
    if (fromLogprobsResult != null) {
      setValueByPath(toObject, ["logprobsResult"], fromLogprobsResult);
    }
    const fromSafetyRatings = getValueByPath(fromObject, [
      "safetyRatings"
    ]);
    if (fromSafetyRatings != null) {
      setValueByPath(toObject, ["safetyRatings"], fromSafetyRatings);
    }
    return toObject;
  }
  function citationMetadataFromMldev$1(fromObject) {
    const toObject = {};
    const fromCitations = getValueByPath(fromObject, ["citationSources"]);
    if (fromCitations != null) {
      setValueByPath(toObject, ["citations"], fromCitations);
    }
    return toObject;
  }
  function contentEmbeddingFromMldev$1(fromObject) {
    const toObject = {};
    const fromValues = getValueByPath(fromObject, ["values"]);
    if (fromValues != null) {
      setValueByPath(toObject, ["values"], fromValues);
    }
    return toObject;
  }
  function contentFromMldev$2(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partFromMldev$2(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contentToMldev$4(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partToMldev$4(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function createBatchJobConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (parentObject !== void 0 && fromDisplayName != null) {
      setValueByPath(parentObject, ["batch", "displayName"], fromDisplayName);
    }
    if (getValueByPath(fromObject, ["dest"]) !== void 0) {
      throw new Error("dest parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function createBatchJobConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (parentObject !== void 0 && fromDisplayName != null) {
      setValueByPath(parentObject, ["displayName"], fromDisplayName);
    }
    const fromDest = getValueByPath(fromObject, ["dest"]);
    if (parentObject !== void 0 && fromDest != null) {
      setValueByPath(parentObject, ["outputConfig"], batchJobDestinationToVertex(tBatchJobDestination(fromDest)));
    }
    return toObject;
  }
  function createBatchJobParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromSrc = getValueByPath(fromObject, ["src"]);
    if (fromSrc != null) {
      setValueByPath(toObject, ["batch", "inputConfig"], batchJobSourceToMldev(apiClient, tBatchJobSource(apiClient, fromSrc)));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      createBatchJobConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function createBatchJobParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], tModel(apiClient, fromModel));
    }
    const fromSrc = getValueByPath(fromObject, ["src"]);
    if (fromSrc != null) {
      setValueByPath(toObject, ["inputConfig"], batchJobSourceToVertex(tBatchJobSource(apiClient, fromSrc)));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      createBatchJobConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function createEmbeddingsBatchJobConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (parentObject !== void 0 && fromDisplayName != null) {
      setValueByPath(parentObject, ["batch", "displayName"], fromDisplayName);
    }
    return toObject;
  }
  function createEmbeddingsBatchJobParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromSrc = getValueByPath(fromObject, ["src"]);
    if (fromSrc != null) {
      setValueByPath(toObject, ["batch", "inputConfig"], embeddingsBatchJobSourceToMldev(apiClient, fromSrc));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      createEmbeddingsBatchJobConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function deleteBatchJobParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tBatchJobName(apiClient, fromName));
    }
    return toObject;
  }
  function deleteBatchJobParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tBatchJobName(apiClient, fromName));
    }
    return toObject;
  }
  function deleteResourceJobFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDone = getValueByPath(fromObject, ["done"]);
    if (fromDone != null) {
      setValueByPath(toObject, ["done"], fromDone);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], jobErrorFromMldev(fromError));
    }
    return toObject;
  }
  function deleteResourceJobFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDone = getValueByPath(fromObject, ["done"]);
    if (fromDone != null) {
      setValueByPath(toObject, ["done"], fromDone);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], jobErrorFromVertex(fromError));
    }
    return toObject;
  }
  function dynamicRetrievalConfigToMldev$4(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromDynamicThreshold = getValueByPath(fromObject, [
      "dynamicThreshold"
    ]);
    if (fromDynamicThreshold != null) {
      setValueByPath(toObject, ["dynamicThreshold"], fromDynamicThreshold);
    }
    return toObject;
  }
  function embedContentBatchToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      setValueByPath(toObject, ["requests[]", "request", "content"], tContentsForEmbed(apiClient, fromContents));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      setValueByPath(toObject, ["config"], embedContentConfigToMldev$1(fromConfig, toObject));
    }
    return toObject;
  }
  function embedContentConfigToMldev$1(fromObject, parentObject) {
    const toObject = {};
    const fromTaskType = getValueByPath(fromObject, ["taskType"]);
    if (parentObject !== void 0 && fromTaskType != null) {
      setValueByPath(parentObject, ["requests[]", "taskType"], fromTaskType);
    }
    const fromTitle = getValueByPath(fromObject, ["title"]);
    if (parentObject !== void 0 && fromTitle != null) {
      setValueByPath(parentObject, ["requests[]", "title"], fromTitle);
    }
    const fromOutputDimensionality = getValueByPath(fromObject, [
      "outputDimensionality"
    ]);
    if (parentObject !== void 0 && fromOutputDimensionality != null) {
      setValueByPath(parentObject, ["requests[]", "outputDimensionality"], fromOutputDimensionality);
    }
    if (getValueByPath(fromObject, ["mimeType"]) !== void 0) {
      throw new Error("mimeType parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["autoTruncate"]) !== void 0) {
      throw new Error("autoTruncate parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function embeddingsBatchJobSourceToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromFileName = getValueByPath(fromObject, ["fileName"]);
    if (fromFileName != null) {
      setValueByPath(toObject, ["file_name"], fromFileName);
    }
    const fromInlinedRequests = getValueByPath(fromObject, [
      "inlinedRequests"
    ]);
    if (fromInlinedRequests != null) {
      setValueByPath(toObject, ["requests"], embedContentBatchToMldev(apiClient, fromInlinedRequests));
    }
    return toObject;
  }
  function fileDataFromMldev$2(fromObject) {
    const toObject = {};
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function fileDataToMldev$4(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function functionCallFromMldev$2(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallToMldev$4(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallingConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromAllowedFunctionNames = getValueByPath(fromObject, [
      "allowedFunctionNames"
    ]);
    if (fromAllowedFunctionNames != null) {
      setValueByPath(toObject, ["allowedFunctionNames"], fromAllowedFunctionNames);
    }
    return toObject;
  }
  function functionDeclarationToMldev$4(fromObject) {
    const toObject = {};
    const fromBehavior = getValueByPath(fromObject, ["behavior"]);
    if (fromBehavior != null) {
      setValueByPath(toObject, ["behavior"], fromBehavior);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromParameters = getValueByPath(fromObject, ["parameters"]);
    if (fromParameters != null) {
      setValueByPath(toObject, ["parameters"], fromParameters);
    }
    const fromParametersJsonSchema = getValueByPath(fromObject, [
      "parametersJsonSchema"
    ]);
    if (fromParametersJsonSchema != null) {
      setValueByPath(toObject, ["parametersJsonSchema"], fromParametersJsonSchema);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], fromResponse);
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    return toObject;
  }
  function generateContentConfigToMldev$1(apiClient, fromObject, parentObject) {
    const toObject = {};
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["systemInstruction"], contentToMldev$4(tContent(fromSystemInstruction)));
    }
    const fromTemperature = getValueByPath(fromObject, ["temperature"]);
    if (fromTemperature != null) {
      setValueByPath(toObject, ["temperature"], fromTemperature);
    }
    const fromTopP = getValueByPath(fromObject, ["topP"]);
    if (fromTopP != null) {
      setValueByPath(toObject, ["topP"], fromTopP);
    }
    const fromTopK = getValueByPath(fromObject, ["topK"]);
    if (fromTopK != null) {
      setValueByPath(toObject, ["topK"], fromTopK);
    }
    const fromCandidateCount = getValueByPath(fromObject, [
      "candidateCount"
    ]);
    if (fromCandidateCount != null) {
      setValueByPath(toObject, ["candidateCount"], fromCandidateCount);
    }
    const fromMaxOutputTokens = getValueByPath(fromObject, [
      "maxOutputTokens"
    ]);
    if (fromMaxOutputTokens != null) {
      setValueByPath(toObject, ["maxOutputTokens"], fromMaxOutputTokens);
    }
    const fromStopSequences = getValueByPath(fromObject, [
      "stopSequences"
    ]);
    if (fromStopSequences != null) {
      setValueByPath(toObject, ["stopSequences"], fromStopSequences);
    }
    const fromResponseLogprobs = getValueByPath(fromObject, [
      "responseLogprobs"
    ]);
    if (fromResponseLogprobs != null) {
      setValueByPath(toObject, ["responseLogprobs"], fromResponseLogprobs);
    }
    const fromLogprobs = getValueByPath(fromObject, ["logprobs"]);
    if (fromLogprobs != null) {
      setValueByPath(toObject, ["logprobs"], fromLogprobs);
    }
    const fromPresencePenalty = getValueByPath(fromObject, [
      "presencePenalty"
    ]);
    if (fromPresencePenalty != null) {
      setValueByPath(toObject, ["presencePenalty"], fromPresencePenalty);
    }
    const fromFrequencyPenalty = getValueByPath(fromObject, [
      "frequencyPenalty"
    ]);
    if (fromFrequencyPenalty != null) {
      setValueByPath(toObject, ["frequencyPenalty"], fromFrequencyPenalty);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (fromSeed != null) {
      setValueByPath(toObject, ["seed"], fromSeed);
    }
    const fromResponseMimeType = getValueByPath(fromObject, [
      "responseMimeType"
    ]);
    if (fromResponseMimeType != null) {
      setValueByPath(toObject, ["responseMimeType"], fromResponseMimeType);
    }
    const fromResponseSchema = getValueByPath(fromObject, [
      "responseSchema"
    ]);
    if (fromResponseSchema != null) {
      setValueByPath(toObject, ["responseSchema"], schemaToMldev$1(tSchema(fromResponseSchema)));
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    if (getValueByPath(fromObject, ["routingConfig"]) !== void 0) {
      throw new Error("routingConfig parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["modelSelectionConfig"]) !== void 0) {
      throw new Error("modelSelectionConfig parameter is not supported in Gemini API.");
    }
    const fromSafetySettings = getValueByPath(fromObject, [
      "safetySettings"
    ]);
    if (parentObject !== void 0 && fromSafetySettings != null) {
      let transformedList = fromSafetySettings;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return safetySettingToMldev$1(item);
        });
      }
      setValueByPath(parentObject, ["safetySettings"], transformedList);
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = tTools(fromTools);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToMldev$4(tTool(item));
        });
      }
      setValueByPath(parentObject, ["tools"], transformedList);
    }
    const fromToolConfig = getValueByPath(fromObject, ["toolConfig"]);
    if (parentObject !== void 0 && fromToolConfig != null) {
      setValueByPath(parentObject, ["toolConfig"], toolConfigToMldev$2(fromToolConfig));
    }
    if (getValueByPath(fromObject, ["labels"]) !== void 0) {
      throw new Error("labels parameter is not supported in Gemini API.");
    }
    const fromCachedContent = getValueByPath(fromObject, [
      "cachedContent"
    ]);
    if (parentObject !== void 0 && fromCachedContent != null) {
      setValueByPath(parentObject, ["cachedContent"], tCachedContentName(apiClient, fromCachedContent));
    }
    const fromResponseModalities = getValueByPath(fromObject, [
      "responseModalities"
    ]);
    if (fromResponseModalities != null) {
      setValueByPath(toObject, ["responseModalities"], fromResponseModalities);
    }
    const fromMediaResolution = getValueByPath(fromObject, [
      "mediaResolution"
    ]);
    if (fromMediaResolution != null) {
      setValueByPath(toObject, ["mediaResolution"], fromMediaResolution);
    }
    const fromSpeechConfig = getValueByPath(fromObject, ["speechConfig"]);
    if (fromSpeechConfig != null) {
      setValueByPath(toObject, ["speechConfig"], speechConfigToMldev$3(tSpeechConfig(fromSpeechConfig)));
    }
    if (getValueByPath(fromObject, ["audioTimestamp"]) !== void 0) {
      throw new Error("audioTimestamp parameter is not supported in Gemini API.");
    }
    const fromThinkingConfig = getValueByPath(fromObject, [
      "thinkingConfig"
    ]);
    if (fromThinkingConfig != null) {
      setValueByPath(toObject, ["thinkingConfig"], thinkingConfigToMldev$1(fromThinkingConfig));
    }
    return toObject;
  }
  function generateContentResponseFromMldev$1(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromCandidates = getValueByPath(fromObject, ["candidates"]);
    if (fromCandidates != null) {
      let transformedList = fromCandidates;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return candidateFromMldev$1(item);
        });
      }
      setValueByPath(toObject, ["candidates"], transformedList);
    }
    const fromModelVersion = getValueByPath(fromObject, ["modelVersion"]);
    if (fromModelVersion != null) {
      setValueByPath(toObject, ["modelVersion"], fromModelVersion);
    }
    const fromPromptFeedback = getValueByPath(fromObject, [
      "promptFeedback"
    ]);
    if (fromPromptFeedback != null) {
      setValueByPath(toObject, ["promptFeedback"], fromPromptFeedback);
    }
    const fromResponseId = getValueByPath(fromObject, ["responseId"]);
    if (fromResponseId != null) {
      setValueByPath(toObject, ["responseId"], fromResponseId);
    }
    const fromUsageMetadata = getValueByPath(fromObject, [
      "usageMetadata"
    ]);
    if (fromUsageMetadata != null) {
      setValueByPath(toObject, ["usageMetadata"], fromUsageMetadata);
    }
    return toObject;
  }
  function getBatchJobParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tBatchJobName(apiClient, fromName));
    }
    return toObject;
  }
  function getBatchJobParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tBatchJobName(apiClient, fromName));
    }
    return toObject;
  }
  function googleSearchRetrievalToMldev$4(fromObject) {
    const toObject = {};
    const fromDynamicRetrievalConfig = getValueByPath(fromObject, [
      "dynamicRetrievalConfig"
    ]);
    if (fromDynamicRetrievalConfig != null) {
      setValueByPath(toObject, ["dynamicRetrievalConfig"], dynamicRetrievalConfigToMldev$4(fromDynamicRetrievalConfig));
    }
    return toObject;
  }
  function googleSearchToMldev$4(fromObject) {
    const toObject = {};
    const fromTimeRangeFilter = getValueByPath(fromObject, [
      "timeRangeFilter"
    ]);
    if (fromTimeRangeFilter != null) {
      setValueByPath(toObject, ["timeRangeFilter"], intervalToMldev$4(fromTimeRangeFilter));
    }
    if (getValueByPath(fromObject, ["excludeDomains"]) !== void 0) {
      throw new Error("excludeDomains parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function inlinedEmbedContentResponseFromMldev(fromObject) {
    const toObject = {};
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], singleEmbedContentResponseFromMldev(fromResponse));
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], jobErrorFromMldev(fromError));
    }
    return toObject;
  }
  function inlinedRequestToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["request", "model"], tModel(apiClient, fromModel));
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      let transformedList = tContents(fromContents);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentToMldev$4(item);
        });
      }
      setValueByPath(toObject, ["request", "contents"], transformedList);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      setValueByPath(toObject, ["request", "generationConfig"], generateContentConfigToMldev$1(apiClient, fromConfig, toObject));
    }
    return toObject;
  }
  function inlinedResponseFromMldev(fromObject) {
    const toObject = {};
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], generateContentResponseFromMldev$1(fromResponse));
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], jobErrorFromMldev(fromError));
    }
    return toObject;
  }
  function intervalToMldev$4(fromObject) {
    const toObject = {};
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    return toObject;
  }
  function jobErrorFromMldev(fromObject) {
    const toObject = {};
    const fromDetails = getValueByPath(fromObject, ["details"]);
    if (fromDetails != null) {
      setValueByPath(toObject, ["details"], fromDetails);
    }
    const fromCode = getValueByPath(fromObject, ["code"]);
    if (fromCode != null) {
      setValueByPath(toObject, ["code"], fromCode);
    }
    const fromMessage = getValueByPath(fromObject, ["message"]);
    if (fromMessage != null) {
      setValueByPath(toObject, ["message"], fromMessage);
    }
    return toObject;
  }
  function jobErrorFromVertex(fromObject) {
    const toObject = {};
    const fromDetails = getValueByPath(fromObject, ["details"]);
    if (fromDetails != null) {
      setValueByPath(toObject, ["details"], fromDetails);
    }
    const fromCode = getValueByPath(fromObject, ["code"]);
    if (fromCode != null) {
      setValueByPath(toObject, ["code"], fromCode);
    }
    const fromMessage = getValueByPath(fromObject, ["message"]);
    if (fromMessage != null) {
      setValueByPath(toObject, ["message"], fromMessage);
    }
    return toObject;
  }
  function latLngToMldev$2(fromObject) {
    const toObject = {};
    const fromLatitude = getValueByPath(fromObject, ["latitude"]);
    if (fromLatitude != null) {
      setValueByPath(toObject, ["latitude"], fromLatitude);
    }
    const fromLongitude = getValueByPath(fromObject, ["longitude"]);
    if (fromLongitude != null) {
      setValueByPath(toObject, ["longitude"], fromLongitude);
    }
    return toObject;
  }
  function listBatchJobsConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    if (getValueByPath(fromObject, ["filter"]) !== void 0) {
      throw new Error("filter parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function listBatchJobsConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    const fromFilter = getValueByPath(fromObject, ["filter"]);
    if (parentObject !== void 0 && fromFilter != null) {
      setValueByPath(parentObject, ["_query", "filter"], fromFilter);
    }
    return toObject;
  }
  function listBatchJobsParametersToMldev(fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listBatchJobsConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function listBatchJobsParametersToVertex(fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listBatchJobsConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function listBatchJobsResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromBatchJobs = getValueByPath(fromObject, ["operations"]);
    if (fromBatchJobs != null) {
      let transformedList = fromBatchJobs;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return batchJobFromMldev(item);
        });
      }
      setValueByPath(toObject, ["batchJobs"], transformedList);
    }
    return toObject;
  }
  function listBatchJobsResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromBatchJobs = getValueByPath(fromObject, [
      "batchPredictionJobs"
    ]);
    if (fromBatchJobs != null) {
      let transformedList = fromBatchJobs;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return batchJobFromVertex(item);
        });
      }
      setValueByPath(toObject, ["batchJobs"], transformedList);
    }
    return toObject;
  }
  function multiSpeakerVoiceConfigToMldev$3(fromObject) {
    const toObject = {};
    const fromSpeakerVoiceConfigs = getValueByPath(fromObject, [
      "speakerVoiceConfigs"
    ]);
    if (fromSpeakerVoiceConfigs != null) {
      let transformedList = fromSpeakerVoiceConfigs;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return speakerVoiceConfigToMldev$3(item);
        });
      }
      setValueByPath(toObject, ["speakerVoiceConfigs"], transformedList);
    }
    return toObject;
  }
  function partFromMldev$2(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataFromMldev$2(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobFromMldev$2(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataFromMldev$2(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallFromMldev$2(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function partToMldev$4(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataToMldev$4(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobToMldev$4(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataToMldev$4(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallToMldev$4(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function prebuiltVoiceConfigToMldev$3(fromObject) {
    const toObject = {};
    const fromVoiceName = getValueByPath(fromObject, ["voiceName"]);
    if (fromVoiceName != null) {
      setValueByPath(toObject, ["voiceName"], fromVoiceName);
    }
    return toObject;
  }
  function retrievalConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromLatLng = getValueByPath(fromObject, ["latLng"]);
    if (fromLatLng != null) {
      setValueByPath(toObject, ["latLng"], latLngToMldev$2(fromLatLng));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function safetySettingToMldev$1(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["method"]) !== void 0) {
      throw new Error("method parameter is not supported in Gemini API.");
    }
    const fromCategory = getValueByPath(fromObject, ["category"]);
    if (fromCategory != null) {
      setValueByPath(toObject, ["category"], fromCategory);
    }
    const fromThreshold = getValueByPath(fromObject, ["threshold"]);
    if (fromThreshold != null) {
      setValueByPath(toObject, ["threshold"], fromThreshold);
    }
    return toObject;
  }
  function schemaToMldev$1(fromObject) {
    const toObject = {};
    const fromAnyOf = getValueByPath(fromObject, ["anyOf"]);
    if (fromAnyOf != null) {
      setValueByPath(toObject, ["anyOf"], fromAnyOf);
    }
    const fromDefault = getValueByPath(fromObject, ["default"]);
    if (fromDefault != null) {
      setValueByPath(toObject, ["default"], fromDefault);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromEnum = getValueByPath(fromObject, ["enum"]);
    if (fromEnum != null) {
      setValueByPath(toObject, ["enum"], fromEnum);
    }
    const fromExample = getValueByPath(fromObject, ["example"]);
    if (fromExample != null) {
      setValueByPath(toObject, ["example"], fromExample);
    }
    const fromFormat = getValueByPath(fromObject, ["format"]);
    if (fromFormat != null) {
      setValueByPath(toObject, ["format"], fromFormat);
    }
    const fromItems = getValueByPath(fromObject, ["items"]);
    if (fromItems != null) {
      setValueByPath(toObject, ["items"], fromItems);
    }
    const fromMaxItems = getValueByPath(fromObject, ["maxItems"]);
    if (fromMaxItems != null) {
      setValueByPath(toObject, ["maxItems"], fromMaxItems);
    }
    const fromMaxLength = getValueByPath(fromObject, ["maxLength"]);
    if (fromMaxLength != null) {
      setValueByPath(toObject, ["maxLength"], fromMaxLength);
    }
    const fromMaxProperties = getValueByPath(fromObject, [
      "maxProperties"
    ]);
    if (fromMaxProperties != null) {
      setValueByPath(toObject, ["maxProperties"], fromMaxProperties);
    }
    const fromMaximum = getValueByPath(fromObject, ["maximum"]);
    if (fromMaximum != null) {
      setValueByPath(toObject, ["maximum"], fromMaximum);
    }
    const fromMinItems = getValueByPath(fromObject, ["minItems"]);
    if (fromMinItems != null) {
      setValueByPath(toObject, ["minItems"], fromMinItems);
    }
    const fromMinLength = getValueByPath(fromObject, ["minLength"]);
    if (fromMinLength != null) {
      setValueByPath(toObject, ["minLength"], fromMinLength);
    }
    const fromMinProperties = getValueByPath(fromObject, [
      "minProperties"
    ]);
    if (fromMinProperties != null) {
      setValueByPath(toObject, ["minProperties"], fromMinProperties);
    }
    const fromMinimum = getValueByPath(fromObject, ["minimum"]);
    if (fromMinimum != null) {
      setValueByPath(toObject, ["minimum"], fromMinimum);
    }
    const fromNullable = getValueByPath(fromObject, ["nullable"]);
    if (fromNullable != null) {
      setValueByPath(toObject, ["nullable"], fromNullable);
    }
    const fromPattern = getValueByPath(fromObject, ["pattern"]);
    if (fromPattern != null) {
      setValueByPath(toObject, ["pattern"], fromPattern);
    }
    const fromProperties = getValueByPath(fromObject, ["properties"]);
    if (fromProperties != null) {
      setValueByPath(toObject, ["properties"], fromProperties);
    }
    const fromPropertyOrdering = getValueByPath(fromObject, [
      "propertyOrdering"
    ]);
    if (fromPropertyOrdering != null) {
      setValueByPath(toObject, ["propertyOrdering"], fromPropertyOrdering);
    }
    const fromRequired = getValueByPath(fromObject, ["required"]);
    if (fromRequired != null) {
      setValueByPath(toObject, ["required"], fromRequired);
    }
    const fromTitle = getValueByPath(fromObject, ["title"]);
    if (fromTitle != null) {
      setValueByPath(toObject, ["title"], fromTitle);
    }
    const fromType = getValueByPath(fromObject, ["type"]);
    if (fromType != null) {
      setValueByPath(toObject, ["type"], fromType);
    }
    return toObject;
  }
  function singleEmbedContentResponseFromMldev(fromObject) {
    const toObject = {};
    const fromEmbedding = getValueByPath(fromObject, ["embedding"]);
    if (fromEmbedding != null) {
      setValueByPath(toObject, ["embedding"], contentEmbeddingFromMldev$1(fromEmbedding));
    }
    const fromTokenCount = getValueByPath(fromObject, ["tokenCount"]);
    if (fromTokenCount != null) {
      setValueByPath(toObject, ["tokenCount"], fromTokenCount);
    }
    return toObject;
  }
  function speakerVoiceConfigToMldev$3(fromObject) {
    const toObject = {};
    const fromSpeaker = getValueByPath(fromObject, ["speaker"]);
    if (fromSpeaker != null) {
      setValueByPath(toObject, ["speaker"], fromSpeaker);
    }
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToMldev$3(fromVoiceConfig));
    }
    return toObject;
  }
  function speechConfigToMldev$3(fromObject) {
    const toObject = {};
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToMldev$3(fromVoiceConfig));
    }
    const fromMultiSpeakerVoiceConfig = getValueByPath(fromObject, [
      "multiSpeakerVoiceConfig"
    ]);
    if (fromMultiSpeakerVoiceConfig != null) {
      setValueByPath(toObject, ["multiSpeakerVoiceConfig"], multiSpeakerVoiceConfigToMldev$3(fromMultiSpeakerVoiceConfig));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function thinkingConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromIncludeThoughts = getValueByPath(fromObject, [
      "includeThoughts"
    ]);
    if (fromIncludeThoughts != null) {
      setValueByPath(toObject, ["includeThoughts"], fromIncludeThoughts);
    }
    const fromThinkingBudget = getValueByPath(fromObject, [
      "thinkingBudget"
    ]);
    if (fromThinkingBudget != null) {
      setValueByPath(toObject, ["thinkingBudget"], fromThinkingBudget);
    }
    return toObject;
  }
  function toolComputerUseToMldev$4(fromObject) {
    const toObject = {};
    const fromEnvironment = getValueByPath(fromObject, ["environment"]);
    if (fromEnvironment != null) {
      setValueByPath(toObject, ["environment"], fromEnvironment);
    }
    const fromExcludedPredefinedFunctions = getValueByPath(fromObject, [
      "excludedPredefinedFunctions"
    ]);
    if (fromExcludedPredefinedFunctions != null) {
      setValueByPath(toObject, ["excludedPredefinedFunctions"], fromExcludedPredefinedFunctions);
    }
    return toObject;
  }
  function toolConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromFunctionCallingConfig = getValueByPath(fromObject, [
      "functionCallingConfig"
    ]);
    if (fromFunctionCallingConfig != null) {
      setValueByPath(toObject, ["functionCallingConfig"], functionCallingConfigToMldev$2(fromFunctionCallingConfig));
    }
    const fromRetrievalConfig = getValueByPath(fromObject, [
      "retrievalConfig"
    ]);
    if (fromRetrievalConfig != null) {
      setValueByPath(toObject, ["retrievalConfig"], retrievalConfigToMldev$2(fromRetrievalConfig));
    }
    return toObject;
  }
  function toolToMldev$4(fromObject) {
    const toObject = {};
    const fromFunctionDeclarations = getValueByPath(fromObject, [
      "functionDeclarations"
    ]);
    if (fromFunctionDeclarations != null) {
      let transformedList = fromFunctionDeclarations;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionDeclarationToMldev$4(item);
        });
      }
      setValueByPath(toObject, ["functionDeclarations"], transformedList);
    }
    if (getValueByPath(fromObject, ["retrieval"]) !== void 0) {
      throw new Error("retrieval parameter is not supported in Gemini API.");
    }
    const fromGoogleSearch = getValueByPath(fromObject, ["googleSearch"]);
    if (fromGoogleSearch != null) {
      setValueByPath(toObject, ["googleSearch"], googleSearchToMldev$4(fromGoogleSearch));
    }
    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [
      "googleSearchRetrieval"
    ]);
    if (fromGoogleSearchRetrieval != null) {
      setValueByPath(toObject, ["googleSearchRetrieval"], googleSearchRetrievalToMldev$4(fromGoogleSearchRetrieval));
    }
    if (getValueByPath(fromObject, ["enterpriseWebSearch"]) !== void 0) {
      throw new Error("enterpriseWebSearch parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["googleMaps"]) !== void 0) {
      throw new Error("googleMaps parameter is not supported in Gemini API.");
    }
    const fromUrlContext = getValueByPath(fromObject, ["urlContext"]);
    if (fromUrlContext != null) {
      setValueByPath(toObject, ["urlContext"], urlContextToMldev$4());
    }
    const fromComputerUse = getValueByPath(fromObject, ["computerUse"]);
    if (fromComputerUse != null) {
      setValueByPath(toObject, ["computerUse"], toolComputerUseToMldev$4(fromComputerUse));
    }
    const fromCodeExecution = getValueByPath(fromObject, [
      "codeExecution"
    ]);
    if (fromCodeExecution != null) {
      setValueByPath(toObject, ["codeExecution"], fromCodeExecution);
    }
    return toObject;
  }
  function urlContextMetadataFromMldev$2(fromObject) {
    const toObject = {};
    const fromUrlMetadata = getValueByPath(fromObject, ["urlMetadata"]);
    if (fromUrlMetadata != null) {
      let transformedList = fromUrlMetadata;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return urlMetadataFromMldev$2(item);
        });
      }
      setValueByPath(toObject, ["urlMetadata"], transformedList);
    }
    return toObject;
  }
  function urlContextToMldev$4() {
    const toObject = {};
    return toObject;
  }
  function urlMetadataFromMldev$2(fromObject) {
    const toObject = {};
    const fromRetrievedUrl = getValueByPath(fromObject, ["retrievedUrl"]);
    if (fromRetrievedUrl != null) {
      setValueByPath(toObject, ["retrievedUrl"], fromRetrievedUrl);
    }
    const fromUrlRetrievalStatus = getValueByPath(fromObject, [
      "urlRetrievalStatus"
    ]);
    if (fromUrlRetrievalStatus != null) {
      setValueByPath(toObject, ["urlRetrievalStatus"], fromUrlRetrievalStatus);
    }
    return toObject;
  }
  function videoMetadataFromMldev$2(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoMetadataToMldev$4(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function voiceConfigToMldev$3(fromObject) {
    const toObject = {};
    const fromPrebuiltVoiceConfig = getValueByPath(fromObject, [
      "prebuiltVoiceConfig"
    ]);
    if (fromPrebuiltVoiceConfig != null) {
      setValueByPath(toObject, ["prebuiltVoiceConfig"], prebuiltVoiceConfigToMldev$3(fromPrebuiltVoiceConfig));
    }
    return toObject;
  }
  var PagedItem;
  (function(PagedItem2) {
    PagedItem2["PAGED_ITEM_BATCH_JOBS"] = "batchJobs";
    PagedItem2["PAGED_ITEM_MODELS"] = "models";
    PagedItem2["PAGED_ITEM_TUNING_JOBS"] = "tuningJobs";
    PagedItem2["PAGED_ITEM_FILES"] = "files";
    PagedItem2["PAGED_ITEM_CACHED_CONTENTS"] = "cachedContents";
  })(PagedItem || (PagedItem = {}));
  var Pager = class {
    constructor(name, request, response, params) {
      this.pageInternal = [];
      this.paramsInternal = {};
      this.requestInternal = request;
      this.init(name, response, params);
    }
    init(name, response, params) {
      var _a, _b;
      this.nameInternal = name;
      this.pageInternal = response[this.nameInternal] || [];
      this.sdkHttpResponseInternal = response === null || response === void 0 ? void 0 : response.sdkHttpResponse;
      this.idxInternal = 0;
      let requestParams = { config: {} };
      if (!params || Object.keys(params).length === 0) {
        requestParams = { config: {} };
      } else if (typeof params === "object") {
        requestParams = Object.assign({}, params);
      } else {
        requestParams = params;
      }
      if (requestParams["config"]) {
        requestParams["config"]["pageToken"] = response["nextPageToken"];
      }
      this.paramsInternal = requestParams;
      this.pageInternalSize = (_b = (_a = requestParams["config"]) === null || _a === void 0 ? void 0 : _a["pageSize"]) !== null && _b !== void 0 ? _b : this.pageInternal.length;
    }
    initNextPage(response) {
      this.init(this.nameInternal, response, this.paramsInternal);
    }
    /**
     * Returns the current page, which is a list of items.
     *
     * @remarks
     * The first page is retrieved when the pager is created. The returned list of
     * items could be a subset of the entire list.
     */
    get page() {
      return this.pageInternal;
    }
    /**
     * Returns the type of paged item (for example, ``batch_jobs``).
     */
    get name() {
      return this.nameInternal;
    }
    /**
     * Returns the length of the page fetched each time by this pager.
     *
     * @remarks
     * The number of items in the page is less than or equal to the page length.
     */
    get pageSize() {
      return this.pageInternalSize;
    }
    /**
     * Returns the headers of the API response.
     */
    get sdkHttpResponse() {
      return this.sdkHttpResponseInternal;
    }
    /**
     * Returns the parameters when making the API request for the next page.
     *
     * @remarks
     * Parameters contain a set of optional configs that can be
     * used to customize the API request. For example, the `pageToken` parameter
     * contains the token to request the next page.
     */
    get params() {
      return this.paramsInternal;
    }
    /**
     * Returns the total number of items in the current page.
     */
    get pageLength() {
      return this.pageInternal.length;
    }
    /**
     * Returns the item at the given index.
     */
    getItem(index) {
      return this.pageInternal[index];
    }
    /**
     * Returns an async iterator that support iterating through all items
     * retrieved from the API.
     *
     * @remarks
     * The iterator will automatically fetch the next page if there are more items
     * to fetch from the API.
     *
     * @example
     *
     * ```ts
     * const pager = await ai.files.list({config: {pageSize: 10}});
     * for await (const file of pager) {
     *   console.log(file.name);
     * }
     * ```
     */
    [Symbol.asyncIterator]() {
      return {
        next: async () => {
          if (this.idxInternal >= this.pageLength) {
            if (this.hasNextPage()) {
              await this.nextPage();
            } else {
              return { value: void 0, done: true };
            }
          }
          const item = this.getItem(this.idxInternal);
          this.idxInternal += 1;
          return { value: item, done: false };
        },
        return: async () => {
          return { value: void 0, done: true };
        }
      };
    }
    /**
     * Fetches the next page of items. This makes a new API request.
     *
     * @throws {Error} If there are no more pages to fetch.
     *
     * @example
     *
     * ```ts
     * const pager = await ai.files.list({config: {pageSize: 10}});
     * let page = pager.page;
     * while (true) {
     *   for (const file of page) {
     *     console.log(file.name);
     *   }
     *   if (!pager.hasNextPage()) {
     *     break;
     *   }
     *   page = await pager.nextPage();
     * }
     * ```
     */
    async nextPage() {
      if (!this.hasNextPage()) {
        throw new Error("No more pages to fetch.");
      }
      const response = await this.requestInternal(this.params);
      this.initNextPage(response);
      return this.page;
    }
    /**
     * Returns true if there are more pages to fetch from the API.
     */
    hasNextPage() {
      var _a;
      if (((_a = this.params["config"]) === null || _a === void 0 ? void 0 : _a["pageToken"]) !== void 0) {
        return true;
      }
      return false;
    }
  };
  var Batches = class extends BaseModule {
    constructor(apiClient) {
      super();
      this.apiClient = apiClient;
      this.create = async (params) => {
        var _a, _b;
        if (this.apiClient.isVertexAI()) {
          params.config = this.formatDestination(params.src, params.config);
          return this.createInternal(params);
        }
        const src = params.src;
        const is_inlined = Array.isArray(params.src) || src.inlinedRequests !== void 0;
        if (!is_inlined) {
          return this.createInternal(params);
        }
        const result = this.createInlinedGenerateContentRequest(params);
        const path = result.path;
        const requestBody = result.body;
        const queryParams = createBatchJobParametersToMldev(this.apiClient, params)["_query"] || {};
        const response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(requestBody),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = batchJobFromMldev(apiResponse);
          return resp;
        });
      };
      this.createEmbeddings = async (params) => {
        var _a, _b;
        console.warn("batches.createEmbeddings() is experimental and may change without notice.");
        if (this.apiClient.isVertexAI()) {
          throw new Error("Vertex AI does not support batches.createEmbeddings.");
        }
        const src = params.src;
        const is_inlined = src.inlinedRequests !== void 0;
        if (!is_inlined) {
          return this.createEmbeddingsInternal(params);
        }
        const result = this.createInlinedEmbedContentRequest(params);
        const path = result.path;
        const requestBody = result.body;
        const queryParams = createEmbeddingsBatchJobParametersToMldev(this.apiClient, params)["_query"] || {};
        const response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(requestBody),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = batchJobFromMldev(apiResponse);
          return resp;
        });
      };
      this.list = async (params = {}) => {
        return new Pager(PagedItem.PAGED_ITEM_BATCH_JOBS, (x) => this.listInternal(x), await this.listInternal(params), params);
      };
    }
    // Helper function to handle inlined generate content requests
    createInlinedGenerateContentRequest(params) {
      const body = createBatchJobParametersToMldev(
        this.apiClient,
        // Use instance apiClient
        params
      );
      const urlParams = body["_url"];
      const path = formatMap("{model}:batchGenerateContent", urlParams);
      const batch = body["batch"];
      const inputConfig = batch["inputConfig"];
      const requestsWrapper = inputConfig["requests"];
      const requests = requestsWrapper["requests"];
      const newRequests = [];
      for (const request of requests) {
        const requestDict = Object.assign({}, request);
        if (requestDict["systemInstruction"]) {
          const systemInstructionValue = requestDict["systemInstruction"];
          delete requestDict["systemInstruction"];
          const requestContent = requestDict["request"];
          requestContent["systemInstruction"] = systemInstructionValue;
          requestDict["request"] = requestContent;
        }
        newRequests.push(requestDict);
      }
      requestsWrapper["requests"] = newRequests;
      delete body["config"];
      delete body["_url"];
      delete body["_query"];
      return { path, body };
    }
    // Helper function to handle inlined embedding requests
    createInlinedEmbedContentRequest(params) {
      const body = createEmbeddingsBatchJobParametersToMldev(
        this.apiClient,
        // Use instance apiClient
        params
      );
      const urlParams = body["_url"];
      const path = formatMap("{model}:asyncBatchEmbedContent", urlParams);
      const batch = body["batch"];
      const inputConfig = batch["inputConfig"];
      const requestsWrapper = inputConfig["requests"];
      const requests = requestsWrapper["requests"];
      const newRequests = [];
      delete requestsWrapper["config"];
      for (const request of requests) {
        const requestDict = Object.assign({}, request);
        const innerRequest = requestDict["request"];
        for (const key in requestDict) {
          if (key !== "request") {
            innerRequest[key] = requestDict[key];
            delete requestDict[key];
          }
        }
        newRequests.push(requestDict);
      }
      requestsWrapper["requests"] = newRequests;
      delete body["config"];
      delete body["_url"];
      delete body["_query"];
      return { path, body };
    }
    // Helper function to get the first GCS URI
    getGcsUri(src) {
      if (typeof src === "string") {
        return src.startsWith("gs://") ? src : void 0;
      }
      if (!Array.isArray(src) && src.gcsUri && src.gcsUri.length > 0) {
        return src.gcsUri[0];
      }
      return void 0;
    }
    // Helper function to get the BigQuery URI
    getBigqueryUri(src) {
      if (typeof src === "string") {
        return src.startsWith("bq://") ? src : void 0;
      }
      if (!Array.isArray(src)) {
        return src.bigqueryUri;
      }
      return void 0;
    }
    // Function to format the destination configuration for Vertex AI
    formatDestination(src, config) {
      const newConfig = config ? Object.assign({}, config) : {};
      const timestampStr = Date.now().toString();
      if (!newConfig.displayName) {
        newConfig.displayName = `genaiBatchJob_${timestampStr}`;
      }
      if (newConfig.dest === void 0) {
        const gcsUri = this.getGcsUri(src);
        const bigqueryUri = this.getBigqueryUri(src);
        if (gcsUri) {
          if (gcsUri.endsWith(".jsonl")) {
            newConfig.dest = `${gcsUri.slice(0, -6)}/dest`;
          } else {
            newConfig.dest = `${gcsUri}_dest_${timestampStr}`;
          }
        } else if (bigqueryUri) {
          newConfig.dest = `${bigqueryUri}_dest_${timestampStr}`;
        } else {
          throw new Error("Unsupported source for Vertex AI: No GCS or BigQuery URI found.");
        }
      }
      return newConfig;
    }
    /**
     * Internal method to create batch job.
     *
     * @param params - The parameters for create batch job request.
     * @return The created batch job.
     *
     */
    async createInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = createBatchJobParametersToVertex(this.apiClient, params);
        path = formatMap("batchPredictionJobs", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = batchJobFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = createBatchJobParametersToMldev(this.apiClient, params);
        path = formatMap("{model}:batchGenerateContent", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = batchJobFromMldev(apiResponse);
          return resp;
        });
      }
    }
    /**
     * Internal method to create batch job.
     *
     * @param params - The parameters for create batch job request.
     * @return The created batch job.
     *
     */
    async createEmbeddingsInternal(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        throw new Error("This method is only supported by the Gemini Developer API.");
      } else {
        const body = createEmbeddingsBatchJobParametersToMldev(this.apiClient, params);
        path = formatMap("{model}:asyncBatchEmbedContent", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = batchJobFromMldev(apiResponse);
          return resp;
        });
      }
    }
    /**
     * Gets batch job configurations.
     *
     * @param params - The parameters for the get request.
     * @return The batch job.
     *
     * @example
     * ```ts
     * await ai.batches.get({name: '...'}); // The server-generated resource name.
     * ```
     */
    async get(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = getBatchJobParametersToVertex(this.apiClient, params);
        path = formatMap("batchPredictionJobs/{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = batchJobFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = getBatchJobParametersToMldev(this.apiClient, params);
        path = formatMap("batches/{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = batchJobFromMldev(apiResponse);
          return resp;
        });
      }
    }
    /**
     * Cancels a batch job.
     *
     * @param params - The parameters for the cancel request.
     * @return The empty response returned by the API.
     *
     * @example
     * ```ts
     * await ai.batches.cancel({name: '...'}); // The server-generated resource name.
     * ```
     */
    async cancel(params) {
      var _a, _b, _c, _d;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = cancelBatchJobParametersToVertex(this.apiClient, params);
        path = formatMap("batchPredictionJobs/{name}:cancel", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        await this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        });
      } else {
        const body = cancelBatchJobParametersToMldev(this.apiClient, params);
        path = formatMap("batches/{name}:cancel", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        await this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        });
      }
    }
    async listInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = listBatchJobsParametersToVertex(params);
        path = formatMap("batchPredictionJobs", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listBatchJobsResponseFromVertex(apiResponse);
          const typedResp = new ListBatchJobsResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = listBatchJobsParametersToMldev(params);
        path = formatMap("batches", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listBatchJobsResponseFromMldev(apiResponse);
          const typedResp = new ListBatchJobsResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Deletes a batch job.
     *
     * @param params - The parameters for the delete request.
     * @return The empty response returned by the API.
     *
     * @example
     * ```ts
     * await ai.batches.delete({name: '...'}); // The server-generated resource name.
     * ```
     */
    async delete(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = deleteBatchJobParametersToVertex(this.apiClient, params);
        path = formatMap("batchPredictionJobs/{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "DELETE",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = deleteResourceJobFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = deleteBatchJobParametersToMldev(this.apiClient, params);
        path = formatMap("batches/{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "DELETE",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = deleteResourceJobFromMldev(apiResponse);
          return resp;
        });
      }
    }
  };
  function apiKeyConfigToVertex$2(fromObject) {
    const toObject = {};
    const fromApiKeyString = getValueByPath(fromObject, ["apiKeyString"]);
    if (fromApiKeyString != null) {
      setValueByPath(toObject, ["apiKeyString"], fromApiKeyString);
    }
    return toObject;
  }
  function authConfigToVertex$2(fromObject) {
    const toObject = {};
    const fromApiKeyConfig = getValueByPath(fromObject, ["apiKeyConfig"]);
    if (fromApiKeyConfig != null) {
      setValueByPath(toObject, ["apiKeyConfig"], apiKeyConfigToVertex$2(fromApiKeyConfig));
    }
    const fromAuthType = getValueByPath(fromObject, ["authType"]);
    if (fromAuthType != null) {
      setValueByPath(toObject, ["authType"], fromAuthType);
    }
    const fromGoogleServiceAccountConfig = getValueByPath(fromObject, [
      "googleServiceAccountConfig"
    ]);
    if (fromGoogleServiceAccountConfig != null) {
      setValueByPath(toObject, ["googleServiceAccountConfig"], fromGoogleServiceAccountConfig);
    }
    const fromHttpBasicAuthConfig = getValueByPath(fromObject, [
      "httpBasicAuthConfig"
    ]);
    if (fromHttpBasicAuthConfig != null) {
      setValueByPath(toObject, ["httpBasicAuthConfig"], fromHttpBasicAuthConfig);
    }
    const fromOauthConfig = getValueByPath(fromObject, ["oauthConfig"]);
    if (fromOauthConfig != null) {
      setValueByPath(toObject, ["oauthConfig"], fromOauthConfig);
    }
    const fromOidcConfig = getValueByPath(fromObject, ["oidcConfig"]);
    if (fromOidcConfig != null) {
      setValueByPath(toObject, ["oidcConfig"], fromOidcConfig);
    }
    return toObject;
  }
  function blobToMldev$3(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function blobToVertex$2(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function cachedContentFromMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], fromModel);
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    const fromExpireTime = getValueByPath(fromObject, ["expireTime"]);
    if (fromExpireTime != null) {
      setValueByPath(toObject, ["expireTime"], fromExpireTime);
    }
    const fromUsageMetadata = getValueByPath(fromObject, [
      "usageMetadata"
    ]);
    if (fromUsageMetadata != null) {
      setValueByPath(toObject, ["usageMetadata"], fromUsageMetadata);
    }
    return toObject;
  }
  function cachedContentFromVertex(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], fromModel);
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    const fromExpireTime = getValueByPath(fromObject, ["expireTime"]);
    if (fromExpireTime != null) {
      setValueByPath(toObject, ["expireTime"], fromExpireTime);
    }
    const fromUsageMetadata = getValueByPath(fromObject, [
      "usageMetadata"
    ]);
    if (fromUsageMetadata != null) {
      setValueByPath(toObject, ["usageMetadata"], fromUsageMetadata);
    }
    return toObject;
  }
  function contentToMldev$3(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partToMldev$3(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contentToVertex$2(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partToVertex$2(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function createCachedContentConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromTtl = getValueByPath(fromObject, ["ttl"]);
    if (parentObject !== void 0 && fromTtl != null) {
      setValueByPath(parentObject, ["ttl"], fromTtl);
    }
    const fromExpireTime = getValueByPath(fromObject, ["expireTime"]);
    if (parentObject !== void 0 && fromExpireTime != null) {
      setValueByPath(parentObject, ["expireTime"], fromExpireTime);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (parentObject !== void 0 && fromDisplayName != null) {
      setValueByPath(parentObject, ["displayName"], fromDisplayName);
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (parentObject !== void 0 && fromContents != null) {
      let transformedList = tContents(fromContents);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentToMldev$3(item);
        });
      }
      setValueByPath(parentObject, ["contents"], transformedList);
    }
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["systemInstruction"], contentToMldev$3(tContent(fromSystemInstruction)));
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = fromTools;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToMldev$3(item);
        });
      }
      setValueByPath(parentObject, ["tools"], transformedList);
    }
    const fromToolConfig = getValueByPath(fromObject, ["toolConfig"]);
    if (parentObject !== void 0 && fromToolConfig != null) {
      setValueByPath(parentObject, ["toolConfig"], toolConfigToMldev$1(fromToolConfig));
    }
    if (getValueByPath(fromObject, ["kmsKeyName"]) !== void 0) {
      throw new Error("kmsKeyName parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function createCachedContentConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromTtl = getValueByPath(fromObject, ["ttl"]);
    if (parentObject !== void 0 && fromTtl != null) {
      setValueByPath(parentObject, ["ttl"], fromTtl);
    }
    const fromExpireTime = getValueByPath(fromObject, ["expireTime"]);
    if (parentObject !== void 0 && fromExpireTime != null) {
      setValueByPath(parentObject, ["expireTime"], fromExpireTime);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (parentObject !== void 0 && fromDisplayName != null) {
      setValueByPath(parentObject, ["displayName"], fromDisplayName);
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (parentObject !== void 0 && fromContents != null) {
      let transformedList = tContents(fromContents);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentToVertex$2(item);
        });
      }
      setValueByPath(parentObject, ["contents"], transformedList);
    }
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["systemInstruction"], contentToVertex$2(tContent(fromSystemInstruction)));
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = fromTools;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToVertex$2(item);
        });
      }
      setValueByPath(parentObject, ["tools"], transformedList);
    }
    const fromToolConfig = getValueByPath(fromObject, ["toolConfig"]);
    if (parentObject !== void 0 && fromToolConfig != null) {
      setValueByPath(parentObject, ["toolConfig"], toolConfigToVertex$1(fromToolConfig));
    }
    const fromKmsKeyName = getValueByPath(fromObject, ["kmsKeyName"]);
    if (parentObject !== void 0 && fromKmsKeyName != null) {
      setValueByPath(parentObject, ["encryption_spec", "kmsKeyName"], fromKmsKeyName);
    }
    return toObject;
  }
  function createCachedContentParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], tCachesModel(apiClient, fromModel));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      createCachedContentConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function createCachedContentParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], tCachesModel(apiClient, fromModel));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      createCachedContentConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function deleteCachedContentParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tCachedContentName(apiClient, fromName));
    }
    return toObject;
  }
  function deleteCachedContentParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tCachedContentName(apiClient, fromName));
    }
    return toObject;
  }
  function deleteCachedContentResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    return toObject;
  }
  function deleteCachedContentResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    return toObject;
  }
  function dynamicRetrievalConfigToMldev$3(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromDynamicThreshold = getValueByPath(fromObject, [
      "dynamicThreshold"
    ]);
    if (fromDynamicThreshold != null) {
      setValueByPath(toObject, ["dynamicThreshold"], fromDynamicThreshold);
    }
    return toObject;
  }
  function dynamicRetrievalConfigToVertex$2(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromDynamicThreshold = getValueByPath(fromObject, [
      "dynamicThreshold"
    ]);
    if (fromDynamicThreshold != null) {
      setValueByPath(toObject, ["dynamicThreshold"], fromDynamicThreshold);
    }
    return toObject;
  }
  function enterpriseWebSearchToVertex$2(fromObject) {
    const toObject = {};
    const fromExcludeDomains = getValueByPath(fromObject, [
      "excludeDomains"
    ]);
    if (fromExcludeDomains != null) {
      setValueByPath(toObject, ["excludeDomains"], fromExcludeDomains);
    }
    return toObject;
  }
  function fileDataToMldev$3(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function fileDataToVertex$2(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function functionCallToMldev$3(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallToVertex$2(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallingConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromAllowedFunctionNames = getValueByPath(fromObject, [
      "allowedFunctionNames"
    ]);
    if (fromAllowedFunctionNames != null) {
      setValueByPath(toObject, ["allowedFunctionNames"], fromAllowedFunctionNames);
    }
    return toObject;
  }
  function functionCallingConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromAllowedFunctionNames = getValueByPath(fromObject, [
      "allowedFunctionNames"
    ]);
    if (fromAllowedFunctionNames != null) {
      setValueByPath(toObject, ["allowedFunctionNames"], fromAllowedFunctionNames);
    }
    return toObject;
  }
  function functionDeclarationToMldev$3(fromObject) {
    const toObject = {};
    const fromBehavior = getValueByPath(fromObject, ["behavior"]);
    if (fromBehavior != null) {
      setValueByPath(toObject, ["behavior"], fromBehavior);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromParameters = getValueByPath(fromObject, ["parameters"]);
    if (fromParameters != null) {
      setValueByPath(toObject, ["parameters"], fromParameters);
    }
    const fromParametersJsonSchema = getValueByPath(fromObject, [
      "parametersJsonSchema"
    ]);
    if (fromParametersJsonSchema != null) {
      setValueByPath(toObject, ["parametersJsonSchema"], fromParametersJsonSchema);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], fromResponse);
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    return toObject;
  }
  function functionDeclarationToVertex$2(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["behavior"]) !== void 0) {
      throw new Error("behavior parameter is not supported in Vertex AI.");
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromParameters = getValueByPath(fromObject, ["parameters"]);
    if (fromParameters != null) {
      setValueByPath(toObject, ["parameters"], fromParameters);
    }
    const fromParametersJsonSchema = getValueByPath(fromObject, [
      "parametersJsonSchema"
    ]);
    if (fromParametersJsonSchema != null) {
      setValueByPath(toObject, ["parametersJsonSchema"], fromParametersJsonSchema);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], fromResponse);
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    return toObject;
  }
  function getCachedContentParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tCachedContentName(apiClient, fromName));
    }
    return toObject;
  }
  function getCachedContentParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tCachedContentName(apiClient, fromName));
    }
    return toObject;
  }
  function googleMapsToVertex$2(fromObject) {
    const toObject = {};
    const fromAuthConfig = getValueByPath(fromObject, ["authConfig"]);
    if (fromAuthConfig != null) {
      setValueByPath(toObject, ["authConfig"], authConfigToVertex$2(fromAuthConfig));
    }
    return toObject;
  }
  function googleSearchRetrievalToMldev$3(fromObject) {
    const toObject = {};
    const fromDynamicRetrievalConfig = getValueByPath(fromObject, [
      "dynamicRetrievalConfig"
    ]);
    if (fromDynamicRetrievalConfig != null) {
      setValueByPath(toObject, ["dynamicRetrievalConfig"], dynamicRetrievalConfigToMldev$3(fromDynamicRetrievalConfig));
    }
    return toObject;
  }
  function googleSearchRetrievalToVertex$2(fromObject) {
    const toObject = {};
    const fromDynamicRetrievalConfig = getValueByPath(fromObject, [
      "dynamicRetrievalConfig"
    ]);
    if (fromDynamicRetrievalConfig != null) {
      setValueByPath(toObject, ["dynamicRetrievalConfig"], dynamicRetrievalConfigToVertex$2(fromDynamicRetrievalConfig));
    }
    return toObject;
  }
  function googleSearchToMldev$3(fromObject) {
    const toObject = {};
    const fromTimeRangeFilter = getValueByPath(fromObject, [
      "timeRangeFilter"
    ]);
    if (fromTimeRangeFilter != null) {
      setValueByPath(toObject, ["timeRangeFilter"], intervalToMldev$3(fromTimeRangeFilter));
    }
    if (getValueByPath(fromObject, ["excludeDomains"]) !== void 0) {
      throw new Error("excludeDomains parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function googleSearchToVertex$2(fromObject) {
    const toObject = {};
    const fromTimeRangeFilter = getValueByPath(fromObject, [
      "timeRangeFilter"
    ]);
    if (fromTimeRangeFilter != null) {
      setValueByPath(toObject, ["timeRangeFilter"], intervalToVertex$2(fromTimeRangeFilter));
    }
    const fromExcludeDomains = getValueByPath(fromObject, [
      "excludeDomains"
    ]);
    if (fromExcludeDomains != null) {
      setValueByPath(toObject, ["excludeDomains"], fromExcludeDomains);
    }
    return toObject;
  }
  function intervalToMldev$3(fromObject) {
    const toObject = {};
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    return toObject;
  }
  function intervalToVertex$2(fromObject) {
    const toObject = {};
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    return toObject;
  }
  function latLngToMldev$1(fromObject) {
    const toObject = {};
    const fromLatitude = getValueByPath(fromObject, ["latitude"]);
    if (fromLatitude != null) {
      setValueByPath(toObject, ["latitude"], fromLatitude);
    }
    const fromLongitude = getValueByPath(fromObject, ["longitude"]);
    if (fromLongitude != null) {
      setValueByPath(toObject, ["longitude"], fromLongitude);
    }
    return toObject;
  }
  function latLngToVertex$1(fromObject) {
    const toObject = {};
    const fromLatitude = getValueByPath(fromObject, ["latitude"]);
    if (fromLatitude != null) {
      setValueByPath(toObject, ["latitude"], fromLatitude);
    }
    const fromLongitude = getValueByPath(fromObject, ["longitude"]);
    if (fromLongitude != null) {
      setValueByPath(toObject, ["longitude"], fromLongitude);
    }
    return toObject;
  }
  function listCachedContentsConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    return toObject;
  }
  function listCachedContentsConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    return toObject;
  }
  function listCachedContentsParametersToMldev(fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listCachedContentsConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function listCachedContentsParametersToVertex(fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listCachedContentsConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function listCachedContentsResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromCachedContents = getValueByPath(fromObject, [
      "cachedContents"
    ]);
    if (fromCachedContents != null) {
      let transformedList = fromCachedContents;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return cachedContentFromMldev(item);
        });
      }
      setValueByPath(toObject, ["cachedContents"], transformedList);
    }
    return toObject;
  }
  function listCachedContentsResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromCachedContents = getValueByPath(fromObject, [
      "cachedContents"
    ]);
    if (fromCachedContents != null) {
      let transformedList = fromCachedContents;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return cachedContentFromVertex(item);
        });
      }
      setValueByPath(toObject, ["cachedContents"], transformedList);
    }
    return toObject;
  }
  function partToMldev$3(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataToMldev$3(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobToMldev$3(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataToMldev$3(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallToMldev$3(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function partToVertex$2(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataToVertex$2(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobToVertex$2(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataToVertex$2(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallToVertex$2(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function retrievalConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromLatLng = getValueByPath(fromObject, ["latLng"]);
    if (fromLatLng != null) {
      setValueByPath(toObject, ["latLng"], latLngToMldev$1(fromLatLng));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function retrievalConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromLatLng = getValueByPath(fromObject, ["latLng"]);
    if (fromLatLng != null) {
      setValueByPath(toObject, ["latLng"], latLngToVertex$1(fromLatLng));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function toolComputerUseToMldev$3(fromObject) {
    const toObject = {};
    const fromEnvironment = getValueByPath(fromObject, ["environment"]);
    if (fromEnvironment != null) {
      setValueByPath(toObject, ["environment"], fromEnvironment);
    }
    const fromExcludedPredefinedFunctions = getValueByPath(fromObject, [
      "excludedPredefinedFunctions"
    ]);
    if (fromExcludedPredefinedFunctions != null) {
      setValueByPath(toObject, ["excludedPredefinedFunctions"], fromExcludedPredefinedFunctions);
    }
    return toObject;
  }
  function toolComputerUseToVertex$2(fromObject) {
    const toObject = {};
    const fromEnvironment = getValueByPath(fromObject, ["environment"]);
    if (fromEnvironment != null) {
      setValueByPath(toObject, ["environment"], fromEnvironment);
    }
    const fromExcludedPredefinedFunctions = getValueByPath(fromObject, [
      "excludedPredefinedFunctions"
    ]);
    if (fromExcludedPredefinedFunctions != null) {
      setValueByPath(toObject, ["excludedPredefinedFunctions"], fromExcludedPredefinedFunctions);
    }
    return toObject;
  }
  function toolConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromFunctionCallingConfig = getValueByPath(fromObject, [
      "functionCallingConfig"
    ]);
    if (fromFunctionCallingConfig != null) {
      setValueByPath(toObject, ["functionCallingConfig"], functionCallingConfigToMldev$1(fromFunctionCallingConfig));
    }
    const fromRetrievalConfig = getValueByPath(fromObject, [
      "retrievalConfig"
    ]);
    if (fromRetrievalConfig != null) {
      setValueByPath(toObject, ["retrievalConfig"], retrievalConfigToMldev$1(fromRetrievalConfig));
    }
    return toObject;
  }
  function toolConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromFunctionCallingConfig = getValueByPath(fromObject, [
      "functionCallingConfig"
    ]);
    if (fromFunctionCallingConfig != null) {
      setValueByPath(toObject, ["functionCallingConfig"], functionCallingConfigToVertex$1(fromFunctionCallingConfig));
    }
    const fromRetrievalConfig = getValueByPath(fromObject, [
      "retrievalConfig"
    ]);
    if (fromRetrievalConfig != null) {
      setValueByPath(toObject, ["retrievalConfig"], retrievalConfigToVertex$1(fromRetrievalConfig));
    }
    return toObject;
  }
  function toolToMldev$3(fromObject) {
    const toObject = {};
    const fromFunctionDeclarations = getValueByPath(fromObject, [
      "functionDeclarations"
    ]);
    if (fromFunctionDeclarations != null) {
      let transformedList = fromFunctionDeclarations;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionDeclarationToMldev$3(item);
        });
      }
      setValueByPath(toObject, ["functionDeclarations"], transformedList);
    }
    if (getValueByPath(fromObject, ["retrieval"]) !== void 0) {
      throw new Error("retrieval parameter is not supported in Gemini API.");
    }
    const fromGoogleSearch = getValueByPath(fromObject, ["googleSearch"]);
    if (fromGoogleSearch != null) {
      setValueByPath(toObject, ["googleSearch"], googleSearchToMldev$3(fromGoogleSearch));
    }
    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [
      "googleSearchRetrieval"
    ]);
    if (fromGoogleSearchRetrieval != null) {
      setValueByPath(toObject, ["googleSearchRetrieval"], googleSearchRetrievalToMldev$3(fromGoogleSearchRetrieval));
    }
    if (getValueByPath(fromObject, ["enterpriseWebSearch"]) !== void 0) {
      throw new Error("enterpriseWebSearch parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["googleMaps"]) !== void 0) {
      throw new Error("googleMaps parameter is not supported in Gemini API.");
    }
    const fromUrlContext = getValueByPath(fromObject, ["urlContext"]);
    if (fromUrlContext != null) {
      setValueByPath(toObject, ["urlContext"], urlContextToMldev$3());
    }
    const fromComputerUse = getValueByPath(fromObject, ["computerUse"]);
    if (fromComputerUse != null) {
      setValueByPath(toObject, ["computerUse"], toolComputerUseToMldev$3(fromComputerUse));
    }
    const fromCodeExecution = getValueByPath(fromObject, [
      "codeExecution"
    ]);
    if (fromCodeExecution != null) {
      setValueByPath(toObject, ["codeExecution"], fromCodeExecution);
    }
    return toObject;
  }
  function toolToVertex$2(fromObject) {
    const toObject = {};
    const fromFunctionDeclarations = getValueByPath(fromObject, [
      "functionDeclarations"
    ]);
    if (fromFunctionDeclarations != null) {
      let transformedList = fromFunctionDeclarations;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionDeclarationToVertex$2(item);
        });
      }
      setValueByPath(toObject, ["functionDeclarations"], transformedList);
    }
    const fromRetrieval = getValueByPath(fromObject, ["retrieval"]);
    if (fromRetrieval != null) {
      setValueByPath(toObject, ["retrieval"], fromRetrieval);
    }
    const fromGoogleSearch = getValueByPath(fromObject, ["googleSearch"]);
    if (fromGoogleSearch != null) {
      setValueByPath(toObject, ["googleSearch"], googleSearchToVertex$2(fromGoogleSearch));
    }
    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [
      "googleSearchRetrieval"
    ]);
    if (fromGoogleSearchRetrieval != null) {
      setValueByPath(toObject, ["googleSearchRetrieval"], googleSearchRetrievalToVertex$2(fromGoogleSearchRetrieval));
    }
    const fromEnterpriseWebSearch = getValueByPath(fromObject, [
      "enterpriseWebSearch"
    ]);
    if (fromEnterpriseWebSearch != null) {
      setValueByPath(toObject, ["enterpriseWebSearch"], enterpriseWebSearchToVertex$2(fromEnterpriseWebSearch));
    }
    const fromGoogleMaps = getValueByPath(fromObject, ["googleMaps"]);
    if (fromGoogleMaps != null) {
      setValueByPath(toObject, ["googleMaps"], googleMapsToVertex$2(fromGoogleMaps));
    }
    const fromUrlContext = getValueByPath(fromObject, ["urlContext"]);
    if (fromUrlContext != null) {
      setValueByPath(toObject, ["urlContext"], urlContextToVertex$2());
    }
    const fromComputerUse = getValueByPath(fromObject, ["computerUse"]);
    if (fromComputerUse != null) {
      setValueByPath(toObject, ["computerUse"], toolComputerUseToVertex$2(fromComputerUse));
    }
    const fromCodeExecution = getValueByPath(fromObject, [
      "codeExecution"
    ]);
    if (fromCodeExecution != null) {
      setValueByPath(toObject, ["codeExecution"], fromCodeExecution);
    }
    return toObject;
  }
  function updateCachedContentConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromTtl = getValueByPath(fromObject, ["ttl"]);
    if (parentObject !== void 0 && fromTtl != null) {
      setValueByPath(parentObject, ["ttl"], fromTtl);
    }
    const fromExpireTime = getValueByPath(fromObject, ["expireTime"]);
    if (parentObject !== void 0 && fromExpireTime != null) {
      setValueByPath(parentObject, ["expireTime"], fromExpireTime);
    }
    return toObject;
  }
  function updateCachedContentConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromTtl = getValueByPath(fromObject, ["ttl"]);
    if (parentObject !== void 0 && fromTtl != null) {
      setValueByPath(parentObject, ["ttl"], fromTtl);
    }
    const fromExpireTime = getValueByPath(fromObject, ["expireTime"]);
    if (parentObject !== void 0 && fromExpireTime != null) {
      setValueByPath(parentObject, ["expireTime"], fromExpireTime);
    }
    return toObject;
  }
  function updateCachedContentParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tCachedContentName(apiClient, fromName));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      updateCachedContentConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function updateCachedContentParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], tCachedContentName(apiClient, fromName));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      updateCachedContentConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function urlContextToMldev$3() {
    const toObject = {};
    return toObject;
  }
  function urlContextToVertex$2() {
    const toObject = {};
    return toObject;
  }
  function videoMetadataToMldev$3(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoMetadataToVertex$2(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  var Caches = class extends BaseModule {
    constructor(apiClient) {
      super();
      this.apiClient = apiClient;
      this.list = async (params = {}) => {
        return new Pager(PagedItem.PAGED_ITEM_CACHED_CONTENTS, (x) => this.listInternal(x), await this.listInternal(params), params);
      };
    }
    /**
     * Creates a cached contents resource.
     *
     * @remarks
     * Context caching is only supported for specific models. See [Gemini
     * Developer API reference](https://ai.google.dev/gemini-api/docs/caching?lang=node/context-cac)
     * and [Vertex AI reference](https://cloud.google.com/vertex-ai/generative-ai/docs/context-cache/context-cache-overview#supported_models)
     * for more information.
     *
     * @param params - The parameters for the create request.
     * @return The created cached content.
     *
     * @example
     * ```ts
     * const contents = ...; // Initialize the content to cache.
     * const response = await ai.caches.create({
     *   model: 'gemini-2.0-flash-001',
     *   config: {
     *    'contents': contents,
     *    'displayName': 'test cache',
     *    'systemInstruction': 'What is the sum of the two pdfs?',
     *    'ttl': '86400s',
     *  }
     * });
     * ```
     */
    async create(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = createCachedContentParametersToVertex(this.apiClient, params);
        path = formatMap("cachedContents", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = cachedContentFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = createCachedContentParametersToMldev(this.apiClient, params);
        path = formatMap("cachedContents", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = cachedContentFromMldev(apiResponse);
          return resp;
        });
      }
    }
    /**
     * Gets cached content configurations.
     *
     * @param params - The parameters for the get request.
     * @return The cached content.
     *
     * @example
     * ```ts
     * await ai.caches.get({name: '...'}); // The server-generated resource name.
     * ```
     */
    async get(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = getCachedContentParametersToVertex(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = cachedContentFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = getCachedContentParametersToMldev(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = cachedContentFromMldev(apiResponse);
          return resp;
        });
      }
    }
    /**
     * Deletes cached content.
     *
     * @param params - The parameters for the delete request.
     * @return The empty response returned by the API.
     *
     * @example
     * ```ts
     * await ai.caches.delete({name: '...'}); // The server-generated resource name.
     * ```
     */
    async delete(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = deleteCachedContentParametersToVertex(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "DELETE",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = deleteCachedContentResponseFromVertex(apiResponse);
          const typedResp = new DeleteCachedContentResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = deleteCachedContentParametersToMldev(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "DELETE",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = deleteCachedContentResponseFromMldev(apiResponse);
          const typedResp = new DeleteCachedContentResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Updates cached content configurations.
     *
     * @param params - The parameters for the update request.
     * @return The updated cached content.
     *
     * @example
     * ```ts
     * const response = await ai.caches.update({
     *   name: '...',  // The server-generated resource name.
     *   config: {'ttl': '7600s'}
     * });
     * ```
     */
    async update(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = updateCachedContentParametersToVertex(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "PATCH",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = cachedContentFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = updateCachedContentParametersToMldev(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "PATCH",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = cachedContentFromMldev(apiResponse);
          return resp;
        });
      }
    }
    async listInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = listCachedContentsParametersToVertex(params);
        path = formatMap("cachedContents", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listCachedContentsResponseFromVertex(apiResponse);
          const typedResp = new ListCachedContentsResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = listCachedContentsParametersToMldev(params);
        path = formatMap("cachedContents", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listCachedContentsResponseFromMldev(apiResponse);
          const typedResp = new ListCachedContentsResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
  };
  function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function() {
        if (o && i >= o.length) o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  }
  function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
      return this;
    }, i;
    function awaitReturn(f) {
      return function(v) {
        return Promise.resolve(v).then(f, reject);
      };
    }
    function verb(n, f) {
      if (g[n]) {
        i[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
        if (f) i[n] = f(i[n]);
      }
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
  }
  function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && function(v) {
        return new Promise(function(resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function(v2) {
        resolve({ value: v2, done: d });
      }, reject);
    }
  }
  function isValidResponse(response) {
    var _a;
    if (response.candidates == void 0 || response.candidates.length === 0) {
      return false;
    }
    const content = (_a = response.candidates[0]) === null || _a === void 0 ? void 0 : _a.content;
    if (content === void 0) {
      return false;
    }
    return isValidContent(content);
  }
  function isValidContent(content) {
    if (content.parts === void 0 || content.parts.length === 0) {
      return false;
    }
    for (const part of content.parts) {
      if (part === void 0 || Object.keys(part).length === 0) {
        return false;
      }
    }
    return true;
  }
  function validateHistory(history) {
    if (history.length === 0) {
      return;
    }
    for (const content of history) {
      if (content.role !== "user" && content.role !== "model") {
        throw new Error(`Role must be user or model, but got ${content.role}.`);
      }
    }
  }
  function extractCuratedHistory(comprehensiveHistory) {
    if (comprehensiveHistory === void 0 || comprehensiveHistory.length === 0) {
      return [];
    }
    const curatedHistory = [];
    const length = comprehensiveHistory.length;
    let i = 0;
    while (i < length) {
      if (comprehensiveHistory[i].role === "user") {
        curatedHistory.push(comprehensiveHistory[i]);
        i++;
      } else {
        const modelOutput = [];
        let isValid = true;
        while (i < length && comprehensiveHistory[i].role === "model") {
          modelOutput.push(comprehensiveHistory[i]);
          if (isValid && !isValidContent(comprehensiveHistory[i])) {
            isValid = false;
          }
          i++;
        }
        if (isValid) {
          curatedHistory.push(...modelOutput);
        } else {
          curatedHistory.pop();
        }
      }
    }
    return curatedHistory;
  }
  var Chats = class {
    constructor(modelsModule, apiClient) {
      this.modelsModule = modelsModule;
      this.apiClient = apiClient;
    }
    /**
     * Creates a new chat session.
     *
     * @remarks
     * The config in the params will be used for all requests within the chat
     * session unless overridden by a per-request `config` in
     * @see {@link types.SendMessageParameters#config}.
     *
     * @param params - Parameters for creating a chat session.
     * @returns A new chat session.
     *
     * @example
     * ```ts
     * const chat = ai.chats.create({
     *   model: 'gemini-2.0-flash'
     *   config: {
     *     temperature: 0.5,
     *     maxOutputTokens: 1024,
     *   }
     * });
     * ```
     */
    create(params) {
      return new Chat(
        this.apiClient,
        this.modelsModule,
        params.model,
        params.config,
        // Deep copy the history to avoid mutating the history outside of the
        // chat session.
        structuredClone(params.history)
      );
    }
  };
  var Chat = class {
    constructor(apiClient, modelsModule, model, config = {}, history = []) {
      this.apiClient = apiClient;
      this.modelsModule = modelsModule;
      this.model = model;
      this.config = config;
      this.history = history;
      this.sendPromise = Promise.resolve();
      validateHistory(history);
    }
    /**
     * Sends a message to the model and returns the response.
     *
     * @remarks
     * This method will wait for the previous message to be processed before
     * sending the next message.
     *
     * @see {@link Chat#sendMessageStream} for streaming method.
     * @param params - parameters for sending messages within a chat session.
     * @returns The model's response.
     *
     * @example
     * ```ts
     * const chat = ai.chats.create({model: 'gemini-2.0-flash'});
     * const response = await chat.sendMessage({
     *   message: 'Why is the sky blue?'
     * });
     * console.log(response.text);
     * ```
     */
    async sendMessage(params) {
      var _a;
      await this.sendPromise;
      const inputContent = tContent(params.message);
      const responsePromise = this.modelsModule.generateContent({
        model: this.model,
        contents: this.getHistory(true).concat(inputContent),
        config: (_a = params.config) !== null && _a !== void 0 ? _a : this.config
      });
      this.sendPromise = (async () => {
        var _a2, _b, _c;
        const response = await responsePromise;
        const outputContent = (_b = (_a2 = response.candidates) === null || _a2 === void 0 ? void 0 : _a2[0]) === null || _b === void 0 ? void 0 : _b.content;
        const fullAutomaticFunctionCallingHistory = response.automaticFunctionCallingHistory;
        const index = this.getHistory(true).length;
        let automaticFunctionCallingHistory = [];
        if (fullAutomaticFunctionCallingHistory != null) {
          automaticFunctionCallingHistory = (_c = fullAutomaticFunctionCallingHistory.slice(index)) !== null && _c !== void 0 ? _c : [];
        }
        const modelOutput = outputContent ? [outputContent] : [];
        this.recordHistory(inputContent, modelOutput, automaticFunctionCallingHistory);
        return;
      })();
      await this.sendPromise.catch(() => {
        this.sendPromise = Promise.resolve();
      });
      return responsePromise;
    }
    /**
     * Sends a message to the model and returns the response in chunks.
     *
     * @remarks
     * This method will wait for the previous message to be processed before
     * sending the next message.
     *
     * @see {@link Chat#sendMessage} for non-streaming method.
     * @param params - parameters for sending the message.
     * @return The model's response.
     *
     * @example
     * ```ts
     * const chat = ai.chats.create({model: 'gemini-2.0-flash'});
     * const response = await chat.sendMessageStream({
     *   message: 'Why is the sky blue?'
     * });
     * for await (const chunk of response) {
     *   console.log(chunk.text);
     * }
     * ```
     */
    async sendMessageStream(params) {
      var _a;
      await this.sendPromise;
      const inputContent = tContent(params.message);
      const streamResponse = this.modelsModule.generateContentStream({
        model: this.model,
        contents: this.getHistory(true).concat(inputContent),
        config: (_a = params.config) !== null && _a !== void 0 ? _a : this.config
      });
      this.sendPromise = streamResponse.then(() => void 0).catch(() => void 0);
      const response = await streamResponse;
      const result = this.processStreamResponse(response, inputContent);
      return result;
    }
    /**
     * Returns the chat history.
     *
     * @remarks
     * The history is a list of contents alternating between user and model.
     *
     * There are two types of history:
     * - The `curated history` contains only the valid turns between user and
     * model, which will be included in the subsequent requests sent to the model.
     * - The `comprehensive history` contains all turns, including invalid or
     *   empty model outputs, providing a complete record of the history.
     *
     * The history is updated after receiving the response from the model,
     * for streaming response, it means receiving the last chunk of the response.
     *
     * The `comprehensive history` is returned by default. To get the `curated
     * history`, set the `curated` parameter to `true`.
     *
     * @param curated - whether to return the curated history or the comprehensive
     *     history.
     * @return History contents alternating between user and model for the entire
     *     chat session.
     */
    getHistory(curated = false) {
      const history = curated ? extractCuratedHistory(this.history) : this.history;
      return structuredClone(history);
    }
    processStreamResponse(streamResponse, inputContent) {
      var _a, _b;
      return __asyncGenerator(this, arguments, function* processStreamResponse_1() {
        var _c, e_1, _d, _e;
        const outputContent = [];
        try {
          for (var _f = true, streamResponse_1 = __asyncValues(streamResponse), streamResponse_1_1; streamResponse_1_1 = yield __await(streamResponse_1.next()), _c = streamResponse_1_1.done, !_c; _f = true) {
            _e = streamResponse_1_1.value;
            _f = false;
            const chunk = _e;
            if (isValidResponse(chunk)) {
              const content = (_b = (_a = chunk.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content;
              if (content !== void 0) {
                outputContent.push(content);
              }
            }
            yield yield __await(chunk);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (!_f && !_c && (_d = streamResponse_1.return)) yield __await(_d.call(streamResponse_1));
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        this.recordHistory(inputContent, outputContent);
      });
    }
    recordHistory(userInput, modelOutput, automaticFunctionCallingHistory) {
      let outputContents = [];
      if (modelOutput.length > 0 && modelOutput.every((content) => content.role !== void 0)) {
        outputContents = modelOutput;
      } else {
        outputContents.push({
          role: "model",
          parts: []
        });
      }
      if (automaticFunctionCallingHistory && automaticFunctionCallingHistory.length > 0) {
        this.history.push(...extractCuratedHistory(automaticFunctionCallingHistory));
      } else {
        this.history.push(userInput);
      }
      this.history.push(...outputContents);
    }
  };
  var ApiError = class _ApiError extends Error {
    constructor(options) {
      super(options.message);
      this.name = "ApiError";
      this.status = options.status;
      Object.setPrototypeOf(this, _ApiError.prototype);
    }
  };
  function createFileParametersToMldev(fromObject) {
    const toObject = {};
    const fromFile = getValueByPath(fromObject, ["file"]);
    if (fromFile != null) {
      setValueByPath(toObject, ["file"], fileToMldev(fromFile));
    }
    return toObject;
  }
  function createFileResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    return toObject;
  }
  function deleteFileParametersToMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "file"], tFileName(fromName));
    }
    return toObject;
  }
  function deleteFileResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    return toObject;
  }
  function fileFromMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    const fromSizeBytes = getValueByPath(fromObject, ["sizeBytes"]);
    if (fromSizeBytes != null) {
      setValueByPath(toObject, ["sizeBytes"], fromSizeBytes);
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromExpirationTime = getValueByPath(fromObject, [
      "expirationTime"
    ]);
    if (fromExpirationTime != null) {
      setValueByPath(toObject, ["expirationTime"], fromExpirationTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    const fromSha256Hash = getValueByPath(fromObject, ["sha256Hash"]);
    if (fromSha256Hash != null) {
      setValueByPath(toObject, ["sha256Hash"], fromSha256Hash);
    }
    const fromUri = getValueByPath(fromObject, ["uri"]);
    if (fromUri != null) {
      setValueByPath(toObject, ["uri"], fromUri);
    }
    const fromDownloadUri = getValueByPath(fromObject, ["downloadUri"]);
    if (fromDownloadUri != null) {
      setValueByPath(toObject, ["downloadUri"], fromDownloadUri);
    }
    const fromState = getValueByPath(fromObject, ["state"]);
    if (fromState != null) {
      setValueByPath(toObject, ["state"], fromState);
    }
    const fromSource = getValueByPath(fromObject, ["source"]);
    if (fromSource != null) {
      setValueByPath(toObject, ["source"], fromSource);
    }
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], fromVideoMetadata);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], fileStatusFromMldev(fromError));
    }
    return toObject;
  }
  function fileStatusFromMldev(fromObject) {
    const toObject = {};
    const fromDetails = getValueByPath(fromObject, ["details"]);
    if (fromDetails != null) {
      setValueByPath(toObject, ["details"], fromDetails);
    }
    const fromMessage = getValueByPath(fromObject, ["message"]);
    if (fromMessage != null) {
      setValueByPath(toObject, ["message"], fromMessage);
    }
    const fromCode = getValueByPath(fromObject, ["code"]);
    if (fromCode != null) {
      setValueByPath(toObject, ["code"], fromCode);
    }
    return toObject;
  }
  function fileStatusToMldev(fromObject) {
    const toObject = {};
    const fromDetails = getValueByPath(fromObject, ["details"]);
    if (fromDetails != null) {
      setValueByPath(toObject, ["details"], fromDetails);
    }
    const fromMessage = getValueByPath(fromObject, ["message"]);
    if (fromMessage != null) {
      setValueByPath(toObject, ["message"], fromMessage);
    }
    const fromCode = getValueByPath(fromObject, ["code"]);
    if (fromCode != null) {
      setValueByPath(toObject, ["code"], fromCode);
    }
    return toObject;
  }
  function fileToMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    const fromSizeBytes = getValueByPath(fromObject, ["sizeBytes"]);
    if (fromSizeBytes != null) {
      setValueByPath(toObject, ["sizeBytes"], fromSizeBytes);
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromExpirationTime = getValueByPath(fromObject, [
      "expirationTime"
    ]);
    if (fromExpirationTime != null) {
      setValueByPath(toObject, ["expirationTime"], fromExpirationTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    const fromSha256Hash = getValueByPath(fromObject, ["sha256Hash"]);
    if (fromSha256Hash != null) {
      setValueByPath(toObject, ["sha256Hash"], fromSha256Hash);
    }
    const fromUri = getValueByPath(fromObject, ["uri"]);
    if (fromUri != null) {
      setValueByPath(toObject, ["uri"], fromUri);
    }
    const fromDownloadUri = getValueByPath(fromObject, ["downloadUri"]);
    if (fromDownloadUri != null) {
      setValueByPath(toObject, ["downloadUri"], fromDownloadUri);
    }
    const fromState = getValueByPath(fromObject, ["state"]);
    if (fromState != null) {
      setValueByPath(toObject, ["state"], fromState);
    }
    const fromSource = getValueByPath(fromObject, ["source"]);
    if (fromSource != null) {
      setValueByPath(toObject, ["source"], fromSource);
    }
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], fromVideoMetadata);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], fileStatusToMldev(fromError));
    }
    return toObject;
  }
  function getFileParametersToMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "file"], tFileName(fromName));
    }
    return toObject;
  }
  function listFilesConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    return toObject;
  }
  function listFilesParametersToMldev(fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listFilesConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function listFilesResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromFiles = getValueByPath(fromObject, ["files"]);
    if (fromFiles != null) {
      let transformedList = fromFiles;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return fileFromMldev(item);
        });
      }
      setValueByPath(toObject, ["files"], transformedList);
    }
    return toObject;
  }
  var Files = class extends BaseModule {
    constructor(apiClient) {
      super();
      this.apiClient = apiClient;
      this.list = async (params = {}) => {
        return new Pager(PagedItem.PAGED_ITEM_FILES, (x) => this.listInternal(x), await this.listInternal(params), params);
      };
    }
    /**
     * Uploads a file asynchronously to the Gemini API.
     * This method is not available in Vertex AI.
     * Supported upload sources:
     * - Node.js: File path (string) or Blob object.
     * - Browser: Blob object (e.g., File).
     *
     * @remarks
     * The `mimeType` can be specified in the `config` parameter. If omitted:
     *  - For file path (string) inputs, the `mimeType` will be inferred from the
     *     file extension.
     *  - For Blob object inputs, the `mimeType` will be set to the Blob's `type`
     *     property.
     * Somex eamples for file extension to mimeType mapping:
     * .txt -> text/plain
     * .json -> application/json
     * .jpg  -> image/jpeg
     * .png -> image/png
     * .mp3 -> audio/mpeg
     * .mp4 -> video/mp4
     *
     * This section can contain multiple paragraphs and code examples.
     *
     * @param params - Optional parameters specified in the
     *        `types.UploadFileParameters` interface.
     *         @see {@link types.UploadFileParameters#config} for the optional
     *         config in the parameters.
     * @return A promise that resolves to a `types.File` object.
     * @throws An error if called on a Vertex AI client.
     * @throws An error if the `mimeType` is not provided and can not be inferred,
     * the `mimeType` can be provided in the `params.config` parameter.
     * @throws An error occurs if a suitable upload location cannot be established.
     *
     * @example
     * The following code uploads a file to Gemini API.
     *
     * ```ts
     * const file = await ai.files.upload({file: 'file.txt', config: {
     *   mimeType: 'text/plain',
     * }});
     * console.log(file.name);
     * ```
     */
    async upload(params) {
      if (this.apiClient.isVertexAI()) {
        throw new Error("Vertex AI does not support uploading files. You can share files through a GCS bucket.");
      }
      return this.apiClient.uploadFile(params.file, params.config).then((response) => {
        const file = fileFromMldev(response);
        return file;
      });
    }
    /**
     * Downloads a remotely stored file asynchronously to a location specified in
     * the `params` object. This method only works on Node environment, to
     * download files in the browser, use a browser compliant method like an <a>
     * tag.
     *
     * @param params - The parameters for the download request.
     *
     * @example
     * The following code downloads an example file named "files/mehozpxf877d" as
     * "file.txt".
     *
     * ```ts
     * await ai.files.download({file: file.name, downloadPath: 'file.txt'});
     * ```
     */
    async download(params) {
      await this.apiClient.downloadFile(params);
    }
    async listInternal(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        throw new Error("This method is only supported by the Gemini Developer API.");
      } else {
        const body = listFilesParametersToMldev(params);
        path = formatMap("files", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listFilesResponseFromMldev(apiResponse);
          const typedResp = new ListFilesResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    async createInternal(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        throw new Error("This method is only supported by the Gemini Developer API.");
      } else {
        const body = createFileParametersToMldev(params);
        path = formatMap("upload/v1beta/files", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = createFileResponseFromMldev(apiResponse);
          const typedResp = new CreateFileResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Retrieves the file information from the service.
     *
     * @param params - The parameters for the get request
     * @return The Promise that resolves to the types.File object requested.
     *
     * @example
     * ```ts
     * const config: GetFileParameters = {
     *   name: fileName,
     * };
     * file = await ai.files.get(config);
     * console.log(file.name);
     * ```
     */
    async get(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        throw new Error("This method is only supported by the Gemini Developer API.");
      } else {
        const body = getFileParametersToMldev(params);
        path = formatMap("files/{file}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = fileFromMldev(apiResponse);
          return resp;
        });
      }
    }
    /**
     * Deletes a remotely stored file.
     *
     * @param params - The parameters for the delete request.
     * @return The DeleteFileResponse, the response for the delete method.
     *
     * @example
     * The following code deletes an example file named "files/mehozpxf877d".
     *
     * ```ts
     * await ai.files.delete({name: file.name});
     * ```
     */
    async delete(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        throw new Error("This method is only supported by the Gemini Developer API.");
      } else {
        const body = deleteFileParametersToMldev(params);
        path = formatMap("files/{file}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "DELETE",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = deleteFileResponseFromMldev(apiResponse);
          const typedResp = new DeleteFileResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
  };
  function activityEndToMldev() {
    const toObject = {};
    return toObject;
  }
  function activityEndToVertex() {
    const toObject = {};
    return toObject;
  }
  function activityStartToMldev() {
    const toObject = {};
    return toObject;
  }
  function activityStartToVertex() {
    const toObject = {};
    return toObject;
  }
  function apiKeyConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromApiKeyString = getValueByPath(fromObject, ["apiKeyString"]);
    if (fromApiKeyString != null) {
      setValueByPath(toObject, ["apiKeyString"], fromApiKeyString);
    }
    return toObject;
  }
  function audioChunkFromMldev(fromObject) {
    const toObject = {};
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    const fromSourceMetadata = getValueByPath(fromObject, [
      "sourceMetadata"
    ]);
    if (fromSourceMetadata != null) {
      setValueByPath(toObject, ["sourceMetadata"], liveMusicSourceMetadataFromMldev(fromSourceMetadata));
    }
    return toObject;
  }
  function audioTranscriptionConfigToMldev$1() {
    const toObject = {};
    return toObject;
  }
  function audioTranscriptionConfigToVertex() {
    const toObject = {};
    return toObject;
  }
  function authConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromApiKeyConfig = getValueByPath(fromObject, ["apiKeyConfig"]);
    if (fromApiKeyConfig != null) {
      setValueByPath(toObject, ["apiKeyConfig"], apiKeyConfigToVertex$1(fromApiKeyConfig));
    }
    const fromAuthType = getValueByPath(fromObject, ["authType"]);
    if (fromAuthType != null) {
      setValueByPath(toObject, ["authType"], fromAuthType);
    }
    const fromGoogleServiceAccountConfig = getValueByPath(fromObject, [
      "googleServiceAccountConfig"
    ]);
    if (fromGoogleServiceAccountConfig != null) {
      setValueByPath(toObject, ["googleServiceAccountConfig"], fromGoogleServiceAccountConfig);
    }
    const fromHttpBasicAuthConfig = getValueByPath(fromObject, [
      "httpBasicAuthConfig"
    ]);
    if (fromHttpBasicAuthConfig != null) {
      setValueByPath(toObject, ["httpBasicAuthConfig"], fromHttpBasicAuthConfig);
    }
    const fromOauthConfig = getValueByPath(fromObject, ["oauthConfig"]);
    if (fromOauthConfig != null) {
      setValueByPath(toObject, ["oauthConfig"], fromOauthConfig);
    }
    const fromOidcConfig = getValueByPath(fromObject, ["oidcConfig"]);
    if (fromOidcConfig != null) {
      setValueByPath(toObject, ["oidcConfig"], fromOidcConfig);
    }
    return toObject;
  }
  function automaticActivityDetectionToMldev$1(fromObject) {
    const toObject = {};
    const fromDisabled = getValueByPath(fromObject, ["disabled"]);
    if (fromDisabled != null) {
      setValueByPath(toObject, ["disabled"], fromDisabled);
    }
    const fromStartOfSpeechSensitivity = getValueByPath(fromObject, [
      "startOfSpeechSensitivity"
    ]);
    if (fromStartOfSpeechSensitivity != null) {
      setValueByPath(toObject, ["startOfSpeechSensitivity"], fromStartOfSpeechSensitivity);
    }
    const fromEndOfSpeechSensitivity = getValueByPath(fromObject, [
      "endOfSpeechSensitivity"
    ]);
    if (fromEndOfSpeechSensitivity != null) {
      setValueByPath(toObject, ["endOfSpeechSensitivity"], fromEndOfSpeechSensitivity);
    }
    const fromPrefixPaddingMs = getValueByPath(fromObject, [
      "prefixPaddingMs"
    ]);
    if (fromPrefixPaddingMs != null) {
      setValueByPath(toObject, ["prefixPaddingMs"], fromPrefixPaddingMs);
    }
    const fromSilenceDurationMs = getValueByPath(fromObject, [
      "silenceDurationMs"
    ]);
    if (fromSilenceDurationMs != null) {
      setValueByPath(toObject, ["silenceDurationMs"], fromSilenceDurationMs);
    }
    return toObject;
  }
  function automaticActivityDetectionToVertex(fromObject) {
    const toObject = {};
    const fromDisabled = getValueByPath(fromObject, ["disabled"]);
    if (fromDisabled != null) {
      setValueByPath(toObject, ["disabled"], fromDisabled);
    }
    const fromStartOfSpeechSensitivity = getValueByPath(fromObject, [
      "startOfSpeechSensitivity"
    ]);
    if (fromStartOfSpeechSensitivity != null) {
      setValueByPath(toObject, ["startOfSpeechSensitivity"], fromStartOfSpeechSensitivity);
    }
    const fromEndOfSpeechSensitivity = getValueByPath(fromObject, [
      "endOfSpeechSensitivity"
    ]);
    if (fromEndOfSpeechSensitivity != null) {
      setValueByPath(toObject, ["endOfSpeechSensitivity"], fromEndOfSpeechSensitivity);
    }
    const fromPrefixPaddingMs = getValueByPath(fromObject, [
      "prefixPaddingMs"
    ]);
    if (fromPrefixPaddingMs != null) {
      setValueByPath(toObject, ["prefixPaddingMs"], fromPrefixPaddingMs);
    }
    const fromSilenceDurationMs = getValueByPath(fromObject, [
      "silenceDurationMs"
    ]);
    if (fromSilenceDurationMs != null) {
      setValueByPath(toObject, ["silenceDurationMs"], fromSilenceDurationMs);
    }
    return toObject;
  }
  function blobFromMldev$1(fromObject) {
    const toObject = {};
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function blobFromVertex$1(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function blobToMldev$2(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function blobToVertex$1(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function contentFromMldev$1(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partFromMldev$1(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contentFromVertex$1(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partFromVertex$1(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contentToMldev$2(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partToMldev$2(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contentToVertex$1(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partToVertex$1(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contextWindowCompressionConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromTriggerTokens = getValueByPath(fromObject, [
      "triggerTokens"
    ]);
    if (fromTriggerTokens != null) {
      setValueByPath(toObject, ["triggerTokens"], fromTriggerTokens);
    }
    const fromSlidingWindow = getValueByPath(fromObject, [
      "slidingWindow"
    ]);
    if (fromSlidingWindow != null) {
      setValueByPath(toObject, ["slidingWindow"], slidingWindowToMldev$1(fromSlidingWindow));
    }
    return toObject;
  }
  function contextWindowCompressionConfigToVertex(fromObject) {
    const toObject = {};
    const fromTriggerTokens = getValueByPath(fromObject, [
      "triggerTokens"
    ]);
    if (fromTriggerTokens != null) {
      setValueByPath(toObject, ["triggerTokens"], fromTriggerTokens);
    }
    const fromSlidingWindow = getValueByPath(fromObject, [
      "slidingWindow"
    ]);
    if (fromSlidingWindow != null) {
      setValueByPath(toObject, ["slidingWindow"], slidingWindowToVertex(fromSlidingWindow));
    }
    return toObject;
  }
  function dynamicRetrievalConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromDynamicThreshold = getValueByPath(fromObject, [
      "dynamicThreshold"
    ]);
    if (fromDynamicThreshold != null) {
      setValueByPath(toObject, ["dynamicThreshold"], fromDynamicThreshold);
    }
    return toObject;
  }
  function dynamicRetrievalConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromDynamicThreshold = getValueByPath(fromObject, [
      "dynamicThreshold"
    ]);
    if (fromDynamicThreshold != null) {
      setValueByPath(toObject, ["dynamicThreshold"], fromDynamicThreshold);
    }
    return toObject;
  }
  function enterpriseWebSearchToVertex$1(fromObject) {
    const toObject = {};
    const fromExcludeDomains = getValueByPath(fromObject, [
      "excludeDomains"
    ]);
    if (fromExcludeDomains != null) {
      setValueByPath(toObject, ["excludeDomains"], fromExcludeDomains);
    }
    return toObject;
  }
  function fileDataFromMldev$1(fromObject) {
    const toObject = {};
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function fileDataFromVertex$1(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function fileDataToMldev$2(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function fileDataToVertex$1(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function functionCallFromMldev$1(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallFromVertex$1(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallToMldev$2(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallToVertex$1(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionDeclarationToMldev$2(fromObject) {
    const toObject = {};
    const fromBehavior = getValueByPath(fromObject, ["behavior"]);
    if (fromBehavior != null) {
      setValueByPath(toObject, ["behavior"], fromBehavior);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromParameters = getValueByPath(fromObject, ["parameters"]);
    if (fromParameters != null) {
      setValueByPath(toObject, ["parameters"], fromParameters);
    }
    const fromParametersJsonSchema = getValueByPath(fromObject, [
      "parametersJsonSchema"
    ]);
    if (fromParametersJsonSchema != null) {
      setValueByPath(toObject, ["parametersJsonSchema"], fromParametersJsonSchema);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], fromResponse);
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    return toObject;
  }
  function functionDeclarationToVertex$1(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["behavior"]) !== void 0) {
      throw new Error("behavior parameter is not supported in Vertex AI.");
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromParameters = getValueByPath(fromObject, ["parameters"]);
    if (fromParameters != null) {
      setValueByPath(toObject, ["parameters"], fromParameters);
    }
    const fromParametersJsonSchema = getValueByPath(fromObject, [
      "parametersJsonSchema"
    ]);
    if (fromParametersJsonSchema != null) {
      setValueByPath(toObject, ["parametersJsonSchema"], fromParametersJsonSchema);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], fromResponse);
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    return toObject;
  }
  function googleMapsToVertex$1(fromObject) {
    const toObject = {};
    const fromAuthConfig = getValueByPath(fromObject, ["authConfig"]);
    if (fromAuthConfig != null) {
      setValueByPath(toObject, ["authConfig"], authConfigToVertex$1(fromAuthConfig));
    }
    return toObject;
  }
  function googleSearchRetrievalToMldev$2(fromObject) {
    const toObject = {};
    const fromDynamicRetrievalConfig = getValueByPath(fromObject, [
      "dynamicRetrievalConfig"
    ]);
    if (fromDynamicRetrievalConfig != null) {
      setValueByPath(toObject, ["dynamicRetrievalConfig"], dynamicRetrievalConfigToMldev$2(fromDynamicRetrievalConfig));
    }
    return toObject;
  }
  function googleSearchRetrievalToVertex$1(fromObject) {
    const toObject = {};
    const fromDynamicRetrievalConfig = getValueByPath(fromObject, [
      "dynamicRetrievalConfig"
    ]);
    if (fromDynamicRetrievalConfig != null) {
      setValueByPath(toObject, ["dynamicRetrievalConfig"], dynamicRetrievalConfigToVertex$1(fromDynamicRetrievalConfig));
    }
    return toObject;
  }
  function googleSearchToMldev$2(fromObject) {
    const toObject = {};
    const fromTimeRangeFilter = getValueByPath(fromObject, [
      "timeRangeFilter"
    ]);
    if (fromTimeRangeFilter != null) {
      setValueByPath(toObject, ["timeRangeFilter"], intervalToMldev$2(fromTimeRangeFilter));
    }
    if (getValueByPath(fromObject, ["excludeDomains"]) !== void 0) {
      throw new Error("excludeDomains parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function googleSearchToVertex$1(fromObject) {
    const toObject = {};
    const fromTimeRangeFilter = getValueByPath(fromObject, [
      "timeRangeFilter"
    ]);
    if (fromTimeRangeFilter != null) {
      setValueByPath(toObject, ["timeRangeFilter"], intervalToVertex$1(fromTimeRangeFilter));
    }
    const fromExcludeDomains = getValueByPath(fromObject, [
      "excludeDomains"
    ]);
    if (fromExcludeDomains != null) {
      setValueByPath(toObject, ["excludeDomains"], fromExcludeDomains);
    }
    return toObject;
  }
  function intervalToMldev$2(fromObject) {
    const toObject = {};
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    return toObject;
  }
  function intervalToVertex$1(fromObject) {
    const toObject = {};
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    return toObject;
  }
  function liveConnectConfigToMldev$1(fromObject, parentObject) {
    const toObject = {};
    const fromGenerationConfig = getValueByPath(fromObject, [
      "generationConfig"
    ]);
    if (parentObject !== void 0 && fromGenerationConfig != null) {
      setValueByPath(parentObject, ["setup", "generationConfig"], fromGenerationConfig);
    }
    const fromResponseModalities = getValueByPath(fromObject, [
      "responseModalities"
    ]);
    if (parentObject !== void 0 && fromResponseModalities != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "responseModalities"], fromResponseModalities);
    }
    const fromTemperature = getValueByPath(fromObject, ["temperature"]);
    if (parentObject !== void 0 && fromTemperature != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "temperature"], fromTemperature);
    }
    const fromTopP = getValueByPath(fromObject, ["topP"]);
    if (parentObject !== void 0 && fromTopP != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "topP"], fromTopP);
    }
    const fromTopK = getValueByPath(fromObject, ["topK"]);
    if (parentObject !== void 0 && fromTopK != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "topK"], fromTopK);
    }
    const fromMaxOutputTokens = getValueByPath(fromObject, [
      "maxOutputTokens"
    ]);
    if (parentObject !== void 0 && fromMaxOutputTokens != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "maxOutputTokens"], fromMaxOutputTokens);
    }
    const fromMediaResolution = getValueByPath(fromObject, [
      "mediaResolution"
    ]);
    if (parentObject !== void 0 && fromMediaResolution != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "mediaResolution"], fromMediaResolution);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (parentObject !== void 0 && fromSeed != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "seed"], fromSeed);
    }
    const fromSpeechConfig = getValueByPath(fromObject, ["speechConfig"]);
    if (parentObject !== void 0 && fromSpeechConfig != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "speechConfig"], speechConfigToMldev$2(tLiveSpeechConfig(fromSpeechConfig)));
    }
    const fromEnableAffectiveDialog = getValueByPath(fromObject, [
      "enableAffectiveDialog"
    ]);
    if (parentObject !== void 0 && fromEnableAffectiveDialog != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "enableAffectiveDialog"], fromEnableAffectiveDialog);
    }
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["setup", "systemInstruction"], contentToMldev$2(tContent(fromSystemInstruction)));
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = tTools(fromTools);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToMldev$2(tTool(item));
        });
      }
      setValueByPath(parentObject, ["setup", "tools"], transformedList);
    }
    const fromSessionResumption = getValueByPath(fromObject, [
      "sessionResumption"
    ]);
    if (parentObject !== void 0 && fromSessionResumption != null) {
      setValueByPath(parentObject, ["setup", "sessionResumption"], sessionResumptionConfigToMldev$1(fromSessionResumption));
    }
    const fromInputAudioTranscription = getValueByPath(fromObject, [
      "inputAudioTranscription"
    ]);
    if (parentObject !== void 0 && fromInputAudioTranscription != null) {
      setValueByPath(parentObject, ["setup", "inputAudioTranscription"], audioTranscriptionConfigToMldev$1());
    }
    const fromOutputAudioTranscription = getValueByPath(fromObject, [
      "outputAudioTranscription"
    ]);
    if (parentObject !== void 0 && fromOutputAudioTranscription != null) {
      setValueByPath(parentObject, ["setup", "outputAudioTranscription"], audioTranscriptionConfigToMldev$1());
    }
    const fromRealtimeInputConfig = getValueByPath(fromObject, [
      "realtimeInputConfig"
    ]);
    if (parentObject !== void 0 && fromRealtimeInputConfig != null) {
      setValueByPath(parentObject, ["setup", "realtimeInputConfig"], realtimeInputConfigToMldev$1(fromRealtimeInputConfig));
    }
    const fromContextWindowCompression = getValueByPath(fromObject, [
      "contextWindowCompression"
    ]);
    if (parentObject !== void 0 && fromContextWindowCompression != null) {
      setValueByPath(parentObject, ["setup", "contextWindowCompression"], contextWindowCompressionConfigToMldev$1(fromContextWindowCompression));
    }
    const fromProactivity = getValueByPath(fromObject, ["proactivity"]);
    if (parentObject !== void 0 && fromProactivity != null) {
      setValueByPath(parentObject, ["setup", "proactivity"], proactivityConfigToMldev$1(fromProactivity));
    }
    return toObject;
  }
  function liveConnectConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromGenerationConfig = getValueByPath(fromObject, [
      "generationConfig"
    ]);
    if (parentObject !== void 0 && fromGenerationConfig != null) {
      setValueByPath(parentObject, ["setup", "generationConfig"], fromGenerationConfig);
    }
    const fromResponseModalities = getValueByPath(fromObject, [
      "responseModalities"
    ]);
    if (parentObject !== void 0 && fromResponseModalities != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "responseModalities"], fromResponseModalities);
    }
    const fromTemperature = getValueByPath(fromObject, ["temperature"]);
    if (parentObject !== void 0 && fromTemperature != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "temperature"], fromTemperature);
    }
    const fromTopP = getValueByPath(fromObject, ["topP"]);
    if (parentObject !== void 0 && fromTopP != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "topP"], fromTopP);
    }
    const fromTopK = getValueByPath(fromObject, ["topK"]);
    if (parentObject !== void 0 && fromTopK != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "topK"], fromTopK);
    }
    const fromMaxOutputTokens = getValueByPath(fromObject, [
      "maxOutputTokens"
    ]);
    if (parentObject !== void 0 && fromMaxOutputTokens != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "maxOutputTokens"], fromMaxOutputTokens);
    }
    const fromMediaResolution = getValueByPath(fromObject, [
      "mediaResolution"
    ]);
    if (parentObject !== void 0 && fromMediaResolution != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "mediaResolution"], fromMediaResolution);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (parentObject !== void 0 && fromSeed != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "seed"], fromSeed);
    }
    const fromSpeechConfig = getValueByPath(fromObject, ["speechConfig"]);
    if (parentObject !== void 0 && fromSpeechConfig != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "speechConfig"], speechConfigToVertex$1(tLiveSpeechConfig(fromSpeechConfig)));
    }
    const fromEnableAffectiveDialog = getValueByPath(fromObject, [
      "enableAffectiveDialog"
    ]);
    if (parentObject !== void 0 && fromEnableAffectiveDialog != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "enableAffectiveDialog"], fromEnableAffectiveDialog);
    }
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["setup", "systemInstruction"], contentToVertex$1(tContent(fromSystemInstruction)));
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = tTools(fromTools);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToVertex$1(tTool(item));
        });
      }
      setValueByPath(parentObject, ["setup", "tools"], transformedList);
    }
    const fromSessionResumption = getValueByPath(fromObject, [
      "sessionResumption"
    ]);
    if (parentObject !== void 0 && fromSessionResumption != null) {
      setValueByPath(parentObject, ["setup", "sessionResumption"], sessionResumptionConfigToVertex(fromSessionResumption));
    }
    const fromInputAudioTranscription = getValueByPath(fromObject, [
      "inputAudioTranscription"
    ]);
    if (parentObject !== void 0 && fromInputAudioTranscription != null) {
      setValueByPath(parentObject, ["setup", "inputAudioTranscription"], audioTranscriptionConfigToVertex());
    }
    const fromOutputAudioTranscription = getValueByPath(fromObject, [
      "outputAudioTranscription"
    ]);
    if (parentObject !== void 0 && fromOutputAudioTranscription != null) {
      setValueByPath(parentObject, ["setup", "outputAudioTranscription"], audioTranscriptionConfigToVertex());
    }
    const fromRealtimeInputConfig = getValueByPath(fromObject, [
      "realtimeInputConfig"
    ]);
    if (parentObject !== void 0 && fromRealtimeInputConfig != null) {
      setValueByPath(parentObject, ["setup", "realtimeInputConfig"], realtimeInputConfigToVertex(fromRealtimeInputConfig));
    }
    const fromContextWindowCompression = getValueByPath(fromObject, [
      "contextWindowCompression"
    ]);
    if (parentObject !== void 0 && fromContextWindowCompression != null) {
      setValueByPath(parentObject, ["setup", "contextWindowCompression"], contextWindowCompressionConfigToVertex(fromContextWindowCompression));
    }
    const fromProactivity = getValueByPath(fromObject, ["proactivity"]);
    if (parentObject !== void 0 && fromProactivity != null) {
      setValueByPath(parentObject, ["setup", "proactivity"], proactivityConfigToVertex(fromProactivity));
    }
    return toObject;
  }
  function liveConnectParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["setup", "model"], tModel(apiClient, fromModel));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      setValueByPath(toObject, ["config"], liveConnectConfigToMldev$1(fromConfig, toObject));
    }
    return toObject;
  }
  function liveConnectParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["setup", "model"], tModel(apiClient, fromModel));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      setValueByPath(toObject, ["config"], liveConnectConfigToVertex(fromConfig, toObject));
    }
    return toObject;
  }
  function liveMusicClientContentFromMldev(fromObject) {
    const toObject = {};
    const fromWeightedPrompts = getValueByPath(fromObject, [
      "weightedPrompts"
    ]);
    if (fromWeightedPrompts != null) {
      let transformedList = fromWeightedPrompts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return weightedPromptFromMldev(item);
        });
      }
      setValueByPath(toObject, ["weightedPrompts"], transformedList);
    }
    return toObject;
  }
  function liveMusicClientContentToMldev(fromObject) {
    const toObject = {};
    const fromWeightedPrompts = getValueByPath(fromObject, [
      "weightedPrompts"
    ]);
    if (fromWeightedPrompts != null) {
      let transformedList = fromWeightedPrompts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return weightedPromptToMldev(item);
        });
      }
      setValueByPath(toObject, ["weightedPrompts"], transformedList);
    }
    return toObject;
  }
  function liveMusicClientMessageToMldev(fromObject) {
    const toObject = {};
    const fromSetup = getValueByPath(fromObject, ["setup"]);
    if (fromSetup != null) {
      setValueByPath(toObject, ["setup"], liveMusicClientSetupToMldev(fromSetup));
    }
    const fromClientContent = getValueByPath(fromObject, [
      "clientContent"
    ]);
    if (fromClientContent != null) {
      setValueByPath(toObject, ["clientContent"], liveMusicClientContentToMldev(fromClientContent));
    }
    const fromMusicGenerationConfig = getValueByPath(fromObject, [
      "musicGenerationConfig"
    ]);
    if (fromMusicGenerationConfig != null) {
      setValueByPath(toObject, ["musicGenerationConfig"], liveMusicGenerationConfigToMldev(fromMusicGenerationConfig));
    }
    const fromPlaybackControl = getValueByPath(fromObject, [
      "playbackControl"
    ]);
    if (fromPlaybackControl != null) {
      setValueByPath(toObject, ["playbackControl"], fromPlaybackControl);
    }
    return toObject;
  }
  function liveMusicClientSetupToMldev(fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], fromModel);
    }
    return toObject;
  }
  function liveMusicFilteredPromptFromMldev(fromObject) {
    const toObject = {};
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    const fromFilteredReason = getValueByPath(fromObject, [
      "filteredReason"
    ]);
    if (fromFilteredReason != null) {
      setValueByPath(toObject, ["filteredReason"], fromFilteredReason);
    }
    return toObject;
  }
  function liveMusicGenerationConfigFromMldev(fromObject) {
    const toObject = {};
    const fromTemperature = getValueByPath(fromObject, ["temperature"]);
    if (fromTemperature != null) {
      setValueByPath(toObject, ["temperature"], fromTemperature);
    }
    const fromTopK = getValueByPath(fromObject, ["topK"]);
    if (fromTopK != null) {
      setValueByPath(toObject, ["topK"], fromTopK);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (fromSeed != null) {
      setValueByPath(toObject, ["seed"], fromSeed);
    }
    const fromGuidance = getValueByPath(fromObject, ["guidance"]);
    if (fromGuidance != null) {
      setValueByPath(toObject, ["guidance"], fromGuidance);
    }
    const fromBpm = getValueByPath(fromObject, ["bpm"]);
    if (fromBpm != null) {
      setValueByPath(toObject, ["bpm"], fromBpm);
    }
    const fromDensity = getValueByPath(fromObject, ["density"]);
    if (fromDensity != null) {
      setValueByPath(toObject, ["density"], fromDensity);
    }
    const fromBrightness = getValueByPath(fromObject, ["brightness"]);
    if (fromBrightness != null) {
      setValueByPath(toObject, ["brightness"], fromBrightness);
    }
    const fromScale = getValueByPath(fromObject, ["scale"]);
    if (fromScale != null) {
      setValueByPath(toObject, ["scale"], fromScale);
    }
    const fromMuteBass = getValueByPath(fromObject, ["muteBass"]);
    if (fromMuteBass != null) {
      setValueByPath(toObject, ["muteBass"], fromMuteBass);
    }
    const fromMuteDrums = getValueByPath(fromObject, ["muteDrums"]);
    if (fromMuteDrums != null) {
      setValueByPath(toObject, ["muteDrums"], fromMuteDrums);
    }
    const fromOnlyBassAndDrums = getValueByPath(fromObject, [
      "onlyBassAndDrums"
    ]);
    if (fromOnlyBassAndDrums != null) {
      setValueByPath(toObject, ["onlyBassAndDrums"], fromOnlyBassAndDrums);
    }
    const fromMusicGenerationMode = getValueByPath(fromObject, [
      "musicGenerationMode"
    ]);
    if (fromMusicGenerationMode != null) {
      setValueByPath(toObject, ["musicGenerationMode"], fromMusicGenerationMode);
    }
    return toObject;
  }
  function liveMusicGenerationConfigToMldev(fromObject) {
    const toObject = {};
    const fromTemperature = getValueByPath(fromObject, ["temperature"]);
    if (fromTemperature != null) {
      setValueByPath(toObject, ["temperature"], fromTemperature);
    }
    const fromTopK = getValueByPath(fromObject, ["topK"]);
    if (fromTopK != null) {
      setValueByPath(toObject, ["topK"], fromTopK);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (fromSeed != null) {
      setValueByPath(toObject, ["seed"], fromSeed);
    }
    const fromGuidance = getValueByPath(fromObject, ["guidance"]);
    if (fromGuidance != null) {
      setValueByPath(toObject, ["guidance"], fromGuidance);
    }
    const fromBpm = getValueByPath(fromObject, ["bpm"]);
    if (fromBpm != null) {
      setValueByPath(toObject, ["bpm"], fromBpm);
    }
    const fromDensity = getValueByPath(fromObject, ["density"]);
    if (fromDensity != null) {
      setValueByPath(toObject, ["density"], fromDensity);
    }
    const fromBrightness = getValueByPath(fromObject, ["brightness"]);
    if (fromBrightness != null) {
      setValueByPath(toObject, ["brightness"], fromBrightness);
    }
    const fromScale = getValueByPath(fromObject, ["scale"]);
    if (fromScale != null) {
      setValueByPath(toObject, ["scale"], fromScale);
    }
    const fromMuteBass = getValueByPath(fromObject, ["muteBass"]);
    if (fromMuteBass != null) {
      setValueByPath(toObject, ["muteBass"], fromMuteBass);
    }
    const fromMuteDrums = getValueByPath(fromObject, ["muteDrums"]);
    if (fromMuteDrums != null) {
      setValueByPath(toObject, ["muteDrums"], fromMuteDrums);
    }
    const fromOnlyBassAndDrums = getValueByPath(fromObject, [
      "onlyBassAndDrums"
    ]);
    if (fromOnlyBassAndDrums != null) {
      setValueByPath(toObject, ["onlyBassAndDrums"], fromOnlyBassAndDrums);
    }
    const fromMusicGenerationMode = getValueByPath(fromObject, [
      "musicGenerationMode"
    ]);
    if (fromMusicGenerationMode != null) {
      setValueByPath(toObject, ["musicGenerationMode"], fromMusicGenerationMode);
    }
    return toObject;
  }
  function liveMusicServerContentFromMldev(fromObject) {
    const toObject = {};
    const fromAudioChunks = getValueByPath(fromObject, ["audioChunks"]);
    if (fromAudioChunks != null) {
      let transformedList = fromAudioChunks;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return audioChunkFromMldev(item);
        });
      }
      setValueByPath(toObject, ["audioChunks"], transformedList);
    }
    return toObject;
  }
  function liveMusicServerMessageFromMldev(fromObject) {
    const toObject = {};
    const fromSetupComplete = getValueByPath(fromObject, [
      "setupComplete"
    ]);
    if (fromSetupComplete != null) {
      setValueByPath(toObject, ["setupComplete"], liveMusicServerSetupCompleteFromMldev());
    }
    const fromServerContent = getValueByPath(fromObject, [
      "serverContent"
    ]);
    if (fromServerContent != null) {
      setValueByPath(toObject, ["serverContent"], liveMusicServerContentFromMldev(fromServerContent));
    }
    const fromFilteredPrompt = getValueByPath(fromObject, [
      "filteredPrompt"
    ]);
    if (fromFilteredPrompt != null) {
      setValueByPath(toObject, ["filteredPrompt"], liveMusicFilteredPromptFromMldev(fromFilteredPrompt));
    }
    return toObject;
  }
  function liveMusicServerSetupCompleteFromMldev() {
    const toObject = {};
    return toObject;
  }
  function liveMusicSetConfigParametersToMldev(fromObject) {
    const toObject = {};
    const fromMusicGenerationConfig = getValueByPath(fromObject, [
      "musicGenerationConfig"
    ]);
    if (fromMusicGenerationConfig != null) {
      setValueByPath(toObject, ["musicGenerationConfig"], liveMusicGenerationConfigToMldev(fromMusicGenerationConfig));
    }
    return toObject;
  }
  function liveMusicSetWeightedPromptsParametersToMldev(fromObject) {
    const toObject = {};
    const fromWeightedPrompts = getValueByPath(fromObject, [
      "weightedPrompts"
    ]);
    if (fromWeightedPrompts != null) {
      let transformedList = fromWeightedPrompts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return weightedPromptToMldev(item);
        });
      }
      setValueByPath(toObject, ["weightedPrompts"], transformedList);
    }
    return toObject;
  }
  function liveMusicSourceMetadataFromMldev(fromObject) {
    const toObject = {};
    const fromClientContent = getValueByPath(fromObject, [
      "clientContent"
    ]);
    if (fromClientContent != null) {
      setValueByPath(toObject, ["clientContent"], liveMusicClientContentFromMldev(fromClientContent));
    }
    const fromMusicGenerationConfig = getValueByPath(fromObject, [
      "musicGenerationConfig"
    ]);
    if (fromMusicGenerationConfig != null) {
      setValueByPath(toObject, ["musicGenerationConfig"], liveMusicGenerationConfigFromMldev(fromMusicGenerationConfig));
    }
    return toObject;
  }
  function liveSendRealtimeInputParametersToMldev(fromObject) {
    const toObject = {};
    const fromMedia = getValueByPath(fromObject, ["media"]);
    if (fromMedia != null) {
      let transformedList = tBlobs(fromMedia);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return item;
        });
      }
      setValueByPath(toObject, ["mediaChunks"], transformedList);
    }
    const fromAudio = getValueByPath(fromObject, ["audio"]);
    if (fromAudio != null) {
      setValueByPath(toObject, ["audio"], tAudioBlob(fromAudio));
    }
    const fromAudioStreamEnd = getValueByPath(fromObject, [
      "audioStreamEnd"
    ]);
    if (fromAudioStreamEnd != null) {
      setValueByPath(toObject, ["audioStreamEnd"], fromAudioStreamEnd);
    }
    const fromVideo = getValueByPath(fromObject, ["video"]);
    if (fromVideo != null) {
      setValueByPath(toObject, ["video"], tImageBlob(fromVideo));
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    const fromActivityStart = getValueByPath(fromObject, [
      "activityStart"
    ]);
    if (fromActivityStart != null) {
      setValueByPath(toObject, ["activityStart"], activityStartToMldev());
    }
    const fromActivityEnd = getValueByPath(fromObject, ["activityEnd"]);
    if (fromActivityEnd != null) {
      setValueByPath(toObject, ["activityEnd"], activityEndToMldev());
    }
    return toObject;
  }
  function liveSendRealtimeInputParametersToVertex(fromObject) {
    const toObject = {};
    const fromMedia = getValueByPath(fromObject, ["media"]);
    if (fromMedia != null) {
      let transformedList = tBlobs(fromMedia);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return item;
        });
      }
      setValueByPath(toObject, ["mediaChunks"], transformedList);
    }
    const fromAudio = getValueByPath(fromObject, ["audio"]);
    if (fromAudio != null) {
      setValueByPath(toObject, ["audio"], tAudioBlob(fromAudio));
    }
    const fromAudioStreamEnd = getValueByPath(fromObject, [
      "audioStreamEnd"
    ]);
    if (fromAudioStreamEnd != null) {
      setValueByPath(toObject, ["audioStreamEnd"], fromAudioStreamEnd);
    }
    const fromVideo = getValueByPath(fromObject, ["video"]);
    if (fromVideo != null) {
      setValueByPath(toObject, ["video"], tImageBlob(fromVideo));
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    const fromActivityStart = getValueByPath(fromObject, [
      "activityStart"
    ]);
    if (fromActivityStart != null) {
      setValueByPath(toObject, ["activityStart"], activityStartToVertex());
    }
    const fromActivityEnd = getValueByPath(fromObject, ["activityEnd"]);
    if (fromActivityEnd != null) {
      setValueByPath(toObject, ["activityEnd"], activityEndToVertex());
    }
    return toObject;
  }
  function liveServerContentFromMldev(fromObject) {
    const toObject = {};
    const fromModelTurn = getValueByPath(fromObject, ["modelTurn"]);
    if (fromModelTurn != null) {
      setValueByPath(toObject, ["modelTurn"], contentFromMldev$1(fromModelTurn));
    }
    const fromTurnComplete = getValueByPath(fromObject, ["turnComplete"]);
    if (fromTurnComplete != null) {
      setValueByPath(toObject, ["turnComplete"], fromTurnComplete);
    }
    const fromInterrupted = getValueByPath(fromObject, ["interrupted"]);
    if (fromInterrupted != null) {
      setValueByPath(toObject, ["interrupted"], fromInterrupted);
    }
    const fromGroundingMetadata = getValueByPath(fromObject, [
      "groundingMetadata"
    ]);
    if (fromGroundingMetadata != null) {
      setValueByPath(toObject, ["groundingMetadata"], fromGroundingMetadata);
    }
    const fromGenerationComplete = getValueByPath(fromObject, [
      "generationComplete"
    ]);
    if (fromGenerationComplete != null) {
      setValueByPath(toObject, ["generationComplete"], fromGenerationComplete);
    }
    const fromInputTranscription = getValueByPath(fromObject, [
      "inputTranscription"
    ]);
    if (fromInputTranscription != null) {
      setValueByPath(toObject, ["inputTranscription"], transcriptionFromMldev(fromInputTranscription));
    }
    const fromOutputTranscription = getValueByPath(fromObject, [
      "outputTranscription"
    ]);
    if (fromOutputTranscription != null) {
      setValueByPath(toObject, ["outputTranscription"], transcriptionFromMldev(fromOutputTranscription));
    }
    const fromUrlContextMetadata = getValueByPath(fromObject, [
      "urlContextMetadata"
    ]);
    if (fromUrlContextMetadata != null) {
      setValueByPath(toObject, ["urlContextMetadata"], urlContextMetadataFromMldev$1(fromUrlContextMetadata));
    }
    const fromTurnCompleteReason = getValueByPath(fromObject, [
      "turnCompleteReason"
    ]);
    if (fromTurnCompleteReason != null) {
      setValueByPath(toObject, ["turnCompleteReason"], fromTurnCompleteReason);
    }
    const fromWaitingForInput = getValueByPath(fromObject, [
      "waitingForInput"
    ]);
    if (fromWaitingForInput != null) {
      setValueByPath(toObject, ["waitingForInput"], fromWaitingForInput);
    }
    return toObject;
  }
  function liveServerContentFromVertex(fromObject) {
    const toObject = {};
    const fromModelTurn = getValueByPath(fromObject, ["modelTurn"]);
    if (fromModelTurn != null) {
      setValueByPath(toObject, ["modelTurn"], contentFromVertex$1(fromModelTurn));
    }
    const fromTurnComplete = getValueByPath(fromObject, ["turnComplete"]);
    if (fromTurnComplete != null) {
      setValueByPath(toObject, ["turnComplete"], fromTurnComplete);
    }
    const fromInterrupted = getValueByPath(fromObject, ["interrupted"]);
    if (fromInterrupted != null) {
      setValueByPath(toObject, ["interrupted"], fromInterrupted);
    }
    const fromGroundingMetadata = getValueByPath(fromObject, [
      "groundingMetadata"
    ]);
    if (fromGroundingMetadata != null) {
      setValueByPath(toObject, ["groundingMetadata"], fromGroundingMetadata);
    }
    const fromGenerationComplete = getValueByPath(fromObject, [
      "generationComplete"
    ]);
    if (fromGenerationComplete != null) {
      setValueByPath(toObject, ["generationComplete"], fromGenerationComplete);
    }
    const fromInputTranscription = getValueByPath(fromObject, [
      "inputTranscription"
    ]);
    if (fromInputTranscription != null) {
      setValueByPath(toObject, ["inputTranscription"], transcriptionFromVertex(fromInputTranscription));
    }
    const fromOutputTranscription = getValueByPath(fromObject, [
      "outputTranscription"
    ]);
    if (fromOutputTranscription != null) {
      setValueByPath(toObject, ["outputTranscription"], transcriptionFromVertex(fromOutputTranscription));
    }
    const fromTurnCompleteReason = getValueByPath(fromObject, [
      "turnCompleteReason"
    ]);
    if (fromTurnCompleteReason != null) {
      setValueByPath(toObject, ["turnCompleteReason"], fromTurnCompleteReason);
    }
    const fromWaitingForInput = getValueByPath(fromObject, [
      "waitingForInput"
    ]);
    if (fromWaitingForInput != null) {
      setValueByPath(toObject, ["waitingForInput"], fromWaitingForInput);
    }
    return toObject;
  }
  function liveServerGoAwayFromMldev(fromObject) {
    const toObject = {};
    const fromTimeLeft = getValueByPath(fromObject, ["timeLeft"]);
    if (fromTimeLeft != null) {
      setValueByPath(toObject, ["timeLeft"], fromTimeLeft);
    }
    return toObject;
  }
  function liveServerGoAwayFromVertex(fromObject) {
    const toObject = {};
    const fromTimeLeft = getValueByPath(fromObject, ["timeLeft"]);
    if (fromTimeLeft != null) {
      setValueByPath(toObject, ["timeLeft"], fromTimeLeft);
    }
    return toObject;
  }
  function liveServerMessageFromMldev(fromObject) {
    const toObject = {};
    const fromSetupComplete = getValueByPath(fromObject, [
      "setupComplete"
    ]);
    if (fromSetupComplete != null) {
      setValueByPath(toObject, ["setupComplete"], liveServerSetupCompleteFromMldev());
    }
    const fromServerContent = getValueByPath(fromObject, [
      "serverContent"
    ]);
    if (fromServerContent != null) {
      setValueByPath(toObject, ["serverContent"], liveServerContentFromMldev(fromServerContent));
    }
    const fromToolCall = getValueByPath(fromObject, ["toolCall"]);
    if (fromToolCall != null) {
      setValueByPath(toObject, ["toolCall"], liveServerToolCallFromMldev(fromToolCall));
    }
    const fromToolCallCancellation = getValueByPath(fromObject, [
      "toolCallCancellation"
    ]);
    if (fromToolCallCancellation != null) {
      setValueByPath(toObject, ["toolCallCancellation"], liveServerToolCallCancellationFromMldev(fromToolCallCancellation));
    }
    const fromUsageMetadata = getValueByPath(fromObject, [
      "usageMetadata"
    ]);
    if (fromUsageMetadata != null) {
      setValueByPath(toObject, ["usageMetadata"], usageMetadataFromMldev(fromUsageMetadata));
    }
    const fromGoAway = getValueByPath(fromObject, ["goAway"]);
    if (fromGoAway != null) {
      setValueByPath(toObject, ["goAway"], liveServerGoAwayFromMldev(fromGoAway));
    }
    const fromSessionResumptionUpdate = getValueByPath(fromObject, [
      "sessionResumptionUpdate"
    ]);
    if (fromSessionResumptionUpdate != null) {
      setValueByPath(toObject, ["sessionResumptionUpdate"], liveServerSessionResumptionUpdateFromMldev(fromSessionResumptionUpdate));
    }
    return toObject;
  }
  function liveServerMessageFromVertex(fromObject) {
    const toObject = {};
    const fromSetupComplete = getValueByPath(fromObject, [
      "setupComplete"
    ]);
    if (fromSetupComplete != null) {
      setValueByPath(toObject, ["setupComplete"], liveServerSetupCompleteFromVertex(fromSetupComplete));
    }
    const fromServerContent = getValueByPath(fromObject, [
      "serverContent"
    ]);
    if (fromServerContent != null) {
      setValueByPath(toObject, ["serverContent"], liveServerContentFromVertex(fromServerContent));
    }
    const fromToolCall = getValueByPath(fromObject, ["toolCall"]);
    if (fromToolCall != null) {
      setValueByPath(toObject, ["toolCall"], liveServerToolCallFromVertex(fromToolCall));
    }
    const fromToolCallCancellation = getValueByPath(fromObject, [
      "toolCallCancellation"
    ]);
    if (fromToolCallCancellation != null) {
      setValueByPath(toObject, ["toolCallCancellation"], liveServerToolCallCancellationFromVertex(fromToolCallCancellation));
    }
    const fromUsageMetadata = getValueByPath(fromObject, [
      "usageMetadata"
    ]);
    if (fromUsageMetadata != null) {
      setValueByPath(toObject, ["usageMetadata"], usageMetadataFromVertex(fromUsageMetadata));
    }
    const fromGoAway = getValueByPath(fromObject, ["goAway"]);
    if (fromGoAway != null) {
      setValueByPath(toObject, ["goAway"], liveServerGoAwayFromVertex(fromGoAway));
    }
    const fromSessionResumptionUpdate = getValueByPath(fromObject, [
      "sessionResumptionUpdate"
    ]);
    if (fromSessionResumptionUpdate != null) {
      setValueByPath(toObject, ["sessionResumptionUpdate"], liveServerSessionResumptionUpdateFromVertex(fromSessionResumptionUpdate));
    }
    return toObject;
  }
  function liveServerSessionResumptionUpdateFromMldev(fromObject) {
    const toObject = {};
    const fromNewHandle = getValueByPath(fromObject, ["newHandle"]);
    if (fromNewHandle != null) {
      setValueByPath(toObject, ["newHandle"], fromNewHandle);
    }
    const fromResumable = getValueByPath(fromObject, ["resumable"]);
    if (fromResumable != null) {
      setValueByPath(toObject, ["resumable"], fromResumable);
    }
    const fromLastConsumedClientMessageIndex = getValueByPath(fromObject, [
      "lastConsumedClientMessageIndex"
    ]);
    if (fromLastConsumedClientMessageIndex != null) {
      setValueByPath(toObject, ["lastConsumedClientMessageIndex"], fromLastConsumedClientMessageIndex);
    }
    return toObject;
  }
  function liveServerSessionResumptionUpdateFromVertex(fromObject) {
    const toObject = {};
    const fromNewHandle = getValueByPath(fromObject, ["newHandle"]);
    if (fromNewHandle != null) {
      setValueByPath(toObject, ["newHandle"], fromNewHandle);
    }
    const fromResumable = getValueByPath(fromObject, ["resumable"]);
    if (fromResumable != null) {
      setValueByPath(toObject, ["resumable"], fromResumable);
    }
    const fromLastConsumedClientMessageIndex = getValueByPath(fromObject, [
      "lastConsumedClientMessageIndex"
    ]);
    if (fromLastConsumedClientMessageIndex != null) {
      setValueByPath(toObject, ["lastConsumedClientMessageIndex"], fromLastConsumedClientMessageIndex);
    }
    return toObject;
  }
  function liveServerSetupCompleteFromMldev() {
    const toObject = {};
    return toObject;
  }
  function liveServerSetupCompleteFromVertex(fromObject) {
    const toObject = {};
    const fromSessionId = getValueByPath(fromObject, ["sessionId"]);
    if (fromSessionId != null) {
      setValueByPath(toObject, ["sessionId"], fromSessionId);
    }
    return toObject;
  }
  function liveServerToolCallCancellationFromMldev(fromObject) {
    const toObject = {};
    const fromIds = getValueByPath(fromObject, ["ids"]);
    if (fromIds != null) {
      setValueByPath(toObject, ["ids"], fromIds);
    }
    return toObject;
  }
  function liveServerToolCallCancellationFromVertex(fromObject) {
    const toObject = {};
    const fromIds = getValueByPath(fromObject, ["ids"]);
    if (fromIds != null) {
      setValueByPath(toObject, ["ids"], fromIds);
    }
    return toObject;
  }
  function liveServerToolCallFromMldev(fromObject) {
    const toObject = {};
    const fromFunctionCalls = getValueByPath(fromObject, [
      "functionCalls"
    ]);
    if (fromFunctionCalls != null) {
      let transformedList = fromFunctionCalls;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionCallFromMldev$1(item);
        });
      }
      setValueByPath(toObject, ["functionCalls"], transformedList);
    }
    return toObject;
  }
  function liveServerToolCallFromVertex(fromObject) {
    const toObject = {};
    const fromFunctionCalls = getValueByPath(fromObject, [
      "functionCalls"
    ]);
    if (fromFunctionCalls != null) {
      let transformedList = fromFunctionCalls;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionCallFromVertex$1(item);
        });
      }
      setValueByPath(toObject, ["functionCalls"], transformedList);
    }
    return toObject;
  }
  function modalityTokenCountFromMldev(fromObject) {
    const toObject = {};
    const fromModality = getValueByPath(fromObject, ["modality"]);
    if (fromModality != null) {
      setValueByPath(toObject, ["modality"], fromModality);
    }
    const fromTokenCount = getValueByPath(fromObject, ["tokenCount"]);
    if (fromTokenCount != null) {
      setValueByPath(toObject, ["tokenCount"], fromTokenCount);
    }
    return toObject;
  }
  function modalityTokenCountFromVertex(fromObject) {
    const toObject = {};
    const fromModality = getValueByPath(fromObject, ["modality"]);
    if (fromModality != null) {
      setValueByPath(toObject, ["modality"], fromModality);
    }
    const fromTokenCount = getValueByPath(fromObject, ["tokenCount"]);
    if (fromTokenCount != null) {
      setValueByPath(toObject, ["tokenCount"], fromTokenCount);
    }
    return toObject;
  }
  function multiSpeakerVoiceConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromSpeakerVoiceConfigs = getValueByPath(fromObject, [
      "speakerVoiceConfigs"
    ]);
    if (fromSpeakerVoiceConfigs != null) {
      let transformedList = fromSpeakerVoiceConfigs;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return speakerVoiceConfigToMldev$2(item);
        });
      }
      setValueByPath(toObject, ["speakerVoiceConfigs"], transformedList);
    }
    return toObject;
  }
  function partFromMldev$1(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataFromMldev$1(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobFromMldev$1(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataFromMldev$1(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallFromMldev$1(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function partFromVertex$1(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataFromVertex$1(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobFromVertex$1(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataFromVertex$1(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallFromVertex$1(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function partToMldev$2(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataToMldev$2(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobToMldev$2(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataToMldev$2(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallToMldev$2(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function partToVertex$1(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataToVertex$1(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobToVertex$1(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataToVertex$1(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallToVertex$1(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function prebuiltVoiceConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromVoiceName = getValueByPath(fromObject, ["voiceName"]);
    if (fromVoiceName != null) {
      setValueByPath(toObject, ["voiceName"], fromVoiceName);
    }
    return toObject;
  }
  function prebuiltVoiceConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromVoiceName = getValueByPath(fromObject, ["voiceName"]);
    if (fromVoiceName != null) {
      setValueByPath(toObject, ["voiceName"], fromVoiceName);
    }
    return toObject;
  }
  function proactivityConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromProactiveAudio = getValueByPath(fromObject, [
      "proactiveAudio"
    ]);
    if (fromProactiveAudio != null) {
      setValueByPath(toObject, ["proactiveAudio"], fromProactiveAudio);
    }
    return toObject;
  }
  function proactivityConfigToVertex(fromObject) {
    const toObject = {};
    const fromProactiveAudio = getValueByPath(fromObject, [
      "proactiveAudio"
    ]);
    if (fromProactiveAudio != null) {
      setValueByPath(toObject, ["proactiveAudio"], fromProactiveAudio);
    }
    return toObject;
  }
  function realtimeInputConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromAutomaticActivityDetection = getValueByPath(fromObject, [
      "automaticActivityDetection"
    ]);
    if (fromAutomaticActivityDetection != null) {
      setValueByPath(toObject, ["automaticActivityDetection"], automaticActivityDetectionToMldev$1(fromAutomaticActivityDetection));
    }
    const fromActivityHandling = getValueByPath(fromObject, [
      "activityHandling"
    ]);
    if (fromActivityHandling != null) {
      setValueByPath(toObject, ["activityHandling"], fromActivityHandling);
    }
    const fromTurnCoverage = getValueByPath(fromObject, ["turnCoverage"]);
    if (fromTurnCoverage != null) {
      setValueByPath(toObject, ["turnCoverage"], fromTurnCoverage);
    }
    return toObject;
  }
  function realtimeInputConfigToVertex(fromObject) {
    const toObject = {};
    const fromAutomaticActivityDetection = getValueByPath(fromObject, [
      "automaticActivityDetection"
    ]);
    if (fromAutomaticActivityDetection != null) {
      setValueByPath(toObject, ["automaticActivityDetection"], automaticActivityDetectionToVertex(fromAutomaticActivityDetection));
    }
    const fromActivityHandling = getValueByPath(fromObject, [
      "activityHandling"
    ]);
    if (fromActivityHandling != null) {
      setValueByPath(toObject, ["activityHandling"], fromActivityHandling);
    }
    const fromTurnCoverage = getValueByPath(fromObject, ["turnCoverage"]);
    if (fromTurnCoverage != null) {
      setValueByPath(toObject, ["turnCoverage"], fromTurnCoverage);
    }
    return toObject;
  }
  function sessionResumptionConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromHandle = getValueByPath(fromObject, ["handle"]);
    if (fromHandle != null) {
      setValueByPath(toObject, ["handle"], fromHandle);
    }
    if (getValueByPath(fromObject, ["transparent"]) !== void 0) {
      throw new Error("transparent parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function sessionResumptionConfigToVertex(fromObject) {
    const toObject = {};
    const fromHandle = getValueByPath(fromObject, ["handle"]);
    if (fromHandle != null) {
      setValueByPath(toObject, ["handle"], fromHandle);
    }
    const fromTransparent = getValueByPath(fromObject, ["transparent"]);
    if (fromTransparent != null) {
      setValueByPath(toObject, ["transparent"], fromTransparent);
    }
    return toObject;
  }
  function slidingWindowToMldev$1(fromObject) {
    const toObject = {};
    const fromTargetTokens = getValueByPath(fromObject, ["targetTokens"]);
    if (fromTargetTokens != null) {
      setValueByPath(toObject, ["targetTokens"], fromTargetTokens);
    }
    return toObject;
  }
  function slidingWindowToVertex(fromObject) {
    const toObject = {};
    const fromTargetTokens = getValueByPath(fromObject, ["targetTokens"]);
    if (fromTargetTokens != null) {
      setValueByPath(toObject, ["targetTokens"], fromTargetTokens);
    }
    return toObject;
  }
  function speakerVoiceConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromSpeaker = getValueByPath(fromObject, ["speaker"]);
    if (fromSpeaker != null) {
      setValueByPath(toObject, ["speaker"], fromSpeaker);
    }
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToMldev$2(fromVoiceConfig));
    }
    return toObject;
  }
  function speechConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToMldev$2(fromVoiceConfig));
    }
    const fromMultiSpeakerVoiceConfig = getValueByPath(fromObject, [
      "multiSpeakerVoiceConfig"
    ]);
    if (fromMultiSpeakerVoiceConfig != null) {
      setValueByPath(toObject, ["multiSpeakerVoiceConfig"], multiSpeakerVoiceConfigToMldev$2(fromMultiSpeakerVoiceConfig));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function speechConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToVertex$1(fromVoiceConfig));
    }
    if (getValueByPath(fromObject, ["multiSpeakerVoiceConfig"]) !== void 0) {
      throw new Error("multiSpeakerVoiceConfig parameter is not supported in Vertex AI.");
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function toolComputerUseToMldev$2(fromObject) {
    const toObject = {};
    const fromEnvironment = getValueByPath(fromObject, ["environment"]);
    if (fromEnvironment != null) {
      setValueByPath(toObject, ["environment"], fromEnvironment);
    }
    const fromExcludedPredefinedFunctions = getValueByPath(fromObject, [
      "excludedPredefinedFunctions"
    ]);
    if (fromExcludedPredefinedFunctions != null) {
      setValueByPath(toObject, ["excludedPredefinedFunctions"], fromExcludedPredefinedFunctions);
    }
    return toObject;
  }
  function toolComputerUseToVertex$1(fromObject) {
    const toObject = {};
    const fromEnvironment = getValueByPath(fromObject, ["environment"]);
    if (fromEnvironment != null) {
      setValueByPath(toObject, ["environment"], fromEnvironment);
    }
    const fromExcludedPredefinedFunctions = getValueByPath(fromObject, [
      "excludedPredefinedFunctions"
    ]);
    if (fromExcludedPredefinedFunctions != null) {
      setValueByPath(toObject, ["excludedPredefinedFunctions"], fromExcludedPredefinedFunctions);
    }
    return toObject;
  }
  function toolToMldev$2(fromObject) {
    const toObject = {};
    const fromFunctionDeclarations = getValueByPath(fromObject, [
      "functionDeclarations"
    ]);
    if (fromFunctionDeclarations != null) {
      let transformedList = fromFunctionDeclarations;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionDeclarationToMldev$2(item);
        });
      }
      setValueByPath(toObject, ["functionDeclarations"], transformedList);
    }
    if (getValueByPath(fromObject, ["retrieval"]) !== void 0) {
      throw new Error("retrieval parameter is not supported in Gemini API.");
    }
    const fromGoogleSearch = getValueByPath(fromObject, ["googleSearch"]);
    if (fromGoogleSearch != null) {
      setValueByPath(toObject, ["googleSearch"], googleSearchToMldev$2(fromGoogleSearch));
    }
    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [
      "googleSearchRetrieval"
    ]);
    if (fromGoogleSearchRetrieval != null) {
      setValueByPath(toObject, ["googleSearchRetrieval"], googleSearchRetrievalToMldev$2(fromGoogleSearchRetrieval));
    }
    if (getValueByPath(fromObject, ["enterpriseWebSearch"]) !== void 0) {
      throw new Error("enterpriseWebSearch parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["googleMaps"]) !== void 0) {
      throw new Error("googleMaps parameter is not supported in Gemini API.");
    }
    const fromUrlContext = getValueByPath(fromObject, ["urlContext"]);
    if (fromUrlContext != null) {
      setValueByPath(toObject, ["urlContext"], urlContextToMldev$2());
    }
    const fromComputerUse = getValueByPath(fromObject, ["computerUse"]);
    if (fromComputerUse != null) {
      setValueByPath(toObject, ["computerUse"], toolComputerUseToMldev$2(fromComputerUse));
    }
    const fromCodeExecution = getValueByPath(fromObject, [
      "codeExecution"
    ]);
    if (fromCodeExecution != null) {
      setValueByPath(toObject, ["codeExecution"], fromCodeExecution);
    }
    return toObject;
  }
  function toolToVertex$1(fromObject) {
    const toObject = {};
    const fromFunctionDeclarations = getValueByPath(fromObject, [
      "functionDeclarations"
    ]);
    if (fromFunctionDeclarations != null) {
      let transformedList = fromFunctionDeclarations;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionDeclarationToVertex$1(item);
        });
      }
      setValueByPath(toObject, ["functionDeclarations"], transformedList);
    }
    const fromRetrieval = getValueByPath(fromObject, ["retrieval"]);
    if (fromRetrieval != null) {
      setValueByPath(toObject, ["retrieval"], fromRetrieval);
    }
    const fromGoogleSearch = getValueByPath(fromObject, ["googleSearch"]);
    if (fromGoogleSearch != null) {
      setValueByPath(toObject, ["googleSearch"], googleSearchToVertex$1(fromGoogleSearch));
    }
    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [
      "googleSearchRetrieval"
    ]);
    if (fromGoogleSearchRetrieval != null) {
      setValueByPath(toObject, ["googleSearchRetrieval"], googleSearchRetrievalToVertex$1(fromGoogleSearchRetrieval));
    }
    const fromEnterpriseWebSearch = getValueByPath(fromObject, [
      "enterpriseWebSearch"
    ]);
    if (fromEnterpriseWebSearch != null) {
      setValueByPath(toObject, ["enterpriseWebSearch"], enterpriseWebSearchToVertex$1(fromEnterpriseWebSearch));
    }
    const fromGoogleMaps = getValueByPath(fromObject, ["googleMaps"]);
    if (fromGoogleMaps != null) {
      setValueByPath(toObject, ["googleMaps"], googleMapsToVertex$1(fromGoogleMaps));
    }
    const fromUrlContext = getValueByPath(fromObject, ["urlContext"]);
    if (fromUrlContext != null) {
      setValueByPath(toObject, ["urlContext"], urlContextToVertex$1());
    }
    const fromComputerUse = getValueByPath(fromObject, ["computerUse"]);
    if (fromComputerUse != null) {
      setValueByPath(toObject, ["computerUse"], toolComputerUseToVertex$1(fromComputerUse));
    }
    const fromCodeExecution = getValueByPath(fromObject, [
      "codeExecution"
    ]);
    if (fromCodeExecution != null) {
      setValueByPath(toObject, ["codeExecution"], fromCodeExecution);
    }
    return toObject;
  }
  function transcriptionFromMldev(fromObject) {
    const toObject = {};
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    const fromFinished = getValueByPath(fromObject, ["finished"]);
    if (fromFinished != null) {
      setValueByPath(toObject, ["finished"], fromFinished);
    }
    return toObject;
  }
  function transcriptionFromVertex(fromObject) {
    const toObject = {};
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    const fromFinished = getValueByPath(fromObject, ["finished"]);
    if (fromFinished != null) {
      setValueByPath(toObject, ["finished"], fromFinished);
    }
    return toObject;
  }
  function urlContextMetadataFromMldev$1(fromObject) {
    const toObject = {};
    const fromUrlMetadata = getValueByPath(fromObject, ["urlMetadata"]);
    if (fromUrlMetadata != null) {
      let transformedList = fromUrlMetadata;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return urlMetadataFromMldev$1(item);
        });
      }
      setValueByPath(toObject, ["urlMetadata"], transformedList);
    }
    return toObject;
  }
  function urlContextToMldev$2() {
    const toObject = {};
    return toObject;
  }
  function urlContextToVertex$1() {
    const toObject = {};
    return toObject;
  }
  function urlMetadataFromMldev$1(fromObject) {
    const toObject = {};
    const fromRetrievedUrl = getValueByPath(fromObject, ["retrievedUrl"]);
    if (fromRetrievedUrl != null) {
      setValueByPath(toObject, ["retrievedUrl"], fromRetrievedUrl);
    }
    const fromUrlRetrievalStatus = getValueByPath(fromObject, [
      "urlRetrievalStatus"
    ]);
    if (fromUrlRetrievalStatus != null) {
      setValueByPath(toObject, ["urlRetrievalStatus"], fromUrlRetrievalStatus);
    }
    return toObject;
  }
  function usageMetadataFromMldev(fromObject) {
    const toObject = {};
    const fromPromptTokenCount = getValueByPath(fromObject, [
      "promptTokenCount"
    ]);
    if (fromPromptTokenCount != null) {
      setValueByPath(toObject, ["promptTokenCount"], fromPromptTokenCount);
    }
    const fromCachedContentTokenCount = getValueByPath(fromObject, [
      "cachedContentTokenCount"
    ]);
    if (fromCachedContentTokenCount != null) {
      setValueByPath(toObject, ["cachedContentTokenCount"], fromCachedContentTokenCount);
    }
    const fromResponseTokenCount = getValueByPath(fromObject, [
      "responseTokenCount"
    ]);
    if (fromResponseTokenCount != null) {
      setValueByPath(toObject, ["responseTokenCount"], fromResponseTokenCount);
    }
    const fromToolUsePromptTokenCount = getValueByPath(fromObject, [
      "toolUsePromptTokenCount"
    ]);
    if (fromToolUsePromptTokenCount != null) {
      setValueByPath(toObject, ["toolUsePromptTokenCount"], fromToolUsePromptTokenCount);
    }
    const fromThoughtsTokenCount = getValueByPath(fromObject, [
      "thoughtsTokenCount"
    ]);
    if (fromThoughtsTokenCount != null) {
      setValueByPath(toObject, ["thoughtsTokenCount"], fromThoughtsTokenCount);
    }
    const fromTotalTokenCount = getValueByPath(fromObject, [
      "totalTokenCount"
    ]);
    if (fromTotalTokenCount != null) {
      setValueByPath(toObject, ["totalTokenCount"], fromTotalTokenCount);
    }
    const fromPromptTokensDetails = getValueByPath(fromObject, [
      "promptTokensDetails"
    ]);
    if (fromPromptTokensDetails != null) {
      let transformedList = fromPromptTokensDetails;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modalityTokenCountFromMldev(item);
        });
      }
      setValueByPath(toObject, ["promptTokensDetails"], transformedList);
    }
    const fromCacheTokensDetails = getValueByPath(fromObject, [
      "cacheTokensDetails"
    ]);
    if (fromCacheTokensDetails != null) {
      let transformedList = fromCacheTokensDetails;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modalityTokenCountFromMldev(item);
        });
      }
      setValueByPath(toObject, ["cacheTokensDetails"], transformedList);
    }
    const fromResponseTokensDetails = getValueByPath(fromObject, [
      "responseTokensDetails"
    ]);
    if (fromResponseTokensDetails != null) {
      let transformedList = fromResponseTokensDetails;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modalityTokenCountFromMldev(item);
        });
      }
      setValueByPath(toObject, ["responseTokensDetails"], transformedList);
    }
    const fromToolUsePromptTokensDetails = getValueByPath(fromObject, [
      "toolUsePromptTokensDetails"
    ]);
    if (fromToolUsePromptTokensDetails != null) {
      let transformedList = fromToolUsePromptTokensDetails;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modalityTokenCountFromMldev(item);
        });
      }
      setValueByPath(toObject, ["toolUsePromptTokensDetails"], transformedList);
    }
    return toObject;
  }
  function usageMetadataFromVertex(fromObject) {
    const toObject = {};
    const fromPromptTokenCount = getValueByPath(fromObject, [
      "promptTokenCount"
    ]);
    if (fromPromptTokenCount != null) {
      setValueByPath(toObject, ["promptTokenCount"], fromPromptTokenCount);
    }
    const fromCachedContentTokenCount = getValueByPath(fromObject, [
      "cachedContentTokenCount"
    ]);
    if (fromCachedContentTokenCount != null) {
      setValueByPath(toObject, ["cachedContentTokenCount"], fromCachedContentTokenCount);
    }
    const fromResponseTokenCount = getValueByPath(fromObject, [
      "candidatesTokenCount"
    ]);
    if (fromResponseTokenCount != null) {
      setValueByPath(toObject, ["responseTokenCount"], fromResponseTokenCount);
    }
    const fromToolUsePromptTokenCount = getValueByPath(fromObject, [
      "toolUsePromptTokenCount"
    ]);
    if (fromToolUsePromptTokenCount != null) {
      setValueByPath(toObject, ["toolUsePromptTokenCount"], fromToolUsePromptTokenCount);
    }
    const fromThoughtsTokenCount = getValueByPath(fromObject, [
      "thoughtsTokenCount"
    ]);
    if (fromThoughtsTokenCount != null) {
      setValueByPath(toObject, ["thoughtsTokenCount"], fromThoughtsTokenCount);
    }
    const fromTotalTokenCount = getValueByPath(fromObject, [
      "totalTokenCount"
    ]);
    if (fromTotalTokenCount != null) {
      setValueByPath(toObject, ["totalTokenCount"], fromTotalTokenCount);
    }
    const fromPromptTokensDetails = getValueByPath(fromObject, [
      "promptTokensDetails"
    ]);
    if (fromPromptTokensDetails != null) {
      let transformedList = fromPromptTokensDetails;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modalityTokenCountFromVertex(item);
        });
      }
      setValueByPath(toObject, ["promptTokensDetails"], transformedList);
    }
    const fromCacheTokensDetails = getValueByPath(fromObject, [
      "cacheTokensDetails"
    ]);
    if (fromCacheTokensDetails != null) {
      let transformedList = fromCacheTokensDetails;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modalityTokenCountFromVertex(item);
        });
      }
      setValueByPath(toObject, ["cacheTokensDetails"], transformedList);
    }
    const fromResponseTokensDetails = getValueByPath(fromObject, [
      "candidatesTokensDetails"
    ]);
    if (fromResponseTokensDetails != null) {
      let transformedList = fromResponseTokensDetails;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modalityTokenCountFromVertex(item);
        });
      }
      setValueByPath(toObject, ["responseTokensDetails"], transformedList);
    }
    const fromToolUsePromptTokensDetails = getValueByPath(fromObject, [
      "toolUsePromptTokensDetails"
    ]);
    if (fromToolUsePromptTokensDetails != null) {
      let transformedList = fromToolUsePromptTokensDetails;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modalityTokenCountFromVertex(item);
        });
      }
      setValueByPath(toObject, ["toolUsePromptTokensDetails"], transformedList);
    }
    const fromTrafficType = getValueByPath(fromObject, ["trafficType"]);
    if (fromTrafficType != null) {
      setValueByPath(toObject, ["trafficType"], fromTrafficType);
    }
    return toObject;
  }
  function videoMetadataFromMldev$1(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoMetadataFromVertex$1(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoMetadataToMldev$2(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoMetadataToVertex$1(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function voiceConfigToMldev$2(fromObject) {
    const toObject = {};
    const fromPrebuiltVoiceConfig = getValueByPath(fromObject, [
      "prebuiltVoiceConfig"
    ]);
    if (fromPrebuiltVoiceConfig != null) {
      setValueByPath(toObject, ["prebuiltVoiceConfig"], prebuiltVoiceConfigToMldev$2(fromPrebuiltVoiceConfig));
    }
    return toObject;
  }
  function voiceConfigToVertex$1(fromObject) {
    const toObject = {};
    const fromPrebuiltVoiceConfig = getValueByPath(fromObject, [
      "prebuiltVoiceConfig"
    ]);
    if (fromPrebuiltVoiceConfig != null) {
      setValueByPath(toObject, ["prebuiltVoiceConfig"], prebuiltVoiceConfigToVertex$1(fromPrebuiltVoiceConfig));
    }
    return toObject;
  }
  function weightedPromptFromMldev(fromObject) {
    const toObject = {};
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    const fromWeight = getValueByPath(fromObject, ["weight"]);
    if (fromWeight != null) {
      setValueByPath(toObject, ["weight"], fromWeight);
    }
    return toObject;
  }
  function weightedPromptToMldev(fromObject) {
    const toObject = {};
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    const fromWeight = getValueByPath(fromObject, ["weight"]);
    if (fromWeight != null) {
      setValueByPath(toObject, ["weight"], fromWeight);
    }
    return toObject;
  }
  function apiKeyConfigToVertex(fromObject) {
    const toObject = {};
    const fromApiKeyString = getValueByPath(fromObject, ["apiKeyString"]);
    if (fromApiKeyString != null) {
      setValueByPath(toObject, ["apiKeyString"], fromApiKeyString);
    }
    return toObject;
  }
  function authConfigToVertex(fromObject) {
    const toObject = {};
    const fromApiKeyConfig = getValueByPath(fromObject, ["apiKeyConfig"]);
    if (fromApiKeyConfig != null) {
      setValueByPath(toObject, ["apiKeyConfig"], apiKeyConfigToVertex(fromApiKeyConfig));
    }
    const fromAuthType = getValueByPath(fromObject, ["authType"]);
    if (fromAuthType != null) {
      setValueByPath(toObject, ["authType"], fromAuthType);
    }
    const fromGoogleServiceAccountConfig = getValueByPath(fromObject, [
      "googleServiceAccountConfig"
    ]);
    if (fromGoogleServiceAccountConfig != null) {
      setValueByPath(toObject, ["googleServiceAccountConfig"], fromGoogleServiceAccountConfig);
    }
    const fromHttpBasicAuthConfig = getValueByPath(fromObject, [
      "httpBasicAuthConfig"
    ]);
    if (fromHttpBasicAuthConfig != null) {
      setValueByPath(toObject, ["httpBasicAuthConfig"], fromHttpBasicAuthConfig);
    }
    const fromOauthConfig = getValueByPath(fromObject, ["oauthConfig"]);
    if (fromOauthConfig != null) {
      setValueByPath(toObject, ["oauthConfig"], fromOauthConfig);
    }
    const fromOidcConfig = getValueByPath(fromObject, ["oidcConfig"]);
    if (fromOidcConfig != null) {
      setValueByPath(toObject, ["oidcConfig"], fromOidcConfig);
    }
    return toObject;
  }
  function blobFromMldev(fromObject) {
    const toObject = {};
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function blobFromVertex(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function blobToMldev$1(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function blobToVertex(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function candidateFromMldev(fromObject) {
    const toObject = {};
    const fromContent = getValueByPath(fromObject, ["content"]);
    if (fromContent != null) {
      setValueByPath(toObject, ["content"], contentFromMldev(fromContent));
    }
    const fromCitationMetadata = getValueByPath(fromObject, [
      "citationMetadata"
    ]);
    if (fromCitationMetadata != null) {
      setValueByPath(toObject, ["citationMetadata"], citationMetadataFromMldev(fromCitationMetadata));
    }
    const fromTokenCount = getValueByPath(fromObject, ["tokenCount"]);
    if (fromTokenCount != null) {
      setValueByPath(toObject, ["tokenCount"], fromTokenCount);
    }
    const fromFinishReason = getValueByPath(fromObject, ["finishReason"]);
    if (fromFinishReason != null) {
      setValueByPath(toObject, ["finishReason"], fromFinishReason);
    }
    const fromUrlContextMetadata = getValueByPath(fromObject, [
      "urlContextMetadata"
    ]);
    if (fromUrlContextMetadata != null) {
      setValueByPath(toObject, ["urlContextMetadata"], urlContextMetadataFromMldev(fromUrlContextMetadata));
    }
    const fromAvgLogprobs = getValueByPath(fromObject, ["avgLogprobs"]);
    if (fromAvgLogprobs != null) {
      setValueByPath(toObject, ["avgLogprobs"], fromAvgLogprobs);
    }
    const fromGroundingMetadata = getValueByPath(fromObject, [
      "groundingMetadata"
    ]);
    if (fromGroundingMetadata != null) {
      setValueByPath(toObject, ["groundingMetadata"], fromGroundingMetadata);
    }
    const fromIndex = getValueByPath(fromObject, ["index"]);
    if (fromIndex != null) {
      setValueByPath(toObject, ["index"], fromIndex);
    }
    const fromLogprobsResult = getValueByPath(fromObject, [
      "logprobsResult"
    ]);
    if (fromLogprobsResult != null) {
      setValueByPath(toObject, ["logprobsResult"], fromLogprobsResult);
    }
    const fromSafetyRatings = getValueByPath(fromObject, [
      "safetyRatings"
    ]);
    if (fromSafetyRatings != null) {
      setValueByPath(toObject, ["safetyRatings"], fromSafetyRatings);
    }
    return toObject;
  }
  function candidateFromVertex(fromObject) {
    const toObject = {};
    const fromContent = getValueByPath(fromObject, ["content"]);
    if (fromContent != null) {
      setValueByPath(toObject, ["content"], contentFromVertex(fromContent));
    }
    const fromCitationMetadata = getValueByPath(fromObject, [
      "citationMetadata"
    ]);
    if (fromCitationMetadata != null) {
      setValueByPath(toObject, ["citationMetadata"], citationMetadataFromVertex(fromCitationMetadata));
    }
    const fromFinishMessage = getValueByPath(fromObject, [
      "finishMessage"
    ]);
    if (fromFinishMessage != null) {
      setValueByPath(toObject, ["finishMessage"], fromFinishMessage);
    }
    const fromFinishReason = getValueByPath(fromObject, ["finishReason"]);
    if (fromFinishReason != null) {
      setValueByPath(toObject, ["finishReason"], fromFinishReason);
    }
    const fromUrlContextMetadata = getValueByPath(fromObject, [
      "urlContextMetadata"
    ]);
    if (fromUrlContextMetadata != null) {
      setValueByPath(toObject, ["urlContextMetadata"], urlContextMetadataFromVertex(fromUrlContextMetadata));
    }
    const fromAvgLogprobs = getValueByPath(fromObject, ["avgLogprobs"]);
    if (fromAvgLogprobs != null) {
      setValueByPath(toObject, ["avgLogprobs"], fromAvgLogprobs);
    }
    const fromGroundingMetadata = getValueByPath(fromObject, [
      "groundingMetadata"
    ]);
    if (fromGroundingMetadata != null) {
      setValueByPath(toObject, ["groundingMetadata"], fromGroundingMetadata);
    }
    const fromIndex = getValueByPath(fromObject, ["index"]);
    if (fromIndex != null) {
      setValueByPath(toObject, ["index"], fromIndex);
    }
    const fromLogprobsResult = getValueByPath(fromObject, [
      "logprobsResult"
    ]);
    if (fromLogprobsResult != null) {
      setValueByPath(toObject, ["logprobsResult"], fromLogprobsResult);
    }
    const fromSafetyRatings = getValueByPath(fromObject, [
      "safetyRatings"
    ]);
    if (fromSafetyRatings != null) {
      setValueByPath(toObject, ["safetyRatings"], fromSafetyRatings);
    }
    return toObject;
  }
  function checkpointFromVertex(fromObject) {
    const toObject = {};
    const fromCheckpointId = getValueByPath(fromObject, ["checkpointId"]);
    if (fromCheckpointId != null) {
      setValueByPath(toObject, ["checkpointId"], fromCheckpointId);
    }
    const fromEpoch = getValueByPath(fromObject, ["epoch"]);
    if (fromEpoch != null) {
      setValueByPath(toObject, ["epoch"], fromEpoch);
    }
    const fromStep = getValueByPath(fromObject, ["step"]);
    if (fromStep != null) {
      setValueByPath(toObject, ["step"], fromStep);
    }
    return toObject;
  }
  function citationMetadataFromMldev(fromObject) {
    const toObject = {};
    const fromCitations = getValueByPath(fromObject, ["citationSources"]);
    if (fromCitations != null) {
      setValueByPath(toObject, ["citations"], fromCitations);
    }
    return toObject;
  }
  function citationMetadataFromVertex(fromObject) {
    const toObject = {};
    const fromCitations = getValueByPath(fromObject, ["citations"]);
    if (fromCitations != null) {
      setValueByPath(toObject, ["citations"], fromCitations);
    }
    return toObject;
  }
  function computeTokensParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      let transformedList = tContents(fromContents);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentToVertex(item);
        });
      }
      setValueByPath(toObject, ["contents"], transformedList);
    }
    return toObject;
  }
  function computeTokensResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromTokensInfo = getValueByPath(fromObject, ["tokensInfo"]);
    if (fromTokensInfo != null) {
      setValueByPath(toObject, ["tokensInfo"], fromTokensInfo);
    }
    return toObject;
  }
  function contentEmbeddingFromMldev(fromObject) {
    const toObject = {};
    const fromValues = getValueByPath(fromObject, ["values"]);
    if (fromValues != null) {
      setValueByPath(toObject, ["values"], fromValues);
    }
    return toObject;
  }
  function contentEmbeddingFromVertex(fromObject) {
    const toObject = {};
    const fromValues = getValueByPath(fromObject, ["values"]);
    if (fromValues != null) {
      setValueByPath(toObject, ["values"], fromValues);
    }
    const fromStatistics = getValueByPath(fromObject, ["statistics"]);
    if (fromStatistics != null) {
      setValueByPath(toObject, ["statistics"], contentEmbeddingStatisticsFromVertex(fromStatistics));
    }
    return toObject;
  }
  function contentEmbeddingStatisticsFromVertex(fromObject) {
    const toObject = {};
    const fromTruncated = getValueByPath(fromObject, ["truncated"]);
    if (fromTruncated != null) {
      setValueByPath(toObject, ["truncated"], fromTruncated);
    }
    const fromTokenCount = getValueByPath(fromObject, ["token_count"]);
    if (fromTokenCount != null) {
      setValueByPath(toObject, ["tokenCount"], fromTokenCount);
    }
    return toObject;
  }
  function contentFromMldev(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partFromMldev(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contentFromVertex(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partFromVertex(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contentToMldev$1(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partToMldev$1(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contentToVertex(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partToVertex(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function controlReferenceConfigToVertex(fromObject) {
    const toObject = {};
    const fromControlType = getValueByPath(fromObject, ["controlType"]);
    if (fromControlType != null) {
      setValueByPath(toObject, ["controlType"], fromControlType);
    }
    const fromEnableControlImageComputation = getValueByPath(fromObject, [
      "enableControlImageComputation"
    ]);
    if (fromEnableControlImageComputation != null) {
      setValueByPath(toObject, ["computeControl"], fromEnableControlImageComputation);
    }
    return toObject;
  }
  function countTokensConfigToMldev(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["systemInstruction"]) !== void 0) {
      throw new Error("systemInstruction parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["tools"]) !== void 0) {
      throw new Error("tools parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["generationConfig"]) !== void 0) {
      throw new Error("generationConfig parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function countTokensConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["systemInstruction"], contentToVertex(tContent(fromSystemInstruction)));
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = fromTools;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToVertex(item);
        });
      }
      setValueByPath(parentObject, ["tools"], transformedList);
    }
    const fromGenerationConfig = getValueByPath(fromObject, [
      "generationConfig"
    ]);
    if (parentObject !== void 0 && fromGenerationConfig != null) {
      setValueByPath(parentObject, ["generationConfig"], fromGenerationConfig);
    }
    return toObject;
  }
  function countTokensParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      let transformedList = tContents(fromContents);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentToMldev$1(item);
        });
      }
      setValueByPath(toObject, ["contents"], transformedList);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      countTokensConfigToMldev(fromConfig);
    }
    return toObject;
  }
  function countTokensParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      let transformedList = tContents(fromContents);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentToVertex(item);
        });
      }
      setValueByPath(toObject, ["contents"], transformedList);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      countTokensConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function countTokensResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromTotalTokens = getValueByPath(fromObject, ["totalTokens"]);
    if (fromTotalTokens != null) {
      setValueByPath(toObject, ["totalTokens"], fromTotalTokens);
    }
    const fromCachedContentTokenCount = getValueByPath(fromObject, [
      "cachedContentTokenCount"
    ]);
    if (fromCachedContentTokenCount != null) {
      setValueByPath(toObject, ["cachedContentTokenCount"], fromCachedContentTokenCount);
    }
    return toObject;
  }
  function countTokensResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromTotalTokens = getValueByPath(fromObject, ["totalTokens"]);
    if (fromTotalTokens != null) {
      setValueByPath(toObject, ["totalTokens"], fromTotalTokens);
    }
    return toObject;
  }
  function deleteModelParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "name"], tModel(apiClient, fromModel));
    }
    return toObject;
  }
  function deleteModelParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "name"], tModel(apiClient, fromModel));
    }
    return toObject;
  }
  function deleteModelResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    return toObject;
  }
  function deleteModelResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    return toObject;
  }
  function dynamicRetrievalConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromDynamicThreshold = getValueByPath(fromObject, [
      "dynamicThreshold"
    ]);
    if (fromDynamicThreshold != null) {
      setValueByPath(toObject, ["dynamicThreshold"], fromDynamicThreshold);
    }
    return toObject;
  }
  function dynamicRetrievalConfigToVertex(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromDynamicThreshold = getValueByPath(fromObject, [
      "dynamicThreshold"
    ]);
    if (fromDynamicThreshold != null) {
      setValueByPath(toObject, ["dynamicThreshold"], fromDynamicThreshold);
    }
    return toObject;
  }
  function editImageConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromOutputGcsUri = getValueByPath(fromObject, ["outputGcsUri"]);
    if (parentObject !== void 0 && fromOutputGcsUri != null) {
      setValueByPath(parentObject, ["parameters", "storageUri"], fromOutputGcsUri);
    }
    const fromNegativePrompt = getValueByPath(fromObject, [
      "negativePrompt"
    ]);
    if (parentObject !== void 0 && fromNegativePrompt != null) {
      setValueByPath(parentObject, ["parameters", "negativePrompt"], fromNegativePrompt);
    }
    const fromNumberOfImages = getValueByPath(fromObject, [
      "numberOfImages"
    ]);
    if (parentObject !== void 0 && fromNumberOfImages != null) {
      setValueByPath(parentObject, ["parameters", "sampleCount"], fromNumberOfImages);
    }
    const fromAspectRatio = getValueByPath(fromObject, ["aspectRatio"]);
    if (parentObject !== void 0 && fromAspectRatio != null) {
      setValueByPath(parentObject, ["parameters", "aspectRatio"], fromAspectRatio);
    }
    const fromGuidanceScale = getValueByPath(fromObject, [
      "guidanceScale"
    ]);
    if (parentObject !== void 0 && fromGuidanceScale != null) {
      setValueByPath(parentObject, ["parameters", "guidanceScale"], fromGuidanceScale);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (parentObject !== void 0 && fromSeed != null) {
      setValueByPath(parentObject, ["parameters", "seed"], fromSeed);
    }
    const fromSafetyFilterLevel = getValueByPath(fromObject, [
      "safetyFilterLevel"
    ]);
    if (parentObject !== void 0 && fromSafetyFilterLevel != null) {
      setValueByPath(parentObject, ["parameters", "safetySetting"], fromSafetyFilterLevel);
    }
    const fromPersonGeneration = getValueByPath(fromObject, [
      "personGeneration"
    ]);
    if (parentObject !== void 0 && fromPersonGeneration != null) {
      setValueByPath(parentObject, ["parameters", "personGeneration"], fromPersonGeneration);
    }
    const fromIncludeSafetyAttributes = getValueByPath(fromObject, [
      "includeSafetyAttributes"
    ]);
    if (parentObject !== void 0 && fromIncludeSafetyAttributes != null) {
      setValueByPath(parentObject, ["parameters", "includeSafetyAttributes"], fromIncludeSafetyAttributes);
    }
    const fromIncludeRaiReason = getValueByPath(fromObject, [
      "includeRaiReason"
    ]);
    if (parentObject !== void 0 && fromIncludeRaiReason != null) {
      setValueByPath(parentObject, ["parameters", "includeRaiReason"], fromIncludeRaiReason);
    }
    const fromLanguage = getValueByPath(fromObject, ["language"]);
    if (parentObject !== void 0 && fromLanguage != null) {
      setValueByPath(parentObject, ["parameters", "language"], fromLanguage);
    }
    const fromOutputMimeType = getValueByPath(fromObject, [
      "outputMimeType"
    ]);
    if (parentObject !== void 0 && fromOutputMimeType != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "mimeType"], fromOutputMimeType);
    }
    const fromOutputCompressionQuality = getValueByPath(fromObject, [
      "outputCompressionQuality"
    ]);
    if (parentObject !== void 0 && fromOutputCompressionQuality != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "compressionQuality"], fromOutputCompressionQuality);
    }
    const fromAddWatermark = getValueByPath(fromObject, ["addWatermark"]);
    if (parentObject !== void 0 && fromAddWatermark != null) {
      setValueByPath(parentObject, ["parameters", "addWatermark"], fromAddWatermark);
    }
    const fromEditMode = getValueByPath(fromObject, ["editMode"]);
    if (parentObject !== void 0 && fromEditMode != null) {
      setValueByPath(parentObject, ["parameters", "editMode"], fromEditMode);
    }
    const fromBaseSteps = getValueByPath(fromObject, ["baseSteps"]);
    if (parentObject !== void 0 && fromBaseSteps != null) {
      setValueByPath(parentObject, ["parameters", "editConfig", "baseSteps"], fromBaseSteps);
    }
    return toObject;
  }
  function editImageParametersInternalToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (fromPrompt != null) {
      setValueByPath(toObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromReferenceImages = getValueByPath(fromObject, [
      "referenceImages"
    ]);
    if (fromReferenceImages != null) {
      let transformedList = fromReferenceImages;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return referenceImageAPIInternalToVertex(item);
        });
      }
      setValueByPath(toObject, ["instances[0]", "referenceImages"], transformedList);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      editImageConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function editImageResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromGeneratedImages = getValueByPath(fromObject, [
      "predictions"
    ]);
    if (fromGeneratedImages != null) {
      let transformedList = fromGeneratedImages;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedImageFromVertex(item);
        });
      }
      setValueByPath(toObject, ["generatedImages"], transformedList);
    }
    return toObject;
  }
  function embedContentConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromTaskType = getValueByPath(fromObject, ["taskType"]);
    if (parentObject !== void 0 && fromTaskType != null) {
      setValueByPath(parentObject, ["requests[]", "taskType"], fromTaskType);
    }
    const fromTitle = getValueByPath(fromObject, ["title"]);
    if (parentObject !== void 0 && fromTitle != null) {
      setValueByPath(parentObject, ["requests[]", "title"], fromTitle);
    }
    const fromOutputDimensionality = getValueByPath(fromObject, [
      "outputDimensionality"
    ]);
    if (parentObject !== void 0 && fromOutputDimensionality != null) {
      setValueByPath(parentObject, ["requests[]", "outputDimensionality"], fromOutputDimensionality);
    }
    if (getValueByPath(fromObject, ["mimeType"]) !== void 0) {
      throw new Error("mimeType parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["autoTruncate"]) !== void 0) {
      throw new Error("autoTruncate parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function embedContentConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromTaskType = getValueByPath(fromObject, ["taskType"]);
    if (parentObject !== void 0 && fromTaskType != null) {
      setValueByPath(parentObject, ["instances[]", "task_type"], fromTaskType);
    }
    const fromTitle = getValueByPath(fromObject, ["title"]);
    if (parentObject !== void 0 && fromTitle != null) {
      setValueByPath(parentObject, ["instances[]", "title"], fromTitle);
    }
    const fromOutputDimensionality = getValueByPath(fromObject, [
      "outputDimensionality"
    ]);
    if (parentObject !== void 0 && fromOutputDimensionality != null) {
      setValueByPath(parentObject, ["parameters", "outputDimensionality"], fromOutputDimensionality);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (parentObject !== void 0 && fromMimeType != null) {
      setValueByPath(parentObject, ["instances[]", "mimeType"], fromMimeType);
    }
    const fromAutoTruncate = getValueByPath(fromObject, ["autoTruncate"]);
    if (parentObject !== void 0 && fromAutoTruncate != null) {
      setValueByPath(parentObject, ["parameters", "autoTruncate"], fromAutoTruncate);
    }
    return toObject;
  }
  function embedContentMetadataFromMldev() {
    const toObject = {};
    return toObject;
  }
  function embedContentMetadataFromVertex(fromObject) {
    const toObject = {};
    const fromBillableCharacterCount = getValueByPath(fromObject, [
      "billableCharacterCount"
    ]);
    if (fromBillableCharacterCount != null) {
      setValueByPath(toObject, ["billableCharacterCount"], fromBillableCharacterCount);
    }
    return toObject;
  }
  function embedContentParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      setValueByPath(toObject, ["requests[]", "content"], tContentsForEmbed(apiClient, fromContents));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      embedContentConfigToMldev(fromConfig, toObject);
    }
    const fromModelForEmbedContent = getValueByPath(fromObject, ["model"]);
    if (fromModelForEmbedContent !== void 0) {
      setValueByPath(toObject, ["requests[]", "model"], tModel(apiClient, fromModelForEmbedContent));
    }
    return toObject;
  }
  function embedContentParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      setValueByPath(toObject, ["instances[]", "content"], tContentsForEmbed(apiClient, fromContents));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      embedContentConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function embedContentResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromEmbeddings = getValueByPath(fromObject, ["embeddings"]);
    if (fromEmbeddings != null) {
      let transformedList = fromEmbeddings;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentEmbeddingFromMldev(item);
        });
      }
      setValueByPath(toObject, ["embeddings"], transformedList);
    }
    const fromMetadata = getValueByPath(fromObject, ["metadata"]);
    if (fromMetadata != null) {
      setValueByPath(toObject, ["metadata"], embedContentMetadataFromMldev());
    }
    return toObject;
  }
  function embedContentResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromEmbeddings = getValueByPath(fromObject, [
      "predictions[]",
      "embeddings"
    ]);
    if (fromEmbeddings != null) {
      let transformedList = fromEmbeddings;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentEmbeddingFromVertex(item);
        });
      }
      setValueByPath(toObject, ["embeddings"], transformedList);
    }
    const fromMetadata = getValueByPath(fromObject, ["metadata"]);
    if (fromMetadata != null) {
      setValueByPath(toObject, ["metadata"], embedContentMetadataFromVertex(fromMetadata));
    }
    return toObject;
  }
  function endpointFromVertex(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["endpoint"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDeployedModelId = getValueByPath(fromObject, [
      "deployedModelId"
    ]);
    if (fromDeployedModelId != null) {
      setValueByPath(toObject, ["deployedModelId"], fromDeployedModelId);
    }
    return toObject;
  }
  function enterpriseWebSearchToVertex(fromObject) {
    const toObject = {};
    const fromExcludeDomains = getValueByPath(fromObject, [
      "excludeDomains"
    ]);
    if (fromExcludeDomains != null) {
      setValueByPath(toObject, ["excludeDomains"], fromExcludeDomains);
    }
    return toObject;
  }
  function entityLabelFromVertex(fromObject) {
    const toObject = {};
    const fromLabel = getValueByPath(fromObject, ["label"]);
    if (fromLabel != null) {
      setValueByPath(toObject, ["label"], fromLabel);
    }
    const fromScore = getValueByPath(fromObject, ["score"]);
    if (fromScore != null) {
      setValueByPath(toObject, ["score"], fromScore);
    }
    return toObject;
  }
  function fileDataFromMldev(fromObject) {
    const toObject = {};
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function fileDataFromVertex(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function fileDataToMldev$1(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function fileDataToVertex(fromObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function functionCallFromMldev(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallFromVertex(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallToMldev$1(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallToVertex(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionCallingConfigToMldev(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromAllowedFunctionNames = getValueByPath(fromObject, [
      "allowedFunctionNames"
    ]);
    if (fromAllowedFunctionNames != null) {
      setValueByPath(toObject, ["allowedFunctionNames"], fromAllowedFunctionNames);
    }
    return toObject;
  }
  function functionCallingConfigToVertex(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromAllowedFunctionNames = getValueByPath(fromObject, [
      "allowedFunctionNames"
    ]);
    if (fromAllowedFunctionNames != null) {
      setValueByPath(toObject, ["allowedFunctionNames"], fromAllowedFunctionNames);
    }
    return toObject;
  }
  function functionDeclarationToMldev$1(fromObject) {
    const toObject = {};
    const fromBehavior = getValueByPath(fromObject, ["behavior"]);
    if (fromBehavior != null) {
      setValueByPath(toObject, ["behavior"], fromBehavior);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromParameters = getValueByPath(fromObject, ["parameters"]);
    if (fromParameters != null) {
      setValueByPath(toObject, ["parameters"], fromParameters);
    }
    const fromParametersJsonSchema = getValueByPath(fromObject, [
      "parametersJsonSchema"
    ]);
    if (fromParametersJsonSchema != null) {
      setValueByPath(toObject, ["parametersJsonSchema"], fromParametersJsonSchema);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], fromResponse);
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    return toObject;
  }
  function functionDeclarationToVertex(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["behavior"]) !== void 0) {
      throw new Error("behavior parameter is not supported in Vertex AI.");
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromParameters = getValueByPath(fromObject, ["parameters"]);
    if (fromParameters != null) {
      setValueByPath(toObject, ["parameters"], fromParameters);
    }
    const fromParametersJsonSchema = getValueByPath(fromObject, [
      "parametersJsonSchema"
    ]);
    if (fromParametersJsonSchema != null) {
      setValueByPath(toObject, ["parametersJsonSchema"], fromParametersJsonSchema);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], fromResponse);
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    return toObject;
  }
  function generateContentConfigToMldev(apiClient, fromObject, parentObject) {
    const toObject = {};
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["systemInstruction"], contentToMldev$1(tContent(fromSystemInstruction)));
    }
    const fromTemperature = getValueByPath(fromObject, ["temperature"]);
    if (fromTemperature != null) {
      setValueByPath(toObject, ["temperature"], fromTemperature);
    }
    const fromTopP = getValueByPath(fromObject, ["topP"]);
    if (fromTopP != null) {
      setValueByPath(toObject, ["topP"], fromTopP);
    }
    const fromTopK = getValueByPath(fromObject, ["topK"]);
    if (fromTopK != null) {
      setValueByPath(toObject, ["topK"], fromTopK);
    }
    const fromCandidateCount = getValueByPath(fromObject, [
      "candidateCount"
    ]);
    if (fromCandidateCount != null) {
      setValueByPath(toObject, ["candidateCount"], fromCandidateCount);
    }
    const fromMaxOutputTokens = getValueByPath(fromObject, [
      "maxOutputTokens"
    ]);
    if (fromMaxOutputTokens != null) {
      setValueByPath(toObject, ["maxOutputTokens"], fromMaxOutputTokens);
    }
    const fromStopSequences = getValueByPath(fromObject, [
      "stopSequences"
    ]);
    if (fromStopSequences != null) {
      setValueByPath(toObject, ["stopSequences"], fromStopSequences);
    }
    const fromResponseLogprobs = getValueByPath(fromObject, [
      "responseLogprobs"
    ]);
    if (fromResponseLogprobs != null) {
      setValueByPath(toObject, ["responseLogprobs"], fromResponseLogprobs);
    }
    const fromLogprobs = getValueByPath(fromObject, ["logprobs"]);
    if (fromLogprobs != null) {
      setValueByPath(toObject, ["logprobs"], fromLogprobs);
    }
    const fromPresencePenalty = getValueByPath(fromObject, [
      "presencePenalty"
    ]);
    if (fromPresencePenalty != null) {
      setValueByPath(toObject, ["presencePenalty"], fromPresencePenalty);
    }
    const fromFrequencyPenalty = getValueByPath(fromObject, [
      "frequencyPenalty"
    ]);
    if (fromFrequencyPenalty != null) {
      setValueByPath(toObject, ["frequencyPenalty"], fromFrequencyPenalty);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (fromSeed != null) {
      setValueByPath(toObject, ["seed"], fromSeed);
    }
    const fromResponseMimeType = getValueByPath(fromObject, [
      "responseMimeType"
    ]);
    if (fromResponseMimeType != null) {
      setValueByPath(toObject, ["responseMimeType"], fromResponseMimeType);
    }
    const fromResponseSchema = getValueByPath(fromObject, [
      "responseSchema"
    ]);
    if (fromResponseSchema != null) {
      setValueByPath(toObject, ["responseSchema"], schemaToMldev(tSchema(fromResponseSchema)));
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    if (getValueByPath(fromObject, ["routingConfig"]) !== void 0) {
      throw new Error("routingConfig parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["modelSelectionConfig"]) !== void 0) {
      throw new Error("modelSelectionConfig parameter is not supported in Gemini API.");
    }
    const fromSafetySettings = getValueByPath(fromObject, [
      "safetySettings"
    ]);
    if (parentObject !== void 0 && fromSafetySettings != null) {
      let transformedList = fromSafetySettings;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return safetySettingToMldev(item);
        });
      }
      setValueByPath(parentObject, ["safetySettings"], transformedList);
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = tTools(fromTools);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToMldev$1(tTool(item));
        });
      }
      setValueByPath(parentObject, ["tools"], transformedList);
    }
    const fromToolConfig = getValueByPath(fromObject, ["toolConfig"]);
    if (parentObject !== void 0 && fromToolConfig != null) {
      setValueByPath(parentObject, ["toolConfig"], toolConfigToMldev(fromToolConfig));
    }
    if (getValueByPath(fromObject, ["labels"]) !== void 0) {
      throw new Error("labels parameter is not supported in Gemini API.");
    }
    const fromCachedContent = getValueByPath(fromObject, [
      "cachedContent"
    ]);
    if (parentObject !== void 0 && fromCachedContent != null) {
      setValueByPath(parentObject, ["cachedContent"], tCachedContentName(apiClient, fromCachedContent));
    }
    const fromResponseModalities = getValueByPath(fromObject, [
      "responseModalities"
    ]);
    if (fromResponseModalities != null) {
      setValueByPath(toObject, ["responseModalities"], fromResponseModalities);
    }
    const fromMediaResolution = getValueByPath(fromObject, [
      "mediaResolution"
    ]);
    if (fromMediaResolution != null) {
      setValueByPath(toObject, ["mediaResolution"], fromMediaResolution);
    }
    const fromSpeechConfig = getValueByPath(fromObject, ["speechConfig"]);
    if (fromSpeechConfig != null) {
      setValueByPath(toObject, ["speechConfig"], speechConfigToMldev$1(tSpeechConfig(fromSpeechConfig)));
    }
    if (getValueByPath(fromObject, ["audioTimestamp"]) !== void 0) {
      throw new Error("audioTimestamp parameter is not supported in Gemini API.");
    }
    const fromThinkingConfig = getValueByPath(fromObject, [
      "thinkingConfig"
    ]);
    if (fromThinkingConfig != null) {
      setValueByPath(toObject, ["thinkingConfig"], thinkingConfigToMldev(fromThinkingConfig));
    }
    return toObject;
  }
  function generateContentConfigToVertex(apiClient, fromObject, parentObject) {
    const toObject = {};
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["systemInstruction"], contentToVertex(tContent(fromSystemInstruction)));
    }
    const fromTemperature = getValueByPath(fromObject, ["temperature"]);
    if (fromTemperature != null) {
      setValueByPath(toObject, ["temperature"], fromTemperature);
    }
    const fromTopP = getValueByPath(fromObject, ["topP"]);
    if (fromTopP != null) {
      setValueByPath(toObject, ["topP"], fromTopP);
    }
    const fromTopK = getValueByPath(fromObject, ["topK"]);
    if (fromTopK != null) {
      setValueByPath(toObject, ["topK"], fromTopK);
    }
    const fromCandidateCount = getValueByPath(fromObject, [
      "candidateCount"
    ]);
    if (fromCandidateCount != null) {
      setValueByPath(toObject, ["candidateCount"], fromCandidateCount);
    }
    const fromMaxOutputTokens = getValueByPath(fromObject, [
      "maxOutputTokens"
    ]);
    if (fromMaxOutputTokens != null) {
      setValueByPath(toObject, ["maxOutputTokens"], fromMaxOutputTokens);
    }
    const fromStopSequences = getValueByPath(fromObject, [
      "stopSequences"
    ]);
    if (fromStopSequences != null) {
      setValueByPath(toObject, ["stopSequences"], fromStopSequences);
    }
    const fromResponseLogprobs = getValueByPath(fromObject, [
      "responseLogprobs"
    ]);
    if (fromResponseLogprobs != null) {
      setValueByPath(toObject, ["responseLogprobs"], fromResponseLogprobs);
    }
    const fromLogprobs = getValueByPath(fromObject, ["logprobs"]);
    if (fromLogprobs != null) {
      setValueByPath(toObject, ["logprobs"], fromLogprobs);
    }
    const fromPresencePenalty = getValueByPath(fromObject, [
      "presencePenalty"
    ]);
    if (fromPresencePenalty != null) {
      setValueByPath(toObject, ["presencePenalty"], fromPresencePenalty);
    }
    const fromFrequencyPenalty = getValueByPath(fromObject, [
      "frequencyPenalty"
    ]);
    if (fromFrequencyPenalty != null) {
      setValueByPath(toObject, ["frequencyPenalty"], fromFrequencyPenalty);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (fromSeed != null) {
      setValueByPath(toObject, ["seed"], fromSeed);
    }
    const fromResponseMimeType = getValueByPath(fromObject, [
      "responseMimeType"
    ]);
    if (fromResponseMimeType != null) {
      setValueByPath(toObject, ["responseMimeType"], fromResponseMimeType);
    }
    const fromResponseSchema = getValueByPath(fromObject, [
      "responseSchema"
    ]);
    if (fromResponseSchema != null) {
      setValueByPath(toObject, ["responseSchema"], schemaToVertex(tSchema(fromResponseSchema)));
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    const fromRoutingConfig = getValueByPath(fromObject, [
      "routingConfig"
    ]);
    if (fromRoutingConfig != null) {
      setValueByPath(toObject, ["routingConfig"], fromRoutingConfig);
    }
    const fromModelSelectionConfig = getValueByPath(fromObject, [
      "modelSelectionConfig"
    ]);
    if (fromModelSelectionConfig != null) {
      setValueByPath(toObject, ["modelConfig"], modelSelectionConfigToVertex(fromModelSelectionConfig));
    }
    const fromSafetySettings = getValueByPath(fromObject, [
      "safetySettings"
    ]);
    if (parentObject !== void 0 && fromSafetySettings != null) {
      let transformedList = fromSafetySettings;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return safetySettingToVertex(item);
        });
      }
      setValueByPath(parentObject, ["safetySettings"], transformedList);
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = tTools(fromTools);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToVertex(tTool(item));
        });
      }
      setValueByPath(parentObject, ["tools"], transformedList);
    }
    const fromToolConfig = getValueByPath(fromObject, ["toolConfig"]);
    if (parentObject !== void 0 && fromToolConfig != null) {
      setValueByPath(parentObject, ["toolConfig"], toolConfigToVertex(fromToolConfig));
    }
    const fromLabels = getValueByPath(fromObject, ["labels"]);
    if (parentObject !== void 0 && fromLabels != null) {
      setValueByPath(parentObject, ["labels"], fromLabels);
    }
    const fromCachedContent = getValueByPath(fromObject, [
      "cachedContent"
    ]);
    if (parentObject !== void 0 && fromCachedContent != null) {
      setValueByPath(parentObject, ["cachedContent"], tCachedContentName(apiClient, fromCachedContent));
    }
    const fromResponseModalities = getValueByPath(fromObject, [
      "responseModalities"
    ]);
    if (fromResponseModalities != null) {
      setValueByPath(toObject, ["responseModalities"], fromResponseModalities);
    }
    const fromMediaResolution = getValueByPath(fromObject, [
      "mediaResolution"
    ]);
    if (fromMediaResolution != null) {
      setValueByPath(toObject, ["mediaResolution"], fromMediaResolution);
    }
    const fromSpeechConfig = getValueByPath(fromObject, ["speechConfig"]);
    if (fromSpeechConfig != null) {
      setValueByPath(toObject, ["speechConfig"], speechConfigToVertex(tSpeechConfig(fromSpeechConfig)));
    }
    const fromAudioTimestamp = getValueByPath(fromObject, [
      "audioTimestamp"
    ]);
    if (fromAudioTimestamp != null) {
      setValueByPath(toObject, ["audioTimestamp"], fromAudioTimestamp);
    }
    const fromThinkingConfig = getValueByPath(fromObject, [
      "thinkingConfig"
    ]);
    if (fromThinkingConfig != null) {
      setValueByPath(toObject, ["thinkingConfig"], thinkingConfigToVertex(fromThinkingConfig));
    }
    return toObject;
  }
  function generateContentParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      let transformedList = tContents(fromContents);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentToMldev$1(item);
        });
      }
      setValueByPath(toObject, ["contents"], transformedList);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      setValueByPath(toObject, ["generationConfig"], generateContentConfigToMldev(apiClient, fromConfig, toObject));
    }
    return toObject;
  }
  function generateContentParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromContents = getValueByPath(fromObject, ["contents"]);
    if (fromContents != null) {
      let transformedList = tContents(fromContents);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return contentToVertex(item);
        });
      }
      setValueByPath(toObject, ["contents"], transformedList);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      setValueByPath(toObject, ["generationConfig"], generateContentConfigToVertex(apiClient, fromConfig, toObject));
    }
    return toObject;
  }
  function generateContentResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromCandidates = getValueByPath(fromObject, ["candidates"]);
    if (fromCandidates != null) {
      let transformedList = fromCandidates;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return candidateFromMldev(item);
        });
      }
      setValueByPath(toObject, ["candidates"], transformedList);
    }
    const fromModelVersion = getValueByPath(fromObject, ["modelVersion"]);
    if (fromModelVersion != null) {
      setValueByPath(toObject, ["modelVersion"], fromModelVersion);
    }
    const fromPromptFeedback = getValueByPath(fromObject, [
      "promptFeedback"
    ]);
    if (fromPromptFeedback != null) {
      setValueByPath(toObject, ["promptFeedback"], fromPromptFeedback);
    }
    const fromResponseId = getValueByPath(fromObject, ["responseId"]);
    if (fromResponseId != null) {
      setValueByPath(toObject, ["responseId"], fromResponseId);
    }
    const fromUsageMetadata = getValueByPath(fromObject, [
      "usageMetadata"
    ]);
    if (fromUsageMetadata != null) {
      setValueByPath(toObject, ["usageMetadata"], fromUsageMetadata);
    }
    return toObject;
  }
  function generateContentResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromCandidates = getValueByPath(fromObject, ["candidates"]);
    if (fromCandidates != null) {
      let transformedList = fromCandidates;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return candidateFromVertex(item);
        });
      }
      setValueByPath(toObject, ["candidates"], transformedList);
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromModelVersion = getValueByPath(fromObject, ["modelVersion"]);
    if (fromModelVersion != null) {
      setValueByPath(toObject, ["modelVersion"], fromModelVersion);
    }
    const fromPromptFeedback = getValueByPath(fromObject, [
      "promptFeedback"
    ]);
    if (fromPromptFeedback != null) {
      setValueByPath(toObject, ["promptFeedback"], fromPromptFeedback);
    }
    const fromResponseId = getValueByPath(fromObject, ["responseId"]);
    if (fromResponseId != null) {
      setValueByPath(toObject, ["responseId"], fromResponseId);
    }
    const fromUsageMetadata = getValueByPath(fromObject, [
      "usageMetadata"
    ]);
    if (fromUsageMetadata != null) {
      setValueByPath(toObject, ["usageMetadata"], fromUsageMetadata);
    }
    return toObject;
  }
  function generateImagesConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["outputGcsUri"]) !== void 0) {
      throw new Error("outputGcsUri parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["negativePrompt"]) !== void 0) {
      throw new Error("negativePrompt parameter is not supported in Gemini API.");
    }
    const fromNumberOfImages = getValueByPath(fromObject, [
      "numberOfImages"
    ]);
    if (parentObject !== void 0 && fromNumberOfImages != null) {
      setValueByPath(parentObject, ["parameters", "sampleCount"], fromNumberOfImages);
    }
    const fromAspectRatio = getValueByPath(fromObject, ["aspectRatio"]);
    if (parentObject !== void 0 && fromAspectRatio != null) {
      setValueByPath(parentObject, ["parameters", "aspectRatio"], fromAspectRatio);
    }
    const fromGuidanceScale = getValueByPath(fromObject, [
      "guidanceScale"
    ]);
    if (parentObject !== void 0 && fromGuidanceScale != null) {
      setValueByPath(parentObject, ["parameters", "guidanceScale"], fromGuidanceScale);
    }
    if (getValueByPath(fromObject, ["seed"]) !== void 0) {
      throw new Error("seed parameter is not supported in Gemini API.");
    }
    const fromSafetyFilterLevel = getValueByPath(fromObject, [
      "safetyFilterLevel"
    ]);
    if (parentObject !== void 0 && fromSafetyFilterLevel != null) {
      setValueByPath(parentObject, ["parameters", "safetySetting"], fromSafetyFilterLevel);
    }
    const fromPersonGeneration = getValueByPath(fromObject, [
      "personGeneration"
    ]);
    if (parentObject !== void 0 && fromPersonGeneration != null) {
      setValueByPath(parentObject, ["parameters", "personGeneration"], fromPersonGeneration);
    }
    const fromIncludeSafetyAttributes = getValueByPath(fromObject, [
      "includeSafetyAttributes"
    ]);
    if (parentObject !== void 0 && fromIncludeSafetyAttributes != null) {
      setValueByPath(parentObject, ["parameters", "includeSafetyAttributes"], fromIncludeSafetyAttributes);
    }
    const fromIncludeRaiReason = getValueByPath(fromObject, [
      "includeRaiReason"
    ]);
    if (parentObject !== void 0 && fromIncludeRaiReason != null) {
      setValueByPath(parentObject, ["parameters", "includeRaiReason"], fromIncludeRaiReason);
    }
    const fromLanguage = getValueByPath(fromObject, ["language"]);
    if (parentObject !== void 0 && fromLanguage != null) {
      setValueByPath(parentObject, ["parameters", "language"], fromLanguage);
    }
    const fromOutputMimeType = getValueByPath(fromObject, [
      "outputMimeType"
    ]);
    if (parentObject !== void 0 && fromOutputMimeType != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "mimeType"], fromOutputMimeType);
    }
    const fromOutputCompressionQuality = getValueByPath(fromObject, [
      "outputCompressionQuality"
    ]);
    if (parentObject !== void 0 && fromOutputCompressionQuality != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "compressionQuality"], fromOutputCompressionQuality);
    }
    if (getValueByPath(fromObject, ["addWatermark"]) !== void 0) {
      throw new Error("addWatermark parameter is not supported in Gemini API.");
    }
    const fromImageSize = getValueByPath(fromObject, ["imageSize"]);
    if (parentObject !== void 0 && fromImageSize != null) {
      setValueByPath(parentObject, ["parameters", "sampleImageSize"], fromImageSize);
    }
    if (getValueByPath(fromObject, ["enhancePrompt"]) !== void 0) {
      throw new Error("enhancePrompt parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function generateImagesConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromOutputGcsUri = getValueByPath(fromObject, ["outputGcsUri"]);
    if (parentObject !== void 0 && fromOutputGcsUri != null) {
      setValueByPath(parentObject, ["parameters", "storageUri"], fromOutputGcsUri);
    }
    const fromNegativePrompt = getValueByPath(fromObject, [
      "negativePrompt"
    ]);
    if (parentObject !== void 0 && fromNegativePrompt != null) {
      setValueByPath(parentObject, ["parameters", "negativePrompt"], fromNegativePrompt);
    }
    const fromNumberOfImages = getValueByPath(fromObject, [
      "numberOfImages"
    ]);
    if (parentObject !== void 0 && fromNumberOfImages != null) {
      setValueByPath(parentObject, ["parameters", "sampleCount"], fromNumberOfImages);
    }
    const fromAspectRatio = getValueByPath(fromObject, ["aspectRatio"]);
    if (parentObject !== void 0 && fromAspectRatio != null) {
      setValueByPath(parentObject, ["parameters", "aspectRatio"], fromAspectRatio);
    }
    const fromGuidanceScale = getValueByPath(fromObject, [
      "guidanceScale"
    ]);
    if (parentObject !== void 0 && fromGuidanceScale != null) {
      setValueByPath(parentObject, ["parameters", "guidanceScale"], fromGuidanceScale);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (parentObject !== void 0 && fromSeed != null) {
      setValueByPath(parentObject, ["parameters", "seed"], fromSeed);
    }
    const fromSafetyFilterLevel = getValueByPath(fromObject, [
      "safetyFilterLevel"
    ]);
    if (parentObject !== void 0 && fromSafetyFilterLevel != null) {
      setValueByPath(parentObject, ["parameters", "safetySetting"], fromSafetyFilterLevel);
    }
    const fromPersonGeneration = getValueByPath(fromObject, [
      "personGeneration"
    ]);
    if (parentObject !== void 0 && fromPersonGeneration != null) {
      setValueByPath(parentObject, ["parameters", "personGeneration"], fromPersonGeneration);
    }
    const fromIncludeSafetyAttributes = getValueByPath(fromObject, [
      "includeSafetyAttributes"
    ]);
    if (parentObject !== void 0 && fromIncludeSafetyAttributes != null) {
      setValueByPath(parentObject, ["parameters", "includeSafetyAttributes"], fromIncludeSafetyAttributes);
    }
    const fromIncludeRaiReason = getValueByPath(fromObject, [
      "includeRaiReason"
    ]);
    if (parentObject !== void 0 && fromIncludeRaiReason != null) {
      setValueByPath(parentObject, ["parameters", "includeRaiReason"], fromIncludeRaiReason);
    }
    const fromLanguage = getValueByPath(fromObject, ["language"]);
    if (parentObject !== void 0 && fromLanguage != null) {
      setValueByPath(parentObject, ["parameters", "language"], fromLanguage);
    }
    const fromOutputMimeType = getValueByPath(fromObject, [
      "outputMimeType"
    ]);
    if (parentObject !== void 0 && fromOutputMimeType != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "mimeType"], fromOutputMimeType);
    }
    const fromOutputCompressionQuality = getValueByPath(fromObject, [
      "outputCompressionQuality"
    ]);
    if (parentObject !== void 0 && fromOutputCompressionQuality != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "compressionQuality"], fromOutputCompressionQuality);
    }
    const fromAddWatermark = getValueByPath(fromObject, ["addWatermark"]);
    if (parentObject !== void 0 && fromAddWatermark != null) {
      setValueByPath(parentObject, ["parameters", "addWatermark"], fromAddWatermark);
    }
    const fromImageSize = getValueByPath(fromObject, ["imageSize"]);
    if (parentObject !== void 0 && fromImageSize != null) {
      setValueByPath(parentObject, ["parameters", "sampleImageSize"], fromImageSize);
    }
    const fromEnhancePrompt = getValueByPath(fromObject, [
      "enhancePrompt"
    ]);
    if (parentObject !== void 0 && fromEnhancePrompt != null) {
      setValueByPath(parentObject, ["parameters", "enhancePrompt"], fromEnhancePrompt);
    }
    return toObject;
  }
  function generateImagesParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (fromPrompt != null) {
      setValueByPath(toObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      generateImagesConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function generateImagesParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (fromPrompt != null) {
      setValueByPath(toObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      generateImagesConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function generateImagesResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromGeneratedImages = getValueByPath(fromObject, [
      "predictions"
    ]);
    if (fromGeneratedImages != null) {
      let transformedList = fromGeneratedImages;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedImageFromMldev(item);
        });
      }
      setValueByPath(toObject, ["generatedImages"], transformedList);
    }
    const fromPositivePromptSafetyAttributes = getValueByPath(fromObject, [
      "positivePromptSafetyAttributes"
    ]);
    if (fromPositivePromptSafetyAttributes != null) {
      setValueByPath(toObject, ["positivePromptSafetyAttributes"], safetyAttributesFromMldev(fromPositivePromptSafetyAttributes));
    }
    return toObject;
  }
  function generateImagesResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromGeneratedImages = getValueByPath(fromObject, [
      "predictions"
    ]);
    if (fromGeneratedImages != null) {
      let transformedList = fromGeneratedImages;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedImageFromVertex(item);
        });
      }
      setValueByPath(toObject, ["generatedImages"], transformedList);
    }
    const fromPositivePromptSafetyAttributes = getValueByPath(fromObject, [
      "positivePromptSafetyAttributes"
    ]);
    if (fromPositivePromptSafetyAttributes != null) {
      setValueByPath(toObject, ["positivePromptSafetyAttributes"], safetyAttributesFromVertex(fromPositivePromptSafetyAttributes));
    }
    return toObject;
  }
  function generateVideosConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromNumberOfVideos = getValueByPath(fromObject, [
      "numberOfVideos"
    ]);
    if (parentObject !== void 0 && fromNumberOfVideos != null) {
      setValueByPath(parentObject, ["parameters", "sampleCount"], fromNumberOfVideos);
    }
    if (getValueByPath(fromObject, ["outputGcsUri"]) !== void 0) {
      throw new Error("outputGcsUri parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["fps"]) !== void 0) {
      throw new Error("fps parameter is not supported in Gemini API.");
    }
    const fromDurationSeconds = getValueByPath(fromObject, [
      "durationSeconds"
    ]);
    if (parentObject !== void 0 && fromDurationSeconds != null) {
      setValueByPath(parentObject, ["parameters", "durationSeconds"], fromDurationSeconds);
    }
    if (getValueByPath(fromObject, ["seed"]) !== void 0) {
      throw new Error("seed parameter is not supported in Gemini API.");
    }
    const fromAspectRatio = getValueByPath(fromObject, ["aspectRatio"]);
    if (parentObject !== void 0 && fromAspectRatio != null) {
      setValueByPath(parentObject, ["parameters", "aspectRatio"], fromAspectRatio);
    }
    const fromResolution = getValueByPath(fromObject, ["resolution"]);
    if (parentObject !== void 0 && fromResolution != null) {
      setValueByPath(parentObject, ["parameters", "resolution"], fromResolution);
    }
    const fromPersonGeneration = getValueByPath(fromObject, [
      "personGeneration"
    ]);
    if (parentObject !== void 0 && fromPersonGeneration != null) {
      setValueByPath(parentObject, ["parameters", "personGeneration"], fromPersonGeneration);
    }
    if (getValueByPath(fromObject, ["pubsubTopic"]) !== void 0) {
      throw new Error("pubsubTopic parameter is not supported in Gemini API.");
    }
    const fromNegativePrompt = getValueByPath(fromObject, [
      "negativePrompt"
    ]);
    if (parentObject !== void 0 && fromNegativePrompt != null) {
      setValueByPath(parentObject, ["parameters", "negativePrompt"], fromNegativePrompt);
    }
    const fromEnhancePrompt = getValueByPath(fromObject, [
      "enhancePrompt"
    ]);
    if (parentObject !== void 0 && fromEnhancePrompt != null) {
      setValueByPath(parentObject, ["parameters", "enhancePrompt"], fromEnhancePrompt);
    }
    if (getValueByPath(fromObject, ["generateAudio"]) !== void 0) {
      throw new Error("generateAudio parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["lastFrame"]) !== void 0) {
      throw new Error("lastFrame parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["referenceImages"]) !== void 0) {
      throw new Error("referenceImages parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["mask"]) !== void 0) {
      throw new Error("mask parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["compressionQuality"]) !== void 0) {
      throw new Error("compressionQuality parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function generateVideosConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromNumberOfVideos = getValueByPath(fromObject, [
      "numberOfVideos"
    ]);
    if (parentObject !== void 0 && fromNumberOfVideos != null) {
      setValueByPath(parentObject, ["parameters", "sampleCount"], fromNumberOfVideos);
    }
    const fromOutputGcsUri = getValueByPath(fromObject, ["outputGcsUri"]);
    if (parentObject !== void 0 && fromOutputGcsUri != null) {
      setValueByPath(parentObject, ["parameters", "storageUri"], fromOutputGcsUri);
    }
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (parentObject !== void 0 && fromFps != null) {
      setValueByPath(parentObject, ["parameters", "fps"], fromFps);
    }
    const fromDurationSeconds = getValueByPath(fromObject, [
      "durationSeconds"
    ]);
    if (parentObject !== void 0 && fromDurationSeconds != null) {
      setValueByPath(parentObject, ["parameters", "durationSeconds"], fromDurationSeconds);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (parentObject !== void 0 && fromSeed != null) {
      setValueByPath(parentObject, ["parameters", "seed"], fromSeed);
    }
    const fromAspectRatio = getValueByPath(fromObject, ["aspectRatio"]);
    if (parentObject !== void 0 && fromAspectRatio != null) {
      setValueByPath(parentObject, ["parameters", "aspectRatio"], fromAspectRatio);
    }
    const fromResolution = getValueByPath(fromObject, ["resolution"]);
    if (parentObject !== void 0 && fromResolution != null) {
      setValueByPath(parentObject, ["parameters", "resolution"], fromResolution);
    }
    const fromPersonGeneration = getValueByPath(fromObject, [
      "personGeneration"
    ]);
    if (parentObject !== void 0 && fromPersonGeneration != null) {
      setValueByPath(parentObject, ["parameters", "personGeneration"], fromPersonGeneration);
    }
    const fromPubsubTopic = getValueByPath(fromObject, ["pubsubTopic"]);
    if (parentObject !== void 0 && fromPubsubTopic != null) {
      setValueByPath(parentObject, ["parameters", "pubsubTopic"], fromPubsubTopic);
    }
    const fromNegativePrompt = getValueByPath(fromObject, [
      "negativePrompt"
    ]);
    if (parentObject !== void 0 && fromNegativePrompt != null) {
      setValueByPath(parentObject, ["parameters", "negativePrompt"], fromNegativePrompt);
    }
    const fromEnhancePrompt = getValueByPath(fromObject, [
      "enhancePrompt"
    ]);
    if (parentObject !== void 0 && fromEnhancePrompt != null) {
      setValueByPath(parentObject, ["parameters", "enhancePrompt"], fromEnhancePrompt);
    }
    const fromGenerateAudio = getValueByPath(fromObject, [
      "generateAudio"
    ]);
    if (parentObject !== void 0 && fromGenerateAudio != null) {
      setValueByPath(parentObject, ["parameters", "generateAudio"], fromGenerateAudio);
    }
    const fromLastFrame = getValueByPath(fromObject, ["lastFrame"]);
    if (parentObject !== void 0 && fromLastFrame != null) {
      setValueByPath(parentObject, ["instances[0]", "lastFrame"], imageToVertex(fromLastFrame));
    }
    const fromReferenceImages = getValueByPath(fromObject, [
      "referenceImages"
    ]);
    if (parentObject !== void 0 && fromReferenceImages != null) {
      let transformedList = fromReferenceImages;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return videoGenerationReferenceImageToVertex(item);
        });
      }
      setValueByPath(parentObject, ["instances[0]", "referenceImages"], transformedList);
    }
    const fromMask = getValueByPath(fromObject, ["mask"]);
    if (parentObject !== void 0 && fromMask != null) {
      setValueByPath(parentObject, ["instances[0]", "mask"], videoGenerationMaskToVertex(fromMask));
    }
    const fromCompressionQuality = getValueByPath(fromObject, [
      "compressionQuality"
    ]);
    if (parentObject !== void 0 && fromCompressionQuality != null) {
      setValueByPath(parentObject, ["parameters", "compressionQuality"], fromCompressionQuality);
    }
    return toObject;
  }
  function generateVideosOperationFromMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromMetadata = getValueByPath(fromObject, ["metadata"]);
    if (fromMetadata != null) {
      setValueByPath(toObject, ["metadata"], fromMetadata);
    }
    const fromDone = getValueByPath(fromObject, ["done"]);
    if (fromDone != null) {
      setValueByPath(toObject, ["done"], fromDone);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], fromError);
    }
    const fromResponse = getValueByPath(fromObject, [
      "response",
      "generateVideoResponse"
    ]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], generateVideosResponseFromMldev(fromResponse));
    }
    return toObject;
  }
  function generateVideosOperationFromVertex(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromMetadata = getValueByPath(fromObject, ["metadata"]);
    if (fromMetadata != null) {
      setValueByPath(toObject, ["metadata"], fromMetadata);
    }
    const fromDone = getValueByPath(fromObject, ["done"]);
    if (fromDone != null) {
      setValueByPath(toObject, ["done"], fromDone);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], fromError);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], generateVideosResponseFromVertex(fromResponse));
    }
    return toObject;
  }
  function generateVideosParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (fromPrompt != null) {
      setValueByPath(toObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (fromImage != null) {
      setValueByPath(toObject, ["instances[0]", "image"], imageToMldev(fromImage));
    }
    if (getValueByPath(fromObject, ["video"]) !== void 0) {
      throw new Error("video parameter is not supported in Gemini API.");
    }
    const fromSource = getValueByPath(fromObject, ["source"]);
    if (fromSource != null) {
      generateVideosSourceToMldev(fromSource, toObject);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      generateVideosConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function generateVideosParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (fromPrompt != null) {
      setValueByPath(toObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (fromImage != null) {
      setValueByPath(toObject, ["instances[0]", "image"], imageToVertex(fromImage));
    }
    const fromVideo = getValueByPath(fromObject, ["video"]);
    if (fromVideo != null) {
      setValueByPath(toObject, ["instances[0]", "video"], videoToVertex(fromVideo));
    }
    const fromSource = getValueByPath(fromObject, ["source"]);
    if (fromSource != null) {
      generateVideosSourceToVertex(fromSource, toObject);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      generateVideosConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function generateVideosResponseFromMldev(fromObject) {
    const toObject = {};
    const fromGeneratedVideos = getValueByPath(fromObject, [
      "generatedSamples"
    ]);
    if (fromGeneratedVideos != null) {
      let transformedList = fromGeneratedVideos;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedVideoFromMldev(item);
        });
      }
      setValueByPath(toObject, ["generatedVideos"], transformedList);
    }
    const fromRaiMediaFilteredCount = getValueByPath(fromObject, [
      "raiMediaFilteredCount"
    ]);
    if (fromRaiMediaFilteredCount != null) {
      setValueByPath(toObject, ["raiMediaFilteredCount"], fromRaiMediaFilteredCount);
    }
    const fromRaiMediaFilteredReasons = getValueByPath(fromObject, [
      "raiMediaFilteredReasons"
    ]);
    if (fromRaiMediaFilteredReasons != null) {
      setValueByPath(toObject, ["raiMediaFilteredReasons"], fromRaiMediaFilteredReasons);
    }
    return toObject;
  }
  function generateVideosResponseFromVertex(fromObject) {
    const toObject = {};
    const fromGeneratedVideos = getValueByPath(fromObject, ["videos"]);
    if (fromGeneratedVideos != null) {
      let transformedList = fromGeneratedVideos;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedVideoFromVertex(item);
        });
      }
      setValueByPath(toObject, ["generatedVideos"], transformedList);
    }
    const fromRaiMediaFilteredCount = getValueByPath(fromObject, [
      "raiMediaFilteredCount"
    ]);
    if (fromRaiMediaFilteredCount != null) {
      setValueByPath(toObject, ["raiMediaFilteredCount"], fromRaiMediaFilteredCount);
    }
    const fromRaiMediaFilteredReasons = getValueByPath(fromObject, [
      "raiMediaFilteredReasons"
    ]);
    if (fromRaiMediaFilteredReasons != null) {
      setValueByPath(toObject, ["raiMediaFilteredReasons"], fromRaiMediaFilteredReasons);
    }
    return toObject;
  }
  function generateVideosSourceToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (parentObject !== void 0 && fromPrompt != null) {
      setValueByPath(parentObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (parentObject !== void 0 && fromImage != null) {
      setValueByPath(parentObject, ["instances[0]", "image"], imageToMldev(fromImage));
    }
    if (getValueByPath(fromObject, ["video"]) !== void 0) {
      throw new Error("video parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function generateVideosSourceToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (parentObject !== void 0 && fromPrompt != null) {
      setValueByPath(parentObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (parentObject !== void 0 && fromImage != null) {
      setValueByPath(parentObject, ["instances[0]", "image"], imageToVertex(fromImage));
    }
    const fromVideo = getValueByPath(fromObject, ["video"]);
    if (parentObject !== void 0 && fromVideo != null) {
      setValueByPath(parentObject, ["instances[0]", "video"], videoToVertex(fromVideo));
    }
    return toObject;
  }
  function generatedImageFromMldev(fromObject) {
    const toObject = {};
    const fromImage = getValueByPath(fromObject, ["_self"]);
    if (fromImage != null) {
      setValueByPath(toObject, ["image"], imageFromMldev(fromImage));
    }
    const fromRaiFilteredReason = getValueByPath(fromObject, [
      "raiFilteredReason"
    ]);
    if (fromRaiFilteredReason != null) {
      setValueByPath(toObject, ["raiFilteredReason"], fromRaiFilteredReason);
    }
    const fromSafetyAttributes = getValueByPath(fromObject, ["_self"]);
    if (fromSafetyAttributes != null) {
      setValueByPath(toObject, ["safetyAttributes"], safetyAttributesFromMldev(fromSafetyAttributes));
    }
    return toObject;
  }
  function generatedImageFromVertex(fromObject) {
    const toObject = {};
    const fromImage = getValueByPath(fromObject, ["_self"]);
    if (fromImage != null) {
      setValueByPath(toObject, ["image"], imageFromVertex(fromImage));
    }
    const fromRaiFilteredReason = getValueByPath(fromObject, [
      "raiFilteredReason"
    ]);
    if (fromRaiFilteredReason != null) {
      setValueByPath(toObject, ["raiFilteredReason"], fromRaiFilteredReason);
    }
    const fromSafetyAttributes = getValueByPath(fromObject, ["_self"]);
    if (fromSafetyAttributes != null) {
      setValueByPath(toObject, ["safetyAttributes"], safetyAttributesFromVertex(fromSafetyAttributes));
    }
    const fromEnhancedPrompt = getValueByPath(fromObject, ["prompt"]);
    if (fromEnhancedPrompt != null) {
      setValueByPath(toObject, ["enhancedPrompt"], fromEnhancedPrompt);
    }
    return toObject;
  }
  function generatedImageMaskFromVertex(fromObject) {
    const toObject = {};
    const fromMask = getValueByPath(fromObject, ["_self"]);
    if (fromMask != null) {
      setValueByPath(toObject, ["mask"], imageFromVertex(fromMask));
    }
    const fromLabels = getValueByPath(fromObject, ["labels"]);
    if (fromLabels != null) {
      let transformedList = fromLabels;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return entityLabelFromVertex(item);
        });
      }
      setValueByPath(toObject, ["labels"], transformedList);
    }
    return toObject;
  }
  function generatedVideoFromMldev(fromObject) {
    const toObject = {};
    const fromVideo = getValueByPath(fromObject, ["_self"]);
    if (fromVideo != null) {
      setValueByPath(toObject, ["video"], videoFromMldev(fromVideo));
    }
    return toObject;
  }
  function generatedVideoFromVertex(fromObject) {
    const toObject = {};
    const fromVideo = getValueByPath(fromObject, ["_self"]);
    if (fromVideo != null) {
      setValueByPath(toObject, ["video"], videoFromVertex(fromVideo));
    }
    return toObject;
  }
  function getModelParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "name"], tModel(apiClient, fromModel));
    }
    return toObject;
  }
  function getModelParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "name"], tModel(apiClient, fromModel));
    }
    return toObject;
  }
  function googleMapsToVertex(fromObject) {
    const toObject = {};
    const fromAuthConfig = getValueByPath(fromObject, ["authConfig"]);
    if (fromAuthConfig != null) {
      setValueByPath(toObject, ["authConfig"], authConfigToVertex(fromAuthConfig));
    }
    return toObject;
  }
  function googleSearchRetrievalToMldev$1(fromObject) {
    const toObject = {};
    const fromDynamicRetrievalConfig = getValueByPath(fromObject, [
      "dynamicRetrievalConfig"
    ]);
    if (fromDynamicRetrievalConfig != null) {
      setValueByPath(toObject, ["dynamicRetrievalConfig"], dynamicRetrievalConfigToMldev$1(fromDynamicRetrievalConfig));
    }
    return toObject;
  }
  function googleSearchRetrievalToVertex(fromObject) {
    const toObject = {};
    const fromDynamicRetrievalConfig = getValueByPath(fromObject, [
      "dynamicRetrievalConfig"
    ]);
    if (fromDynamicRetrievalConfig != null) {
      setValueByPath(toObject, ["dynamicRetrievalConfig"], dynamicRetrievalConfigToVertex(fromDynamicRetrievalConfig));
    }
    return toObject;
  }
  function googleSearchToMldev$1(fromObject) {
    const toObject = {};
    const fromTimeRangeFilter = getValueByPath(fromObject, [
      "timeRangeFilter"
    ]);
    if (fromTimeRangeFilter != null) {
      setValueByPath(toObject, ["timeRangeFilter"], intervalToMldev$1(fromTimeRangeFilter));
    }
    if (getValueByPath(fromObject, ["excludeDomains"]) !== void 0) {
      throw new Error("excludeDomains parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function googleSearchToVertex(fromObject) {
    const toObject = {};
    const fromTimeRangeFilter = getValueByPath(fromObject, [
      "timeRangeFilter"
    ]);
    if (fromTimeRangeFilter != null) {
      setValueByPath(toObject, ["timeRangeFilter"], intervalToVertex(fromTimeRangeFilter));
    }
    const fromExcludeDomains = getValueByPath(fromObject, [
      "excludeDomains"
    ]);
    if (fromExcludeDomains != null) {
      setValueByPath(toObject, ["excludeDomains"], fromExcludeDomains);
    }
    return toObject;
  }
  function imageFromMldev(fromObject) {
    const toObject = {};
    const fromImageBytes = getValueByPath(fromObject, [
      "bytesBase64Encoded"
    ]);
    if (fromImageBytes != null) {
      setValueByPath(toObject, ["imageBytes"], tBytes(fromImageBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function imageFromVertex(fromObject) {
    const toObject = {};
    const fromGcsUri = getValueByPath(fromObject, ["gcsUri"]);
    if (fromGcsUri != null) {
      setValueByPath(toObject, ["gcsUri"], fromGcsUri);
    }
    const fromImageBytes = getValueByPath(fromObject, [
      "bytesBase64Encoded"
    ]);
    if (fromImageBytes != null) {
      setValueByPath(toObject, ["imageBytes"], tBytes(fromImageBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function imageToMldev(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["gcsUri"]) !== void 0) {
      throw new Error("gcsUri parameter is not supported in Gemini API.");
    }
    const fromImageBytes = getValueByPath(fromObject, ["imageBytes"]);
    if (fromImageBytes != null) {
      setValueByPath(toObject, ["bytesBase64Encoded"], tBytes(fromImageBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function imageToVertex(fromObject) {
    const toObject = {};
    const fromGcsUri = getValueByPath(fromObject, ["gcsUri"]);
    if (fromGcsUri != null) {
      setValueByPath(toObject, ["gcsUri"], fromGcsUri);
    }
    const fromImageBytes = getValueByPath(fromObject, ["imageBytes"]);
    if (fromImageBytes != null) {
      setValueByPath(toObject, ["bytesBase64Encoded"], tBytes(fromImageBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function intervalToMldev$1(fromObject) {
    const toObject = {};
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    return toObject;
  }
  function intervalToVertex(fromObject) {
    const toObject = {};
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    return toObject;
  }
  function latLngToMldev(fromObject) {
    const toObject = {};
    const fromLatitude = getValueByPath(fromObject, ["latitude"]);
    if (fromLatitude != null) {
      setValueByPath(toObject, ["latitude"], fromLatitude);
    }
    const fromLongitude = getValueByPath(fromObject, ["longitude"]);
    if (fromLongitude != null) {
      setValueByPath(toObject, ["longitude"], fromLongitude);
    }
    return toObject;
  }
  function latLngToVertex(fromObject) {
    const toObject = {};
    const fromLatitude = getValueByPath(fromObject, ["latitude"]);
    if (fromLatitude != null) {
      setValueByPath(toObject, ["latitude"], fromLatitude);
    }
    const fromLongitude = getValueByPath(fromObject, ["longitude"]);
    if (fromLongitude != null) {
      setValueByPath(toObject, ["longitude"], fromLongitude);
    }
    return toObject;
  }
  function listModelsConfigToMldev(apiClient, fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    const fromFilter = getValueByPath(fromObject, ["filter"]);
    if (parentObject !== void 0 && fromFilter != null) {
      setValueByPath(parentObject, ["_query", "filter"], fromFilter);
    }
    const fromQueryBase = getValueByPath(fromObject, ["queryBase"]);
    if (parentObject !== void 0 && fromQueryBase != null) {
      setValueByPath(parentObject, ["_url", "models_url"], tModelsUrl(apiClient, fromQueryBase));
    }
    return toObject;
  }
  function listModelsConfigToVertex(apiClient, fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    const fromFilter = getValueByPath(fromObject, ["filter"]);
    if (parentObject !== void 0 && fromFilter != null) {
      setValueByPath(parentObject, ["_query", "filter"], fromFilter);
    }
    const fromQueryBase = getValueByPath(fromObject, ["queryBase"]);
    if (parentObject !== void 0 && fromQueryBase != null) {
      setValueByPath(parentObject, ["_url", "models_url"], tModelsUrl(apiClient, fromQueryBase));
    }
    return toObject;
  }
  function listModelsParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listModelsConfigToMldev(apiClient, fromConfig, toObject);
    }
    return toObject;
  }
  function listModelsParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listModelsConfigToVertex(apiClient, fromConfig, toObject);
    }
    return toObject;
  }
  function listModelsResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromModels = getValueByPath(fromObject, ["_self"]);
    if (fromModels != null) {
      let transformedList = tExtractModels(fromModels);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modelFromMldev(item);
        });
      }
      setValueByPath(toObject, ["models"], transformedList);
    }
    return toObject;
  }
  function listModelsResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromModels = getValueByPath(fromObject, ["_self"]);
    if (fromModels != null) {
      let transformedList = tExtractModels(fromModels);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return modelFromVertex(item);
        });
      }
      setValueByPath(toObject, ["models"], transformedList);
    }
    return toObject;
  }
  function maskReferenceConfigToVertex(fromObject) {
    const toObject = {};
    const fromMaskMode = getValueByPath(fromObject, ["maskMode"]);
    if (fromMaskMode != null) {
      setValueByPath(toObject, ["maskMode"], fromMaskMode);
    }
    const fromSegmentationClasses = getValueByPath(fromObject, [
      "segmentationClasses"
    ]);
    if (fromSegmentationClasses != null) {
      setValueByPath(toObject, ["maskClasses"], fromSegmentationClasses);
    }
    const fromMaskDilation = getValueByPath(fromObject, ["maskDilation"]);
    if (fromMaskDilation != null) {
      setValueByPath(toObject, ["dilation"], fromMaskDilation);
    }
    return toObject;
  }
  function modelFromMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromVersion = getValueByPath(fromObject, ["version"]);
    if (fromVersion != null) {
      setValueByPath(toObject, ["version"], fromVersion);
    }
    const fromTunedModelInfo = getValueByPath(fromObject, ["_self"]);
    if (fromTunedModelInfo != null) {
      setValueByPath(toObject, ["tunedModelInfo"], tunedModelInfoFromMldev(fromTunedModelInfo));
    }
    const fromInputTokenLimit = getValueByPath(fromObject, [
      "inputTokenLimit"
    ]);
    if (fromInputTokenLimit != null) {
      setValueByPath(toObject, ["inputTokenLimit"], fromInputTokenLimit);
    }
    const fromOutputTokenLimit = getValueByPath(fromObject, [
      "outputTokenLimit"
    ]);
    if (fromOutputTokenLimit != null) {
      setValueByPath(toObject, ["outputTokenLimit"], fromOutputTokenLimit);
    }
    const fromSupportedActions = getValueByPath(fromObject, [
      "supportedGenerationMethods"
    ]);
    if (fromSupportedActions != null) {
      setValueByPath(toObject, ["supportedActions"], fromSupportedActions);
    }
    return toObject;
  }
  function modelFromVertex(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (fromDisplayName != null) {
      setValueByPath(toObject, ["displayName"], fromDisplayName);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromVersion = getValueByPath(fromObject, ["versionId"]);
    if (fromVersion != null) {
      setValueByPath(toObject, ["version"], fromVersion);
    }
    const fromEndpoints = getValueByPath(fromObject, ["deployedModels"]);
    if (fromEndpoints != null) {
      let transformedList = fromEndpoints;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return endpointFromVertex(item);
        });
      }
      setValueByPath(toObject, ["endpoints"], transformedList);
    }
    const fromLabels = getValueByPath(fromObject, ["labels"]);
    if (fromLabels != null) {
      setValueByPath(toObject, ["labels"], fromLabels);
    }
    const fromTunedModelInfo = getValueByPath(fromObject, ["_self"]);
    if (fromTunedModelInfo != null) {
      setValueByPath(toObject, ["tunedModelInfo"], tunedModelInfoFromVertex(fromTunedModelInfo));
    }
    const fromDefaultCheckpointId = getValueByPath(fromObject, [
      "defaultCheckpointId"
    ]);
    if (fromDefaultCheckpointId != null) {
      setValueByPath(toObject, ["defaultCheckpointId"], fromDefaultCheckpointId);
    }
    const fromCheckpoints = getValueByPath(fromObject, ["checkpoints"]);
    if (fromCheckpoints != null) {
      let transformedList = fromCheckpoints;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return checkpointFromVertex(item);
        });
      }
      setValueByPath(toObject, ["checkpoints"], transformedList);
    }
    return toObject;
  }
  function modelSelectionConfigToVertex(fromObject) {
    const toObject = {};
    const fromFeatureSelectionPreference = getValueByPath(fromObject, [
      "featureSelectionPreference"
    ]);
    if (fromFeatureSelectionPreference != null) {
      setValueByPath(toObject, ["featureSelectionPreference"], fromFeatureSelectionPreference);
    }
    return toObject;
  }
  function multiSpeakerVoiceConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromSpeakerVoiceConfigs = getValueByPath(fromObject, [
      "speakerVoiceConfigs"
    ]);
    if (fromSpeakerVoiceConfigs != null) {
      let transformedList = fromSpeakerVoiceConfigs;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return speakerVoiceConfigToMldev$1(item);
        });
      }
      setValueByPath(toObject, ["speakerVoiceConfigs"], transformedList);
    }
    return toObject;
  }
  function partFromMldev(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataFromMldev(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobFromMldev(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataFromMldev(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallFromMldev(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function partFromVertex(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataFromVertex(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobFromVertex(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataFromVertex(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallFromVertex(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function partToMldev$1(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataToMldev$1(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobToMldev$1(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataToMldev$1(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallToMldev$1(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function partToVertex(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataToVertex(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobToVertex(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataToVertex(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallToVertex(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function prebuiltVoiceConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromVoiceName = getValueByPath(fromObject, ["voiceName"]);
    if (fromVoiceName != null) {
      setValueByPath(toObject, ["voiceName"], fromVoiceName);
    }
    return toObject;
  }
  function prebuiltVoiceConfigToVertex(fromObject) {
    const toObject = {};
    const fromVoiceName = getValueByPath(fromObject, ["voiceName"]);
    if (fromVoiceName != null) {
      setValueByPath(toObject, ["voiceName"], fromVoiceName);
    }
    return toObject;
  }
  function productImageToVertex(fromObject) {
    const toObject = {};
    const fromProductImage = getValueByPath(fromObject, ["productImage"]);
    if (fromProductImage != null) {
      setValueByPath(toObject, ["image"], imageToVertex(fromProductImage));
    }
    return toObject;
  }
  function recontextImageConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromNumberOfImages = getValueByPath(fromObject, [
      "numberOfImages"
    ]);
    if (parentObject !== void 0 && fromNumberOfImages != null) {
      setValueByPath(parentObject, ["parameters", "sampleCount"], fromNumberOfImages);
    }
    const fromBaseSteps = getValueByPath(fromObject, ["baseSteps"]);
    if (parentObject !== void 0 && fromBaseSteps != null) {
      setValueByPath(parentObject, ["parameters", "editConfig", "baseSteps"], fromBaseSteps);
    }
    const fromOutputGcsUri = getValueByPath(fromObject, ["outputGcsUri"]);
    if (parentObject !== void 0 && fromOutputGcsUri != null) {
      setValueByPath(parentObject, ["parameters", "storageUri"], fromOutputGcsUri);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (parentObject !== void 0 && fromSeed != null) {
      setValueByPath(parentObject, ["parameters", "seed"], fromSeed);
    }
    const fromSafetyFilterLevel = getValueByPath(fromObject, [
      "safetyFilterLevel"
    ]);
    if (parentObject !== void 0 && fromSafetyFilterLevel != null) {
      setValueByPath(parentObject, ["parameters", "safetySetting"], fromSafetyFilterLevel);
    }
    const fromPersonGeneration = getValueByPath(fromObject, [
      "personGeneration"
    ]);
    if (parentObject !== void 0 && fromPersonGeneration != null) {
      setValueByPath(parentObject, ["parameters", "personGeneration"], fromPersonGeneration);
    }
    const fromAddWatermark = getValueByPath(fromObject, ["addWatermark"]);
    if (parentObject !== void 0 && fromAddWatermark != null) {
      setValueByPath(parentObject, ["parameters", "addWatermark"], fromAddWatermark);
    }
    const fromOutputMimeType = getValueByPath(fromObject, [
      "outputMimeType"
    ]);
    if (parentObject !== void 0 && fromOutputMimeType != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "mimeType"], fromOutputMimeType);
    }
    const fromOutputCompressionQuality = getValueByPath(fromObject, [
      "outputCompressionQuality"
    ]);
    if (parentObject !== void 0 && fromOutputCompressionQuality != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "compressionQuality"], fromOutputCompressionQuality);
    }
    const fromEnhancePrompt = getValueByPath(fromObject, [
      "enhancePrompt"
    ]);
    if (parentObject !== void 0 && fromEnhancePrompt != null) {
      setValueByPath(parentObject, ["parameters", "enhancePrompt"], fromEnhancePrompt);
    }
    return toObject;
  }
  function recontextImageParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromSource = getValueByPath(fromObject, ["source"]);
    if (fromSource != null) {
      recontextImageSourceToVertex(fromSource, toObject);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      recontextImageConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function recontextImageResponseFromVertex(fromObject) {
    const toObject = {};
    const fromGeneratedImages = getValueByPath(fromObject, [
      "predictions"
    ]);
    if (fromGeneratedImages != null) {
      let transformedList = fromGeneratedImages;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedImageFromVertex(item);
        });
      }
      setValueByPath(toObject, ["generatedImages"], transformedList);
    }
    return toObject;
  }
  function recontextImageSourceToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (parentObject !== void 0 && fromPrompt != null) {
      setValueByPath(parentObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromPersonImage = getValueByPath(fromObject, ["personImage"]);
    if (parentObject !== void 0 && fromPersonImage != null) {
      setValueByPath(parentObject, ["instances[0]", "personImage", "image"], imageToVertex(fromPersonImage));
    }
    const fromProductImages = getValueByPath(fromObject, [
      "productImages"
    ]);
    if (parentObject !== void 0 && fromProductImages != null) {
      let transformedList = fromProductImages;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return productImageToVertex(item);
        });
      }
      setValueByPath(parentObject, ["instances[0]", "productImages"], transformedList);
    }
    return toObject;
  }
  function referenceImageAPIInternalToVertex(fromObject) {
    const toObject = {};
    const fromReferenceImage = getValueByPath(fromObject, [
      "referenceImage"
    ]);
    if (fromReferenceImage != null) {
      setValueByPath(toObject, ["referenceImage"], imageToVertex(fromReferenceImage));
    }
    const fromReferenceId = getValueByPath(fromObject, ["referenceId"]);
    if (fromReferenceId != null) {
      setValueByPath(toObject, ["referenceId"], fromReferenceId);
    }
    const fromReferenceType = getValueByPath(fromObject, [
      "referenceType"
    ]);
    if (fromReferenceType != null) {
      setValueByPath(toObject, ["referenceType"], fromReferenceType);
    }
    const fromMaskImageConfig = getValueByPath(fromObject, [
      "maskImageConfig"
    ]);
    if (fromMaskImageConfig != null) {
      setValueByPath(toObject, ["maskImageConfig"], maskReferenceConfigToVertex(fromMaskImageConfig));
    }
    const fromControlImageConfig = getValueByPath(fromObject, [
      "controlImageConfig"
    ]);
    if (fromControlImageConfig != null) {
      setValueByPath(toObject, ["controlImageConfig"], controlReferenceConfigToVertex(fromControlImageConfig));
    }
    const fromStyleImageConfig = getValueByPath(fromObject, [
      "styleImageConfig"
    ]);
    if (fromStyleImageConfig != null) {
      setValueByPath(toObject, ["styleImageConfig"], styleReferenceConfigToVertex(fromStyleImageConfig));
    }
    const fromSubjectImageConfig = getValueByPath(fromObject, [
      "subjectImageConfig"
    ]);
    if (fromSubjectImageConfig != null) {
      setValueByPath(toObject, ["subjectImageConfig"], subjectReferenceConfigToVertex(fromSubjectImageConfig));
    }
    return toObject;
  }
  function retrievalConfigToMldev(fromObject) {
    const toObject = {};
    const fromLatLng = getValueByPath(fromObject, ["latLng"]);
    if (fromLatLng != null) {
      setValueByPath(toObject, ["latLng"], latLngToMldev(fromLatLng));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function retrievalConfigToVertex(fromObject) {
    const toObject = {};
    const fromLatLng = getValueByPath(fromObject, ["latLng"]);
    if (fromLatLng != null) {
      setValueByPath(toObject, ["latLng"], latLngToVertex(fromLatLng));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function safetyAttributesFromMldev(fromObject) {
    const toObject = {};
    const fromCategories = getValueByPath(fromObject, [
      "safetyAttributes",
      "categories"
    ]);
    if (fromCategories != null) {
      setValueByPath(toObject, ["categories"], fromCategories);
    }
    const fromScores = getValueByPath(fromObject, [
      "safetyAttributes",
      "scores"
    ]);
    if (fromScores != null) {
      setValueByPath(toObject, ["scores"], fromScores);
    }
    const fromContentType = getValueByPath(fromObject, ["contentType"]);
    if (fromContentType != null) {
      setValueByPath(toObject, ["contentType"], fromContentType);
    }
    return toObject;
  }
  function safetyAttributesFromVertex(fromObject) {
    const toObject = {};
    const fromCategories = getValueByPath(fromObject, [
      "safetyAttributes",
      "categories"
    ]);
    if (fromCategories != null) {
      setValueByPath(toObject, ["categories"], fromCategories);
    }
    const fromScores = getValueByPath(fromObject, [
      "safetyAttributes",
      "scores"
    ]);
    if (fromScores != null) {
      setValueByPath(toObject, ["scores"], fromScores);
    }
    const fromContentType = getValueByPath(fromObject, ["contentType"]);
    if (fromContentType != null) {
      setValueByPath(toObject, ["contentType"], fromContentType);
    }
    return toObject;
  }
  function safetySettingToMldev(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["method"]) !== void 0) {
      throw new Error("method parameter is not supported in Gemini API.");
    }
    const fromCategory = getValueByPath(fromObject, ["category"]);
    if (fromCategory != null) {
      setValueByPath(toObject, ["category"], fromCategory);
    }
    const fromThreshold = getValueByPath(fromObject, ["threshold"]);
    if (fromThreshold != null) {
      setValueByPath(toObject, ["threshold"], fromThreshold);
    }
    return toObject;
  }
  function safetySettingToVertex(fromObject) {
    const toObject = {};
    const fromMethod = getValueByPath(fromObject, ["method"]);
    if (fromMethod != null) {
      setValueByPath(toObject, ["method"], fromMethod);
    }
    const fromCategory = getValueByPath(fromObject, ["category"]);
    if (fromCategory != null) {
      setValueByPath(toObject, ["category"], fromCategory);
    }
    const fromThreshold = getValueByPath(fromObject, ["threshold"]);
    if (fromThreshold != null) {
      setValueByPath(toObject, ["threshold"], fromThreshold);
    }
    return toObject;
  }
  function schemaToMldev(fromObject) {
    const toObject = {};
    const fromAnyOf = getValueByPath(fromObject, ["anyOf"]);
    if (fromAnyOf != null) {
      setValueByPath(toObject, ["anyOf"], fromAnyOf);
    }
    const fromDefault = getValueByPath(fromObject, ["default"]);
    if (fromDefault != null) {
      setValueByPath(toObject, ["default"], fromDefault);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromEnum = getValueByPath(fromObject, ["enum"]);
    if (fromEnum != null) {
      setValueByPath(toObject, ["enum"], fromEnum);
    }
    const fromExample = getValueByPath(fromObject, ["example"]);
    if (fromExample != null) {
      setValueByPath(toObject, ["example"], fromExample);
    }
    const fromFormat = getValueByPath(fromObject, ["format"]);
    if (fromFormat != null) {
      setValueByPath(toObject, ["format"], fromFormat);
    }
    const fromItems = getValueByPath(fromObject, ["items"]);
    if (fromItems != null) {
      setValueByPath(toObject, ["items"], fromItems);
    }
    const fromMaxItems = getValueByPath(fromObject, ["maxItems"]);
    if (fromMaxItems != null) {
      setValueByPath(toObject, ["maxItems"], fromMaxItems);
    }
    const fromMaxLength = getValueByPath(fromObject, ["maxLength"]);
    if (fromMaxLength != null) {
      setValueByPath(toObject, ["maxLength"], fromMaxLength);
    }
    const fromMaxProperties = getValueByPath(fromObject, [
      "maxProperties"
    ]);
    if (fromMaxProperties != null) {
      setValueByPath(toObject, ["maxProperties"], fromMaxProperties);
    }
    const fromMaximum = getValueByPath(fromObject, ["maximum"]);
    if (fromMaximum != null) {
      setValueByPath(toObject, ["maximum"], fromMaximum);
    }
    const fromMinItems = getValueByPath(fromObject, ["minItems"]);
    if (fromMinItems != null) {
      setValueByPath(toObject, ["minItems"], fromMinItems);
    }
    const fromMinLength = getValueByPath(fromObject, ["minLength"]);
    if (fromMinLength != null) {
      setValueByPath(toObject, ["minLength"], fromMinLength);
    }
    const fromMinProperties = getValueByPath(fromObject, [
      "minProperties"
    ]);
    if (fromMinProperties != null) {
      setValueByPath(toObject, ["minProperties"], fromMinProperties);
    }
    const fromMinimum = getValueByPath(fromObject, ["minimum"]);
    if (fromMinimum != null) {
      setValueByPath(toObject, ["minimum"], fromMinimum);
    }
    const fromNullable = getValueByPath(fromObject, ["nullable"]);
    if (fromNullable != null) {
      setValueByPath(toObject, ["nullable"], fromNullable);
    }
    const fromPattern = getValueByPath(fromObject, ["pattern"]);
    if (fromPattern != null) {
      setValueByPath(toObject, ["pattern"], fromPattern);
    }
    const fromProperties = getValueByPath(fromObject, ["properties"]);
    if (fromProperties != null) {
      setValueByPath(toObject, ["properties"], fromProperties);
    }
    const fromPropertyOrdering = getValueByPath(fromObject, [
      "propertyOrdering"
    ]);
    if (fromPropertyOrdering != null) {
      setValueByPath(toObject, ["propertyOrdering"], fromPropertyOrdering);
    }
    const fromRequired = getValueByPath(fromObject, ["required"]);
    if (fromRequired != null) {
      setValueByPath(toObject, ["required"], fromRequired);
    }
    const fromTitle = getValueByPath(fromObject, ["title"]);
    if (fromTitle != null) {
      setValueByPath(toObject, ["title"], fromTitle);
    }
    const fromType = getValueByPath(fromObject, ["type"]);
    if (fromType != null) {
      setValueByPath(toObject, ["type"], fromType);
    }
    return toObject;
  }
  function schemaToVertex(fromObject) {
    const toObject = {};
    const fromAnyOf = getValueByPath(fromObject, ["anyOf"]);
    if (fromAnyOf != null) {
      setValueByPath(toObject, ["anyOf"], fromAnyOf);
    }
    const fromDefault = getValueByPath(fromObject, ["default"]);
    if (fromDefault != null) {
      setValueByPath(toObject, ["default"], fromDefault);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromEnum = getValueByPath(fromObject, ["enum"]);
    if (fromEnum != null) {
      setValueByPath(toObject, ["enum"], fromEnum);
    }
    const fromExample = getValueByPath(fromObject, ["example"]);
    if (fromExample != null) {
      setValueByPath(toObject, ["example"], fromExample);
    }
    const fromFormat = getValueByPath(fromObject, ["format"]);
    if (fromFormat != null) {
      setValueByPath(toObject, ["format"], fromFormat);
    }
    const fromItems = getValueByPath(fromObject, ["items"]);
    if (fromItems != null) {
      setValueByPath(toObject, ["items"], fromItems);
    }
    const fromMaxItems = getValueByPath(fromObject, ["maxItems"]);
    if (fromMaxItems != null) {
      setValueByPath(toObject, ["maxItems"], fromMaxItems);
    }
    const fromMaxLength = getValueByPath(fromObject, ["maxLength"]);
    if (fromMaxLength != null) {
      setValueByPath(toObject, ["maxLength"], fromMaxLength);
    }
    const fromMaxProperties = getValueByPath(fromObject, [
      "maxProperties"
    ]);
    if (fromMaxProperties != null) {
      setValueByPath(toObject, ["maxProperties"], fromMaxProperties);
    }
    const fromMaximum = getValueByPath(fromObject, ["maximum"]);
    if (fromMaximum != null) {
      setValueByPath(toObject, ["maximum"], fromMaximum);
    }
    const fromMinItems = getValueByPath(fromObject, ["minItems"]);
    if (fromMinItems != null) {
      setValueByPath(toObject, ["minItems"], fromMinItems);
    }
    const fromMinLength = getValueByPath(fromObject, ["minLength"]);
    if (fromMinLength != null) {
      setValueByPath(toObject, ["minLength"], fromMinLength);
    }
    const fromMinProperties = getValueByPath(fromObject, [
      "minProperties"
    ]);
    if (fromMinProperties != null) {
      setValueByPath(toObject, ["minProperties"], fromMinProperties);
    }
    const fromMinimum = getValueByPath(fromObject, ["minimum"]);
    if (fromMinimum != null) {
      setValueByPath(toObject, ["minimum"], fromMinimum);
    }
    const fromNullable = getValueByPath(fromObject, ["nullable"]);
    if (fromNullable != null) {
      setValueByPath(toObject, ["nullable"], fromNullable);
    }
    const fromPattern = getValueByPath(fromObject, ["pattern"]);
    if (fromPattern != null) {
      setValueByPath(toObject, ["pattern"], fromPattern);
    }
    const fromProperties = getValueByPath(fromObject, ["properties"]);
    if (fromProperties != null) {
      setValueByPath(toObject, ["properties"], fromProperties);
    }
    const fromPropertyOrdering = getValueByPath(fromObject, [
      "propertyOrdering"
    ]);
    if (fromPropertyOrdering != null) {
      setValueByPath(toObject, ["propertyOrdering"], fromPropertyOrdering);
    }
    const fromRequired = getValueByPath(fromObject, ["required"]);
    if (fromRequired != null) {
      setValueByPath(toObject, ["required"], fromRequired);
    }
    const fromTitle = getValueByPath(fromObject, ["title"]);
    if (fromTitle != null) {
      setValueByPath(toObject, ["title"], fromTitle);
    }
    const fromType = getValueByPath(fromObject, ["type"]);
    if (fromType != null) {
      setValueByPath(toObject, ["type"], fromType);
    }
    return toObject;
  }
  function scribbleImageToVertex(fromObject) {
    const toObject = {};
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (fromImage != null) {
      setValueByPath(toObject, ["image"], imageToVertex(fromImage));
    }
    return toObject;
  }
  function segmentImageConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (parentObject !== void 0 && fromMode != null) {
      setValueByPath(parentObject, ["parameters", "mode"], fromMode);
    }
    const fromMaxPredictions = getValueByPath(fromObject, [
      "maxPredictions"
    ]);
    if (parentObject !== void 0 && fromMaxPredictions != null) {
      setValueByPath(parentObject, ["parameters", "maxPredictions"], fromMaxPredictions);
    }
    const fromConfidenceThreshold = getValueByPath(fromObject, [
      "confidenceThreshold"
    ]);
    if (parentObject !== void 0 && fromConfidenceThreshold != null) {
      setValueByPath(parentObject, ["parameters", "confidenceThreshold"], fromConfidenceThreshold);
    }
    const fromMaskDilation = getValueByPath(fromObject, ["maskDilation"]);
    if (parentObject !== void 0 && fromMaskDilation != null) {
      setValueByPath(parentObject, ["parameters", "maskDilation"], fromMaskDilation);
    }
    const fromBinaryColorThreshold = getValueByPath(fromObject, [
      "binaryColorThreshold"
    ]);
    if (parentObject !== void 0 && fromBinaryColorThreshold != null) {
      setValueByPath(parentObject, ["parameters", "binaryColorThreshold"], fromBinaryColorThreshold);
    }
    return toObject;
  }
  function segmentImageParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromSource = getValueByPath(fromObject, ["source"]);
    if (fromSource != null) {
      segmentImageSourceToVertex(fromSource, toObject);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      segmentImageConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function segmentImageResponseFromVertex(fromObject) {
    const toObject = {};
    const fromGeneratedMasks = getValueByPath(fromObject, ["predictions"]);
    if (fromGeneratedMasks != null) {
      let transformedList = fromGeneratedMasks;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedImageMaskFromVertex(item);
        });
      }
      setValueByPath(toObject, ["generatedMasks"], transformedList);
    }
    return toObject;
  }
  function segmentImageSourceToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromPrompt = getValueByPath(fromObject, ["prompt"]);
    if (parentObject !== void 0 && fromPrompt != null) {
      setValueByPath(parentObject, ["instances[0]", "prompt"], fromPrompt);
    }
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (parentObject !== void 0 && fromImage != null) {
      setValueByPath(parentObject, ["instances[0]", "image"], imageToVertex(fromImage));
    }
    const fromScribbleImage = getValueByPath(fromObject, [
      "scribbleImage"
    ]);
    if (parentObject !== void 0 && fromScribbleImage != null) {
      setValueByPath(parentObject, ["instances[0]", "scribble"], scribbleImageToVertex(fromScribbleImage));
    }
    return toObject;
  }
  function speakerVoiceConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromSpeaker = getValueByPath(fromObject, ["speaker"]);
    if (fromSpeaker != null) {
      setValueByPath(toObject, ["speaker"], fromSpeaker);
    }
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToMldev$1(fromVoiceConfig));
    }
    return toObject;
  }
  function speechConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToMldev$1(fromVoiceConfig));
    }
    const fromMultiSpeakerVoiceConfig = getValueByPath(fromObject, [
      "multiSpeakerVoiceConfig"
    ]);
    if (fromMultiSpeakerVoiceConfig != null) {
      setValueByPath(toObject, ["multiSpeakerVoiceConfig"], multiSpeakerVoiceConfigToMldev$1(fromMultiSpeakerVoiceConfig));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function speechConfigToVertex(fromObject) {
    const toObject = {};
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToVertex(fromVoiceConfig));
    }
    if (getValueByPath(fromObject, ["multiSpeakerVoiceConfig"]) !== void 0) {
      throw new Error("multiSpeakerVoiceConfig parameter is not supported in Vertex AI.");
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function styleReferenceConfigToVertex(fromObject) {
    const toObject = {};
    const fromStyleDescription = getValueByPath(fromObject, [
      "styleDescription"
    ]);
    if (fromStyleDescription != null) {
      setValueByPath(toObject, ["styleDescription"], fromStyleDescription);
    }
    return toObject;
  }
  function subjectReferenceConfigToVertex(fromObject) {
    const toObject = {};
    const fromSubjectType = getValueByPath(fromObject, ["subjectType"]);
    if (fromSubjectType != null) {
      setValueByPath(toObject, ["subjectType"], fromSubjectType);
    }
    const fromSubjectDescription = getValueByPath(fromObject, [
      "subjectDescription"
    ]);
    if (fromSubjectDescription != null) {
      setValueByPath(toObject, ["subjectDescription"], fromSubjectDescription);
    }
    return toObject;
  }
  function thinkingConfigToMldev(fromObject) {
    const toObject = {};
    const fromIncludeThoughts = getValueByPath(fromObject, [
      "includeThoughts"
    ]);
    if (fromIncludeThoughts != null) {
      setValueByPath(toObject, ["includeThoughts"], fromIncludeThoughts);
    }
    const fromThinkingBudget = getValueByPath(fromObject, [
      "thinkingBudget"
    ]);
    if (fromThinkingBudget != null) {
      setValueByPath(toObject, ["thinkingBudget"], fromThinkingBudget);
    }
    return toObject;
  }
  function thinkingConfigToVertex(fromObject) {
    const toObject = {};
    const fromIncludeThoughts = getValueByPath(fromObject, [
      "includeThoughts"
    ]);
    if (fromIncludeThoughts != null) {
      setValueByPath(toObject, ["includeThoughts"], fromIncludeThoughts);
    }
    const fromThinkingBudget = getValueByPath(fromObject, [
      "thinkingBudget"
    ]);
    if (fromThinkingBudget != null) {
      setValueByPath(toObject, ["thinkingBudget"], fromThinkingBudget);
    }
    return toObject;
  }
  function toolComputerUseToMldev$1(fromObject) {
    const toObject = {};
    const fromEnvironment = getValueByPath(fromObject, ["environment"]);
    if (fromEnvironment != null) {
      setValueByPath(toObject, ["environment"], fromEnvironment);
    }
    const fromExcludedPredefinedFunctions = getValueByPath(fromObject, [
      "excludedPredefinedFunctions"
    ]);
    if (fromExcludedPredefinedFunctions != null) {
      setValueByPath(toObject, ["excludedPredefinedFunctions"], fromExcludedPredefinedFunctions);
    }
    return toObject;
  }
  function toolComputerUseToVertex(fromObject) {
    const toObject = {};
    const fromEnvironment = getValueByPath(fromObject, ["environment"]);
    if (fromEnvironment != null) {
      setValueByPath(toObject, ["environment"], fromEnvironment);
    }
    const fromExcludedPredefinedFunctions = getValueByPath(fromObject, [
      "excludedPredefinedFunctions"
    ]);
    if (fromExcludedPredefinedFunctions != null) {
      setValueByPath(toObject, ["excludedPredefinedFunctions"], fromExcludedPredefinedFunctions);
    }
    return toObject;
  }
  function toolConfigToMldev(fromObject) {
    const toObject = {};
    const fromFunctionCallingConfig = getValueByPath(fromObject, [
      "functionCallingConfig"
    ]);
    if (fromFunctionCallingConfig != null) {
      setValueByPath(toObject, ["functionCallingConfig"], functionCallingConfigToMldev(fromFunctionCallingConfig));
    }
    const fromRetrievalConfig = getValueByPath(fromObject, [
      "retrievalConfig"
    ]);
    if (fromRetrievalConfig != null) {
      setValueByPath(toObject, ["retrievalConfig"], retrievalConfigToMldev(fromRetrievalConfig));
    }
    return toObject;
  }
  function toolConfigToVertex(fromObject) {
    const toObject = {};
    const fromFunctionCallingConfig = getValueByPath(fromObject, [
      "functionCallingConfig"
    ]);
    if (fromFunctionCallingConfig != null) {
      setValueByPath(toObject, ["functionCallingConfig"], functionCallingConfigToVertex(fromFunctionCallingConfig));
    }
    const fromRetrievalConfig = getValueByPath(fromObject, [
      "retrievalConfig"
    ]);
    if (fromRetrievalConfig != null) {
      setValueByPath(toObject, ["retrievalConfig"], retrievalConfigToVertex(fromRetrievalConfig));
    }
    return toObject;
  }
  function toolToMldev$1(fromObject) {
    const toObject = {};
    const fromFunctionDeclarations = getValueByPath(fromObject, [
      "functionDeclarations"
    ]);
    if (fromFunctionDeclarations != null) {
      let transformedList = fromFunctionDeclarations;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionDeclarationToMldev$1(item);
        });
      }
      setValueByPath(toObject, ["functionDeclarations"], transformedList);
    }
    if (getValueByPath(fromObject, ["retrieval"]) !== void 0) {
      throw new Error("retrieval parameter is not supported in Gemini API.");
    }
    const fromGoogleSearch = getValueByPath(fromObject, ["googleSearch"]);
    if (fromGoogleSearch != null) {
      setValueByPath(toObject, ["googleSearch"], googleSearchToMldev$1(fromGoogleSearch));
    }
    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [
      "googleSearchRetrieval"
    ]);
    if (fromGoogleSearchRetrieval != null) {
      setValueByPath(toObject, ["googleSearchRetrieval"], googleSearchRetrievalToMldev$1(fromGoogleSearchRetrieval));
    }
    if (getValueByPath(fromObject, ["enterpriseWebSearch"]) !== void 0) {
      throw new Error("enterpriseWebSearch parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["googleMaps"]) !== void 0) {
      throw new Error("googleMaps parameter is not supported in Gemini API.");
    }
    const fromUrlContext = getValueByPath(fromObject, ["urlContext"]);
    if (fromUrlContext != null) {
      setValueByPath(toObject, ["urlContext"], urlContextToMldev$1());
    }
    const fromComputerUse = getValueByPath(fromObject, ["computerUse"]);
    if (fromComputerUse != null) {
      setValueByPath(toObject, ["computerUse"], toolComputerUseToMldev$1(fromComputerUse));
    }
    const fromCodeExecution = getValueByPath(fromObject, [
      "codeExecution"
    ]);
    if (fromCodeExecution != null) {
      setValueByPath(toObject, ["codeExecution"], fromCodeExecution);
    }
    return toObject;
  }
  function toolToVertex(fromObject) {
    const toObject = {};
    const fromFunctionDeclarations = getValueByPath(fromObject, [
      "functionDeclarations"
    ]);
    if (fromFunctionDeclarations != null) {
      let transformedList = fromFunctionDeclarations;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionDeclarationToVertex(item);
        });
      }
      setValueByPath(toObject, ["functionDeclarations"], transformedList);
    }
    const fromRetrieval = getValueByPath(fromObject, ["retrieval"]);
    if (fromRetrieval != null) {
      setValueByPath(toObject, ["retrieval"], fromRetrieval);
    }
    const fromGoogleSearch = getValueByPath(fromObject, ["googleSearch"]);
    if (fromGoogleSearch != null) {
      setValueByPath(toObject, ["googleSearch"], googleSearchToVertex(fromGoogleSearch));
    }
    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [
      "googleSearchRetrieval"
    ]);
    if (fromGoogleSearchRetrieval != null) {
      setValueByPath(toObject, ["googleSearchRetrieval"], googleSearchRetrievalToVertex(fromGoogleSearchRetrieval));
    }
    const fromEnterpriseWebSearch = getValueByPath(fromObject, [
      "enterpriseWebSearch"
    ]);
    if (fromEnterpriseWebSearch != null) {
      setValueByPath(toObject, ["enterpriseWebSearch"], enterpriseWebSearchToVertex(fromEnterpriseWebSearch));
    }
    const fromGoogleMaps = getValueByPath(fromObject, ["googleMaps"]);
    if (fromGoogleMaps != null) {
      setValueByPath(toObject, ["googleMaps"], googleMapsToVertex(fromGoogleMaps));
    }
    const fromUrlContext = getValueByPath(fromObject, ["urlContext"]);
    if (fromUrlContext != null) {
      setValueByPath(toObject, ["urlContext"], urlContextToVertex());
    }
    const fromComputerUse = getValueByPath(fromObject, ["computerUse"]);
    if (fromComputerUse != null) {
      setValueByPath(toObject, ["computerUse"], toolComputerUseToVertex(fromComputerUse));
    }
    const fromCodeExecution = getValueByPath(fromObject, [
      "codeExecution"
    ]);
    if (fromCodeExecution != null) {
      setValueByPath(toObject, ["codeExecution"], fromCodeExecution);
    }
    return toObject;
  }
  function tunedModelInfoFromMldev(fromObject) {
    const toObject = {};
    const fromBaseModel = getValueByPath(fromObject, ["baseModel"]);
    if (fromBaseModel != null) {
      setValueByPath(toObject, ["baseModel"], fromBaseModel);
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    return toObject;
  }
  function tunedModelInfoFromVertex(fromObject) {
    const toObject = {};
    const fromBaseModel = getValueByPath(fromObject, [
      "labels",
      "google-vertex-llm-tuning-base-model-id"
    ]);
    if (fromBaseModel != null) {
      setValueByPath(toObject, ["baseModel"], fromBaseModel);
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    return toObject;
  }
  function updateModelConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (parentObject !== void 0 && fromDisplayName != null) {
      setValueByPath(parentObject, ["displayName"], fromDisplayName);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (parentObject !== void 0 && fromDescription != null) {
      setValueByPath(parentObject, ["description"], fromDescription);
    }
    const fromDefaultCheckpointId = getValueByPath(fromObject, [
      "defaultCheckpointId"
    ]);
    if (parentObject !== void 0 && fromDefaultCheckpointId != null) {
      setValueByPath(parentObject, ["defaultCheckpointId"], fromDefaultCheckpointId);
    }
    return toObject;
  }
  function updateModelConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromDisplayName = getValueByPath(fromObject, ["displayName"]);
    if (parentObject !== void 0 && fromDisplayName != null) {
      setValueByPath(parentObject, ["displayName"], fromDisplayName);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (parentObject !== void 0 && fromDescription != null) {
      setValueByPath(parentObject, ["description"], fromDescription);
    }
    const fromDefaultCheckpointId = getValueByPath(fromObject, [
      "defaultCheckpointId"
    ]);
    if (parentObject !== void 0 && fromDefaultCheckpointId != null) {
      setValueByPath(parentObject, ["defaultCheckpointId"], fromDefaultCheckpointId);
    }
    return toObject;
  }
  function updateModelParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "name"], tModel(apiClient, fromModel));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      updateModelConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function updateModelParametersToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      updateModelConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function upscaleImageAPIConfigInternalToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromOutputGcsUri = getValueByPath(fromObject, ["outputGcsUri"]);
    if (parentObject !== void 0 && fromOutputGcsUri != null) {
      setValueByPath(parentObject, ["parameters", "storageUri"], fromOutputGcsUri);
    }
    const fromIncludeRaiReason = getValueByPath(fromObject, [
      "includeRaiReason"
    ]);
    if (parentObject !== void 0 && fromIncludeRaiReason != null) {
      setValueByPath(parentObject, ["parameters", "includeRaiReason"], fromIncludeRaiReason);
    }
    const fromOutputMimeType = getValueByPath(fromObject, [
      "outputMimeType"
    ]);
    if (parentObject !== void 0 && fromOutputMimeType != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "mimeType"], fromOutputMimeType);
    }
    const fromOutputCompressionQuality = getValueByPath(fromObject, [
      "outputCompressionQuality"
    ]);
    if (parentObject !== void 0 && fromOutputCompressionQuality != null) {
      setValueByPath(parentObject, ["parameters", "outputOptions", "compressionQuality"], fromOutputCompressionQuality);
    }
    const fromEnhanceInputImage = getValueByPath(fromObject, [
      "enhanceInputImage"
    ]);
    if (parentObject !== void 0 && fromEnhanceInputImage != null) {
      setValueByPath(parentObject, ["parameters", "upscaleConfig", "enhanceInputImage"], fromEnhanceInputImage);
    }
    const fromImagePreservationFactor = getValueByPath(fromObject, [
      "imagePreservationFactor"
    ]);
    if (parentObject !== void 0 && fromImagePreservationFactor != null) {
      setValueByPath(parentObject, ["parameters", "upscaleConfig", "imagePreservationFactor"], fromImagePreservationFactor);
    }
    const fromNumberOfImages = getValueByPath(fromObject, [
      "numberOfImages"
    ]);
    if (parentObject !== void 0 && fromNumberOfImages != null) {
      setValueByPath(parentObject, ["parameters", "sampleCount"], fromNumberOfImages);
    }
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (parentObject !== void 0 && fromMode != null) {
      setValueByPath(parentObject, ["parameters", "mode"], fromMode);
    }
    return toObject;
  }
  function upscaleImageAPIParametersInternalToVertex(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["_url", "model"], tModel(apiClient, fromModel));
    }
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (fromImage != null) {
      setValueByPath(toObject, ["instances[0]", "image"], imageToVertex(fromImage));
    }
    const fromUpscaleFactor = getValueByPath(fromObject, [
      "upscaleFactor"
    ]);
    if (fromUpscaleFactor != null) {
      setValueByPath(toObject, ["parameters", "upscaleConfig", "upscaleFactor"], fromUpscaleFactor);
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      upscaleImageAPIConfigInternalToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function upscaleImageResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromGeneratedImages = getValueByPath(fromObject, [
      "predictions"
    ]);
    if (fromGeneratedImages != null) {
      let transformedList = fromGeneratedImages;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return generatedImageFromVertex(item);
        });
      }
      setValueByPath(toObject, ["generatedImages"], transformedList);
    }
    return toObject;
  }
  function urlContextMetadataFromMldev(fromObject) {
    const toObject = {};
    const fromUrlMetadata = getValueByPath(fromObject, ["urlMetadata"]);
    if (fromUrlMetadata != null) {
      let transformedList = fromUrlMetadata;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return urlMetadataFromMldev(item);
        });
      }
      setValueByPath(toObject, ["urlMetadata"], transformedList);
    }
    return toObject;
  }
  function urlContextMetadataFromVertex(fromObject) {
    const toObject = {};
    const fromUrlMetadata = getValueByPath(fromObject, ["urlMetadata"]);
    if (fromUrlMetadata != null) {
      let transformedList = fromUrlMetadata;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return urlMetadataFromVertex(item);
        });
      }
      setValueByPath(toObject, ["urlMetadata"], transformedList);
    }
    return toObject;
  }
  function urlContextToMldev$1() {
    const toObject = {};
    return toObject;
  }
  function urlContextToVertex() {
    const toObject = {};
    return toObject;
  }
  function urlMetadataFromMldev(fromObject) {
    const toObject = {};
    const fromRetrievedUrl = getValueByPath(fromObject, ["retrievedUrl"]);
    if (fromRetrievedUrl != null) {
      setValueByPath(toObject, ["retrievedUrl"], fromRetrievedUrl);
    }
    const fromUrlRetrievalStatus = getValueByPath(fromObject, [
      "urlRetrievalStatus"
    ]);
    if (fromUrlRetrievalStatus != null) {
      setValueByPath(toObject, ["urlRetrievalStatus"], fromUrlRetrievalStatus);
    }
    return toObject;
  }
  function urlMetadataFromVertex(fromObject) {
    const toObject = {};
    const fromRetrievedUrl = getValueByPath(fromObject, ["retrievedUrl"]);
    if (fromRetrievedUrl != null) {
      setValueByPath(toObject, ["retrievedUrl"], fromRetrievedUrl);
    }
    const fromUrlRetrievalStatus = getValueByPath(fromObject, [
      "urlRetrievalStatus"
    ]);
    if (fromUrlRetrievalStatus != null) {
      setValueByPath(toObject, ["urlRetrievalStatus"], fromUrlRetrievalStatus);
    }
    return toObject;
  }
  function videoFromMldev(fromObject) {
    const toObject = {};
    const fromUri = getValueByPath(fromObject, ["video", "uri"]);
    if (fromUri != null) {
      setValueByPath(toObject, ["uri"], fromUri);
    }
    const fromVideoBytes = getValueByPath(fromObject, [
      "video",
      "encodedVideo"
    ]);
    if (fromVideoBytes != null) {
      setValueByPath(toObject, ["videoBytes"], tBytes(fromVideoBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["encoding"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function videoFromVertex(fromObject) {
    const toObject = {};
    const fromUri = getValueByPath(fromObject, ["gcsUri"]);
    if (fromUri != null) {
      setValueByPath(toObject, ["uri"], fromUri);
    }
    const fromVideoBytes = getValueByPath(fromObject, [
      "bytesBase64Encoded"
    ]);
    if (fromVideoBytes != null) {
      setValueByPath(toObject, ["videoBytes"], tBytes(fromVideoBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function videoGenerationMaskToVertex(fromObject) {
    const toObject = {};
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (fromImage != null) {
      setValueByPath(toObject, ["_self"], imageToVertex(fromImage));
    }
    const fromMaskMode = getValueByPath(fromObject, ["maskMode"]);
    if (fromMaskMode != null) {
      setValueByPath(toObject, ["maskMode"], fromMaskMode);
    }
    return toObject;
  }
  function videoGenerationReferenceImageToVertex(fromObject) {
    const toObject = {};
    const fromImage = getValueByPath(fromObject, ["image"]);
    if (fromImage != null) {
      setValueByPath(toObject, ["image"], imageToVertex(fromImage));
    }
    const fromReferenceType = getValueByPath(fromObject, [
      "referenceType"
    ]);
    if (fromReferenceType != null) {
      setValueByPath(toObject, ["referenceType"], fromReferenceType);
    }
    return toObject;
  }
  function videoMetadataFromMldev(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoMetadataFromVertex(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoMetadataToMldev$1(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoMetadataToVertex(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function videoToVertex(fromObject) {
    const toObject = {};
    const fromUri = getValueByPath(fromObject, ["uri"]);
    if (fromUri != null) {
      setValueByPath(toObject, ["gcsUri"], fromUri);
    }
    const fromVideoBytes = getValueByPath(fromObject, ["videoBytes"]);
    if (fromVideoBytes != null) {
      setValueByPath(toObject, ["bytesBase64Encoded"], tBytes(fromVideoBytes));
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function voiceConfigToMldev$1(fromObject) {
    const toObject = {};
    const fromPrebuiltVoiceConfig = getValueByPath(fromObject, [
      "prebuiltVoiceConfig"
    ]);
    if (fromPrebuiltVoiceConfig != null) {
      setValueByPath(toObject, ["prebuiltVoiceConfig"], prebuiltVoiceConfigToMldev$1(fromPrebuiltVoiceConfig));
    }
    return toObject;
  }
  function voiceConfigToVertex(fromObject) {
    const toObject = {};
    const fromPrebuiltVoiceConfig = getValueByPath(fromObject, [
      "prebuiltVoiceConfig"
    ]);
    if (fromPrebuiltVoiceConfig != null) {
      setValueByPath(toObject, ["prebuiltVoiceConfig"], prebuiltVoiceConfigToVertex(fromPrebuiltVoiceConfig));
    }
    return toObject;
  }
  var CONTENT_TYPE_HEADER = "Content-Type";
  var SERVER_TIMEOUT_HEADER = "X-Server-Timeout";
  var USER_AGENT_HEADER = "User-Agent";
  var GOOGLE_API_CLIENT_HEADER = "x-goog-api-client";
  var SDK_VERSION = "1.21.0";
  var LIBRARY_LABEL = `google-genai-sdk/${SDK_VERSION}`;
  var VERTEX_AI_API_DEFAULT_VERSION = "v1beta1";
  var GOOGLE_AI_API_DEFAULT_VERSION = "v1beta";
  var responseLineRE = /^\s*data: (.*)(?:\n\n|\r\r|\r\n\r\n)/;
  var ApiClient = class {
    constructor(opts) {
      var _a, _b;
      this.clientOptions = Object.assign(Object.assign({}, opts), { project: opts.project, location: opts.location, apiKey: opts.apiKey, vertexai: opts.vertexai });
      const initHttpOptions = {};
      if (this.clientOptions.vertexai) {
        initHttpOptions.apiVersion = (_a = this.clientOptions.apiVersion) !== null && _a !== void 0 ? _a : VERTEX_AI_API_DEFAULT_VERSION;
        initHttpOptions.baseUrl = this.baseUrlFromProjectLocation();
        this.normalizeAuthParameters();
      } else {
        initHttpOptions.apiVersion = (_b = this.clientOptions.apiVersion) !== null && _b !== void 0 ? _b : GOOGLE_AI_API_DEFAULT_VERSION;
        initHttpOptions.baseUrl = `https://generativelanguage.googleapis.com/`;
      }
      initHttpOptions.headers = this.getDefaultHeaders();
      this.clientOptions.httpOptions = initHttpOptions;
      if (opts.httpOptions) {
        this.clientOptions.httpOptions = this.patchHttpOptions(initHttpOptions, opts.httpOptions);
      }
    }
    /**
     * Determines the base URL for Vertex AI based on project and location.
     * Uses the global endpoint if location is 'global' or if project/location
     * are not specified (implying API key usage).
     * @private
     */
    baseUrlFromProjectLocation() {
      if (this.clientOptions.project && this.clientOptions.location && this.clientOptions.location !== "global") {
        return `https://${this.clientOptions.location}-aiplatform.googleapis.com/`;
      }
      return `https://aiplatform.googleapis.com/`;
    }
    /**
     * Normalizes authentication parameters for Vertex AI.
     * If project and location are provided, API key is cleared.
     * If project and location are not provided (implying API key usage),
     * project and location are cleared.
     * @private
     */
    normalizeAuthParameters() {
      if (this.clientOptions.project && this.clientOptions.location) {
        this.clientOptions.apiKey = void 0;
        return;
      }
      this.clientOptions.project = void 0;
      this.clientOptions.location = void 0;
    }
    isVertexAI() {
      var _a;
      return (_a = this.clientOptions.vertexai) !== null && _a !== void 0 ? _a : false;
    }
    getProject() {
      return this.clientOptions.project;
    }
    getLocation() {
      return this.clientOptions.location;
    }
    getApiVersion() {
      if (this.clientOptions.httpOptions && this.clientOptions.httpOptions.apiVersion !== void 0) {
        return this.clientOptions.httpOptions.apiVersion;
      }
      throw new Error("API version is not set.");
    }
    getBaseUrl() {
      if (this.clientOptions.httpOptions && this.clientOptions.httpOptions.baseUrl !== void 0) {
        return this.clientOptions.httpOptions.baseUrl;
      }
      throw new Error("Base URL is not set.");
    }
    getRequestUrl() {
      return this.getRequestUrlInternal(this.clientOptions.httpOptions);
    }
    getHeaders() {
      if (this.clientOptions.httpOptions && this.clientOptions.httpOptions.headers !== void 0) {
        return this.clientOptions.httpOptions.headers;
      } else {
        throw new Error("Headers are not set.");
      }
    }
    getRequestUrlInternal(httpOptions) {
      if (!httpOptions || httpOptions.baseUrl === void 0 || httpOptions.apiVersion === void 0) {
        throw new Error("HTTP options are not correctly set.");
      }
      const baseUrl = httpOptions.baseUrl.endsWith("/") ? httpOptions.baseUrl.slice(0, -1) : httpOptions.baseUrl;
      const urlElement = [baseUrl];
      if (httpOptions.apiVersion && httpOptions.apiVersion !== "") {
        urlElement.push(httpOptions.apiVersion);
      }
      return urlElement.join("/");
    }
    getBaseResourcePath() {
      return `projects/${this.clientOptions.project}/locations/${this.clientOptions.location}`;
    }
    getApiKey() {
      return this.clientOptions.apiKey;
    }
    getWebsocketBaseUrl() {
      const baseUrl = this.getBaseUrl();
      const urlParts = new URL(baseUrl);
      urlParts.protocol = urlParts.protocol == "http:" ? "ws" : "wss";
      return urlParts.toString();
    }
    setBaseUrl(url) {
      if (this.clientOptions.httpOptions) {
        this.clientOptions.httpOptions.baseUrl = url;
      } else {
        throw new Error("HTTP options are not correctly set.");
      }
    }
    constructUrl(path, httpOptions, prependProjectLocation) {
      const urlElement = [this.getRequestUrlInternal(httpOptions)];
      if (prependProjectLocation) {
        urlElement.push(this.getBaseResourcePath());
      }
      if (path !== "") {
        urlElement.push(path);
      }
      const url = new URL(`${urlElement.join("/")}`);
      return url;
    }
    shouldPrependVertexProjectPath(request) {
      if (this.clientOptions.apiKey) {
        return false;
      }
      if (!this.clientOptions.vertexai) {
        return false;
      }
      if (request.path.startsWith("projects/")) {
        return false;
      }
      if (request.httpMethod === "GET" && request.path.startsWith("publishers/google/models")) {
        return false;
      }
      return true;
    }
    async request(request) {
      let patchedHttpOptions = this.clientOptions.httpOptions;
      if (request.httpOptions) {
        patchedHttpOptions = this.patchHttpOptions(this.clientOptions.httpOptions, request.httpOptions);
      }
      const prependProjectLocation = this.shouldPrependVertexProjectPath(request);
      const url = this.constructUrl(request.path, patchedHttpOptions, prependProjectLocation);
      if (request.queryParams) {
        for (const [key, value] of Object.entries(request.queryParams)) {
          url.searchParams.append(key, String(value));
        }
      }
      let requestInit = {};
      if (request.httpMethod === "GET") {
        if (request.body && request.body !== "{}") {
          throw new Error("Request body should be empty for GET request, but got non empty request body");
        }
      } else {
        requestInit.body = request.body;
      }
      requestInit = await this.includeExtraHttpOptionsToRequestInit(requestInit, patchedHttpOptions, request.abortSignal);
      return this.unaryApiCall(url, requestInit, request.httpMethod);
    }
    patchHttpOptions(baseHttpOptions, requestHttpOptions) {
      const patchedHttpOptions = JSON.parse(JSON.stringify(baseHttpOptions));
      for (const [key, value] of Object.entries(requestHttpOptions)) {
        if (typeof value === "object") {
          patchedHttpOptions[key] = Object.assign(Object.assign({}, patchedHttpOptions[key]), value);
        } else if (value !== void 0) {
          patchedHttpOptions[key] = value;
        }
      }
      return patchedHttpOptions;
    }
    async requestStream(request) {
      let patchedHttpOptions = this.clientOptions.httpOptions;
      if (request.httpOptions) {
        patchedHttpOptions = this.patchHttpOptions(this.clientOptions.httpOptions, request.httpOptions);
      }
      const prependProjectLocation = this.shouldPrependVertexProjectPath(request);
      const url = this.constructUrl(request.path, patchedHttpOptions, prependProjectLocation);
      if (!url.searchParams.has("alt") || url.searchParams.get("alt") !== "sse") {
        url.searchParams.set("alt", "sse");
      }
      let requestInit = {};
      requestInit.body = request.body;
      requestInit = await this.includeExtraHttpOptionsToRequestInit(requestInit, patchedHttpOptions, request.abortSignal);
      return this.streamApiCall(url, requestInit, request.httpMethod);
    }
    async includeExtraHttpOptionsToRequestInit(requestInit, httpOptions, abortSignal) {
      if (httpOptions && httpOptions.timeout || abortSignal) {
        const abortController = new AbortController();
        const signal = abortController.signal;
        if (httpOptions.timeout && (httpOptions === null || httpOptions === void 0 ? void 0 : httpOptions.timeout) > 0) {
          const timeoutHandle = setTimeout(() => abortController.abort(), httpOptions.timeout);
          if (timeoutHandle && typeof timeoutHandle.unref === "function") {
            timeoutHandle.unref();
          }
        }
        if (abortSignal) {
          abortSignal.addEventListener("abort", () => {
            abortController.abort();
          });
        }
        requestInit.signal = signal;
      }
      if (httpOptions && httpOptions.extraBody !== null) {
        includeExtraBodyToRequestInit(requestInit, httpOptions.extraBody);
      }
      requestInit.headers = await this.getHeadersInternal(httpOptions);
      return requestInit;
    }
    async unaryApiCall(url, requestInit, httpMethod) {
      return this.apiCall(url.toString(), Object.assign(Object.assign({}, requestInit), { method: httpMethod })).then(async (response) => {
        await throwErrorIfNotOK(response);
        return new HttpResponse(response);
      }).catch((e) => {
        if (e instanceof Error) {
          throw e;
        } else {
          throw new Error(JSON.stringify(e));
        }
      });
    }
    async streamApiCall(url, requestInit, httpMethod) {
      return this.apiCall(url.toString(), Object.assign(Object.assign({}, requestInit), { method: httpMethod })).then(async (response) => {
        await throwErrorIfNotOK(response);
        return this.processStreamResponse(response);
      }).catch((e) => {
        if (e instanceof Error) {
          throw e;
        } else {
          throw new Error(JSON.stringify(e));
        }
      });
    }
    processStreamResponse(response) {
      var _a;
      return __asyncGenerator(this, arguments, function* processStreamResponse_1() {
        const reader = (_a = response === null || response === void 0 ? void 0 : response.body) === null || _a === void 0 ? void 0 : _a.getReader();
        const decoder = new TextDecoder("utf-8");
        if (!reader) {
          throw new Error("Response body is empty");
        }
        try {
          let buffer = "";
          while (true) {
            const { done, value } = yield __await(reader.read());
            if (done) {
              if (buffer.trim().length > 0) {
                throw new Error("Incomplete JSON segment at the end");
              }
              break;
            }
            const chunkString = decoder.decode(value, { stream: true });
            try {
              const chunkJson = JSON.parse(chunkString);
              if ("error" in chunkJson) {
                const errorJson = JSON.parse(JSON.stringify(chunkJson["error"]));
                const status = errorJson["status"];
                const code = errorJson["code"];
                const errorMessage = `got status: ${status}. ${JSON.stringify(chunkJson)}`;
                if (code >= 400 && code < 600) {
                  const apiError = new ApiError({
                    message: errorMessage,
                    status: code
                  });
                  throw apiError;
                }
              }
            } catch (e) {
              const error = e;
              if (error.name === "ApiError") {
                throw e;
              }
            }
            buffer += chunkString;
            let match = buffer.match(responseLineRE);
            while (match) {
              const processedChunkString = match[1];
              try {
                const partialResponse = new Response(processedChunkString, {
                  headers: response === null || response === void 0 ? void 0 : response.headers,
                  status: response === null || response === void 0 ? void 0 : response.status,
                  statusText: response === null || response === void 0 ? void 0 : response.statusText
                });
                yield yield __await(new HttpResponse(partialResponse));
                buffer = buffer.slice(match[0].length);
                match = buffer.match(responseLineRE);
              } catch (e) {
                throw new Error(`exception parsing stream chunk ${processedChunkString}. ${e}`);
              }
            }
          }
        } finally {
          reader.releaseLock();
        }
      });
    }
    async apiCall(url, requestInit) {
      return fetch(url, requestInit).catch((e) => {
        throw new Error(`exception ${e} sending request`);
      });
    }
    getDefaultHeaders() {
      const headers = {};
      const versionHeaderValue = LIBRARY_LABEL + " " + this.clientOptions.userAgentExtra;
      headers[USER_AGENT_HEADER] = versionHeaderValue;
      headers[GOOGLE_API_CLIENT_HEADER] = versionHeaderValue;
      headers[CONTENT_TYPE_HEADER] = "application/json";
      return headers;
    }
    async getHeadersInternal(httpOptions) {
      const headers = new Headers();
      if (httpOptions && httpOptions.headers) {
        for (const [key, value] of Object.entries(httpOptions.headers)) {
          headers.append(key, value);
        }
        if (httpOptions.timeout && httpOptions.timeout > 0) {
          headers.append(SERVER_TIMEOUT_HEADER, String(Math.ceil(httpOptions.timeout / 1e3)));
        }
      }
      await this.clientOptions.auth.addAuthHeaders(headers);
      return headers;
    }
    /**
     * Uploads a file asynchronously using Gemini API only, this is not supported
     * in Vertex AI.
     *
     * @param file The string path to the file to be uploaded or a Blob object.
     * @param config Optional parameters specified in the `UploadFileConfig`
     *     interface. @see {@link UploadFileConfig}
     * @return A promise that resolves to a `File` object.
     * @throws An error if called on a Vertex AI client.
     * @throws An error if the `mimeType` is not provided and can not be inferred,
     */
    async uploadFile(file, config) {
      var _a;
      const fileToUpload = {};
      if (config != null) {
        fileToUpload.mimeType = config.mimeType;
        fileToUpload.name = config.name;
        fileToUpload.displayName = config.displayName;
      }
      if (fileToUpload.name && !fileToUpload.name.startsWith("files/")) {
        fileToUpload.name = `files/${fileToUpload.name}`;
      }
      const uploader = this.clientOptions.uploader;
      const fileStat = await uploader.stat(file);
      fileToUpload.sizeBytes = String(fileStat.size);
      const mimeType = (_a = config === null || config === void 0 ? void 0 : config.mimeType) !== null && _a !== void 0 ? _a : fileStat.type;
      if (mimeType === void 0 || mimeType === "") {
        throw new Error("Can not determine mimeType. Please provide mimeType in the config.");
      }
      fileToUpload.mimeType = mimeType;
      const uploadUrl = await this.fetchUploadUrl(fileToUpload, config);
      return uploader.upload(file, uploadUrl, this);
    }
    /**
     * Downloads a file asynchronously to the specified path.
     *
     * @params params - The parameters for the download request, see {@link
     * DownloadFileParameters}
     */
    async downloadFile(params) {
      const downloader = this.clientOptions.downloader;
      await downloader.download(params, this);
    }
    async fetchUploadUrl(file, config) {
      var _a;
      let httpOptions = {};
      if (config === null || config === void 0 ? void 0 : config.httpOptions) {
        httpOptions = config.httpOptions;
      } else {
        httpOptions = {
          apiVersion: "",
          headers: {
            "Content-Type": "application/json",
            "X-Goog-Upload-Protocol": "resumable",
            "X-Goog-Upload-Command": "start",
            "X-Goog-Upload-Header-Content-Length": `${file.sizeBytes}`,
            "X-Goog-Upload-Header-Content-Type": `${file.mimeType}`
          }
        };
      }
      const body = {
        "file": file
      };
      const httpResponse = await this.request({
        path: formatMap("upload/v1beta/files", body["_url"]),
        body: JSON.stringify(body),
        httpMethod: "POST",
        httpOptions
      });
      if (!httpResponse || !(httpResponse === null || httpResponse === void 0 ? void 0 : httpResponse.headers)) {
        throw new Error("Server did not return an HttpResponse or the returned HttpResponse did not have headers.");
      }
      const uploadUrl = (_a = httpResponse === null || httpResponse === void 0 ? void 0 : httpResponse.headers) === null || _a === void 0 ? void 0 : _a["x-goog-upload-url"];
      if (uploadUrl === void 0) {
        throw new Error("Failed to get upload url. Server did not return the x-google-upload-url in the headers");
      }
      return uploadUrl;
    }
  };
  async function throwErrorIfNotOK(response) {
    var _a;
    if (response === void 0) {
      throw new Error("response is undefined");
    }
    if (!response.ok) {
      const status = response.status;
      let errorBody;
      if ((_a = response.headers.get("content-type")) === null || _a === void 0 ? void 0 : _a.includes("application/json")) {
        errorBody = await response.json();
      } else {
        errorBody = {
          error: {
            message: await response.text(),
            code: response.status,
            status: response.statusText
          }
        };
      }
      const errorMessage = JSON.stringify(errorBody);
      if (status >= 400 && status < 600) {
        const apiError = new ApiError({
          message: errorMessage,
          status
        });
        throw apiError;
      }
      throw new Error(errorMessage);
    }
  }
  function includeExtraBodyToRequestInit(requestInit, extraBody) {
    if (!extraBody || Object.keys(extraBody).length === 0) {
      return;
    }
    if (requestInit.body instanceof Blob) {
      console.warn("includeExtraBodyToRequestInit: extraBody provided but current request body is a Blob. extraBody will be ignored as merging is not supported for Blob bodies.");
      return;
    }
    let currentBodyObject = {};
    if (typeof requestInit.body === "string" && requestInit.body.length > 0) {
      try {
        const parsedBody = JSON.parse(requestInit.body);
        if (typeof parsedBody === "object" && parsedBody !== null && !Array.isArray(parsedBody)) {
          currentBodyObject = parsedBody;
        } else {
          console.warn("includeExtraBodyToRequestInit: Original request body is valid JSON but not a non-array object. Skip applying extraBody to the request body.");
          return;
        }
      } catch (e) {
        console.warn("includeExtraBodyToRequestInit: Original request body is not valid JSON. Skip applying extraBody to the request body.");
        return;
      }
    }
    function deepMerge(target, source) {
      const output = Object.assign({}, target);
      for (const key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          const sourceValue = source[key];
          const targetValue = output[key];
          if (sourceValue && typeof sourceValue === "object" && !Array.isArray(sourceValue) && targetValue && typeof targetValue === "object" && !Array.isArray(targetValue)) {
            output[key] = deepMerge(targetValue, sourceValue);
          } else {
            if (targetValue && sourceValue && typeof targetValue !== typeof sourceValue) {
              console.warn(`includeExtraBodyToRequestInit:deepMerge: Type mismatch for key "${key}". Original type: ${typeof targetValue}, New type: ${typeof sourceValue}. Overwriting.`);
            }
            output[key] = sourceValue;
          }
        }
      }
      return output;
    }
    const mergedBody = deepMerge(currentBodyObject, extraBody);
    requestInit.body = JSON.stringify(mergedBody);
  }
  var MCP_LABEL = "mcp_used/unknown";
  var hasMcpToolUsageFromMcpToTool = false;
  function hasMcpToolUsage(tools) {
    for (const tool of tools) {
      if (isMcpCallableTool(tool)) {
        return true;
      }
      if (typeof tool === "object" && "inputSchema" in tool) {
        return true;
      }
    }
    return hasMcpToolUsageFromMcpToTool;
  }
  function setMcpUsageHeader(headers) {
    var _a;
    const existingHeader = (_a = headers[GOOGLE_API_CLIENT_HEADER]) !== null && _a !== void 0 ? _a : "";
    headers[GOOGLE_API_CLIENT_HEADER] = (existingHeader + ` ${MCP_LABEL}`).trimStart();
  }
  function isMcpCallableTool(object) {
    return object !== null && typeof object === "object" && object instanceof McpCallableTool;
  }
  function listAllTools(mcpClient, maxTools = 100) {
    return __asyncGenerator(this, arguments, function* listAllTools_1() {
      let cursor = void 0;
      let numTools = 0;
      while (numTools < maxTools) {
        const t = yield __await(mcpClient.listTools({ cursor }));
        for (const tool of t.tools) {
          yield yield __await(tool);
          numTools++;
        }
        if (!t.nextCursor) {
          break;
        }
        cursor = t.nextCursor;
      }
    });
  }
  var McpCallableTool = class _McpCallableTool {
    constructor(mcpClients = [], config) {
      this.mcpTools = [];
      this.functionNameToMcpClient = {};
      this.mcpClients = mcpClients;
      this.config = config;
    }
    /**
     * Creates a McpCallableTool.
     */
    static create(mcpClients, config) {
      return new _McpCallableTool(mcpClients, config);
    }
    /**
     * Validates the function names are not duplicate and initialize the function
     * name to MCP client mapping.
     *
     * @throws {Error} if the MCP tools from the MCP clients have duplicate tool
     *     names.
     */
    async initialize() {
      var _a, e_1, _b, _c;
      if (this.mcpTools.length > 0) {
        return;
      }
      const functionMap = {};
      const mcpTools = [];
      for (const mcpClient of this.mcpClients) {
        try {
          for (var _d = true, _e = (e_1 = void 0, __asyncValues(listAllTools(mcpClient))), _f; _f = await _e.next(), _a = _f.done, !_a; _d = true) {
            _c = _f.value;
            _d = false;
            const mcpTool = _c;
            mcpTools.push(mcpTool);
            const mcpToolName = mcpTool.name;
            if (functionMap[mcpToolName]) {
              throw new Error(`Duplicate function name ${mcpToolName} found in MCP tools. Please ensure function names are unique.`);
            }
            functionMap[mcpToolName] = mcpClient;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (!_d && !_a && (_b = _e.return)) await _b.call(_e);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }
      this.mcpTools = mcpTools;
      this.functionNameToMcpClient = functionMap;
    }
    async tool() {
      await this.initialize();
      return mcpToolsToGeminiTool(this.mcpTools, this.config);
    }
    async callTool(functionCalls) {
      await this.initialize();
      const functionCallResponseParts = [];
      for (const functionCall of functionCalls) {
        if (functionCall.name in this.functionNameToMcpClient) {
          const mcpClient = this.functionNameToMcpClient[functionCall.name];
          let requestOptions = void 0;
          if (this.config.timeout) {
            requestOptions = {
              timeout: this.config.timeout
            };
          }
          const callToolResponse = await mcpClient.callTool(
            {
              name: functionCall.name,
              arguments: functionCall.args
            },
            // Set the result schema to undefined to allow MCP to rely on the
            // default schema.
            void 0,
            requestOptions
          );
          functionCallResponseParts.push({
            functionResponse: {
              name: functionCall.name,
              response: callToolResponse.isError ? { error: callToolResponse } : callToolResponse
            }
          });
        }
      }
      return functionCallResponseParts;
    }
  };
  async function handleWebSocketMessage$1(apiClient, onmessage, event) {
    const serverMessage = new LiveMusicServerMessage();
    let data;
    if (event.data instanceof Blob) {
      data = JSON.parse(await event.data.text());
    } else {
      data = JSON.parse(event.data);
    }
    const response = liveMusicServerMessageFromMldev(data);
    Object.assign(serverMessage, response);
    onmessage(serverMessage);
  }
  var LiveMusic = class {
    constructor(apiClient, auth, webSocketFactory) {
      this.apiClient = apiClient;
      this.auth = auth;
      this.webSocketFactory = webSocketFactory;
    }
    /**
         Establishes a connection to the specified model and returns a
         LiveMusicSession object representing that connection.
    
         @experimental
    
         @remarks
    
         @param params - The parameters for establishing a connection to the model.
         @return A live session.
    
         @example
         ```ts
         let model = 'models/lyria-realtime-exp';
         const session = await ai.live.music.connect({
           model: model,
           callbacks: {
             onmessage: (e: MessageEvent) => {
               console.log('Received message from the server: %s\n', debug(e.data));
             },
             onerror: (e: ErrorEvent) => {
               console.log('Error occurred: %s\n', debug(e.error));
             },
             onclose: (e: CloseEvent) => {
               console.log('Connection closed.');
             },
           },
         });
         ```
        */
    async connect(params) {
      var _a, _b;
      if (this.apiClient.isVertexAI()) {
        throw new Error("Live music is not supported for Vertex AI.");
      }
      console.warn("Live music generation is experimental and may change in future versions.");
      const websocketBaseUrl = this.apiClient.getWebsocketBaseUrl();
      const apiVersion = this.apiClient.getApiVersion();
      const headers = mapToHeaders$1(this.apiClient.getDefaultHeaders());
      const apiKey = this.apiClient.getApiKey();
      const url = `${websocketBaseUrl}/ws/google.ai.generativelanguage.${apiVersion}.GenerativeService.BidiGenerateMusic?key=${apiKey}`;
      let onopenResolve = () => {
      };
      const onopenPromise = new Promise((resolve) => {
        onopenResolve = resolve;
      });
      const callbacks = params.callbacks;
      const onopenAwaitedCallback = function() {
        onopenResolve({});
      };
      const apiClient = this.apiClient;
      const websocketCallbacks = {
        onopen: onopenAwaitedCallback,
        onmessage: (event) => {
          void handleWebSocketMessage$1(apiClient, callbacks.onmessage, event);
        },
        onerror: (_a = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onerror) !== null && _a !== void 0 ? _a : function(e) {
        },
        onclose: (_b = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onclose) !== null && _b !== void 0 ? _b : function(e) {
        }
      };
      const conn = this.webSocketFactory.create(url, headersToMap$1(headers), websocketCallbacks);
      conn.connect();
      await onopenPromise;
      const model = tModel(this.apiClient, params.model);
      const setup = liveMusicClientSetupToMldev({
        model
      });
      const clientMessage = liveMusicClientMessageToMldev({ setup });
      conn.send(JSON.stringify(clientMessage));
      return new LiveMusicSession(conn, this.apiClient);
    }
  };
  var LiveMusicSession = class {
    constructor(conn, apiClient) {
      this.conn = conn;
      this.apiClient = apiClient;
    }
    /**
        Sets inputs to steer music generation. Updates the session's current
        weighted prompts.
    
        @param params - Contains one property, `weightedPrompts`.
    
          - `weightedPrompts` to send to the model; weights are normalized to
            sum to 1.0.
    
        @experimental
       */
    async setWeightedPrompts(params) {
      if (!params.weightedPrompts || Object.keys(params.weightedPrompts).length === 0) {
        throw new Error("Weighted prompts must be set and contain at least one entry.");
      }
      const setWeightedPromptsParameters = liveMusicSetWeightedPromptsParametersToMldev(params);
      const clientContent = liveMusicClientContentToMldev(setWeightedPromptsParameters);
      this.conn.send(JSON.stringify({ clientContent }));
    }
    /**
        Sets a configuration to the model. Updates the session's current
        music generation config.
    
        @param params - Contains one property, `musicGenerationConfig`.
    
          - `musicGenerationConfig` to set in the model. Passing an empty or
        undefined config to the model will reset the config to defaults.
    
        @experimental
       */
    async setMusicGenerationConfig(params) {
      if (!params.musicGenerationConfig) {
        params.musicGenerationConfig = {};
      }
      const setConfigParameters = liveMusicSetConfigParametersToMldev(params);
      const clientMessage = liveMusicClientMessageToMldev(setConfigParameters);
      this.conn.send(JSON.stringify(clientMessage));
    }
    sendPlaybackControl(playbackControl) {
      const clientMessage = liveMusicClientMessageToMldev({
        playbackControl
      });
      this.conn.send(JSON.stringify(clientMessage));
    }
    /**
     * Start the music stream.
     *
     * @experimental
     */
    play() {
      this.sendPlaybackControl(LiveMusicPlaybackControl.PLAY);
    }
    /**
     * Temporarily halt the music stream. Use `play` to resume from the current
     * position.
     *
     * @experimental
     */
    pause() {
      this.sendPlaybackControl(LiveMusicPlaybackControl.PAUSE);
    }
    /**
     * Stop the music stream and reset the state. Retains the current prompts
     * and config.
     *
     * @experimental
     */
    stop() {
      this.sendPlaybackControl(LiveMusicPlaybackControl.STOP);
    }
    /**
     * Resets the context of the music generation without stopping it.
     * Retains the current prompts and config.
     *
     * @experimental
     */
    resetContext() {
      this.sendPlaybackControl(LiveMusicPlaybackControl.RESET_CONTEXT);
    }
    /**
         Terminates the WebSocket connection.
    
         @experimental
       */
    close() {
      this.conn.close();
    }
  };
  function headersToMap$1(headers) {
    const headerMap = {};
    headers.forEach((value, key) => {
      headerMap[key] = value;
    });
    return headerMap;
  }
  function mapToHeaders$1(map) {
    const headers = new Headers();
    for (const [key, value] of Object.entries(map)) {
      headers.append(key, value);
    }
    return headers;
  }
  var FUNCTION_RESPONSE_REQUIRES_ID = "FunctionResponse request must have an `id` field from the response of a ToolCall.FunctionalCalls in Google AI.";
  async function handleWebSocketMessage(apiClient, onmessage, event) {
    const serverMessage = new LiveServerMessage();
    let jsonData;
    if (event.data instanceof Blob) {
      jsonData = await event.data.text();
    } else if (event.data instanceof ArrayBuffer) {
      jsonData = new TextDecoder().decode(event.data);
    } else {
      jsonData = event.data;
    }
    const data = JSON.parse(jsonData);
    if (apiClient.isVertexAI()) {
      const resp = liveServerMessageFromVertex(data);
      Object.assign(serverMessage, resp);
    } else {
      const resp = liveServerMessageFromMldev(data);
      Object.assign(serverMessage, resp);
    }
    onmessage(serverMessage);
  }
  var Live = class {
    constructor(apiClient, auth, webSocketFactory) {
      this.apiClient = apiClient;
      this.auth = auth;
      this.webSocketFactory = webSocketFactory;
      this.music = new LiveMusic(this.apiClient, this.auth, this.webSocketFactory);
    }
    /**
         Establishes a connection to the specified model with the given
         configuration and returns a Session object representing that connection.
    
         @experimental Built-in MCP support is an experimental feature, may change in
         future versions.
    
         @remarks
    
         @param params - The parameters for establishing a connection to the model.
         @return A live session.
    
         @example
         ```ts
         let model: string;
         if (GOOGLE_GENAI_USE_VERTEXAI) {
           model = 'gemini-2.0-flash-live-preview-04-09';
         } else {
           model = 'gemini-live-2.5-flash-preview';
         }
         const session = await ai.live.connect({
           model: model,
           config: {
             responseModalities: [Modality.AUDIO],
           },
           callbacks: {
             onopen: () => {
               console.log('Connected to the socket.');
             },
             onmessage: (e: MessageEvent) => {
               console.log('Received message from the server: %s\n', debug(e.data));
             },
             onerror: (e: ErrorEvent) => {
               console.log('Error occurred: %s\n', debug(e.error));
             },
             onclose: (e: CloseEvent) => {
               console.log('Connection closed.');
             },
           },
         });
         ```
        */
    async connect(params) {
      var _a, _b, _c, _d, _e, _f;
      if (params.config && params.config.httpOptions) {
        throw new Error("The Live module does not support httpOptions at request-level in LiveConnectConfig yet. Please use the client-level httpOptions configuration instead.");
      }
      const websocketBaseUrl = this.apiClient.getWebsocketBaseUrl();
      const apiVersion = this.apiClient.getApiVersion();
      let url;
      const clientHeaders = this.apiClient.getHeaders();
      if (params.config && params.config.tools && hasMcpToolUsage(params.config.tools)) {
        setMcpUsageHeader(clientHeaders);
      }
      const headers = mapToHeaders(clientHeaders);
      if (this.apiClient.isVertexAI()) {
        url = `${websocketBaseUrl}/ws/google.cloud.aiplatform.${apiVersion}.LlmBidiService/BidiGenerateContent`;
        await this.auth.addAuthHeaders(headers);
      } else {
        const apiKey = this.apiClient.getApiKey();
        let method = "BidiGenerateContent";
        let keyName = "key";
        if (apiKey === null || apiKey === void 0 ? void 0 : apiKey.startsWith("auth_tokens/")) {
          console.warn("Warning: Ephemeral token support is experimental and may change in future versions.");
          if (apiVersion !== "v1alpha") {
            console.warn("Warning: The SDK's ephemeral token support is in v1alpha only. Please use const ai = new GoogleGenAI({apiKey: token.name, httpOptions: { apiVersion: 'v1alpha' }}); before session connection.");
          }
          method = "BidiGenerateContentConstrained";
          keyName = "access_token";
        }
        url = `${websocketBaseUrl}/ws/google.ai.generativelanguage.${apiVersion}.GenerativeService.${method}?${keyName}=${apiKey}`;
      }
      let onopenResolve = () => {
      };
      const onopenPromise = new Promise((resolve) => {
        onopenResolve = resolve;
      });
      const callbacks = params.callbacks;
      const onopenAwaitedCallback = function() {
        var _a2;
        (_a2 = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onopen) === null || _a2 === void 0 ? void 0 : _a2.call(callbacks);
        onopenResolve({});
      };
      const apiClient = this.apiClient;
      const websocketCallbacks = {
        onopen: onopenAwaitedCallback,
        onmessage: (event) => {
          void handleWebSocketMessage(apiClient, callbacks.onmessage, event);
        },
        onerror: (_a = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onerror) !== null && _a !== void 0 ? _a : function(e) {
        },
        onclose: (_b = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onclose) !== null && _b !== void 0 ? _b : function(e) {
        }
      };
      const conn = this.webSocketFactory.create(url, headersToMap(headers), websocketCallbacks);
      conn.connect();
      await onopenPromise;
      let transformedModel = tModel(this.apiClient, params.model);
      if (this.apiClient.isVertexAI() && transformedModel.startsWith("publishers/")) {
        const project = this.apiClient.getProject();
        const location = this.apiClient.getLocation();
        transformedModel = `projects/${project}/locations/${location}/` + transformedModel;
      }
      let clientMessage = {};
      if (this.apiClient.isVertexAI() && ((_c = params.config) === null || _c === void 0 ? void 0 : _c.responseModalities) === void 0) {
        if (params.config === void 0) {
          params.config = { responseModalities: [Modality.AUDIO] };
        } else {
          params.config.responseModalities = [Modality.AUDIO];
        }
      }
      if ((_d = params.config) === null || _d === void 0 ? void 0 : _d.generationConfig) {
        console.warn("Setting `LiveConnectConfig.generation_config` is deprecated, please set the fields on `LiveConnectConfig` directly. This will become an error in a future version (not before Q3 2025).");
      }
      const inputTools = (_f = (_e = params.config) === null || _e === void 0 ? void 0 : _e.tools) !== null && _f !== void 0 ? _f : [];
      const convertedTools = [];
      for (const tool of inputTools) {
        if (this.isCallableTool(tool)) {
          const callableTool = tool;
          convertedTools.push(await callableTool.tool());
        } else {
          convertedTools.push(tool);
        }
      }
      if (convertedTools.length > 0) {
        params.config.tools = convertedTools;
      }
      const liveConnectParameters = {
        model: transformedModel,
        config: params.config,
        callbacks: params.callbacks
      };
      if (this.apiClient.isVertexAI()) {
        clientMessage = liveConnectParametersToVertex(this.apiClient, liveConnectParameters);
      } else {
        clientMessage = liveConnectParametersToMldev(this.apiClient, liveConnectParameters);
      }
      delete clientMessage["config"];
      conn.send(JSON.stringify(clientMessage));
      return new Session(conn, this.apiClient);
    }
    // TODO: b/416041229 - Abstract this method to a common place.
    isCallableTool(tool) {
      return "callTool" in tool && typeof tool.callTool === "function";
    }
  };
  var defaultLiveSendClientContentParamerters = {
    turnComplete: true
  };
  var Session = class {
    constructor(conn, apiClient) {
      this.conn = conn;
      this.apiClient = apiClient;
    }
    tLiveClientContent(apiClient, params) {
      if (params.turns !== null && params.turns !== void 0) {
        let contents = [];
        try {
          contents = tContents(params.turns);
          if (apiClient.isVertexAI()) {
            contents = contents.map((item) => contentToVertex(item));
          } else {
            contents = contents.map((item) => contentToMldev$1(item));
          }
        } catch (_a) {
          throw new Error(`Failed to parse client content "turns", type: '${typeof params.turns}'`);
        }
        return {
          clientContent: { turns: contents, turnComplete: params.turnComplete }
        };
      }
      return {
        clientContent: { turnComplete: params.turnComplete }
      };
    }
    tLiveClienttToolResponse(apiClient, params) {
      let functionResponses = [];
      if (params.functionResponses == null) {
        throw new Error("functionResponses is required.");
      }
      if (!Array.isArray(params.functionResponses)) {
        functionResponses = [params.functionResponses];
      } else {
        functionResponses = params.functionResponses;
      }
      if (functionResponses.length === 0) {
        throw new Error("functionResponses is required.");
      }
      for (const functionResponse of functionResponses) {
        if (typeof functionResponse !== "object" || functionResponse === null || !("name" in functionResponse) || !("response" in functionResponse)) {
          throw new Error(`Could not parse function response, type '${typeof functionResponse}'.`);
        }
        if (!apiClient.isVertexAI() && !("id" in functionResponse)) {
          throw new Error(FUNCTION_RESPONSE_REQUIRES_ID);
        }
      }
      const clientMessage = {
        toolResponse: { functionResponses }
      };
      return clientMessage;
    }
    /**
        Send a message over the established connection.
    
        @param params - Contains two **optional** properties, `turns` and
            `turnComplete`.
    
          - `turns` will be converted to a `Content[]`
          - `turnComplete: true` [default] indicates that you are done sending
            content and expect a response. If `turnComplete: false`, the server
            will wait for additional messages before starting generation.
    
        @experimental
    
        @remarks
        There are two ways to send messages to the live API:
        `sendClientContent` and `sendRealtimeInput`.
    
        `sendClientContent` messages are added to the model context **in order**.
        Having a conversation using `sendClientContent` messages is roughly
        equivalent to using the `Chat.sendMessageStream`, except that the state of
        the `chat` history is stored on the API server instead of locally.
    
        Because of `sendClientContent`'s order guarantee, the model cannot respons
        as quickly to `sendClientContent` messages as to `sendRealtimeInput`
        messages. This makes the biggest difference when sending objects that have
        significant preprocessing time (typically images).
    
        The `sendClientContent` message sends a `Content[]`
        which has more options than the `Blob` sent by `sendRealtimeInput`.
    
        So the main use-cases for `sendClientContent` over `sendRealtimeInput` are:
    
        - Sending anything that can't be represented as a `Blob` (text,
        `sendClientContent({turns="Hello?"}`)).
        - Managing turns when not using audio input and voice activity detection.
          (`sendClientContent({turnComplete:true})` or the short form
        `sendClientContent()`)
        - Prefilling a conversation context
          ```
          sendClientContent({
              turns: [
                Content({role:user, parts:...}),
                Content({role:user, parts:...}),
                ...
              ]
          })
          ```
        @experimental
       */
    sendClientContent(params) {
      params = Object.assign(Object.assign({}, defaultLiveSendClientContentParamerters), params);
      const clientMessage = this.tLiveClientContent(this.apiClient, params);
      this.conn.send(JSON.stringify(clientMessage));
    }
    /**
        Send a realtime message over the established connection.
    
        @param params - Contains one property, `media`.
    
          - `media` will be converted to a `Blob`
    
        @experimental
    
        @remarks
        Use `sendRealtimeInput` for realtime audio chunks and video frames (images).
    
        With `sendRealtimeInput` the api will respond to audio automatically
        based on voice activity detection (VAD).
    
        `sendRealtimeInput` is optimized for responsivness at the expense of
        deterministic ordering guarantees. Audio and video tokens are to the
        context when they become available.
    
        Note: The Call signature expects a `Blob` object, but only a subset
        of audio and image mimetypes are allowed.
       */
    sendRealtimeInput(params) {
      let clientMessage = {};
      if (this.apiClient.isVertexAI()) {
        clientMessage = {
          "realtimeInput": liveSendRealtimeInputParametersToVertex(params)
        };
      } else {
        clientMessage = {
          "realtimeInput": liveSendRealtimeInputParametersToMldev(params)
        };
      }
      this.conn.send(JSON.stringify(clientMessage));
    }
    /**
        Send a function response message over the established connection.
    
        @param params - Contains property `functionResponses`.
    
          - `functionResponses` will be converted to a `functionResponses[]`
    
        @remarks
        Use `sendFunctionResponse` to reply to `LiveServerToolCall` from the server.
    
        Use {@link types.LiveConnectConfig#tools} to configure the callable functions.
    
        @experimental
       */
    sendToolResponse(params) {
      if (params.functionResponses == null) {
        throw new Error("Tool response parameters are required.");
      }
      const clientMessage = this.tLiveClienttToolResponse(this.apiClient, params);
      this.conn.send(JSON.stringify(clientMessage));
    }
    /**
         Terminates the WebSocket connection.
    
         @experimental
    
         @example
         ```ts
         let model: string;
         if (GOOGLE_GENAI_USE_VERTEXAI) {
           model = 'gemini-2.0-flash-live-preview-04-09';
         } else {
           model = 'gemini-live-2.5-flash-preview';
         }
         const session = await ai.live.connect({
           model: model,
           config: {
             responseModalities: [Modality.AUDIO],
           }
         });
    
         session.close();
         ```
       */
    close() {
      this.conn.close();
    }
  };
  function headersToMap(headers) {
    const headerMap = {};
    headers.forEach((value, key) => {
      headerMap[key] = value;
    });
    return headerMap;
  }
  function mapToHeaders(map) {
    const headers = new Headers();
    for (const [key, value] of Object.entries(map)) {
      headers.append(key, value);
    }
    return headers;
  }
  var DEFAULT_MAX_REMOTE_CALLS = 10;
  function shouldDisableAfc(config) {
    var _a, _b, _c;
    if ((_a = config === null || config === void 0 ? void 0 : config.automaticFunctionCalling) === null || _a === void 0 ? void 0 : _a.disable) {
      return true;
    }
    let callableToolsPresent = false;
    for (const tool of (_b = config === null || config === void 0 ? void 0 : config.tools) !== null && _b !== void 0 ? _b : []) {
      if (isCallableTool(tool)) {
        callableToolsPresent = true;
        break;
      }
    }
    if (!callableToolsPresent) {
      return true;
    }
    const maxCalls = (_c = config === null || config === void 0 ? void 0 : config.automaticFunctionCalling) === null || _c === void 0 ? void 0 : _c.maximumRemoteCalls;
    if (maxCalls && (maxCalls < 0 || !Number.isInteger(maxCalls)) || maxCalls == 0) {
      console.warn("Invalid maximumRemoteCalls value provided for automatic function calling. Disabled automatic function calling. Please provide a valid integer value greater than 0. maximumRemoteCalls provided:", maxCalls);
      return true;
    }
    return false;
  }
  function isCallableTool(tool) {
    return "callTool" in tool && typeof tool.callTool === "function";
  }
  function hasCallableTools(params) {
    var _a, _b, _c;
    return (_c = (_b = (_a = params.config) === null || _a === void 0 ? void 0 : _a.tools) === null || _b === void 0 ? void 0 : _b.some((tool) => isCallableTool(tool))) !== null && _c !== void 0 ? _c : false;
  }
  function hasNonCallableTools(params) {
    var _a, _b, _c;
    return (_c = (_b = (_a = params.config) === null || _a === void 0 ? void 0 : _a.tools) === null || _b === void 0 ? void 0 : _b.some((tool) => !isCallableTool(tool))) !== null && _c !== void 0 ? _c : false;
  }
  function shouldAppendAfcHistory(config) {
    var _a;
    return !((_a = config === null || config === void 0 ? void 0 : config.automaticFunctionCalling) === null || _a === void 0 ? void 0 : _a.ignoreCallHistory);
  }
  var Models = class extends BaseModule {
    constructor(apiClient) {
      super();
      this.apiClient = apiClient;
      this.generateContent = async (params) => {
        var _a, _b, _c, _d, _e;
        const transformedParams = await this.processParamsMaybeAddMcpUsage(params);
        this.maybeMoveToResponseJsonSchem(params);
        if (!hasCallableTools(params) || shouldDisableAfc(params.config)) {
          return await this.generateContentInternal(transformedParams);
        }
        if (hasNonCallableTools(params)) {
          throw new Error("Automatic function calling with CallableTools and Tools is not yet supported.");
        }
        let response;
        let functionResponseContent;
        const automaticFunctionCallingHistory = tContents(transformedParams.contents);
        const maxRemoteCalls = (_c = (_b = (_a = transformedParams.config) === null || _a === void 0 ? void 0 : _a.automaticFunctionCalling) === null || _b === void 0 ? void 0 : _b.maximumRemoteCalls) !== null && _c !== void 0 ? _c : DEFAULT_MAX_REMOTE_CALLS;
        let remoteCalls = 0;
        while (remoteCalls < maxRemoteCalls) {
          response = await this.generateContentInternal(transformedParams);
          if (!response.functionCalls || response.functionCalls.length === 0) {
            break;
          }
          const responseContent = response.candidates[0].content;
          const functionResponseParts = [];
          for (const tool of (_e = (_d = params.config) === null || _d === void 0 ? void 0 : _d.tools) !== null && _e !== void 0 ? _e : []) {
            if (isCallableTool(tool)) {
              const callableTool = tool;
              const parts = await callableTool.callTool(response.functionCalls);
              functionResponseParts.push(...parts);
            }
          }
          remoteCalls++;
          functionResponseContent = {
            role: "user",
            parts: functionResponseParts
          };
          transformedParams.contents = tContents(transformedParams.contents);
          transformedParams.contents.push(responseContent);
          transformedParams.contents.push(functionResponseContent);
          if (shouldAppendAfcHistory(transformedParams.config)) {
            automaticFunctionCallingHistory.push(responseContent);
            automaticFunctionCallingHistory.push(functionResponseContent);
          }
        }
        if (shouldAppendAfcHistory(transformedParams.config)) {
          response.automaticFunctionCallingHistory = automaticFunctionCallingHistory;
        }
        return response;
      };
      this.generateContentStream = async (params) => {
        this.maybeMoveToResponseJsonSchem(params);
        if (shouldDisableAfc(params.config)) {
          const transformedParams = await this.processParamsMaybeAddMcpUsage(params);
          return await this.generateContentStreamInternal(transformedParams);
        } else {
          return await this.processAfcStream(params);
        }
      };
      this.generateImages = async (params) => {
        return await this.generateImagesInternal(params).then((apiResponse) => {
          var _a;
          let positivePromptSafetyAttributes;
          const generatedImages = [];
          if (apiResponse === null || apiResponse === void 0 ? void 0 : apiResponse.generatedImages) {
            for (const generatedImage of apiResponse.generatedImages) {
              if (generatedImage && (generatedImage === null || generatedImage === void 0 ? void 0 : generatedImage.safetyAttributes) && ((_a = generatedImage === null || generatedImage === void 0 ? void 0 : generatedImage.safetyAttributes) === null || _a === void 0 ? void 0 : _a.contentType) === "Positive Prompt") {
                positivePromptSafetyAttributes = generatedImage === null || generatedImage === void 0 ? void 0 : generatedImage.safetyAttributes;
              } else {
                generatedImages.push(generatedImage);
              }
            }
          }
          let response;
          if (positivePromptSafetyAttributes) {
            response = {
              generatedImages,
              positivePromptSafetyAttributes,
              sdkHttpResponse: apiResponse.sdkHttpResponse
            };
          } else {
            response = {
              generatedImages,
              sdkHttpResponse: apiResponse.sdkHttpResponse
            };
          }
          return response;
        });
      };
      this.list = async (params) => {
        var _a;
        const defaultConfig = {
          queryBase: true
        };
        const actualConfig = Object.assign(Object.assign({}, defaultConfig), params === null || params === void 0 ? void 0 : params.config);
        const actualParams = {
          config: actualConfig
        };
        if (this.apiClient.isVertexAI()) {
          if (!actualParams.config.queryBase) {
            if ((_a = actualParams.config) === null || _a === void 0 ? void 0 : _a.filter) {
              throw new Error("Filtering tuned models list for Vertex AI is not currently supported");
            } else {
              actualParams.config.filter = "labels.tune-type:*";
            }
          }
        }
        return new Pager(PagedItem.PAGED_ITEM_MODELS, (x) => this.listInternal(x), await this.listInternal(actualParams), actualParams);
      };
      this.editImage = async (params) => {
        const paramsInternal = {
          model: params.model,
          prompt: params.prompt,
          referenceImages: [],
          config: params.config
        };
        if (params.referenceImages) {
          if (params.referenceImages) {
            paramsInternal.referenceImages = params.referenceImages.map((img) => img.toReferenceImageAPI());
          }
        }
        return await this.editImageInternal(paramsInternal);
      };
      this.upscaleImage = async (params) => {
        let apiConfig = {
          numberOfImages: 1,
          mode: "upscale"
        };
        if (params.config) {
          apiConfig = Object.assign(Object.assign({}, apiConfig), params.config);
        }
        const apiParams = {
          model: params.model,
          image: params.image,
          upscaleFactor: params.upscaleFactor,
          config: apiConfig
        };
        return await this.upscaleImageInternal(apiParams);
      };
      this.generateVideos = async (params) => {
        if ((params.prompt || params.image || params.video) && params.source) {
          throw new Error("Source and prompt/image/video are mutually exclusive. Please only use source.");
        }
        return await this.generateVideosInternal(params);
      };
    }
    /**
     * This logic is needed for GenerateContentConfig only.
     * Previously we made GenerateContentConfig.responseSchema field to accept
     * unknown. Since v1.9.0, we switch to use backend JSON schema support.
     * To maintain backward compatibility, we move the data that was treated as
     * JSON schema from the responseSchema field to the responseJsonSchema field.
     */
    maybeMoveToResponseJsonSchem(params) {
      if (params.config && params.config.responseSchema) {
        if (!params.config.responseJsonSchema) {
          if (Object.keys(params.config.responseSchema).includes("$schema")) {
            params.config.responseJsonSchema = params.config.responseSchema;
            delete params.config.responseSchema;
          }
        }
      }
      return;
    }
    /**
     * Transforms the CallableTools in the parameters to be simply Tools, it
     * copies the params into a new object and replaces the tools, it does not
     * modify the original params. Also sets the MCP usage header if there are
     * MCP tools in the parameters.
     */
    async processParamsMaybeAddMcpUsage(params) {
      var _a, _b, _c;
      const tools = (_a = params.config) === null || _a === void 0 ? void 0 : _a.tools;
      if (!tools) {
        return params;
      }
      const transformedTools = await Promise.all(tools.map(async (tool) => {
        if (isCallableTool(tool)) {
          const callableTool = tool;
          return await callableTool.tool();
        }
        return tool;
      }));
      const newParams = {
        model: params.model,
        contents: params.contents,
        config: Object.assign(Object.assign({}, params.config), { tools: transformedTools })
      };
      newParams.config.tools = transformedTools;
      if (params.config && params.config.tools && hasMcpToolUsage(params.config.tools)) {
        const headers = (_c = (_b = params.config.httpOptions) === null || _b === void 0 ? void 0 : _b.headers) !== null && _c !== void 0 ? _c : {};
        let newHeaders = Object.assign({}, headers);
        if (Object.keys(newHeaders).length === 0) {
          newHeaders = this.apiClient.getDefaultHeaders();
        }
        setMcpUsageHeader(newHeaders);
        newParams.config.httpOptions = Object.assign(Object.assign({}, params.config.httpOptions), { headers: newHeaders });
      }
      return newParams;
    }
    async initAfcToolsMap(params) {
      var _a, _b, _c;
      const afcTools = /* @__PURE__ */ new Map();
      for (const tool of (_b = (_a = params.config) === null || _a === void 0 ? void 0 : _a.tools) !== null && _b !== void 0 ? _b : []) {
        if (isCallableTool(tool)) {
          const callableTool = tool;
          const toolDeclaration = await callableTool.tool();
          for (const declaration of (_c = toolDeclaration.functionDeclarations) !== null && _c !== void 0 ? _c : []) {
            if (!declaration.name) {
              throw new Error("Function declaration name is required.");
            }
            if (afcTools.has(declaration.name)) {
              throw new Error(`Duplicate tool declaration name: ${declaration.name}`);
            }
            afcTools.set(declaration.name, callableTool);
          }
        }
      }
      return afcTools;
    }
    async processAfcStream(params) {
      var _a, _b, _c;
      const maxRemoteCalls = (_c = (_b = (_a = params.config) === null || _a === void 0 ? void 0 : _a.automaticFunctionCalling) === null || _b === void 0 ? void 0 : _b.maximumRemoteCalls) !== null && _c !== void 0 ? _c : DEFAULT_MAX_REMOTE_CALLS;
      let wereFunctionsCalled = false;
      let remoteCallCount = 0;
      const afcToolsMap = await this.initAfcToolsMap(params);
      return function(models, afcTools, params2) {
        var _a2, _b2;
        return __asyncGenerator(this, arguments, function* () {
          var _c2, e_1, _d, _e;
          while (remoteCallCount < maxRemoteCalls) {
            if (wereFunctionsCalled) {
              remoteCallCount++;
              wereFunctionsCalled = false;
            }
            const transformedParams = yield __await(models.processParamsMaybeAddMcpUsage(params2));
            const response = yield __await(models.generateContentStreamInternal(transformedParams));
            const functionResponses = [];
            const responseContents = [];
            try {
              for (var _f = true, response_1 = (e_1 = void 0, __asyncValues(response)), response_1_1; response_1_1 = yield __await(response_1.next()), _c2 = response_1_1.done, !_c2; _f = true) {
                _e = response_1_1.value;
                _f = false;
                const chunk = _e;
                yield yield __await(chunk);
                if (chunk.candidates && ((_a2 = chunk.candidates[0]) === null || _a2 === void 0 ? void 0 : _a2.content)) {
                  responseContents.push(chunk.candidates[0].content);
                  for (const part of (_b2 = chunk.candidates[0].content.parts) !== null && _b2 !== void 0 ? _b2 : []) {
                    if (remoteCallCount < maxRemoteCalls && part.functionCall) {
                      if (!part.functionCall.name) {
                        throw new Error("Function call name was not returned by the model.");
                      }
                      if (!afcTools.has(part.functionCall.name)) {
                        throw new Error(`Automatic function calling was requested, but not all the tools the model used implement the CallableTool interface. Available tools: ${afcTools.keys()}, mising tool: ${part.functionCall.name}`);
                      } else {
                        const responseParts = yield __await(afcTools.get(part.functionCall.name).callTool([part.functionCall]));
                        functionResponses.push(...responseParts);
                      }
                    }
                  }
                }
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (!_f && !_c2 && (_d = response_1.return)) yield __await(_d.call(response_1));
              } finally {
                if (e_1) throw e_1.error;
              }
            }
            if (functionResponses.length > 0) {
              wereFunctionsCalled = true;
              const typedResponseChunk = new GenerateContentResponse();
              typedResponseChunk.candidates = [
                {
                  content: {
                    role: "user",
                    parts: functionResponses
                  }
                }
              ];
              yield yield __await(typedResponseChunk);
              const newContents = [];
              newContents.push(...responseContents);
              newContents.push({
                role: "user",
                parts: functionResponses
              });
              const updatedContents = tContents(params2.contents).concat(newContents);
              params2.contents = updatedContents;
            } else {
              break;
            }
          }
        });
      }(this, afcToolsMap, params);
    }
    async generateContentInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = generateContentParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:generateContent", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = generateContentResponseFromVertex(apiResponse);
          const typedResp = new GenerateContentResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = generateContentParametersToMldev(this.apiClient, params);
        path = formatMap("{model}:generateContent", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = generateContentResponseFromMldev(apiResponse);
          const typedResp = new GenerateContentResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    async generateContentStreamInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = generateContentParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:streamGenerateContent?alt=sse", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        const apiClient = this.apiClient;
        response = apiClient.requestStream({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        });
        return response.then(function(apiResponse) {
          return __asyncGenerator(this, arguments, function* () {
            var _a2, e_2, _b2, _c2;
            try {
              for (var _d2 = true, apiResponse_1 = __asyncValues(apiResponse), apiResponse_1_1; apiResponse_1_1 = yield __await(apiResponse_1.next()), _a2 = apiResponse_1_1.done, !_a2; _d2 = true) {
                _c2 = apiResponse_1_1.value;
                _d2 = false;
                const chunk = _c2;
                const resp = generateContentResponseFromVertex(yield __await(chunk.json()));
                resp["sdkHttpResponse"] = {
                  headers: chunk.headers
                };
                const typedResp = new GenerateContentResponse();
                Object.assign(typedResp, resp);
                yield yield __await(typedResp);
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (!_d2 && !_a2 && (_b2 = apiResponse_1.return)) yield __await(_b2.call(apiResponse_1));
              } finally {
                if (e_2) throw e_2.error;
              }
            }
          });
        });
      } else {
        const body = generateContentParametersToMldev(this.apiClient, params);
        path = formatMap("{model}:streamGenerateContent?alt=sse", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        const apiClient = this.apiClient;
        response = apiClient.requestStream({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        });
        return response.then(function(apiResponse) {
          return __asyncGenerator(this, arguments, function* () {
            var _a2, e_3, _b2, _c2;
            try {
              for (var _d2 = true, apiResponse_2 = __asyncValues(apiResponse), apiResponse_2_1; apiResponse_2_1 = yield __await(apiResponse_2.next()), _a2 = apiResponse_2_1.done, !_a2; _d2 = true) {
                _c2 = apiResponse_2_1.value;
                _d2 = false;
                const chunk = _c2;
                const resp = generateContentResponseFromMldev(yield __await(chunk.json()));
                resp["sdkHttpResponse"] = {
                  headers: chunk.headers
                };
                const typedResp = new GenerateContentResponse();
                Object.assign(typedResp, resp);
                yield yield __await(typedResp);
              }
            } catch (e_3_1) {
              e_3 = { error: e_3_1 };
            } finally {
              try {
                if (!_d2 && !_a2 && (_b2 = apiResponse_2.return)) yield __await(_b2.call(apiResponse_2));
              } finally {
                if (e_3) throw e_3.error;
              }
            }
          });
        });
      }
    }
    /**
     * Calculates embeddings for the given contents. Only text is supported.
     *
     * @param params - The parameters for embedding contents.
     * @return The response from the API.
     *
     * @example
     * ```ts
     * const response = await ai.models.embedContent({
     *  model: 'text-embedding-004',
     *  contents: [
     *    'What is your name?',
     *    'What is your favorite color?',
     *  ],
     *  config: {
     *    outputDimensionality: 64,
     *  },
     * });
     * console.log(response);
     * ```
     */
    async embedContent(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = embedContentParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:predict", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = embedContentResponseFromVertex(apiResponse);
          const typedResp = new EmbedContentResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = embedContentParametersToMldev(this.apiClient, params);
        path = formatMap("{model}:batchEmbedContents", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = embedContentResponseFromMldev(apiResponse);
          const typedResp = new EmbedContentResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Private method for generating images.
     */
    async generateImagesInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = generateImagesParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:predict", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = generateImagesResponseFromVertex(apiResponse);
          const typedResp = new GenerateImagesResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = generateImagesParametersToMldev(this.apiClient, params);
        path = formatMap("{model}:predict", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = generateImagesResponseFromMldev(apiResponse);
          const typedResp = new GenerateImagesResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Private method for editing an image.
     */
    async editImageInternal(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = editImageParametersInternalToVertex(this.apiClient, params);
        path = formatMap("{model}:predict", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = editImageResponseFromVertex(apiResponse);
          const typedResp = new EditImageResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        throw new Error("This method is only supported by the Vertex AI.");
      }
    }
    /**
     * Private method for upscaling an image.
     */
    async upscaleImageInternal(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = upscaleImageAPIParametersInternalToVertex(this.apiClient, params);
        path = formatMap("{model}:predict", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = upscaleImageResponseFromVertex(apiResponse);
          const typedResp = new UpscaleImageResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        throw new Error("This method is only supported by the Vertex AI.");
      }
    }
    /**
     * Recontextualizes an image.
     *
     * There are two types of recontextualization currently supported:
     * 1) Imagen Product Recontext - Generate images of products in new scenes
     *    and contexts.
     * 2) Virtual Try-On: Generate images of persons modeling fashion products.
     *
     * @param params - The parameters for recontextualizing an image.
     * @return The response from the API.
     *
     * @example
     * ```ts
     * const response1 = await ai.models.recontextImage({
     *  model: 'imagen-product-recontext-preview-06-30',
     *  source: {
     *    prompt: 'In a modern kitchen setting.',
     *    productImages: [productImage],
     *  },
     *  config: {
     *    numberOfImages: 1,
     *  },
     * });
     * console.log(response1?.generatedImages?.[0]?.image?.imageBytes);
     *
     * const response2 = await ai.models.recontextImage({
     *  model: 'virtual-try-on-preview-08-04',
     *  source: {
     *    personImage: personImage,
     *    productImages: [productImage],
     *  },
     *  config: {
     *    numberOfImages: 1,
     *  },
     * });
     * console.log(response2?.generatedImages?.[0]?.image?.imageBytes);
     * ```
     */
    async recontextImage(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = recontextImageParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:predict", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = recontextImageResponseFromVertex(apiResponse);
          const typedResp = new RecontextImageResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        throw new Error("This method is only supported by the Vertex AI.");
      }
    }
    /**
     * Segments an image, creating a mask of a specified area.
     *
     * @param params - The parameters for segmenting an image.
     * @return The response from the API.
     *
     * @example
     * ```ts
     * const response = await ai.models.segmentImage({
     *  model: 'image-segmentation-001',
     *  source: {
     *    image: image,
     *  },
     *  config: {
     *    mode: 'foreground',
     *  },
     * });
     * console.log(response?.generatedMasks?.[0]?.mask?.imageBytes);
     * ```
     */
    async segmentImage(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = segmentImageParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:predict", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = segmentImageResponseFromVertex(apiResponse);
          const typedResp = new SegmentImageResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        throw new Error("This method is only supported by the Vertex AI.");
      }
    }
    /**
     * Fetches information about a model by name.
     *
     * @example
     * ```ts
     * const modelInfo = await ai.models.get({model: 'gemini-2.0-flash'});
     * ```
     */
    async get(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = getModelParametersToVertex(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = modelFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = getModelParametersToMldev(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = modelFromMldev(apiResponse);
          return resp;
        });
      }
    }
    async listInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = listModelsParametersToVertex(this.apiClient, params);
        path = formatMap("{models_url}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listModelsResponseFromVertex(apiResponse);
          const typedResp = new ListModelsResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = listModelsParametersToMldev(this.apiClient, params);
        path = formatMap("{models_url}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listModelsResponseFromMldev(apiResponse);
          const typedResp = new ListModelsResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Updates a tuned model by its name.
     *
     * @param params - The parameters for updating the model.
     * @return The response from the API.
     *
     * @example
     * ```ts
     * const response = await ai.models.update({
     *   model: 'tuned-model-name',
     *   config: {
     *     displayName: 'New display name',
     *     description: 'New description',
     *   },
     * });
     * ```
     */
    async update(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = updateModelParametersToVertex(this.apiClient, params);
        path = formatMap("{model}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "PATCH",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = modelFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = updateModelParametersToMldev(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "PATCH",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = modelFromMldev(apiResponse);
          return resp;
        });
      }
    }
    /**
     * Deletes a tuned model by its name.
     *
     * @param params - The parameters for deleting the model.
     * @return The response from the API.
     *
     * @example
     * ```ts
     * const response = await ai.models.delete({model: 'tuned-model-name'});
     * ```
     */
    async delete(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = deleteModelParametersToVertex(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "DELETE",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = deleteModelResponseFromVertex(apiResponse);
          const typedResp = new DeleteModelResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = deleteModelParametersToMldev(this.apiClient, params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "DELETE",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = deleteModelResponseFromMldev(apiResponse);
          const typedResp = new DeleteModelResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Counts the number of tokens in the given contents. Multimodal input is
     * supported for Gemini models.
     *
     * @param params - The parameters for counting tokens.
     * @return The response from the API.
     *
     * @example
     * ```ts
     * const response = await ai.models.countTokens({
     *  model: 'gemini-2.0-flash',
     *  contents: 'The quick brown fox jumps over the lazy dog.'
     * });
     * console.log(response);
     * ```
     */
    async countTokens(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = countTokensParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:countTokens", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = countTokensResponseFromVertex(apiResponse);
          const typedResp = new CountTokensResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = countTokensParametersToMldev(this.apiClient, params);
        path = formatMap("{model}:countTokens", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = countTokensResponseFromMldev(apiResponse);
          const typedResp = new CountTokensResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Given a list of contents, returns a corresponding TokensInfo containing
     * the list of tokens and list of token ids.
     *
     * This method is not supported by the Gemini Developer API.
     *
     * @param params - The parameters for computing tokens.
     * @return The response from the API.
     *
     * @example
     * ```ts
     * const response = await ai.models.computeTokens({
     *  model: 'gemini-2.0-flash',
     *  contents: 'What is your name?'
     * });
     * console.log(response);
     * ```
     */
    async computeTokens(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = computeTokensParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:computeTokens", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = computeTokensResponseFromVertex(apiResponse);
          const typedResp = new ComputeTokensResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        throw new Error("This method is only supported by the Vertex AI.");
      }
    }
    /**
     * Private method for generating videos.
     */
    async generateVideosInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = generateVideosParametersToVertex(this.apiClient, params);
        path = formatMap("{model}:predictLongRunning", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = generateVideosOperationFromVertex(apiResponse);
          const typedResp = new GenerateVideosOperation();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = generateVideosParametersToMldev(this.apiClient, params);
        path = formatMap("{model}:predictLongRunning", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = generateVideosOperationFromMldev(apiResponse);
          const typedResp = new GenerateVideosOperation();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
  };
  var Operations = class extends BaseModule {
    constructor(apiClient) {
      super();
      this.apiClient = apiClient;
    }
    /**
     * Gets the status of a long-running operation.
     *
     * @param parameters The parameters for the get operation request.
     * @return The updated Operation object, with the latest status or result.
     */
    async getVideosOperation(parameters) {
      const operation = parameters.operation;
      const config = parameters.config;
      if (operation.name === void 0 || operation.name === "") {
        throw new Error("Operation name is required.");
      }
      if (this.apiClient.isVertexAI()) {
        const resourceName2 = operation.name.split("/operations/")[0];
        let httpOptions = void 0;
        if (config && "httpOptions" in config) {
          httpOptions = config.httpOptions;
        }
        const rawOperation = await this.fetchPredictVideosOperationInternal({
          operationName: operation.name,
          resourceName: resourceName2,
          config: { httpOptions }
        });
        return operation._fromAPIResponse({
          apiResponse: rawOperation,
          isVertexAI: true
        });
      } else {
        const rawOperation = await this.getVideosOperationInternal({
          operationName: operation.name,
          config
        });
        return operation._fromAPIResponse({
          apiResponse: rawOperation,
          isVertexAI: false
        });
      }
    }
    /**
     * Gets the status of a long-running operation.
     *
     * @param parameters The parameters for the get operation request.
     * @return The updated Operation object, with the latest status or result.
     */
    async get(parameters) {
      const operation = parameters.operation;
      const config = parameters.config;
      if (operation.name === void 0 || operation.name === "") {
        throw new Error("Operation name is required.");
      }
      if (this.apiClient.isVertexAI()) {
        const resourceName2 = operation.name.split("/operations/")[0];
        let httpOptions = void 0;
        if (config && "httpOptions" in config) {
          httpOptions = config.httpOptions;
        }
        const rawOperation = await this.fetchPredictVideosOperationInternal({
          operationName: operation.name,
          resourceName: resourceName2,
          config: { httpOptions }
        });
        return operation._fromAPIResponse({
          apiResponse: rawOperation,
          isVertexAI: true
        });
      } else {
        const rawOperation = await this.getVideosOperationInternal({
          operationName: operation.name,
          config
        });
        return operation._fromAPIResponse({
          apiResponse: rawOperation,
          isVertexAI: false
        });
      }
    }
    async getVideosOperationInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = getOperationParametersToVertex(params);
        path = formatMap("{operationName}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response;
      } else {
        const body = getOperationParametersToMldev(params);
        path = formatMap("{operationName}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response;
      }
    }
    async fetchPredictVideosOperationInternal(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = fetchPredictOperationParametersToVertex(params);
        path = formatMap("{resourceName}:fetchPredictOperation", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response;
      } else {
        throw new Error("This method is only supported by the Vertex AI.");
      }
    }
  };
  function audioTranscriptionConfigToMldev() {
    const toObject = {};
    return toObject;
  }
  function authTokenFromMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function automaticActivityDetectionToMldev(fromObject) {
    const toObject = {};
    const fromDisabled = getValueByPath(fromObject, ["disabled"]);
    if (fromDisabled != null) {
      setValueByPath(toObject, ["disabled"], fromDisabled);
    }
    const fromStartOfSpeechSensitivity = getValueByPath(fromObject, [
      "startOfSpeechSensitivity"
    ]);
    if (fromStartOfSpeechSensitivity != null) {
      setValueByPath(toObject, ["startOfSpeechSensitivity"], fromStartOfSpeechSensitivity);
    }
    const fromEndOfSpeechSensitivity = getValueByPath(fromObject, [
      "endOfSpeechSensitivity"
    ]);
    if (fromEndOfSpeechSensitivity != null) {
      setValueByPath(toObject, ["endOfSpeechSensitivity"], fromEndOfSpeechSensitivity);
    }
    const fromPrefixPaddingMs = getValueByPath(fromObject, [
      "prefixPaddingMs"
    ]);
    if (fromPrefixPaddingMs != null) {
      setValueByPath(toObject, ["prefixPaddingMs"], fromPrefixPaddingMs);
    }
    const fromSilenceDurationMs = getValueByPath(fromObject, [
      "silenceDurationMs"
    ]);
    if (fromSilenceDurationMs != null) {
      setValueByPath(toObject, ["silenceDurationMs"], fromSilenceDurationMs);
    }
    return toObject;
  }
  function blobToMldev(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromData = getValueByPath(fromObject, ["data"]);
    if (fromData != null) {
      setValueByPath(toObject, ["data"], fromData);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function contentToMldev(fromObject) {
    const toObject = {};
    const fromParts = getValueByPath(fromObject, ["parts"]);
    if (fromParts != null) {
      let transformedList = fromParts;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return partToMldev(item);
        });
      }
      setValueByPath(toObject, ["parts"], transformedList);
    }
    const fromRole = getValueByPath(fromObject, ["role"]);
    if (fromRole != null) {
      setValueByPath(toObject, ["role"], fromRole);
    }
    return toObject;
  }
  function contextWindowCompressionConfigToMldev(fromObject) {
    const toObject = {};
    const fromTriggerTokens = getValueByPath(fromObject, [
      "triggerTokens"
    ]);
    if (fromTriggerTokens != null) {
      setValueByPath(toObject, ["triggerTokens"], fromTriggerTokens);
    }
    const fromSlidingWindow = getValueByPath(fromObject, [
      "slidingWindow"
    ]);
    if (fromSlidingWindow != null) {
      setValueByPath(toObject, ["slidingWindow"], slidingWindowToMldev(fromSlidingWindow));
    }
    return toObject;
  }
  function createAuthTokenConfigToMldev(apiClient, fromObject, parentObject) {
    const toObject = {};
    const fromExpireTime = getValueByPath(fromObject, ["expireTime"]);
    if (parentObject !== void 0 && fromExpireTime != null) {
      setValueByPath(parentObject, ["expireTime"], fromExpireTime);
    }
    const fromNewSessionExpireTime = getValueByPath(fromObject, [
      "newSessionExpireTime"
    ]);
    if (parentObject !== void 0 && fromNewSessionExpireTime != null) {
      setValueByPath(parentObject, ["newSessionExpireTime"], fromNewSessionExpireTime);
    }
    const fromUses = getValueByPath(fromObject, ["uses"]);
    if (parentObject !== void 0 && fromUses != null) {
      setValueByPath(parentObject, ["uses"], fromUses);
    }
    const fromLiveConnectConstraints = getValueByPath(fromObject, [
      "liveConnectConstraints"
    ]);
    if (parentObject !== void 0 && fromLiveConnectConstraints != null) {
      setValueByPath(parentObject, ["bidiGenerateContentSetup"], liveConnectConstraintsToMldev(apiClient, fromLiveConnectConstraints));
    }
    const fromLockAdditionalFields = getValueByPath(fromObject, [
      "lockAdditionalFields"
    ]);
    if (parentObject !== void 0 && fromLockAdditionalFields != null) {
      setValueByPath(parentObject, ["fieldMask"], fromLockAdditionalFields);
    }
    return toObject;
  }
  function createAuthTokenParametersToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      setValueByPath(toObject, ["config"], createAuthTokenConfigToMldev(apiClient, fromConfig, toObject));
    }
    return toObject;
  }
  function dynamicRetrievalConfigToMldev(fromObject) {
    const toObject = {};
    const fromMode = getValueByPath(fromObject, ["mode"]);
    if (fromMode != null) {
      setValueByPath(toObject, ["mode"], fromMode);
    }
    const fromDynamicThreshold = getValueByPath(fromObject, [
      "dynamicThreshold"
    ]);
    if (fromDynamicThreshold != null) {
      setValueByPath(toObject, ["dynamicThreshold"], fromDynamicThreshold);
    }
    return toObject;
  }
  function fileDataToMldev(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["displayName"]) !== void 0) {
      throw new Error("displayName parameter is not supported in Gemini API.");
    }
    const fromFileUri = getValueByPath(fromObject, ["fileUri"]);
    if (fromFileUri != null) {
      setValueByPath(toObject, ["fileUri"], fromFileUri);
    }
    const fromMimeType = getValueByPath(fromObject, ["mimeType"]);
    if (fromMimeType != null) {
      setValueByPath(toObject, ["mimeType"], fromMimeType);
    }
    return toObject;
  }
  function functionCallToMldev(fromObject) {
    const toObject = {};
    const fromId = getValueByPath(fromObject, ["id"]);
    if (fromId != null) {
      setValueByPath(toObject, ["id"], fromId);
    }
    const fromArgs = getValueByPath(fromObject, ["args"]);
    if (fromArgs != null) {
      setValueByPath(toObject, ["args"], fromArgs);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    return toObject;
  }
  function functionDeclarationToMldev(fromObject) {
    const toObject = {};
    const fromBehavior = getValueByPath(fromObject, ["behavior"]);
    if (fromBehavior != null) {
      setValueByPath(toObject, ["behavior"], fromBehavior);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromParameters = getValueByPath(fromObject, ["parameters"]);
    if (fromParameters != null) {
      setValueByPath(toObject, ["parameters"], fromParameters);
    }
    const fromParametersJsonSchema = getValueByPath(fromObject, [
      "parametersJsonSchema"
    ]);
    if (fromParametersJsonSchema != null) {
      setValueByPath(toObject, ["parametersJsonSchema"], fromParametersJsonSchema);
    }
    const fromResponse = getValueByPath(fromObject, ["response"]);
    if (fromResponse != null) {
      setValueByPath(toObject, ["response"], fromResponse);
    }
    const fromResponseJsonSchema = getValueByPath(fromObject, [
      "responseJsonSchema"
    ]);
    if (fromResponseJsonSchema != null) {
      setValueByPath(toObject, ["responseJsonSchema"], fromResponseJsonSchema);
    }
    return toObject;
  }
  function googleSearchRetrievalToMldev(fromObject) {
    const toObject = {};
    const fromDynamicRetrievalConfig = getValueByPath(fromObject, [
      "dynamicRetrievalConfig"
    ]);
    if (fromDynamicRetrievalConfig != null) {
      setValueByPath(toObject, ["dynamicRetrievalConfig"], dynamicRetrievalConfigToMldev(fromDynamicRetrievalConfig));
    }
    return toObject;
  }
  function googleSearchToMldev(fromObject) {
    const toObject = {};
    const fromTimeRangeFilter = getValueByPath(fromObject, [
      "timeRangeFilter"
    ]);
    if (fromTimeRangeFilter != null) {
      setValueByPath(toObject, ["timeRangeFilter"], intervalToMldev(fromTimeRangeFilter));
    }
    if (getValueByPath(fromObject, ["excludeDomains"]) !== void 0) {
      throw new Error("excludeDomains parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function intervalToMldev(fromObject) {
    const toObject = {};
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    return toObject;
  }
  function liveConnectConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromGenerationConfig = getValueByPath(fromObject, [
      "generationConfig"
    ]);
    if (parentObject !== void 0 && fromGenerationConfig != null) {
      setValueByPath(parentObject, ["setup", "generationConfig"], fromGenerationConfig);
    }
    const fromResponseModalities = getValueByPath(fromObject, [
      "responseModalities"
    ]);
    if (parentObject !== void 0 && fromResponseModalities != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "responseModalities"], fromResponseModalities);
    }
    const fromTemperature = getValueByPath(fromObject, ["temperature"]);
    if (parentObject !== void 0 && fromTemperature != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "temperature"], fromTemperature);
    }
    const fromTopP = getValueByPath(fromObject, ["topP"]);
    if (parentObject !== void 0 && fromTopP != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "topP"], fromTopP);
    }
    const fromTopK = getValueByPath(fromObject, ["topK"]);
    if (parentObject !== void 0 && fromTopK != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "topK"], fromTopK);
    }
    const fromMaxOutputTokens = getValueByPath(fromObject, [
      "maxOutputTokens"
    ]);
    if (parentObject !== void 0 && fromMaxOutputTokens != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "maxOutputTokens"], fromMaxOutputTokens);
    }
    const fromMediaResolution = getValueByPath(fromObject, [
      "mediaResolution"
    ]);
    if (parentObject !== void 0 && fromMediaResolution != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "mediaResolution"], fromMediaResolution);
    }
    const fromSeed = getValueByPath(fromObject, ["seed"]);
    if (parentObject !== void 0 && fromSeed != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "seed"], fromSeed);
    }
    const fromSpeechConfig = getValueByPath(fromObject, ["speechConfig"]);
    if (parentObject !== void 0 && fromSpeechConfig != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "speechConfig"], speechConfigToMldev(tLiveSpeechConfig(fromSpeechConfig)));
    }
    const fromEnableAffectiveDialog = getValueByPath(fromObject, [
      "enableAffectiveDialog"
    ]);
    if (parentObject !== void 0 && fromEnableAffectiveDialog != null) {
      setValueByPath(parentObject, ["setup", "generationConfig", "enableAffectiveDialog"], fromEnableAffectiveDialog);
    }
    const fromSystemInstruction = getValueByPath(fromObject, [
      "systemInstruction"
    ]);
    if (parentObject !== void 0 && fromSystemInstruction != null) {
      setValueByPath(parentObject, ["setup", "systemInstruction"], contentToMldev(tContent(fromSystemInstruction)));
    }
    const fromTools = getValueByPath(fromObject, ["tools"]);
    if (parentObject !== void 0 && fromTools != null) {
      let transformedList = tTools(fromTools);
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return toolToMldev(tTool(item));
        });
      }
      setValueByPath(parentObject, ["setup", "tools"], transformedList);
    }
    const fromSessionResumption = getValueByPath(fromObject, [
      "sessionResumption"
    ]);
    if (parentObject !== void 0 && fromSessionResumption != null) {
      setValueByPath(parentObject, ["setup", "sessionResumption"], sessionResumptionConfigToMldev(fromSessionResumption));
    }
    const fromInputAudioTranscription = getValueByPath(fromObject, [
      "inputAudioTranscription"
    ]);
    if (parentObject !== void 0 && fromInputAudioTranscription != null) {
      setValueByPath(parentObject, ["setup", "inputAudioTranscription"], audioTranscriptionConfigToMldev());
    }
    const fromOutputAudioTranscription = getValueByPath(fromObject, [
      "outputAudioTranscription"
    ]);
    if (parentObject !== void 0 && fromOutputAudioTranscription != null) {
      setValueByPath(parentObject, ["setup", "outputAudioTranscription"], audioTranscriptionConfigToMldev());
    }
    const fromRealtimeInputConfig = getValueByPath(fromObject, [
      "realtimeInputConfig"
    ]);
    if (parentObject !== void 0 && fromRealtimeInputConfig != null) {
      setValueByPath(parentObject, ["setup", "realtimeInputConfig"], realtimeInputConfigToMldev(fromRealtimeInputConfig));
    }
    const fromContextWindowCompression = getValueByPath(fromObject, [
      "contextWindowCompression"
    ]);
    if (parentObject !== void 0 && fromContextWindowCompression != null) {
      setValueByPath(parentObject, ["setup", "contextWindowCompression"], contextWindowCompressionConfigToMldev(fromContextWindowCompression));
    }
    const fromProactivity = getValueByPath(fromObject, ["proactivity"]);
    if (parentObject !== void 0 && fromProactivity != null) {
      setValueByPath(parentObject, ["setup", "proactivity"], proactivityConfigToMldev(fromProactivity));
    }
    return toObject;
  }
  function liveConnectConstraintsToMldev(apiClient, fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["setup", "model"], tModel(apiClient, fromModel));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      setValueByPath(toObject, ["config"], liveConnectConfigToMldev(fromConfig, toObject));
    }
    return toObject;
  }
  function multiSpeakerVoiceConfigToMldev(fromObject) {
    const toObject = {};
    const fromSpeakerVoiceConfigs = getValueByPath(fromObject, [
      "speakerVoiceConfigs"
    ]);
    if (fromSpeakerVoiceConfigs != null) {
      let transformedList = fromSpeakerVoiceConfigs;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return speakerVoiceConfigToMldev(item);
        });
      }
      setValueByPath(toObject, ["speakerVoiceConfigs"], transformedList);
    }
    return toObject;
  }
  function partToMldev(fromObject) {
    const toObject = {};
    const fromVideoMetadata = getValueByPath(fromObject, [
      "videoMetadata"
    ]);
    if (fromVideoMetadata != null) {
      setValueByPath(toObject, ["videoMetadata"], videoMetadataToMldev(fromVideoMetadata));
    }
    const fromThought = getValueByPath(fromObject, ["thought"]);
    if (fromThought != null) {
      setValueByPath(toObject, ["thought"], fromThought);
    }
    const fromInlineData = getValueByPath(fromObject, ["inlineData"]);
    if (fromInlineData != null) {
      setValueByPath(toObject, ["inlineData"], blobToMldev(fromInlineData));
    }
    const fromFileData = getValueByPath(fromObject, ["fileData"]);
    if (fromFileData != null) {
      setValueByPath(toObject, ["fileData"], fileDataToMldev(fromFileData));
    }
    const fromThoughtSignature = getValueByPath(fromObject, [
      "thoughtSignature"
    ]);
    if (fromThoughtSignature != null) {
      setValueByPath(toObject, ["thoughtSignature"], fromThoughtSignature);
    }
    const fromFunctionCall = getValueByPath(fromObject, ["functionCall"]);
    if (fromFunctionCall != null) {
      setValueByPath(toObject, ["functionCall"], functionCallToMldev(fromFunctionCall));
    }
    const fromCodeExecutionResult = getValueByPath(fromObject, [
      "codeExecutionResult"
    ]);
    if (fromCodeExecutionResult != null) {
      setValueByPath(toObject, ["codeExecutionResult"], fromCodeExecutionResult);
    }
    const fromExecutableCode = getValueByPath(fromObject, [
      "executableCode"
    ]);
    if (fromExecutableCode != null) {
      setValueByPath(toObject, ["executableCode"], fromExecutableCode);
    }
    const fromFunctionResponse = getValueByPath(fromObject, [
      "functionResponse"
    ]);
    if (fromFunctionResponse != null) {
      setValueByPath(toObject, ["functionResponse"], fromFunctionResponse);
    }
    const fromText = getValueByPath(fromObject, ["text"]);
    if (fromText != null) {
      setValueByPath(toObject, ["text"], fromText);
    }
    return toObject;
  }
  function prebuiltVoiceConfigToMldev(fromObject) {
    const toObject = {};
    const fromVoiceName = getValueByPath(fromObject, ["voiceName"]);
    if (fromVoiceName != null) {
      setValueByPath(toObject, ["voiceName"], fromVoiceName);
    }
    return toObject;
  }
  function proactivityConfigToMldev(fromObject) {
    const toObject = {};
    const fromProactiveAudio = getValueByPath(fromObject, [
      "proactiveAudio"
    ]);
    if (fromProactiveAudio != null) {
      setValueByPath(toObject, ["proactiveAudio"], fromProactiveAudio);
    }
    return toObject;
  }
  function realtimeInputConfigToMldev(fromObject) {
    const toObject = {};
    const fromAutomaticActivityDetection = getValueByPath(fromObject, [
      "automaticActivityDetection"
    ]);
    if (fromAutomaticActivityDetection != null) {
      setValueByPath(toObject, ["automaticActivityDetection"], automaticActivityDetectionToMldev(fromAutomaticActivityDetection));
    }
    const fromActivityHandling = getValueByPath(fromObject, [
      "activityHandling"
    ]);
    if (fromActivityHandling != null) {
      setValueByPath(toObject, ["activityHandling"], fromActivityHandling);
    }
    const fromTurnCoverage = getValueByPath(fromObject, ["turnCoverage"]);
    if (fromTurnCoverage != null) {
      setValueByPath(toObject, ["turnCoverage"], fromTurnCoverage);
    }
    return toObject;
  }
  function sessionResumptionConfigToMldev(fromObject) {
    const toObject = {};
    const fromHandle = getValueByPath(fromObject, ["handle"]);
    if (fromHandle != null) {
      setValueByPath(toObject, ["handle"], fromHandle);
    }
    if (getValueByPath(fromObject, ["transparent"]) !== void 0) {
      throw new Error("transparent parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function slidingWindowToMldev(fromObject) {
    const toObject = {};
    const fromTargetTokens = getValueByPath(fromObject, ["targetTokens"]);
    if (fromTargetTokens != null) {
      setValueByPath(toObject, ["targetTokens"], fromTargetTokens);
    }
    return toObject;
  }
  function speakerVoiceConfigToMldev(fromObject) {
    const toObject = {};
    const fromSpeaker = getValueByPath(fromObject, ["speaker"]);
    if (fromSpeaker != null) {
      setValueByPath(toObject, ["speaker"], fromSpeaker);
    }
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToMldev(fromVoiceConfig));
    }
    return toObject;
  }
  function speechConfigToMldev(fromObject) {
    const toObject = {};
    const fromVoiceConfig = getValueByPath(fromObject, ["voiceConfig"]);
    if (fromVoiceConfig != null) {
      setValueByPath(toObject, ["voiceConfig"], voiceConfigToMldev(fromVoiceConfig));
    }
    const fromMultiSpeakerVoiceConfig = getValueByPath(fromObject, [
      "multiSpeakerVoiceConfig"
    ]);
    if (fromMultiSpeakerVoiceConfig != null) {
      setValueByPath(toObject, ["multiSpeakerVoiceConfig"], multiSpeakerVoiceConfigToMldev(fromMultiSpeakerVoiceConfig));
    }
    const fromLanguageCode = getValueByPath(fromObject, ["languageCode"]);
    if (fromLanguageCode != null) {
      setValueByPath(toObject, ["languageCode"], fromLanguageCode);
    }
    return toObject;
  }
  function toolComputerUseToMldev(fromObject) {
    const toObject = {};
    const fromEnvironment = getValueByPath(fromObject, ["environment"]);
    if (fromEnvironment != null) {
      setValueByPath(toObject, ["environment"], fromEnvironment);
    }
    const fromExcludedPredefinedFunctions = getValueByPath(fromObject, [
      "excludedPredefinedFunctions"
    ]);
    if (fromExcludedPredefinedFunctions != null) {
      setValueByPath(toObject, ["excludedPredefinedFunctions"], fromExcludedPredefinedFunctions);
    }
    return toObject;
  }
  function toolToMldev(fromObject) {
    const toObject = {};
    const fromFunctionDeclarations = getValueByPath(fromObject, [
      "functionDeclarations"
    ]);
    if (fromFunctionDeclarations != null) {
      let transformedList = fromFunctionDeclarations;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return functionDeclarationToMldev(item);
        });
      }
      setValueByPath(toObject, ["functionDeclarations"], transformedList);
    }
    if (getValueByPath(fromObject, ["retrieval"]) !== void 0) {
      throw new Error("retrieval parameter is not supported in Gemini API.");
    }
    const fromGoogleSearch = getValueByPath(fromObject, ["googleSearch"]);
    if (fromGoogleSearch != null) {
      setValueByPath(toObject, ["googleSearch"], googleSearchToMldev(fromGoogleSearch));
    }
    const fromGoogleSearchRetrieval = getValueByPath(fromObject, [
      "googleSearchRetrieval"
    ]);
    if (fromGoogleSearchRetrieval != null) {
      setValueByPath(toObject, ["googleSearchRetrieval"], googleSearchRetrievalToMldev(fromGoogleSearchRetrieval));
    }
    if (getValueByPath(fromObject, ["enterpriseWebSearch"]) !== void 0) {
      throw new Error("enterpriseWebSearch parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["googleMaps"]) !== void 0) {
      throw new Error("googleMaps parameter is not supported in Gemini API.");
    }
    const fromUrlContext = getValueByPath(fromObject, ["urlContext"]);
    if (fromUrlContext != null) {
      setValueByPath(toObject, ["urlContext"], urlContextToMldev());
    }
    const fromComputerUse = getValueByPath(fromObject, ["computerUse"]);
    if (fromComputerUse != null) {
      setValueByPath(toObject, ["computerUse"], toolComputerUseToMldev(fromComputerUse));
    }
    const fromCodeExecution = getValueByPath(fromObject, [
      "codeExecution"
    ]);
    if (fromCodeExecution != null) {
      setValueByPath(toObject, ["codeExecution"], fromCodeExecution);
    }
    return toObject;
  }
  function urlContextToMldev() {
    const toObject = {};
    return toObject;
  }
  function videoMetadataToMldev(fromObject) {
    const toObject = {};
    const fromFps = getValueByPath(fromObject, ["fps"]);
    if (fromFps != null) {
      setValueByPath(toObject, ["fps"], fromFps);
    }
    const fromEndOffset = getValueByPath(fromObject, ["endOffset"]);
    if (fromEndOffset != null) {
      setValueByPath(toObject, ["endOffset"], fromEndOffset);
    }
    const fromStartOffset = getValueByPath(fromObject, ["startOffset"]);
    if (fromStartOffset != null) {
      setValueByPath(toObject, ["startOffset"], fromStartOffset);
    }
    return toObject;
  }
  function voiceConfigToMldev(fromObject) {
    const toObject = {};
    const fromPrebuiltVoiceConfig = getValueByPath(fromObject, [
      "prebuiltVoiceConfig"
    ]);
    if (fromPrebuiltVoiceConfig != null) {
      setValueByPath(toObject, ["prebuiltVoiceConfig"], prebuiltVoiceConfigToMldev(fromPrebuiltVoiceConfig));
    }
    return toObject;
  }
  function getFieldMasks(setup) {
    const fields = [];
    for (const key in setup) {
      if (Object.prototype.hasOwnProperty.call(setup, key)) {
        const value = setup[key];
        if (typeof value === "object" && value != null && Object.keys(value).length > 0) {
          const field = Object.keys(value).map((kk) => `${key}.${kk}`);
          fields.push(...field);
        } else {
          fields.push(key);
        }
      }
    }
    return fields.join(",");
  }
  function convertBidiSetupToTokenSetup(requestDict, config) {
    let setupForMaskGeneration = null;
    const bidiGenerateContentSetupValue = requestDict["bidiGenerateContentSetup"];
    if (typeof bidiGenerateContentSetupValue === "object" && bidiGenerateContentSetupValue !== null && "setup" in bidiGenerateContentSetupValue) {
      const innerSetup = bidiGenerateContentSetupValue.setup;
      if (typeof innerSetup === "object" && innerSetup !== null) {
        requestDict["bidiGenerateContentSetup"] = innerSetup;
        setupForMaskGeneration = innerSetup;
      } else {
        delete requestDict["bidiGenerateContentSetup"];
      }
    } else if (bidiGenerateContentSetupValue !== void 0) {
      delete requestDict["bidiGenerateContentSetup"];
    }
    const preExistingFieldMask = requestDict["fieldMask"];
    if (setupForMaskGeneration) {
      const generatedMaskFromBidi = getFieldMasks(setupForMaskGeneration);
      if (Array.isArray(config === null || config === void 0 ? void 0 : config.lockAdditionalFields) && (config === null || config === void 0 ? void 0 : config.lockAdditionalFields.length) === 0) {
        if (generatedMaskFromBidi) {
          requestDict["fieldMask"] = generatedMaskFromBidi;
        } else {
          delete requestDict["fieldMask"];
        }
      } else if ((config === null || config === void 0 ? void 0 : config.lockAdditionalFields) && config.lockAdditionalFields.length > 0 && preExistingFieldMask !== null && Array.isArray(preExistingFieldMask) && preExistingFieldMask.length > 0) {
        const generationConfigFields = [
          "temperature",
          "topK",
          "topP",
          "maxOutputTokens",
          "responseModalities",
          "seed",
          "speechConfig"
        ];
        let mappedFieldsFromPreExisting = [];
        if (preExistingFieldMask.length > 0) {
          mappedFieldsFromPreExisting = preExistingFieldMask.map((field) => {
            if (generationConfigFields.includes(field)) {
              return `generationConfig.${field}`;
            }
            return field;
          });
        }
        const finalMaskParts = [];
        if (generatedMaskFromBidi) {
          finalMaskParts.push(generatedMaskFromBidi);
        }
        if (mappedFieldsFromPreExisting.length > 0) {
          finalMaskParts.push(...mappedFieldsFromPreExisting);
        }
        if (finalMaskParts.length > 0) {
          requestDict["fieldMask"] = finalMaskParts.join(",");
        } else {
          delete requestDict["fieldMask"];
        }
      } else {
        delete requestDict["fieldMask"];
      }
    } else {
      if (preExistingFieldMask !== null && Array.isArray(preExistingFieldMask) && preExistingFieldMask.length > 0) {
        requestDict["fieldMask"] = preExistingFieldMask.join(",");
      } else {
        delete requestDict["fieldMask"];
      }
    }
    return requestDict;
  }
  var Tokens = class extends BaseModule {
    constructor(apiClient) {
      super();
      this.apiClient = apiClient;
    }
    /**
     * Creates an ephemeral auth token resource.
     *
     * @experimental
     *
     * @remarks
     * Ephemeral auth tokens is only supported in the Gemini Developer API.
     * It can be used for the session connection to the Live constrained API.
     * Support in v1alpha only.
     *
     * @param params - The parameters for the create request.
     * @return The created auth token.
     *
     * @example
     * ```ts
     * const ai = new GoogleGenAI({
     *     apiKey: token.name,
     *     httpOptions: { apiVersion: 'v1alpha' }  // Support in v1alpha only.
     * });
     *
     * // Case 1: If LiveEphemeralParameters is unset, unlock LiveConnectConfig
     * // when using the token in Live API sessions. Each session connection can
     * // use a different configuration.
     * const config: CreateAuthTokenConfig = {
     *     uses: 3,
     *     expireTime: '2025-05-01T00:00:00Z',
     * }
     * const token = await ai.tokens.create(config);
     *
     * // Case 2: If LiveEphemeralParameters is set, lock all fields in
     * // LiveConnectConfig when using the token in Live API sessions. For
     * // example, changing `outputAudioTranscription` in the Live API
     * // connection will be ignored by the API.
     * const config: CreateAuthTokenConfig =
     *     uses: 3,
     *     expireTime: '2025-05-01T00:00:00Z',
     *     LiveEphemeralParameters: {
     *        model: 'gemini-2.0-flash-001',
     *        config: {
     *           'responseModalities': ['AUDIO'],
     *           'systemInstruction': 'Always answer in English.',
     *        }
     *     }
     * }
     * const token = await ai.tokens.create(config);
     *
     * // Case 3: If LiveEphemeralParameters is set and lockAdditionalFields is
     * // set, lock LiveConnectConfig with set and additional fields (e.g.
     * // responseModalities, systemInstruction, temperature in this example) when
     * // using the token in Live API sessions.
     * const config: CreateAuthTokenConfig =
     *     uses: 3,
     *     expireTime: '2025-05-01T00:00:00Z',
     *     LiveEphemeralParameters: {
     *        model: 'gemini-2.0-flash-001',
     *        config: {
     *           'responseModalities': ['AUDIO'],
     *           'systemInstruction': 'Always answer in English.',
     *        }
     *     },
     *     lockAdditionalFields: ['temperature'],
     * }
     * const token = await ai.tokens.create(config);
     *
     * // Case 4: If LiveEphemeralParameters is set and lockAdditionalFields is
     * // empty array, lock LiveConnectConfig with set fields (e.g.
     * // responseModalities, systemInstruction in this example) when using the
     * // token in Live API sessions.
     * const config: CreateAuthTokenConfig =
     *     uses: 3,
     *     expireTime: '2025-05-01T00:00:00Z',
     *     LiveEphemeralParameters: {
     *        model: 'gemini-2.0-flash-001',
     *        config: {
     *           'responseModalities': ['AUDIO'],
     *           'systemInstruction': 'Always answer in English.',
     *        }
     *     },
     *     lockAdditionalFields: [],
     * }
     * const token = await ai.tokens.create(config);
     * ```
     */
    async create(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        throw new Error("The client.tokens.create method is only supported by the Gemini Developer API.");
      } else {
        const body = createAuthTokenParametersToMldev(this.apiClient, params);
        path = formatMap("auth_tokens", body["_url"]);
        queryParams = body["_query"];
        delete body["config"];
        delete body["_url"];
        delete body["_query"];
        const transformedBody = convertBidiSetupToTokenSetup(body, params.config);
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(transformedBody),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json();
        });
        return response.then((apiResponse) => {
          const resp = authTokenFromMldev(apiResponse);
          return resp;
        });
      }
    }
  };
  function cancelTuningJobParametersToMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], fromName);
    }
    return toObject;
  }
  function cancelTuningJobParametersToVertex(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], fromName);
    }
    return toObject;
  }
  function createTuningJobConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["validationDataset"]) !== void 0) {
      throw new Error("validationDataset parameter is not supported in Gemini API.");
    }
    const fromTunedModelDisplayName = getValueByPath(fromObject, [
      "tunedModelDisplayName"
    ]);
    if (parentObject !== void 0 && fromTunedModelDisplayName != null) {
      setValueByPath(parentObject, ["displayName"], fromTunedModelDisplayName);
    }
    if (getValueByPath(fromObject, ["description"]) !== void 0) {
      throw new Error("description parameter is not supported in Gemini API.");
    }
    const fromEpochCount = getValueByPath(fromObject, ["epochCount"]);
    if (parentObject !== void 0 && fromEpochCount != null) {
      setValueByPath(parentObject, ["tuningTask", "hyperparameters", "epochCount"], fromEpochCount);
    }
    const fromLearningRateMultiplier = getValueByPath(fromObject, [
      "learningRateMultiplier"
    ]);
    if (fromLearningRateMultiplier != null) {
      setValueByPath(toObject, ["tuningTask", "hyperparameters", "learningRateMultiplier"], fromLearningRateMultiplier);
    }
    if (getValueByPath(fromObject, ["exportLastCheckpointOnly"]) !== void 0) {
      throw new Error("exportLastCheckpointOnly parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["preTunedModelCheckpointId"]) !== void 0) {
      throw new Error("preTunedModelCheckpointId parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["adapterSize"]) !== void 0) {
      throw new Error("adapterSize parameter is not supported in Gemini API.");
    }
    const fromBatchSize = getValueByPath(fromObject, ["batchSize"]);
    if (parentObject !== void 0 && fromBatchSize != null) {
      setValueByPath(parentObject, ["tuningTask", "hyperparameters", "batchSize"], fromBatchSize);
    }
    const fromLearningRate = getValueByPath(fromObject, ["learningRate"]);
    if (parentObject !== void 0 && fromLearningRate != null) {
      setValueByPath(parentObject, ["tuningTask", "hyperparameters", "learningRate"], fromLearningRate);
    }
    if (getValueByPath(fromObject, ["labels"]) !== void 0) {
      throw new Error("labels parameter is not supported in Gemini API.");
    }
    return toObject;
  }
  function createTuningJobConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromValidationDataset = getValueByPath(fromObject, [
      "validationDataset"
    ]);
    if (parentObject !== void 0 && fromValidationDataset != null) {
      setValueByPath(parentObject, ["supervisedTuningSpec"], tuningValidationDatasetToVertex(fromValidationDataset, toObject));
    }
    const fromTunedModelDisplayName = getValueByPath(fromObject, [
      "tunedModelDisplayName"
    ]);
    if (parentObject !== void 0 && fromTunedModelDisplayName != null) {
      setValueByPath(parentObject, ["tunedModelDisplayName"], fromTunedModelDisplayName);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (parentObject !== void 0 && fromDescription != null) {
      setValueByPath(parentObject, ["description"], fromDescription);
    }
    const fromEpochCount = getValueByPath(fromObject, ["epochCount"]);
    if (parentObject !== void 0 && fromEpochCount != null) {
      setValueByPath(parentObject, ["supervisedTuningSpec", "hyperParameters", "epochCount"], fromEpochCount);
    }
    const fromLearningRateMultiplier = getValueByPath(fromObject, [
      "learningRateMultiplier"
    ]);
    if (parentObject !== void 0 && fromLearningRateMultiplier != null) {
      setValueByPath(parentObject, ["supervisedTuningSpec", "hyperParameters", "learningRateMultiplier"], fromLearningRateMultiplier);
    }
    const fromExportLastCheckpointOnly = getValueByPath(fromObject, [
      "exportLastCheckpointOnly"
    ]);
    if (parentObject !== void 0 && fromExportLastCheckpointOnly != null) {
      setValueByPath(parentObject, ["supervisedTuningSpec", "exportLastCheckpointOnly"], fromExportLastCheckpointOnly);
    }
    const fromAdapterSize = getValueByPath(fromObject, ["adapterSize"]);
    if (parentObject !== void 0 && fromAdapterSize != null) {
      setValueByPath(parentObject, ["supervisedTuningSpec", "hyperParameters", "adapterSize"], fromAdapterSize);
    }
    if (getValueByPath(fromObject, ["batchSize"]) !== void 0) {
      throw new Error("batchSize parameter is not supported in Vertex AI.");
    }
    if (getValueByPath(fromObject, ["learningRate"]) !== void 0) {
      throw new Error("learningRate parameter is not supported in Vertex AI.");
    }
    const fromLabels = getValueByPath(fromObject, ["labels"]);
    if (parentObject !== void 0 && fromLabels != null) {
      setValueByPath(parentObject, ["labels"], fromLabels);
    }
    return toObject;
  }
  function createTuningJobParametersPrivateToMldev(fromObject) {
    const toObject = {};
    const fromBaseModel = getValueByPath(fromObject, ["baseModel"]);
    if (fromBaseModel != null) {
      setValueByPath(toObject, ["baseModel"], fromBaseModel);
    }
    const fromPreTunedModel = getValueByPath(fromObject, [
      "preTunedModel"
    ]);
    if (fromPreTunedModel != null) {
      setValueByPath(toObject, ["preTunedModel"], fromPreTunedModel);
    }
    const fromTrainingDataset = getValueByPath(fromObject, [
      "trainingDataset"
    ]);
    if (fromTrainingDataset != null) {
      setValueByPath(toObject, ["tuningTask", "trainingData"], tuningDatasetToMldev(fromTrainingDataset));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      createTuningJobConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function createTuningJobParametersPrivateToVertex(fromObject) {
    const toObject = {};
    const fromBaseModel = getValueByPath(fromObject, ["baseModel"]);
    if (fromBaseModel != null) {
      setValueByPath(toObject, ["baseModel"], fromBaseModel);
    }
    const fromPreTunedModel = getValueByPath(fromObject, [
      "preTunedModel"
    ]);
    if (fromPreTunedModel != null) {
      setValueByPath(toObject, ["preTunedModel"], fromPreTunedModel);
    }
    const fromTrainingDataset = getValueByPath(fromObject, [
      "trainingDataset"
    ]);
    if (fromTrainingDataset != null) {
      setValueByPath(toObject, ["supervisedTuningSpec", "trainingDatasetUri"], tuningDatasetToVertex(fromTrainingDataset, toObject));
    }
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      createTuningJobConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function getTuningJobParametersToMldev(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], fromName);
    }
    return toObject;
  }
  function getTuningJobParametersToVertex(fromObject) {
    const toObject = {};
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["_url", "name"], fromName);
    }
    return toObject;
  }
  function listTuningJobsConfigToMldev(fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    const fromFilter = getValueByPath(fromObject, ["filter"]);
    if (parentObject !== void 0 && fromFilter != null) {
      setValueByPath(parentObject, ["_query", "filter"], fromFilter);
    }
    return toObject;
  }
  function listTuningJobsConfigToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromPageSize = getValueByPath(fromObject, ["pageSize"]);
    if (parentObject !== void 0 && fromPageSize != null) {
      setValueByPath(parentObject, ["_query", "pageSize"], fromPageSize);
    }
    const fromPageToken = getValueByPath(fromObject, ["pageToken"]);
    if (parentObject !== void 0 && fromPageToken != null) {
      setValueByPath(parentObject, ["_query", "pageToken"], fromPageToken);
    }
    const fromFilter = getValueByPath(fromObject, ["filter"]);
    if (parentObject !== void 0 && fromFilter != null) {
      setValueByPath(parentObject, ["_query", "filter"], fromFilter);
    }
    return toObject;
  }
  function listTuningJobsParametersToMldev(fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listTuningJobsConfigToMldev(fromConfig, toObject);
    }
    return toObject;
  }
  function listTuningJobsParametersToVertex(fromObject) {
    const toObject = {};
    const fromConfig = getValueByPath(fromObject, ["config"]);
    if (fromConfig != null) {
      listTuningJobsConfigToVertex(fromConfig, toObject);
    }
    return toObject;
  }
  function listTuningJobsResponseFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromTuningJobs = getValueByPath(fromObject, ["tunedModels"]);
    if (fromTuningJobs != null) {
      let transformedList = fromTuningJobs;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return tuningJobFromMldev(item);
        });
      }
      setValueByPath(toObject, ["tuningJobs"], transformedList);
    }
    return toObject;
  }
  function listTuningJobsResponseFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromNextPageToken = getValueByPath(fromObject, [
      "nextPageToken"
    ]);
    if (fromNextPageToken != null) {
      setValueByPath(toObject, ["nextPageToken"], fromNextPageToken);
    }
    const fromTuningJobs = getValueByPath(fromObject, ["tuningJobs"]);
    if (fromTuningJobs != null) {
      let transformedList = fromTuningJobs;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return tuningJobFromVertex(item);
        });
      }
      setValueByPath(toObject, ["tuningJobs"], transformedList);
    }
    return toObject;
  }
  function tunedModelCheckpointFromVertex(fromObject) {
    const toObject = {};
    const fromCheckpointId = getValueByPath(fromObject, ["checkpointId"]);
    if (fromCheckpointId != null) {
      setValueByPath(toObject, ["checkpointId"], fromCheckpointId);
    }
    const fromEpoch = getValueByPath(fromObject, ["epoch"]);
    if (fromEpoch != null) {
      setValueByPath(toObject, ["epoch"], fromEpoch);
    }
    const fromStep = getValueByPath(fromObject, ["step"]);
    if (fromStep != null) {
      setValueByPath(toObject, ["step"], fromStep);
    }
    const fromEndpoint = getValueByPath(fromObject, ["endpoint"]);
    if (fromEndpoint != null) {
      setValueByPath(toObject, ["endpoint"], fromEndpoint);
    }
    return toObject;
  }
  function tunedModelFromMldev(fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["name"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], fromModel);
    }
    const fromEndpoint = getValueByPath(fromObject, ["name"]);
    if (fromEndpoint != null) {
      setValueByPath(toObject, ["endpoint"], fromEndpoint);
    }
    return toObject;
  }
  function tunedModelFromVertex(fromObject) {
    const toObject = {};
    const fromModel = getValueByPath(fromObject, ["model"]);
    if (fromModel != null) {
      setValueByPath(toObject, ["model"], fromModel);
    }
    const fromEndpoint = getValueByPath(fromObject, ["endpoint"]);
    if (fromEndpoint != null) {
      setValueByPath(toObject, ["endpoint"], fromEndpoint);
    }
    const fromCheckpoints = getValueByPath(fromObject, ["checkpoints"]);
    if (fromCheckpoints != null) {
      let transformedList = fromCheckpoints;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return tunedModelCheckpointFromVertex(item);
        });
      }
      setValueByPath(toObject, ["checkpoints"], transformedList);
    }
    return toObject;
  }
  function tuningDatasetToMldev(fromObject) {
    const toObject = {};
    if (getValueByPath(fromObject, ["gcsUri"]) !== void 0) {
      throw new Error("gcsUri parameter is not supported in Gemini API.");
    }
    if (getValueByPath(fromObject, ["vertexDatasetResource"]) !== void 0) {
      throw new Error("vertexDatasetResource parameter is not supported in Gemini API.");
    }
    const fromExamples = getValueByPath(fromObject, ["examples"]);
    if (fromExamples != null) {
      let transformedList = fromExamples;
      if (Array.isArray(transformedList)) {
        transformedList = transformedList.map((item) => {
          return tuningExampleToMldev(item);
        });
      }
      setValueByPath(toObject, ["examples", "examples"], transformedList);
    }
    return toObject;
  }
  function tuningDatasetToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromGcsUri = getValueByPath(fromObject, ["gcsUri"]);
    if (parentObject !== void 0 && fromGcsUri != null) {
      setValueByPath(parentObject, ["supervisedTuningSpec", "trainingDatasetUri"], fromGcsUri);
    }
    const fromVertexDatasetResource = getValueByPath(fromObject, [
      "vertexDatasetResource"
    ]);
    if (parentObject !== void 0 && fromVertexDatasetResource != null) {
      setValueByPath(parentObject, ["supervisedTuningSpec", "trainingDatasetUri"], fromVertexDatasetResource);
    }
    if (getValueByPath(fromObject, ["examples"]) !== void 0) {
      throw new Error("examples parameter is not supported in Vertex AI.");
    }
    return toObject;
  }
  function tuningExampleToMldev(fromObject) {
    const toObject = {};
    const fromTextInput = getValueByPath(fromObject, ["textInput"]);
    if (fromTextInput != null) {
      setValueByPath(toObject, ["textInput"], fromTextInput);
    }
    const fromOutput = getValueByPath(fromObject, ["output"]);
    if (fromOutput != null) {
      setValueByPath(toObject, ["output"], fromOutput);
    }
    return toObject;
  }
  function tuningJobFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromState = getValueByPath(fromObject, ["state"]);
    if (fromState != null) {
      setValueByPath(toObject, ["state"], tTuningJobStatus(fromState));
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromStartTime = getValueByPath(fromObject, [
      "tuningTask",
      "startTime"
    ]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, [
      "tuningTask",
      "completeTime"
    ]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromBaseModel = getValueByPath(fromObject, ["baseModel"]);
    if (fromBaseModel != null) {
      setValueByPath(toObject, ["baseModel"], fromBaseModel);
    }
    const fromTunedModel = getValueByPath(fromObject, ["_self"]);
    if (fromTunedModel != null) {
      setValueByPath(toObject, ["tunedModel"], tunedModelFromMldev(fromTunedModel));
    }
    const fromCustomBaseModel = getValueByPath(fromObject, [
      "customBaseModel"
    ]);
    if (fromCustomBaseModel != null) {
      setValueByPath(toObject, ["customBaseModel"], fromCustomBaseModel);
    }
    const fromExperiment = getValueByPath(fromObject, ["experiment"]);
    if (fromExperiment != null) {
      setValueByPath(toObject, ["experiment"], fromExperiment);
    }
    const fromLabels = getValueByPath(fromObject, ["labels"]);
    if (fromLabels != null) {
      setValueByPath(toObject, ["labels"], fromLabels);
    }
    const fromOutputUri = getValueByPath(fromObject, ["outputUri"]);
    if (fromOutputUri != null) {
      setValueByPath(toObject, ["outputUri"], fromOutputUri);
    }
    const fromPipelineJob = getValueByPath(fromObject, ["pipelineJob"]);
    if (fromPipelineJob != null) {
      setValueByPath(toObject, ["pipelineJob"], fromPipelineJob);
    }
    const fromServiceAccount = getValueByPath(fromObject, [
      "serviceAccount"
    ]);
    if (fromServiceAccount != null) {
      setValueByPath(toObject, ["serviceAccount"], fromServiceAccount);
    }
    const fromTunedModelDisplayName = getValueByPath(fromObject, [
      "tunedModelDisplayName"
    ]);
    if (fromTunedModelDisplayName != null) {
      setValueByPath(toObject, ["tunedModelDisplayName"], fromTunedModelDisplayName);
    }
    return toObject;
  }
  function tuningJobFromVertex(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromState = getValueByPath(fromObject, ["state"]);
    if (fromState != null) {
      setValueByPath(toObject, ["state"], tTuningJobStatus(fromState));
    }
    const fromCreateTime = getValueByPath(fromObject, ["createTime"]);
    if (fromCreateTime != null) {
      setValueByPath(toObject, ["createTime"], fromCreateTime);
    }
    const fromStartTime = getValueByPath(fromObject, ["startTime"]);
    if (fromStartTime != null) {
      setValueByPath(toObject, ["startTime"], fromStartTime);
    }
    const fromEndTime = getValueByPath(fromObject, ["endTime"]);
    if (fromEndTime != null) {
      setValueByPath(toObject, ["endTime"], fromEndTime);
    }
    const fromUpdateTime = getValueByPath(fromObject, ["updateTime"]);
    if (fromUpdateTime != null) {
      setValueByPath(toObject, ["updateTime"], fromUpdateTime);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], fromError);
    }
    const fromDescription = getValueByPath(fromObject, ["description"]);
    if (fromDescription != null) {
      setValueByPath(toObject, ["description"], fromDescription);
    }
    const fromBaseModel = getValueByPath(fromObject, ["baseModel"]);
    if (fromBaseModel != null) {
      setValueByPath(toObject, ["baseModel"], fromBaseModel);
    }
    const fromTunedModel = getValueByPath(fromObject, ["tunedModel"]);
    if (fromTunedModel != null) {
      setValueByPath(toObject, ["tunedModel"], tunedModelFromVertex(fromTunedModel));
    }
    const fromPreTunedModel = getValueByPath(fromObject, [
      "preTunedModel"
    ]);
    if (fromPreTunedModel != null) {
      setValueByPath(toObject, ["preTunedModel"], fromPreTunedModel);
    }
    const fromSupervisedTuningSpec = getValueByPath(fromObject, [
      "supervisedTuningSpec"
    ]);
    if (fromSupervisedTuningSpec != null) {
      setValueByPath(toObject, ["supervisedTuningSpec"], fromSupervisedTuningSpec);
    }
    const fromTuningDataStats = getValueByPath(fromObject, [
      "tuningDataStats"
    ]);
    if (fromTuningDataStats != null) {
      setValueByPath(toObject, ["tuningDataStats"], fromTuningDataStats);
    }
    const fromEncryptionSpec = getValueByPath(fromObject, [
      "encryptionSpec"
    ]);
    if (fromEncryptionSpec != null) {
      setValueByPath(toObject, ["encryptionSpec"], fromEncryptionSpec);
    }
    const fromPartnerModelTuningSpec = getValueByPath(fromObject, [
      "partnerModelTuningSpec"
    ]);
    if (fromPartnerModelTuningSpec != null) {
      setValueByPath(toObject, ["partnerModelTuningSpec"], fromPartnerModelTuningSpec);
    }
    const fromCustomBaseModel = getValueByPath(fromObject, [
      "customBaseModel"
    ]);
    if (fromCustomBaseModel != null) {
      setValueByPath(toObject, ["customBaseModel"], fromCustomBaseModel);
    }
    const fromExperiment = getValueByPath(fromObject, ["experiment"]);
    if (fromExperiment != null) {
      setValueByPath(toObject, ["experiment"], fromExperiment);
    }
    const fromLabels = getValueByPath(fromObject, ["labels"]);
    if (fromLabels != null) {
      setValueByPath(toObject, ["labels"], fromLabels);
    }
    const fromOutputUri = getValueByPath(fromObject, ["outputUri"]);
    if (fromOutputUri != null) {
      setValueByPath(toObject, ["outputUri"], fromOutputUri);
    }
    const fromPipelineJob = getValueByPath(fromObject, ["pipelineJob"]);
    if (fromPipelineJob != null) {
      setValueByPath(toObject, ["pipelineJob"], fromPipelineJob);
    }
    const fromServiceAccount = getValueByPath(fromObject, [
      "serviceAccount"
    ]);
    if (fromServiceAccount != null) {
      setValueByPath(toObject, ["serviceAccount"], fromServiceAccount);
    }
    const fromTunedModelDisplayName = getValueByPath(fromObject, [
      "tunedModelDisplayName"
    ]);
    if (fromTunedModelDisplayName != null) {
      setValueByPath(toObject, ["tunedModelDisplayName"], fromTunedModelDisplayName);
    }
    return toObject;
  }
  function tuningOperationFromMldev(fromObject) {
    const toObject = {};
    const fromSdkHttpResponse = getValueByPath(fromObject, [
      "sdkHttpResponse"
    ]);
    if (fromSdkHttpResponse != null) {
      setValueByPath(toObject, ["sdkHttpResponse"], fromSdkHttpResponse);
    }
    const fromName = getValueByPath(fromObject, ["name"]);
    if (fromName != null) {
      setValueByPath(toObject, ["name"], fromName);
    }
    const fromMetadata = getValueByPath(fromObject, ["metadata"]);
    if (fromMetadata != null) {
      setValueByPath(toObject, ["metadata"], fromMetadata);
    }
    const fromDone = getValueByPath(fromObject, ["done"]);
    if (fromDone != null) {
      setValueByPath(toObject, ["done"], fromDone);
    }
    const fromError = getValueByPath(fromObject, ["error"]);
    if (fromError != null) {
      setValueByPath(toObject, ["error"], fromError);
    }
    return toObject;
  }
  function tuningValidationDatasetToVertex(fromObject, parentObject) {
    const toObject = {};
    const fromGcsUri = getValueByPath(fromObject, ["gcsUri"]);
    if (fromGcsUri != null) {
      setValueByPath(toObject, ["validationDatasetUri"], fromGcsUri);
    }
    const fromVertexDatasetResource = getValueByPath(fromObject, [
      "vertexDatasetResource"
    ]);
    if (parentObject !== void 0 && fromVertexDatasetResource != null) {
      setValueByPath(parentObject, ["supervisedTuningSpec", "trainingDatasetUri"], fromVertexDatasetResource);
    }
    return toObject;
  }
  var Tunings = class extends BaseModule {
    constructor(apiClient) {
      super();
      this.apiClient = apiClient;
      this.get = async (params) => {
        return await this.getInternal(params);
      };
      this.list = async (params = {}) => {
        return new Pager(PagedItem.PAGED_ITEM_TUNING_JOBS, (x) => this.listInternal(x), await this.listInternal(params), params);
      };
      this.tune = async (params) => {
        var _a;
        if (this.apiClient.isVertexAI()) {
          if (params.baseModel.startsWith("projects/")) {
            const preTunedModel = {
              tunedModelName: params.baseModel
            };
            if ((_a = params.config) === null || _a === void 0 ? void 0 : _a.preTunedModelCheckpointId) {
              preTunedModel.checkpointId = params.config.preTunedModelCheckpointId;
            }
            const paramsPrivate = Object.assign(Object.assign({}, params), { preTunedModel });
            paramsPrivate.baseModel = void 0;
            return await this.tuneInternal(paramsPrivate);
          } else {
            const paramsPrivate = Object.assign({}, params);
            return await this.tuneInternal(paramsPrivate);
          }
        } else {
          const paramsPrivate = Object.assign({}, params);
          const operation = await this.tuneMldevInternal(paramsPrivate);
          let tunedModelName = "";
          if (operation["metadata"] !== void 0 && operation["metadata"]["tunedModel"] !== void 0) {
            tunedModelName = operation["metadata"]["tunedModel"];
          } else if (operation["name"] !== void 0 && operation["name"].includes("/operations/")) {
            tunedModelName = operation["name"].split("/operations/")[0];
          }
          const tuningJob = {
            name: tunedModelName,
            state: JobState.JOB_STATE_QUEUED
          };
          return tuningJob;
        }
      };
    }
    async getInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = getTuningJobParametersToVertex(params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = tuningJobFromVertex(apiResponse);
          return resp;
        });
      } else {
        const body = getTuningJobParametersToMldev(params);
        path = formatMap("{name}", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = tuningJobFromMldev(apiResponse);
          return resp;
        });
      }
    }
    async listInternal(params) {
      var _a, _b, _c, _d;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = listTuningJobsParametersToVertex(params);
        path = formatMap("tuningJobs", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listTuningJobsResponseFromVertex(apiResponse);
          const typedResp = new ListTuningJobsResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      } else {
        const body = listTuningJobsParametersToMldev(params);
        path = formatMap("tunedModels", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "GET",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = listTuningJobsResponseFromMldev(apiResponse);
          const typedResp = new ListTuningJobsResponse();
          Object.assign(typedResp, resp);
          return typedResp;
        });
      }
    }
    /**
     * Cancels a tuning job.
     *
     * @param params - The parameters for the cancel request.
     * @return The empty response returned by the API.
     *
     * @example
     * ```ts
     * await ai.tunings.cancel({name: '...'}); // The server-generated resource name.
     * ```
     */
    async cancel(params) {
      var _a, _b, _c, _d;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = cancelTuningJobParametersToVertex(params);
        path = formatMap("{name}:cancel", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        await this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        });
      } else {
        const body = cancelTuningJobParametersToMldev(params);
        path = formatMap("{name}:cancel", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        await this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_c = params.config) === null || _c === void 0 ? void 0 : _c.httpOptions,
          abortSignal: (_d = params.config) === null || _d === void 0 ? void 0 : _d.abortSignal
        });
      }
    }
    async tuneInternal(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        const body = createTuningJobParametersPrivateToVertex(params);
        path = formatMap("tuningJobs", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = tuningJobFromVertex(apiResponse);
          return resp;
        });
      } else {
        throw new Error("This method is only supported by the Vertex AI.");
      }
    }
    async tuneMldevInternal(params) {
      var _a, _b;
      let response;
      let path = "";
      let queryParams = {};
      if (this.apiClient.isVertexAI()) {
        throw new Error("This method is only supported by the Gemini Developer API.");
      } else {
        const body = createTuningJobParametersPrivateToMldev(params);
        path = formatMap("tunedModels", body["_url"]);
        queryParams = body["_query"];
        delete body["_url"];
        delete body["_query"];
        response = this.apiClient.request({
          path,
          queryParams,
          body: JSON.stringify(body),
          httpMethod: "POST",
          httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions,
          abortSignal: (_b = params.config) === null || _b === void 0 ? void 0 : _b.abortSignal
        }).then((httpResponse) => {
          return httpResponse.json().then((jsonResponse) => {
            const response2 = jsonResponse;
            response2.sdkHttpResponse = {
              headers: httpResponse.headers
            };
            return response2;
          });
        });
        return response.then((apiResponse) => {
          const resp = tuningOperationFromMldev(apiResponse);
          return resp;
        });
      }
    }
  };
  var BrowserDownloader = class {
    async download(_params, _apiClient) {
      throw new Error("Download to file is not supported in the browser, please use a browser compliant download like an <a> tag.");
    }
  };
  var MAX_CHUNK_SIZE = 1024 * 1024 * 8;
  var MAX_RETRY_COUNT = 3;
  var INITIAL_RETRY_DELAY_MS = 1e3;
  var DELAY_MULTIPLIER = 2;
  var X_GOOG_UPLOAD_STATUS_HEADER_FIELD = "x-goog-upload-status";
  async function uploadBlob(file, uploadUrl, apiClient) {
    var _a, _b, _c;
    let fileSize = 0;
    let offset = 0;
    let response = new HttpResponse(new Response());
    let uploadCommand = "upload";
    fileSize = file.size;
    while (offset < fileSize) {
      const chunkSize = Math.min(MAX_CHUNK_SIZE, fileSize - offset);
      const chunk = file.slice(offset, offset + chunkSize);
      if (offset + chunkSize >= fileSize) {
        uploadCommand += ", finalize";
      }
      let retryCount = 0;
      let currentDelayMs = INITIAL_RETRY_DELAY_MS;
      while (retryCount < MAX_RETRY_COUNT) {
        response = await apiClient.request({
          path: "",
          body: chunk,
          httpMethod: "POST",
          httpOptions: {
            apiVersion: "",
            baseUrl: uploadUrl,
            headers: {
              "X-Goog-Upload-Command": uploadCommand,
              "X-Goog-Upload-Offset": String(offset),
              "Content-Length": String(chunkSize)
            }
          }
        });
        if ((_a = response === null || response === void 0 ? void 0 : response.headers) === null || _a === void 0 ? void 0 : _a[X_GOOG_UPLOAD_STATUS_HEADER_FIELD]) {
          break;
        }
        retryCount++;
        await sleep(currentDelayMs);
        currentDelayMs = currentDelayMs * DELAY_MULTIPLIER;
      }
      offset += chunkSize;
      if (((_b = response === null || response === void 0 ? void 0 : response.headers) === null || _b === void 0 ? void 0 : _b[X_GOOG_UPLOAD_STATUS_HEADER_FIELD]) !== "active") {
        break;
      }
      if (fileSize <= offset) {
        throw new Error("All content has been uploaded, but the upload status is not finalized.");
      }
    }
    const responseJson = await (response === null || response === void 0 ? void 0 : response.json());
    if (((_c = response === null || response === void 0 ? void 0 : response.headers) === null || _c === void 0 ? void 0 : _c[X_GOOG_UPLOAD_STATUS_HEADER_FIELD]) !== "final") {
      throw new Error("Failed to upload file: Upload status is not finalized.");
    }
    return responseJson["file"];
  }
  async function getBlobStat(file) {
    const fileStat = { size: file.size, type: file.type };
    return fileStat;
  }
  function sleep(ms) {
    return new Promise((resolvePromise) => setTimeout(resolvePromise, ms));
  }
  var BrowserUploader = class {
    async upload(file, uploadUrl, apiClient) {
      if (typeof file === "string") {
        throw new Error("File path is not supported in browser uploader.");
      }
      return await uploadBlob(file, uploadUrl, apiClient);
    }
    async stat(file) {
      if (typeof file === "string") {
        throw new Error("File path is not supported in browser uploader.");
      } else {
        return await getBlobStat(file);
      }
    }
  };
  var BrowserWebSocketFactory = class {
    create(url, headers, callbacks) {
      return new BrowserWebSocket(url, headers, callbacks);
    }
  };
  var BrowserWebSocket = class {
    constructor(url, headers, callbacks) {
      this.url = url;
      this.headers = headers;
      this.callbacks = callbacks;
    }
    connect() {
      this.ws = new WebSocket(this.url);
      this.ws.onopen = this.callbacks.onopen;
      this.ws.onerror = this.callbacks.onerror;
      this.ws.onclose = this.callbacks.onclose;
      this.ws.onmessage = this.callbacks.onmessage;
    }
    send(message) {
      if (this.ws === void 0) {
        throw new Error("WebSocket is not connected");
      }
      this.ws.send(message);
    }
    close() {
      if (this.ws === void 0) {
        throw new Error("WebSocket is not connected");
      }
      this.ws.close();
    }
  };
  var GOOGLE_API_KEY_HEADER = "x-goog-api-key";
  var WebAuth = class {
    constructor(apiKey) {
      this.apiKey = apiKey;
    }
    async addAuthHeaders(headers) {
      if (headers.get(GOOGLE_API_KEY_HEADER) !== null) {
        return;
      }
      if (this.apiKey.startsWith("auth_tokens/")) {
        throw new Error("Ephemeral tokens are only supported by the live API.");
      }
      if (!this.apiKey) {
        throw new Error("API key is missing. Please provide a valid API key.");
      }
      headers.append(GOOGLE_API_KEY_HEADER, this.apiKey);
    }
  };
  var LANGUAGE_LABEL_PREFIX = "gl-node/";
  var GoogleGenAI = class {
    constructor(options) {
      var _a;
      if (options.apiKey == null) {
        throw new Error("An API Key must be set when running in a browser");
      }
      if (options.project || options.location) {
        throw new Error("Vertex AI project based authentication is not supported on browser runtimes. Please do not provide a project or location.");
      }
      this.vertexai = (_a = options.vertexai) !== null && _a !== void 0 ? _a : false;
      this.apiKey = options.apiKey;
      const baseUrl = getBaseUrl(
        options.httpOptions,
        options.vertexai,
        /*vertexBaseUrlFromEnv*/
        void 0,
        /*geminiBaseUrlFromEnv*/
        void 0
      );
      if (baseUrl) {
        if (options.httpOptions) {
          options.httpOptions.baseUrl = baseUrl;
        } else {
          options.httpOptions = { baseUrl };
        }
      }
      this.apiVersion = options.apiVersion;
      const auth = new WebAuth(this.apiKey);
      this.apiClient = new ApiClient({
        auth,
        apiVersion: this.apiVersion,
        apiKey: this.apiKey,
        vertexai: this.vertexai,
        httpOptions: options.httpOptions,
        userAgentExtra: LANGUAGE_LABEL_PREFIX + "web",
        uploader: new BrowserUploader(),
        downloader: new BrowserDownloader()
      });
      this.models = new Models(this.apiClient);
      this.live = new Live(this.apiClient, auth, new BrowserWebSocketFactory());
      this.batches = new Batches(this.apiClient);
      this.chats = new Chats(this.models, this.apiClient);
      this.caches = new Caches(this.apiClient);
      this.files = new Files(this.apiClient);
      this.operations = new Operations(this.apiClient);
      this.authTokens = new Tokens(this.apiClient);
      this.tunings = new Tunings(this.apiClient);
    }
  };

  // components/ProductForm.tsx
  var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
  var getCombinations = (variants) => {
    if (variants.length === 0 || variants.some((v) => v.options.length === 0)) return [];
    const combinations = [];
    const recurse = (index, currentCombination) => {
      if (index === variants.length) {
        combinations.push(currentCombination);
        return;
      }
      const variant = variants[index];
      for (const option of variant.options) {
        recurse(index + 1, { ...currentCombination, [variant.name]: option });
      }
    };
    recurse(0, {});
    return combinations;
  };
  var FieldWrapper = ({ label, children }) => /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: label }),
    children
  ] });
  var CategorySpecificFields = ({ product, categories, handleChange }) => {
    const selectedCategory = (0, import_react38.useMemo)(() => categories.find((c) => c.id === product.categoryId), [product.categoryId, categories]);
    const parentCategory = (0, import_react38.useMemo)(() => {
      if (!selectedCategory) return null;
      return selectedCategory.parentId ? categories.find((c) => c.id === selectedCategory.parentId) : selectedCategory;
    }, [selectedCategory, categories]);
    const parentId = parentCategory?.id;
    if (!parentId) return null;
    let fields = null;
    switch (parentId) {
      case "cat-vetements":
        fields = /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(import_jsx_runtime51.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Mati\xE8re (coton, polyester...)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "material", value: product.material || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Genre", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("select", { name: "gender", value: product.gender || "Unisexe", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600", children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("option", { value: "Unisexe", children: "Unisexe" }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("option", { value: "Homme", children: "Homme" }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("option", { value: "Femme", children: "Femme" }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("option", { value: "Enfant", children: "Enfant" })
          ] }) })
        ] });
        break;
      case "cat-electronique":
      case "cat-electronique-grand-public":
        fields = /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(import_jsx_runtime51.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Marque", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "brand", value: product.brand || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Mod\xE8le / R\xE9f\xE9rence", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "modelNumber", value: product.modelNumber || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Syst\xE8me d\u2019exploitation", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "operatingSystem", value: product.operatingSystem || "", placeholder: "Android, iOS, Windows...", className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Garantie (dur\xE9e, conditions)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "warranty", value: product.warranty || "", placeholder: "Ex: 1 an", className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Accessoires inclus", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "accessories", value: product.accessories || "", placeholder: "Chargeur, \xE9couteurs...", className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) })
        ] });
        break;
      case "cat-textile":
        if (product.categoryId === "sub-autres-textiles") {
          fields = /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(import_jsx_runtime51.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Poids / Volume (ex: 1kg, 500ml)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "weight", value: product.weight || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Date de p\xE9remption", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "date", name: "expirationDate", value: product.expirationDate || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Ingr\xE9dients (s\xE9par\xE9s par des virgules)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "ingredients", value: product.ingredients || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Allerg\xE8nes (s\xE9par\xE9s par des virgules)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "allergens", value: product.allergens || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Mode de conservation", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "storageInstructions", placeholder: "Frais, congel\xE9, ambiant", value: product.storageInstructions || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Origine (pays/r\xE9gion)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "origin", value: product.origin || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) })
          ] });
        }
        break;
      case "cat-mobilier":
      case "cat-jardin":
        fields = /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(import_jsx_runtime51.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Dimensions (LxlxH cm)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "dimensions", value: product.dimensions || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Poids (ex: 15kg)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "weight", value: product.weight || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Mati\xE8re (bois, m\xE9tal...)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "material", value: product.material || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Couleur principale", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "color", value: product.color || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Instructions de montage", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "assemblyInstructions", placeholder: "Oui, manuel PDF inclus", value: product.assemblyInstructions || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) })
        ] });
        break;
      case "cat-beaute":
        fields = /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(import_jsx_runtime51.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Marque", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "brand", value: product.brand || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Type de produit", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "productType", placeholder: "Maquillage, soin, parfum...", value: product.productType || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Contenance (ml, g...)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "volume", value: product.volume || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Ingr\xE9dients (s\xE9par\xE9s par des virgules)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "ingredients", value: product.ingredients || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Convient pour (type de peau)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "skinType", placeholder: "Peau grasse, s\xE8che, mixte...", value: product.skinType || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Date d'expiration", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "date", name: "expirationDate", value: product.expirationDate || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) })
        ] });
        break;
    }
    if (!fields) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "pt-6 border-t dark:border-gray-700 col-span-1 md:col-span-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("h2", { className: "text-xl font-semibold mb-4 dark:text-white", children: "Caract\xE9ristiques Sp\xE9cifiques \xE0 la Cat\xE9gorie" }),
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: fields })
    ] });
  };
  var ProductForm = ({ onSave, onCancel, productToEdit, categories, onAddCategory, siteSettings }) => {
    const { user } = useAuth();
    const { t } = useLanguage();
    const [product, setProduct] = (0, import_react38.useState)({
      name: "",
      price: 0,
      promotionPrice: void 0,
      stock: 0,
      categoryId: "",
      description: "",
      imageUrls: [],
      status: "draft",
      sku: "",
      type: "product"
    });
    const [imagePreviews, setImagePreviews] = (0, import_react38.useState)([]);
    const [imageUrlInput, setImageUrlInput] = (0, import_react38.useState)("");
    const [keywords, setKeywords] = (0, import_react38.useState)("");
    const [isGenerating, setIsGenerating] = (0, import_react38.useState)(false);
    const ai = (0, import_react38.useMemo)(() => new GoogleGenAI({ apiKey: "undefined" }), []);
    const categoryTree = (0, import_react38.useMemo)(() => {
      const mainCategories = categories.filter((c) => !c.parentId);
      return mainCategories.map((mainCat) => ({
        ...mainCat,
        subCategories: categories.filter((c) => c.parentId === mainCat.id)
      }));
    }, [categories]);
    const [variants, setVariants] = (0, import_react38.useState)([]);
    const [variantDetails, setVariantDetails] = (0, import_react38.useState)([]);
    const variantCombinations = (0, import_react38.useMemo)(() => getCombinations(variants), [variants]);
    const hasVariants = variants.length > 0 && variants.every((v) => v.name && v.options.length > 0);
    (0, import_react38.useEffect)(() => {
      const defaultProductState = {
        name: "",
        price: 0,
        promotionPrice: void 0,
        stock: 0,
        categoryId: "",
        description: "",
        imageUrls: [],
        status: "draft",
        sku: "",
        type: "product"
      };
      if (productToEdit) {
        const initialState = {
          ...defaultProductState,
          ...productToEdit,
          productionDate: productToEdit.productionDate ? productToEdit.productionDate.split("T")[0] : "",
          expirationDate: productToEdit.expirationDate ? productToEdit.expirationDate.split("T")[0] : ""
        };
        if (productToEdit.type === "service" && !productToEdit.id) {
          const serviceCategory = categories.find((c) => c.parentId === "cat-services");
          if (serviceCategory) {
            initialState.categoryId = serviceCategory.id;
          }
        }
        setProduct(initialState);
        setImagePreviews(productToEdit.imageUrls || []);
        setVariants(productToEdit.variants || []);
        setVariantDetails(productToEdit.variantDetails || []);
      } else {
        const defaultState = { ...defaultProductState };
        if (categoryTree.length > 0 && categoryTree[0].subCategories.length > 0) {
          defaultState.categoryId = categoryTree[0].subCategories[0].id;
        }
        setProduct(defaultState);
        setImagePreviews([]);
        setVariants([]);
        setVariantDetails([]);
      }
    }, [productToEdit, categoryTree, categories]);
    (0, import_react38.useEffect)(() => {
      if (hasVariants && product.type !== "service") {
        const totalStock = variantDetails.reduce((sum, detail) => sum + detail.stock, 0);
        setProduct((prev) => ({ ...prev, stock: totalStock }));
      }
    }, [variantDetails, hasVariants, product.type]);
    const handleChange = (e) => {
      const { name, value } = e.target;
      setProduct((prev) => ({ ...prev, [name]: value }));
    };
    const handlePriceChange = (e) => {
      const { name, value } = e.target;
      const numberValue = value === "" ? void 0 : parseFloat(value);
      setProduct((prev) => ({ ...prev, [name]: numberValue }));
    };
    const handleImageChange = (e) => {
      if (e.target.files) {
        const files = Array.from(e.target.files);
        if (files.length + imagePreviews.length > 5) {
          alert("Vous ne pouvez t\xE9l\xE9charger que 5 images au maximum.");
          return;
        }
        files.forEach((file) => {
          const reader = new FileReader();
          reader.onloadend = () => {
            const result = reader.result;
            setImagePreviews((prev) => [...prev, result]);
            setProduct((prev) => ({ ...prev, imageUrls: [...prev.imageUrls || [], result] }));
          };
          reader.readAsDataURL(file);
        });
      }
    };
    const handleImageUrlAdd = () => {
      if (!imageUrlInput.trim()) return;
      try {
        new URL(imageUrlInput);
      } catch (_) {
        alert("Veuillez entrer une URL valide.");
        return;
      }
      if (imagePreviews.length >= 5) {
        alert("Vous ne pouvez avoir que 5 images au maximum.");
        return;
      }
      setImagePreviews((prev) => [...prev, imageUrlInput]);
      setProduct((prev) => ({ ...prev, imageUrls: [...prev.imageUrls || [], imageUrlInput] }));
      setImageUrlInput("");
    };
    const removeImage = (index) => {
      setImagePreviews((prev) => prev.filter((_, i) => i !== index));
      setProduct((prev) => ({ ...prev, imageUrls: prev.imageUrls?.filter((_, i) => i !== index) }));
    };
    const handleAddVariantType = () => {
      if (variants.length < 3) {
        setVariants((prev) => [...prev, { name: "", options: [] }]);
      }
    };
    const handleRemoveVariantType = (index) => {
      setVariants((prev) => prev.filter((_, i) => i !== index));
    };
    const handleVariantChange = (index, field, value) => {
      setVariants((prev) => prev.map((variant, i) => {
        if (i === index) {
          if (field === "name") return { ...variant, name: value };
          if (field === "options") return { ...variant, options: value.split(",").map((opt) => opt.trim()).filter(Boolean) };
        }
        return variant;
      }));
    };
    const handleVariantDetailChange = (combination, field, value) => {
      const numValue = parseFloat(value);
      setVariantDetails((prev) => {
        const existingDetailIndex = prev.findIndex((d) => JSON.stringify(d.options) === JSON.stringify(combination));
        if (existingDetailIndex > -1) {
          const newDetails = [...prev];
          newDetails[existingDetailIndex] = { ...newDetails[existingDetailIndex], [field]: isNaN(numValue) ? field === "price" ? void 0 : 0 : numValue };
          return newDetails;
        } else {
          const newDetail = { options: combination, stock: field === "stock" ? isNaN(numValue) ? 0 : numValue : 0, price: field === "price" ? isNaN(numValue) ? void 0 : numValue : void 0 };
          return [...prev, newDetail];
        }
      });
    };
    const getVariantDetailValue = (combination, field) => {
      const detail = variantDetails.find((d) => JSON.stringify(d.options) === JSON.stringify(combination));
      return detail?.[field] ?? "";
    };
    const handleGenerateDescription = async () => {
      if (!keywords.trim()) {
        alert("Veuillez entrer des mots-cl\xE9s.");
        return;
      }
      setIsGenerating(true);
      try {
        const categoryName = categories.find((c) => c.id === product.categoryId)?.name || "g\xE9n\xE9rale";
        const prompt2 = `En tant qu'expert en marketing pour un site e-commerce camerounais, r\xE9dige une description de produit attrayante et vendeuse en fran\xE7ais. La description doit \xEAtre bien structur\xE9e, mettre en avant les points forts et inciter \xE0 l'achat.

        Informations sur le produit :
        - Nom : ${product.name || "Produit"}
        - Cat\xE9gorie : ${categoryName}
        - Mots-cl\xE9s fournis par le vendeur : ${keywords}

        G\xE9n\xE8re uniquement la description du produit.`;
        const response = await ai.models.generateContent({
          model: "gemini-2.5-flash",
          contents: prompt2
        });
        const description = response.text;
        setProduct((prev) => ({ ...prev, description }));
      } catch (error) {
        console.error("Error generating description:", error);
        alert("Une erreur est survenue lors de la g\xE9n\xE9ration de la description.");
      } finally {
        setIsGenerating(false);
      }
    };
    const handleSubmit = (status) => {
      let finalProductData = { ...product };
      if (finalProductData.type === "service") {
        finalProductData.stock = 1;
        finalProductData.variants = void 0;
        finalProductData.variantDetails = void 0;
        finalProductData.weight = void 0;
        finalProductData.dimensions = void 0;
      } else {
        finalProductData.type = "product";
        finalProductData.duration = void 0;
        finalProductData.locationType = void 0;
        finalProductData.serviceArea = void 0;
        finalProductData.availability = void 0;
      }
      if (!user?.shopName || !finalProductData.name || !finalProductData.price || finalProductData.stock === void 0 || !finalProductData.imageUrls || finalProductData.imageUrls.length === 0 || !finalProductData.categoryId) {
        alert("Veuillez remplir tous les champs obligatoires (Type, Nom, Prix, Cat\xE9gorie et au moins une Image). Le stock est aussi requis pour les produits physiques.");
        return;
      }
      const finalProduct = {
        id: "id" in product ? product.id : (/* @__PURE__ */ new Date()).getTime().toString(),
        vendor: user.shopName,
        reviews: "reviews" in product ? product.reviews : [],
        ...finalProductData,
        name: finalProductData.name,
        price: finalProductData.price,
        stock: finalProductData.stock,
        categoryId: finalProductData.categoryId,
        description: finalProductData.description,
        imageUrls: finalProductData.imageUrls,
        status
      };
      onSave(finalProduct);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "max-w-4xl mx-auto bg-white dark:bg-gray-800 p-6 sm:p-8 rounded-lg shadow-lg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("h1", { className: "text-2xl sm:text-3xl font-bold text-gray-800 dark:text-white mb-6", children: productToEdit?.id ? "Modifier le produit" : "Ajouter un nouveau produit" }),
      /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("form", { onSubmit: (e) => e.preventDefault(), className: "space-y-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("h2", { className: "text-xl font-semibold -mb-2 dark:text-white", children: "Informations G\xE9n\xE9rales" }),
        /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 pt-4 border-t dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "space-y-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Type d'article", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "flex rounded-md shadow-sm mt-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("button", { type: "button", onClick: () => setProduct((p) => ({ ...p, type: "product" })), className: `px-4 py-2 block w-full text-sm font-medium rounded-l-md ${product.type !== "service" ? "bg-kmer-green text-white z-10 ring-2 ring-kmer-green" : "bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 ring-1 ring-inset ring-gray-300 dark:ring-gray-600 hover:bg-gray-50"}`, children: "Produit Physique" }),
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("button", { type: "button", onClick: () => setProduct((p) => ({ ...p, type: "service" })), className: `px-4 py-2 block w-full text-sm font-medium rounded-r-md -ml-px ${product.type === "service" ? "bg-kmer-green text-white z-10 ring-2 ring-kmer-green" : "bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 ring-1 ring-inset ring-gray-300 dark:ring-gray-600 hover:bg-gray-50"}`, children: "Service" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Nom du produit/service", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "name", id: "name", value: product.name, onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600", required: true }) }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Prix de base (FCFA)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "number", name: "price", id: "price", value: product.price || "", onChange: handlePriceChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600", required: true }) }),
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Prix promo (optionnel)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "number", name: "promotionPrice", id: "promotionPrice", value: product.promotionPrice || "", onChange: handlePriceChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) })
            ] }),
            product.type !== "service" && /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(FieldWrapper, { label: "Stock total", children: [
                /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "number", name: "stock", id: "stock", value: product.stock ?? "", onChange: handleChange, className: `mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600 ${hasVariants ? "bg-gray-100 dark:bg-gray-600 cursor-not-allowed" : ""}`, required: true, readOnly: hasVariants }),
                hasVariants && /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400 mt-1", children: "Calcul\xE9 \xE0 partir des variantes." })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "SKU (R\xE9f. article)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "sku", id: "sku", value: product.sku || "", onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600" }) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Cat\xE9gorie", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("select", { name: "categoryId", id: "categoryId", value: product.categoryId, onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600", children: [
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("option", { value: "", disabled: true, children: t("productForm.selectSubcategory") }),
              categoryTree.map((mainCat) => /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("optgroup", { label: t(mainCat.name), children: mainCat.subCategories.map((subCat) => /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("option", { value: subCat.id, children: t(subCat.name) }, subCat.id)) }, mainCat.id))
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(FieldWrapper, { label: "Description", children: [
              /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "flex items-center gap-2 mb-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", value: keywords, onChange: (e) => setKeywords(e.target.value), placeholder: "Mots-cl\xE9s (robe, pagne, soir\xE9e...)", className: "flex-grow p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }),
                /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("button", { type: "button", onClick: handleGenerateDescription, disabled: isGenerating, className: "flex items-center gap-2 bg-purple-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-purple-600 disabled:bg-purple-300", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(SparklesIcon, { className: "w-5 h-5" }),
                  isGenerating ? "G\xE9n\xE9ration..." : "G\xE9n\xE9rer avec l'IA"
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("textarea", { name: "description", id: "description", rows: 6, value: product.description, onChange: handleChange, className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600", required: true, placeholder: "D\xE9crivez votre produit ici ou g\xE9n\xE9rez une description avec l'IA." })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(FieldWrapper, { label: "Images du produit (max 5)", children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "mt-1 grid grid-cols-3 gap-2", children: [
              imagePreviews.map((src, index) => /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "relative group", children: [
                /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("img", { src, alt: `Aper\xE7u ${index + 1}`, className: "h-24 w-full object-cover rounded-md" }),
                /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("button", { type: "button", onClick: () => removeImage(index), className: "absolute top-1 right-1 bg-red-500 text-white rounded-full p-0.5 opacity-0 group-hover:opacity-100 transition-opacity", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(XCircleIcon, { className: "w-4 h-4" }) })
              ] }, index)),
              imagePreviews.length < 5 && /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("label", { htmlFor: "image-upload", className: "flex flex-col items-center justify-center w-full h-24 border-2 border-dashed rounded-md cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700", children: [
                /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(PhotoIcon, { className: "w-8 h-8 text-gray-400" }),
                /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("span", { className: "text-xs text-gray-500 dark:text-gray-400", children: "T\xE9l\xE9verser" }),
                /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { id: "image-upload", name: "image-upload", type: "file", multiple: true, className: "sr-only", onChange: handleImageChange, accept: "image/*" })
              ] })
            ] }),
            imagePreviews.length < 5 && /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "mt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Ou ajouter depuis une URL" }),
              /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "flex gap-2 mt-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
                  "input",
                  {
                    type: "url",
                    value: imageUrlInput,
                    onChange: (e) => setImageUrlInput(e.target.value),
                    onKeyDown: (e) => {
                      if (e.key === "Enter") {
                        e.preventDefault();
                        handleImageUrlAdd();
                      }
                    },
                    placeholder: "https://exemple.com/image.jpg",
                    className: "flex-grow p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
                  "button",
                  {
                    type: "button",
                    onClick: handleImageUrlAdd,
                    className: "bg-gray-200 dark:bg-gray-600 font-semibold px-4 rounded-md hover:bg-gray-300 dark:hover:bg-gray-500",
                    children: "Ajouter"
                  }
                )
              ] })
            ] })
          ] }),
          product.type !== "service" && /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(CategorySpecificFields, { product, categories, handleChange }),
          product.type === "service" && /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "pt-6 border-t dark:border-gray-700 col-span-1 md:col-span-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("h2", { className: "text-xl font-semibold mb-4 dark:text-white", children: "D\xE9tails du Service" }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Dur\xE9e (ex: 1 heure, par session)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "duration", value: product.duration || "", onChange: handleChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Type de lieu", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("select", { name: "locationType", value: product.locationType || "flexible", onChange: handleChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
                /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("option", { value: "remote", children: "\xC0 distance" }),
                /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("option", { value: "on-site", children: "Sur site" }),
                /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("option", { value: "flexible", children: "Flexible" })
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Zone de service (ex: Douala uniquement)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "serviceArea", value: product.serviceArea || "", onChange: handleChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Disponibilit\xE9 (ex: Lun-Ven, 9h-17h)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", name: "availability", value: product.availability || "", onChange: handleChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
            ] })
          ] })
        ] }),
        product.type !== "service" && /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "pt-6 border-t dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("h2", { className: "text-xl font-semibold mb-4 dark:text-white", children: "Variantes (Taille, Couleur, etc.)" }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: "space-y-4", children: variants.map((variant, index) => /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "flex items-end gap-2 p-3 bg-gray-50 dark:bg-gray-900/50 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: "flex-grow", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Type de variante (ex: Taille)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", value: variant.name, onChange: (e) => handleVariantChange(index, "name", e.target.value), className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: "flex-grow", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(FieldWrapper, { label: "Options (s\xE9par\xE9es par des virgules)", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "text", value: variant.options.join(", "), onChange: (e) => handleVariantChange(index, "options", e.target.value), placeholder: "S, M, L, XL", className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("button", { type: "button", onClick: () => handleRemoveVariantType(index), className: "p-2 text-red-500 hover:bg-red-100 dark:hover:bg-red-900/50 rounded-full", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(TrashIcon, { className: "w-5 h-5" }) })
          ] }, index)) }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("button", { type: "button", onClick: handleAddVariantType, disabled: variants.length >= 3, className: "mt-4 text-sm font-semibold text-kmer-green hover:underline disabled:text-gray-400 dark:disabled:text-gray-500", children: "+ Ajouter un type de variante" })
        ] }),
        hasVariants && product.type !== "service" && /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "pt-6 border-t dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("h2", { className: "text-xl font-semibold mb-4 dark:text-white", children: "D\xE9tails des variantes" }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: "max-h-96 overflow-y-auto", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("table", { className: "w-full text-sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("tr", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("th", { className: "p-2 text-left font-semibold dark:text-gray-200", children: "Variante" }),
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("th", { className: "p-2 text-left font-semibold w-28 dark:text-gray-200", children: "Stock" }),
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("th", { className: "p-2 text-left font-semibold w-40 dark:text-gray-200", children: "Prix (optionnel)" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("tbody", { children: variantCombinations.map((combo, index) => /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("td", { className: "p-2 font-medium dark:text-gray-300", children: Object.values(combo).join(" / ") }),
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("td", { className: "p-2", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "number", value: getVariantDetailValue(combo, "stock"), onChange: (e) => handleVariantDetailChange(combo, "stock", e.target.value), className: "w-full p-1 border rounded-md dark:bg-gray-600 dark:border-gray-500" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("td", { className: "p-2", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("input", { type: "number", placeholder: product.price?.toString(), value: getVariantDetailValue(combo, "price"), onChange: (e) => handleVariantDetailChange(combo, "price", e.target.value), className: "w-full p-1 border rounded-md dark:bg-gray-600 dark:border-gray-500" }) })
            ] }, index)) })
          ] }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "flex justify-end gap-4 pt-6 border-t dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("button", { type: "button", onClick: onCancel, className: "bg-gray-200 dark:bg-gray-600 font-bold py-2 px-6 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500", children: "Annuler" }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("button", { type: "button", onClick: () => handleSubmit("draft"), className: "bg-blue-500 text-white font-bold py-2 px-6 rounded-lg hover:bg-blue-600", children: "Enregistrer en brouillon" }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("button", { type: "button", onClick: () => handleSubmit("published"), className: "bg-kmer-green text-white font-bold py-2 px-6 rounded-lg hover:bg-green-700", children: "Enregistrer et Publier" })
        ] })
      ] })
    ] }) });
  };
  var ProductForm_default = ProductForm;

  // components/SuperAdminDashboard.tsx
  var import_react53 = __toESM(require_react(), 1);

  // components/admin/OverviewPanel.tsx
  var import_react39 = __toESM(require_react(), 1);
  var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
  var StatCard3 = ({ icon, label, value, color }) => /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "p-4 bg-white dark:bg-gray-800/50 rounded-lg shadow-sm flex items-center gap-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: `p-3 rounded-full ${color}`, children: icon }),
    /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("p", { className: "text-2xl font-bold text-gray-800 dark:text-white", children: value }),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: label })
    ] })
  ] });
  var OverviewPanel2 = ({ allOrders, allStores, allUsers, siteActivityLogs }) => {
    const { t } = useLanguage();
    const { stats, salesData, orderStatusDistribution } = (0, import_react39.useMemo)(() => {
      const deliveredOrders = allOrders.filter((o) => o.status === "delivered");
      const totalRevenue = deliveredOrders.reduce((sum, order) => sum + order.total, 0);
      const last7Days = Array.from({ length: 7 }, (_, i) => {
        const d = /* @__PURE__ */ new Date();
        d.setDate(d.getDate() - i);
        return d;
      });
      const dailySales = allOrders.reduce((acc, order) => {
        const day = new Date(order.orderDate).toLocaleDateString("fr-CM", { day: "2-digit", month: "2-digit" });
        acc[day] = (acc[day] || 0) + order.total;
        return acc;
      }, {});
      const _salesData = last7Days.map((d) => {
        const label = d.toLocaleDateString("fr-CM", { day: "2-digit", month: "2-digit" });
        return { label: d.toLocaleDateString("fr-CM", { weekday: "short" }), revenue: dailySales[label] || 0 };
      }).reverse();
      const _orderStatusDistribution = allOrders.reduce((acc, order) => {
        acc[order.status] = (acc[order.status] || 0) + 1;
        return acc;
      }, {});
      return {
        stats: {
          totalRevenue,
          totalOrders: allOrders.length,
          pendingStores: allStores.filter((s) => s.status === "pending").length,
          totalUsers: allUsers.length
        },
        salesData: _salesData,
        orderStatusDistribution: Object.entries(_orderStatusDistribution).sort((a, b) => b[1] - a[1])
      };
    }, [allOrders, allStores, allUsers]);
    const recentOrders = (0, import_react39.useMemo)(() => [...allOrders].sort((a, b) => new Date(b.orderDate).getTime() - new Date(a.orderDate).getTime()).slice(0, 5), [allOrders]);
    const recentUsers = (0, import_react39.useMemo)(() => [...allUsers].sort((a, b) => parseInt(b.id) - parseInt(a.id)).slice(0, 5), [allUsers]);
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "p-4 sm:p-6 space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(StatCard3, { icon: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(CurrencyDollarIcon, { className: "w-7 h-7" }), label: t("superadmin.overview.totalRevenue"), value: `${stats.totalRevenue.toLocaleString("fr-CM")} FCFA`, color: "bg-green-100 dark:bg-green-900/50 text-green-600 dark:text-green-300" }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(StatCard3, { icon: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(ShoppingBagIcon, { className: "w-7 h-7" }), label: t("superadmin.overview.totalOrders"), value: stats.totalOrders, color: "bg-blue-100 dark:bg-blue-900/50 text-blue-600 dark:text-blue-300" }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(StatCard3, { icon: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(UsersIcon, { className: "w-7 h-7" }), label: t("superadmin.overview.totalUsers"), value: stats.totalUsers, color: "bg-yellow-100 dark:bg-yellow-900/50 text-yellow-600 dark:text-yellow-300" }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(StatCard3, { icon: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(BuildingStorefrontIcon, { className: "w-7 h-7" }), label: t("superadmin.overview.pendingStores"), value: stats.pendingStores, color: "bg-purple-100 dark:bg-purple-900/50 text-purple-600 dark:text-purple-300" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "lg:col-span-2 bg-white dark:bg-gray-800/50 rounded-lg shadow-sm p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.overview.revenueLast7Days") }),
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "flex justify-around items-end h-64 border-l border-b border-gray-200 dark:border-gray-700 pl-4 pb-4", children: salesData.map(({ label, revenue }) => /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex flex-col items-center h-full justify-end", title: `${revenue.toLocaleString("fr-CM")} FCFA`, children: [
            /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "w-8 bg-kmer-green rounded-t-md hover:bg-green-700", style: { height: `${revenue / Math.max(...salesData.map((d) => d.revenue), 1) * 100}%` } }),
            /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("p", { className: "text-xs mt-1", children: label })
          ] }, label)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "bg-white dark:bg-gray-800/50 rounded-lg shadow-sm p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.overview.orderStatuses") }),
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("ul", { className: "space-y-2", children: orderStatusDistribution.map(([status, count]) => /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("li", { className: "flex justify-between text-sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("span", { children: t(`orderStatus.${status}`, status) }),
            /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("span", { className: "font-bold", children: count })
          ] }, status)) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "bg-white dark:bg-gray-800/50 rounded-lg shadow-sm p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.overview.recentOrders") }),
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("ul", { className: "divide-y dark:divide-gray-700", children: recentOrders.map((o) => /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("li", { className: "py-2 flex justify-between items-center text-sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("p", { className: "font-semibold", children: o.shippingAddress.fullName }),
              /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("p", { className: "text-xs text-gray-500", children: o.id })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "text-right", children: [
              /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("p", { className: "font-bold", children: [
                o.total.toLocaleString("fr-CM"),
                " FCFA"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("p", { className: "text-xs", children: t(`orderStatus.${o.status}`, o.status) })
            ] })
          ] }, o.id)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "bg-white dark:bg-gray-800/50 rounded-lg shadow-sm p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.overview.newUsers") }),
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("ul", { className: "divide-y dark:divide-gray-700", children: recentUsers.map((u) => /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("li", { className: "py-2 flex justify-between items-center text-sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("p", { className: "font-semibold", children: u.name }),
              /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("p", { className: "text-xs text-gray-500", children: u.email })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("span", { className: "capitalize text-xs font-medium bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded-full", children: u.role.replace("_", " ") })
          ] }, u.id)) })
        ] })
      ] })
    ] });
  };

  // components/admin/UsersPanel.tsx
  var import_react41 = __toESM(require_react(), 1);

  // components/admin/BulkEmailModal.tsx
  var import_react40 = __toESM(require_react(), 1);
  var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
  var BulkEmailModal = ({ isOpen, onClose, onSend, recipients, emailTemplates }) => {
    const { t } = useLanguage();
    const [subject, setSubject] = (0, import_react40.useState)("");
    const [body, setBody] = (0, import_react40.useState)("");
    const [selectedTemplateId, setSelectedTemplateId] = (0, import_react40.useState)("");
    (0, import_react40.useEffect)(() => {
      if (selectedTemplateId) {
        const template = emailTemplates.find((t2) => t2.id === selectedTemplateId);
        if (template) {
          setSubject(template.subject);
          setBody(template.body.replace("{emailContent}", ""));
        }
      } else {
        setSubject("");
        setBody("");
      }
    }, [selectedTemplateId, emailTemplates]);
    if (!isOpen) return null;
    const handleSubmit = (e) => {
      e.preventDefault();
      onSend(subject, body);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { className: "fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 max-w-2xl w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex justify-between items-center mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("h2", { className: "text-xl font-bold", children: t("superadmin.emailModal.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("button", { onClick: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(XIcon, { className: "w-6 h-6" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("p", { className: "text-sm text-gray-500 mb-4", children: t("superadmin.emailModal.recipients", recipients.length) }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("label", { htmlFor: "template", className: "block text-sm font-medium", children: t("superadmin.emailModal.useTemplate") }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(
            "select",
            {
              id: "template",
              value: selectedTemplateId,
              onChange: (e) => setSelectedTemplateId(e.target.value),
              className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("option", { value: "", children: t("superadmin.emailModal.customEmail") }),
                emailTemplates.map((t2) => /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("option", { value: t2.id, children: t2.name }, t2.id))
              ]
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("label", { htmlFor: "subject", className: "block text-sm font-medium", children: t("superadmin.emailModal.subject") }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
            "input",
            {
              type: "text",
              id: "subject",
              value: subject,
              onChange: (e) => setSubject(e.target.value),
              className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600",
              required: true
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("label", { htmlFor: "body", className: "block text-sm font-medium", children: t("superadmin.emailModal.body") }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
            "textarea",
            {
              id: "body",
              rows: 8,
              value: body,
              onChange: (e) => setBody(e.target.value),
              className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600",
              required: true
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("p", { className: "text-xs text-gray-400 mt-1", children: t("superadmin.emailModal.variableInfo") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex justify-end gap-3 pt-4 border-t dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("button", { type: "button", onClick: onClose, className: "bg-gray-200 dark:bg-gray-600 font-semibold py-2 px-4 rounded-lg", children: t("common.cancel") }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("button", { type: "submit", className: "bg-blue-600 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(PaperAirplaneIcon, { className: "w-5 h-5" }),
            t("superadmin.emailModal.send")
          ] })
        ] })
      ] })
    ] }) });
  };
  var BulkEmailModal_default = BulkEmailModal;

  // components/admin/UsersPanel.tsx
  var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
  var StatusBadge = ({ user, allStores }) => {
    const { t } = useLanguage();
    let statusText = t("superadmin.users.status.active");
    let colorClass = "bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300";
    switch (user.role) {
      case "seller":
      case "enterprise":
        const store = allStores.find((s) => s.sellerId === user.id);
        if (store) {
          switch (store.status) {
            case "active":
              statusText = t("superadmin.users.status.active");
              colorClass = "bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300";
              break;
            case "pending":
              statusText = t("superadmin.users.status.pending");
              colorClass = "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300";
              break;
            case "suspended":
              statusText = t("superadmin.users.status.suspended");
              colorClass = "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300";
              break;
          }
        } else {
          statusText = "En attente de boutique";
          colorClass = "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300";
        }
        break;
      case "delivery_agent":
        if (user.availabilityStatus === "available") {
          statusText = t("superadmin.users.status.available");
          colorClass = "bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300";
        } else {
          statusText = t("superadmin.users.status.unavailable");
          colorClass = "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300";
        }
        break;
      default:
        break;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: `px-2 py-0.5 text-xs font-semibold rounded-full ${colorClass}`, children: statusText });
  };
  var UsersPanel = ({ allUsers, allStores, onUpdateUser, onCreateUserByAdmin, onWarnUser, allPickupPoints, allZones, onSendBulkEmail, siteSettings }) => {
    const { t } = useLanguage();
    const [searchTerm, setSearchTerm] = (0, import_react41.useState)("");
    const [editingUser, setEditingUser] = (0, import_react41.useState)(null);
    const [isCreating, setIsCreating] = (0, import_react41.useState)(false);
    const [selectedUserIds, setSelectedUserIds] = (0, import_react41.useState)([]);
    const [isEmailModalOpen, setIsEmailModalOpen] = (0, import_react41.useState)(false);
    const filteredUsers = (0, import_react41.useMemo)(
      () => allUsers.filter((u) => u.name.toLowerCase().includes(searchTerm.toLowerCase()) || u.email.toLowerCase().includes(searchTerm.toLowerCase())),
      [allUsers, searchTerm]
    );
    const handleSelectUser = (userId) => {
      setSelectedUserIds(
        (prev) => prev.includes(userId) ? prev.filter((id) => id !== userId) : [...prev, userId]
      );
    };
    const handleSelectAll = (e) => {
      if (e.target.checked) {
        setSelectedUserIds(filteredUsers.map((u) => u.id));
      } else {
        setSelectedUserIds([]);
      }
    };
    const UserForm = ({ user, onSave, onCancel }) => {
      const [data, setData] = (0, import_react41.useState)({ name: user?.name || "", email: user?.email || "", role: user?.role || "delivery_agent", depotId: user?.depotId || "", zoneId: user?.zoneId || "" });
      const handleChange = (e) => setData((d) => ({ ...d, [e.target.name]: e.target.value }));
      const handleSubmit = (e) => {
        e.preventDefault();
        onSave(data);
      };
      const isLogisticsRole = ["delivery_agent", "depot_agent", "depot_manager"].includes(data.role);
      const allRoles = [
        { value: "customer", label: t("superadmin.users.form.role_customer") },
        { value: "seller", label: t("superadmin.users.form.role_seller") },
        { value: "delivery_agent", label: t("superadmin.users.form.role_delivery_agent") },
        { value: "depot_agent", label: t("superadmin.users.form.role_depot_agent") },
        { value: "depot_manager", label: t("superadmin.users.form.role_depot_manager") },
        { value: "superadmin", label: t("superadmin.users.form.role_superadmin") }
      ];
      const adminCreatableRoles = ["delivery_agent", "depot_agent", "depot_manager", "superadmin"];
      const availableRoles = !user ? allRoles.filter((r) => adminCreatableRoles.includes(r.value)) : allRoles;
      return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("form", { onSubmit: handleSubmit, className: "bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("h3", { className: "text-lg font-bold", children: user ? t("superadmin.users.form.editTitle") : t("superadmin.users.form.createTitle") }),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("input", { name: "name", value: data.name, onChange: handleChange, placeholder: t("superadmin.users.form.name"), className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("input", { type: "email", name: "email", value: data.email, onChange: handleChange, placeholder: "Email", className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", required: true, disabled: !!user }),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("select", { name: "role", value: data.role, onChange: handleChange, className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: availableRoles.map((role) => /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("option", { value: role.value, children: role.label }, role.value)) }),
        isLogisticsRole && /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(import_jsx_runtime54.Fragment, { children: [
          (data.role === "depot_agent" || data.role === "depot_manager") && /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("label", { htmlFor: "depotId", className: "block text-sm font-medium dark:text-gray-300", children: t("superadmin.users.form.assignedDepot") }),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("select", { name: "depotId", id: "depotId", value: data.depotId, onChange: handleChange, className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 mt-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("option", { value: "", children: t("superadmin.users.form.noDepot") }),
              allPickupPoints.map((point) => /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("option", { value: point.id, children: [
                point.name,
                " - ",
                point.city
              ] }, point.id))
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("label", { htmlFor: "zoneId", className: "block text-sm font-medium dark:text-gray-300", children: t("superadmin.users.form.deliveryZone") }),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("select", { name: "zoneId", id: "zoneId", value: data.zoneId, onChange: handleChange, className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 mt-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("option", { value: "", children: t("superadmin.users.form.noZone") }),
              allZones.map((zone) => /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("option", { value: zone.id, children: [
                zone.name,
                " - ",
                zone.city
              ] }, zone.id))
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "flex justify-end gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("button", { type: "button", onClick: onCancel, className: "px-4 py-2 bg-gray-200 dark:bg-gray-600 rounded-lg", children: t("common.cancel") }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("button", { type: "submit", className: "px-4 py-2 bg-blue-500 text-white rounded-lg", children: t("common.save") })
        ] })
      ] }) });
    };
    const handleSaveUser = (data) => {
      if (editingUser) {
        const updates = { role: data.role, name: data.name };
        if (["delivery_agent", "depot_agent", "depot_manager"].includes(data.role)) {
          updates.depotId = data.depotId || void 0;
          updates.zoneId = data.zoneId || void 0;
        } else {
          updates.depotId = void 0;
          updates.zoneId = void 0;
        }
        onUpdateUser(editingUser.id, updates);
      } else {
        onCreateUserByAdmin(data);
      }
      setEditingUser(null);
      setIsCreating(false);
    };
    const handleSendEmail = (subject, body) => {
      onSendBulkEmail(selectedUserIds, subject, body);
      setIsEmailModalOpen(false);
      setSelectedUserIds([]);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "p-4 sm:p-6", children: [
      isEmailModalOpen && /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
        BulkEmailModal_default,
        {
          isOpen: isEmailModalOpen,
          onClose: () => setIsEmailModalOpen(false),
          onSend: handleSendEmail,
          recipients: allUsers.filter((u) => selectedUserIds.includes(u.id)),
          emailTemplates: siteSettings.emailTemplates || []
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.users.title", allUsers.length) }),
      /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "flex justify-between items-center mb-4 flex-wrap gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("input", { type: "text", placeholder: t("superadmin.users.searchPlaceholder"), value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: "p-2 border rounded-md w-full sm:w-1/2 dark:bg-gray-700 dark:border-gray-600" }),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "flex gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("button", { onClick: () => setIsEmailModalOpen(true), disabled: selectedUserIds.length === 0, className: "bg-blue-500 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2 disabled:bg-gray-400", children: t("superadmin.users.sendEmail", selectedUserIds.length) }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("button", { onClick: () => setIsCreating(true), className: "bg-green-500 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(PlusIcon, { className: "w-5 h-5" }),
            " ",
            t("superadmin.users.create")
          ] })
        ] })
      ] }),
      (editingUser || isCreating) && /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(UserForm, { user: editingUser, onSave: handleSaveUser, onCancel: () => {
        setEditingUser(null);
        setIsCreating(false);
      } }),
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "overflow-x-auto", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("table", { className: "w-full text-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("th", { className: "p-2 w-10", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("input", { type: "checkbox", onChange: handleSelectAll, checked: selectedUserIds.length === filteredUsers.length && filteredUsers.length > 0 }) }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("th", { className: "p-2 text-left", children: t("superadmin.users.table.name") }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("th", { className: "p-2 text-left", children: t("superadmin.users.table.email") }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("th", { className: "p-2 text-left", children: t("superadmin.users.table.role") }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("th", { className: "p-2 text-left", children: t("common.status") }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("th", { className: "p-2 text-center", children: t("superadmin.users.table.action") })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("tbody", { children: filteredUsers.map((user) => /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("td", { className: "p-2", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("input", { type: "checkbox", checked: selectedUserIds.includes(user.id), onChange: () => handleSelectUser(user.id) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("td", { className: "p-2", children: user.name }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("td", { className: "p-2", children: user.email }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("td", { className: "p-2 capitalize", children: user.role.replace("_", " ") }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("td", { className: "p-2", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(StatusBadge, { user, allStores }) }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("td", { className: "p-2 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "flex justify-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("button", { onClick: () => setEditingUser(user), className: "text-blue-500", title: t("common.edit"), children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(PencilSquareIcon, { className: "w-5 h-5" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("button", { onClick: () => {
              const reason = prompt(`${t("superadmin.stores.warnReason")} ${user.name}:`);
              if (reason) onWarnUser(user.id, reason);
            }, className: "text-yellow-500", title: t("common.warn"), children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ExclamationTriangleIcon, { className: "w-5 h-5" }) })
          ] }) })
        ] }, user.id)) })
      ] }) })
    ] });
  };

  // components/admin/CatalogPanel.tsx
  var import_react42 = __toESM(require_react(), 1);
  var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
  var CatalogPanel = ({ allCategories, onAdminAddCategory, onAdminDeleteCategory, onAdminUpdateCategory }) => {
    const { t } = useLanguage();
    const [newCategoryName, setNewCategoryName] = (0, import_react42.useState)("");
    const [selectedParent, setSelectedParent] = (0, import_react42.useState)("");
    const [editingCategories, setEditingCategories] = (0, import_react42.useState)({});
    const categoryTree = (0, import_react42.useMemo)(() => {
      const mainCategories = allCategories.filter((c) => !c.parentId);
      return mainCategories.map((mainCat) => ({
        ...mainCat,
        subCategories: allCategories.filter((c) => c.parentId === mainCat.id)
      }));
    }, [allCategories]);
    const handleAddCategory = (e) => {
      e.preventDefault();
      if (!newCategoryName.trim()) return;
      onAdminAddCategory(newCategoryName, selectedParent || void 0);
      setNewCategoryName("");
      setSelectedParent("");
    };
    const handleCategoryChange = (id, field, value) => {
      setEditingCategories((prev) => ({
        ...prev,
        [id]: {
          ...prev[id],
          [field]: value
        }
      }));
    };
    const handleSaveCategory = (id) => {
      if (editingCategories[id]) {
        onAdminUpdateCategory(id, editingCategories[id]);
        setEditingCategories((prev) => {
          const newState = { ...prev };
          delete newState[id];
          return newState;
        });
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "p-4 sm:p-6 grid grid-cols-1 lg:grid-cols-3 gap-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "lg:col-span-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.catalog.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "space-y-4 max-h-[70vh] overflow-y-auto", children: categoryTree.map((mainCat) => /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-900/50 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
              "input",
              {
                value: t(mainCat.name),
                disabled: true,
                className: "font-bold p-1 border rounded w-full bg-gray-100 dark:bg-gray-800 dark:border-gray-600 cursor-not-allowed"
              }
            ),
            editingCategories[mainCat.id] && /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("button", { onClick: () => handleSaveCategory(mainCat.id), className: "text-green-500", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(CheckCircleIcon, { className: "w-5 h-5" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("button", { onClick: () => onAdminDeleteCategory(mainCat.id), className: "text-red-500 hover:text-red-700", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(TrashIcon, { className: "w-4 h-4" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "flex items-center gap-2 mt-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("img", { src: editingCategories[mainCat.id]?.imageUrl ?? mainCat.imageUrl, alt: t(mainCat.name), className: "w-10 h-10 object-cover rounded-sm" }),
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
              "input",
              {
                placeholder: t("superadmin.catalog.imageUrl"),
                value: editingCategories[mainCat.id]?.imageUrl ?? mainCat.imageUrl,
                onChange: (e) => handleCategoryChange(mainCat.id, "imageUrl", e.target.value),
                className: "text-xs p-1 border rounded w-full bg-transparent dark:border-gray-600"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("label", { htmlFor: `cat-img-upload-${mainCat.id}`, className: "cursor-pointer bg-gray-200 dark:bg-gray-600 px-2 py-1 rounded-md text-xs font-medium whitespace-nowrap", children: [
              t("superadmin.settings.identity.upload"),
              /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
                "input",
                {
                  id: `cat-img-upload-${mainCat.id}`,
                  type: "file",
                  className: "sr-only",
                  onChange: (e) => {
                    if (e.target.files && e.target.files[0]) {
                      const reader = new FileReader();
                      reader.onloadend = () => {
                        handleCategoryChange(mainCat.id, "imageUrl", reader.result);
                      };
                      reader.readAsDataURL(e.target.files[0]);
                    }
                  },
                  accept: "image/*"
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("ul", { className: "list-disc list-inside pl-4 mt-2 space-y-2", children: mainCat.subCategories.map((subCat) => /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("li", { className: "flex flex-col gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
                "input",
                {
                  value: t(subCat.name),
                  disabled: true,
                  className: "p-1 border rounded w-full bg-gray-100 dark:bg-gray-800 text-sm dark:border-gray-600 cursor-not-allowed"
                }
              ),
              editingCategories[subCat.id] && /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("button", { onClick: () => handleSaveCategory(subCat.id), className: "text-green-500", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(CheckCircleIcon, { className: "w-5 h-5" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("button", { onClick: () => onAdminDeleteCategory(subCat.id), className: "text-red-500 hover:text-red-700", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(TrashIcon, { className: "w-4 h-4" }) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "flex items-center gap-2 mt-1 pl-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("img", { src: editingCategories[subCat.id]?.imageUrl ?? subCat.imageUrl, alt: t(subCat.name), className: "w-8 h-8 object-cover rounded-sm" }),
              /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
                "input",
                {
                  placeholder: t("superadmin.catalog.imageUrl"),
                  value: editingCategories[subCat.id]?.imageUrl ?? subCat.imageUrl,
                  onChange: (e) => handleCategoryChange(subCat.id, "imageUrl", e.target.value),
                  className: "text-xs p-1 border rounded w-full bg-transparent dark:border-gray-600"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("label", { htmlFor: `cat-img-upload-${subCat.id}`, className: "cursor-pointer bg-gray-200 dark:bg-gray-600 px-2 py-1 rounded-md text-xs font-medium whitespace-nowrap", children: [
                t("superadmin.settings.identity.upload"),
                /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
                  "input",
                  {
                    id: `cat-img-upload-${subCat.id}`,
                    type: "file",
                    className: "sr-only",
                    onChange: (e) => {
                      if (e.target.files && e.target.files[0]) {
                        const reader = new FileReader();
                        reader.onloadend = () => {
                          handleCategoryChange(subCat.id, "imageUrl", reader.result);
                        };
                        reader.readAsDataURL(e.target.files[0]);
                      }
                    },
                    accept: "image/*"
                  }
                )
              ] })
            ] })
          ] }, subCat.id)) })
        ] }, mainCat.id)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("h3", { className: "text-lg font-bold mb-4", children: t("superadmin.catalog.addCategory") }),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("form", { onSubmit: handleAddCategory, className: "p-4 bg-gray-100 dark:bg-gray-700/50 rounded-lg space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("label", { htmlFor: "catName", className: "block text-sm font-medium", children: t("superadmin.catalog.categoryName") }),
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("input", { type: "text", id: "catName", value: newCategoryName, onChange: (e) => setNewCategoryName(e.target.value), className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", required: true })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("label", { htmlFor: "catParent", className: "block text-sm font-medium", children: t("superadmin.catalog.parentCategory") }),
            /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("select", { id: "catParent", value: selectedParent, onChange: (e) => setSelectedParent(e.target.value), className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
              /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("option", { value: "", children: t("superadmin.catalog.mainCategory") }),
              allCategories.filter((c) => !c.parentId).map((c) => /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("option", { value: c.id, children: t(c.name) }, c.id))
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("button", { type: "submit", className: "w-full bg-blue-500 text-white font-bold py-2 rounded-lg flex items-center justify-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(PlusIcon, { className: "w-5 h-5" }),
            " ",
            t("superadmin.catalog.add")
          ] })
        ] })
      ] })
    ] });
  };

  // components/admin/MarketingPanel.tsx
  var import_react44 = __toESM(require_react(), 1);

  // components/admin/FlashSaleForm.tsx
  var import_react43 = __toESM(require_react(), 1);
  var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
  var FlashSaleForm = ({ onSave, onCancel }) => {
    const { t } = useLanguage();
    const [name, setName] = (0, import_react43.useState)("");
    const [startDate, setStartDate] = (0, import_react43.useState)("");
    const [endDate, setEndDate] = (0, import_react43.useState)("");
    const [errors, setErrors] = (0, import_react43.useState)({});
    const validate = () => {
      const newErrors = {};
      if (!name.trim()) {
        newErrors.name = t("superadmin.marketing.flashSaleForm.error_name");
      }
      if (!startDate) {
        newErrors.startDate = t("superadmin.marketing.flashSaleForm.error_startDate");
      }
      if (!endDate) {
        newErrors.endDate = t("superadmin.marketing.flashSaleForm.error_endDate");
      }
      if (startDate && endDate) {
        const start = new Date(startDate);
        const end = new Date(endDate);
        const now = /* @__PURE__ */ new Date();
        if (start >= end) {
          newErrors.endDate = t("superadmin.marketing.flashSaleForm.error_endDateAfterStart");
        }
        if (end < now) {
          newErrors.endDate = t("superadmin.marketing.flashSaleForm.error_endDatePast");
        }
      }
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handleSave = () => {
      if (validate()) {
        onSave({ name, startDate, endDate });
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "p-6 bg-gray-50 dark:bg-gray-800/50 rounded-lg border dark:border-gray-700", children: [
      /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("h3", { className: "text-xl font-bold mb-4 dark:text-white", children: t("superadmin.marketing.flashSaleForm.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("label", { htmlFor: "fsName", className: "block text-sm font-medium dark:text-gray-300", children: t("superadmin.marketing.flashSaleForm.name") }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
            "input",
            {
              type: "text",
              id: "fsName",
              value: name,
              onChange: (e) => setName(e.target.value),
              className: `mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600 ${errors.name ? "border-red-500" : ""}`,
              "aria-invalid": !!errors.name,
              "aria-describedby": errors.name ? "fsName-error" : void 0
            }
          ),
          errors.name && /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { id: "fsName-error", className: "flex items-center gap-1 mt-1 text-sm text-red-600 dark:text-red-400", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(ExclamationTriangleIcon, { className: "w-4 h-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { children: errors.name })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("label", { htmlFor: "fsStartDate", className: "block text-sm font-medium dark:text-gray-300", children: t("superadmin.marketing.flashSaleForm.startDate") }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
              "input",
              {
                type: "datetime-local",
                id: "fsStartDate",
                value: startDate,
                onChange: (e) => setStartDate(e.target.value),
                className: `mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600 ${errors.startDate ? "border-red-500" : ""}`,
                "aria-invalid": !!errors.startDate,
                "aria-describedby": errors.startDate ? "fsStartDate-error" : void 0
              }
            ),
            errors.startDate && /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { id: "fsStartDate-error", className: "flex items-center gap-1 mt-1 text-sm text-red-600 dark:text-red-400", children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(ExclamationTriangleIcon, { className: "w-4 h-4" }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { children: errors.startDate })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("label", { htmlFor: "fsEndDate", className: "block text-sm font-medium dark:text-gray-300", children: t("superadmin.marketing.flashSaleForm.endDate") }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
              "input",
              {
                type: "datetime-local",
                id: "fsEndDate",
                value: endDate,
                onChange: (e) => setEndDate(e.target.value),
                className: `mt-1 block w-full border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600 ${errors.endDate ? "border-red-500" : ""}`,
                "aria-invalid": !!errors.endDate,
                "aria-describedby": errors.endDate ? "fsEndDate-error" : void 0
              }
            ),
            errors.endDate && /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { id: "fsEndDate-error", className: "flex items-center gap-1 mt-1 text-sm text-red-600 dark:text-red-400", children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(ExclamationTriangleIcon, { className: "w-4 h-4" }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { children: errors.endDate })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex justify-end gap-3 pt-4 border-t dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("button", { onClick: onCancel, className: "bg-white dark:bg-gray-600 py-2 px-4 border border-gray-300 dark:border-gray-500 rounded-md shadow-sm text-sm font-medium hover:bg-gray-50 dark:hover:bg-gray-500", children: t("common.cancel") }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("button", { onClick: handleSave, className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg hover:bg-green-700", children: t("superadmin.marketing.flashSaleForm.create") })
        ] })
      ] })
    ] });
  };
  var FlashSaleForm_default = FlashSaleForm;

  // components/admin/FlashSaleDetailView.tsx
  var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
  var FlashSaleDetailView = ({ sale, allProducts, onUpdateStatus, onBatchUpdateStatus }) => {
    const { t } = useLanguage();
    const pendingProductIds = sale.products.filter((p) => p.status === "pending").map((p) => p.productId);
    const getProductInfo = (productId) => {
      return allProducts.find((p) => p.id === productId);
    };
    const handleBatchApprove = () => {
      if (pendingProductIds.length > 0) {
        onBatchUpdateStatus(sale.id, pendingProductIds, "approved");
      }
    };
    const handleBatchReject = () => {
      if (pendingProductIds.length > 0) {
        onBatchUpdateStatus(sale.id, pendingProductIds, "rejected");
      }
    };
    if (sale.products.length === 0) {
      return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "p-4 text-center text-gray-500", children: "Aucun produit n'a \xE9t\xE9 soumis pour cette vente." });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "p-4 bg-gray-100 dark:bg-gray-900/50", children: [
      /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex justify-between items-center mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("h4", { className: "font-bold", children: t("superadmin.marketing.flashSaleDetail.submissions") }),
        pendingProductIds.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("button", { onClick: handleBatchApprove, className: "bg-green-500 text-white text-xs font-bold py-1 px-3 rounded-md hover:bg-green-600", children: t("superadmin.marketing.flashSaleDetail.approveAll") }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("button", { onClick: handleBatchReject, className: "bg-red-500 text-white text-xs font-bold py-1 px-3 rounded-md hover:bg-red-600", children: t("superadmin.marketing.flashSaleDetail.rejectAll") })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "overflow-x-auto", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("table", { className: "min-w-full text-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("thead", { className: "bg-gray-200 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("th", { className: "px-4 py-2 text-left", children: t("superadmin.marketing.flashSaleDetail.product") }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("th", { className: "px-4 py-2 text-left", children: t("superadmin.marketing.flashSaleDetail.seller") }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("th", { className: "px-4 py-2 text-right", children: t("superadmin.marketing.flashSaleDetail.originalPrice") }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("th", { className: "px-4 py-2 text-right", children: t("superadmin.marketing.flashSaleDetail.flashPrice") }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("th", { className: "px-4 py-2 text-center", children: t("common.status") }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("th", { className: "px-4 py-2 text-center", children: t("common.actions") })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("tbody", { className: "divide-y divide-gray-200 dark:divide-gray-600", children: sale.products.map((sp) => {
          const product = getProductInfo(sp.productId);
          if (!product) return null;
          return /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("td", { className: "px-4 py-2 flex items-center gap-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("img", { src: product.imageUrls[0], alt: product.name, className: "w-10 h-10 object-cover rounded-md" }),
              /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("span", { children: product.name })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("td", { className: "px-4 py-2", children: sp.sellerShopName }),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("td", { className: "px-4 py-2 text-right", children: [
              product.price.toLocaleString("fr-CM"),
              " FCFA"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("td", { className: "px-4 py-2 text-right font-bold text-kmer-green", children: [
              sp.flashPrice.toLocaleString("fr-CM"),
              " FCFA"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("td", { className: "px-4 py-2 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("span", { className: `px-2 py-0.5 text-xs font-semibold rounded-full ${sp.status === "approved" ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200" : sp.status === "rejected" ? "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200" : "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200"}`, children: sp.status }) }),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("td", { className: "px-4 py-2 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex justify-center gap-2", children: [
              sp.status !== "approved" && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("button", { onClick: () => onUpdateStatus(sale.id, sp.productId, "approved"), className: "p-1 text-green-600 hover:bg-green-100 dark:hover:bg-green-900/50 rounded-full", "aria-label": t("common.approve"), children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(CheckIcon, { className: "w-5 h-5" }) }),
              sp.status !== "rejected" && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("button", { onClick: () => onUpdateStatus(sale.id, sp.productId, "rejected"), className: "p-1 text-red-600 hover:bg-red-100 dark:hover:bg-red-900/50 rounded-full", "aria-label": t("common.reject"), children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(XIcon, { className: "w-5 h-5" }) })
            ] }) })
          ] }, sp.productId);
        }) })
      ] }) })
    ] });
  };
  var FlashSaleDetailView_default = FlashSaleDetailView;

  // components/admin/MarketingPanel.tsx
  var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
  var PanelButton = ({ tab, label, activeTab, setActiveTab }) => /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("button", { onClick: () => setActiveTab(tab), className: `px-4 py-2 font-semibold ${activeTab === tab ? "border-b-2 border-kmer-green text-kmer-green" : "text-gray-500 dark:text-gray-400"}`, children: label });
  var AnnouncementForm = ({ announcement, onSave, onCancel }) => {
    const { t } = useLanguage();
    const [data, setData] = (0, import_react44.useState)({
      id: announcement?.id || void 0,
      title: announcement?.title || "",
      content: announcement?.content || "",
      target: announcement?.target || "all",
      startDate: announcement?.startDate ? new Date(announcement.startDate).toISOString().substring(0, 10) : "",
      endDate: announcement?.endDate ? new Date(announcement.endDate).toISOString().substring(0, 10) : "",
      isActive: announcement?.isActive === void 0 ? true : announcement.isActive
    });
    const handleChange = (e) => {
      const { name, value, type } = e.target;
      const checked = e.target.checked;
      setData((d) => ({ ...d, [name]: type === "checkbox" ? checked : value }));
    };
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("form", { onSubmit: (e) => {
      e.preventDefault();
      onSave(data);
    }, className: "space-y-4 p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("input", { name: "title", value: data.title, onChange: handleChange, placeholder: t("superadmin.marketing.announcementForm.title"), className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("textarea", { name: "content", value: data.content, onChange: handleChange, placeholder: t("superadmin.marketing.announcementForm.content"), className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("input", { type: "date", name: "startDate", value: data.startDate, onChange: handleChange, className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("input", { type: "date", name: "endDate", value: data.endDate, onChange: handleChange, className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("select", { name: "target", value: data.target, onChange: handleChange, className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("option", { value: "all", children: t("superadmin.marketing.announcementForm.target_all") }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("option", { value: "customers", children: t("superadmin.marketing.announcementForm.target_customers") }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("option", { value: "sellers", children: t("superadmin.marketing.announcementForm.target_sellers") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("label", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("input", { type: "checkbox", name: "isActive", checked: data.isActive, onChange: handleChange }),
        " ",
        t("superadmin.marketing.announcementForm.activate")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex justify-end gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("button", { type: "button", onClick: onCancel, className: "px-4 py-2 bg-gray-200 rounded", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("button", { type: "submit", className: "px-4 py-2 bg-blue-500 text-white rounded", children: t("common.save") })
      ] })
    ] });
  };
  var AdForm = ({ ad, onSave, onCancel }) => {
    const { t } = useLanguage();
    const [data, setData] = (0, import_react44.useState)({
      imageUrl: ad?.imageUrl || "",
      linkUrl: ad?.linkUrl || "",
      location: ad?.location || "homepage-banner",
      isActive: ad?.isActive === void 0 ? true : ad.isActive
    });
    const handleChange = (e) => {
      const { name, value, type, checked } = e.target;
      setData((d) => ({ ...d, [name]: type === "checkbox" ? checked : value }));
    };
    const handleFileChange = (e) => {
      if (e.target.files && e.target.files[0]) {
        const reader = new FileReader();
        reader.onloadend = () => {
          setData((d) => ({ ...d, imageUrl: reader.result }));
        };
        reader.readAsDataURL(e.target.files[0]);
      }
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onSave(data);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("form", { onSubmit: handleSubmit, className: "p-4 space-y-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("label", { className: "block text-sm font-medium", children: t("superadmin.marketing.adForm.imageUrl") }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center gap-2 mt-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("input", { name: "imageUrl", value: data.imageUrl, onChange: handleChange, placeholder: "https://... ou t\xE9l\xE9verser", className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("label", { htmlFor: "ad-image-upload", className: "cursor-pointer bg-gray-200 dark:bg-gray-600 px-3 py-2 rounded-md text-sm font-medium whitespace-nowrap", children: [
            t("superadmin.settings.identity.upload"),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("input", { id: "ad-image-upload", type: "file", className: "sr-only", onChange: handleFileChange, accept: "image/*" })
          ] })
        ] }),
        data.imageUrl && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("img", { src: data.imageUrl, alt: "Aper\xE7u", className: "h-20 mt-2 object-contain rounded" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("input", { name: "linkUrl", value: data.linkUrl, onChange: handleChange, placeholder: t("superadmin.marketing.adForm.linkUrl"), className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("label", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("input", { type: "checkbox", name: "isActive", checked: data.isActive, onChange: handleChange }),
        " ",
        t("superadmin.marketing.adForm.activate")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex justify-end gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("button", { type: "button", onClick: onCancel, className: "px-4 py-2 bg-gray-200 rounded", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("button", { type: "submit", className: "px-4 py-2 bg-blue-500 text-white rounded", children: t("common.save") })
      ] })
    ] });
  };
  var MarketingPanel = (props) => {
    const { flashSales, onSaveFlashSale, allProducts, onUpdateFlashSaleSubmissionStatus, onBatchUpdateFlashSaleStatus, advertisements, onAddAdvertisement, onUpdateAdvertisement, onDeleteAdvertisement, allAnnouncements, onCreateOrUpdateAnnouncement } = props;
    const { t } = useLanguage();
    const [subTab, setSubTab] = (0, import_react44.useState)("flashSales");
    const [isCreatingFlashSale, setIsCreatingFlashSale] = (0, import_react44.useState)(false);
    const [isAdFormOpen, setIsAdFormOpen] = (0, import_react44.useState)(false);
    const [editingAd, setEditingAd] = (0, import_react44.useState)(null);
    const [isAnnouncementFormOpen, setIsAnnouncementFormOpen] = (0, import_react44.useState)(false);
    const [editingAnnouncement, setEditingAnnouncement] = (0, import_react44.useState)(null);
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "p-4 sm:p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex border-b dark:border-gray-700 mb-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(PanelButton, { tab: "flashSales", label: t("superadmin.marketing.tabs.flashSales"), activeTab: subTab, setActiveTab: setSubTab }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(PanelButton, { tab: "ads", label: t("superadmin.marketing.tabs.ads"), activeTab: subTab, setActiveTab: setSubTab }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(PanelButton, { tab: "announcements", label: t("superadmin.marketing.tabs.announcements"), activeTab: subTab, setActiveTab: setSubTab })
      ] }),
      subTab === "flashSales" && /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("button", { onClick: () => setIsCreatingFlashSale(true), className: "bg-green-500 text-white font-bold py-2 px-4 rounded-lg mb-4 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(PlusIcon, { className: "w-5 h-5" }),
          " ",
          t("superadmin.marketing.createFlashSale")
        ] }),
        isCreatingFlashSale && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(FlashSaleForm_default, { onSave: (data) => {
          onSaveFlashSale(data);
          setIsCreatingFlashSale(false);
        }, onCancel: () => setIsCreatingFlashSale(false) }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "space-y-4 mt-4", children: flashSales.map((sale) => /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("details", { className: "p-3 bg-gray-50 dark:bg-gray-700/50 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("summary", { className: "font-semibold cursor-pointer", children: sale.name }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(FlashSaleDetailView_default, { sale, allProducts, onUpdateStatus: onUpdateFlashSaleSubmissionStatus, onBatchUpdateStatus: onBatchUpdateFlashSaleStatus })
        ] }, sale.id)) })
      ] }),
      subTab === "ads" && /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { children: [
        !isAdFormOpen && /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("button", { onClick: () => {
          setEditingAd(null);
          setIsAdFormOpen(true);
        }, className: "bg-green-500 text-white font-bold py-2 px-4 rounded-lg mb-4 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(PlusIcon, { className: "w-5 h-5" }),
          " ",
          t("superadmin.marketing.addAd")
        ] }),
        isAdFormOpen && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(AdForm, { ad: editingAd, onSave: (data) => {
          if (editingAd) {
            onUpdateAdvertisement(editingAd.id, data);
          } else {
            onAddAdvertisement(data);
          }
          setIsAdFormOpen(false);
        }, onCancel: () => setIsAdFormOpen(false) }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "space-y-2 mt-4", children: advertisements.map((ad) => /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-700/50 rounded-md flex justify-between items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center gap-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("img", { src: ad.imageUrl, alt: "Ad preview", className: "w-24 h-12 object-contain rounded" }),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("a", { href: ad.linkUrl, target: "_blank", rel: "noopener noreferrer", className: "font-semibold hover:underline", children: ad.linkUrl }),
              /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("p", { className: `text-xs px-2 py-0.5 rounded-full inline-block mt-1 ${ad.isActive ? "bg-green-200 text-green-800" : "bg-gray-200 text-gray-800"}`, children: ad.isActive ? "Active" : "Inactive" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("button", { onClick: () => {
              setEditingAd(ad);
              setIsAdFormOpen(true);
            }, className: "text-blue-500", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(PencilSquareIcon, { className: "w-5 h-5" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("button", { onClick: () => onDeleteAdvertisement(ad.id), className: "text-red-500", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(TrashIcon, { className: "w-5 h-5" }) })
          ] })
        ] }, ad.id)) })
      ] }),
      subTab === "announcements" && /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { children: [
        !isAnnouncementFormOpen && /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("button", { onClick: () => {
          setEditingAnnouncement(null);
          setIsAnnouncementFormOpen(true);
        }, className: "bg-green-500 text-white font-bold py-2 px-4 rounded-lg mb-4 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(PlusIcon, { className: "w-5 h-5" }),
          " ",
          t("superadmin.marketing.createAnnouncement")
        ] }),
        isAnnouncementFormOpen && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(AnnouncementForm, { announcement: editingAnnouncement, onSave: (data) => {
          onCreateOrUpdateAnnouncement(data);
          setIsAnnouncementFormOpen(false);
        }, onCancel: () => setIsAnnouncementFormOpen(false) }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "space-y-2 mt-4", children: allAnnouncements.map((ann) => /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-700/50 rounded-md flex justify-between items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("p", { className: "font-semibold", children: [
              ann.title,
              " ",
              /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("span", { className: `text-xs px-2 py-0.5 rounded-full ${ann.isActive ? "bg-green-200 text-green-800" : "bg-gray-200 text-gray-800"}`, children: ann.isActive ? "Active" : "Inactive" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("p", { className: "text-sm", children: ann.content })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("button", { onClick: () => {
            setEditingAnnouncement(ann);
            setIsAnnouncementFormOpen(true);
          }, className: "text-blue-500", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(PencilSquareIcon, { className: "w-5 h-5" }) })
        ] }, ann.id)) })
      ] })
    ] });
  };

  // components/admin/StoresPanel.tsx
  var import_react45 = __toESM(require_react(), 1);
  var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);
  var DocumentStatusBadge = ({ status }) => {
    const styles = {
      requested: "bg-gray-200 text-gray-700",
      uploaded: "bg-blue-100 text-blue-700",
      verified: "bg-green-100 text-green-700",
      rejected: "bg-red-100 text-red-700"
    };
    return /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("span", { className: `px-2 py-0.5 text-xs font-semibold rounded-full ${styles[status]}`, children: status });
  };
  var WarningDetailsModal = ({ store, onClose, t }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4 animate-in", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 max-w-lg w-full", onClick: (e) => e.stopPropagation(), children: [
      /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "flex justify-between items-center mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("h3", { className: "text-lg font-bold", children: t("superadmin.stores.warningsFor", store.name) }),
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("button", { onClick: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(XIcon, { className: "w-6 h-6 text-gray-500 hover:text-gray-800 dark:hover:text-gray-200" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "space-y-3 max-h-80 overflow-y-auto", children: store.warnings.map((warning) => /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "p-3 bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-400", children: [
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("p", { className: "font-semibold text-sm", children: t("superadmin.stores.warningOnDate", new Date(warning.date).toLocaleString("fr-FR")) }),
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("p", { className: "text-gray-700 dark:text-gray-300", children: warning.reason })
      ] }, warning.id)) })
    ] }) });
  };
  var StoresPanel = ({ allStores, onApproveStore, onRejectStore, onToggleStoreStatus, onWarnStore, onUpdateDocumentStatus, onToggleStoreCertification }) => {
    const { t } = useLanguage();
    const [activeTab, setActiveTab] = (0, import_react45.useState)("pending");
    const [viewingWarningsFor, setViewingWarningsFor] = (0, import_react45.useState)(null);
    const storesByStatus = {
      pending: allStores.filter((s) => s.status === "pending"),
      active: allStores.filter((s) => s.status === "active"),
      suspended: allStores.filter((s) => s.status === "suspended"),
      rejected: allStores.filter((s) => s.status === "rejected")
    };
    const tabLabels = {
      pending: t("superadmin.stores.tabs.pending"),
      active: t("superadmin.stores.tabs.active"),
      suspended: t("superadmin.stores.tabs.suspended"),
      rejected: t("superadmin.stores.tabs.rejected")
    };
    return /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "p-4 sm:p-6", children: [
      viewingWarningsFor && /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(WarningDetailsModal, { store: viewingWarningsFor, onClose: () => setViewingWarningsFor(null), t }),
      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.stores.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "flex border-b dark:border-gray-700 mb-4", children: Object.keys(storesByStatus).map((status) => /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("button", { onClick: () => setActiveTab(status), className: `px-4 py-2 font-semibold capitalize ${activeTab === status ? "border-b-2 border-kmer-green text-kmer-green" : "text-gray-500 dark:text-gray-400"}`, children: [
        tabLabels[status],
        " (",
        storesByStatus[status].length,
        ")"
      ] }, status)) }),
      /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "overflow-x-auto", children: [
        /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("table", { className: "w-full text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("th", { className: "p-2 text-left", children: t("superadmin.stores.table.store") }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("th", { className: "p-2 text-left", children: t("superadmin.stores.table.seller") }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("th", { className: "p-2 text-left", children: t("superadmin.stores.table.documents") }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("th", { className: "p-2 text-left", children: t("superadmin.stores.table.location") }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("th", { className: "p-2 text-center", children: t("superadmin.stores.table.certified") }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("th", { className: "p-2 text-center", children: t("common.actions") })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("tbody", { children: storesByStatus[activeTab].map((store) => /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
            /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("td", { className: "p-2 font-semibold", children: [
              store.name,
              store.warnings && store.warnings.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("button", { onClick: () => setViewingWarningsFor(store), className: "ml-2 bg-yellow-100 text-yellow-800 text-xs font-bold px-2 py-0.5 rounded-full hover:bg-yellow-200", children: [
                store.warnings.length,
                " ",
                t("superadmin.stores.warningsSuffix")
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("td", { className: "p-2", children: [
              store.sellerFirstName,
              " ",
              store.sellerLastName
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("td", { className: "p-2 align-top", children: [
              store.documents.map((doc) => /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "mb-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(DocumentStatusBadge, { status: doc.status }),
                  /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("span", { children: doc.name }),
                  doc.fileUrl && doc.fileUrl !== "..." && /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("a", { href: doc.fileUrl, target: "_blank", rel: "noopener noreferrer", title: t("superadmin.stores.viewDocument"), className: "text-blue-500 hover:underline", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(DocumentTextIcon, { className: "w-4 h-4" }) }),
                  doc.status === "uploaded" && /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "flex items-center", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("button", { onClick: () => onUpdateDocumentStatus(store.id, doc.name, "verified"), className: "p-1 text-green-500", title: t("common.approve"), children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(CheckIcon, { className: "w-4 h-4" }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("button", { onClick: () => {
                      const reason = prompt(t("superadmin.stores.rejectionReason"));
                      if (reason) onUpdateDocumentStatus(store.id, doc.name, "rejected", reason);
                    }, className: "p-1 text-red-500", title: t("common.reject"), children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(XIcon, { className: "w-4 h-4" }) })
                  ] })
                ] }),
                doc.status === "rejected" && doc.rejectionReason && /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("p", { className: "text-xs text-red-500 pl-2", children: [
                  t("superadmin.stores.rejectionReasonText"),
                  ": ",
                  doc.rejectionReason
                ] })
              ] }, doc.name)),
              store.documents.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("span", { className: "text-xs text-gray-400", children: "Aucun" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("td", { className: "p-2", children: store.location }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("td", { className: "p-2 text-center", children: store.isCertified ? /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(CheckCircleIcon, { className: "w-5 h-5 text-green-500 mx-auto", title: "Certifi\xE9" }) : /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("span", { className: "text-gray-400", children: "-" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("td", { className: "p-2", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "flex justify-center gap-2", children: [
              activeTab === "pending" && /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(import_jsx_runtime59.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("button", { onClick: () => onApproveStore(store), className: "text-green-500 flex items-center gap-1 text-xs font-bold", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(CheckCircleIcon, { className: "w-4 h-4" }),
                  " ",
                  t("common.approve")
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("button", { onClick: () => onRejectStore(store), className: "text-red-500 flex items-center gap-1 text-xs font-bold", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(XCircleIcon, { className: "w-4 h-4" }),
                  " ",
                  t("common.reject")
                ] })
              ] }),
              activeTab === "active" && /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(import_jsx_runtime59.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("button", { onClick: () => onToggleStoreCertification(store.id), className: `flex items-center gap-1 text-xs font-bold ${store.isCertified ? "text-yellow-600" : "text-green-600"}`, title: store.isCertified ? "Retirer la certification" : "Certifier la boutique", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(ShieldCheckIcon, { className: "w-4 h-4" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("button", { onClick: () => onToggleStoreStatus(store.id, "active"), className: "text-red-500 flex items-center gap-1 text-xs font-bold", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(XCircleIcon, { className: "w-4 h-4" }),
                  " ",
                  t("superadmin.stores.tabs.suspended")
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("button", { onClick: () => {
                  const reason = prompt(`${t("superadmin.stores.warnReason")}:`);
                  if (reason) onWarnStore(store.id, reason);
                }, className: "text-yellow-500 flex items-center gap-1 text-xs font-bold", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(ExclamationTriangleIcon, { className: "w-4 h-4" }),
                  " ",
                  t("common.warn")
                ] })
              ] }),
              activeTab === "suspended" && /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("button", { onClick: () => onToggleStoreStatus(store.id, "suspended"), className: "text-green-500 flex items-center gap-1 text-xs font-bold", children: [
                /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(CheckCircleIcon, { className: "w-4 h-4" }),
                " ",
                t("superadmin.stores.tabs.active")
              ] }),
              activeTab === "rejected" && /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("span", { className: "text-xs text-gray-500 italic", children: "Aucune action" })
            ] }) })
          ] }, store.id)) })
        ] }),
        storesByStatus[activeTab].length === 0 && /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("p", { className: "text-center text-gray-500 py-8", children: t("superadmin.stores.noStores") })
      ] })
    ] });
  };

  // components/admin/OrdersPanel.tsx
  var import_react46 = __toESM(require_react(), 1);
  var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
  var AllOrdersView = ({ orders }) => {
    const { t, language } = useLanguage();
    const [searchTerm, setSearchTerm] = (0, import_react46.useState)("");
    const [statusFilter, setStatusFilter] = (0, import_react46.useState)("");
    const filteredOrders = (0, import_react46.useMemo)(() => {
      return orders.filter((o) => {
        const searchMatch = o.id.toLowerCase().includes(searchTerm.toLowerCase()) || o.shippingAddress.fullName.toLowerCase().includes(searchTerm.toLowerCase());
        const statusMatch = !statusFilter || o.status === statusFilter;
        return searchMatch && statusMatch;
      });
    }, [orders, searchTerm, statusFilter]);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "flex flex-col sm:flex-row gap-4 mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("input", { type: "text", placeholder: t("superadmin.orders.searchPlaceholder"), value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: "p-2 border rounded-md w-full sm:w-1/2 dark:bg-gray-700 dark:border-gray-600" }),
        /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("select", { value: statusFilter, onChange: (e) => setStatusFilter(e.target.value), className: "p-2 border rounded-md w-full sm:w-auto dark:bg-gray-700 dark:border-gray-600", children: [
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("option", { value: "", children: t("superadmin.orders.allStatuses") }),
          Object.keys(translations[language]?.orderStatus || translations.fr.orderStatus).map((key) => /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("option", { value: key, children: t(`orderStatus.${key}`) }, key))
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "overflow-x-auto", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("table", { className: "w-full text-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("th", { className: "p-2 text-left", children: t("common.orderId") }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("th", { className: "p-2 text-left", children: t("common.customer") }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("th", { className: "p-2 text-left", children: t("common.date") }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("th", { className: "p-2 text-right", children: t("common.total") }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("th", { className: "p-2 text-center", children: t("common.status") })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("tbody", { children: filteredOrders.map((order) => /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("td", { className: "p-2 font-mono", children: order.id }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("td", { className: "p-2", children: order.shippingAddress.fullName }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("td", { className: "p-2", children: new Date(order.orderDate).toLocaleDateString() }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("td", { className: "p-2 text-right font-semibold", children: [
            order.total.toLocaleString("fr-CM"),
            " FCFA"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("td", { className: "p-2 text-center", children: t(`orderStatus.${order.status}`, order.status) })
        ] }, order.id)) })
      ] }) })
    ] });
  };
  var OrdersPanel2 = ({ allOrders, onUpdateOrderStatus, onResolveDispute }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "p-4 sm:p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.orders.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(AllOrdersView, { orders: allOrders })
    ] });
  };

  // components/admin/LogisticsPanel.tsx
  var import_react47 = __toESM(require_react(), 1);
  var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);
  var StaffModal = ({ point, manager, staff, onClose }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex justify-between items-center mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("h3", { className: "text-lg font-bold", children: t("superadmin.logistics.staffModal.title", point.name) }),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("button", { onClick: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(XIcon, { className: "w-6 h-6" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("h4", { className: "font-bold text-md mb-2", children: t("superadmin.logistics.staffModal.manager") }),
        manager ? /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "p-2 bg-yellow-100 dark:bg-yellow-900/50 rounded-md border-l-4 border-yellow-500", children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "font-semibold", children: manager.name }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "text-sm text-gray-500", children: manager.email })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "text-sm text-gray-500", children: t("superadmin.logistics.staffModal.noManager") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "mt-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("h4", { className: "font-bold text-md mb-2", children: t("superadmin.logistics.staffModal.staff") }),
        staff.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("ul", { className: "space-y-2 max-h-60 overflow-y-auto", children: staff.map((agent) => /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("li", { className: "p-2 bg-gray-100 dark:bg-gray-700 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "font-semibold", children: agent.name }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "text-sm text-gray-500", children: agent.email })
        ] }, agent.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "text-center text-gray-500 text-sm py-4", children: t("superadmin.logistics.staffModal.noStaff") })
      ] })
    ] }) });
  };
  var PointForm = ({ point, onSave, onCancel }) => {
    const { t } = useLanguage();
    const [data, setData] = (0, import_react47.useState)({
      id: point?.id,
      name: point?.name || "",
      city: point?.city || "Douala",
      neighborhood: point?.neighborhood || "",
      street: point?.street || "",
      latitude: point?.latitude || 4.05,
      longitude: point?.longitude || 9.75
    });
    const mapContainerRef = (0, import_react47.useRef)(null);
    const mapRef = (0, import_react47.useRef)(null);
    const markerRef = (0, import_react47.useRef)(null);
    (0, import_react47.useEffect)(() => {
      if (mapContainerRef.current && !mapRef.current) {
        const initialLatLng = [data.latitude, data.longitude];
        mapRef.current = L.map(mapContainerRef.current).setView(initialLatLng, 13);
        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(mapRef.current);
        const updateMarker = (latlng) => {
          setData((prev) => ({ ...prev, latitude: latlng.lat, longitude: latlng.lng }));
          if (!markerRef.current) {
            markerRef.current = L.marker(latlng, { draggable: true }).addTo(mapRef.current);
            markerRef.current.on("dragend", (e) => updateMarker(e.target.getLatLng()));
          } else {
            markerRef.current.setLatLng(latlng);
          }
        };
        updateMarker({ lat: data.latitude, lng: data.longitude });
        mapRef.current.on("click", (e) => updateMarker(e.latlng));
        setTimeout(() => mapRef.current?.invalidateSize(), 100);
      }
    }, []);
    const handleChange = (e) => {
      setData((d) => ({ ...d, [e.target.name]: e.target.value }));
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onSave(data);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("form", { onSubmit: handleSubmit, className: "p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg space-y-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("input", { name: "name", value: data.name, onChange: handleChange, placeholder: t("superadmin.logistics.form.name"), className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true }),
      /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("input", { name: "city", value: data.city, onChange: handleChange, placeholder: t("superadmin.logistics.form.city"), className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("input", { name: "neighborhood", value: data.neighborhood, onChange: handleChange, placeholder: t("superadmin.logistics.form.neighborhood"), className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600", required: true })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("input", { name: "street", value: data.street, onChange: handleChange, placeholder: t("superadmin.logistics.form.street"), className: "w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }),
      /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { ref: mapContainerRef, className: "h-48 w-full rounded-md z-0" }),
      /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex justify-end gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("button", { type: "button", onClick: onCancel, className: "px-4 py-2 bg-gray-200 rounded", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("button", { type: "submit", className: "px-4 py-2 bg-blue-500 text-white rounded", children: t("common.save") })
      ] })
    ] });
  };
  var LogisticsPanel = ({ allPickupPoints, allUsers, onAddPickupPoint, onUpdatePickupPoint, onDeletePickupPoint }) => {
    const { t } = useLanguage();
    const [isFormOpen, setIsFormOpen] = (0, import_react47.useState)(false);
    const [editingPoint, setEditingPoint] = (0, import_react47.useState)(null);
    const [viewingStaffFor, setViewingStaffFor] = (0, import_react47.useState)(null);
    const staffAndManagerForPoint = (0, import_react47.useMemo)(() => {
      if (!viewingStaffFor) return { manager: void 0, staff: [] };
      const manager = allUsers.find((user) => user.id === viewingStaffFor.managerId);
      const staff = allUsers.filter((user) => (user.role === "depot_agent" || user.role === "depot_manager") && user.depotId === viewingStaffFor.id && user.id !== viewingStaffFor.managerId);
      return { manager, staff };
    }, [viewingStaffFor, allUsers]);
    const handleSave = (data) => {
      if (editingPoint) {
        onUpdatePickupPoint(data);
      } else {
        onAddPickupPoint(data);
      }
      setIsFormOpen(false);
      setEditingPoint(null);
    };
    const handleCancel = () => {
      setIsFormOpen(false);
      setEditingPoint(null);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "p-4 sm:p-6", children: [
      viewingStaffFor && /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(StaffModal, { point: viewingStaffFor, manager: staffAndManagerForPoint.manager, staff: staffAndManagerForPoint.staff, onClose: () => setViewingStaffFor(null) }),
      /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.logistics.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "mb-4", children: [
        !isFormOpen && /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("button", { onClick: () => setIsFormOpen(true), className: "bg-green-500 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(PlusIcon, { className: "w-5 h-5" }),
          " ",
          t("superadmin.logistics.addPickupPoint")
        ] }),
        isFormOpen && /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "mt-4", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(PointForm, { point: editingPoint, onSave: handleSave, onCancel: handleCancel }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "space-y-2", children: allPickupPoints.map((point) => /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "p-3 bg-gray-100 dark:bg-gray-700/50 rounded-md flex justify-between items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "font-semibold", children: point.name }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("p", { className: "text-sm", children: [
            point.street,
            ", ",
            point.neighborhood,
            ", ",
            point.city
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("button", { onClick: () => setViewingStaffFor(point), className: "text-blue-500 flex items-center gap-1 text-sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(UsersIcon, { className: "w-4 h-4" }),
            " ",
            t("superadmin.logistics.viewStaff")
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("button", { onClick: () => {
            setEditingPoint(point);
            setIsFormOpen(true);
          }, className: "text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(PencilSquareIcon, { className: "w-5 h-5" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("button", { onClick: () => onDeletePickupPoint(point.id), className: "text-red-500", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(TrashIcon, { className: "w-5 h-5" }) })
        ] })
      ] }, point.id)) })
    ] });
  };

  // components/admin/PayoutsPanel.tsx
  var import_react48 = __toESM(require_react(), 1);
  var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
  var PayoutsPanel2 = ({ allOrders, allStores, payouts, onPayoutSeller, siteSettings }) => {
    const { t } = useLanguage();
    const getCommissionRate = (store) => {
      switch (store.premiumStatus) {
        case "premium":
          return siteSettings.premiumPlan.commissionRate / 100;
        case "super_premium":
          return siteSettings.superPremiumPlan.commissionRate / 100;
        default:
          return siteSettings.commissionRate / 100;
      }
    };
    const payoutData = (0, import_react48.useMemo)(() => {
      return allStores.filter((s) => s.status === "active").map((store) => {
        const commissionRate = getCommissionRate(store);
        const storeOrders = allOrders.filter((o) => o.status === "delivered" && o.items.some((i) => i.vendor === store.name));
        const totalRevenue = storeOrders.reduce((sum, order) => {
          const sellerItemsTotal = order.items.filter((item) => item.vendor === store.name).reduce((itemSum, item) => itemSum + (item.promotionPrice ?? item.price) * item.quantity, 0);
          return sum + sellerItemsTotal;
        }, 0);
        const paidAmount = payouts.filter((p) => p.storeId === store.id).reduce((sum, p) => sum + p.amount, 0);
        const totalCommission = totalRevenue * commissionRate;
        const balanceDue = totalRevenue - totalCommission - paidAmount;
        return {
          storeId: store.id,
          storeName: store.name,
          totalRevenue,
          totalCommission,
          paidAmount,
          balanceDue
        };
      }).filter((data) => data.balanceDue > 0);
    }, [allOrders, allStores, payouts, siteSettings]);
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "p-4 sm:p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.payouts.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "mb-6 p-4 bg-blue-50 dark:bg-blue-900/50 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("p", { className: "font-semibold", children: t("superadmin.payouts.commissionInfo", siteSettings.commissionRate) }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("p", { className: "text-sm", children: t("superadmin.payouts.balanceInfo") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "overflow-x-auto", children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("table", { className: "w-full text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("th", { className: "p-2 text-left", children: t("superadmin.payouts.table.store") }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("th", { className: "p-2 text-right", children: t("superadmin.payouts.table.totalRevenue") }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("th", { className: "p-2 text-right", children: t("superadmin.payouts.table.commissionDue") }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("th", { className: "p-2 text-right", children: t("superadmin.payouts.table.paidAmount") }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("th", { className: "p-2 text-right", children: t("superadmin.payouts.table.balanceDue") }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("th", { className: "p-2 text-center", children: t("common.actions") })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("tbody", { children: payoutData.map((data) => /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("td", { className: "p-2 font-semibold", children: data.storeName }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("td", { className: "p-2 text-right", children: [
              data.totalRevenue.toLocaleString("fr-CM"),
              " F"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("td", { className: "p-2 text-right text-red-500", children: [
              "-",
              data.totalCommission.toLocaleString("fr-CM"),
              " F"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("td", { className: "p-2 text-right text-green-500", children: [
              data.paidAmount.toLocaleString("fr-CM"),
              " F"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("td", { className: "p-2 text-right font-bold", children: [
              data.balanceDue.toLocaleString("fr-CM"),
              " F"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("td", { className: "p-2 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("button", { onClick: () => onPayoutSeller(data.storeId, data.balanceDue), className: "bg-green-500 text-white text-xs font-bold py-1 px-3 rounded-md hover:bg-green-600", children: t("superadmin.payouts.markAsPaid") }) })
          ] }, data.storeId)) })
        ] }),
        payoutData.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("p", { className: "text-center text-gray-500 py-8", children: t("superadmin.payouts.noPending") })
      ] })
    ] });
  };

  // components/admin/SupportPanel.tsx
  var import_react49 = __toESM(require_react(), 1);
  var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);
  var AttachmentPreview3 = ({ attachments, onRemove }) => /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "mt-2 grid grid-cols-3 sm:grid-cols-5 gap-2", children: attachments.map((url, i) => /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "relative group", children: [
    /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("img", { src: url, alt: `Aper\xE7u ${i}`, className: "h-20 w-full object-cover rounded-md" }),
    /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("button", { type: "button", onClick: () => onRemove(i), className: "absolute -top-1 -right-1 bg-red-500 text-white rounded-full p-0.5 opacity-0 group-hover:opacity-100 transition-opacity", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(TrashIcon, { className: "w-4 h-4" }) })
  ] }, i)) });
  var MessageAttachments2 = ({ urls }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "mt-2 flex flex-wrap gap-2", children: urls.map((url, i) => {
      const isImage = /\.(jpeg|jpg|gif|png|webp)$/i.test(url) || url.startsWith("data:image");
      if (isImage) {
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("a", { href: url, target: "_blank", rel: "noopener noreferrer", className: "block", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("img", { src: url, alt: `${t("accountPage.attachment")} ${i + 1}`, className: "h-24 w-auto rounded-md object-contain border dark:border-gray-600" }) }, i);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("a", { href: url, target: "_blank", rel: "noopener noreferrer", className: "text-blue-500 underline text-sm flex items-center gap-1 p-2 bg-blue-50 dark:bg-blue-900/50 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(PaperclipIcon, { className: "w-4 h-4" }),
        t("accountPage.attachment"),
        " ",
        i + 1
      ] }, i);
    }) });
  };
  var TicketDetail = ({ ticket, onReply, onStatusChange, onBack }) => {
    const { t } = useLanguage();
    const [reply, setReply] = (0, import_react49.useState)("");
    const [attachments, setAttachments] = (0, import_react49.useState)([]);
    const handleFileChange = (e) => {
      if (e.target.files) {
        const files = Array.from(e.target.files);
        files.forEach((file) => {
          const reader = new FileReader();
          reader.onloadend = () => setAttachments((prev) => [...prev, reader.result]);
          reader.readAsDataURL(file);
        });
      }
    };
    const removeAttachment = (index) => {
      setAttachments((prev) => prev.filter((_, i) => i !== index));
    };
    const handleSubmit = () => {
      if (!reply.trim()) return;
      onReply(ticket.id, reply, attachments);
      setReply("");
      setAttachments([]);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("button", { onClick: onBack, className: "text-sm font-semibold text-blue-500 mb-4", children: t("superadmin.support.detail.back") }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("h3", { className: "font-bold", children: ticket.subject }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("p", { className: "text-sm", children: [
        t("superadmin.support.detail.user"),
        ": ",
        ticket.userName
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "my-4 p-2 bg-gray-100 dark:bg-gray-900/50 rounded-lg max-h-60 overflow-y-auto space-y-2", children: ticket.messages.map((msg, i) => /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "p-2 bg-white dark:bg-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "font-semibold text-xs", children: msg.authorName }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "whitespace-pre-wrap", children: msg.message }),
        msg.attachmentUrls && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(MessageAttachments2, { urls: msg.attachmentUrls })
      ] }, i)) }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("textarea", { value: reply, onChange: (e) => setReply(e.target.value), placeholder: t("superadmin.support.detail.replyPlaceholder"), rows: 3, className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "mt-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("label", { htmlFor: "admin-attachments-upload", className: "cursor-pointer text-sm font-semibold text-blue-500 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(PaperclipIcon, { className: "w-4 h-4" }),
          " ",
          t("accountPage.attachFiles")
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("input", { id: "admin-attachments-upload", type: "file", multiple: true, onChange: handleFileChange, className: "hidden" }),
        attachments.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(AttachmentPreview3, { attachments, onRemove: removeAttachment })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex justify-between items-center mt-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("select", { value: ticket.status, onChange: (e) => onStatusChange(ticket.id, e.target.value), className: "p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("option", { value: "Ouvert", children: t("superadmin.support.status.open") }),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("option", { value: "En cours", children: t("superadmin.support.status.inProgress") }),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("option", { value: "R\xE9solu", children: t("superadmin.support.status.resolved") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("button", { onClick: handleSubmit, className: "bg-blue-500 text-white px-4 py-2 rounded-lg", children: t("superadmin.support.detail.reply") })
      ] })
    ] });
  };
  var SupportPanel2 = ({ allTickets, onAdminReplyToTicket, onAdminUpdateTicketStatus, onCreateTicket }) => {
    const { t } = useLanguage();
    const [selectedTicket, setSelectedTicket] = (0, import_react49.useState)(null);
    const [isCreating, setIsCreating] = (0, import_react49.useState)(false);
    if (selectedTicket) {
      return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "p-4 sm:p-6", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(TicketDetail, { ticket: selectedTicket, onReply: onAdminReplyToTicket, onStatusChange: onAdminUpdateTicketStatus, onBack: () => setSelectedTicket(null) }) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "p-4 sm:p-6", children: [
      isCreating && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-2xl p-6 max-w-lg w-full relative", children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("button", { onClick: () => setIsCreating(false), className: "absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(XIcon, { className: "h-6 w-6" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
          NewTicketForm,
          {
            userOrders: [],
            onCreate: (subject, message, orderId, type, attachments) => {
              onCreateTicket(subject, message, orderId, type, attachments);
              setIsCreating(false);
            },
            onCancel: () => setIsCreating(false)
          }
        )
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex justify-between items-center mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("h2", { className: "text-xl font-bold", children: t("superadmin.support.title", allTickets.length) }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("button", { onClick: () => setIsCreating(true), className: "bg-green-500 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(PlusIcon, { className: "w-5 h-5" }),
          " ",
          t("superadmin.support.createTicket")
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "space-y-2", children: allTickets.map((ticket) => /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("button", { onClick: () => setSelectedTicket(ticket), className: "w-full text-left p-3 border dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700/50 flex justify-between items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "font-semibold", children: ticket.subject }),
            ticket.type === "service_request" && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("span", { className: "text-xs font-semibold bg-blue-100 text-blue-800 px-2 py-0.5 rounded-full", children: "Demande de Service" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "text-sm text-gray-500", children: ticket.userName }),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("p", { className: "text-xs text-gray-500", children: [
            "Derni\xE8re mise \xE0 jour: ",
            new Date(ticket.updatedAt).toLocaleDateString()
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("span", { className: `px-2 py-1 text-xs font-semibold rounded-full ${ticket.status === "R\xE9solu" ? "bg-green-200 text-green-800" : "bg-yellow-200 text-yellow-800"}`, children: ticket.status })
      ] }, ticket.id)) })
    ] });
  };

  // components/admin/LogsPanel.tsx
  var import_react50 = __toESM(require_react(), 1);
  var import_jsx_runtime64 = __toESM(require_jsx_runtime(), 1);
  var LogsPanel = ({ siteActivityLogs }) => {
    const { t } = useLanguage();
    const [filter, setFilter] = (0, import_react50.useState)("");
    const filteredLogs = (0, import_react50.useMemo)(() => {
      const sortedLogs = [...siteActivityLogs].sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
      if (!filter) return sortedLogs;
      const lowerFilter = filter.toLowerCase();
      return sortedLogs.filter(
        (log) => log.user.name.toLowerCase().includes(lowerFilter) || log.action.toLowerCase().includes(lowerFilter) || log.details.toLowerCase().includes(lowerFilter)
      );
    }, [siteActivityLogs, filter]);
    return /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "p-4 sm:p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.logs.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
        "input",
        {
          type: "text",
          placeholder: t("superadmin.logs.filterPlaceholder"),
          value: filter,
          onChange: (e) => setFilter(e.target.value),
          className: "w-full p-2 border rounded-md mb-4 dark:bg-gray-700 dark:border-gray-600"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "space-y-2 max-h-[70vh] overflow-y-auto pr-2", children: [
        filteredLogs.map((log) => /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-900/50 rounded-md text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("p", { className: "font-mono text-xs text-gray-400 dark:text-gray-500", children: new Date(log.timestamp).toLocaleString("fr-FR") }),
          /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("span", { className: "font-semibold", children: log.user.name }),
            " (",
            log.user.role,
            ") ",
            t("superadmin.logs.performedAction"),
            /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("span", { className: "font-bold text-kmer-green ml-1", children: log.action })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("p", { className: "text-gray-600 dark:text-gray-300", children: [
            t("superadmin.logs.details"),
            " ",
            log.details
          ] })
        ] }, log.id)),
        filteredLogs.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "text-center py-8 text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("p", { children: t("superadmin.logs.noLogs") }) })
      ] })
    ] });
  };

  // components/admin/SettingsPanel.tsx
  var import_react51 = __toESM(require_react(), 1);
  var import_jsx_runtime65 = __toESM(require_jsx_runtime(), 1);
  var Field = ({ label, children, description }) => /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: label }),
    children,
    description && /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("p", { className: "mt-1 text-xs text-gray-500 dark:text-gray-400", children: description })
  ] });
  var ImageUrlOrUpload = ({ label, name, value, preview, onChange }) => {
    const { t } = useLanguage();
    const handleFileChange = (e) => {
      if (e.target.files && e.target.files[0]) {
        const reader = new FileReader();
        reader.onloadend = () => {
          const syntheticEvent = {
            target: { name, value: reader.result, type: "text" }
          };
          onChange(syntheticEvent);
        };
        reader.readAsDataURL(e.target.files[0]);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(Field, { label, children: [
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
          "input",
          {
            type: "url",
            name,
            value: value || "",
            onChange,
            placeholder: "https://... ou t\xE9l\xE9verser",
            className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("label", { htmlFor: `${name}-upload`, className: "cursor-pointer bg-gray-200 dark:bg-gray-600 px-3 py-2 rounded-md text-sm font-medium whitespace-nowrap", children: [
          t("superadmin.settings.identity.upload"),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { id: `${name}-upload`, type: "file", className: "sr-only", onChange: handleFileChange, accept: "image/*" })
        ] })
      ] }),
      preview && /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "mt-2 p-2 bg-gray-100 dark:bg-gray-700 rounded-md inline-block", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("img", { src: preview, alt: "Aper\xE7u", className: "h-12 object-contain" }) })
    ] });
  };
  var SettingsPanel = ({ siteSettings, onUpdateSiteSettings, siteContent, onUpdateSiteContent, paymentMethods, onUpdatePaymentMethods }) => {
    const { t } = useLanguage();
    const [settings, setSettings] = (0, import_react51.useState)(siteSettings);
    const [content, setContent] = (0, import_react51.useState)(siteContent);
    const [localPaymentMethods, setLocalPaymentMethods] = (0, import_react51.useState)(paymentMethods);
    const handleSettingsChange = (e) => {
      const { name, value, type } = e.target;
      const checked = e.target.checked;
      const valueToSet = (() => {
        if (type === "checkbox") {
          return checked;
        }
        if (type === "number") {
          const num = parseFloat(value);
          return isNaN(num) ? null : num;
        }
        return value;
      })();
      const keys = name.split(".");
      if (keys.length > 1) {
        setSettings((s) => {
          const newSettings = JSON.parse(JSON.stringify(s));
          let current = newSettings;
          for (let i = 0; i < keys.length - 1; i++) {
            current = current[keys[i]];
          }
          current[keys[keys.length - 1]] = valueToSet;
          return newSettings;
        });
      } else {
        setSettings((s) => ({ ...s, [name]: valueToSet }));
      }
    };
    const handleRequiredDocsChange = (docName, isRequired) => {
      setSettings((s) => ({
        ...s,
        requiredSellerDocuments: {
          ...s.requiredSellerDocuments,
          [docName]: isRequired
        }
      }));
    };
    const handleBenefitsChange = (plan, value) => {
      setSettings((s) => {
        const newSettings = JSON.parse(JSON.stringify(s));
        newSettings.customerLoyaltyProgram[plan].benefits = value.split("\n").filter((b) => b.trim() !== "");
        return newSettings;
      });
    };
    const handleContentChange = (slug, field, value) => {
      setContent((prev) => prev.map((c) => c.slug === slug ? { ...c, [field]: value } : c));
    };
    const handleEmailTemplateChange = (id, field, value) => {
      setSettings((prev) => {
        const updatedTemplates = (prev.emailTemplates || []).map(
          (template) => template.id === id ? { ...template, [field]: value } : template
        );
        return { ...prev, emailTemplates: updatedTemplates };
      });
    };
    const handlePaymentMethodChange = (index, field, value) => {
      setLocalPaymentMethods((prev) => {
        const newMethods = JSON.parse(JSON.stringify(prev));
        newMethods[index][field] = value;
        return newMethods;
      });
    };
    const handleRemovePaymentMethod = (index) => {
      setLocalPaymentMethods((prev) => prev.filter((_, i) => i !== index));
    };
    const handleAddPaymentMethod = () => {
      setLocalPaymentMethods((prev) => [...prev, { id: `pm-${Date.now()}`, name: "", imageUrl: "" }]);
    };
    const handleSave = () => {
      onUpdateSiteSettings(settings);
      onUpdateSiteContent(content);
      onUpdatePaymentMethods(localPaymentMethods);
      alert(t("superadmin.settings.save"));
    };
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "p-4 sm:p-6 space-y-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "flex justify-between items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("h2", { className: "text-xl font-bold", children: t("superadmin.settings.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("button", { onClick: handleSave, className: "bg-blue-500 text-white font-bold py-2 px-4 rounded-lg", children: t("superadmin.settings.save") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.identity") }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "mt-4 grid grid-cols-1 md:grid-cols-2 gap-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(ImageUrlOrUpload, { label: t("superadmin.settings.identity.logo"), name: "logoUrl", value: settings.logoUrl, preview: settings.logoUrl, onChange: handleSettingsChange }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(ImageUrlOrUpload, { label: t("superadmin.settings.identity.banner"), name: "bannerUrl", value: settings.bannerUrl || "", preview: settings.bannerUrl || "", onChange: handleSettingsChange })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.features") }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "mt-4 space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("label", { className: "flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "checkbox", name: "isChatEnabled", checked: settings.isChatEnabled, onChange: handleSettingsChange, className: "h-5 w-5 rounded" }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("span", { children: t("superadmin.settings.features.chat") })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("label", { className: "flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "checkbox", name: "isComparisonEnabled", checked: settings.isComparisonEnabled, onChange: handleSettingsChange, className: "h-5 w-5 rounded" }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("span", { children: t("superadmin.settings.features.comparison") })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", open: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.delivery") }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "mt-4 space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.delivery.intraUrban"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "deliverySettings.intraUrbanBaseFee", value: settings.deliverySettings.intraUrbanBaseFee, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.delivery.interUrban"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "deliverySettings.interUrbanBaseFee", value: settings.deliverySettings.interUrbanBaseFee, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.delivery.perKg"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "deliverySettings.costPerKg", value: settings.deliverySettings.costPerKg, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.delivery.premiumDiscount"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "deliverySettings.premiumDeliveryDiscountPercentage", value: settings.deliverySettings.premiumDeliveryDiscountPercentage || 0, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.sellerDocs") }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "mt-4 space-y-2", children: Object.entries(settings.requiredSellerDocuments).map(([name, isRequired]) => /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("label", { className: "flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "checkbox", checked: isRequired, onChange: (e) => handleRequiredDocsChange(name, e.target.checked), className: "h-5 w-5 rounded" }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("span", { children: name })
        ] }, name)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.sellerPlans") }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "mt-4 grid grid-cols-1 lg:grid-cols-3 gap-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "p-4 border dark:border-gray-600 rounded-md space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("h4", { className: "font-bold text-md", children: t("superadmin.settings.plans.standard") }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.plans.price"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "standardPlan.price", value: settings.standardPlan.price, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.plans.duration"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "standardPlan.durationDays", value: settings.standardPlan.durationDays, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.plans.limit"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "standardPlan.productLimit", value: settings.standardPlan.productLimit, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.plans.commission"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "standardPlan.commissionRate", value: settings.standardPlan.commissionRate, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("label", { className: "flex items-center gap-2 pt-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "checkbox", name: "standardPlan.photoServiceIncluded", checked: settings.standardPlan.photoServiceIncluded, onChange: handleSettingsChange }),
              " ",
              t("superadmin.settings.plans.photoService")
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "p-4 border dark:border-gray-600 rounded-md space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("h4", { className: "font-bold text-md", children: t("superadmin.settings.plans.premium") }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.plans.price"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "premiumPlan.price", value: settings.premiumPlan.price, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.plans.duration"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "premiumPlan.durationDays", value: settings.premiumPlan.durationDays, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.plans.limit"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "premiumPlan.productLimit", value: settings.premiumPlan.productLimit, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.plans.commission"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "premiumPlan.commissionRate", value: settings.premiumPlan.commissionRate, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("label", { className: "flex items-center gap-2 pt-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "checkbox", name: "premiumPlan.photoServiceIncluded", checked: settings.premiumPlan.photoServiceIncluded, onChange: handleSettingsChange }),
              " ",
              t("superadmin.settings.plans.photoService")
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "p-4 border dark:border-gray-600 rounded-md space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("h4", { className: "font-bold text-md", children: t("superadmin.settings.plans.superPremium") }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.plans.price"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "superPremiumPlan.price", value: settings.superPremiumPlan.price, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.plans.duration"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "superPremiumPlan.durationDays", value: settings.superPremiumPlan.durationDays, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.plans.limit"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "superPremiumPlan.productLimit", value: settings.superPremiumPlan.productLimit, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.plans.commission"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "superPremiumPlan.commissionRate", value: settings.superPremiumPlan.commissionRate, onChange: handleSettingsChange, className: "mt-1 w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("label", { className: "flex items-center gap-2 pt-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "checkbox", name: "superPremiumPlan.photoServiceIncluded", checked: settings.superPremiumPlan.photoServiceIncluded, onChange: handleSettingsChange }),
              " ",
              t("superadmin.settings.plans.photoService")
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("label", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "checkbox", name: "superPremiumPlan.featuredOnHomepage", checked: settings.superPremiumPlan.featuredOnHomepage, onChange: handleSettingsChange }),
              " ",
              t("superadmin.settings.plans.homepageFeature")
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.loyalty") }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "mt-4 space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("label", { className: "flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "checkbox", name: "customerLoyaltyProgram.isEnabled", checked: settings.customerLoyaltyProgram.isEnabled, onChange: handleSettingsChange, className: "h-5 w-5 rounded" }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("span", { children: t("superadmin.settings.loyalty.enable") })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "p-4 border dark:border-gray-600 rounded-md space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("h4", { className: "font-bold text-md", children: t("superadmin.settings.loyalty.premium") }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.loyalty.ordersRequired"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "customerLoyaltyProgram.premium.thresholds.orders", value: settings.customerLoyaltyProgram.premium.thresholds.orders, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.loyalty.spendingRequired"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "customerLoyaltyProgram.premium.thresholds.spending", value: settings.customerLoyaltyProgram.premium.thresholds.spending, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.loyalty.caution"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "customerLoyaltyProgram.premium.cautionAmount", value: settings.customerLoyaltyProgram.premium.cautionAmount, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.loyalty.benefits"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("textarea", { value: settings.customerLoyaltyProgram.premium.benefits.join("\n"), onChange: (e) => handleBenefitsChange("premium", e.target.value), rows: 5, className: "mt-1 block w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "p-4 border dark:border-gray-600 rounded-md space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("h4", { className: "font-bold text-md", children: t("superadmin.settings.loyalty.premiumPlus") }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("label", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "checkbox", name: "customerLoyaltyProgram.premiumPlus.isEnabled", checked: settings.customerLoyaltyProgram.premiumPlus.isEnabled, onChange: handleSettingsChange }),
              " ",
              t("superadmin.settings.loyalty.enablePremiumPlus")
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.loyalty.annualFee"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "number", name: "customerLoyaltyProgram.premiumPlus.annualFee", value: settings.customerLoyaltyProgram.premiumPlus.annualFee, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.loyalty.benefits"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("textarea", { value: settings.customerLoyaltyProgram.premiumPlus.benefits.join("\n"), onChange: (e) => handleBenefitsChange("premiumPlus", e.target.value), rows: 5, className: "mt-1 block w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600" }) })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("footer.paymentMethods") }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "mt-4 space-y-4", children: [
          localPaymentMethods.map((method, index) => /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-900/50 rounded-md flex items-end gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "flex-grow", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.payment.name"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "text", value: method.name, onChange: (e) => handlePaymentMethodChange(index, "name", e.target.value), className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "flex-grow", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.payment.logoUrl"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "url", value: method.imageUrl, placeholder: "https://example.com/logo.png", onChange: (e) => handlePaymentMethodChange(index, "imageUrl", e.target.value), className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("button", { onClick: () => handleRemovePaymentMethod(index), className: "p-2 text-red-500 hover:bg-red-100 dark:hover:bg-red-900/50 rounded-full", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(TrashIcon, { className: "w-5 h-5" }) })
          ] }, method.id)),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("button", { onClick: handleAddPaymentMethod, className: "text-sm font-semibold text-kmer-green hover:underline", children: t("superadmin.settings.payment.add") })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.seo") }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "mt-4 space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.seo.defaultTitle"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "text", name: "seo.metaTitle", value: settings.seo.metaTitle, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.seo.defaultDesc"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("textarea", { name: "seo.metaDescription", value: settings.seo.metaDescription, onChange: handleSettingsChange, rows: 3, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.seo.ogImage"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "url", name: "seo.ogImageUrl", value: settings.seo.ogImageUrl, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.content") }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "mt-4 space-y-4", children: content.map((page) => /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-900/50 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.content.pageTitle", page.title), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "text", value: page.title, onChange: (e) => handleContentChange(page.slug, "title", e.target.value), className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.content.content"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("textarea", { value: page.content, onChange: (e) => handleContentChange(page.slug, "content", e.target.value), rows: 4, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
        ] }, page.slug)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.emails") }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "mt-4 space-y-4", children: (settings.emailTemplates || []).map((template) => /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-900/50 rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("h4", { className: "font-bold text-md mb-2", children: template.name }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.emails.subject"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "text", value: template.subject, onChange: (e) => handleEmailTemplateChange(template.id, "subject", e.target.value), className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.emails.body"), description: t("superadmin.settings.emails.variables", template.variables), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("textarea", { value: template.body, onChange: (e) => handleEmailTemplateChange(template.id, "body", e.target.value), rows: 5, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
        ] }, template.id)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.maintenance") }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "mt-4 flex flex-col gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("label", { className: "flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "checkbox", name: "maintenanceMode.isEnabled", checked: settings.maintenanceMode.isEnabled, onChange: handleSettingsChange, className: "h-5 w-5 rounded" }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("span", { children: t("superadmin.settings.maintenance.enable") })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.maintenance.message"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("textarea", { name: "maintenanceMode.message", value: settings.maintenanceMode.message, onChange: handleSettingsChange, rows: 2, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("details", { className: "p-4 border dark:border-gray-700 rounded-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("summary", { className: "font-semibold text-lg cursor-pointer", children: t("superadmin.settings.sections.footer") }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "mt-4 space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: t("superadmin.settings.footer.companyName"), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "text", name: "companyName", value: settings.companyName, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-900/50 rounded-md space-y-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("h4", { className: "font-semibold", children: "Facebook" }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(ImageUrlOrUpload, { label: t("superadmin.settings.footer.iconUrl"), name: "socialLinks.facebook.iconUrl", value: settings.socialLinks.facebook.iconUrl, preview: settings.socialLinks.facebook.iconUrl, onChange: handleSettingsChange }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: "URL du lien", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "url", name: "socialLinks.facebook.linkUrl", value: settings.socialLinks.facebook.linkUrl, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-900/50 rounded-md space-y-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("h4", { className: "font-semibold", children: "Twitter" }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(ImageUrlOrUpload, { label: t("superadmin.settings.footer.iconUrl"), name: "socialLinks.twitter.iconUrl", value: settings.socialLinks.twitter.iconUrl, preview: settings.socialLinks.twitter.iconUrl, onChange: handleSettingsChange }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: "URL du lien", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "url", name: "socialLinks.twitter.linkUrl", value: settings.socialLinks.twitter.linkUrl, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "p-3 bg-gray-50 dark:bg-gray-900/50 rounded-md space-y-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("h4", { className: "font-semibold", children: "Instagram" }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(ImageUrlOrUpload, { label: t("superadmin.settings.footer.iconUrl"), name: "socialLinks.instagram.iconUrl", value: settings.socialLinks.instagram.iconUrl, preview: settings.socialLinks.instagram.iconUrl, onChange: handleSettingsChange }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Field, { label: "URL du lien", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("input", { type: "url", name: "socialLinks.instagram.linkUrl", value: settings.socialLinks.instagram.linkUrl, onChange: handleSettingsChange, className: "mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }) })
          ] })
        ] })
      ] })
    ] });
  };

  // components/admin/ReviewModerationPanel.tsx
  var import_jsx_runtime66 = __toESM(require_jsx_runtime(), 1);
  var ReviewModerationPanel = ({ allProducts, onReviewModeration }) => {
    const { t } = useLanguage();
    const pendingReviews = allProducts.flatMap(
      (p) => p.reviews.filter((r) => r.status === "pending").map((r) => ({ ...r, productId: p.id, productName: p.name }))
    );
    if (pendingReviews.length === 0) {
      return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("div", { className: "p-6 text-center text-gray-500", children: [
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("h2", { className: "text-xl font-semibold", children: t("superadmin.reviews.noPending") }),
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("p", { children: t("superadmin.reviews.goodJob") })
      ] });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("div", { className: "p-4 sm:p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("h2", { className: "text-xl font-bold mb-4", children: t("superadmin.reviews.title", pendingReviews.length) }),
      /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("div", { className: "space-y-4 max-h-[60vh] overflow-y-auto pr-2", children: pendingReviews.map((review) => /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("div", { className: "p-4 bg-gray-50 dark:bg-gray-900/50 rounded-lg", children: /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("div", { className: "flex flex-col sm:flex-row justify-between sm:items-start gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("div", { className: "flex-grow", children: [
          /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("p", { className: "font-semibold", children: [
            t("superadmin.reviews.product"),
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("span", { className: "text-kmer-green", children: review.productName })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("p", { className: "text-sm", children: [
            t("superadmin.reviews.by"),
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("span", { className: "font-bold", children: review.author }),
            " ",
            t("superadmin.reviews.on"),
            " ",
            new Date(review.date).toLocaleDateString("fr-FR")
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("div", { className: "flex items-center my-1", children: [...Array(5)].map((_, i) => /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(StarIcon, { filled: i < review.rating, className: `w-4 h-4 ${i < review.rating ? "text-yellow-400" : "text-gray-300"}` }, i)) }),
          /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("p", { className: "italic text-gray-600 dark:text-gray-300", children: [
            '"',
            review.comment,
            '"'
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("div", { className: "flex gap-2 flex-shrink-0", children: [
          /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
            "button",
            {
              onClick: () => onReviewModeration(review.productId, { author: review.author, date: review.date }, "approved"),
              className: "bg-green-500 text-white px-3 py-1 rounded-md text-sm font-semibold hover:bg-green-600",
              children: t("common.approve")
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
            "button",
            {
              onClick: () => onReviewModeration(review.productId, { author: review.author, date: review.date }, "rejected"),
              className: "bg-red-500 text-white px-3 py-1 rounded-md text-sm font-semibold hover:bg-red-600",
              children: t("common.reject")
            }
          )
        ] })
      ] }) }, `${review.productId}-${review.author}-${review.date}`)) })
    ] });
  };
  var ReviewModerationPanel_default = ReviewModerationPanel;

  // components/admin/ServicesPanel.tsx
  var import_react52 = __toESM(require_react(), 1);
  var import_jsx_runtime67 = __toESM(require_jsx_runtime(), 1);
  var ServicesPanel = ({ allProducts }) => {
    const { t } = useLanguage();
    const serviceProducts = (0, import_react52.useMemo)(() => allProducts.filter((p) => p.type === "service"), [allProducts]);
    return /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("div", { className: "p-4 sm:p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("h2", { className: "text-xl font-bold mb-4", children: [
        t("superadmin.tabs.services"),
        " (",
        serviceProducts.length,
        ")"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("div", { className: "overflow-x-auto", children: [
        /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("table", { className: "w-full text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("th", { className: "p-2 text-left", children: "Nom du Service" }),
            /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("th", { className: "p-2 text-left", children: "Vendeur" }),
            /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("th", { className: "p-2 text-right", children: "Prix" }),
            /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("th", { className: "p-2 text-center", children: "Statut" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("tbody", { children: serviceProducts.map((service) => /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
            /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("td", { className: "p-2 font-semibold", children: service.name }),
            /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("td", { className: "p-2", children: service.vendor }),
            /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("td", { className: "p-2 text-right", children: [
              service.price.toLocaleString("fr-CM"),
              " FCFA"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("td", { className: "p-2 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("span", { className: `px-2 py-0.5 text-xs font-semibold rounded-full ${service.status === "published" ? "bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300" : "bg-gray-100 text-gray-800 dark:bg-gray-900/50 dark:text-gray-300"}`, children: service.status }) })
          ] }, service.id)) })
        ] }),
        serviceProducts.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("p", { className: "text-center text-gray-500 py-8", children: "Aucun service trouv\xE9." })
      ] })
    ] });
  };

  // components/admin/RefundsPanel.tsx
  var import_jsx_runtime68 = __toESM(require_jsx_runtime(), 1);
  var RefundsPanel = ({ allOrders, onResolveDispute }) => {
    const { t } = useLanguage();
    const disputeOrders = allOrders.filter((o) => o.status === "refund-requested");
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "p-4 sm:p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("h2", { className: "text-xl font-bold mb-4", children: [
        t("superadmin.tabs.refunds"),
        " (",
        disputeOrders.length,
        ")"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("div", { className: "space-y-4", children: disputeOrders.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("p", { className: "text-center py-8 text-gray-500", children: t("superadmin.orders.noDisputes") }) : disputeOrders.map((order) => /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg border-l-4 border-yellow-400", children: [
        /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("p", { className: "font-bold", children: [
          t("common.orderId"),
          ": ",
          order.id
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("p", { className: "text-sm", children: [
          t("common.customer"),
          ": ",
          order.shippingAddress.fullName
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("p", { className: "mt-2 text-sm italic", children: [
          '"',
          order.refundReason,
          '"'
        ] }),
        order.refundEvidenceUrls && /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "mt-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("p", { className: "text-xs font-semibold", children: t("superadmin.orders.evidence") }),
          /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("div", { className: "flex gap-2 flex-wrap", children: order.refundEvidenceUrls.map((url, i) => /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("a", { href: url, target: "_blank", rel: "noopener noreferrer", className: "text-blue-500 underline text-xs", children: [
            "Preuve ",
            i + 1
          ] }, i)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "flex justify-end gap-2 mt-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("button", { onClick: () => onResolveDispute(order.id, "rejected"), className: "bg-gray-500 text-white px-3 py-1 text-sm rounded-md", children: t("superadmin.orders.rejectRequest") }),
          /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("button", { onClick: () => onResolveDispute(order.id, "refunded"), className: "bg-red-500 text-white px-3 py-1 text-sm rounded-md", children: t("superadmin.orders.approveRefund") })
        ] })
      ] }, order.id)) })
    ] });
  };

  // components/SuperAdminDashboard.tsx
  var import_jsx_runtime69 = __toESM(require_jsx_runtime(), 1);
  var TabButton2 = ({ icon, label, isActive, onClick, count }) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(
    "button",
    {
      onClick,
      className: `relative flex items-center gap-3 w-full text-left px-3 py-3 text-sm font-semibold rounded-lg transition-colors whitespace-nowrap ${isActive ? "bg-kmer-green/10 text-kmer-green" : "text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 dark:text-gray-400"}`,
      children: [
        icon,
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: label }),
        count !== void 0 && count > 0 && /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { className: "ml-auto text-xs bg-kmer-red text-white rounded-full px-1.5 py-0.5", children: count })
      ]
    }
  );
  var SuperAdminDashboard = ({ siteData }) => {
    const { user } = useAuth();
    const [activeTab, setActiveTab] = (0, import_react53.useState)("overview");
    const { t } = useLanguage();
    const pendingStoresCount = (0, import_react53.useMemo)(() => siteData.allStores.filter((s) => s.status === "pending").length, [siteData.allStores]);
    const refundRequestsCount = (0, import_react53.useMemo)(() => siteData.allOrders.filter((o) => o.status === "refund-requested").length, [siteData.allOrders]);
    const pendingReviewsCount = (0, import_react53.useMemo)(() => siteData.allProducts.flatMap((p) => p.reviews).filter((r) => r.status === "pending").length, [siteData.allProducts]);
    const openTicketsCount = (0, import_react53.useMemo)(() => siteData.allTickets.filter((t2) => t2.status === "Ouvert").length, [siteData.allTickets]);
    const renderContent = () => {
      const panelProps = { ...siteData };
      switch (activeTab) {
        case "overview":
          return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(OverviewPanel2, { ...panelProps });
        case "users":
          return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(UsersPanel, { ...panelProps });
        case "catalog":
          return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(CatalogPanel, { ...panelProps });
        case "services":
          return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ServicesPanel, { ...panelProps });
        case "marketing":
          return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(MarketingPanel, { ...panelProps });
        case "stores":
          return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(StoresPanel, { ...panelProps });
        case "orders":
          return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(OrdersPanel2, { ...panelProps });
        case "logistics":
          return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(LogisticsPanel, { ...panelProps });
        case "payouts":
          return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(PayoutsPanel2, { ...panelProps });
        case "refunds":
          return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(RefundsPanel, { ...panelProps });
        case "support":
          return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(SupportPanel2, { ...panelProps });
        case "reviews":
          return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ReviewModerationPanel_default, { ...panelProps });
        case "logs":
          return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(LogsPanel, { ...panelProps });
        case "settings":
          return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(SettingsPanel, { ...panelProps });
        default:
          return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "text-center py-8 text-gray-500", children: t("superadmin.panelUnderConstruction", activeTab) });
      }
    };
    const TABS = [
      { id: "overview", label: t("superadmin.tabs.overview"), icon: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ChartPieIcon, { className: "w-5 h-5" }) },
      { id: "orders", label: t("superadmin.tabs.orders"), icon: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ShoppingBagIcon, { className: "w-5 h-5" }) },
      { id: "stores", label: t("superadmin.tabs.stores"), icon: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(BuildingStorefrontIcon, { className: "w-5 h-5" }), count: pendingStoresCount },
      { id: "users", label: t("superadmin.tabs.users"), icon: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(UsersIcon, { className: "w-5 h-5" }) },
      { id: "catalog", label: t("superadmin.tabs.catalog"), icon: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TagIcon, { className: "w-5 h-5" }) },
      { id: "services", label: t("superadmin.tabs.services"), icon: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(SparklesIcon, { className: "w-5 h-5" }) },
      { id: "marketing", label: t("superadmin.tabs.marketing"), icon: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(BoltIcon, { className: "w-5 h-5" }) },
      { id: "logistics", label: t("superadmin.tabs.logistics"), icon: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TruckIcon, { className: "w-5 h-5" }) },
      { id: "payouts", label: t("superadmin.tabs.payouts"), icon: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(BanknotesIcon, { className: "w-5 h-5" }) },
      { id: "refunds", label: t("superadmin.tabs.refunds"), icon: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ArchiveBoxXMarkIcon, { className: "w-5 h-5" }), count: refundRequestsCount },
      { id: "support", label: t("superadmin.tabs.support"), icon: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ChatBubbleBottomCenterTextIcon, { className: "w-5 h-5" }), count: openTicketsCount },
      { id: "reviews", label: t("superadmin.tabs.reviews"), icon: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(StarIcon, { className: "w-5 h-5" }), count: pendingReviewsCount },
      { id: "logs", label: t("superadmin.tabs.logs"), icon: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ClockIcon, { className: "w-5 h-5" }) },
      { id: "settings", label: t("superadmin.tabs.settings"), icon: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Cog8ToothIcon, { className: "w-5 h-5" }) }
    ];
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "bg-gray-100 dark:bg-gray-950 min-h-screen", children: /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-6 flex flex-col md:flex-row gap-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("aside", { className: "md:w-1/4 lg:w-1/5 flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md space-y-2 sticky top-24", children: TABS.map((tab) => /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
        TabButton2,
        {
          icon: tab.icon,
          label: tab.label,
          isActive: activeTab === tab.id,
          onClick: () => setActiveTab(tab.id),
          count: tab.count
        },
        tab.id
      )) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("main", { className: "flex-grow", children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md min-h-full", children: renderContent() }) })
    ] }) });
  };

  // components/OrderHistoryPage.tsx
  var import_jsx_runtime70 = __toESM(require_jsx_runtime(), 1);
  var OrderHistoryPage = ({ userOrders, onBack, onSelectOrder, onRepeatOrder }) => {
    const { user } = useAuth();
    const { t } = useLanguage();
    const getStatusClass = (status) => {
      switch (status) {
        case "confirmed":
          return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300";
        case "ready-for-pickup":
          return "bg-orange-100 text-orange-800 dark:bg-orange-900/50 dark:text-orange-300";
        case "picked-up":
          return "bg-cyan-100 text-cyan-800 dark:bg-cyan-900/50 dark:text-cyan-300";
        case "at-depot":
          return "bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300";
        case "out-for-delivery":
          return "bg-indigo-100 text-indigo-800 dark:bg-indigo-900/50 dark:text-indigo-300";
        case "delivered":
          return "bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300";
        case "cancelled":
          return "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300";
        case "refund-requested":
          return "bg-purple-100 text-purple-800 dark:bg-purple-900/50 dark:text-purple-300";
        case "refunded":
          return "bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-gray-300";
        case "depot-issue":
          return "bg-red-200 text-red-900 dark:bg-red-800/50 dark:text-red-200";
        case "delivery-failed":
          return "bg-red-200 text-red-900 dark:bg-red-800/50 dark:text-red-200 font-bold";
        default:
          return "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300";
      }
    };
    const showBackButton = onBack.toString() !== "() => {}";
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { className: "container mx-auto px-6 py-12", children: [
      showBackButton && /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        t("common.back")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white mb-8", children: t("orderHistory.title") }),
      userOrders.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: t("orderHistory.noOrders") }),
        /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6", children: t("orderHistory.noOrdersDescription") }),
        showBackButton && /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("button", { onClick: onBack, className: "bg-kmer-green text-white font-bold py-3 px-8 rounded-full hover:bg-green-700 transition-colors", children: t("orderHistory.startShopping") })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden", children: /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("div", { className: "overflow-x-auto", children: /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("table", { className: "w-full text-sm text-left", children: [
        /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("thead", { className: "text-xs text-gray-700 dark:text-gray-300 uppercase bg-gray-50 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("th", { scope: "col", className: "px-6 py-3", children: t("common.orderId") }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("th", { scope: "col", className: "px-6 py-3", children: t("common.date") }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("th", { scope: "col", className: "px-6 py-3", children: t("common.total") }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("th", { scope: "col", className: "px-6 py-3", children: t("common.status") }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("th", { scope: "col", className: "px-6 py-3", children: t("common.actions") })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("tbody", { children: userOrders.map((order) => /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("tr", { className: "border-b dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50", children: [
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("th", { scope: "row", className: "px-6 py-4 font-medium text-gray-900 dark:text-white whitespace-nowrap", children: order.id }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("td", { className: "px-6 py-4", children: new Date(order.orderDate).toLocaleDateString("fr-FR") }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("td", { className: "px-6 py-4", children: [
            order.total.toLocaleString("fr-CM"),
            " FCFA"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("td", { className: "px-6 py-4", children: /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("span", { className: `px-2 py-1 rounded-full text-xs font-medium ${getStatusClass(order.status)}`, children: t(`orderStatus.${order.status}`, order.status) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("td", { className: "px-6 py-4", children: /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { className: "flex items-center gap-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("button", { onClick: () => onSelectOrder(order), className: "font-medium text-kmer-green hover:underline whitespace-nowrap", children: t("orderHistory.viewDetails") }),
            /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("button", { onClick: () => onRepeatOrder(order), className: "font-medium text-blue-500 hover:underline whitespace-nowrap flex items-center gap-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(ArrowPathIcon, { className: "w-4 h-4" }),
              t("orderHistory.reorder")
            ] })
          ] }) })
        ] }, order.id)) })
      ] }) }) })
    ] });
  };
  var OrderHistoryPage_default = OrderHistoryPage;

  // components/OrderDetailPage.tsx
  var import_react54 = __toESM(require_react(), 1);
  var import_jsx_runtime71 = __toESM(require_jsx_runtime(), 1);
  var RefundRequestModal = ({ onClose, onSubmit }) => {
    const [reason, setReason] = (0, import_react54.useState)("");
    const [evidence, setEvidence] = (0, import_react54.useState)([]);
    const handleFileChange = (e) => {
      if (e.target.files) {
        const files = Array.from(e.target.files);
        if (evidence.length + files.length > 5) {
          alert("Vous pouvez t\xE9l\xE9charger jusqu'\xE0 5 fichiers.");
          return;
        }
        files.forEach((file) => {
          const reader = new FileReader();
          reader.onloadend = () => {
            setEvidence((prev) => [...prev, reader.result]);
          };
          reader.readAsDataURL(file);
        });
      }
    };
    const removeEvidence = (index) => {
      setEvidence((prev) => prev.filter((_, i) => i !== index));
    };
    const handleSubmit = () => {
      if (!reason.trim()) {
        alert("Veuillez fournir un motif pour votre demande de remboursement.");
        return;
      }
      onSubmit(reason, evidence);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-2xl p-6 max-w-lg w-full relative", children: [
      /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("button", { onClick: onClose, className: "absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(XIcon, { className: "h-6 w-6" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("h3", { className: "text-xl font-bold mb-4 dark:text-white", children: "Demander un remboursement" }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400 mb-4", children: "Veuillez d\xE9crire pourquoi le produit re\xE7u ne correspond pas \xE0 vos attentes. Votre demande sera examin\xE9e par un administrateur." }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Motif de la demande" }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
            "textarea",
            {
              value: reason,
              onChange: (e) => setReason(e.target.value),
              rows: 4,
              className: "mt-1 w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600",
              placeholder: "Ex: Le produit est arriv\xE9 endommag\xE9, la couleur ne correspond pas \xE0 la photo...",
              required: true
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Ajouter des preuves (photos, vid\xE9os...)" }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "mt-1 flex items-center gap-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("label", { htmlFor: "evidence-upload", className: "cursor-pointer bg-white dark:bg-gray-700 py-2 px-3 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(PhotoIcon, { className: "w-5 h-5" }),
              "Choisir des fichiers"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("input", { id: "evidence-upload", name: "evidence-upload", type: "file", multiple: true, className: "sr-only", onChange: handleFileChange, accept: "image/*,video/*" })
          ] }),
          evidence.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "mt-2 grid grid-cols-3 sm:grid-cols-5 gap-2", children: evidence.map((url, i) => /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "relative group", children: [
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("img", { src: url, alt: `Preview ${i}`, className: "h-20 w-full object-cover rounded-md" }),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("button", { onClick: () => removeEvidence(i), className: "absolute -top-1 -right-1 bg-red-500 text-white rounded-full p-0.5 opacity-0 group-hover:opacity-100 transition-opacity", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TrashIcon, { className: "w-4 h-4" }) })
          ] }, i)) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex justify-end gap-2 mt-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("button", { onClick: onClose, className: "bg-gray-200 dark:bg-gray-600 px-4 py-2 rounded-md", children: "Annuler" }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("button", { onClick: handleSubmit, className: "bg-kmer-red text-white px-4 py-2 rounded-md", children: "Envoyer la demande" })
      ] })
    ] }) });
  };
  var MessageAttachments3 = ({ urls }) => /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "mt-2 flex flex-wrap gap-2", children: urls.map((url, i) => {
    const isImage = /\.(jpeg|jpg|gif|png|webp)$/i.test(url) || url.startsWith("data:image");
    if (isImage) {
      return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("a", { href: url, target: "_blank", rel: "noopener noreferrer", className: "block", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("img", { src: url, alt: `Pi\xE8ce jointe ${i + 1}`, className: "h-24 w-auto rounded-md object-contain border dark:border-gray-600" }) }, i);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("a", { href: url, target: "_blank", rel: "noopener noreferrer", className: "text-blue-500 underline text-sm flex items-center gap-1 p-2 bg-blue-50 dark:bg-blue-900/50 rounded-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(PaperclipIcon, { className: "w-4 h-4" }),
      "Pi\xE8ce jointe ",
      i + 1
    ] }, i);
  }) });
  var statusSteps = ["confirmed", "ready-for-pickup", "picked-up", "at-depot", "out-for-delivery", "delivered"];
  var OrderDetailPage = ({ order, onBack, allPickupPoints, allUsers, onCancelOrder, onRequestRefund, onCustomerDisputeMessage }) => {
    const { t } = useLanguage();
    const [isRefundModalOpen, setIsRefundModalOpen] = (0, import_react54.useState)(false);
    const qrCodeRef = (0, import_react54.useRef)(null);
    const currentStatusIndex = statusSteps.indexOf(order.status);
    const pickupPoint = order.deliveryMethod === "pickup" ? allPickupPoints.find((p) => p.id === order.pickupPointId) : null;
    const deliveryAgent = order.deliveryMethod === "home-delivery" && order.agentId ? allUsers.find((u) => u.id === order.agentId) : null;
    const canCancel = ["confirmed", "ready-for-pickup"].includes(order.status);
    const canRequestRefund = order.status === "delivered";
    const getStatusTranslation = (status) => t(`orderStatus.${status}`, status);
    const statusDescriptions = {
      confirmed: "La boutique pr\xE9pare le colis.",
      "ready-for-pickup": "Le vendeur a pr\xE9par\xE9 votre colis pour l'enl\xE8vement.",
      "picked-up": "Un transporteur a r\xE9cup\xE9r\xE9 le colis.",
      "at-depot": order.deliveryMethod === "pickup" ? "Votre colis est pr\xEAt pour le retrait." : "Pr\xEAt pour la distribution locale.",
      "out-for-delivery": "Le livreur est en route.",
      delivered: "Votre colis a \xE9t\xE9 remis.",
      cancelled: "Votre commande a \xE9t\xE9 annul\xE9e.",
      "refund-requested": "Votre demande est en cours d'examen.",
      "return-approved": "Votre demande de retour a \xE9t\xE9 approuv\xE9e.",
      "return-received": "Le colis retourn\xE9 a \xE9t\xE9 r\xE9ceptionn\xE9.",
      refunded: "Cette commande a \xE9t\xE9 rembours\xE9e.",
      "return-rejected": "Votre demande de retour a \xE9t\xE9 refus\xE9e.",
      "depot-issue": "Un probl\xE8me a \xE9t\xE9 signal\xE9 avec votre colis au d\xE9p\xF4t.",
      "delivery-failed": "Un probl\xE8me est survenu lors de la livraison."
    };
    (0, import_react54.useEffect)(() => {
      if (qrCodeRef.current && order.trackingNumber && typeof QRCode !== "undefined") {
        QRCode.toCanvas(qrCodeRef.current, order.trackingNumber, { width: 128 }, (error) => {
          if (error) console.error(error);
        });
      }
    }, [order.trackingNumber]);
    const handleRefundSubmit = (reason, evidenceUrls) => {
      onRequestRefund(order.id, reason, evidenceUrls);
      setIsRefundModalOpen(false);
    };
    const handleCancelOrder = () => {
      if (window.confirm("\xCAtes-vous s\xFBr de vouloir annuler cette commande ?")) {
        onCancelOrder(order.id);
      }
    };
    const handleDisputeMessage = (e) => {
      e.preventDefault();
      const input = e.target.message;
      onCustomerDisputeMessage(order.id, input.value);
      input.value = "";
    };
    const getStepIcon = (step) => {
      switch (step) {
        case "out-for-delivery":
          return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TruckIcon, { className: "w-6 h-6" });
        case "delivered":
          return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(CheckIcon, { className: "w-6 h-6" });
        default:
          return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(CheckIcon, { className: "w-6 h-6" });
      }
    };
    const relevantStatusSteps = order.deliveryMethod === "pickup" ? statusSteps.filter((step) => step !== "out-for-delivery") : statusSteps;
    const handlePrint = () => {
      window.print();
    };
    return /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(import_jsx_runtime71.Fragment, { children: [
      isRefundModalOpen && /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(RefundRequestModal, { onClose: () => setIsRefundModalOpen(false), onSubmit: handleRefundSubmit }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "bg-gray-100 dark:bg-gray-950 min-h-[80vh] py-12", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "container mx-auto px-4 sm:px-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex justify-between items-center mb-8 no-print", children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold", children: [
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
            "Retour \xE0 l'historique"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("button", { onClick: handlePrint, className: "flex items-center gap-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 font-semibold py-2 px-4 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600", children: [
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(PrinterIcon, { className: "w-5 h-5" }),
            " Imprimer la facture"
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 sm:p-8 printable", children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex flex-col sm:flex-row justify-between sm:items-center border-b dark:border-gray-700 pb-4 mb-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("h1", { className: "text-2xl font-bold text-gray-800 dark:text-white", children: "D\xE9tails de la commande" }),
              /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
                "ID: ",
                order.id
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "text-left sm:text-right mt-2 sm:mt-0", children: [
              /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
                "Command\xE9 le ",
                new Date(order.orderDate).toLocaleDateString("fr-FR")
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("p", { className: "font-semibold dark:text-white", children: [
                "Total: ",
                order.total.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "mb-8", children: [
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("h2", { className: "text-xl font-semibold mb-6 dark:text-white", children: "Suivi de la commande" }),
            ["cancelled", "refund-requested", "refunded", "depot-issue", "delivery-failed"].includes(order.status) ? /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: `p-4 rounded-lg ${order.status === "cancelled" ? "bg-red-100 text-red-700 dark:bg-red-900/50 dark:text-red-300" : order.status === "refund-requested" ? "bg-purple-100 text-purple-700 dark:bg-purple-900/50 dark:text-purple-300" : order.status === "depot-issue" ? "bg-red-100 text-red-700 dark:bg-red-900/50 dark:text-red-300 font-bold" : order.status === "delivery-failed" ? "bg-red-100 text-red-700 dark:bg-red-900/50 dark:text-red-300 font-bold" : "bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-200"}`, children: [
              getStatusTranslation(order.status),
              order.status === "depot-issue" && /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "font-normal mt-1", children: order.discrepancy?.reason }),
              order.status === "delivery-failed" && /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("p", { className: "font-normal mt-1", children: [
                order.deliveryFailureReason?.reason,
                ": ",
                order.deliveryFailureReason?.details
              ] })
            ] }) : /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "flex flex-col sm:flex-row justify-between items-start", children: relevantStatusSteps.map((step, index) => {
              const stepIndexInOriginal = statusSteps.indexOf(step);
              const isActive = stepIndexInOriginal <= currentStatusIndex;
              const isCurrent = stepIndexInOriginal === currentStatusIndex;
              return /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex sm:flex-col sm:flex-1 items-center text-center relative w-full sm:w-auto mb-6 sm:mb-0", children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: `w-10 h-10 rounded-full flex items-center justify-center border-2 flex-shrink-0 z-10 ${isActive ? "bg-kmer-green border-kmer-green text-white" : "bg-gray-200 dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-500"}`, children: isActive ? getStepIcon(step) : /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "w-3 h-3 bg-gray-300 dark:bg-gray-600 rounded-full" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "ml-4 sm:ml-0 sm:mt-2 text-left sm:text-center", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: `text-sm font-semibold ${isActive ? "text-kmer-green" : "text-gray-500 dark:text-gray-400"}`, children: getStatusTranslation(step) }),
                  isCurrent && /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400 px-2", children: statusDescriptions[step] })
                ] }),
                index < relevantStatusSteps.length - 1 && /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: `absolute left-5 sm:left-1/2 top-10 sm:top-5 h-full sm:h-0.5 w-0.5 sm:w-full ${index < currentStatusIndex ? "bg-kmer-green" : "bg-gray-300 dark:bg-gray-600"}` })
              ] }, step);
            }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "grid md:grid-cols-2 gap-8 border-t dark:border-gray-700 pt-6 mt-8", children: [
            /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("h3", { className: "font-semibold mb-4 dark:text-white", children: "Historique des statuts" }),
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "border dark:border-gray-700 rounded-lg p-4 bg-gray-50 dark:bg-gray-800/50 max-h-48 overflow-y-auto", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("ul", { className: "space-y-2 text-sm text-gray-600 dark:text-gray-300", children: (order.statusChangeLog || []).map((log, index) => /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("li", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("span", { className: "font-semibold", children: [
                  new Date(log.date).toLocaleString("fr-FR"),
                  ":"
                ] }),
                " ",
                getStatusTranslation(log.status),
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("span", { className: "text-xs text-gray-400", children: [
                  "(par ",
                  log.changedBy,
                  ")"
                ] })
              ] }, index)) }) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("h3", { className: "font-semibold mb-4 dark:text-white flex items-center gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(QrCodeIcon, { className: "w-5 h-5" }),
                " Suivi par QR Code"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex flex-col sm:flex-row items-center gap-4 p-4 bg-gray-50 dark:bg-gray-900/50 rounded-lg", children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("canvas", { ref: qrCodeRef, className: "rounded-lg shadow-sm mx-auto" }),
                /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-sm font-semibold dark:text-gray-200", children: "Num\xE9ro de suivi :" }),
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "font-mono text-lg bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded-md inline-block", children: order.trackingNumber }),
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400 mt-2", children: "Utilisez ce code pour le suivi aupr\xE8s de nos agents." })
                ] })
              ] })
            ] })
          ] }),
          order.disputeLog && order.disputeLog.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "border-t dark:border-gray-700 pt-6 mt-8", children: [
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("h3", { className: "font-semibold mb-4 dark:text-white", children: "Discussion sur le litige" }),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "p-4 bg-gray-50 dark:bg-gray-900/50 rounded-lg space-y-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "max-h-60 overflow-y-auto space-y-3 pr-2", children: order.disputeLog.map((msg, i) => {
                const isMe = msg.author === "customer";
                const authorName = msg.author.charAt(0).toUpperCase() + msg.author.slice(1);
                return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: `flex ${isMe ? "justify-end" : "justify-start"}`, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: `p-3 rounded-xl max-w-sm ${isMe ? "bg-kmer-green text-white" : "bg-gray-200 dark:bg-gray-700"}`, children: [
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "font-bold text-sm", children: isMe ? "Vous" : authorName }),
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "whitespace-pre-wrap", children: msg.message }),
                  msg.attachmentUrls && /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(MessageAttachments3, { urls: msg.attachmentUrls })
                ] }) }, i);
              }) }),
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("form", { onSubmit: handleDisputeMessage, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("input", { name: "message", placeholder: "Envoyer un message...", className: "flex-grow text-sm p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" }),
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("button", { type: "submit", className: "p-2 bg-blue-500 text-white rounded-md hover:bg-blue-600", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(PaperAirplaneIcon, { className: "w-5 h-5" }) })
              ] }) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "grid md:grid-cols-2 gap-8 border-t dark:border-gray-700 pt-6 mt-8", children: [
            /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("h3", { className: "font-semibold mb-2 dark:text-white", children: "Adresse de Livraison" }),
              /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("address", { className: "not-italic text-gray-600 dark:text-gray-300", children: [
                order.shippingAddress.fullName,
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("br", {}),
                order.shippingAddress.address,
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("br", {}),
                order.shippingAddress.city,
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("br", {}),
                order.shippingAddress.phone
              ] }),
              order.deliveryMethod === "pickup" && pickupPoint && /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "mt-4 p-3 bg-blue-50 dark:bg-blue-900/50 rounded-lg", children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "font-bold text-sm text-blue-800 dark:text-blue-200", children: "Point de d\xE9p\xF4t:" }),
                /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("p", { className: "text-sm text-blue-700 dark:text-blue-300", children: [
                  pickupPoint.name,
                  ", ",
                  pickupPoint.neighborhood
                ] })
              ] }),
              deliveryAgent && /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "mt-4 p-3 bg-green-50 dark:bg-green-900/50 rounded-lg", children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "font-bold text-sm text-green-800 dark:text-green-200", children: "Votre livreur:" }),
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-sm text-green-700 dark:text-green-300", children: deliveryAgent.name })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("h3", { className: "font-semibold mb-2 dark:text-white", children: "Articles" }),
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("ul", { className: "space-y-2", children: order.items.map((item) => /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("li", { className: "flex justify-between items-center text-sm", children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("span", { className: "dark:text-gray-300", children: [
                  item.name,
                  " x ",
                  item.quantity
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("span", { className: "font-semibold dark:text-white", children: [
                  (item.promotionPrice ?? item.price).toLocaleString("fr-CM"),
                  " FCFA"
                ] })
              ] }, item.id)) }),
              /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "border-t dark:border-gray-700 mt-4 pt-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex justify-between text-sm", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("span", { children: "Sous-total" }),
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("span", { children: [
                    order.subtotal.toLocaleString("fr-CM"),
                    " FCFA"
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex justify-between text-sm", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("span", { children: "Livraison" }),
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("span", { children: [
                    order.deliveryFee.toLocaleString("fr-CM"),
                    " FCFA"
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex justify-between font-bold mt-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("span", { children: "Total" }),
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("span", { children: [
                    order.total.toLocaleString("fr-CM"),
                    " FCFA"
                  ] })
                ] })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "mt-8 pt-6 border-t dark:border-gray-700 flex flex-col sm:flex-row gap-4 no-print", children: [
            canRequestRefund && /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("button", { onClick: () => setIsRefundModalOpen(true), className: "flex-1 w-full bg-yellow-500 text-white font-bold py-3 rounded-lg hover:bg-yellow-600 flex items-center justify-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(ExclamationTriangleIcon, { className: "w-5 h-5" }),
              " Demander un remboursement"
            ] }),
            canCancel && /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("button", { onClick: handleCancelOrder, className: "flex-1 w-full bg-red-500 text-white font-bold py-3 rounded-lg hover:bg-red-600 flex items-center justify-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(XIcon, { className: "w-5 h-5" }),
              " Annuler la commande"
            ] })
          ] })
        ] })
      ] }) })
    ] });
  };
  var OrderDetailPage_default = OrderDetailPage;

  // components/PromotionsPage.tsx
  var import_react55 = __toESM(require_react(), 1);
  var import_jsx_runtime72 = __toESM(require_jsx_runtime(), 1);
  var isPromotionActive7 = (product) => {
    if (!product.promotionPrice || product.promotionPrice >= product.price) {
      return false;
    }
    const now = /* @__PURE__ */ new Date();
    const startDate = product.promotionStartDate ? /* @__PURE__ */ new Date(product.promotionStartDate + "T00:00:00") : null;
    const endDate = product.promotionEndDate ? /* @__PURE__ */ new Date(product.promotionEndDate + "T23:59:59") : null;
    if (!startDate && !endDate) {
      return true;
    }
    if (startDate && endDate) {
      return now >= startDate && now <= endDate;
    }
    if (startDate) {
      return now >= startDate;
    }
    if (endDate) {
      return now <= endDate;
    }
    return false;
  };
  var PromotionsPage = ({ allProducts, allStores, flashSales, onProductClick, onBack, onVendorClick, isComparisonEnabled }) => {
    const promotionalProducts = (0, import_react55.useMemo)(() => allProducts.filter((p) => isPromotionActive7(p)), [allProducts]);
    const { filteredAndSortedProducts, filters, setFilters, resetFilters } = useProductFiltering(promotionalProducts, allStores);
    const findStoreLocation = (vendorName) => allStores.find((s) => s.name === vendorName)?.location;
    return /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour \xE0 l'accueil"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "lg:flex lg:gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
          ProductFilters_default,
          {
            allProducts: promotionalProducts,
            filters,
            setFilters,
            resetFilters
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("main", { className: "flex-grow", children: [
          /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "mb-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "flex items-center gap-3 mb-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(TagIcon, { className: "w-8 h-8 text-kmer-red" }),
              /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: "Promotions du Moment" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("p", { className: "text-gray-600 dark:text-gray-300", children: [
              filteredAndSortedProducts.length,
              " sur ",
              promotionalProducts.length,
              " produits affich\xE9s"
            ] })
          ] }),
          filteredAndSortedProducts.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6", children: filteredAndSortedProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: findStoreLocation(product.vendor), flashSales, isComparisonEnabled, stores: allStores }, product.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md h-full flex flex-col justify-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: "Aucune promotion pour le moment." }),
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: "Revenez bient\xF4t pour d\xE9couvrir nos offres !" })
          ] })
        ] })
      ] })
    ] });
  };
  var PromotionsPage_default = PromotionsPage;

  // components/FlashSalesPage.tsx
  var import_react56 = __toESM(require_react(), 1);
  var import_jsx_runtime73 = __toESM(require_jsx_runtime(), 1);
  var CountdownTimer = ({ targetDate }) => {
    const calculateTimeLeft = (0, import_react56.useCallback)(() => {
      const difference = +new Date(targetDate) - +/* @__PURE__ */ new Date();
      let timeLeft2 = {};
      if (difference > 0) {
        timeLeft2 = {
          jours: Math.floor(difference / (1e3 * 60 * 60 * 24)),
          heures: Math.floor(difference / (1e3 * 60 * 60) % 24),
          minutes: Math.floor(difference / 1e3 / 60 % 60),
          secondes: Math.floor(difference / 1e3 % 60)
        };
      }
      return timeLeft2;
    }, [targetDate]);
    const [timeLeft, setTimeLeft] = (0, import_react56.useState)(calculateTimeLeft());
    (0, import_react56.useEffect)(() => {
      const timerId = setInterval(() => {
        const newTimeLeft = calculateTimeLeft();
        setTimeLeft(newTimeLeft);
        if (Object.keys(newTimeLeft).length === 0) {
          clearInterval(timerId);
        }
      }, 1e3);
      return () => clearInterval(timerId);
    }, [calculateTimeLeft]);
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex justify-center items-center gap-4 text-center", children: [
      Object.entries(timeLeft).map(([unit, value]) => /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "bg-white dark:bg-gray-700/50 shadow-md rounded-lg p-2 min-w-[60px]", children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "text-2xl font-bold text-blue-500", children: String(value).padStart(2, "0") }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "text-xs uppercase text-gray-500 dark:text-gray-400", children: unit })
      ] }, unit)),
      Object.keys(timeLeft).length === 0 && /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "text-lg font-semibold text-red-400", children: "Cette vente est termin\xE9e !" })
    ] });
  };
  var FlashSalesPage = ({ allProducts, allStores, flashSales, onProductClick, onBack, onVendorClick, isComparisonEnabled }) => {
    const { user } = useAuth();
    const { visibleSales, saleForCountdown, isCountdownForUpcoming } = (0, import_react56.useMemo)(() => {
      const now = /* @__PURE__ */ new Date();
      const isPremium = user?.loyalty?.status === "premium" || user?.loyalty?.status === "premium_plus";
      const twentyFourHoursFromNow = new Date(now.getTime() + 24 * 60 * 60 * 1e3);
      const _visibleSales = flashSales.filter((sale) => {
        const startDate = new Date(sale.startDate);
        const endDate = new Date(sale.endDate);
        if (endDate < now) return false;
        if (isPremium) {
          return startDate <= twentyFourHoursFromNow;
        } else {
          return startDate <= now;
        }
      });
      const _saleForCountdown = (() => {
        const upcoming = _visibleSales.filter((s) => new Date(s.startDate) > now).sort((a, b) => +new Date(a.startDate) - +new Date(b.startDate));
        if (upcoming.length > 0) return upcoming[0];
        const active = _visibleSales.filter((s) => new Date(s.startDate) <= now).sort((a, b) => +new Date(a.endDate) - +new Date(b.endDate));
        return active[0];
      })();
      const _isCountdownForUpcoming = _saleForCountdown && new Date(_saleForCountdown.startDate) > now;
      return { visibleSales: _visibleSales, saleForCountdown: _saleForCountdown, isCountdownForUpcoming: _isCountdownForUpcoming };
    }, [flashSales, user]);
    const allFlashSaleProducts = (0, import_react56.useMemo)(() => {
      const approvedProductIdsInVisibleSales = new Set(
        visibleSales.flatMap(
          (sale) => sale.products.filter((fp) => fp.status === "approved").map((fp) => fp.productId)
        )
      );
      return allProducts.filter((p) => approvedProductIdsInVisibleSales.has(p.id));
    }, [visibleSales, allProducts]);
    const { filteredAndSortedProducts, filters, setFilters, resetFilters } = useProductFiltering(allFlashSaleProducts, allStores);
    const findStoreLocation = (vendorName) => allStores.find((s) => s.name === vendorName)?.location;
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "bg-gray-50 dark:bg-gray-900 min-h-[80vh]", children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour \xE0 l'accueil"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "text-center bg-blue-900/80 text-white border border-blue-500 rounded-xl p-8 mb-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex items-center justify-center gap-3 mb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(BoltIcon, { className: "w-10 h-10 text-yellow-300" }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("h1", { className: "text-4xl font-bold", children: "Ventes Flash" })
        ] }),
        saleForCountdown ? /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(import_jsx_runtime73.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "text-lg text-gray-300 mb-6", children: isCountdownForUpcoming ? `La vente flash "${saleForCountdown.name}" commence dans :` : `La vente flash "${saleForCountdown.name}" se termine dans :` }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(CountdownTimer, { targetDate: isCountdownForUpcoming ? saleForCountdown.startDate : saleForCountdown.endDate })
        ] }) : null
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "lg:flex lg:gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
          ProductFilters_default,
          {
            allProducts: allFlashSaleProducts,
            filters,
            setFilters,
            resetFilters
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("main", { className: "flex-grow", children: filteredAndSortedProducts.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6", children: filteredAndSortedProducts.map((product) => {
          const saleForProduct = visibleSales.find((s) => s.products.some((p) => p.productId === product.id));
          const isUpcoming = saleForProduct && new Date(saleForProduct.startDate) > /* @__PURE__ */ new Date();
          return product && /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: findStoreLocation(product.vendor), flashSales, isComparisonEnabled, isFlashSaleUpcoming: isUpcoming, stores: allStores }, product.id);
        }) }) : /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md h-full flex flex-col justify-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: "Aucune vente flash en ce moment." }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "text-gray-400", children: "Revenez bient\xF4t pour des offres incroyables !" })
        ] }) })
      ] })
    ] }) });
  };
  var FlashSalesPage_default = FlashSalesPage;

  // components/SearchResultsPage.tsx
  var import_react57 = __toESM(require_react(), 1);
  var import_jsx_runtime74 = __toESM(require_jsx_runtime(), 1);
  var SearchResultsPage = ({ searchQuery, products, stores, flashSales, onProductClick, onBack, onVendorClick, isComparisonEnabled }) => {
    const searchedProducts = (0, import_react57.useMemo)(() => {
      if (!searchQuery) return [];
      const lowerCaseQuery = searchQuery.toLowerCase();
      return products.filter(
        (p) => p.name.toLowerCase().includes(lowerCaseQuery) || p.description.toLowerCase().includes(lowerCaseQuery) || p.vendor.toLowerCase().includes(lowerCaseQuery) || p.brand?.toLowerCase().includes(lowerCaseQuery)
      );
    }, [products, searchQuery]);
    const { filteredAndSortedProducts, filters, setFilters, resetFilters } = useProductFiltering(searchedProducts, stores);
    const findStoreLocation = (vendorName) => stores.find((s) => s.name === vendorName)?.location;
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("div", { className: "lg:flex lg:gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(
          ProductFilters_default,
          {
            allProducts: searchedProducts,
            filters,
            setFilters,
            resetFilters
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("main", { className: "flex-grow", children: [
          /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("div", { className: "mb-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: [
              "R\xE9sultats pour: ",
              /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("span", { className: "text-kmer-green", children: [
                '"',
                searchQuery,
                '"'
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("p", { className: "text-gray-600 dark:text-gray-300", children: [
              filteredAndSortedProducts.length,
              " sur ",
              searchedProducts.length,
              " produits affich\xE9s"
            ] })
          ] }),
          filteredAndSortedProducts.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6", children: filteredAndSortedProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: findStoreLocation(product.vendor), flashSales, isComparisonEnabled, stores }, product.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md h-full flex flex-col justify-center items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(SearchIcon, { className: "w-16 h-16 text-gray-400 mb-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: "Aucun produit trouv\xE9." }),
            /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: "Nous n'avons trouv\xE9 aucun r\xE9sultat pour votre recherche." }),
            /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("p", { className: "text-gray-500 dark:text-gray-500 text-sm mt-1", children: "Essayez d'utiliser des mots-cl\xE9s plus g\xE9n\xE9raux." })
          ] })
        ] })
      ] })
    ] });
  };
  var SearchResultsPage_default = SearchResultsPage;

  // components/WishlistPage.tsx
  var import_jsx_runtime75 = __toESM(require_jsx_runtime(), 1);
  var WishlistPage = ({ allProducts, allStores, flashSales, onProductClick, onBack, onVendorClick, isComparisonEnabled }) => {
    const { wishlist } = useWishlist();
    const wishlistedProducts = allProducts.filter((p) => wishlist.includes(p.id));
    const findStoreLocation = (vendorName) => allStores.find((s) => s.name === vendorName)?.location;
    return /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "container mx-auto px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour \xE0 l'accueil"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "flex items-center justify-center gap-3 mb-10", children: [
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(HeartIcon, { className: "w-8 h-8 text-kmer-red", filled: true }),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: "Mes Favoris" })
      ] }),
      wishlistedProducts.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8", children: wishlistedProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
        ProductCard_default,
        {
          product,
          onProductClick,
          onVendorClick,
          location: findStoreLocation(product.vendor),
          flashSales,
          isComparisonEnabled,
          stores: allStores
        },
        product.id
      )) }) : /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: "Votre liste de favoris est vide." }),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6", children: "Cliquez sur le c\u0153ur d'un produit pour l'ajouter ici !" }),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("button", { onClick: onBack, className: "bg-kmer-green text-white font-bold py-3 px-8 rounded-full hover:bg-green-700 transition-colors", children: "D\xE9couvrir des produits" })
      ] })
    ] });
  };
  var WishlistPage_default = WishlistPage;

  // components/DeliveryAgentDashboard.tsx
  var import_react62 = __toESM(require_react(), 1);

  // components/shared/ScannerModal.tsx
  var import_react58 = __toESM(require_react(), 1);
  var import_jsx_runtime76 = __toESM(require_jsx_runtime(), 1);
  var ScannerModal = ({ onClose, onScanSuccess, t }) => {
    const html5QrCodeRef = (0, import_react58.useRef)(null);
    const [scannerError, setScannerError] = (0, import_react58.useState)(null);
    const onScanSuccessRef = (0, import_react58.useRef)(onScanSuccess);
    onScanSuccessRef.current = onScanSuccess;
    const tRef = (0, import_react58.useRef)(t);
    tRef.current = t;
    (0, import_react58.useEffect)(() => {
      if (typeof Html5Qrcode === "undefined") {
        setScannerError("La biblioth\xE8que de scan n'a pas pu \xEAtre charg\xE9e.");
        return;
      }
      const html5QrCode = new Html5Qrcode("reader");
      html5QrCodeRef.current = html5QrCode;
      const config = { fps: 10, qrbox: { width: 250, height: 250 } };
      const startScanner = async () => {
        try {
          if (!html5QrCodeRef.current?.isScanning) {
            setScannerError(null);
            await html5QrCode.start(
              { facingMode: "environment" },
              config,
              (decodedText) => {
                onScanSuccessRef.current(decodedText);
              },
              (errorMessage) => {
              }
            );
          }
        } catch (err) {
          console.error("Failed to start scanner", err);
          setScannerError(tRef.current("deliveryDashboard.scannerError"));
        }
      };
      const timer = setTimeout(startScanner, 100);
      return () => {
        clearTimeout(timer);
        if (html5QrCodeRef.current?.isScanning) {
          html5QrCodeRef.current.stop().catch((err) => console.error("Error stopping scanner", err));
        }
      };
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("div", { className: "fixed inset-0 bg-black/75 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("div", { className: "bg-gray-800 rounded-lg p-6 max-w-md w-full text-white", children: [
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("h3", { className: "text-xl font-bold mb-4", children: t("deliveryDashboard.scanPackage") }),
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("div", { id: "reader", className: "w-full h-64 bg-gray-900 rounded-md" }),
      scannerError && /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("p", { className: "text-red-400 mt-2", children: scannerError }),
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("button", { onClick: onClose, className: "mt-4 w-full bg-gray-600 py-2 rounded-md", children: t("common.cancel") })
    ] }) });
  };

  // components/delivery/SignatureModal.tsx
  var import_react59 = __toESM(require_react(), 1);
  var import_jsx_runtime77 = __toESM(require_jsx_runtime(), 1);
  var SignatureModal = ({ order, onClose, onConfirm, t }) => {
    const [recipientName, setRecipientName] = (0, import_react59.useState)("");
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)("div", { className: "fixed inset-0 bg-black/75 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime77.jsx)("h3", { className: "text-xl font-bold mb-4 dark:text-white", children: t("deliveryDashboard.confirmDelivery") }),
      /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)("p", { className: "text-sm mb-4", children: [
        t("deliveryDashboard.order"),
        ": ",
        /* @__PURE__ */ (0, import_jsx_runtime77.jsx)("span", { className: "font-mono", children: order.id })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime77.jsx)("label", { htmlFor: "recipientName", className: "block text-sm font-medium dark:text-gray-300", children: t("deliveryDashboard.recipientName") }),
        /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
          "input",
          {
            id: "recipientName",
            type: "text",
            value: recipientName,
            onChange: (e) => setRecipientName(e.target.value),
            className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600",
            placeholder: "Ex: Jean Dupont",
            required: true
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)("div", { className: "flex justify-end gap-2 mt-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime77.jsx)("button", { onClick: onClose, className: "bg-gray-200 dark:bg-gray-600 px-4 py-2 rounded-lg", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)("button", { onClick: () => onConfirm(order.id, recipientName), disabled: !recipientName.trim(), className: "bg-green-500 text-white px-4 py-2 rounded-lg disabled:bg-gray-400 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(CheckIcon, { className: "w-5 h-5" }),
          " ",
          t("deliveryDashboard.confirm")
        ] })
      ] })
    ] }) });
  };

  // components/delivery/DeliveryFailureModal.tsx
  var import_react60 = __toESM(require_react(), 1);
  var import_jsx_runtime78 = __toESM(require_jsx_runtime(), 1);
  var DeliveryFailureModal = ({ order, onClose, onConfirm, t }) => {
    const [reason, setReason] = (0, import_react60.useState)("client-absent");
    const [details, setDetails] = (0, import_react60.useState)("");
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("div", { className: "fixed inset-0 bg-black/75 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("h3", { className: "text-xl font-bold mb-4 dark:text-white", children: t("deliveryDashboard.reportFailure") }),
      /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("p", { className: "text-sm mb-4", children: [
        t("deliveryDashboard.order"),
        ": ",
        /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("span", { className: "font-mono", children: order.id })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("label", { htmlFor: "failureReason", className: "block text-sm font-medium dark:text-gray-300", children: t("deliveryDashboard.reason") }),
          /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)(
            "select",
            {
              id: "failureReason",
              value: reason,
              onChange: (e) => setReason(e.target.value),
              className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("option", { value: "client-absent", children: t("deliveryDashboard.clientAbsent") }),
                /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("option", { value: "adresse-erronee", children: t("deliveryDashboard.wrongAddress") }),
                /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("option", { value: "colis-refuse", children: t("deliveryDashboard.packageRefused") })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("label", { htmlFor: "failureDetails", className: "block text-sm font-medium dark:text-gray-300", children: t("deliveryDashboard.details") }),
          /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
            "textarea",
            {
              id: "failureDetails",
              value: details,
              onChange: (e) => setDetails(e.target.value),
              rows: 3,
              className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600",
              placeholder: "Ex: Le client ne r\xE9pond pas au t\xE9l\xE9phone, la porte est ferm\xE9e...",
              required: true
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "flex justify-end gap-2 mt-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("button", { onClick: onClose, className: "bg-gray-200 dark:bg-gray-600 px-4 py-2 rounded-lg", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("button", { onClick: () => onConfirm(order.id, { reason, details, date: (/* @__PURE__ */ new Date()).toISOString() }), disabled: !details.trim(), className: "bg-red-500 text-white px-4 py-2 rounded-lg disabled:bg-gray-400 flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(XIcon, { className: "w-5 h-5" }),
          " ",
          t("deliveryDashboard.confirmFailure")
        ] })
      ] })
    ] }) });
  };

  // components/delivery/MissionMap.tsx
  var import_react61 = __toESM(require_react(), 1);
  var import_jsx_runtime79 = __toESM(require_jsx_runtime(), 1);
  var MissionMap = ({ start, end }) => {
    const mapRef = (0, import_react61.useRef)(null);
    const leafletMap = (0, import_react61.useRef)(null);
    const routingControlRef = (0, import_react61.useRef)(null);
    (0, import_react61.useEffect)(() => {
      if (mapRef.current && !leafletMap.current) {
        leafletMap.current = L.map(mapRef.current).setView([4.05, 9.75], 11);
        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
          attribution: "&copy; OpenStreetMap contributors"
        }).addTo(leafletMap.current);
      }
      if (leafletMap.current && end) {
        if (routingControlRef.current) {
          leafletMap.current.removeControl(routingControlRef.current);
        }
        if (start) {
          routingControlRef.current = L.Routing.control({
            waypoints: [start, end],
            routeWhileDragging: false,
            show: false,
            createMarker: () => null
          }).addTo(leafletMap.current);
        } else {
          L.marker(end).addTo(leafletMap.current);
          leafletMap.current.setView(end, 14);
        }
      }
      setTimeout(() => leafletMap.current?.invalidateSize(true), 100);
    }, [start, end]);
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { ref: mapRef, className: "h-48 w-full rounded-md mt-4 z-0" });
  };

  // components/DeliveryAgentDashboard.tsx
  var import_jsx_runtime80 = __toESM(require_jsx_runtime(), 1);
  var DeliveryAgentDashboard = ({ onLogout, siteData }) => {
    const { user, updateUser } = useAuth();
    const { t } = useLanguage();
    const { allOrders, handleUpdateOrderStatus, handleDeliveryFailure } = siteData;
    const [isScannerOpen, setIsScannerOpen] = (0, import_react62.useState)(false);
    const [selectedOrder, setSelectedOrder] = (0, import_react62.useState)(null);
    const [isSignatureModalOpen, setIsSignatureModalOpen] = (0, import_react62.useState)(false);
    const [isFailureModalOpen, setIsFailureModalOpen] = (0, import_react62.useState)(false);
    const [showMap, setShowMap] = (0, import_react62.useState)(false);
    const activeMissions = (0, import_react62.useMemo)(
      () => allOrders.filter((o) => o.agentId === user?.id && ["picked-up", "at-depot", "out-for-delivery"].includes(o.status)),
      [allOrders, user]
    );
    const handleStatusToggle = () => {
      if (user) {
        const newStatus = user.availabilityStatus === "available" ? "unavailable" : "available";
        updateUser({ availabilityStatus: newStatus });
      }
    };
    const handleScanSuccess = (0, import_react62.useCallback)((decodedText) => {
      setIsScannerOpen(false);
      const order = allOrders.find((o) => o.trackingNumber === decodedText);
      if (order) {
        setSelectedOrder(order);
        if (order.status === "ready-for-pickup") {
          handleUpdateOrderStatus(order.id, "picked-up", user);
        }
      } else {
        alert("Commande non trouv\xE9e.");
      }
    }, [allOrders, handleUpdateOrderStatus, user]);
    const handleConfirmDelivery = (orderId, recipientName) => {
      handleUpdateOrderStatus(orderId, "delivered", user);
      setIsSignatureModalOpen(false);
      setSelectedOrder(null);
    };
    const handleFailureReport = (orderId, failureReason) => {
      handleDeliveryFailure(orderId, failureReason, user);
      setIsFailureModalOpen(false);
      setSelectedOrder(null);
    };
    if (!user) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "bg-gray-100 dark:bg-gray-950 min-h-screen", children: [
      isScannerOpen && /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(ScannerModal, { onClose: () => setIsScannerOpen(false), onScanSuccess: handleScanSuccess, t }),
      isSignatureModalOpen && selectedOrder && /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(SignatureModal, { order: selectedOrder, onClose: () => setIsSignatureModalOpen(false), onConfirm: handleConfirmDelivery, t }),
      isFailureModalOpen && selectedOrder && /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(DeliveryFailureModal, { order: selectedOrder, onClose: () => setIsFailureModalOpen(false), onConfirm: handleFailureReport, t }),
      /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("header", { className: "bg-white dark:bg-gray-800 shadow-sm sticky top-0 z-20", children: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("div", { className: "container mx-auto px-4 sm:px-6 py-3", children: /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "flex justify-between items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("h1", { className: "text-xl font-bold text-gray-800 dark:text-white", children: t("deliveryDashboard.title") }),
          /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
            t("deliveryDashboard.agent"),
            ": ",
            user.name
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("button", { onClick: onLogout, className: "text-sm bg-gray-200 dark:bg-gray-700 font-semibold px-4 py-2 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600", children: t("deliveryDashboard.logout") })
      ] }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("main", { className: "container mx-auto px-4 sm:px-6 py-6", children: /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "md:col-span-1 space-y-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("h2", { className: "font-bold text-lg mb-4", children: t("deliveryDashboard.status") }),
            /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("button", { onClick: handleStatusToggle, className: `w-full font-bold py-3 rounded-lg ${user.availabilityStatus === "available" ? "bg-green-500 text-white" : "bg-red-500 text-white"}`, children: user.availabilityStatus === "available" ? t("deliveryDashboard.setUnavailable") : t("deliveryDashboard.setAvailable") })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("h2", { className: "font-bold text-lg mb-4", children: [
              t("deliveryDashboard.activeMissions"),
              " (",
              activeMissions.length,
              ")"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("button", { onClick: () => setIsScannerOpen(true), className: "w-full bg-kmer-green text-white font-bold py-3 rounded-lg", children: t("deliveryDashboard.scanPackage") })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "md:col-span-2 space-y-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("h2", { className: "font-bold text-lg mb-4", children: t("deliveryDashboard.currentMissions") }),
            /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "space-y-4", children: [
              activeMissions.map((order) => /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "p-4 border rounded-lg dark:border-gray-700 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700/50", onClick: () => setSelectedOrder(order), children: [
                /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("p", { className: "font-bold", children: [
                  order.shippingAddress.address,
                  ", ",
                  order.shippingAddress.city
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("p", { className: "text-sm text-gray-500", children: order.id })
              ] }, order.id)),
              activeMissions.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("p", { className: "text-center text-gray-500 py-4", children: "Aucune mission en cours." })
            ] })
          ] }),
          selectedOrder && /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md animate-in", children: [
            /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("h3", { className: "font-bold text-lg mb-2", children: "D\xE9tails de la mission" }),
            /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("p", { className: "font-mono text-sm", children: selectedOrder.id }),
            /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("address", { className: "not-italic my-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("p", { className: "font-semibold", children: selectedOrder.shippingAddress.fullName }),
              /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("p", { children: [
                selectedOrder.shippingAddress.address,
                ", ",
                selectedOrder.shippingAddress.city
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("p", { children: selectedOrder.shippingAddress.phone })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("button", { onClick: () => setShowMap((s) => !s), className: "text-sm text-blue-500 font-semibold flex items-center gap-1 my-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(MapIcon, { className: "w-4 h-4" }),
              " ",
              showMap ? t("deliveryDashboard.hideMap") : t("deliveryDashboard.showMap")
            ] }),
            showMap && /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(MissionMap, { end: { lat: selectedOrder.shippingAddress.latitude || 4.05, lng: selectedOrder.shippingAddress.longitude || 9.75 } }),
            /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "flex gap-2 mt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("button", { onClick: () => setIsSignatureModalOpen(true), className: "flex-1 bg-green-500 text-white font-bold py-2 rounded-lg flex items-center justify-center gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(CheckIcon, { className: "w-5 h-5" }),
                " ",
                t("deliveryDashboard.delivered")
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("button", { onClick: () => setIsFailureModalOpen(true), className: "flex-1 bg-red-500 text-white font-bold py-2 rounded-lg flex items-center justify-center gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(XIcon, { className: "w-5 h-5" }),
                " ",
                t("deliveryDashboard.deliveryFailed")
              ] })
            ] })
          ] })
        ] })
      ] }) })
    ] });
  };

  // components/DepotAgentDashboard.tsx
  var import_react70 = __toESM(require_react(), 1);

  // components/depot/CheckInModal.tsx
  var import_react63 = __toESM(require_react(), 1);
  var import_jsx_runtime81 = __toESM(require_jsx_runtime(), 1);
  var CheckInModal = ({ order, onClose, onConfirm, t }) => {
    const [location, setLocation] = (0, import_react63.useState)("");
    return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("div", { className: "fixed inset-0 bg-black/75 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("h3", { className: "text-xl font-bold mb-4", children: t("depotDashboard.checkInParcel") }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)("p", { className: "text-sm mb-4", children: [
        t("common.orderId"),
        ": ",
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("span", { className: "font-mono", children: order.id })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("label", { htmlFor: "location", className: "block text-sm font-medium", children: t("depotDashboard.storageLocation") }),
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("input", { id: "location", type: "text", value: location, onChange: (e) => setLocation(e.target.value.toUpperCase()), className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", required: true })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)("div", { className: "flex justify-end gap-2 mt-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("button", { onClick: onClose, className: "bg-gray-200 dark:bg-gray-600 px-4 py-2 rounded-lg", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("button", { onClick: () => onConfirm(order.id, location), disabled: !location.trim(), className: "bg-green-500 text-white px-4 py-2 rounded-lg disabled:bg-gray-400", children: t("depotDashboard.checkIn") })
      ] })
    ] }) });
  };

  // components/depot/AssignModal.tsx
  var import_react64 = __toESM(require_react(), 1);
  var import_jsx_runtime82 = __toESM(require_jsx_runtime(), 1);
  var AssignModal = ({ order, agents, onAssign, onCancel }) => {
    const { t } = useLanguage();
    const [selectedAgentId, setSelectedAgentId] = (0, import_react64.useState)("");
    const availableAgents = agents.filter((a) => a.availabilityStatus === "available");
    return /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("div", { className: "fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("h3", { className: "text-lg font-bold mb-4", children: t("depotDashboard.assignDriver") }),
      /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)("p", { className: "text-sm mb-4", children: [
        t("common.orderId"),
        ": ",
        /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("span", { className: "font-mono", children: order.id })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)("select", { value: selectedAgentId, onChange: (e) => setSelectedAgentId(e.target.value), className: "w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600", children: [
        /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("option", { value: "", children: t("depotDashboard.chooseAvailableDriver") }),
        availableAgents.map((agent) => /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("option", { value: agent.id, children: agent.name }, agent.id))
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)("div", { className: "flex justify-end gap-2 mt-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("button", { onClick: onCancel, className: "bg-gray-200 px-4 py-2 rounded-lg", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("button", { onClick: () => onAssign(order.id, selectedAgentId), disabled: !selectedAgentId, className: "bg-blue-500 text-white px-4 py-2 rounded-lg disabled:bg-gray-400", children: t("depotDashboard.assign") })
      ] })
    ] }) });
  };

  // components/depot/InventoryPanel.tsx
  var import_react65 = __toESM(require_react(), 1);

  // components/depot/StatCard.tsx
  var import_jsx_runtime83 = __toESM(require_jsx_runtime(), 1);
  var StatCard4 = ({ label, value }) => /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { className: "p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg shadow-sm", children: [
    /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("h3", { className: "text-sm font-medium text-gray-500 dark:text-gray-400", children: label }),
    /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("p", { className: "text-3xl font-bold text-gray-800 dark:text-white mt-1", children: value })
  ] });

  // components/depot/InventoryPanel.tsx
  var import_jsx_runtime84 = __toESM(require_jsx_runtime(), 1);
  var InventoryPanel = ({ inventory, depot, recentMovements }) => {
    const { t } = useLanguage();
    const [searchTerm, setSearchTerm] = (0, import_react65.useState)("");
    const { totalSlots, occupiedSlots, freeSlots, freeLocations } = (0, import_react65.useMemo)(() => {
      if (!depot?.layout) return { totalSlots: 0, occupiedSlots: 0, freeSlots: 0, freeLocations: [] };
      const { aisles, shelves, locations } = depot.layout;
      const total = aisles * shelves * locations;
      const allPossibleLocations = /* @__PURE__ */ new Set();
      for (let a = 1; a <= aisles; a++) for (let s = 1; s <= shelves; s++) for (let l = 1; l <= locations; l++) allPossibleLocations.add(`A${a}-S${s}-L${l}`);
      const occupied = new Set(inventory.map((o) => o.storageLocationId).filter(Boolean));
      const free = [...allPossibleLocations].filter((loc) => !occupied.has(loc));
      return { totalSlots: total, occupiedSlots: occupied.size, freeSlots: free.length, freeLocations: free };
    }, [inventory, depot]);
    const filteredInventory = (0, import_react65.useMemo)(() => {
      if (!searchTerm) return inventory;
      const lowerSearch = searchTerm.toLowerCase();
      return inventory.filter(
        (order) => order.id.toLowerCase().includes(lowerSearch) || order.shippingAddress.fullName.toLowerCase().includes(lowerSearch) || order.storageLocationId?.toLowerCase().includes(lowerSearch)
      );
    }, [inventory, searchTerm]);
    return /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(StatCard4, { label: t("depotDashboard.inventoryPanel.totalSlots"), value: totalSlots }),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(StatCard4, { label: t("depotDashboard.inventoryPanel.occupiedSlots"), value: occupiedSlots }),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(StatCard4, { label: t("depotDashboard.inventoryPanel.freeSlots"), value: freeSlots })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("h3", { className: "font-bold mb-2", children: t("depotDashboard.inventoryPanel.currentInventory") }),
          /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
            "input",
            {
              type: "text",
              value: searchTerm,
              onChange: (e) => setSearchTerm(e.target.value),
              placeholder: t("depotDashboard.inventoryPanel.searchPlaceholder"),
              className: "w-full p-2 border rounded-md mb-2 dark:bg-gray-700 dark:border-gray-600"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "bg-white dark:bg-gray-800/50 rounded-lg shadow-md overflow-hidden max-h-96 overflow-y-auto", children: [
            /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("table", { className: "w-full text-sm", children: [
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700 sticky top-0", children: /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("tr", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.orderId") }),
                /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.location") }),
                /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.customer") })
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("tbody", { children: filteredInventory.map((order) => /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
                /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("td", { className: "p-2 font-mono", children: order.id }),
                /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("td", { className: "p-2 font-semibold", children: order.storageLocationId }),
                /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("td", { className: "p-2", children: order.shippingAddress.fullName })
              ] }, order.id)) })
            ] }),
            filteredInventory.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("p", { className: "text-center p-4", children: t("depotDashboard.noParcelsInStock") })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("h3", { className: "font-bold mb-2", children: t("depotDashboard.inventoryPanel.freeLocations") }),
          depot?.layout ? /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "bg-white dark:bg-gray-800/50 rounded-lg shadow-md p-4 max-h-96 overflow-y-auto", children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "flex flex-wrap gap-2", children: freeLocations.map((loc) => /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("span", { className: "bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300 text-xs font-mono px-2 py-1 rounded-full", children: loc }, loc)) }) }) : /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("p", { className: "text-center p-4 text-sm text-gray-500", children: t("depotDashboard.inventoryPanel.noLayout") })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "mt-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("h3", { className: "font-bold mb-2", children: t("depotDashboard.inventoryPanel.recentMovements") }),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "bg-white dark:bg-gray-800/50 rounded-lg shadow-md overflow-hidden max-h-96 overflow-y-auto", children: [
          /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("table", { className: "w-full text-sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700 sticky top-0", children: /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("tr", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.inventoryPanel.table.timestamp") }),
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.inventoryPanel.table.action") }),
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("th", { className: "p-2 text-left", children: t("common.orderId") }),
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.inventoryPanel.table.details") })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("tbody", { children: recentMovements.map((move, index) => /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("td", { className: "p-2 text-xs text-gray-500", children: new Date(move.timestamp).toLocaleString("fr-FR") }),
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("td", { className: "p-2", children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("span", { className: `px-2 py-0.5 text-xs font-semibold rounded-full ${move.type === "Entr\xE9e" ? "bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300" : "bg-orange-100 text-orange-800 dark:bg-orange-900/50 dark:text-orange-300"}`, children: move.type }) }),
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("td", { className: "p-2 font-mono", children: move.orderId }),
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("td", { className: "p-2 text-xs", children: move.details })
            ] }, index)) })
          ] }),
          recentMovements.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("p", { className: "text-center p-4 text-gray-500", children: t("depotDashboard.noData") })
        ] })
      ] })
    ] });
  };

  // components/depot/ParcelsPanel.tsx
  var import_react66 = __toESM(require_react(), 1);
  var import_jsx_runtime85 = __toESM(require_jsx_runtime(), 1);
  var ParcelsPanel = ({ ordersToAssign, ordersInDelivery, ordersWithIssues, deliveryAgents, setAssigningOrder }) => {
    const { t } = useLanguage();
    const [subTab, setSubTab] = (0, import_react66.useState)("toAssign");
    const renderTable = (orders) => /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "overflow-x-auto", children: [
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("table", { className: "w-full text-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.orderId") }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.customer") }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("th", { className: "p-2 text-left", children: subTab === "inDelivery" ? t("depotDashboard.table.agent") : t("depotDashboard.table.numItems") }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("th", { className: "p-2 text-center", children: t("common.actions") })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("tbody", { children: orders.map((order) => /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("td", { className: "p-2 font-mono", children: order.id }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("td", { className: "p-2", children: order.shippingAddress.fullName }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("td", { className: "p-2", children: subTab === "inDelivery" ? deliveryAgents.find((a) => a.id === order.agentId)?.name || order.agentId : order.items.length }),
          /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("td", { className: "p-2 text-center", children: subTab === "toAssign" && /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { onClick: () => setAssigningOrder(order), className: "bg-blue-500 text-white text-xs font-bold py-1 px-2 rounded-md", children: t("depotDashboard.assign") }) })
        ] }, order.id)) })
      ] }),
      orders.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("p", { className: "text-center p-4 text-gray-500", children: t("depotDashboard.noData") })
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "flex border-b dark:border-gray-700 mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { onClick: () => setSubTab("toAssign"), className: `px-4 py-2 font-semibold ${subTab === "toAssign" ? "border-b-2 border-kmer-green text-kmer-green" : "text-gray-500"}`, children: t("depotDashboard.toAssign", ordersToAssign.length) }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { onClick: () => setSubTab("inDelivery"), className: `px-4 py-2 font-semibold ${subTab === "inDelivery" ? "border-b-2 border-kmer-green text-kmer-green" : "text-gray-500"}`, children: t("depotDashboard.inDelivery", ordersInDelivery.length) }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("button", { onClick: () => setSubTab("issues"), className: `px-4 py-2 font-semibold ${subTab === "issues" ? "border-b-2 border-kmer-green text-kmer-green" : "text-gray-500"}`, children: t("depotDashboard.issues", ordersWithIssues.length) })
      ] }),
      subTab === "toAssign" && renderTable(ordersToAssign),
      subTab === "inDelivery" && renderTable(ordersInDelivery),
      subTab === "issues" && renderTable(ordersWithIssues)
    ] });
  };

  // components/depot/AgentsPanel.tsx
  var import_react67 = __toESM(require_react(), 1);
  var import_jsx_runtime86 = __toESM(require_jsx_runtime(), 1);
  var AgentsPanel = ({ agents, depot, onSaveSchedule }) => {
    const { t } = useLanguage();
    const [schedule, setSchedule] = (0, import_react67.useState)(depot.schedule || {});
    const [saved, setSaved] = (0, import_react67.useState)(false);
    (0, import_react67.useEffect)(() => {
      setSchedule(depot.schedule || {});
    }, [depot.schedule]);
    const days = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"];
    const shifts = ["Matin", "Apr\xE8s-midi", "Nuit", "Repos"];
    const translatedShifts = {
      "Matin": t("depotDashboard.shifts.morning"),
      "Apr\xE8s-midi": t("depotDashboard.shifts.afternoon"),
      "Nuit": t("depotDashboard.shifts.night"),
      "Repos": t("depotDashboard.shifts.off")
    };
    const handleScheduleChange = (agentId, day, value) => {
      setSchedule((prev) => ({
        ...prev,
        [agentId]: {
          ...prev[agentId] || {},
          [day]: value
        }
      }));
    };
    const handleSave = () => {
      onSaveSchedule(depot.id, schedule);
      setSaved(true);
      setTimeout(() => setSaved(false), 3e3);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("div", { className: "space-y-6", children: /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("h3", { className: "font-bold mb-4", children: t("depotDashboard.schedule") }),
      /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("div", { className: "overflow-x-auto", children: /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("table", { className: "w-full text-sm border dark:border-gray-700", children: [
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.agent") }),
          days.map((day) => /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("th", { className: "p-2 text-center", children: t(`depotDashboard.weekdays.${day}`) }, day))
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("tbody", { children: agents.map((agent) => /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("td", { className: "p-2 font-semibold", children: agent.name }),
          days.map((day) => /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("td", { className: "p-1", children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
            "select",
            {
              value: schedule[agent.id]?.[day] || "Repos",
              onChange: (e) => handleScheduleChange(agent.id, day, e.target.value),
              className: "w-full p-1 border rounded-md text-xs dark:bg-gray-600 dark:border-gray-500",
              children: shifts.map((shift) => /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("option", { value: shift, children: translatedShifts[shift] }, shift))
            }
          ) }, day))
        ] }, agent.id)) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { className: "mt-4 flex justify-end items-center gap-4", children: [
        saved && /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("span", { className: "text-green-600 flex items-center gap-1 text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(CheckCircleIcon, { className: "w-5 h-5" }),
          " ",
          t("depotDashboard.scheduleSaved")
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("button", { onClick: handleSave, className: "bg-blue-500 text-white font-bold py-2 px-4 rounded-lg", children: t("depotDashboard.saveSchedule") })
      ] })
    ] }) });
  };

  // components/depot/DriversPanel.tsx
  var import_jsx_runtime87 = __toESM(require_jsx_runtime(), 1);
  var DriversPanel = ({ deliveryAgents }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("div", { className: "overflow-x-auto", children: /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)("table", { className: "w-full text-sm", children: [
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)("tr", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.agent") }),
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.availability") }),
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.performance") })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("tbody", { children: deliveryAgents.map((agent) => /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("td", { className: "p-2 font-semibold", children: agent.name }),
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("td", { className: "p-2", children: /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("span", { className: `px-2 py-0.5 rounded-full text-xs font-semibold ${agent.availabilityStatus === "available" ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700"}`, children: agent.availabilityStatus === "available" ? t("deliveryDashboard.available") : t("deliveryDashboard.unavailable") }) }),
        /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)("td", { children: [
          t("depotDashboard.successRate"),
          ": ",
          agent.successRate.toFixed(1),
          "% (",
          t("depotDashboard.deliveriesSucceeded", agent.deliveredCount, agent.totalMissions),
          ")"
        ] })
      ] }, agent.id)) })
    ] }) });
  };

  // components/depot/SellersPanel.tsx
  var import_react68 = __toESM(require_react(), 1);
  var import_jsx_runtime88 = __toESM(require_jsx_runtime(), 1);
  var SellersPanel = ({ depotInventory, allStores }) => {
    const { t } = useLanguage();
    const sellersWithParcels = (0, import_react68.useMemo)(() => {
      const sellerParcelCount = {};
      depotInventory.forEach((order) => {
        order.items.forEach((item) => {
          sellerParcelCount[item.vendor] = (sellerParcelCount[item.vendor] || 0) + 1;
        });
      });
      return Object.entries(sellerParcelCount).map(([name, count]) => ({ name, count, store: allStores.find((s) => s.name === name) }));
    }, [depotInventory, allStores]);
    return /* @__PURE__ */ (0, import_jsx_runtime88.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime88.jsx)("h3", { className: "font-bold mb-4", children: t("depotDashboard.sellersWithParcels") }),
      /* @__PURE__ */ (0, import_jsx_runtime88.jsxs)("table", { className: "w-full text-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime88.jsx)("thead", { className: "bg-gray-100 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime88.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime88.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.seller") }),
          /* @__PURE__ */ (0, import_jsx_runtime88.jsx)("th", { className: "p-2 text-left", children: t("depotDashboard.table.location") }),
          /* @__PURE__ */ (0, import_jsx_runtime88.jsx)("th", { className: "p-2 text-right", children: t("depotDashboard.table.parcels") })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime88.jsx)("tbody", { children: sellersWithParcels.map(({ name, count, store }) => /* @__PURE__ */ (0, import_jsx_runtime88.jsxs)("tr", { className: "border-b dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime88.jsx)("td", { className: "p-2 font-semibold", children: name }),
          /* @__PURE__ */ (0, import_jsx_runtime88.jsxs)("td", { className: "p-2", children: [
            store?.location,
            ", ",
            store?.neighborhood
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime88.jsx)("td", { className: "p-2 text-right font-bold", children: count })
        ] }, name)) })
      ] })
    ] });
  };

  // components/depot/ReportsPanel.tsx
  var import_react69 = __toESM(require_react(), 1);
  var import_jsx_runtime89 = __toESM(require_jsx_runtime(), 1);
  var ReportsPanel = ({ depotOrders, deliveryAgents }) => {
    const { t } = useLanguage();
    const [period, setPeriod] = (0, import_react69.useState)("7days");
    const reportData = (0, import_react69.useMemo)(() => {
      const now = /* @__PURE__ */ new Date();
      const cutoffDate = /* @__PURE__ */ new Date();
      cutoffDate.setDate(now.getDate() - (period === "7days" ? 7 : 30));
      const filteredOrders = depotOrders.filter((o) => new Date(o.orderDate) >= cutoffDate);
      if (filteredOrders.length === 0) return null;
      let checkedIn = 0;
      let shippedOut = 0;
      let totalProcessingTime = 0;
      let processedCount = 0;
      let successfulDeliveries = 0;
      const dailyFlow = {};
      filteredOrders.forEach((order) => {
        const checkInEvent = order.trackingHistory.find((e) => e.status === "at-depot");
        const shipOutEvent = order.trackingHistory.find((e) => e.status === "out-for-delivery");
        if (checkInEvent) {
          checkedIn++;
          const day = new Date(checkInEvent.date).toLocaleDateString("fr-FR");
          dailyFlow[day] = { ...dailyFlow[day], in: (dailyFlow[day]?.in || 0) + 1 };
        }
        if (shipOutEvent) {
          shippedOut++;
          const day = new Date(shipOutEvent.date).toLocaleDateString("fr-FR");
          dailyFlow[day] = { ...dailyFlow[day], out: (dailyFlow[day]?.out || 0) + 1 };
        }
        if (checkInEvent && shipOutEvent) {
          totalProcessingTime += new Date(shipOutEvent.date).getTime() - new Date(checkInEvent.date).getTime();
          processedCount++;
        }
        if (order.status === "delivered") {
          successfulDeliveries++;
        }
      });
      const topDrivers = deliveryAgents.map((agent) => {
        const agentDeliveries = filteredOrders.filter((o) => o.agentId === agent.id && o.status === "delivered").length;
        return { name: agent.name, count: agentDeliveries };
      }).sort((a, b) => b.count - a.count).slice(0, 5);
      return {
        checkedIn,
        shippedOut,
        avgProcessingTime: processedCount > 0 ? totalProcessingTime / processedCount / (1e3 * 60 * 60) : 0,
        // in hours
        deliverySuccessRate: shippedOut > 0 ? successfulDeliveries / shippedOut * 100 : 0,
        dailyFlow: Object.entries(dailyFlow).map(([day, data]) => ({ day, ...data })),
        topDrivers
      };
    }, [depotOrders, deliveryAgents, period]);
    if (!reportData) {
      return /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", { className: "p-6 text-center text-gray-500", children: t("depotDashboard.reportsPanel.noData") });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("div", { className: "space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("h3", { className: "font-bold text-xl", children: t("depotDashboard.reportsPanel.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("p", { className: "text-sm font-semibold", children: t("depotDashboard.reportsPanel.selectPeriod") }),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("button", { onClick: () => setPeriod("7days"), className: `px-3 py-1 text-sm rounded-md ${period === "7days" ? "bg-kmer-green text-white" : "bg-gray-200"}`, children: t("common.days7") }),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("button", { onClick: () => setPeriod("30days"), className: `px-3 py-1 text-sm rounded-md ${period === "30days" ? "bg-kmer-green text-white" : "bg-gray-200"}`, children: t("common.days30") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("div", { className: "grid grid-cols-2 lg:grid-cols-4 gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(StatCard4, { label: t("depotDashboard.reportsPanel.parcelsCheckedIn"), value: reportData.checkedIn }),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(StatCard4, { label: t("depotDashboard.reportsPanel.parcelsShippedOut"), value: reportData.shippedOut }),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(StatCard4, { label: t("depotDashboard.reportsPanel.avgProcessingTime"), value: `${reportData.avgProcessingTime.toFixed(1)} ${t("depotDashboard.reportsPanel.hours")}` }),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(StatCard4, { label: t("depotDashboard.reportsPanel.deliverySuccessRate"), value: `${reportData.deliverySuccessRate.toFixed(1)}%` })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("div", { className: "p-4 bg-white dark:bg-gray-800/50 rounded-lg shadow-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("h4", { className: "font-semibold mb-2", children: t("depotDashboard.reportsPanel.dailyFlow") }),
          /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", { className: "flex justify-around items-end h-56 border-l border-b border-gray-200 dark:border-gray-700 pl-4 pb-4", children: reportData.dailyFlow.map(({ day, in: inCount, out: outCount }) => /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("div", { className: "flex flex-col items-center h-full justify-end", title: `${day}: ${inCount || 0} Entr\xE9es, ${outCount || 0} Sorties`, children: [
            /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("div", { className: "flex gap-1 items-end h-full", children: [
              /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", { className: "w-4 bg-green-500 rounded-t-sm", style: { height: `${(inCount || 0) / Math.max(...reportData.dailyFlow.map((d) => Math.max(d.in || 0, d.out || 0)), 1) * 100}%` } }),
              /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", { className: "w-4 bg-orange-500 rounded-t-sm", style: { height: `${(outCount || 0) / Math.max(...reportData.dailyFlow.map((d) => Math.max(d.in || 0, d.out || 0)), 1) * 100}%` } })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("p", { className: "text-xs mt-1", children: day.split("/")[0] })
          ] }, day)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("div", { className: "p-4 bg-white dark:bg-gray-800/50 rounded-lg shadow-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("h4", { className: "font-semibold mb-2", children: t("depotDashboard.reportsPanel.topDrivers") }),
          /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("ul", { children: reportData.topDrivers.map((driver, index) => /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("li", { className: "flex justify-between items-center text-sm py-1 border-b last:border-b-0", children: [
            /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("span", { children: [
              index + 1,
              ". ",
              driver.name
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("span", { className: "font-bold", children: [
              driver.count,
              " ",
              t("depotDashboard.reportsPanel.successfulDeliveries")
            ] })
          ] }, driver.name)) })
        ] })
      ] })
    ] });
  };

  // components/DepotAgentDashboard.tsx
  var import_jsx_runtime90 = __toESM(require_jsx_runtime(), 1);
  var DepotAgentDashboard = ({ user, onLogout, siteData }) => {
    const { t } = useLanguage();
    const { allUsers, allOrders, allStores, allZones, allPickupPoints } = siteData;
    const [activeTab, setActiveTab] = (0, import_react70.useState)("overview");
    const [assigningOrder, setAssigningOrder] = (0, import_react70.useState)(null);
    const [isScannerOpen, setIsScannerOpen] = (0, import_react70.useState)(false);
    const [checkingInOrder, setCheckingInOrder] = (0, import_react70.useState)(null);
    const isManager = user.role === "depot_manager";
    const onAssignAgentToOrder = (orderId, agentId) => {
      siteData.handleAssignAgentToOrder(orderId, agentId, user, allUsers);
    };
    const handleDepotCheckIn = (orderId, location) => {
      siteData.handleDepotCheckIn(orderId, location, user);
    };
    const onUpdateSchedule = (depotId, schedule) => {
      siteData.handleUpdateSchedule(depotId, schedule, user);
    };
    const { ordersToAssign, ordersInDelivery, ordersWithIssues, depotInventory, deliveryAgents, depotAgents, zoneName, recentMovements, depotOrders } = (0, import_react70.useMemo)(() => {
      const userZoneId = user.zoneId;
      const _zoneName = allZones.find((z) => z.id === userZoneId)?.name || "Inconnue";
      if (!userZoneId || !user.depotId) return { ordersToAssign: [], ordersInDelivery: [], ordersWithIssues: [], depotInventory: [], deliveryAgents: [], depotAgents: [], zoneName: _zoneName, recentMovements: [], depotOrders: [] };
      const _depotOrders = allOrders.filter((o) => o.pickupPointId === user.depotId || allUsers.find((u) => u.id === o.agentId)?.zoneId === userZoneId);
      const _depotInventory = _depotOrders.filter((o) => o.status === "at-depot" && o.storageLocationId);
      const _ordersToAssign = _depotInventory.filter((o) => o.deliveryMethod === "home-delivery" && !o.agentId);
      const _ordersInDelivery = _depotOrders.filter((o) => o.status === "out-for-delivery");
      const _ordersWithIssues = _depotOrders.filter((o) => ["returned", "depot-issue", "delivery-failed"].includes(o.status));
      const _deliveryAgents = allUsers.filter((u) => u.role === "delivery_agent" && u.zoneId === userZoneId);
      const _depotAgents = allUsers.filter((u) => u.role === "depot_agent" && u.depotId === user.depotId);
      const agentsWithPerf = _deliveryAgents.map((agent) => {
        const agentOrders = allOrders.filter((o) => o.agentId === agent.id);
        const deliveredCount = agentOrders.filter((o) => o.status === "delivered").length;
        const successRate = agentOrders.length > 0 ? deliveredCount / agentOrders.length * 100 : 0;
        return { ...agent, deliveredCount, successRate, totalMissions: agentOrders.length };
      });
      const movements = _depotOrders.flatMap(
        (order) => order.trackingHistory.filter(
          (event) => event.status === "at-depot" && event.details.includes("emplacement") || event.status === "out-for-delivery" && event.details.includes("assign\xE9 au livreur")
        ).map((event) => ({
          type: event.status === "at-depot" ? "Entr\xE9e" : "Sortie",
          orderId: order.id,
          timestamp: event.date,
          details: event.details.split(". ").pop() || event.details
          // Get the relevant part
        }))
      );
      const sortedMovements = movements.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()).slice(0, 50);
      return { ordersToAssign: _ordersToAssign, ordersInDelivery: _ordersInDelivery, ordersWithIssues: _ordersWithIssues, depotInventory: _depotInventory, deliveryAgents: agentsWithPerf, depotAgents: _depotAgents, zoneName: _zoneName, recentMovements: sortedMovements, depotOrders: _depotOrders };
    }, [allOrders, allUsers, user, allZones]);
    const handleScanSuccess = (0, import_react70.useCallback)((decodedText) => {
      setIsScannerOpen(false);
      const order = allOrders.find((o) => o.trackingNumber === decodedText);
      if (!order) {
        alert("Commande non trouv\xE9e.");
        return;
      }
      setCheckingInOrder(order);
    }, [allOrders]);
    const handleConfirmCheckIn = (0, import_react70.useCallback)((orderId, location) => {
      handleDepotCheckIn(orderId, location);
      setCheckingInOrder(null);
    }, [handleDepotCheckIn]);
    const renderContent = () => {
      const depot = allPickupPoints.find((p) => p.id === user.depotId);
      if (!depot) return /* @__PURE__ */ (0, import_jsx_runtime90.jsx)("p", { children: "Erreur: D\xE9p\xF4t non trouv\xE9." });
      switch (activeTab) {
        case "overview":
          return /* @__PURE__ */ (0, import_jsx_runtime90.jsx)("div", { className: "space-y-6", children: /* @__PURE__ */ (0, import_jsx_runtime90.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(StatCard4, { label: t("depotDashboard.parcelsToAssign"), value: ordersToAssign.length }),
            /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(StatCard4, { label: t("depotDashboard.parcelsInDelivery"), value: ordersInDelivery.length }),
            /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(StatCard4, { label: t("depotDashboard.availableAgents"), value: deliveryAgents.filter((a) => a.availabilityStatus === "available").length })
          ] }) });
        case "parcels":
          return /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(ParcelsPanel, { ordersToAssign, ordersInDelivery, ordersWithIssues, deliveryAgents, setAssigningOrder });
        case "inventory":
          return /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(InventoryPanel, { inventory: depotInventory, depot, recentMovements });
        case "drivers":
          return isManager ? /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(DriversPanel, { deliveryAgents }) : null;
        case "agents":
          return isManager ? /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(AgentsPanel, { agents: [user, ...depotAgents], depot, onSaveSchedule: (depotId, schedule) => onUpdateSchedule(depotId, schedule) }) : null;
        case "sellers":
          return isManager ? /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(SellersPanel, { depotInventory, allStores }) : null;
        case "reports":
          return isManager ? /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(ReportsPanel, { depotOrders, deliveryAgents }) : null;
        default:
          return /* @__PURE__ */ (0, import_jsx_runtime90.jsx)("div", { className: "text-center py-8 text-gray-500", children: t("superadmin.panelUnderConstruction", activeTab) });
      }
    };
    const TABS = [
      { id: "overview", label: t("depotDashboard.overview"), icon: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(ChartPieIcon, { className: "w-5 h-5" }), managerOnly: false },
      { id: "parcels", label: t("depotDashboard.parcels"), icon: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(ShoppingBagIcon, { className: "w-5 h-5" }), managerOnly: false },
      { id: "inventory", label: t("depotDashboard.inventory"), icon: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(ArchiveBoxIcon, { className: "w-5 h-5" }), managerOnly: false },
      { id: "drivers", label: t("depotDashboard.drivers"), icon: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(TruckIcon, { className: "w-5 h-5" }), managerOnly: true },
      { id: "agents", label: t("depotDashboard.agents"), icon: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(UserGroupIcon, { className: "w-5 h-5" }), managerOnly: true },
      { id: "sellers", label: t("depotDashboard.sellers"), icon: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(BuildingStorefrontIcon, { className: "w-5 h-5" }), managerOnly: true },
      { id: "reports", label: t("depotDashboard.reports"), icon: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(ChartPieIcon, { className: "w-5 h-5" }), managerOnly: true }
    ].filter((tab) => !tab.managerOnly || isManager);
    return /* @__PURE__ */ (0, import_jsx_runtime90.jsxs)("div", { className: "bg-gray-100 dark:bg-gray-950 min-h-screen", children: [
      isScannerOpen && /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(ScannerModal, { onClose: () => setIsScannerOpen(false), onScanSuccess: handleScanSuccess, t }),
      checkingInOrder && /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(CheckInModal, { order: checkingInOrder, onClose: () => setCheckingInOrder(null), onConfirm: handleConfirmCheckIn, t }),
      /* @__PURE__ */ (0, import_jsx_runtime90.jsx)("header", { className: "bg-white dark:bg-gray-800 shadow-sm sticky top-0 z-20", children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)("div", { className: "container mx-auto px-4 sm:px-6 py-3", children: /* @__PURE__ */ (0, import_jsx_runtime90.jsxs)("div", { className: "flex justify-between items-center flex-wrap gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime90.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime90.jsx)("h1", { className: "text-xl font-bold text-gray-800 dark:text-white", children: t("depotDashboard.title", zoneName) }),
          /* @__PURE__ */ (0, import_jsx_runtime90.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
            isManager ? t("depotDashboard.manager") : "Agent",
            ": ",
            user.name
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime90.jsxs)("div", { className: "flex items-center gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime90.jsxs)("button", { onClick: () => setIsScannerOpen(true), className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(QrCodeIcon, { className: "w-5 h-5" }),
            " ",
            t("depotDashboard.scanAndCheckIn")
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime90.jsx)("button", { onClick: onLogout, className: "text-sm bg-gray-200 dark:bg-gray-700 font-semibold px-4 py-2 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600", children: t("depotDashboard.logout") })
        ] })
      ] }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime90.jsx)("main", { className: "container mx-auto px-4 sm:px-6 py-6", children: /* @__PURE__ */ (0, import_jsx_runtime90.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime90.jsx)("div", { className: "p-2 border-b dark:border-gray-700 flex justify-start items-center overflow-x-auto", children: TABS.map((tab) => /* @__PURE__ */ (0, import_jsx_runtime90.jsxs)("button", { onClick: () => setActiveTab(tab.id), className: `px-4 py-2 font-semibold flex-shrink-0 flex items-center gap-2 ${activeTab === tab.id ? "border-b-2 border-kmer-green text-kmer-green" : "text-gray-500"}`, children: [
          tab.icon,
          " ",
          tab.label
        ] }, tab.id)) }),
        /* @__PURE__ */ (0, import_jsx_runtime90.jsx)("div", { className: "p-4", children: renderContent() })
      ] }) }),
      assigningOrder && /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(AssignModal, { order: assigningOrder, agents: deliveryAgents, onAssign: (orderId, agentId) => {
        onAssignAgentToOrder(orderId, agentId);
        setAssigningOrder(null);
      }, onCancel: () => setAssigningOrder(null) })
    ] });
  };

  // components/BecomePremiumPage.tsx
  var import_jsx_runtime91 = __toESM(require_jsx_runtime(), 1);
  var ProgressBar = ({ value, max, label }) => {
    const percentage = Math.min(value / max * 100, 100);
    return /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { className: "flex justify-between items-center mb-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("span", { className: "text-sm font-medium text-gray-700 dark:text-gray-300", children: label }),
        /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("span", { className: "text-sm font-medium text-gray-700 dark:text-gray-300", children: [
          value.toLocaleString("fr-CM"),
          " / ",
          max.toLocaleString("fr-CM")
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("div", { className: "w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("div", { className: "bg-kmer-green h-2.5 rounded-full", style: { width: `${percentage}%` } }) })
    ] });
  };
  var BecomePremiumPage = ({ siteSettings, onBack, onBecomePremiumByCaution, onUpgradeToPremiumPlus }) => {
    const { user } = useAuth();
    if (!user) return null;
    const loyalty = user.loyalty;
    const loyaltySettings = siteSettings.customerLoyaltyProgram;
    const BenefitItem = ({ children }) => /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("li", { className: "flex items-start gap-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(CheckCircleIcon, { className: "w-5 h-5 text-green-500 flex-shrink-0 mt-0.5" }),
      /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("span", { children })
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("div", { className: "bg-gray-50 dark:bg-gray-900 py-12", children: /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { className: "container mx-auto px-4 sm:px-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        "Retour"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { className: "text-center max-w-3xl mx-auto", children: [
        /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("h1", { className: "text-4xl font-extrabold text-gray-800 dark:text-white mb-4", children: "D\xE9bloquez des Avantages Exclusifs" }),
        /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("p", { className: "text-lg text-gray-600 dark:text-gray-400", children: "Passez au niveau sup\xE9rieur avec nos statuts Premium et Premium+ pour une exp\xE9rience d'achat in\xE9gal\xE9e." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { className: "max-w-xl mx-auto my-12 p-6 bg-white dark:bg-gray-800 rounded-2xl shadow-lg border dark:border-gray-700", children: [
        /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("h2", { className: "text-xl font-bold mb-4", children: [
          "Votre Statut Actuel : ",
          /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("span", { className: "capitalize text-kmer-green", children: loyalty.status.replace("_", "+") })
        ] }),
        loyalty.status === "standard" && loyaltySettings.isEnabled && /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { className: "space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: "Atteignez le statut Premium en r\xE9alisant l'un des objectifs suivants :" }),
          /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(ProgressBar, { value: loyalty.orderCount, max: loyaltySettings.premium.thresholds.orders, label: "Commandes pass\xE9es" }),
          /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(ProgressBar, { value: loyalty.totalSpent, max: loyaltySettings.premium.thresholds.spending, label: "Total d\xE9pens\xE9 (FCFA)" })
        ] }),
        loyalty.status === "premium" && /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("p", { className: "text-gray-600 dark:text-gray-300", children: "F\xE9licitations ! Vous profitez d\xE9j\xE0 des avantages Premium." }),
        loyalty.status === "premium_plus" && /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("p", { className: "text-gray-600 dark:text-gray-300", children: "Merci d'\xEAtre un membre Premium+ ! Vous b\xE9n\xE9ficiez de nos meilleurs avantages." })
      ] }),
      loyaltySettings.isEnabled && /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-5xl mx-auto", children: [
        /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { className: `p-8 rounded-2xl shadow-lg flex flex-col ${loyalty.status === "premium" || loyalty.status === "premium_plus" ? "bg-green-50 dark:bg-green-900/20 border-2 border-kmer-green" : "bg-white dark:bg-gray-800"}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { className: "flex items-center gap-3 mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(StarIcon, { className: "w-8 h-8 text-kmer-yellow" }),
            /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("h3", { className: "text-2xl font-bold", children: "Premium" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6 flex-grow", children: "Id\xE9al pour les acheteurs r\xE9guliers qui veulent plus d'avantages." }),
          /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("ul", { className: "space-y-3 mb-8", children: loyaltySettings.premium.benefits.map((b, i) => /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(BenefitItem, { children: b }, i)) }),
          /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { className: "mt-auto", children: [
            loyalty.status === "standard" && /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("button", { onClick: onBecomePremiumByCaution, className: "w-full bg-kmer-yellow text-gray-900 font-bold py-3 rounded-lg hover:bg-yellow-300 transition-colors", children: [
              "Payer la caution pour devenir Premium",
              /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("span", { className: "block text-xs font-normal", children: [
                "Caution de ",
                loyaltySettings.premium.cautionAmount.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] }),
            loyalty.status === "premium" && /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { className: "text-center font-bold text-kmer-green p-3 rounded-lg bg-kmer-green/10", children: [
              /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(CheckCircleIcon, { className: "w-6 h-6 mx-auto mb-2" }),
              "Vous \xEAtes d\xE9j\xE0 Premium"
            ] }),
            loyalty.status === "premium_plus" && /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("div", { className: "text-center font-bold text-gray-500 p-3", children: "Statut d\xE9j\xE0 atteint" })
          ] })
        ] }),
        loyaltySettings.premiumPlus.isEnabled && /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { className: "p-8 rounded-2xl shadow-lg flex flex-col bg-gray-900 text-white border-2 border-kmer-red", children: [
          /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { className: "flex items-center gap-3 mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(StarPlatinumIcon, { className: "w-8 h-8 text-kmer-red" }),
            /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("h3", { className: "text-2xl font-bold", children: "Premium+" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("p", { className: "text-gray-300 mb-6 flex-grow", children: "L'exp\xE9rience ultime pour nos clients les plus fid\xE8les." }),
          /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("ul", { className: "space-y-3 mb-8", children: loyaltySettings.premiumPlus.benefits.map((b, i) => /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(BenefitItem, { children: b }, i)) }),
          /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { className: "mt-auto", children: [
            loyalty.status !== "premium_plus" && /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("button", { onClick: onUpgradeToPremiumPlus, className: "w-full bg-kmer-red text-white font-bold py-3 rounded-lg hover:bg-red-600 transition-colors", children: [
              loyalty.status === "premium" ? "Payer pour passer \xE0 Premium+" : "Payer pour devenir Premium+",
              /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("span", { className: "block text-xs font-normal", children: [
                loyaltySettings.premiumPlus.annualFee.toLocaleString("fr-CM"),
                " FCFA / an"
              ] })
            ] }),
            loyalty.status === "premium_plus" && /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { className: "text-center font-bold text-kmer-red p-3 rounded-lg bg-kmer-red/10", children: [
              /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(CheckCircleIcon, { className: "w-6 h-6 mx-auto mb-2" }),
              "Vous \xEAtes un membre Premium+"
            ] })
          ] })
        ] })
      ] })
    ] }) });
  };
  var BecomePremiumPage_default = BecomePremiumPage;

  // components/ComponentStubs.tsx
  var import_jsx_runtime92 = __toESM(require_jsx_runtime(), 1);
  var Stub = ({ name, props }) => /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)("div", { className: "p-6 m-4 border border-dashed border-gray-400 rounded-lg bg-gray-50 dark:bg-gray-800", children: [
    /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("h2", { className: "text-xl font-bold text-gray-700 dark:text-gray-300", children: name }),
    /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)("pre", { className: "mt-2 text-xs text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700 p-2 rounded overflow-auto", children: [
      JSON.stringify(props, null, 2).substring(0, 500),
      JSON.stringify(props, null, 2).length > 500 && "..."
    ] })
  ] });
  var ComparisonPage = (props) => /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(Stub, { name: "ComparisonPage", props });
  var SitemapSection = ({ title, icon, children, className }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)("div", { className: `bg-white dark:bg-gray-800/50 p-6 rounded-lg shadow-md ${className}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)("h2", { className: "text-xl font-bold border-b pb-3 mb-4 dark:border-gray-600 flex items-center gap-3", children: [
        icon,
        title
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("ul", { className: "space-y-2", children })
    ] });
  };
  var InfoPage = ({ title, content, slug, onBack, allProducts, allCategories, allStores, onProductClick, onCategoryClick, onVendorClick }) => {
    const { t } = useLanguage();
    const SitemapContent = () => /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)("div", { className: "space-y-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)("div", { className: "grid md:grid-cols-2 lg:grid-cols-3 gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(SitemapSection, { title: t("sitemap.categories"), icon: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(DocumentTextIcon, { className: "w-6 h-6 text-kmer-green" }), children: allCategories.map((category) => /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("button", { onClick: () => onCategoryClick(category.id), className: "text-gray-600 dark:text-gray-300 hover:text-kmer-green hover:underline", children: t(category.name) }) }, category.id)) }),
        /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(SitemapSection, { title: t("sitemap.stores"), icon: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(BuildingStorefrontIcon, { className: "w-6 h-6 text-kmer-green" }), children: allStores.filter((s) => s.status === "active").map((store) => /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("button", { onClick: () => onVendorClick(store.name), className: "text-gray-600 dark:text-gray-300 hover:text-kmer-green hover:underline", children: store.name }) }, store.id)) }),
        /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(SitemapSection, { title: t("sitemap.pages"), icon: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(DocumentTextIcon, { className: "w-6 h-6 text-kmer-green" }), children: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("button", { onClick: onBack, className: "text-gray-600 dark:text-gray-300 hover:text-kmer-green hover:underline", children: t("header.backToHome") }) }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(SitemapSection, { title: t("sitemap.products"), icon: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(ShoppingBagIcon, { className: "w-6 h-6 text-kmer-green" }), className: "lg:col-span-3", children: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("ul", { className: "space-y-2 columns-1 sm:columns-2 md:columns-3 lg:columns-4", children: allProducts.filter((p) => p.status === "published").map((product) => /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("button", { onClick: () => onProductClick(product), className: "text-gray-600 dark:text-gray-300 hover:text-kmer-green hover:underline text-left text-sm", children: product.name }) }, product.id)) }) })
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)("div", { className: "container mx-auto px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        t("common.back")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)("div", { className: "bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white mb-6", children: title }),
        slug === "sitemap" ? /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(SitemapContent, {}) : /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("div", { className: "prose dark:prose-invert max-w-none", dangerouslySetInnerHTML: { __html: content } })
      ] })
    ] });
  };
  var StoresMapPage = (props) => /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(Stub, { name: "StoresMapPage", props });

  // components/NotFoundPage.tsx
  var import_jsx_runtime93 = __toESM(require_jsx_runtime(), 1);
  var NotFoundPage = ({ onNavigateHome }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime93.jsx)("div", { className: "container mx-auto px-6 py-24 flex justify-center text-center", children: /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)("div", { className: "max-w-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime93.jsx)("h1", { className: "text-6xl font-bold text-kmer-green", children: "404" }),
      /* @__PURE__ */ (0, import_jsx_runtime93.jsx)("h2", { className: "text-3xl font-bold text-gray-800 dark:text-white mt-4", children: t("notFound.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime93.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mt-4", children: t("notFound.description") }),
      /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)(
        "button",
        {
          onClick: onNavigateHome,
          className: "mt-8 bg-kmer-green text-white font-bold py-3 px-8 rounded-full hover:bg-green-700 transition-colors flex items-center gap-2 mx-auto",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
            t("notFound.backHome")
          ]
        }
      )
    ] }) });
  };
  var NotFoundPage_default = NotFoundPage;

  // components/ForbiddenPage.tsx
  var import_jsx_runtime94 = __toESM(require_jsx_runtime(), 1);
  var ForbiddenPage = ({ onNavigateHome }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime94.jsx)("div", { className: "container mx-auto px-6 py-24 flex justify-center text-center", children: /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)("div", { className: "max-w-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(ExclamationTriangleIcon, { className: "h-16 w-16 text-red-500 mx-auto mb-6" }),
      /* @__PURE__ */ (0, import_jsx_runtime94.jsx)("h1", { className: "text-6xl font-bold text-red-500", children: "403" }),
      /* @__PURE__ */ (0, import_jsx_runtime94.jsx)("h2", { className: "text-3xl font-bold text-gray-800 dark:text-white mt-4", children: t("forbidden.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime94.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mt-4", children: t("forbidden.description") }),
      /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)(
        "button",
        {
          onClick: onNavigateHome,
          className: "mt-8 bg-kmer-green text-white font-bold py-3 px-8 rounded-full hover:bg-green-700 transition-colors flex items-center gap-2 mx-auto",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
            t("forbidden.backHome")
          ]
        }
      )
    ] }) });
  };
  var ForbiddenPage_default = ForbiddenPage;

  // components/ServerErrorPage.tsx
  var import_jsx_runtime95 = __toESM(require_jsx_runtime(), 1);
  var ServerErrorPage = ({ onNavigateHome }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime95.jsx)("div", { className: "container mx-auto px-6 py-24 flex justify-center text-center", children: /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)("div", { className: "max-w-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(Cog8ToothIcon, { className: "h-16 w-16 text-blue-500 mx-auto mb-6 animate-spin" }),
      /* @__PURE__ */ (0, import_jsx_runtime95.jsx)("h1", { className: "text-6xl font-bold text-blue-500", children: "500" }),
      /* @__PURE__ */ (0, import_jsx_runtime95.jsx)("h2", { className: "text-3xl font-bold text-gray-800 dark:text-white mt-4", children: "Erreur Interne" }),
      /* @__PURE__ */ (0, import_jsx_runtime95.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mt-4", children: "Oups ! Quelque chose s'est mal pass\xE9 de notre c\xF4t\xE9. Notre \xE9quipe technique a \xE9t\xE9 notifi\xE9e. Veuillez r\xE9essayer plus tard." }),
      /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)(
        "button",
        {
          onClick: onNavigateHome,
          className: "mt-8 bg-kmer-green text-white font-bold py-3 px-8 rounded-full hover:bg-green-700 transition-colors flex items-center gap-2 mx-auto",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
            "Retourner \xE0 l'accueil"
          ]
        }
      )
    ] }) });
  };
  var ServerErrorPage_default = ServerErrorPage;

  // components/ResetPasswordPage.tsx
  var import_react71 = __toESM(require_react(), 1);
  var import_jsx_runtime96 = __toESM(require_jsx_runtime(), 1);
  var ResetPasswordPage = ({ onPasswordReset, onNavigateLogin }) => {
    const [password, setPassword] = (0, import_react71.useState)("");
    const [confirmPassword, setConfirmPassword] = (0, import_react71.useState)("");
    const [error, setError] = (0, import_react71.useState)("");
    const [success, setSuccess] = (0, import_react71.useState)(false);
    const handleSubmit = (e) => {
      e.preventDefault();
      if (password.length < 6) {
        setError("Le mot de passe doit contenir au moins 6 caract\xE8res.");
        return;
      }
      if (password !== confirmPassword) {
        setError("Les mots de passe ne correspondent pas.");
        return;
      }
      setError("");
      onPasswordReset(password);
      setSuccess(true);
    };
    if (success) {
      return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("div", { className: "container mx-auto px-6 py-12 flex justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime96.jsxs)("div", { className: "text-center bg-white dark:bg-gray-800 p-12 rounded-lg shadow-xl max-w-md w-full", children: [
        /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(CheckCircleIcon, { className: "w-16 h-16 text-kmer-green mx-auto mb-6" }),
        /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("h1", { className: "text-2xl font-bold text-gray-800 dark:text-white mb-4", children: "Mot de passe r\xE9initialis\xE9 !" }),
        /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-8", children: "Vous pouvez maintenant vous connecter avec votre nouveau mot de passe." }),
        /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
          "button",
          {
            onClick: onNavigateLogin,
            className: "w-full bg-kmer-green text-white font-bold py-3 px-6 rounded-full hover:bg-green-700 transition-colors",
            children: "Se connecter"
          }
        )
      ] }) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("div", { className: "container mx-auto px-6 py-12 flex justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("div", { className: "max-w-md w-full", children: /* @__PURE__ */ (0, import_jsx_runtime96.jsxs)("form", { onSubmit: handleSubmit, className: "bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("h1", { className: "text-2xl font-bold text-gray-800 dark:text-white mb-6 text-center", children: "R\xE9initialiser votre mot de passe" }),
      error && /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("p", { className: "text-red-500 text-sm text-center mb-4 bg-red-100 dark:bg-red-900/50 p-3 rounded-md", children: error }),
      /* @__PURE__ */ (0, import_jsx_runtime96.jsxs)("div", { className: "mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "new-password", children: "Nouveau mot de passe" }),
        /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
          "input",
          {
            className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-kmer-green",
            id: "new-password",
            type: "password",
            placeholder: "******************",
            value: password,
            onChange: (e) => setPassword(e.target.value),
            required: true
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime96.jsxs)("div", { className: "mb-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "confirm-password", children: "Confirmer le mot de passe" }),
        /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
          "input",
          {
            className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-kmer-green",
            id: "confirm-password",
            type: "password",
            placeholder: "******************",
            value: confirmPassword,
            onChange: (e) => setConfirmPassword(e.target.value),
            required: true
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
        "button",
        {
          className: "w-full bg-kmer-green text-white font-bold py-2 px-4 rounded-full hover:bg-green-700 transition-colors",
          type: "submit",
          children: "D\xE9finir le nouveau mot de passe"
        }
      )
    ] }) }) });
  };
  var ResetPasswordPage_default = ResetPasswordPage;

  // components/AccountPage.tsx
  var import_react78 = __toESM(require_react(), 1);

  // components/account/DashboardTab.tsx
  var import_jsx_runtime97 = __toESM(require_jsx_runtime(), 1);
  var Section2 = ({ title, children, className = "" }) => /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)("div", { className, children: [
    /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("h2", { className: "text-2xl font-bold mb-6 text-gray-800 dark:text-white", children: title }),
    children
  ] });
  var DashboardTab = ({ user, userOrders, allStores, onTabChange, onSelectOrder }) => {
    const { t } = useLanguage();
    const lastOrder = userOrders.length > 0 ? userOrders.sort((a, b) => new Date(b.orderDate).getTime() - new Date(a.orderDate).getTime())[0] : null;
    const followedStores = allStores.filter((s) => user.followedStores?.includes(s.id));
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(Section2, { title: t("accountPage.welcome", user.name), children: /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)("div", { className: "p-6 bg-gray-50 dark:bg-gray-700/50 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("h3", { className: "font-bold text-lg mb-2", children: t("accountPage.loyaltyStatus") }),
        /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)("div", { className: "flex items-center gap-2", children: [
          user.loyalty.status === "premium" && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(StarIcon, { className: "w-6 h-6 text-kmer-yellow" }),
          user.loyalty.status === "premium_plus" && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(StarPlatinumIcon, { className: "w-6 h-6 text-kmer-red" }),
          /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)("p", { children: [
            t("accountPage.loyaltyMember", t(`loyaltyStatus.${user.loyalty.status}`)),
            " "
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)("p", { className: "text-sm text-gray-500 mt-2", children: [
          t("accountPage.totalOrders"),
          ": ",
          user.loyalty.orderCount
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)("div", { className: "p-6 bg-gray-50 dark:bg-gray-700/50 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("h3", { className: "font-bold text-lg mb-2", children: t("accountPage.lastOrder") }),
        lastOrder ? /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(import_jsx_runtime97.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)("p", { children: [
            "ID: ",
            /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("span", { className: "font-mono text-sm", children: lastOrder.id })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)("p", { children: [
            t("common.status"),
            ": ",
            t(`orderStatus.${lastOrder.status}`)
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("button", { onClick: () => onSelectOrder(lastOrder), className: "text-sm text-kmer-green font-semibold mt-2", children: t("accountPage.viewDetails") })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("p", { children: t("accountPage.noRecentOrder") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)("div", { className: "md:col-span-2 p-6 bg-gray-50 dark:bg-gray-700/50 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("h3", { className: "font-bold text-lg mb-4", children: t("accountPage.followedStoresTitle") }),
        followedStores.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("div", { className: "flex flex-wrap gap-4", children: followedStores.slice(0, 5).map((s) => /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)("div", { className: "text-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("img", { src: s.logoUrl, alt: s.name, className: "w-16 h-16 rounded-full object-contain bg-white shadow-md" }),
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("p", { className: "text-xs mt-1 w-16 truncate", children: s.name })
        ] }, s.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("p", { children: t("accountPage.noFollowedStores") }),
        /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("button", { onClick: () => onTabChange("followed-stores"), className: "text-sm text-kmer-green font-semibold mt-4", children: t("accountPage.manageStores") })
      ] })
    ] }) });
  };

  // components/account/ProfileTab.tsx
  var import_react72 = __toESM(require_react(), 1);
  var import_jsx_runtime98 = __toESM(require_jsx_runtime(), 1);
  var Section3 = ({ title, children, className = "" }) => /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)("div", { className, children: [
    /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("h2", { className: "text-2xl font-bold mb-6 text-gray-800 dark:text-white", children: title }),
    children
  ] });
  var ProfileTab = ({ user, onUpdate }) => {
    const { t } = useLanguage();
    const [isEditing, setIsEditing] = (0, import_react72.useState)(false);
    const [formData, setFormData] = (0, import_react72.useState)(user);
    const [avatarPreview, setAvatarPreview] = (0, import_react72.useState)(user.profilePictureUrl);
    (0, import_react72.useEffect)(() => {
      setFormData(user);
      setAvatarPreview(user.profilePictureUrl);
    }, [user]);
    const handleChange = (e) => {
      setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
    };
    const handleAvatarChange = (e) => {
      if (e.target.files && e.target.files[0]) {
        const reader = new FileReader();
        reader.onloadend = () => {
          const result = reader.result;
          setAvatarPreview(result);
          setFormData((prev) => ({ ...prev, profilePictureUrl: result }));
        };
        reader.readAsDataURL(e.target.files[0]);
      }
    };
    const handleSave = () => {
      onUpdate(formData);
      setIsEditing(false);
    };
    const handleCancel = () => {
      setFormData(user);
      setAvatarPreview(user.profilePictureUrl);
      setIsEditing(false);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)(Section3, { title: t("accountPage.profile"), children: [
      /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)("div", { className: "flex items-center gap-6 mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("img", { src: avatarPreview || `https://ui-avatars.com/api/?name=${user.name}&background=008000&color=fff`, alt: "Avatar", className: "w-24 h-24 rounded-full object-cover" }),
          isEditing && /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)("label", { htmlFor: "avatar-upload", className: "absolute -bottom-1 -right-1 bg-white dark:bg-gray-600 p-1.5 rounded-full cursor-pointer shadow-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(PencilSquareIcon, { className: "w-5 h-5" }),
            /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("input", { id: "avatar-upload", type: "file", className: "sr-only", onChange: handleAvatarChange, accept: "image/*" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("h3", { className: "text-xl font-bold", children: user.name }),
          /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("p", { className: "text-gray-500", children: user.email })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("div", { className: "space-y-4", children: /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("label", { className: "text-sm font-medium text-gray-500", children: t("accountPage.fullName") }),
          /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("input", { type: "text", name: "name", value: formData.name || "", onChange: handleChange, disabled: !isEditing, className: "w-full p-2 mt-1 border rounded-md disabled:bg-gray-100 dark:disabled:bg-gray-700 dark:bg-gray-600" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("label", { className: "text-sm font-medium text-gray-500", children: t("accountPage.phone") }),
          /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("input", { type: "tel", name: "phone", value: formData.phone || "", onChange: handleChange, disabled: !isEditing, className: "w-full p-2 mt-1 border rounded-md disabled:bg-gray-100 dark:disabled:bg-gray-700 dark:bg-gray-600" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("label", { className: "text-sm font-medium text-gray-500", children: t("accountPage.birthDate") }),
          /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("input", { type: "date", name: "birthDate", value: formData.birthDate?.split("T")[0] || "", onChange: handleChange, disabled: !isEditing, className: "w-full p-2 mt-1 border rounded-md disabled:bg-gray-100 dark:disabled:bg-gray-700 dark:bg-gray-600" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("label", { className: "text-sm font-medium text-gray-500", children: t("accountPage.gender") }),
          /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)("select", { name: "gender", value: formData.gender, onChange: handleChange, disabled: !isEditing, className: "w-full p-2 mt-1 border rounded-md disabled:bg-gray-100 dark:disabled:bg-gray-700 dark:bg-gray-600", children: [
            /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("option", { children: t("accountPage.preferNotToSay") }),
            /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("option", { children: t("accountPage.male") }),
            /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("option", { children: t("accountPage.female") }),
            /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("option", { children: t("accountPage.other") })
          ] })
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("div", { className: "mt-8 flex gap-4", children: isEditing ? /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)(import_jsx_runtime98.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("button", { onClick: handleSave, className: "bg-kmer-green text-white font-bold py-2 px-6 rounded-lg", children: t("common.save") }),
        /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("button", { onClick: handleCancel, className: "bg-gray-200 dark:bg-gray-600 font-bold py-2 px-6 rounded-lg", children: t("common.cancel") })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("button", { onClick: () => setIsEditing(true), className: "bg-kmer-green text-white font-bold py-2 px-6 rounded-lg", children: t("accountPage.editProfile") }) })
    ] });
  };

  // components/account/AddressesTab.tsx
  var import_react74 = __toESM(require_react(), 1);

  // components/account/AddressForm.tsx
  var import_react73 = __toESM(require_react(), 1);
  var import_jsx_runtime99 = __toESM(require_jsx_runtime(), 1);
  var AddressForm2 = ({ address, onSave, onCancel }) => {
    const { t } = useLanguage();
    const { user } = useAuth();
    const [formData, setFormData] = (0, import_react73.useState)({
      id: address?.id || void 0,
      isDefault: address?.isDefault || false,
      label: address?.label || "Maison",
      fullName: address?.fullName || user?.name || "",
      phone: address?.phone || user?.phone || "",
      address: address?.address || "",
      city: address?.city || "Douala",
      latitude: address?.latitude,
      longitude: address?.longitude
    });
    const mapContainerRef = (0, import_react73.useRef)(null);
    const mapRef = (0, import_react73.useRef)(null);
    const markerRef = (0, import_react73.useRef)(null);
    (0, import_react73.useEffect)(() => {
      const initialLatLng = [formData.latitude || 4.05, formData.longitude || 9.75];
      if (mapContainerRef.current && !mapRef.current && typeof L !== "undefined") {
        mapRef.current = L.map(mapContainerRef.current).setView(initialLatLng, 13);
        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(mapRef.current);
        const updateMarker = (latlng) => {
          setFormData((prev) => ({ ...prev, latitude: latlng.lat, longitude: latlng.lng }));
          if (!markerRef.current) {
            markerRef.current = L.marker(latlng, { draggable: true }).addTo(mapRef.current);
            markerRef.current.on("dragend", (e) => updateMarker(e.target.getLatLng()));
          } else {
            markerRef.current.setLatLng(latlng);
          }
        };
        if (formData.latitude && formData.longitude) {
          updateMarker({ lat: formData.latitude, lng: formData.longitude });
        }
        mapRef.current.on("click", (e) => updateMarker(e.latlng));
      }
      setTimeout(() => mapRef.current?.invalidateSize(), 100);
    }, []);
    const handleChange = (e) => {
      setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onSave(formData);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("input", { name: "fullName", value: formData.fullName, onChange: handleChange, placeholder: t("accountPage.fullName"), className: "w-full p-2 border rounded-md", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("input", { name: "phone", value: formData.phone, onChange: handleChange, placeholder: t("accountPage.phone"), className: "w-full p-2 border rounded-md", required: true }),
        /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("input", { name: "label", value: formData.label, onChange: handleChange, placeholder: t("accountPage.addressLabelPlaceholder"), className: "w-full p-2 border rounded-md" }),
        /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)("select", { name: "city", value: formData.city, onChange: handleChange, className: "w-full p-2 border rounded-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("option", { children: "Douala" }),
          /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("option", { children: "Yaound\xE9" }),
          /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("option", { children: "Bafoussam" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("textarea", { name: "address", value: formData.address, onChange: handleChange, placeholder: t("accountPage.addressPlaceholder"), rows: 2, className: "w-full p-2 border rounded-md md:col-span-2", required: true })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("label", { className: "text-sm font-medium", children: t("becomeSeller.gpsLabel") }),
        /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("div", { ref: mapContainerRef, className: "h-64 w-full mt-2 rounded-md z-0" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)("div", { className: "flex justify-end gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("button", { type: "button", onClick: onCancel, className: "bg-gray-200 font-bold py-2 px-4 rounded-lg", children: t("common.cancel") }),
        /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("button", { type: "submit", className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg", children: t("common.save") })
      ] })
    ] });
  };

  // components/account/AddressesTab.tsx
  var import_jsx_runtime100 = __toESM(require_jsx_runtime(), 1);
  var AddressesTab = () => {
    const { t } = useLanguage();
    const { user, addAddress, updateAddress, deleteAddress, setDefaultAddress } = useAuth();
    const [isFormOpen, setIsFormOpen] = (0, import_react74.useState)(false);
    const [editingAddress, setEditingAddress] = (0, import_react74.useState)(null);
    const handleEdit = (address) => {
      setEditingAddress(address);
      setIsFormOpen(true);
    };
    const handleAddNew = () => {
      setEditingAddress(null);
      setIsFormOpen(true);
    };
    const handleSave = (address) => {
      if (!user) return;
      if (editingAddress) {
        updateAddress(user.id, address);
      } else {
        addAddress(user.id, address);
      }
      setIsFormOpen(false);
      setEditingAddress(null);
    };
    const handleCancel = () => {
      setIsFormOpen(false);
      setEditingAddress(null);
    };
    if (!user) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(Section, { title: t("accountPage.addresses"), children: isFormOpen ? /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(
      AddressForm2,
      {
        address: editingAddress,
        onSave: handleSave,
        onCancel: handleCancel
      }
    ) : /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)("div", { className: "space-y-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)("button", { onClick: handleAddNew, className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(PlusIcon, { className: "w-5 h-5" }),
        " ",
        t("accountPage.addNewAddress")
      ] }),
      user.addresses && user.addresses.map((addr) => /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)("div", { className: `p-4 border rounded-lg ${addr.isDefault ? "border-kmer-green bg-green-50 dark:bg-green-900/20" : "dark:border-gray-700"}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)("div", { className: "flex justify-between items-start", children: [
          /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime100.jsx)("p", { className: "font-bold text-lg", children: addr.label }),
            /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)("address", { className: "not-italic text-gray-600 dark:text-gray-300", children: [
              addr.fullName,
              /* @__PURE__ */ (0, import_jsx_runtime100.jsx)("br", {}),
              addr.address,
              ", ",
              addr.city,
              /* @__PURE__ */ (0, import_jsx_runtime100.jsx)("br", {}),
              addr.phone
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)("div", { className: "flex gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime100.jsx)("button", { onClick: () => handleEdit(addr), children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(PencilSquareIcon, { className: "w-5 h-5 text-gray-500 hover:text-blue-500" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime100.jsx)("button", { onClick: () => deleteAddress(user.id, addr.id), children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TrashIcon, { className: "w-5 h-5 text-gray-500 hover:text-red-500" }) })
          ] })
        ] }),
        !addr.isDefault && /* @__PURE__ */ (0, import_jsx_runtime100.jsx)("button", { onClick: () => setDefaultAddress(user.id, addr.id), className: "text-sm font-semibold text-kmer-green mt-2", children: t("accountPage.default") })
      ] }, addr.id))
    ] }) });
  };

  // components/account/OrdersTab.tsx
  var import_jsx_runtime101 = __toESM(require_jsx_runtime(), 1);
  var OrdersTab = ({ userOrders, onSelectOrder, onRepeatOrder }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(Section, { title: t("accountPage.orders"), children: /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(OrderHistoryPage_default, { userOrders, onBack: () => {
    }, onSelectOrder, onRepeatOrder }) });
  };

  // components/account/FollowedStoresTab.tsx
  var import_jsx_runtime102 = __toESM(require_jsx_runtime(), 1);
  var FollowedStoresTab = ({ allStores, onVendorClick }) => {
    const { t } = useLanguage();
    const { user } = useAuth();
    const followedStores = allStores.filter((s) => user?.followedStores?.includes(s.id));
    return /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(Section, { title: t("accountPage.followedStores"), children: followedStores.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime102.jsx)("div", { className: "grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4", children: followedStores.map((s) => /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(StoreCard_default, { store: s, onVisitStore: onVendorClick }, s.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime102.jsx)("p", { children: t("accountPage.noFollowedStores") }) });
  };

  // components/account/SupportTab.tsx
  var import_react75 = __toESM(require_react(), 1);
  var import_jsx_runtime103 = __toESM(require_jsx_runtime(), 1);
  var SupportTab = (props) => {
    const { t } = useLanguage();
    const { userTickets, userOrders, onCreateTicket, onUserReplyToTicket } = props;
    const [selectedTicket, setSelectedTicket] = (0, import_react75.useState)(null);
    const [isCreating, setIsCreating] = (0, import_react75.useState)(false);
    const [showConfirmation, setShowConfirmation] = (0, import_react75.useState)(false);
    const handleCreateTicketAndClose = (subject, message, orderId, type, attachments) => {
      onCreateTicket(subject, message, orderId, type, attachments);
      setIsCreating(false);
      setShowConfirmation(true);
      setTimeout(() => setShowConfirmation(false), 3e3);
    };
    if (isCreating) {
      return /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(NewTicketForm, { userOrders, onCreate: handleCreateTicketAndClose, onCancel: () => setIsCreating(false) });
    }
    if (selectedTicket) {
      return /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(TicketDetailView, { ticket: selectedTicket, onReply: onUserReplyToTicket, onBack: () => setSelectedTicket(null) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)(Section, { title: t("accountPage.support"), children: [
      showConfirmation && /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)("div", { className: "bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4 animate-in", role: "alert", children: [
        /* @__PURE__ */ (0, import_jsx_runtime103.jsx)("strong", { className: "font-bold", children: t("accountPage.ticketSentSuccessTitle") }),
        /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)("span", { className: "block sm:inline", children: [
          " ",
          t("accountPage.ticketSentSuccessMessage")
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime103.jsx)("button", { onClick: () => setIsCreating(true), className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg mb-4", children: t("accountPage.createTicket") }),
      /* @__PURE__ */ (0, import_jsx_runtime103.jsx)("div", { className: "space-y-2", children: userTickets.map((ticket) => /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)("button", { onClick: () => setSelectedTicket(ticket), className: "w-full text-left p-3 border dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700/50 flex justify-between items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)("p", { className: "font-semibold", children: [
            ticket.subject,
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)("span", { className: "font-normal text-sm text-gray-500", children: [
              "- ",
              ticket.userName
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)("p", { className: "text-xs text-gray-500", children: [
            t("accountPage.lastUpdate"),
            ": ",
            new Date(ticket.updatedAt).toLocaleDateString()
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime103.jsx)("span", { className: `px-2 py-1 text-xs font-semibold rounded-full ${ticket.status === "R\xE9solu" ? "bg-green-200 text-green-800" : "bg-yellow-200 text-yellow-800"}`, children: ticket.status })
      ] }, ticket.id)) })
    ] });
  };

  // components/account/NotificationsTab.tsx
  var import_react76 = __toESM(require_react(), 1);
  var import_jsx_runtime104 = __toESM(require_jsx_runtime(), 1);
  var NotificationsTab = () => {
    const { t } = useLanguage();
    const { user, updateUser } = useAuth();
    const [prefs, setPrefs] = (0, import_react76.useState)(user?.notificationPreferences || { promotions: true, orderUpdates: true, newsletters: true });
    const [isSaved, setIsSaved] = (0, import_react76.useState)(false);
    const handleChange = (e) => {
      const { name, checked } = e.target;
      setPrefs((p) => ({ ...p, [name]: checked }));
    };
    const handleSave = () => {
      if (user) {
        updateUser({ notificationPreferences: prefs });
        setIsSaved(true);
        setTimeout(() => setIsSaved(false), 2e3);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)(Section, { title: t("accountPage.notifications"), children: [
      /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)("div", { className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)("label", { className: "flex items-center gap-3 p-4 border rounded-lg dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime104.jsx)("input", { type: "checkbox", name: "orderUpdates", checked: prefs.orderUpdates, onChange: handleChange, className: "h-5 w-5 rounded" }),
          /* @__PURE__ */ (0, import_jsx_runtime104.jsx)("span", { children: t("accountPage.orderUpdates") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)("label", { className: "flex items-center gap-3 p-4 border rounded-lg dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime104.jsx)("input", { type: "checkbox", name: "promotions", checked: prefs.promotions, onChange: handleChange, className: "h-5 w-5 rounded" }),
          /* @__PURE__ */ (0, import_jsx_runtime104.jsx)("span", { children: t("accountPage.promotions") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)("label", { className: "flex items-center gap-3 p-4 border rounded-lg dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime104.jsx)("input", { type: "checkbox", name: "newsletters", checked: prefs.newsletters, onChange: handleChange, className: "h-5 w-5 rounded" }),
          /* @__PURE__ */ (0, import_jsx_runtime104.jsx)("span", { children: t("accountPage.newsletters") })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)("div", { className: "mt-6 flex items-center gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime104.jsx)("button", { onClick: handleSave, className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg", children: t("accountPage.savePreferences") }),
        isSaved && /* @__PURE__ */ (0, import_jsx_runtime104.jsx)("span", { className: "text-green-600 animate-in", children: t("accountPage.preferencesSaved") })
      ] })
    ] });
  };

  // components/account/SecurityTab.tsx
  var import_react77 = __toESM(require_react(), 1);
  var import_jsx_runtime105 = __toESM(require_jsx_runtime(), 1);
  var SecurityTab = () => {
    const { t } = useLanguage();
    const { user, changePassword } = useAuth();
    const [oldPassword, setOldPassword] = (0, import_react77.useState)("");
    const [newPassword, setNewPassword] = (0, import_react77.useState)("");
    const [confirmPassword, setConfirmPassword] = (0, import_react77.useState)("");
    const [message, setMessage] = (0, import_react77.useState)(null);
    const handleSubmit = async (e) => {
      e.preventDefault();
      setMessage(null);
      if (newPassword.length < 6) {
        setMessage({ type: "error", text: "Le mot de passe doit contenir au moins 6 caract\xE8res." });
        return;
      }
      if (newPassword !== confirmPassword) {
        setMessage({ type: "error", text: t("accountPage.passwordMismatch") });
        return;
      }
      if (user) {
        const success = await changePassword(oldPassword, newPassword);
        if (success) {
          setMessage({ type: "success", text: t("accountPage.passwordSuccess") });
          setOldPassword("");
          setNewPassword("");
          setConfirmPassword("");
        } else {
          setMessage({ type: "error", text: t("accountPage.passwordIncorrect") });
        }
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(Section, { title: t("accountPage.security"), children: /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-4 max-w-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("h3", { className: "font-semibold text-lg", children: t("accountPage.changePassword") }),
      /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("input", { type: "password", value: oldPassword, onChange: (e) => setOldPassword(e.target.value), placeholder: t("accountPage.oldPassword"), className: "w-full p-2 border rounded-md", required: true }),
      /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("input", { type: "password", value: newPassword, onChange: (e) => setNewPassword(e.target.value), placeholder: t("accountPage.newPassword"), className: "w-full p-2 border rounded-md", required: true }),
      /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("input", { type: "password", value: confirmPassword, onChange: (e) => setConfirmPassword(e.target.value), placeholder: t("accountPage.confirmNewPassword"), className: "w-full p-2 border rounded-md", required: true }),
      message && /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("p", { className: `text-sm ${message.type === "success" ? "text-green-600" : "text-red-600"}`, children: message.text }),
      /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("button", { type: "submit", className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg", children: t("accountPage.update") })
    ] }) });
  };

  // components/AccountPage.tsx
  var import_jsx_runtime106 = __toESM(require_jsx_runtime(), 1);
  var AccountPage = (props) => {
    const { onBack, initialTab, allStores, userOrders, allTickets, onCreateTicket, onUserReplyToTicket, onSelectOrder, onRepeatOrder, onVendorClick } = props;
    const { t } = useLanguage();
    const { user, updateUser } = useAuth();
    const [activeTab, setActiveTab] = (0, import_react78.useState)(initialTab || "dashboard");
    (0, import_react78.useEffect)(() => {
      setActiveTab(initialTab || "dashboard");
    }, [initialTab]);
    if (!user) {
      return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("div", { className: "container mx-auto px-6 py-12 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("p", { children: t("accountPage.loginRequired") }) });
    }
    const userTickets = allTickets.filter((t2) => t2.userId === user.id);
    const TABS = [
      { id: "dashboard", label: t("accountPage.dashboard"), icon: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(ChartPieIcon, { className: "w-5 h-5" }) },
      { id: "profile", label: t("accountPage.profile"), icon: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(UserCircleIcon, { className: "w-5 h-5" }) },
      { id: "addresses", label: t("accountPage.addresses"), icon: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(MapPinIcon, { className: "w-5 h-5" }) },
      { id: "orders", label: t("accountPage.orders"), icon: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(ClipboardDocumentListIcon, { className: "w-5 h-5" }) },
      { id: "followed-stores", label: t("accountPage.followedStores"), icon: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(BuildingStorefrontIcon, { className: "w-5 h-5" }) },
      { id: "support", label: t("accountPage.support"), icon: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(ChatBubbleBottomCenterTextIcon, { className: "w-5 h-5" }) },
      { id: "notifications", label: t("accountPage.notifications"), icon: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(BellIcon, { className: "w-5 h-5" }) },
      { id: "security", label: t("accountPage.security"), icon: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(ShieldCheckIcon, { className: "w-5 h-5" }) }
    ];
    const renderContent = () => {
      switch (activeTab) {
        case "dashboard":
          return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(DashboardTab, { user, userOrders, allStores, onTabChange: (tab) => setActiveTab(tab), onSelectOrder });
        case "profile":
          return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(ProfileTab, { user, onUpdate: updateUser });
        case "addresses":
          return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(AddressesTab, {});
        case "orders":
          return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(OrdersTab, { userOrders, onSelectOrder, onRepeatOrder });
        case "followed-stores":
          return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(FollowedStoresTab, { allStores, onVendorClick });
        case "support":
          return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(SupportTab, { userTickets, userOrders, onCreateTicket, onUserReplyToTicket });
        case "notifications":
          return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(NotificationsTab, {});
        case "security":
          return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(SecurityTab, {});
        default:
          return null;
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        t("common.backToHome")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)("div", { className: "flex flex-col md:flex-row gap-8 lg:gap-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("aside", { className: "md:w-1/4 lg:w-1/5 flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("div", { className: "bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md space-y-2", children: TABS.map((tab) => /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)(
          "button",
          {
            onClick: () => setActiveTab(tab.id),
            className: `flex items-center gap-3 w-full text-left px-3 py-2.5 text-sm font-semibold rounded-lg transition-colors ${activeTab === tab.id ? "bg-kmer-green/10 text-kmer-green" : "text-gray-600 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700"}`,
            children: [
              tab.icon,
              /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("span", { children: tab.label })
            ]
          },
          tab.id
        )) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("main", { className: "flex-grow bg-white dark:bg-gray-800 p-6 sm:p-8 rounded-lg shadow-md", children: renderContent() })
      ] })
    ] });
  };
  var AccountPage_default = AccountPage;

  // components/VisualSearchPage.tsx
  var import_react79 = __toESM(require_react(), 1);
  var import_jsx_runtime107 = __toESM(require_jsx_runtime(), 1);
  var VisualSearchPage = ({ onSearch }) => {
    const [image, setImage] = (0, import_react79.useState)(null);
    const [imagePreview, setImagePreview] = (0, import_react79.useState)(null);
    const [isLoading, setIsLoading] = (0, import_react79.useState)(false);
    const [error, setError] = (0, import_react79.useState)(null);
    const ai = (0, import_react79.useMemo)(() => {
      return new GoogleGenAI({ apiKey: "undefined" });
    }, []);
    const handleFileChange = (e) => {
      const file = e.target.files?.[0];
      if (file) {
        setImage(file);
        const reader = new FileReader();
        reader.onloadend = () => {
          setImagePreview(reader.result);
        };
        reader.readAsDataURL(file);
        setError(null);
      }
    };
    const fileToGenerativePart = async (file) => {
      const base64EncodedDataPromise = new Promise((resolve) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result.split(",")[1]);
        reader.readAsDataURL(file);
      });
      return {
        inlineData: { data: await base64EncodedDataPromise, mimeType: file.type }
      };
    };
    const handleSearchClick = async () => {
      if (!image) {
        setError("Veuillez d'abord s\xE9lectionner une image.");
        return;
      }
      setIsLoading(true);
      setError(null);
      try {
        const imagePart = await fileToGenerativePart(image);
        const prompt2 = "D\xE9cris cet objet en 3 \xE0 5 mots-cl\xE9s pertinents pour une recherche e-commerce. S\xE9pare les mots-cl\xE9s par des virgules. Ne retourne que les mots-cl\xE9s. Exemple : robe, pagne, \xE9l\xE9gante, soir\xE9e, coton";
        const response = await ai.models.generateContent({
          model: "gemini-2.5-flash",
          contents: { parts: [imagePart, { text: prompt2 }] }
        });
        const keywords = response.text.trim();
        if (keywords) {
          onSearch(keywords);
        } else {
          setError("L'IA n'a pas pu identifier d'objets dans l'image. Essayez une autre photo.");
        }
      } catch (err) {
        console.error("Gemini API error:", err);
        setError("Une erreur est survenue lors de l'analyse de l'image. Veuillez r\xE9essayer.");
      } finally {
        setIsLoading(false);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("div", { className: "container mx-auto px-4 sm:px-6 py-12 flex justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime107.jsxs)("div", { className: "max-w-2xl w-full bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(PhotoIcon, { className: "w-16 h-16 mx-auto text-kmer-green mb-4" }),
      /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: "Recherche Visuelle" }),
      /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mt-2", children: "Trouvez des produits similaires \xE0 partir d'une image." }),
      /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("div", { className: "mt-8", children: /* @__PURE__ */ (0, import_jsx_runtime107.jsxs)("label", { htmlFor: "image-upload", className: "cursor-pointer", children: [
        /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("div", { className: "w-full min-h-[200px] border-2 border-dashed rounded-lg flex flex-col items-center justify-center p-6 hover:bg-gray-50 dark:hover:bg-gray-700/50", children: imagePreview ? /* @__PURE__ */ (0, import_jsx_runtime107.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("img", { src: imagePreview, alt: "Aper\xE7u", className: "max-h-48 rounded-md" }),
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
            "button",
            {
              onClick: (e) => {
                e.preventDefault();
                setImage(null);
                setImagePreview(null);
              },
              className: "absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 shadow-lg",
              children: /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(XIcon, { className: "w-4 h-4" })
            }
          )
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime107.jsxs)(import_jsx_runtime107.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(PhotoIcon, { className: "w-12 h-12 text-gray-400" }),
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("p", { className: "mt-2 text-sm text-gray-500 dark:text-gray-400", children: "Cliquez pour t\xE9l\xE9verser une image" }),
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("p", { className: "text-xs text-gray-400", children: "PNG, JPG, WEBP" })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("input", { id: "image-upload", type: "file", className: "sr-only", accept: "image/*", onChange: handleFileChange })
      ] }) }),
      error && /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("p", { className: "mt-4 text-red-500", children: error }),
      /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
        "button",
        {
          onClick: handleSearchClick,
          disabled: !image || isLoading,
          className: "mt-6 w-full bg-kmer-green text-white font-bold py-3 px-6 rounded-lg flex items-center justify-center gap-3 hover:bg-green-700 transition-colors disabled:bg-gray-400 dark:disabled:bg-gray-600 disabled:cursor-wait",
          children: isLoading ? /* @__PURE__ */ (0, import_jsx_runtime107.jsxs)(import_jsx_runtime107.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime107.jsxs)("svg", { className: "animate-spin -ml-1 mr-3 h-5 w-5 text-white", xmlns: "http://www.w.org/2000/svg", fill: "none", viewBox: "0 0 24 24", children: [
              /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("circle", { className: "opacity-25", cx: "12", cy: "12", r: "10", stroke: "currentColor", strokeWidth: "4" }),
              /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("path", { className: "opacity-75", fill: "currentColor", d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" })
            ] }),
            "Analyse en cours..."
          ] }) : /* @__PURE__ */ (0, import_jsx_runtime107.jsxs)(import_jsx_runtime107.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(SparklesIcon, { className: "w-6 h-6" }),
            "Rechercher avec l'IA"
          ] })
        }
      )
    ] }) });
  };
  var VisualSearchPage_default = VisualSearchPage;

  // components/SellerSubscriptionPage.tsx
  var import_react80 = __toESM(require_react(), 1);
  var import_jsx_runtime108 = __toESM(require_jsx_runtime(), 1);
  var PlanCard2 = ({ title, description, price, icon, features, onSelect, isFeatured }) => {
    const { t } = useLanguage();
    return /* @__PURE__ */ (0, import_jsx_runtime108.jsxs)("div", { className: `p-8 rounded-2xl shadow-lg flex flex-col border-2 ${isFeatured ? "bg-kmer-green/5 dark:bg-kmer-green/10 border-kmer-green" : "bg-white dark:bg-gray-800 dark:border-gray-700"}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime108.jsxs)("div", { className: "flex items-center gap-3 mb-4", children: [
        icon,
        /* @__PURE__ */ (0, import_jsx_runtime108.jsx)("h3", { className: "text-2xl font-bold", children: title })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime108.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6 flex-grow", children: description }),
      /* @__PURE__ */ (0, import_jsx_runtime108.jsx)("p", { className: "text-4xl font-extrabold mb-6", children: price }),
      /* @__PURE__ */ (0, import_jsx_runtime108.jsx)("ul", { className: "space-y-3 mb-8", children: features.map((feature, index) => /* @__PURE__ */ (0, import_jsx_runtime108.jsxs)("li", { className: "flex items-start gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(CheckCircleIcon, { className: "w-5 h-5 text-green-500 flex-shrink-0 mt-0.5" }),
        /* @__PURE__ */ (0, import_jsx_runtime108.jsx)("span", { children: feature })
      ] }, index)) }),
      /* @__PURE__ */ (0, import_jsx_runtime108.jsx)("button", { onClick: onSelect, className: `w-full font-bold py-3 mt-auto rounded-lg transition-colors ${isFeatured ? "bg-kmer-green text-white hover:bg-green-700" : "bg-gray-200 dark:bg-gray-600 hover:bg-gray-300"}`, children: t("sellerSubscription.selectPlan") })
    ] });
  };
  var SellerSubscriptionPage = ({ siteSettings, onSelectSubscription }) => {
    const { t } = useLanguage();
    const [selectedPlan, setSelectedPlan] = (0, import_react80.useState)("premium");
    const handleSelectPlan = (plan) => {
      setSelectedPlan(plan);
      onSelectSubscription(plan);
    };
    const plans = [
      {
        title: t("sellerSubscription.standardTitle"),
        description: t("sellerSubscription.standardDescription"),
        price: `${siteSettings.standardPlan.price.toLocaleString("fr-CM")} FCFA / ${siteSettings.standardPlan.durationDays} jrs`,
        icon: /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(BuildingStorefrontIcon, { className: "w-8 h-8 text-gray-500" }),
        features: t("sellerSubscription.standardFeatures", siteSettings.standardPlan.productLimit, siteSettings.standardPlan.commissionRate).split("|"),
        onSelect: () => handleSelectPlan("standard"),
        isFeatured: selectedPlan === "standard"
      },
      {
        title: t("sellerSubscription.premiumTitle"),
        description: t("sellerSubscription.premiumDescription"),
        price: `${siteSettings.premiumPlan.price.toLocaleString("fr-CM")} FCFA / ${siteSettings.premiumPlan.durationDays} jrs`,
        icon: /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(StarIcon, { className: "w-8 h-8 text-kmer-yellow" }),
        features: t("sellerSubscription.premiumFeatures", siteSettings.premiumPlan.productLimit, siteSettings.premiumPlan.commissionRate).split("|"),
        onSelect: () => handleSelectPlan("premium"),
        isFeatured: selectedPlan === "premium"
      },
      {
        title: t("sellerSubscription.superPremiumTitle"),
        description: t("sellerSubscription.superPremiumDescription"),
        price: `${siteSettings.superPremiumPlan.price.toLocaleString("fr-CM")} FCFA / ${siteSettings.superPremiumPlan.durationDays} jrs`,
        icon: /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(StarPlatinumIcon, { className: "w-8 h-8 text-kmer-red" }),
        features: t("sellerSubscription.superPremiumFeatures", siteSettings.superPremiumPlan.productLimit, siteSettings.superPremiumPlan.commissionRate).split("|"),
        onSelect: () => handleSelectPlan("super_premium"),
        isFeatured: selectedPlan === "super_premium"
      }
    ];
    return /* @__PURE__ */ (0, import_jsx_runtime108.jsx)("div", { className: "bg-gray-50 dark:bg-gray-900 py-12", children: /* @__PURE__ */ (0, import_jsx_runtime108.jsxs)("div", { className: "container mx-auto px-4 sm:px-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime108.jsxs)("div", { className: "text-center max-w-3xl mx-auto mb-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime108.jsx)("h1", { className: "text-4xl font-extrabold text-gray-800 dark:text-white mb-4", children: t("sellerSubscription.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime108.jsx)("p", { className: "text-lg text-gray-600 dark:text-gray-400", children: t("sellerSubscription.subtitle") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime108.jsx)("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-6xl mx-auto", children: plans.map((plan, index) => /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(
        PlanCard2,
        {
          title: plan.title,
          description: plan.description,
          price: plan.price,
          icon: plan.icon,
          features: plan.features,
          onSelect: plan.onSelect,
          isFeatured: plan.isFeatured
        },
        index
      )) })
    ] }) });
  };
  var SellerSubscriptionPage_default = SellerSubscriptionPage;

  // components/ServicesPage.tsx
  var import_react81 = __toESM(require_react(), 1);
  var import_jsx_runtime109 = __toESM(require_jsx_runtime(), 1);
  var ServicesPage = ({ allProducts, allStores, flashSales, onProductClick, onBack, onVendorClick, isComparisonEnabled }) => {
    const { t } = useLanguage();
    const serviceProducts = (0, import_react81.useMemo)(() => allProducts.filter((p) => p.type === "service"), [allProducts]);
    const { filteredAndSortedProducts, filters, setFilters, resetFilters } = useProductFiltering(serviceProducts, allStores);
    const findStoreLocation = (vendorName) => allStores.find((s) => s.name === vendorName)?.location;
    return /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)("div", { className: "container mx-auto px-4 sm:px-6 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)("button", { onClick: onBack, className: "flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-kmer-green font-semibold mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(ArrowLeftIcon, { className: "w-5 h-5" }),
        t("common.backToHome")
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)("div", { className: "lg:flex lg:gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
          ProductFilters_default,
          {
            allProducts: serviceProducts,
            filters,
            setFilters,
            resetFilters
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)("main", { className: "flex-grow", children: [
          /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)("div", { className: "mb-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)("div", { className: "flex items-center gap-3 mb-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(SparklesIcon, { className: "w-8 h-8 text-purple-500" }),
              /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: t("servicesPage.title") })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)("p", { className: "text-gray-600 dark:text-gray-300", children: [
              filteredAndSortedProducts.length,
              " sur ",
              serviceProducts.length,
              " services affich\xE9s"
            ] })
          ] }),
          filteredAndSortedProducts.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6", children: filteredAndSortedProducts.map((product) => /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(ProductCard_default, { product, onProductClick, onVendorClick, location: findStoreLocation(product.vendor), flashSales, isComparisonEnabled, stores: allStores }, product.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)("div", { className: "text-center py-16 bg-white dark:bg-gray-800 rounded-lg shadow-md h-full flex flex-col justify-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("h2", { className: "text-2xl font-semibold mb-2 dark:text-white", children: t("servicesPage.noServices") }),
            /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: t("servicesPage.noServicesDescription") })
          ] })
        ] })
      ] })
    ] });
  };
  var ServicesPage_default = ServicesPage;

  // components/PageRouter.tsx
  var import_jsx_runtime110 = __toESM(require_jsx_runtime(), 1);
  var PageRouter = (props) => {
    const { navigation: navigation2, siteData, setPromotionModalProduct, setPaymentRequest } = props;
    const { user, logout } = useAuth();
    const { t } = useLanguage();
    const { allUsers, setAllUsers } = siteData;
    const { cart, appliedPromoCode, onApplyPromoCode, clearCart } = useCart();
    const { wishlist } = useWishlist();
    const sellerStore = (0, import_react82.useMemo)(() => {
      if (!user || user.role !== "seller" && user.role !== "enterprise") return void 0;
      return siteData.allStores.find((s) => s.sellerId === user.id);
    }, [user, siteData.allStores]);
    const sellerProducts = (0, import_react82.useMemo)(() => (user?.role === "seller" || user?.role === "enterprise") && sellerStore ? siteData.allProducts.filter((p) => p.vendor === sellerStore.name) : [], [user, sellerStore, siteData.allProducts]);
    const sellerOrders = (0, import_react82.useMemo)(() => (user?.role === "seller" || user?.role === "enterprise") && sellerStore ? siteData.allOrders.filter((o) => o.items.some((i) => i.vendor === sellerStore.name)) : [], [user, sellerStore, siteData.allOrders]);
    const sellerPromoCodes = (0, import_react82.useMemo)(() => siteData.allPromoCodes.filter((p) => p.sellerId === user?.id), [siteData.allPromoCodes, user]);
    const sellerTickets = (0, import_react82.useMemo)(() => siteData.allTickets.filter((t2) => t2.userId === user?.id), [siteData.allTickets, user]);
    const sellerNotifications = (0, import_react82.useMemo)(() => user ? siteData.allNotifications.filter((n) => n.userId === user.id) : [], [user, siteData.allNotifications]);
    const userOrders = (0, import_react82.useMemo)(() => user ? siteData.allOrders.filter((o) => o.userId === user.id) : [], [user, siteData.allOrders]);
    const augmentedSiteData = (0, import_react82.useMemo)(() => ({
      ...siteData,
      allUsers
    }), [siteData, allUsers]);
    const onBecomeSeller = (data) => {
      if (!user) {
        alert("Erreur: Utilisateur non connect\xE9.");
        return;
      }
      const isServiceProvider = navigation2.page === "become-service-provider";
      const storeData = {
        name: data.shopName,
        category: "Non class\xE9",
        location: data.location,
        neighborhood: data.neighborhood || "",
        sellerFirstName: data.sellerFirstName,
        sellerLastName: data.sellerLastName,
        sellerPhone: data.sellerPhone,
        physicalAddress: isServiceProvider ? `Prestation de services (${data.serviceArea})` : data.physicalAddress,
        logoUrl: data.logoUrl,
        latitude: data.latitude,
        longitude: data.longitude
      };
      let initialProductData;
      if (isServiceProvider) {
        const categoryName = siteData.allCategories.find((c) => c.id === data.serviceCategory)?.name;
        storeData.category = categoryName ? t(categoryName) : "Services";
        initialProductData = {
          name: data.shopName,
          price: data.price,
          description: data.serviceDescription,
          categoryId: data.serviceCategory,
          type: "service",
          duration: data.duration,
          locationType: data.locationType,
          serviceArea: data.serviceArea,
          availability: data.availability
        };
      }
      const newStore = siteData.createStoreAndNotifyAdmin(storeData, user, allUsers, initialProductData);
      if (newStore) {
        setAllUsers((prevUsers) => prevUsers.map(
          (u) => u.id === user.id ? { ...u, role: "seller", shopName: newStore.name } : u
        ));
        navigation2.setPage("seller-subscription");
      } else {
        alert("Erreur: La cr\xE9ation de la boutique a \xE9chou\xE9. Veuillez r\xE9essayer.");
      }
    };
    const onSelectSubscription = (status) => {
      if (!user) return;
      const sellerStoreForSubscription = siteData.allStores.find((s) => s.sellerId === user.id);
      if (sellerStoreForSubscription) {
        const plan = status === "standard" ? siteData.siteSettings.standardPlan : status === "premium" ? siteData.siteSettings.premiumPlan : siteData.siteSettings.superPremiumPlan;
        setPaymentRequest({
          amount: plan.price,
          reason: `Abonnement au plan ${status} pour ${sellerStoreForSubscription.name}`,
          onSuccess: (paymentDetails) => {
            siteData.setAllStores((prevStores) => prevStores.map(
              (s) => s.id === sellerStoreForSubscription.id ? {
                ...s,
                premiumStatus: status,
                subscriptionStatus: "active",
                subscriptionDueDate: new Date(Date.now() + plan.durationDays * 24 * 60 * 60 * 1e3).toISOString()
              } : s
            ));
            setPaymentRequest(null);
            navigation2.navigateToSellerDashboard("overview");
          }
        });
      } else {
        console.error("CRITICAL: Store not found for user ID " + user.id + " after seller registration.");
        alert("Erreur critique : Impossible de trouver votre boutique nouvellement cr\xE9\xE9e pour y appliquer l'abonnement. Veuillez contacter le support.");
        navigation2.navigateToHome();
      }
    };
    switch (navigation2.page) {
      case "home":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          HomePage_default,
          {
            categories: siteData.allCategories,
            products: siteData.allProducts,
            stores: siteData.allStores,
            flashSales: siteData.flashSales,
            advertisements: siteData.allAdvertisements,
            siteSettings: siteData.siteSettings,
            onProductClick: navigation2.navigateToProduct,
            onCategoryClick: navigation2.navigateToCategory,
            onVendorClick: navigation2.navigateToVendorPage,
            onVisitStore: navigation2.navigateToVendorPage,
            onViewStories: (store) => navigation2.setViewingStoriesFor(store),
            isComparisonEnabled: siteData.siteSettings.isComparisonEnabled,
            isStoriesEnabled: siteData.siteSettings.isStoriesEnabled,
            recentlyViewedIds: siteData.recentlyViewedIds,
            userOrders,
            wishlist
          }
        );
      case "product":
        return navigation2.selectedProduct ? /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          ProductDetail_default,
          {
            product: navigation2.selectedProduct,
            allProducts: siteData.allProducts,
            allUsers,
            stores: siteData.allStores,
            flashSales: siteData.flashSales,
            onBack: navigation2.navigateToHome,
            onAddReview: () => {
            },
            onVendorClick: navigation2.navigateToVendorPage,
            onProductClick: navigation2.navigateToProduct,
            onOpenLogin: () => {
            },
            isChatEnabled: siteData.siteSettings.isChatEnabled,
            isComparisonEnabled: siteData.siteSettings.isComparisonEnabled,
            onProductView: (id) => siteData.setRecentlyViewedIds((prev) => [id, ...prev.filter((pId) => pId !== id)].slice(0, 10))
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(NotFoundPage_default, { onNavigateHome: navigation2.navigateToHome });
      case "cart":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(CartView_default, { onBack: navigation2.navigateToHome, onNavigateToCheckout: navigation2.navigateToCheckout, flashSales: siteData.flashSales, allPromoCodes: siteData.allPromoCodes, appliedPromoCode, onApplyPromoCode });
      case "checkout":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          Checkout_default,
          {
            onBack: navigation2.navigateToCart,
            onOrderConfirm: (orderData) => {
              if (user) {
                const handlePaymentSuccess = (paymentDetails) => {
                  const finalOrderData = { ...orderData, paymentDetails };
                  const newOrder = siteData.handleConfirmOrder(finalOrderData, user);
                  if (newOrder) {
                    clearCart();
                    navigation2.setSelectedOrder(newOrder);
                    setPaymentRequest(null);
                    navigation2.setPage("order-success");
                  }
                };
                setPaymentRequest({
                  amount: orderData.total,
                  reason: `Paiement pour votre commande KMER ZONE`,
                  onSuccess: handlePaymentSuccess
                });
              }
            },
            flashSales: siteData.flashSales,
            allPickupPoints: siteData.allPickupPoints,
            allStores: siteData.allStores,
            appliedPromoCode,
            siteSettings: siteData.siteSettings,
            paymentMethods: siteData.allPaymentMethods
          }
        );
      case "order-success":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(OrderSuccess_default, { order: navigation2.selectedOrder || siteData.allOrders[siteData.allOrders.length - 1], onNavigateHome: navigation2.navigateToHome, onNavigateToOrders: navigation2.navigateToOrderHistory });
      case "category":
        return navigation2.selectedCategoryId ? /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(CategoryPage_default, { categoryId: navigation2.selectedCategoryId, allCategories: siteData.allCategories, allProducts: siteData.allProducts, allStores: siteData.allStores, flashSales: siteData.flashSales, onProductClick: navigation2.navigateToProduct, onBack: navigation2.navigateToHome, onVendorClick: navigation2.navigateToVendorPage, isComparisonEnabled: siteData.siteSettings.isComparisonEnabled }) : /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(NotFoundPage_default, { onNavigateHome: navigation2.navigateToHome });
      case "seller-dashboard":
        if (!user || !sellerStore) return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(ForbiddenPage_default, { onNavigateHome: navigation2.navigateToHome });
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          SellerDashboard,
          {
            user,
            store: sellerStore,
            products: sellerProducts,
            categories: siteData.allCategories,
            flashSales: siteData.flashSales,
            sellerOrders,
            promoCodes: sellerPromoCodes,
            allTickets: sellerTickets,
            onBack: () => {
            },
            onAddProduct: () => navigation2.navigateToProductForm(null),
            onEditProduct: (p) => navigation2.navigateToProductForm(p),
            onDeleteProduct: (productId) => user && siteData.handleDeleteProduct(productId, user),
            onUpdateProductStatus: (productId, status) => user && siteData.handleUpdateProductStatus(productId, status, user),
            onNavigateToAnalytics: () => navigation2.navigateToSellerDashboard("analytics"),
            onSetPromotion: setPromotionModalProduct,
            onRemovePromotion: (productId) => siteData.handleSetPromotion(productId, null),
            onProposeForFlashSale: () => {
            },
            onUploadDocument: () => {
            },
            onCreatePromoCode: () => {
            },
            onDeletePromoCode: () => {
            },
            isChatEnabled: siteData.siteSettings.isChatEnabled,
            siteSettings: siteData.siteSettings,
            payouts: siteData.payouts,
            onReplyToReview: () => {
            },
            initialTab: navigation2.sellerDashboardTab,
            sellerNotifications,
            onCreateTicket: (subject, message, orderId, type, attachments) => user && siteData.handleCreateTicket(subject, message, orderId, type, attachments, user, allUsers),
            onUserReplyToTicket: (ticketId, message, attachments) => user && siteData.handleUserReplyToTicket(ticketId, message, attachments, user, allUsers),
            allShippingPartners: siteData.allShippingPartners,
            onRequestUpgrade: () => {
            },
            onUpdateOrderStatus: (orderId, status) => user && siteData.handleSellerUpdateOrderStatus(orderId, status, user),
            onSellerCancelOrder: (orderId) => user && siteData.handleSellerCancelOrder(orderId, user),
            onCreateOrUpdateCollection: (storeId, collection) => user && siteData.handleCreateOrUpdateCollection(storeId, collection, user),
            onDeleteCollection: (storeId, collectionId) => user && siteData.handleDeleteCollection(storeId, collectionId, user),
            onUpdateStoreProfile: (storeId, data) => user && siteData.handleUpdateStoreProfile(storeId, data, user),
            onAddProductToStory: (productId) => user && siteData.handleAddProductToStory(productId, user),
            onAddStory: (imageUrl) => user && siteData.handleAddStory(imageUrl, user),
            navigation: navigation2
          }
        );
      case "product-form":
        if (!user || user.role !== "seller" && user.role !== "enterprise") return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(ForbiddenPage_default, { onNavigateHome: navigation2.navigateToHome });
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          ProductForm_default,
          {
            productToEdit: navigation2.productToEdit,
            categories: siteData.allCategories,
            siteSettings: siteData.siteSettings,
            onCancel: () => navigation2.navigateToSellerDashboard("products"),
            onSave: (product) => {
              user && siteData.handleAddOrUpdateProduct(product, user);
              navigation2.navigateToSellerDashboard("products");
            },
            onAddCategory: (categoryName) => {
            }
          }
        );
      case "superadmin-dashboard":
        if (user?.role !== "superadmin") return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(ForbiddenPage_default, { onNavigateHome: navigation2.navigateToHome });
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(SuperAdminDashboard, { siteData: {
          ...augmentedSiteData,
          handleCreateTicket: (subject, message, orderId, type, attachments) => user && siteData.handleCreateTicket(subject, message, orderId, type, attachments, user, allUsers)
        } });
      case "vendor-page":
        return navigation2.selectedStore ? /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(VendorPage_default, { vendorName: navigation2.selectedStore.name, allProducts: siteData.allProducts, allStores: siteData.allStores, flashSales: siteData.flashSales, onProductClick: navigation2.navigateToProduct, onBack: navigation2.navigateToHome, onVendorClick: navigation2.navigateToVendorPage, isComparisonEnabled: siteData.siteSettings.isComparisonEnabled }) : /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(NotFoundPage_default, { onNavigateHome: navigation2.navigateToHome });
      case "order-history":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(OrderHistoryPage_default, { userOrders, onBack: navigation2.navigateToHome, onSelectOrder: navigation2.navigateToOrderDetail, onRepeatOrder: () => {
        } });
      case "order-detail":
        return navigation2.selectedOrder ? /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          OrderDetailPage_default,
          {
            order: navigation2.selectedOrder,
            onBack: navigation2.navigateToOrderHistory,
            allPickupPoints: siteData.allPickupPoints,
            allUsers,
            onCancelOrder: (orderId) => user && siteData.handleCancelOrder(orderId, user),
            onRequestRefund: (orderId, reason, evidenceUrls) => user && siteData.handleRequestRefund(orderId, reason, evidenceUrls, user),
            onCustomerDisputeMessage: (orderId, message) => user && siteData.handleCustomerDisputeMessage(orderId, message, user)
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(NotFoundPage_default, { onNavigateHome: navigation2.navigateToHome });
      case "search-results":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(SearchResultsPage_default, { searchQuery: navigation2.searchQuery, products: siteData.allProducts, stores: siteData.allStores, flashSales: siteData.flashSales, onProductClick: navigation2.navigateToProduct, onBack: navigation2.navigateToHome, onVendorClick: navigation2.navigateToVendorPage, isComparisonEnabled: siteData.siteSettings.isComparisonEnabled });
      case "wishlist":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(WishlistPage_default, { allProducts: siteData.allProducts, allStores: siteData.allStores, flashSales: siteData.flashSales, onProductClick: navigation2.navigateToProduct, onBack: navigation2.navigateToHome, onVendorClick: navigation2.navigateToVendorPage, isComparisonEnabled: siteData.siteSettings.isComparisonEnabled });
      case "delivery-agent-dashboard":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          DeliveryAgentDashboard,
          {
            onLogout: logout,
            siteData: augmentedSiteData
          }
        );
      case "depot-agent-dashboard":
        return user ? /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          DepotAgentDashboard,
          {
            user,
            onLogout: logout,
            siteData: augmentedSiteData
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(ForbiddenPage_default, { onNavigateHome: navigation2.navigateToHome });
      case "account":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          AccountPage_default,
          {
            onBack: navigation2.navigateToHome,
            initialTab: navigation2.accountPageTab,
            allStores: siteData.allStores,
            userOrders,
            allTickets: siteData.allTickets,
            onCreateTicket: (subject, message, orderId, type, attachments) => user && siteData.handleCreateTicket(subject, message, orderId, type, attachments, user, allUsers),
            onUserReplyToTicket: (ticketId, message, attachments) => user && siteData.handleUserReplyToTicket(ticketId, message, attachments, user, allUsers),
            onSelectOrder: navigation2.navigateToOrderDetail,
            onRepeatOrder: () => {
            },
            onVendorClick: navigation2.navigateToVendorPage
          }
        );
      case "seller-analytics-dashboard":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          SellerAnalyticsDashboard,
          {
            onBack: () => navigation2.navigateToSellerDashboard("overview"),
            sellerOrders,
            sellerProducts,
            flashSales: siteData.flashSales
          }
        );
      case "seller-subscription":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          SellerSubscriptionPage_default,
          {
            siteSettings: siteData.siteSettings,
            onSelectSubscription
          }
        );
      case "visual-search":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(VisualSearchPage_default, { onSearch: navigation2.handleSearch });
      case "become-seller":
        if (!user) {
          return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(ForbiddenPage_default, { onNavigateHome: navigation2.navigateToHome });
        }
        if ((user.role === "seller" || user.role === "enterprise") && sellerStore) {
          navigation2.navigateToSellerDashboard("overview");
          return null;
        }
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          BecomeSeller_default,
          {
            onBack: navigation2.navigateToHome,
            onBecomeSeller,
            siteSettings: siteData.siteSettings
          }
        );
      case "become-service-provider":
        if (!user) {
          return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(ForbiddenPage_default, { onNavigateHome: navigation2.navigateToHome });
        }
        if ((user.role === "seller" || user.role === "enterprise") && sellerStore) {
          navigation2.navigateToSellerDashboard("overview");
          return null;
        }
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          BecomeServiceProvider_default,
          {
            onBack: navigation2.navigateToHome,
            onBecomeSeller,
            siteSettings: siteData.siteSettings,
            categories: siteData.allCategories
          }
        );
      case "become-premium":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(BecomePremiumPage_default, { siteSettings: siteData.siteSettings, onBack: navigation2.navigateToHome, onBecomePremiumByCaution: () => {
        }, onUpgradeToPremiumPlus: () => {
        } });
      case "info":
        return navigation2.infoPageContent ? /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          InfoPage,
          {
            title: navigation2.infoPageContent.title,
            content: navigation2.infoPageContent.content,
            slug: navigation2.infoPageContent.slug,
            onBack: navigation2.navigateToHome,
            onProductClick: navigation2.navigateToProduct,
            onCategoryClick: navigation2.navigateToCategory,
            onVendorClick: navigation2.navigateToVendorPage,
            allProducts: siteData.allProducts,
            allCategories: siteData.allCategories,
            allStores: siteData.allStores
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(NotFoundPage_default, { onNavigateHome: navigation2.navigateToHome });
      case "not-found":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(NotFoundPage_default, { onNavigateHome: navigation2.navigateToHome });
      case "forbidden":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(ForbiddenPage_default, { onNavigateHome: navigation2.navigateToHome });
      case "server-error":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(ServerErrorPage_default, { onNavigateHome: navigation2.navigateToHome });
      case "reset-password":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(ResetPasswordPage_default, { onPasswordReset: () => {
        }, onNavigateLogin: () => {
        } });
      case "promotions":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(PromotionsPage_default, { allProducts: siteData.allProducts, allStores: siteData.allStores, flashSales: siteData.flashSales, onProductClick: navigation2.navigateToProduct, onBack: navigation2.navigateToHome, onVendorClick: navigation2.navigateToVendorPage, isComparisonEnabled: siteData.siteSettings.isComparisonEnabled });
      case "flash-sales":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(FlashSalesPage_default, { allProducts: siteData.allProducts, allStores: siteData.allStores, flashSales: siteData.flashSales, onProductClick: navigation2.navigateToProduct, onBack: navigation2.navigateToHome, onVendorClick: navigation2.navigateToVendorPage, isComparisonEnabled: siteData.siteSettings.isComparisonEnabled });
      case "services":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          ServicesPage_default,
          {
            allProducts: siteData.allProducts,
            allStores: siteData.allStores,
            flashSales: siteData.flashSales,
            onProductClick: navigation2.navigateToProduct,
            onBack: navigation2.navigateToHome,
            onVendorClick: navigation2.navigateToVendorPage,
            isComparisonEnabled: siteData.siteSettings.isComparisonEnabled
          }
        );
      case "stores":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(StoresPage_default, { stores: siteData.allStores, onBack: navigation2.navigateToHome, onVisitStore: navigation2.navigateToVendorPage, onNavigateToStoresMap: navigation2.navigateToStoresMap });
      case "stores-map":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(StoresMapPage, { stores: siteData.allStores, onBack: navigation2.navigateToStores });
      case "comparison":
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(ComparisonPage, {});
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          HomePage_default,
          {
            categories: siteData.allCategories,
            products: siteData.allProducts,
            stores: siteData.allStores,
            flashSales: siteData.flashSales,
            advertisements: siteData.allAdvertisements,
            siteSettings: siteData.siteSettings,
            onProductClick: navigation2.navigateToProduct,
            onCategoryClick: navigation2.navigateToCategory,
            onVendorClick: navigation2.navigateToVendorPage,
            onVisitStore: navigation2.navigateToVendorPage,
            onViewStories: (store) => navigation2.setViewingStoriesFor(store),
            isComparisonEnabled: siteData.siteSettings.isComparisonEnabled,
            isStoriesEnabled: siteData.siteSettings.isStoriesEnabled,
            recentlyViewedIds: siteData.recentlyViewedIds,
            userOrders,
            wishlist
          }
        );
    }
  };
  var PageRouter_default = PageRouter;

  // components/LoginModal.tsx
  var import_react83 = __toESM(require_react(), 1);
  var import_jsx_runtime111 = __toESM(require_jsx_runtime(), 1);
  var LoginModal = ({ onClose, onLoginSuccess, onForgotPassword, onSelectSellerType }) => {
    const { t } = useLanguage();
    const [view, setView] = (0, import_react83.useState)("login");
    const [registerStep, setRegisterStep] = (0, import_react83.useState)("type");
    const [email, setEmail] = (0, import_react83.useState)("");
    const [password, setPassword] = (0, import_react83.useState)("");
    const [name, setName] = (0, import_react83.useState)("");
    const [firstName, setFirstName] = (0, import_react83.useState)("");
    const [lastName, setLastName] = (0, import_react83.useState)("");
    const [phone, setPhone] = (0, import_react83.useState)("");
    const [birthDate, setBirthDate] = (0, import_react83.useState)("");
    const [address, setAddress] = (0, import_react83.useState)("");
    const [city, setCity] = (0, import_react83.useState)("Douala");
    const [accountType, setAccountType] = (0, import_react83.useState)("customer");
    const [error, setError] = (0, import_react83.useState)(null);
    const { login, register } = useAuth();
    (0, import_react83.useEffect)(() => {
      setError(null);
    }, [email, password, name, view, registerStep]);
    const handleLogin = async (e) => {
      e.preventDefault();
      if (!email || !password) {
        setError("Veuillez entrer une adresse e-mail et un mot de passe.");
        return;
      }
      const loggedInUser = await login(email, password);
      if (loggedInUser) {
        onLoginSuccess(loggedInUser);
      } else {
        setError("Email ou mot de passe incorrect.");
      }
    };
    const handleRegister = async (e) => {
      e.preventDefault();
      if (!email || !password) {
        setError("Veuillez remplir les champs e-mail et mot de passe.");
        return;
      }
      let registeredUser = null;
      if (accountType === "customer") {
        if (!firstName || !lastName) {
          setError("Veuillez renseigner votre pr\xE9nom et nom.");
          return;
        }
        const fullName = `${firstName} ${lastName}`;
        const newAddress = address ? { fullName, phone: phone || "", address, city, label: "Maison" } : void 0;
        registeredUser = await register(fullName, email, password, accountType, phone, birthDate, newAddress);
      } else {
        if (!name) {
          setError("Veuillez renseigner votre nom complet.");
          return;
        }
        registeredUser = await register(name, email, password, accountType);
      }
      if (registeredUser) {
        onLoginSuccess(registeredUser);
      } else {
        setError("Un compte avec cet email existe d\xE9j\xE0.");
      }
    };
    const handleSellerTypeSelection = (type) => {
      onSelectSellerType(type);
      setAccountType("seller");
      setRegisterStep("form");
    };
    const renderRegisterContent = () => {
      if (registerStep === "type") {
        return /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(import_jsx_runtime111.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("h2", { className: "text-2xl font-bold text-center mb-6 dark:text-white", children: "Cr\xE9er un compte" }),
          /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("button", { type: "button", onClick: () => {
              setAccountType("customer");
              setRegisterStep("form");
            }, className: "w-full text-left p-4 border rounded-lg hover:border-kmer-green", children: [
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("h3", { className: "font-bold", children: t("login.customer") }),
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("p", { className: "text-sm text-gray-500", children: "Achetez des produits et services." })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "p-4 border rounded-lg", children: [
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("h3", { className: "font-bold", children: t("login.seller") }),
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("p", { className: "text-sm text-gray-500 mb-3", children: "Vendez des produits ou proposez vos services." }),
              /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "flex gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("button", { type: "button", onClick: () => handleSellerTypeSelection("physical"), className: "w-full bg-kmer-green/10 text-kmer-green font-semibold p-2 rounded-md hover:bg-kmer-green/20", children: t("login.physicalGoods") }),
                /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("button", { type: "button", onClick: () => handleSellerTypeSelection("service"), className: "w-full bg-kmer-green/10 text-kmer-green font-semibold p-2 rounded-md hover:bg-kmer-green/20", children: t("login.services") })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("p", { className: "text-center text-gray-500 dark:text-gray-400 text-sm mt-6", children: [
            "D\xE9j\xE0 un compte? ",
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("button", { type: "button", onClick: () => setView("login"), className: "font-bold text-kmer-green hover:underline", children: "Se connecter" })
          ] })
        ] });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("form", { onSubmit: handleRegister, children: [
        accountType === "customer" ? /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(import_jsx_runtime111.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "register-firstName", children: "Pr\xE9nom" }),
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("input", { className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-kmer-green", id: "register-firstName", type: "text", placeholder: "Jean", value: firstName, onChange: (e) => setFirstName(e.target.value), required: true })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "register-lastName", children: "Nom" }),
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("input", { className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-kmer-green", id: "register-lastName", type: "text", placeholder: "Dupont", value: lastName, onChange: (e) => setLastName(e.target.value), required: true })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "register-phone", children: "T\xE9l\xE9phone" }),
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("input", { className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600", id: "register-phone", type: "tel", placeholder: "690123456", value: phone, onChange: (e) => setPhone(e.target.value) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "register-birthDate", children: "Date de naissance" }),
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("input", { className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600", id: "register-birthDate", type: "date", value: birthDate, onChange: (e) => setBirthDate(e.target.value) })
          ] })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "mb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "register-name", children: t("login.fullNameManager") }),
          /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("input", { className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600", id: "register-name", type: "text", placeholder: "Jean Dupont", value: name, onChange: (e) => setName(e.target.value), required: true })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "mb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "register-email", children: "Adresse e-mail" }),
          /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("input", { className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600", id: "register-email", type: "email", placeholder: "votre.email@example.com", value: email, onChange: (e) => setEmail(e.target.value), required: true })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "mb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "register-password", children: "Mot de passe" }),
          /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("input", { className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600", id: "register-password", type: "password", placeholder: "******************", value: password, onChange: (e) => setPassword(e.target.value), required: true })
        ] }),
        error && /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("p", { className: "text-red-500 text-sm text-center mb-4", children: error }),
        /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "flex flex-col items-center justify-between mt-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("button", { className: "bg-kmer-green hover:bg-green-700 text-white font-bold py-2 px-4 rounded-full focus:outline-none focus:shadow-outline w-full", type: "submit", children: "S'inscrire" }),
          /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("p", { className: "text-center text-gray-500 dark:text-gray-400 text-sm mt-6", children: [
            "D\xE9j\xE0 un compte? ",
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("button", { type: "button", onClick: () => setView("login"), className: "font-bold text-kmer-green hover:underline", children: "Se connecter" })
          ] })
        ] })
      ] });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: `bg-white dark:bg-gray-800 rounded-lg shadow-2xl p-6 w-full relative overflow-y-auto max-h-[90vh] ${view === "register" && registerStep === "form" ? "max-w-xl" : "max-w-sm"}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("button", { onClick: onClose, className: "absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300", children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(XIcon, { className: "h-6 w-6" }) }),
      view === "login" ? /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(import_jsx_runtime111.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("h2", { className: "text-2xl font-bold text-center mb-6 dark:text-white", children: "Connexion" }),
        /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("form", { onSubmit: handleLogin, children: [
          /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "login-email", children: "Adresse e-mail" }),
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
              "input",
              {
                className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-kmer-green",
                id: "login-email",
                type: "email",
                placeholder: "votre.email@example.com",
                value: email,
                onChange: (e) => setEmail(e.target.value),
                required: true
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "flex justify-between items-baseline", children: [
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "login-password", children: "Mot de passe" }),
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("button", { type: "button", onClick: onForgotPassword, className: "inline-block align-baseline font-bold text-sm text-kmer-green hover:text-green-700", children: "Mot de passe oubli\xE9 ?" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
              "input",
              {
                className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-kmer-green",
                id: "login-password",
                type: "password",
                placeholder: "******************",
                value: password,
                onChange: (e) => setPassword(e.target.value),
                required: true
              }
            )
          ] }),
          error && /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("p", { className: "text-red-500 text-sm text-center mb-4", children: error }),
          /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "flex flex-col items-center justify-between", children: [
            /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
              "button",
              {
                className: "bg-kmer-green hover:bg-green-700 text-white font-bold py-2 px-4 rounded-full focus:outline-none focus:shadow-outline w-full",
                type: "submit",
                children: "Se connecter"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("p", { className: "text-center text-gray-500 dark:text-gray-400 text-sm mt-6", children: [
              "Nouveau sur KMER ZONE? ",
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("button", { type: "button", onClick: () => {
                setView("register");
                setRegisterStep("type");
              }, className: "font-bold text-kmer-green hover:underline", children: "Cr\xE9er un compte" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("div", { className: "text-center text-gray-500 dark:text-gray-400 text-xs mt-4 space-y-1 bg-gray-100 dark:bg-gray-700 p-3 rounded-md w-full max-h-40 overflow-y-auto", children: [
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("p", { className: "font-bold", children: 'Comptes de test (mot de passe : "password")' }),
              /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("p", { className: "text-left", children: [
                /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("strong", { className: "text-blue-500", children: "Client:" }),
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded break-all", children: "customer@example.com" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("p", { className: "text-left", children: [
                /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("strong", { className: "text-purple-500", children: "Admin:" }),
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded break-all", children: "superadmin@example.com" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("p", { className: "text-left", children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("strong", { className: "text-green-500", children: "Vendeurs:" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("ul", { className: "list-none text-left pl-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded break-all", children: "seller@example.com" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded break-all", children: "mamaafrica@example.com" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded break-all", children: "electro@example.com" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded break-all", children: "soaps@example.com" }) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("p", { className: "text-left", children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("strong", { className: "text-cyan-500", children: "Livreurs:" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("ul", { className: "list-none text-left pl-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded break-all", children: "agent1@example.com" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded break-all", children: "agent2@example.com" }) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)("p", { className: "text-left", children: [
                /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("strong", { className: "text-indigo-500", children: "Agent D\xE9p\xF4t:" }),
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("code", { className: "bg-gray-200 dark:bg-gray-600 px-1 rounded break-all", children: "depot@example.com" })
              ] })
            ] })
          ] })
        ] })
      ] }) : renderRegisterContent()
    ] }) });
  };
  var LoginModal_default = LoginModal;

  // components/AddToCartModal.tsx
  var import_jsx_runtime112 = __toESM(require_jsx_runtime(), 1);
  var PLACEHOLDER_IMAGE_URL3 = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none'%3E%3Crect width='24' height='24' fill='%23E5E7EB'/%3E%3Cpath d='M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z' stroke='%239CA3AF' stroke-width='1.5'/%3E%3C/svg%3E";
  var AddToCartModal = ({ product, onClose, onNavigateToCart }) => {
    const { cart } = useCart();
    const subtotal = cart.reduce((sum, item) => sum + (item.promotionPrice ?? item.price) * item.quantity, 0);
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    const displayImage = product.imageUrls[0] || PLACEHOLDER_IMAGE_URL3;
    return /* @__PURE__ */ (0, import_jsx_runtime112.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime112.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-2xl p-6 max-w-lg w-full relative transform transition-all animate-in fade-in-0 zoom-in-95", children: [
      /* @__PURE__ */ (0, import_jsx_runtime112.jsx)("button", { onClick: onClose, className: "absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300", children: /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(XIcon, { className: "h-6 w-6" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime112.jsxs)("div", { className: "flex items-center gap-3 text-lg font-semibold text-green-700 dark:text-green-300 mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(CheckCircleIcon, { className: "w-7 h-7" }),
        "Produit ajout\xE9 au panier !"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime112.jsxs)("div", { className: "flex gap-4 border-t border-b dark:border-gray-700 py-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime112.jsx)("img", { src: displayImage, alt: product.name, className: "w-24 h-24 object-cover rounded-md" }),
        /* @__PURE__ */ (0, import_jsx_runtime112.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime112.jsx)("h3", { className: "font-semibold dark:text-white", children: product.name }),
          /* @__PURE__ */ (0, import_jsx_runtime112.jsx)("p", { className: "text-gray-500 dark:text-gray-400 text-sm", children: product.vendor }),
          /* @__PURE__ */ (0, import_jsx_runtime112.jsxs)("p", { className: "text-kmer-green font-bold mt-1", children: [
            (product.promotionPrice ?? product.price).toLocaleString("fr-CM"),
            " FCFA"
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime112.jsxs)("div", { className: "py-4 space-y-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime112.jsxs)("div", { className: "flex justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime112.jsxs)("span", { className: "dark:text-gray-300", children: [
            "Panier (",
            totalItems,
            " articles)"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime112.jsxs)("span", { className: "font-semibold dark:text-white", children: [
            subtotal.toLocaleString("fr-CM"),
            " FCFA"
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime112.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: "Frais de livraison calcul\xE9s \xE0 l'\xE9tape suivante." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime112.jsxs)("div", { className: "mt-4 flex flex-col sm:flex-row gap-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime112.jsx)("button", { onClick: onClose, className: "w-full bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-800 dark:text-gray-200 font-bold py-2 px-4 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors", children: "Continuer mes achats" }),
        /* @__PURE__ */ (0, import_jsx_runtime112.jsx)("button", { onClick: onNavigateToCart, className: "w-full bg-kmer-green text-white font-bold py-2 px-4 rounded-lg hover:bg-green-700 transition-colors", children: "Voir mon panier" })
      ] })
    ] }) });
  };
  var AddToCartModal_default = AddToCartModal;

  // components/ForgotPasswordModal.tsx
  var import_react84 = __toESM(require_react(), 1);
  var import_jsx_runtime113 = __toESM(require_jsx_runtime(), 1);
  var ForgotPasswordModal = ({ onClose, onEmailSubmit }) => {
    const { t } = useLanguage();
    const [email, setEmail] = (0, import_react84.useState)("");
    const [submitted, setSubmitted] = (0, import_react84.useState)(false);
    const handleSubmit = (e) => {
      e.preventDefault();
      onEmailSubmit(email);
      setSubmitted(true);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-2xl p-8 max-w-sm w-full relative", children: [
      /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("button", { onClick: onClose, className: "absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300", children: /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(XIcon, { className: "h-6 w-6" }) }),
      submitted ? /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)("div", { className: "text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("h2", { className: "text-2xl font-bold mb-4 dark:text-white", children: t("forgotPassword.checkEmailTitle") }),
        /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: t("forgotPassword.checkEmailDescription", email) }),
        /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
          "button",
          {
            onClick: onClose,
            className: "mt-6 bg-kmer-green hover:bg-green-700 text-white font-bold py-2 px-4 rounded-full focus:outline-none focus:shadow-outline w-full",
            children: t("forgotPassword.close")
          }
        )
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)(import_jsx_runtime113.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("h2", { className: "text-2xl font-bold text-center mb-4 dark:text-white", children: t("forgotPassword.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("p", { className: "text-center text-gray-600 dark:text-gray-400 mb-6", children: t("forgotPassword.description") }),
        /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)("form", { onSubmit: handleSubmit, children: [
          /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)("div", { className: "mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("label", { className: "block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2", htmlFor: "forgot-email", children: t("forgotPassword.emailLabel") }),
            /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
              "input",
              {
                className: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 dark:border-gray-600 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-kmer-green",
                id: "forgot-email",
                type: "email",
                placeholder: "votre.email@example.com",
                value: email,
                onChange: (e) => setEmail(e.target.value),
                required: true
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)("div", { className: "flex flex-col items-center justify-between", children: [
            /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
              "button",
              {
                className: "bg-kmer-green hover:bg-green-700 text-white font-bold py-2 px-4 rounded-full focus:outline-none focus:shadow-outline w-full",
                type: "submit",
                children: t("forgotPassword.sendLink")
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
              "button",
              {
                type: "button",
                onClick: onClose,
                className: "mt-4 text-gray-500 dark:text-gray-400 text-sm hover:underline",
                children: t("common.cancel")
              }
            )
          ] })
        ] })
      ] })
    ] }) });
  };
  var ForgotPasswordModal_default = ForgotPasswordModal;

  // components/StoryViewer.tsx
  var import_react85 = __toESM(require_react(), 1);
  var import_jsx_runtime114 = __toESM(require_jsx_runtime(), 1);
  var StoryViewer = ({ store, onClose, onProductClick, allProducts }) => {
    const [currentIndex, setCurrentIndex] = (0, import_react85.useState)(0);
    const activeStories = (0, import_react85.useMemo)(() => {
      const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1e3);
      return (store.stories || []).filter((story) => new Date(story.createdAt) > twentyFourHoursAgo);
    }, [store.stories]);
    (0, import_react85.useEffect)(() => {
      if (activeStories.length === 0) return;
      const timer = setTimeout(() => {
        if (currentIndex < activeStories.length - 1) {
          setCurrentIndex(currentIndex + 1);
        } else {
          onClose();
        }
      }, 5e3);
      return () => clearTimeout(timer);
    }, [currentIndex, activeStories, onClose]);
    if (activeStories.length === 0) {
      onClose();
      return null;
    }
    const currentStory = activeStories[currentIndex];
    const product = currentStory.productId ? allProducts.find((p) => p.id === currentStory.productId) : null;
    const goToNext = () => setCurrentIndex((i) => (i + 1) % activeStories.length);
    const goToPrev = () => setCurrentIndex((i) => (i - 1 + activeStories.length) % activeStories.length);
    return /* @__PURE__ */ (0, import_jsx_runtime114.jsxs)("div", { className: "fixed inset-0 bg-black/90 z-50 flex items-center justify-center", onClick: onClose, children: [
      /* @__PURE__ */ (0, import_jsx_runtime114.jsxs)("div", { className: "relative w-full max-w-sm h-[80vh] rounded-lg overflow-hidden", onClick: (e) => e.stopPropagation(), children: [
        /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("div", { className: "absolute top-2 left-2 right-2 flex gap-1 z-20", children: activeStories.map((_, index) => /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("div", { className: "flex-1 h-1 bg-white/30 rounded-full", children: /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(
          "div",
          {
            className: `h-full bg-white rounded-full ${index === currentIndex ? "animate-progress" : index < currentIndex ? "w-full" : "w-0"}`,
            style: { animationDuration: "5s" }
          }
        ) }, index)) }),
        /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("img", { src: currentStory.imageUrl, alt: `Story de ${store.name}`, className: "w-full h-full object-cover" }),
        /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("div", { className: "absolute top-0 left-0 right-0 p-4 pt-6 bg-gradient-to-b from-black/50 to-transparent z-10", children: /* @__PURE__ */ (0, import_jsx_runtime114.jsxs)("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("img", { src: store.logoUrl, alt: store.name, className: "w-10 h-10 rounded-full object-contain bg-white" }),
          /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("span", { className: "text-white font-bold", children: store.name })
        ] }) }),
        product && /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("div", { className: "absolute bottom-10 left-1/2 -translate-x-1/2 z-20", children: /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(
          "button",
          {
            onClick: () => {
              onProductClick(product);
              onClose();
            },
            className: "bg-white/80 backdrop-blur-sm text-black font-bold py-3 px-6 rounded-full hover:bg-white animate-in",
            children: "Voir le produit"
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("button", { onClick: goToPrev, className: "absolute left-2 top-1/2 -translate-y-1/2 text-white bg-black/30 rounded-full p-2 z-20", children: /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(ChevronLeftIcon, { className: "w-6 h-6" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("button", { onClick: goToNext, className: "absolute right-2 top-1/2 -translate-y-1/2 text-white bg-black/30 rounded-full p-2 z-20", children: /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(ChevronRightIcon, { className: "w-6 h-6" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("button", { onClick: onClose, className: "absolute top-2 right-2 text-white bg-black/30 rounded-full p-2 z-20", children: /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(XIcon, { className: "w-6 h-6" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("style", { children: `
                @keyframes progress {
                    from { width: 0%; }
                    to { width: 100%; }
                }
                .animate-progress {
                    animation: progress linear;
                }
            ` })
    ] });
  };
  var StoryViewer_default = StoryViewer;

  // components/ChatWidget.tsx
  var import_react86 = __toESM(require_react(), 1);
  var import_jsx_runtime115 = __toESM(require_jsx_runtime(), 1);
  var PLACEHOLDER_IMAGE_URL4 = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none'%3E%3Crect width='24' height='24' fill='%23E5E7EB'/%3E%3Cpath d='M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z' stroke='%239CA3AF' stroke-width='1.5'/%3E%3C/svg%3E";
  var ConversationList = ({ chats, messages, activeChatId, onSelectChat, currentUser }) => {
    const getOtherParticipant = (chat) => {
      const otherId = chat.participantIds.find((id) => id !== currentUser.id);
      return { id: otherId, name: chat.participantNames[otherId] };
    };
    const getLastMessage = (chatId) => {
      const chatMessages = messages[chatId] || [];
      return chatMessages[chatMessages.length - 1];
    };
    return /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)("div", { className: "w-full h-full overflow-y-auto border-r border-gray-200 dark:border-gray-700", children: [
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { className: "p-4 border-b border-gray-200 dark:border-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("h2", { className: "text-xl font-bold text-gray-900 dark:text-white", children: "Messages" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { className: "divide-y divide-gray-200 dark:divide-gray-700", children: chats.sort((a, b) => new Date(b.lastMessageTimestamp).getTime() - new Date(a.lastMessageTimestamp).getTime()).map((chat) => {
        const otherParticipant = getOtherParticipant(chat);
        const lastMessage = getLastMessage(chat.id);
        const unreadCount = chat.unreadCount[currentUser.id] || 0;
        const isReceiver = lastMessage?.senderId !== currentUser.id;
        const lastMessageText = isReceiver && lastMessage?.censoredText ? lastMessage.censoredText : lastMessage?.text;
        return /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)(
          "button",
          {
            onClick: () => onSelectChat(chat.id),
            className: `w-full text-left p-4 hover:bg-gray-100 dark:hover:bg-gray-700/50 transition-colors ${activeChatId === chat.id ? "bg-gray-100 dark:bg-gray-700/50" : ""}`,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)("div", { className: "flex justify-between items-center", children: [
                /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("p", { className: `font-semibold text-gray-800 dark:text-gray-200 ${unreadCount > 0 ? "font-bold" : ""}`, children: chat.participantNames[otherParticipant.id] || otherParticipant.name }),
                lastMessage && /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: new Date(lastMessage.timestamp).toLocaleTimeString("fr-FR", { hour: "2-digit", minute: "2-digit" }) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)("div", { className: "flex justify-between items-center mt-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400 truncate pr-4", children: lastMessageText }),
                unreadCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("span", { className: "bg-kmer-red text-white text-xs font-bold w-5 h-5 flex items-center justify-center rounded-full", children: unreadCount })
              ] })
            ]
          },
          chat.id
        );
      }) })
    ] });
  };
  var MessageThread = ({ chat, messages, currentUser, onSendMessage, onBack, isTyping }) => {
    const [newMessage, setNewMessage] = (0, import_react86.useState)("");
    const messagesEndRef = (0, import_react86.useRef)(null);
    (0, import_react86.useEffect)(() => {
      messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, [messages, isTyping]);
    if (!chat) {
      return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { className: "h-full flex flex-col justify-center items-center text-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("p", { className: "text-gray-500 dark:text-gray-400", children: "S\xE9lectionnez une conversation pour commencer \xE0 discuter." }) });
    }
    const otherParticipant = chat.participantIds.find((id) => id !== currentUser.id);
    const handleSend = (e) => {
      e.preventDefault();
      if (newMessage.trim()) {
        onSendMessage(newMessage.trim());
        setNewMessage("");
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)("div", { className: "flex flex-col h-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)("header", { className: "p-4 border-b border-gray-200 dark:border-gray-700 flex items-center gap-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("button", { onClick: onBack, className: "lg:hidden text-gray-500 dark:text-gray-400", children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(ArrowLeftIcon, { className: "w-6 h-6" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("h3", { className: "font-bold text-gray-900 dark:text-white", children: chat.participantNames[otherParticipant] }),
          chat.productContext && /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: [
            "\xC0 propos de : ",
            chat.productContext.name
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)("div", { className: "flex-grow p-4 overflow-y-auto space-y-4", children: [
        chat.productContext && /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)("div", { className: "flex gap-2 items-center p-2 rounded-lg bg-gray-100 dark:bg-gray-900/50 mb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("img", { src: chat.productContext.imageUrl || PLACEHOLDER_IMAGE_URL4, alt: chat.productContext.name, className: "w-12 h-12 object-cover rounded-md" }),
          /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("p", { className: "text-sm font-semibold", children: chat.productContext.name })
        ] }),
        messages.map((msg) => {
          const isMe = msg.senderId === currentUser.id;
          const isAssistant = msg.senderId === "assistant-id";
          const textToDisplay = msg.censoredText ? msg.censoredText : msg.text;
          return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { className: `flex ${isMe ? "justify-end" : "justify-start"}`, children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { className: `max-w-xs lg:max-w-md p-3 rounded-xl ${isMe ? "bg-kmer-green text-white" : isAssistant ? "bg-gray-500 text-white" : "bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200"}`, children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("p", { children: textToDisplay }) }) }, msg.id);
        }),
        isTyping && /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { className: "flex justify-start", children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { className: "max-w-xs lg:max-w-md p-3 rounded-xl bg-gray-500 text-white", children: /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)("div", { className: "flex items-center space-x-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { className: "w-2 h-2 bg-gray-400 rounded-full animate-bounce [animation-delay:-0.3s]" }),
          /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { className: "w-2 h-2 bg-gray-400 rounded-full animate-bounce [animation-delay:-0.15s]" }),
          /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { className: "w-2 h-2 bg-gray-400 rounded-full animate-bounce" })
        ] }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { ref: messagesEndRef })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { className: "p-4 border-t border-gray-200 dark:border-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)("form", { onSubmit: handleSend, className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
          "input",
          {
            type: "text",
            value: newMessage,
            onChange: (e) => setNewMessage(e.target.value),
            placeholder: "\xC9crivez votre message...",
            className: "w-full p-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-kmer-green dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("button", { type: "submit", className: "bg-kmer-green text-white rounded-full p-3 hover:bg-green-700 transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(PaperAirplaneIcon, { className: "w-5 h-5" }) })
      ] }) })
    ] });
  };
  var ChatWidget = ({ allUsers, createNotification }) => {
    const { user } = useAuth();
    const { chats, messages, activeChatId, setActiveChatId, sendMessage, isWidgetOpen, setIsWidgetOpen, isTyping } = useChatContext();
    if (!isWidgetOpen || !user) return null;
    const handleSendMessage = (text) => {
      if (!activeChatId || !user) return;
      sendMessage(activeChatId, text);
      const chat = chats.find((c) => c.id === activeChatId);
      if (chat) {
        const receiverId = chat.participantIds.find((id) => id !== user.id);
        const receiver = allUsers.find((u) => u.id === receiverId);
        if (receiver) {
          createNotification({
            userId: receiver.id,
            message: `Nouveau message de ${user.name}`,
            link: {
              page: receiver.role === "seller" || receiver.role === "enterprise" ? "seller-dashboard" : "home",
              params: { tab: "chat" }
            },
            isRead: false,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          });
        }
      }
    };
    const activeChat = chats.find((c) => c.id === activeChatId);
    const activeChatIsTyping = activeChatId ? isTyping[activeChatId] || false : false;
    return /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)("div", { className: "fixed bottom-0 right-0 sm:right-5 h-full w-full sm:h-[600px] sm:w-[700px] sm:max-h-[80vh] bg-white dark:bg-gray-800 rounded-t-lg sm:rounded-lg shadow-2xl z-50 flex flex-col transition-transform duration-300", children: [
      /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)("header", { className: "bg-kmer-green text-white p-3 flex justify-between items-center rounded-t-lg flex-shrink-0", children: [
        /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("h2", { className: "font-bold", children: "Messagerie" }),
        /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("button", { onClick: () => setIsWidgetOpen(false), className: "text-white opacity-80 hover:opacity-100", children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(XIcon, { className: "w-6 h-6" }) }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)("div", { className: "flex-grow flex overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { className: `w-full lg:w-1/3 flex-shrink-0 transition-transform duration-300 ${activeChatId ? "hidden lg:block" : ""}`, children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
          ConversationList,
          {
            chats,
            messages,
            activeChatId,
            onSelectChat: setActiveChatId,
            currentUser: user
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { className: `w-full lg:w-2/3 flex-shrink-0 transition-transform duration-300 ${!activeChatId ? "hidden lg:flex" : "flex"}`, children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
          MessageThread,
          {
            chat: activeChat || null,
            messages: activeChatId ? messages[activeChatId] || [] : [],
            currentUser: user,
            onSendMessage: handleSendMessage,
            onBack: () => setActiveChatId(null),
            isTyping: activeChatIsTyping
          }
        ) })
      ] })
    ] });
  };
  var ChatWidget_default = ChatWidget;

  // components/PromotionModal.tsx
  var import_react87 = __toESM(require_react(), 1);
  var import_jsx_runtime116 = __toESM(require_jsx_runtime(), 1);
  var PromotionModal = ({ product, onClose, onSave }) => {
    const [promoPrice, setPromoPrice] = (0, import_react87.useState)(product.promotionPrice?.toString() || "");
    const [startDate, setStartDate] = (0, import_react87.useState)(product.promotionStartDate || "");
    const [endDate, setEndDate] = (0, import_react87.useState)(product.promotionEndDate || "");
    const [error, setError] = (0, import_react87.useState)("");
    const handleSave = () => {
      const priceValue = parseFloat(promoPrice);
      if (isNaN(priceValue) || priceValue <= 0) {
        setError("Veuillez saisir un prix valide.");
        return;
      }
      if (priceValue >= product.price) {
        setError("Le prix promotionnel doit \xEAtre inf\xE9rieur au prix original.");
        return;
      }
      if (startDate && endDate && new Date(startDate) > new Date(endDate)) {
        setError("La date de d\xE9but doit \xEAtre ant\xE9rieure \xE0 la date de fin.");
        return;
      }
      setError("");
      onSave(product.id, priceValue, startDate, endDate);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime116.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-2xl p-6 max-w-md w-full relative", children: [
      /* @__PURE__ */ (0, import_jsx_runtime116.jsx)("button", { onClick: onClose, className: "absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300", children: /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(XIcon, { className: "h-6 w-6" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)("div", { className: "flex items-center gap-3 text-xl font-semibold text-gray-800 dark:text-white mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(TagIcon, { className: "w-6 h-6 text-kmer-green" }),
        "Mettre en Promotion"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)("div", { className: "border-t border-b dark:border-gray-700 py-4 my-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime116.jsx)("p", { className: "font-semibold text-lg", children: product.name }),
        /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)("p", { className: "text-gray-500 dark:text-gray-400", children: [
          "Prix original : ",
          /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)("span", { className: "font-bold", children: [
            product.price.toLocaleString("fr-CM"),
            " FCFA"
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)("div", { className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime116.jsx)("label", { htmlFor: "promoPrice", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Nouveau prix promotionnel (FCFA)" }),
          /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
            "input",
            {
              type: "number",
              id: "promoPrice",
              value: promoPrice,
              onChange: (e) => setPromoPrice(e.target.value),
              className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-kmer-green focus:border-kmer-green dark:bg-gray-700 dark:border-gray-600",
              placeholder: "Ex: 12000",
              required: true
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime116.jsx)("label", { htmlFor: "startDate", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Date de d\xE9but (optionnel)" }),
            /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
              "input",
              {
                type: "date",
                id: "startDate",
                value: startDate,
                onChange: (e) => setStartDate(e.target.value),
                className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-kmer-green focus:border-kmer-green dark:bg-gray-700 dark:border-gray-600"
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime116.jsx)("label", { htmlFor: "endDate", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Date de fin (optionnel)" }),
            /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
              "input",
              {
                type: "date",
                id: "endDate",
                value: endDate,
                onChange: (e) => setEndDate(e.target.value),
                className: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-kmer-green focus:border-kmer-green dark:bg-gray-700 dark:border-gray-600"
              }
            )
          ] })
        ] }),
        error && /* @__PURE__ */ (0, import_jsx_runtime116.jsx)("p", { className: "text-red-500 text-sm mt-1", children: error })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)("div", { className: "mt-6 flex justify-end gap-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime116.jsx)("button", { onClick: onClose, className: "bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-800 dark:text-white font-bold py-2 px-4 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors", children: "Annuler" }),
        /* @__PURE__ */ (0, import_jsx_runtime116.jsx)("button", { onClick: handleSave, className: "bg-kmer-green text-white font-bold py-2 px-4 rounded-lg hover:bg-green-700 transition-colors", children: "Enregistrer la promotion" })
      ] })
    ] }) });
  };
  var PromotionModal_default = PromotionModal;

  // components/PaymentModal.tsx
  var import_react88 = __toESM(require_react(), 1);
  var import_jsx_runtime117 = __toESM(require_jsx_runtime(), 1);
  var getPaymentIcon = (id) => {
    switch (id) {
      case "pm1":
        return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(OrangeMoneyLogo, { className: "h-10 w-16" });
      case "pm2":
        return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(MtnMomoLogo, { className: "h-10 w-16" });
      case "pm3":
        return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(VisaIcon, { className: "h-10 w-16" });
      case "pm4":
        return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(MastercardIcon, { className: "h-10 w-16" });
      case "pm5":
        return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(PaypalIcon, { className: "h-10 w-16" });
      default:
        return null;
    }
  };
  var PaymentModal = ({ paymentRequest, paymentMethods, onClose }) => {
    const [step, setStep] = (0, import_react88.useState)("selection");
    const [selectedMethodId, setSelectedMethodId] = (0, import_react88.useState)(paymentMethods[0]?.id || null);
    const [phoneNumber, setPhoneNumber] = (0, import_react88.useState)("");
    const [error, setError] = (0, import_react88.useState)("");
    const handlePay = () => {
      if (!selectedMethodId) {
        setError("Veuillez s\xE9lectionner un moyen de paiement.");
        return;
      }
      if (["pm1", "pm2"].includes(selectedMethodId) && !/^[6-9]\d{8}$/.test(phoneNumber)) {
        setError("Veuillez entrer un num\xE9ro de t\xE9l\xE9phone camerounais valide (ex: 699887766).");
        return;
      }
      setError("");
      setStep("processing");
      setTimeout(() => {
        setStep("success");
        setTimeout(() => {
          paymentRequest.onSuccess({
            methodId: selectedMethodId,
            transactionId: `TXN_${Date.now()}`,
            phoneNumber
          });
        }, 1500);
      }, 2500);
    };
    const renderContent = () => {
      switch (step) {
        case "selection":
          return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(import_jsx_runtime117.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)("div", { className: "text-center mb-6", children: [
              /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: paymentRequest.reason }),
              /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)("p", { className: "text-4xl font-bold text-gray-800 dark:text-white mt-2", children: [
                paymentRequest.amount.toLocaleString("fr-CM"),
                " FCFA"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2", children: "Choisissez un moyen de paiement" }),
              /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("div", { className: "grid grid-cols-2 gap-3", children: paymentMethods.map((method) => {
                const IconComponent = getPaymentIcon(method.id);
                return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(
                  "button",
                  {
                    onClick: () => setSelectedMethodId(method.id),
                    className: `p-3 border-2 rounded-lg flex items-center justify-center transition-colors h-16 ${selectedMethodId === method.id ? "border-kmer-green" : "border-gray-200 dark:border-gray-600 hover:border-gray-300"}`,
                    children: method.imageUrl ? /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("img", { src: method.imageUrl, alt: method.name, className: "h-10 object-contain" }) : IconComponent
                  },
                  method.id
                );
              }) })
            ] }),
            selectedMethodId && ["pm1", "pm2"].includes(selectedMethodId) && /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)("div", { className: "mt-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("label", { htmlFor: "phoneNumber", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Num\xE9ro de t\xE9l\xE9phone" }),
              /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(
                "input",
                {
                  type: "tel",
                  id: "phoneNumber",
                  value: phoneNumber,
                  onChange: (e) => setPhoneNumber(e.target.value.replace(/\D/g, "")),
                  placeholder: "699887766",
                  className: "mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
                }
              )
            ] }),
            error && /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("p", { className: "text-red-500 text-sm mt-2 text-center", children: error }),
            /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(
              "button",
              {
                onClick: handlePay,
                className: "w-full mt-6 bg-kmer-green text-white font-bold py-3 rounded-lg hover:bg-green-700 transition-colors",
                children: "Payer"
              }
            )
          ] });
        case "processing":
          return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)("div", { className: "text-center py-12", children: [
            /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)("svg", { className: "animate-spin h-12 w-12 text-kmer-green mx-auto", xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", children: [
              /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("circle", { className: "opacity-25", cx: "12", cy: "12", r: "10", stroke: "currentColor", strokeWidth: "4" }),
              /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("path", { className: "opacity-75", fill: "currentColor", d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("p", { className: "mt-4 font-semibold text-gray-700 dark:text-gray-300", children: "Traitement en cours..." }),
            /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: "Veuillez confirmer sur votre t\xE9l\xE9phone si n\xE9cessaire." })
          ] });
        case "success":
          return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)("div", { className: "text-center py-12", children: [
            /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(CheckCircleIcon, { className: "w-16 h-16 text-kmer-green mx-auto mb-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("h3", { className: "text-xl font-bold text-gray-800 dark:text-white", children: "Paiement r\xE9ussi !" }),
            /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("p", { className: "text-gray-500 dark:text-gray-400", children: "Votre transaction a \xE9t\xE9 valid\xE9e." })
          ] });
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-60 z-50 flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-2xl p-6 max-w-sm w-full relative animate-in", children: [
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("button", { onClick: onClose, className: "absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300", children: /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(XIcon, { className: "h-6 w-6" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("h2", { className: "text-2xl font-bold text-center mb-4 text-gray-800 dark:text-white", children: "Finaliser le Paiement" }),
      renderContent()
    ] }) });
  };
  var PaymentModal_default = PaymentModal;

  // components/MaintenancePage.tsx
  var import_react89 = __toESM(require_react(), 1);
  var import_jsx_runtime118 = __toESM(require_jsx_runtime(), 1);
  var MaintenancePage = ({ message, reopenDate }) => {
    const calculateTimeLeft = () => {
      const difference = +new Date(reopenDate) - +/* @__PURE__ */ new Date();
      let timeLeft2 = {};
      if (difference > 0) {
        timeLeft2 = {
          jours: Math.floor(difference / (1e3 * 60 * 60 * 24)),
          heures: Math.floor(difference / (1e3 * 60 * 60) % 24),
          minutes: Math.floor(difference / 1e3 / 60 % 60),
          secondes: Math.floor(difference / 1e3 % 60)
        };
      }
      return timeLeft2;
    };
    const [timeLeft, setTimeLeft] = (0, import_react89.useState)(calculateTimeLeft());
    (0, import_react89.useEffect)(() => {
      const timer = setTimeout(() => {
        setTimeLeft(calculateTimeLeft());
      }, 1e3);
      return () => clearTimeout(timer);
    });
    const hasTimeLeft = Object.keys(timeLeft).length > 0;
    const handleExitMaintenance = () => {
      try {
        const settingsJSON = localStorage.getItem("siteSettings");
        if (settingsJSON) {
          const settings = JSON.parse(settingsJSON);
          if (settings.maintenanceMode) {
            settings.maintenanceMode.isEnabled = false;
            localStorage.setItem("siteSettings", JSON.stringify(settings));
          }
        }
        window.location.reload();
      } catch (e) {
        console.error("Could not exit maintenance mode:", e);
        alert("Impossible de quitter le mode maintenance automatiquement. Veuillez essayer de vider le cache de votre navigateur.");
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)("div", { className: "bg-gray-100 dark:bg-gray-900 min-h-screen flex items-center justify-center p-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)("div", { className: "text-center bg-white dark:bg-gray-800 p-12 rounded-lg shadow-xl max-w-2xl w-full", children: [
        /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(Cog8ToothIcon, { className: "h-16 w-16 text-kmer-green mx-auto mb-6 animate-spin-slow" }),
        /* @__PURE__ */ (0, import_jsx_runtime118.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white mb-4", children: "Site en Maintenance" }),
        /* @__PURE__ */ (0, import_jsx_runtime118.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-8 text-lg", children: message }),
        hasTimeLeft && /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime118.jsx)("p", { className: "text-gray-500 dark:text-gray-300 mb-4", children: "Nous serons de retour dans :" }),
          /* @__PURE__ */ (0, import_jsx_runtime118.jsx)("div", { className: "flex justify-center items-center gap-4 text-center", children: Object.entries(timeLeft).map(([unit, value]) => /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)("div", { className: "bg-gray-100 dark:bg-gray-700/50 shadow-inner rounded-lg p-3 min-w-[70px]", children: [
            /* @__PURE__ */ (0, import_jsx_runtime118.jsx)("div", { className: "text-3xl font-bold text-kmer-green", children: String(value).padStart(2, "0") }),
            /* @__PURE__ */ (0, import_jsx_runtime118.jsx)("div", { className: "text-xs uppercase text-gray-500 dark:text-gray-400", children: unit })
          ] }, unit)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime118.jsx)("button", { onClick: handleExitMaintenance, className: "mt-8 text-sm text-gray-500 dark:text-gray-400 hover:underline", children: "Cliquer ici pour tenter de forcer la sortie du mode maintenance." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)("style", { children: `
        @keyframes spin-slow {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
        .animate-spin-slow {
          animation: spin-slow 5s linear infinite;
        }
      ` })
    ] });
  };
  var MaintenancePage_default = MaintenancePage;

  // components/StructuredData.tsx
  var import_react90 = __toESM(require_react(), 1);
  var import_jsx_runtime119 = __toESM(require_jsx_runtime(), 1);
  var StructuredData = ({ navigation: navigation2, siteData, t }) => {
    const { page, selectedProduct, selectedCategoryId } = navigation2;
    const { allCategories } = siteData;
    const getCategoryBreadcrumbs = (categoryId) => {
      if (!categoryId) return [];
      const breadcrumbs = [];
      let currentCategory = allCategories.find((c) => c.id === categoryId);
      while (currentCategory) {
        breadcrumbs.unshift({
          "@type": "ListItem",
          position: breadcrumbs.length + 2,
          name: t(currentCategory.name),
          item: `https://www.kmerzone.cm?page=category&id=${currentCategory.id}`
        });
        currentCategory = allCategories.find((c) => c.id === currentCategory?.parentId);
      }
      return breadcrumbs;
    };
    const jsonLd = (0, import_react90.useMemo)(() => {
      const baseBreadcrumb = {
        "@type": "ListItem",
        position: 1,
        name: "Accueil",
        item: "https://www.kmerzone.cm"
      };
      switch (page) {
        case "product":
          if (selectedProduct) {
            const approvedReviews = selectedProduct.reviews.filter((r) => r.status === "approved");
            const breadcrumbs2 = getCategoryBreadcrumbs(selectedProduct.categoryId);
            const productSchema = {
              "@context": "https://schema.org",
              "@type": "Product",
              name: selectedProduct.name,
              image: selectedProduct.imageUrls,
              description: selectedProduct.description,
              sku: selectedProduct.sku || selectedProduct.id,
              brand: {
                "@type": "Brand",
                name: selectedProduct.brand || selectedProduct.vendor
              },
              offers: {
                "@type": "Offer",
                url: `https://www.kmerzone.cm?page=product&id=${selectedProduct.id}`,
                priceCurrency: "XAF",
                price: selectedProduct.promotionPrice || selectedProduct.price,
                availability: selectedProduct.stock > 0 ? "https://schema.org/InStock" : "https://schema.org/OutOfStock",
                seller: {
                  "@type": "Organization",
                  name: selectedProduct.vendor
                }
              },
              ...approvedReviews.length > 0 && {
                aggregateRating: {
                  "@type": "AggregateRating",
                  ratingValue: (approvedReviews.reduce((acc, r) => acc + r.rating, 0) / approvedReviews.length).toFixed(1),
                  reviewCount: approvedReviews.length
                }
              }
            };
            const breadcrumbSchema = {
              "@context": "https://schema.org",
              "@type": "BreadcrumbList",
              itemListElement: [
                baseBreadcrumb,
                ...breadcrumbs2,
                {
                  "@type": "ListItem",
                  position: breadcrumbs2.length + 2,
                  name: selectedProduct.name
                }
              ]
            };
            return [productSchema, breadcrumbSchema];
          }
          break;
        case "category":
          const breadcrumbs = getCategoryBreadcrumbs(selectedCategoryId);
          if (breadcrumbs.length > 0) {
            const breadcrumbSchema = {
              "@context": "https://schema.org",
              "@type": "BreadcrumbList",
              itemListElement: [baseBreadcrumb, ...breadcrumbs]
            };
            return [breadcrumbSchema];
          }
          break;
        default:
          return [{
            "@context": "https://schema.org",
            "@type": "WebSite",
            url: "https://www.kmerzone.cm",
            potentialAction: {
              "@type": "SearchAction",
              target: {
                "@type": "EntryPoint",
                urlTemplate: "https://www.kmerzone.cm?search={search_term_string}"
              },
              "query-input": "required name=search_term_string"
            }
          }];
      }
      return [];
    }, [page, selectedProduct, selectedCategoryId, allCategories, t]);
    if (!jsonLd || jsonLd.length === 0) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(
      "script",
      {
        type: "application/ld+json",
        dangerouslySetInnerHTML: { __html: JSON.stringify(jsonLd.length === 1 ? jsonLd[0] : jsonLd) }
      }
    );
  };
  var StructuredData_default = StructuredData;

  // App.tsx
  var import_jsx_runtime120 = __toESM(require_jsx_runtime(), 1);
  var AnnouncementBanner = ({ announcements, dismissed, onDismiss }) => {
    const activeAnnouncement = (0, import_react91.useMemo)(() => {
      const now = /* @__PURE__ */ new Date();
      return announcements.find(
        (a) => a.isActive && !dismissed.includes(a.id) && new Date(a.startDate) <= now && new Date(a.endDate) >= now
      );
    }, [announcements, dismissed]);
    if (!activeAnnouncement) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)("div", { className: "bg-kmer-green text-white px-4 py-2 flex items-center justify-center text-center text-sm relative", children: [
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(MegaphoneIcon, { className: "w-5 h-5 mr-2 flex-shrink-0" }),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("span", { children: activeAnnouncement.content }),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("button", { onClick: () => onDismiss(activeAnnouncement.id), className: "absolute right-4 p-1", children: /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(XIcon, { className: "w-4 h-4" }) })
    ] });
  };
  var App = () => {
    const { user, login, logout, register, resetPassword } = useAuth();
    const { t } = useLanguage();
    const siteData = useSiteData();
    const navigation2 = useAppNavigation(siteData.allCategories, siteData.allStores, siteData.allOrders, siteData.siteContent);
    const { isModalOpen, modalProduct, closeModal } = useUI();
    const [isLoginOpen, setIsLoginOpen] = (0, import_react91.useState)(false);
    const [isForgotPasswordOpen, setIsForgotPasswordOpen] = (0, import_react91.useState)(false);
    const [promotionModalProduct, setPromotionModalProduct] = (0, import_react91.useState)(null);
    const [paymentRequest, setPaymentRequest] = (0, import_react91.useState)(null);
    const handleLoginSuccess = (0, import_react91.useCallback)((loggedInUser) => {
      setIsLoginOpen(false);
      if (loggedInUser.role === "seller" || loggedInUser.role === "enterprise") {
        navigation2.navigateToSellerDashboard();
      } else if (loggedInUser.role === "superadmin") {
        navigation2.navigateToSuperAdminDashboard();
      } else if (loggedInUser.role === "delivery_agent") {
        navigation2.navigateToDeliveryAgentDashboard();
      } else if (loggedInUser.role === "depot_agent" || loggedInUser.role === "depot_manager") {
        navigation2.navigateToDepotAgentDashboard();
      }
    }, [navigation2]);
    const handleSelectSellerType = (0, import_react91.useCallback)((type) => {
      setIsLoginOpen(false);
      if (type === "service") {
        navigation2.navigateToBecomeServiceProvider();
      } else {
        navigation2.navigateToBecomeSeller();
      }
    }, [navigation2]);
    const handleLogout = (0, import_react91.useCallback)(() => {
      logout();
      navigation2.navigateToHome();
    }, [logout, navigation2]);
    const handleOpenLogin = (0, import_react91.useCallback)(() => setIsLoginOpen(true), []);
    const handleCloseLogin = (0, import_react91.useCallback)(() => setIsLoginOpen(false), []);
    const handleOpenForgotPassword = (0, import_react91.useCallback)(() => {
      setIsLoginOpen(false);
      setIsForgotPasswordOpen(true);
    }, []);
    const handleCloseForgotPassword = (0, import_react91.useCallback)(() => setIsForgotPasswordOpen(false), []);
    const handleResetPasswordSubmit = (0, import_react91.useCallback)(async (email) => {
      await resetPassword(email);
      alert(t("app.passwordResetEmailSent", email));
      setIsForgotPasswordOpen(false);
    }, [resetPassword, t]);
    if (siteData.isLoading) {
      return /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("div", { className: "min-h-screen flex items-center justify-center", children: "Chargement..." });
    }
    if (siteData.error) {
      return /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("div", { className: "min-h-screen flex items-center justify-center p-4 bg-red-50 dark:bg-gray-900", children: /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)("div", { className: "max-w-2xl w-full bg-white dark:bg-gray-800 shadow-lg rounded-lg p-8 text-center border-t-4 border-red-500", children: [
        /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(ExclamationTriangleIcon, { className: "h-12 w-12 text-red-500 mx-auto mb-4" }),
        /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("h1", { className: "text-2xl font-bold text-gray-800 dark:text-white", children: "Erreur de Connexion au Backend" }),
        /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("p", { className: "mt-2 text-gray-600 dark:text-gray-400", children: siteData.error }),
        /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)("div", { className: "mt-6 text-left text-sm bg-gray-100 dark:bg-gray-700 p-4 rounded-md space-y-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("h2", { className: "font-semibold text-gray-700 dark:text-gray-200", children: "Conseils de d\xE9pannage :" }),
          /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)("ul", { className: "list-disc list-inside text-gray-600 dark:text-gray-300 space-y-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)("li", { children: [
              "Assurez-vous que le serveur de d\xE9veloppement est bien d\xE9marr\xE9 (g\xE9n\xE9ralement avec la commande ",
              /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("code", { children: "npm run start" }),
              ")."
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("li", { children: "V\xE9rifiez la console du terminal o\xF9 vous avez lanc\xE9 le serveur pour y d\xE9celer des messages d'erreur, notamment des erreurs de connexion \xE0 la base de donn\xE9es." }),
            /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)("li", { children: [
              "Ex\xE9cutez le script ",
              /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("code", { children: "npm run seed" }),
              ' et assurez-vous qu\'il se termine sans erreur. Si des erreurs de type `ETIMEDOUT` apparaissent, vous devez probablement autoriser votre adresse IP dans les param\xE8tres "Network Access" de votre cluster MongoDB Atlas.'
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
          "button",
          {
            onClick: () => window.location.reload(),
            className: "mt-6 bg-red-500 text-white font-bold py-2 px-6 rounded-full hover:bg-red-600 transition-colors",
            children: "R\xE9essayer"
          }
        )
      ] }) });
    }
    if (siteData.siteSettings?.maintenanceMode.isEnabled) {
      return /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(MaintenancePage_default, { message: siteData.siteSettings.maintenanceMode.message, reopenDate: siteData.siteSettings.maintenanceMode.reopenDate });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)("div", { className: "flex flex-col min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100", children: [
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StructuredData_default, { navigation: navigation2, siteData, t }),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(AnnouncementBanner, { announcements: siteData.allAnnouncements, dismissed: siteData.dismissedAnnouncements, onDismiss: siteData.handleDismissAnnouncement }),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
        Header,
        {
          categories: siteData.allCategories,
          onNavigateHome: navigation2.navigateToHome,
          onNavigateCart: navigation2.navigateToCart,
          onNavigateToStores: navigation2.navigateToStores,
          onNavigateToPromotions: navigation2.navigateToPromotions,
          onNavigateToCategory: navigation2.navigateToCategory,
          onNavigateToBecomeSeller: navigation2.navigateToBecomeSeller,
          onNavigateToSellerDashboard: navigation2.navigateToSellerDashboard,
          onNavigateToSellerProfile: navigation2.navigateToSellerProfile,
          onNavigateToOrderHistory: navigation2.navigateToOrderHistory,
          onNavigateToSuperAdminDashboard: navigation2.navigateToSuperAdminDashboard,
          onNavigateToFlashSales: navigation2.navigateToFlashSales,
          onNavigateToWishlist: navigation2.navigateToWishlist,
          onNavigateToDeliveryAgentDashboard: navigation2.navigateToDeliveryAgentDashboard,
          onNavigateToDepotAgentDashboard: navigation2.navigateToDepotAgentDashboard,
          onNavigateToBecomePremium: navigation2.navigateToBecomePremium,
          onNavigateToAccount: navigation2.navigateToAccount,
          onNavigateToVisualSearch: navigation2.navigateToVisualSearch,
          onNavigateToServices: navigation2.navigateToServices,
          onOpenLogin: handleOpenLogin,
          onLogout: handleLogout,
          onSearch: navigation2.handleSearch,
          isChatEnabled: siteData.siteSettings?.isChatEnabled ?? false,
          isPremiumProgramEnabled: siteData.siteSettings?.customerLoyaltyProgram.isEnabled ?? false,
          logoUrl: siteData.siteSettings?.logoUrl || "",
          notifications: siteData.allNotifications.filter((n) => n.userId === user?.id),
          onMarkNotificationAsRead: siteData.handleMarkNotificationAsRead,
          onNavigateFromNotification: navigation2.handleNavigateFromNotification
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("main", { className: "flex-grow", children: /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
        PageRouter_default,
        {
          navigation: navigation2,
          siteData,
          setPromotionModalProduct,
          setPaymentRequest
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
        Footer_default,
        {
          onNavigate: navigation2.navigateToInfoPage,
          logoUrl: siteData.siteSettings?.logoUrl || "",
          paymentMethods: siteData.allPaymentMethods,
          socialLinks: siteData.siteSettings?.socialLinks,
          companyName: siteData.siteSettings?.companyName || ""
        }
      ),
      isLoginOpen && /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(LoginModal_default, { onClose: handleCloseLogin, onLoginSuccess: handleLoginSuccess, onForgotPassword: handleOpenForgotPassword, onSelectSellerType: handleSelectSellerType }),
      isForgotPasswordOpen && /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(ForgotPasswordModal_default, { onClose: handleCloseForgotPassword, onEmailSubmit: handleResetPasswordSubmit }),
      isModalOpen && modalProduct && /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(AddToCartModal_default, { product: modalProduct, onClose: closeModal, onNavigateToCart: () => {
        closeModal();
        navigation2.navigateToCart();
      } }),
      navigation2.viewingStoriesFor && /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(StoryViewer_default, { store: navigation2.viewingStoriesFor, onClose: navigation2.handleCloseStories, allProducts: siteData.allProducts, onProductClick: navigation2.navigateToProduct }),
      siteData.siteSettings?.isChatEnabled && /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(ChatWidget_default, { allUsers: siteData.allUsers, createNotification: siteData.createNotification }),
      promotionModalProduct && /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(PromotionModal_default, { product: promotionModalProduct, onClose: () => setPromotionModalProduct(null), onSave: (...args) => {
        siteData.handleSetPromotion(...args);
        setPromotionModalProduct(null);
      } }),
      paymentRequest && /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(PaymentModal_default, { paymentRequest, paymentMethods: siteData.allPaymentMethods, onClose: () => setPaymentRequest(null) })
    ] });
  };

  // index.tsx
  var import_jsx_runtime121 = __toESM(require_jsx_runtime(), 1);
  var AppProviders = ({ children }) => /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(AuthProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(ThemeProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(LanguageProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(UIProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(CartProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(WishlistProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(ComparisonProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(ChatProvider, { children }) }) }) }) }) }) }) });
  var rootElement = document.getElementById("root");
  if (!rootElement) {
    throw new Error("Could not find root element to mount to");
  }
  var root = import_client.default.createRoot(rootElement);
  root.render(
    /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(AppProviders, { children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(App, {}) })
  );
})();
/*! Bundled license information:

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-client.development.js:
  (**
   * @license React
   * react-dom-client.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@google/genai/dist/web/index.mjs:
  (**
   * @license
   * Copyright 2025 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)

@google/genai/dist/web/index.mjs:
  (**
   * @license
   * Copyright 2025 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)

@google/genai/dist/web/index.mjs:
  (**
   * @license
   * Copyright 2025 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)

@google/genai/dist/web/index.mjs:
  (**
   * @license
   * Copyright 2025 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)

@google/genai/dist/web/index.mjs:
  (**
   * @license
   * Copyright 2025 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
//# sourceMappingURL=bundle.js.map
